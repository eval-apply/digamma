((call
   (push.const core primitives)
   (apply.gloc.of |.require-scheme-library| "../stdlib/core/exceptions.scm" . 5121))
 (call
   (push.const . syntax)
   (push.const . |core.exceptions'guard|)
   (push.const
     ...
     (else)
     ("../stdlib/core/exceptions.scm" . 21509)
     ((_ (var clause ... (else e1 e2 ...)) b1 b2 ...)
      ((call/cc
         (lambda (guard-k)
           (with-exception-handler
             (lambda (condition)
               ((call/cc
                  (lambda (handler-k)
                    (guard-k
                      (lambda () (let ((var condition)) (cond clause ... (else e1 e2 ...)))))))))
             (lambda ()
               (call-with-values
                 (lambda () b1 b2 ...)
                 (lambda args (guard-k (lambda () (apply values args))))))))))
      ((b2 . 1) (b1 . 0) (e2 . 1) (e1 . 0) (clause . 1) (var . 0))
      (values
        apply
        args
        call-with-values
        else
        cond
        let
        handler-k
        condition
        with-exception-handler
        guard-k
        lambda
        call/cc))
     ((_ (var clause ...) b1 b2 ...)
      ((call/cc
         (lambda (guard-k)
           (with-exception-handler
             (lambda (condition)
               ((call/cc
                  (lambda (handler-k)
                    (guard-k
                      (lambda ()
                        (let ((var condition))
                          (cond clause
                                ...
                                (else (handler-k (lambda () (raise-continuable condition))))))))))))
             (lambda ()
               (call-with-values
                 (lambda () b1 b2 ...)
                 (lambda args (guard-k (lambda () (apply values args))))))))))
      ((b2 . 1) (b1 . 0) (clause . 1) (var . 0))
      (values
        apply
        args
        call-with-values
        raise-continuable
        else
        cond
        let
        handler-k
        condition
        with-exception-handler
        guard-k
        lambda
        call/cc)))
   (push.const
     (call-with-values import . |.call-with-values|)
     (b2 unbound)
     (call/cc import . |.call/cc|)
     (handler-k unbound)
     (with-exception-handler import . |.with-exception-handler|)
     (let import . |.let|)
     (e1 unbound)
     (b1 unbound)
     (guard-k unbound)
     (else import . |.else|)
     (condition import . |.condition|)
     (cond import . |.cond|)
     (_ import . |._|)
     (lambda import . |.lambda|)
     (raise-continuable import . |.raise-continuable|)
     (args unbound)
     (clause unbound)
     (... import . |....|)
     (e2 unbound)
     (guard import . |core.exceptions'guard|)
     (apply import . |.apply|)
     (var unbound)
     (values import . |.values|))
   (apply.gloc.of |.set-top-level-macro!| "../stdlib/core/exceptions.scm" . 5121))
 (push.const . core.exceptions)
 (push.const . #f)
 (push.const
   (with-exception-handler import . |.with-exception-handler|)
   (guard import . |core.exceptions'guard|)
   (raise import . |.raise|)
   (raise-continuable import . |.raise-continuable|)
   (else import . |.else|)
   (=> import . |.=>|))
 (apply.gloc.of |.intern-scheme-library| "../stdlib/core/exceptions.scm" . 5121))

((call
   (push.const core primitives)
   (apply.gloc.of |.require-scheme-library| (|.require-scheme-library| '(core primitives))))
 (call
   (push.const core intrinsics)
   (apply.gloc.of |.require-scheme-library| (|.require-scheme-library| '(core intrinsics))))
 (call
   (push.const
     (save unbound)
     (e1 unbound)
     (let import . |.let|)
     (value unbound)
     (parameterize import . |core.parameters'parameterize|)
     (parameterize-aux import . |core.parameters'parameterize-aux|)
     (dynamic-wind import . |.dynamic-wind|)
     (body unbound)
     (e2 unbound)
     (_ import . |._|)
     (param unbound)
     (tmp1 unbound)
     (set! import . |.set!|)
     (lambda import . |.lambda|)
     (new unbound)
     (more unbound)
     (... import . |....|)
     (tmp2 unbound)
     (stash unbound))
   (extend . 1)
   (call
     (push.const . syntax)
     (push.const . |core.parameters'parameterize-aux|)
     (push.const
       ...
       ()
       ("../stdlib/core/parameters.scm" . 13317)
       ((_ () ((save new param value) ...) body ...)
        (let ((save #f) ... (new value) ...)
          (dynamic-wind
            (lambda () (set! save (param)) ... (param new) ...)
            (lambda () body ...)
            (lambda () (param save) ...)))
        ((body . 1) (value . 1) (param . 1) (new . 1) (save . 1))
        (set! lambda dynamic-wind let))
       ((_ ((e1 e2) . more) (stash ...) body ...)
        (parameterize-aux more (stash ... (tmp1 tmp2 e1 e2)) body ...)
        ((body . 1) (stash . 1) (more . 0) (e2 . 0) (e1 . 0))
        (tmp2 tmp1 parameterize-aux)))
     (push.iloc.0 . 0)
     (apply.gloc.of
       |.set-top-level-macro!|
       (|.set-top-level-macro!|
         'syntax
         '|core.parameters'parameterize-aux|
         '(...
            ()
            ("../stdlib/core/parameters.scm" . 13317)
            ((_ () ((save new param value) ...) body ...)
             (let ((save #f) ... (new value) ...)
               (dynamic-wind
                 (lambda () (set! save (param)) ... (param new) ...)
                 (lambda () body ...)
                 (lambda () (param save) ...)))
             ((body . 1) (value . 1) (param . 1) (new . 1) (save . 1))
             (set! lambda dynamic-wind let))
            ((_ ((e1 e2) . more) (stash ...) body ...)
             (parameterize-aux more (stash ... (tmp1 tmp2 e1 e2)) body ...)
             ((body . 1) (stash . 1) (more . 0) (e2 . 0) (e1 . 0))
             (tmp2 tmp1 parameterize-aux)))
         |.L7|)))
   (push.const . syntax)
   (push.const . |core.parameters'parameterize|)
   (push.const
     ...
     ()
     ("../stdlib/core/parameters.scm" . 24581)
     ((_ ((e1 e2) ...) body ...)
      (parameterize-aux ((e1 e2) ...) () body ...)
      ((body . 1) (e2 . 1) (e1 . 1))
      (parameterize-aux)))
   (push.iloc.0 . 0)
   (apply.gloc.of
     |.set-top-level-macro!|
     (|.set-top-level-macro!|
       'syntax
       '|core.parameters'parameterize|
       '(...
          ()
          ("../stdlib/core/parameters.scm" . 24581)
          ((_ ((e1 e2) ...) body ...)
           (parameterize-aux ((e1 e2) ...) () body ...)
           ((body . 1) (e2 . 1) (e1 . 1))
           (parameterize-aux)))
       |.L7|)))
 (push.const . core.parameters)
 (push.const . #f)
 (push.const
   (make-parameter import . |.make-parameter|)
   (parameterize import . |core.parameters'parameterize|))
 (apply.gloc.of
   |.intern-scheme-library|
   (|.intern-scheme-library|
     'core.parameters
     #f
     '((make-parameter import . |.make-parameter|)
       (parameterize import . |core.parameters'parameterize|)))))

((call
   (push.const core primitives)
   (apply.gloc.of |.require-scheme-library| "../stdlib/core/arithmetic.scm" . 5121))
 (close
   (2 0 . |core.arithmetic'flmod|)
   (push.iloc.0 . 0)
   (push.iloc.0 . 0)
   (push.iloc.0 . 1)
   (push.subr.gloc.of |.fldiv| 2 "../stdlib/core/arithmetic.scm" . 128019)
   (push.iloc.0 . 1)
   (push.subr.gloc.of |.fl*| 2 "../stdlib/core/arithmetic.scm" . 128014)
   (ret.subr.gloc.of |.fl-| "../stdlib/core/arithmetic.scm" . 128007))
 (set.gloc.of |core.arithmetic'flmod|)
 (close
   (2 0 . |core.arithmetic'fldiv-and-mod|)
   (push.iloc.0 . 0)
   (push.iloc.0 . 1)
   (push.subr.gloc.of |.fldiv| 2 "../stdlib/core/arithmetic.scm" . 132112)
   (extend . 1)
   (push.iloc.0 . 0)
   (push.iloc.1 . 0)
   (push.iloc.0 . 0)
   (push.iloc.1 . 1)
   (push.subr.gloc.of |.fl*| 2 "../stdlib/core/arithmetic.scm" . 133146)
   (push.subr.gloc.of |.fl-| 2 "../stdlib/core/arithmetic.scm" . 133139)
   (ret.subr.gloc.of |.values| "../stdlib/core/arithmetic.scm" . 133129))
 (set.gloc.of |core.arithmetic'fldiv-and-mod|)
 (close
   (2 0 . |core.arithmetic'flmod0|)
   (push.iloc.0 . 0)
   (push.iloc.0 . 0)
   (push.iloc.0 . 1)
   (push.subr.gloc.of |.fldiv0| 2 "../stdlib/core/arithmetic.scm" . 137235)
   (push.iloc.0 . 1)
   (push.subr.gloc.of |.fl*| 2 "../stdlib/core/arithmetic.scm" . 137230)
   (ret.subr.gloc.of |.fl-| "../stdlib/core/arithmetic.scm" . 137223))
 (set.gloc.of |core.arithmetic'flmod0|)
 (close
   (2 0 . |core.arithmetic'fldiv0-and-mod0|)
   (push.iloc.0 . 0)
   (push.iloc.0 . 1)
   (push.subr.gloc.of |.fldiv0| 2 "../stdlib/core/arithmetic.scm" . 141329)
   (extend . 1)
   (push.iloc.0 . 0)
   (push.iloc.1 . 0)
   (push.iloc.0 . 0)
   (push.iloc.1 . 1)
   (push.subr.gloc.of |.fl*| 2 "../stdlib/core/arithmetic.scm" . 142363)
   (push.subr.gloc.of |.fl-| 2 "../stdlib/core/arithmetic.scm" . 142356)
   (ret.subr.gloc.of |.values| "../stdlib/core/arithmetic.scm" . 142345))
 (set.gloc.of |core.arithmetic'fldiv0-and-mod0|)
 (push.const . 2)
 (subr.gloc.of |.fixnum-width| 0)
 (push)
 (subr.gloc.of |.expt| 2 "../stdlib/core/arithmetic.scm" . 144410)
 (set.gloc.of |core.arithmetic'2^fixnum-width|)
 (close
   (2 0 . |core.arithmetic'fxmod|)
   (push.iloc.0 . 0)
   (push.iloc.0 . 0)
   (push.iloc.0 . 1)
   (push.subr.gloc.of |.fxdiv| 2 "../stdlib/core/arithmetic.scm" . 148499)
   (push.iloc.0 . 1)
   (push.subr.gloc.of |.fx*| 2 "../stdlib/core/arithmetic.scm" . 148494)
   (ret.subr.gloc.of |.fx-| "../stdlib/core/arithmetic.scm" . 148487))
 (set.gloc.of |core.arithmetic'fxmod|)
 (close
   (2 0 . |core.arithmetic'fxdiv-and-mod|)
   (push.iloc.0 . 0)
   (push.iloc.0 . 1)
   (push.subr.gloc.of |.fxdiv| 2 "../stdlib/core/arithmetic.scm" . 152592)
   (extend . 1)
   (push.iloc.0 . 0)
   (push.iloc.1 . 0)
   (push.iloc.0 . 0)
   (push.iloc.1 . 1)
   (push.subr.gloc.of |.fx*| 2 "../stdlib/core/arithmetic.scm" . 153626)
   (push.subr.gloc.of |.fx-| 2 "../stdlib/core/arithmetic.scm" . 153619)
   (ret.subr.gloc.of |.values| "../stdlib/core/arithmetic.scm" . 153609))
 (set.gloc.of |core.arithmetic'fxdiv-and-mod|)
 (close
   (2 0 . |core.arithmetic'fxmod0|)
   (push.iloc.0 . 0)
   (push.iloc.0 . 0)
   (push.iloc.0 . 1)
   (push.subr.gloc.of |.fxdiv0| 2 "../stdlib/core/arithmetic.scm" . 157715)
   (push.iloc.0 . 1)
   (push.subr.gloc.of |.fx*| 2 "../stdlib/core/arithmetic.scm" . 157710)
   (ret.subr.gloc.of |.fx-| "../stdlib/core/arithmetic.scm" . 157703))
 (set.gloc.of |core.arithmetic'fxmod0|)
 (close
   (2 0 . |core.arithmetic'fxdiv0-and-mod0|)
   (push.iloc.0 . 0)
   (push.iloc.0 . 1)
   (push.subr.gloc.of |.fxdiv0| 2 "../stdlib/core/arithmetic.scm" . 161809)
   (extend . 1)
   (push.iloc.0 . 0)
   (push.iloc.1 . 0)
   (push.iloc.0 . 0)
   (push.iloc.1 . 1)
   (push.subr.gloc.of |.fx*| 2 "../stdlib/core/arithmetic.scm" . 162843)
   (push.subr.gloc.of |.fx-| 2 "../stdlib/core/arithmetic.scm" . 162836)
   (ret.subr.gloc.of |.values| "../stdlib/core/arithmetic.scm" . 162825))
 (set.gloc.of |core.arithmetic'fxdiv0-and-mod0|)
 (close
   (3 0 . |core.arithmetic'fx+/carry|)
   (push.iloc.0 . 0)
   (push.iloc.0 . 1)
   (push.iloc.0 . 2)
   (push.subr.gloc.of |.+| 3 "../stdlib/core/arithmetic.scm" . 166929)
   (extend . 1)
   (call
     (push.iloc.0 . 0)
     (push.gloc.of |core.arithmetic'2^fixnum-width|)
     (apply.gloc.of |.mod0| "../stdlib/core/arithmetic.scm" . 167954))
   (push)
   (push.iloc.0 . 0)
   (push.gloc.of |core.arithmetic'2^fixnum-width|)
   (push.subr.gloc.of |.div0| 2 "../stdlib/core/arithmetic.scm" . 168978)
   (ret.subr.gloc.of |.values| "../stdlib/core/arithmetic.scm" . 169993))
 (set.gloc.of |core.arithmetic'fx+/carry|)
 (close
   (3 0 . |core.arithmetic'fx-/carry|)
   (push.iloc.0 . 0)
   (push.iloc.0 . 1)
   (push.iloc.0 . 2)
   (push.subr.gloc.of |.-| 3 "../stdlib/core/arithmetic.scm" . 174097)
   (extend . 1)
   (call
     (push.iloc.0 . 0)
     (push.gloc.of |core.arithmetic'2^fixnum-width|)
     (apply.gloc.of |.mod0| "../stdlib/core/arithmetic.scm" . 175122))
   (push)
   (push.iloc.0 . 0)
   (push.gloc.of |core.arithmetic'2^fixnum-width|)
   (push.subr.gloc.of |.div0| 2 "../stdlib/core/arithmetic.scm" . 176146)
   (ret.subr.gloc.of |.values| "../stdlib/core/arithmetic.scm" . 177161))
 (set.gloc.of |core.arithmetic'fx-/carry|)
 (close
   (3 0 . |core.arithmetic'fx*/carry|)
   (push.iloc.0 . 0)
   (push.iloc.0 . 1)
   (push.subr.gloc.of |.*| 2 "../stdlib/core/arithmetic.scm" . 181268)
   (push.iloc.0 . 2)
   (push.subr.gloc.of |.+| 2 "../stdlib/core/arithmetic.scm" . 181265)
   (extend . 1)
   (call
     (push.iloc.0 . 0)
     (push.gloc.of |core.arithmetic'2^fixnum-width|)
     (apply.gloc.of |.mod0| "../stdlib/core/arithmetic.scm" . 182290))
   (push)
   (push.iloc.0 . 0)
   (push.gloc.of |core.arithmetic'2^fixnum-width|)
   (push.subr.gloc.of |.div0| 2 "../stdlib/core/arithmetic.scm" . 183314)
   (ret.subr.gloc.of |.values| "../stdlib/core/arithmetic.scm" . 184329))
 (set.gloc.of |core.arithmetic'fx*/carry|)
 (close
   (4 0 . |core.arithmetic'fxrotate-bit-field|)
   (push.iloc.0 . 2)
   (push.iloc.0 . 1)
   (push.subr.gloc.of |.fx-| 2 "../stdlib/core/arithmetic.scm" . 192533)
   (extend . 1)
   (push.iloc.0 . 0)
   (subr.gloc.of |.fxpositive?| 1 "../stdlib/core/arithmetic.scm" . 193549)
   (if.true
     (push.iloc.1 . 0)
     (push.iloc.1 . 1)
     (push.iloc.1 . 2)
     (push.iloc.1 . 0)
     (push.iloc.1 . 1)
     (push.iloc.1 . 2)
     (push.iloc.1 . 3)
     (push.subr.gloc.of |.fx-| 2 "../stdlib/core/arithmetic.scm" . 197686)
     (push.subr.gloc.of |.fxbit-field| 3 "../stdlib/core/arithmetic.scm" . 197665)
     (push.iloc.1 . 3)
     (push.subr.gloc.of |.fxarithmetic-shift-left| 2 "../stdlib/core/arithmetic.scm" . 196640)
     (push.iloc.1 . 0)
     (push.iloc.1 . 1)
     (push.iloc.1 . 2)
     (push.subr.gloc.of |.fxbit-field| 3 "../stdlib/core/arithmetic.scm" . 199713)
     (push.iloc.0 . 0)
     (push.iloc.1 . 3)
     (push.subr.gloc.of |.fx-| 2 "../stdlib/core/arithmetic.scm" . 199739)
     (push.subr.gloc.of |.fxarithmetic-shift-right| 2 "../stdlib/core/arithmetic.scm" . 198688)
     (push.subr.gloc.of |.fxior| 2 "../stdlib/core/arithmetic.scm" . 195615)
     (ret.subr.gloc.of |.fxcopy-bit-field| "../stdlib/core/arithmetic.scm" . 194573))
   (ret.iloc 1 . 0))
 (set.gloc.of |core.arithmetic'fxrotate-bit-field|)
 (close
   (3 0 . |core.arithmetic'fxreverse-bit-field|)
   (push.iloc.0 . 2)
   (push.iloc.0 . 1)
   (push.subr.gloc.of |.fx-| 2 "../stdlib/core/arithmetic.scm" . 207893)
   (extend . 1)
   (push.iloc.0 . 0)
   (subr.gloc.of |.fxpositive?| 1 "../stdlib/core/arithmetic.scm" . 208909)
   (if.true
     (extend.enclose+
       (3 0 . loop)
       (push.iloc.0 . 2)
       (subr.gloc.of |.fxzero?| 1 "../stdlib/core/arithmetic.scm" . 210963)
       (if.true
         (push.iloc 3 . 0)
         (push.iloc 3 . 1)
         (push.iloc 3 . 2)
         (push.iloc.0 . 0)
         (ret.subr.gloc.of |.fxcopy-bit-field| "../stdlib/core/arithmetic.scm" . 211987))
       (push.iloc.0 . 1)
       (push.const . 1)
       (push.subr.gloc.of |.fxand| 2 "../stdlib/core/arithmetic.scm" . 213024)
       (subr.gloc.of |.fxzero?| 1 "../stdlib/core/arithmetic.scm" . 213015)
       (if.true
         (push.iloc.0 . 0)
         (push.const . 1)
         (push.subr.gloc.of |.fxarithmetic-shift-left| 2 "../stdlib/core/arithmetic.scm" . 214045)
         (push.iloc.0 . 1)
         (push.const . 1)
         (push.subr.gloc.of |.fxarithmetic-shift-right| 2 "../stdlib/core/arithmetic.scm" . 215069)
         (push.iloc.0 . 2)
         (push.const . 1)
         (push.subr.gloc.of |.fx-| 2 "../stdlib/core/arithmetic.scm" . 216093)
         (apply.iloc+ (1 . 0) "../stdlib/core/arithmetic.scm" . 214039))
       (push.iloc.0 . 0)
       (push.const . 1)
       (push.subr.gloc.of |.fxarithmetic-shift-left| 2 "../stdlib/core/arithmetic.scm" . 217124)
       (push.const . 1)
       (push.subr.gloc.of |.fxior| 2 "../stdlib/core/arithmetic.scm" . 217117)
       (push.iloc.0 . 1)
       (push.const . 1)
       (push.subr.gloc.of |.fxarithmetic-shift-right| 2 "../stdlib/core/arithmetic.scm" . 218141)
       (push.iloc.0 . 2)
       (push.const . 1)
       (push.subr.gloc.of |.fx-| 2 "../stdlib/core/arithmetic.scm" . 219165)
       (apply.iloc+ (1 . 0) "../stdlib/core/arithmetic.scm" . 217111))
     (push.const . 0)
     (push.iloc 2 . 0)
     (push.iloc 2 . 1)
     (push.iloc 2 . 2)
     (push.subr.gloc.of |.fxbit-field| 3 "../stdlib/core/arithmetic.scm" . 209964)
     (push.iloc.1 . 0)
     (apply.iloc+ (0 . 0) "../stdlib/core/arithmetic.scm" . 210959))
   (ret.iloc 1 . 0))
 (set.gloc.of |core.arithmetic'fxreverse-bit-field|)
 (gloc.of |.bitwise-arithmetic-shift|)
 (set.gloc.of |core.arithmetic'bitwise-arithmetic-shift-left|)
 (close
   (3 0 . |core.arithmetic'bitwise-if|)
   (push.iloc.0 . 0)
   (push.iloc.0 . 1)
   (push.subr.gloc.of |.bitwise-and| 2 "../stdlib/core/arithmetic.scm" . 226324)
   (push.iloc.0 . 0)
   (push.subr.gloc.of |.bitwise-not| 1 "../stdlib/core/arithmetic.scm" . 227361)
   (push.iloc.0 . 2)
   (push.subr.gloc.of |.bitwise-and| 2 "../stdlib/core/arithmetic.scm" . 227348)
   (ret.subr.gloc.of |.bitwise-ior| "../stdlib/core/arithmetic.scm" . 226311))
 (set.gloc.of |core.arithmetic'bitwise-if|)
 (close
   (2 0 . |core.arithmetic'bitwise-bit-set?|)
   (push.const . 1)
   (push.iloc.0 . 1)
   (push.subr.gloc.of |.bitwise-arithmetic-shift| 2 "../stdlib/core/arithmetic.scm" . 231456)
   (push.iloc.0 . 0)
   (push.subr.gloc.of |.bitwise-and| 2 "../stdlib/core/arithmetic.scm" . 231443)
   (push.subr.gloc.of |.zero?| 1 "../stdlib/core/arithmetic.scm" . 231436)
   (ret.subr.gloc.of |.not| "../stdlib/core/arithmetic.scm" . 231431))
 (set.gloc.of |core.arithmetic'bitwise-bit-set?|)
 (close
   (3 0 . |core.arithmetic'bitwise-copy-bit|)
   (push.const . 1)
   (push.iloc.0 . 1)
   (push.subr.gloc.of |.bitwise-arithmetic-shift| 2 "../stdlib/core/arithmetic.scm" . 235540)
   (push.iloc.0 . 2)
   (push.iloc.0 . 1)
   (push.subr.gloc.of |.bitwise-arithmetic-shift| 2 "../stdlib/core/arithmetic.scm" . 236570)
   (push.iloc.0 . 0)
   (apply.gloc.of |core.arithmetic'bitwise-if| "../stdlib/core/arithmetic.scm" . 236553))
 (set.gloc.of |core.arithmetic'bitwise-copy-bit|)
 (close
   (3 0 . |core.arithmetic'bitwise-bit-field|)
   (push.iloc.0 . 0)
   (push.const . -1)
   (push.iloc.0 . 2)
   (push.subr.gloc.of |.bitwise-arithmetic-shift| 2 "../stdlib/core/arithmetic.scm" . 240672)
   (push.subr.gloc.of |.bitwise-not| 1 "../stdlib/core/arithmetic.scm" . 240659)
   (push.subr.gloc.of |.bitwise-and| 2 "../stdlib/core/arithmetic.scm" . 241705)
   (push.iloc.0 . 1)
   (apply.gloc.of
     |core.arithmetic'bitwise-arithmetic-shift-right|
     "../stdlib/core/arithmetic.scm"
     .
     241673))
 (set.gloc.of |core.arithmetic'bitwise-bit-field|)
 (close
   (4 0 . |core.arithmetic'bitwise-copy-bit-field|)
   (push.const . -1)
   (push.iloc.0 . 1)
   (push.subr.gloc.of |.bitwise-arithmetic-shift| 2 "../stdlib/core/arithmetic.scm" . 249877)
   (push.const . -1)
   (push.iloc.0 . 2)
   (push.subr.gloc.of |.bitwise-arithmetic-shift| 2 "../stdlib/core/arithmetic.scm" . 250914)
   (push.subr.gloc.of |.bitwise-not| 1 "../stdlib/core/arithmetic.scm" . 250901)
   (push.subr.gloc.of |.bitwise-and| 2 "../stdlib/core/arithmetic.scm" . 251924)
   (push.iloc.0 . 3)
   (push.iloc.0 . 1)
   (push.subr.gloc.of |.bitwise-arithmetic-shift| 2 "../stdlib/core/arithmetic.scm" . 252954)
   (push.iloc.0 . 0)
   (apply.gloc.of |core.arithmetic'bitwise-if| "../stdlib/core/arithmetic.scm" . 252937))
 (set.gloc.of |core.arithmetic'bitwise-copy-bit-field|)
 (close
   (2 0 . |core.arithmetic'bitwise-arithmetic-shift-right|)
   (push.iloc.0 . 0)
   (push.iloc.0 . 1)
   (push.subr.gloc.of |.-| 1 "../stdlib/core/arithmetic.scm" . 257061)
   (ret.subr.gloc.of |.bitwise-arithmetic-shift| "../stdlib/core/arithmetic.scm" . 257031))
 (set.gloc.of |core.arithmetic'bitwise-arithmetic-shift-right|)
 (close
   (4 0 . |core.arithmetic'bitwise-rotate-bit-field|)
   (push.iloc.0 . 2)
   (push.iloc.0 . 1)
   (push.subr.gloc.of |.-| 2 "../stdlib/core/arithmetic.scm" . 265237)
   (extend . 1)
   (push.iloc.0 . 0)
   (subr.gloc.of |.positive?| 1 "../stdlib/core/arithmetic.scm" . 266253)
   (if.true
     (call
       (push.iloc.1 . 3)
       (push.iloc.0 . 0)
       (apply.gloc.of |.mod| "../stdlib/core/arithmetic.scm" . 267291))
     (push)
     (extend . 1)
     (call
       (push.iloc 2 . 0)
       (push.iloc 2 . 1)
       (push.iloc 2 . 2)
       (apply.gloc.of |core.arithmetic'bitwise-bit-field| "../stdlib/core/arithmetic.scm" . 268316))
     (push)
     (extend . 1)
     (push.iloc 3 . 0)
     (push.iloc 3 . 1)
     (push.iloc 3 . 2)
     (push.iloc.0 . 0)
     (push.iloc.1 . 0)
     (push.subr.gloc.of |.bitwise-arithmetic-shift| 2 "../stdlib/core/arithmetic.scm" . 269340)
     (call
       (push.iloc.0 . 0)
       (push.iloc 2 . 0)
       (push.iloc.1 . 0)
       (push.subr.gloc.of |.-| 2 "../stdlib/core/arithmetic.scm" . 270403)
       (apply.gloc.of
         |core.arithmetic'bitwise-arithmetic-shift-right|
         "../stdlib/core/arithmetic.scm"
         .
         270364))
     (push)
     (push.subr.gloc.of |.bitwise-ior| 2 "../stdlib/core/arithmetic.scm" . 271387)
     (apply.gloc.of
       |core.arithmetic'bitwise-copy-bit-field|
       "../stdlib/core/arithmetic.scm"
       .
       272399))
   (ret.iloc 1 . 0))
 (set.gloc.of |core.arithmetic'bitwise-rotate-bit-field|)
 (close
   (3 0 . |core.arithmetic'bitwise-reverse-bit-field|)
   (push.iloc.0 . 2)
   (push.iloc.0 . 1)
   (push.subr.gloc.of |.-| 2 "../stdlib/core/arithmetic.scm" . 280597)
   (extend . 1)
   (push.iloc.0 . 0)
   (subr.gloc.of |.positive?| 1 "../stdlib/core/arithmetic.scm" . 281613)
   (if.true
     (extend.enclose+
       (3 0 . loop)
       (push.iloc.0 . 2)
       (subr.gloc.of |.zero?| 1 "../stdlib/core/arithmetic.scm" . 283667)
       (if.true
         (push.iloc 3 . 0)
         (push.iloc 3 . 1)
         (push.iloc 3 . 2)
         (push.iloc.0 . 0)
         (apply.gloc.of
           |core.arithmetic'bitwise-copy-bit-field|
           "../stdlib/core/arithmetic.scm"
           .
           284691))
       (push.iloc.0 . 1)
       (push.const . 1)
       (push.subr.gloc.of |.bitwise-and| 2 "../stdlib/core/arithmetic.scm" . 285726)
       (subr.gloc.of |.zero?| 1 "../stdlib/core/arithmetic.scm" . 285719)
       (if.true
         (push.iloc.0 . 0)
         (push.const . 1)
         (push.subr.gloc.of |.bitwise-arithmetic-shift| 2 "../stdlib/core/arithmetic.scm" . 286749)
         (call
           (push.iloc.0 . 1)
           (push.const . 1)
           (apply.gloc.of
             |core.arithmetic'bitwise-arithmetic-shift-right|
             "../stdlib/core/arithmetic.scm"
             .
             287773))
         (push)
         (push.n+.iloc (0 . 2) -1 "../stdlib/core/arithmetic.scm" . 288797)
         (apply.iloc+ (1 . 0) "../stdlib/core/arithmetic.scm" . 286743))
       (push.iloc.0 . 0)
       (push.const . 1)
       (push.subr.gloc.of |.bitwise-arithmetic-shift| 2 "../stdlib/core/arithmetic.scm" . 289834)
       (push.const . 1)
       (push.subr.gloc.of |.bitwise-ior| 2 "../stdlib/core/arithmetic.scm" . 289821)
       (call
         (push.iloc.0 . 1)
         (push.const . 1)
         (apply.gloc.of
           |core.arithmetic'bitwise-arithmetic-shift-right|
           "../stdlib/core/arithmetic.scm"
           .
           290845))
       (push)
       (push.n+.iloc (0 . 2) -1 "../stdlib/core/arithmetic.scm" . 291869)
       (apply.iloc+ (1 . 0) "../stdlib/core/arithmetic.scm" . 289815))
     (push.const . 0)
     (call
       (push.iloc 2 . 0)
       (push.iloc 2 . 1)
       (push.iloc 2 . 2)
       (apply.gloc.of |core.arithmetic'bitwise-bit-field| "../stdlib/core/arithmetic.scm" . 282668))
     (push)
     (push.iloc.1 . 0)
     (apply.iloc+ (0 . 0) "../stdlib/core/arithmetic.scm" . 283663))
   (ret.iloc 1 . 0))
 (set.gloc.of |core.arithmetic'bitwise-reverse-bit-field|)
 (push.const . core.arithmetic)
 (push.const . #f)
 (push.const
   (fixnum? import . |.fixnum?|)
   (fixnum-width import . |.fixnum-width|)
   (least-fixnum import . |.least-fixnum|)
   (greatest-fixnum import . |.greatest-fixnum|)
   (fx=? import . |.fx=?|)
   (fx<? import . |.fx<?|)
   (fx>? import . |.fx>?|)
   (fx<=? import . |.fx<=?|)
   (fx>=? import . |.fx>=?|)
   (fxzero? import . |.fxzero?|)
   (fxpositive? import . |.fxpositive?|)
   (fxnegative? import . |.fxnegative?|)
   (fxodd? import . |.fxodd?|)
   (fxeven? import . |.fxeven?|)
   (fxmax import . |.fxmax|)
   (fxmin import . |.fxmin|)
   (fx+ import . |.fx+|)
   (fx* import . |.fx*|)
   (fx- import . |.fx-|)
   (fxdiv import . |.fxdiv|)
   (fxmod import . |core.arithmetic'fxmod|)
   (fxdiv-and-mod import . |core.arithmetic'fxdiv-and-mod|)
   (fxdiv0 import . |.fxdiv0|)
   (fxmod0 import . |core.arithmetic'fxmod0|)
   (fxdiv0-and-mod0 import . |core.arithmetic'fxdiv0-and-mod0|)
   (fx+/carry import . |core.arithmetic'fx+/carry|)
   (fx-/carry import . |core.arithmetic'fx-/carry|)
   (fx*/carry import . |core.arithmetic'fx*/carry|)
   (fxnot import . |.fxnot|)
   (fxand import . |.fxand|)
   (fxior import . |.fxior|)
   (fxxor import . |.fxxor|)
   (fxif import . |.fxif|)
   (fxbit-count import . |.fxbit-count|)
   (fxlength import . |.fxlength|)
   (fxfirst-bit-set import . |.fxfirst-bit-set|)
   (fxbit-set? import . |.fxbit-set?|)
   (fxcopy-bit import . |.fxcopy-bit|)
   (fxbit-field import . |.fxbit-field|)
   (fxcopy-bit-field import . |.fxcopy-bit-field|)
   (fxarithmetic-shift import . |.fxarithmetic-shift|)
   (fxarithmetic-shift-left import . |.fxarithmetic-shift-left|)
   (fxarithmetic-shift-right import . |.fxarithmetic-shift-right|)
   (fxrotate-bit-field import . |core.arithmetic'fxrotate-bit-field|)
   (fxreverse-bit-field import . |core.arithmetic'fxreverse-bit-field|)
   (flonum? import . |.flonum?|)
   (real->flonum import . |.real->flonum|)
   (fl=? import . |.fl=?|)
   (fl<? import . |.fl<?|)
   (fl>? import . |.fl>?|)
   (fl<=? import . |.fl<=?|)
   (fl>=? import . |.fl>=?|)
   (flinteger? import . |.flinteger?|)
   (flzero? import . |.flzero?|)
   (flpositive? import . |.flpositive?|)
   (flnegative? import . |.flnegative?|)
   (flodd? import . |.flodd?|)
   (fleven? import . |.fleven?|)
   (flfinite? import . |.flfinite?|)
   (flinfinite? import . |.flinfinite?|)
   (flnan? import . |.flnan?|)
   (flmax import . |.flmax|)
   (flmin import . |.flmin|)
   (fl+ import . |.fl+|)
   (fl* import . |.fl*|)
   (fl- import . |.fl-|)
   (fl/ import . |.fl/|)
   (fldiv-and-mod import . |core.arithmetic'fldiv-and-mod|)
   (fldiv import . |.fldiv|)
   (flmod import . |core.arithmetic'flmod|)
   (fldiv0-and-mod0 import . |core.arithmetic'fldiv0-and-mod0|)
   (fldiv0 import . |.fldiv0|)
   (flmod0 import . |core.arithmetic'flmod0|)
   (flnumerator import . |.flnumerator|)
   (fldenominator import . |.fldenominator|)
   (flfloor import . |.flfloor|)
   (flceiling import . |.flceiling|)
   (fltruncate import . |.fltruncate|)
   (flround import . |.flround|)
   (flexp import . |.flexp|)
   (flexpt import . |.flexpt|)
   (fllog import . |.fllog|)
   (flsin import . |.flsin|)
   (flcos import . |.flcos|)
   (fltan import . |.fltan|)
   (flasin import . |.flasin|)
   (flacos import . |.flacos|)
   (flatan import . |.flatan|)
   (flabs import . |.flabs|)
   (flsqrt import . |.flsqrt|)
   (fixnum->flonum import . |.fixnum->flonum|)
   (bitwise-not import . |.bitwise-not|)
   (bitwise-and import . |.bitwise-and|)
   (bitwise-ior import . |.bitwise-ior|)
   (bitwise-xor import . |.bitwise-xor|)
   (bitwise-if import . |core.arithmetic'bitwise-if|)
   (bitwise-bit-count import . |.bitwise-bit-count|)
   (bitwise-length import . |.bitwise-length|)
   (bitwise-first-bit-set import . |.bitwise-first-bit-set|)
   (bitwise-bit-set? import . |core.arithmetic'bitwise-bit-set?|)
   (bitwise-copy-bit import . |core.arithmetic'bitwise-copy-bit|)
   (bitwise-bit-field import . |core.arithmetic'bitwise-bit-field|)
   (bitwise-copy-bit-field import . |core.arithmetic'bitwise-copy-bit-field|)
   (bitwise-arithmetic-shift import . |.bitwise-arithmetic-shift|)
   (bitwise-arithmetic-shift-left import . |core.arithmetic'bitwise-arithmetic-shift-left|)
   (bitwise-arithmetic-shift-right import . |core.arithmetic'bitwise-arithmetic-shift-right|)
   (bitwise-rotate-bit-field import . |core.arithmetic'bitwise-rotate-bit-field|)
   (bitwise-reverse-bit-field import . |core.arithmetic'bitwise-reverse-bit-field|)
   (&no-infinities import . |.&no-infinities|)
   (make-no-infinities-violation import . |.make-no-infinities-violation|)
   (no-infinities-violation? import . |.no-infinities-violation?|)
   (&no-nans import . |.&no-nans|)
   (make-no-nans-violation import . |.make-no-nans-violation|)
   (no-nans-violation? import . |.no-nans-violation?|))
 (apply.gloc.of |.intern-scheme-library| "../stdlib/core/arithmetic.scm" . 5121))

((call
   (push.const core primitives)
   (apply.gloc.of |.require-scheme-library| "../stdlib/core/sorting.scm" . 5121))
 (close
   (2 0 . |core.sorting'list-sort|)
   (extend.unbound . 3)
   (push.close+
     (2 0 . merge)
     (iloc.0 . 0)
     (if.null? (ret.iloc 0 . 1))
     (iloc.0 . 1)
     (if.null? (ret.iloc 0 . 0))
     (call
       (push.car.iloc (0 . 1) "../stdlib/core/sorting.scm" . 22551)
       (push.car.iloc (0 . 0) "../stdlib/core/sorting.scm" . 22562)
       (apply.iloc (2 . 0) "../stdlib/core/sorting.scm" . 22545))
     (if.true
       (push.car.iloc (0 . 1) "../stdlib/core/sorting.scm" . 23575)
       (call
         (push.iloc.0 . 0)
         (push.cdr.iloc (0 . 1) "../stdlib/core/sorting.scm" . 23598)
         (apply.iloc+ (1 . 0) "../stdlib/core/sorting.scm" . 23586))
       (ret.cons "../stdlib/core/sorting.scm" . 23569))
     (push.car.iloc (0 . 0) "../stdlib/core/sorting.scm" . 24599)
     (call
       (push.cdr.iloc (0 . 0) "../stdlib/core/sorting.scm" . 24617)
       (push.iloc.0 . 1)
       (apply.iloc+ (1 . 0) "../stdlib/core/sorting.scm" . 24610))
     (ret.cons "../stdlib/core/sorting.scm" . 24593))
   (push.close+
     (2 0 . sort)
     (=n.iloc (0 . 1) 1 "../stdlib/core/sorting.scm" . 28690)
     (if.true
       (push.car.iloc (0 . 0) "../stdlib/core/sorting.scm" . 29720)
       (ret.subr.gloc.of |.list| "../stdlib/core/sorting.scm" . 29714))
     (=n.iloc (0 . 1) 2 "../stdlib/core/sorting.scm" . 30738)
     (if.true
       (call
         (push.cadr.iloc (0 . 0) "../stdlib/core/sorting.scm" . 31772)
         (push.car.iloc (0 . 0) "../stdlib/core/sorting.scm" . 31783)
         (apply.iloc (2 . 0) "../stdlib/core/sorting.scm" . 31766))
       (if.true
         (push.cadr.iloc (0 . 0) "../stdlib/core/sorting.scm" . 32796)
         (push.car.iloc (0 . 0) "../stdlib/core/sorting.scm" . 32807)
         (ret.subr.gloc.of |.list| "../stdlib/core/sorting.scm" . 32790))
       (push.car.iloc (0 . 0) "../stdlib/core/sorting.scm" . 33820)
       (push.cadr.iloc (0 . 0) "../stdlib/core/sorting.scm" . 33830)
       (ret.subr.gloc.of |.list| "../stdlib/core/sorting.scm" . 33814))
     (push.iloc.0 . 1)
     (push.const . 2)
     (push.subr.gloc.of |.div| 2 "../stdlib/core/sorting.scm" . 35869)
     (extend . 1)
     (call
       (push.iloc.1 . 0)
       (push.iloc.0 . 0)
       (apply.iloc+ (2 . 1) "../stdlib/core/sorting.scm" . 36891))
     (push)
     (call
       (push.iloc.1 . 0)
       (push.iloc.0 . 0)
       (push.subr.gloc.of |.list-tail| 2 "../stdlib/core/sorting.scm" . 37921)
       (push.iloc.1 . 1)
       (push.iloc.0 . 0)
       (push.subr.gloc.of |.-| 2 "../stdlib/core/sorting.scm" . 37941)
       (apply.iloc+ (2 . 1) "../stdlib/core/sorting.scm" . 37915))
     (push)
     (apply.iloc+ (2 . 0) "../stdlib/core/sorting.scm" . 36884))
   (push.close+
     (1 0 . divide)
     (extend.enclose+
       (2 0 . loop)
       (cdr.iloc (0 . 1) "../stdlib/core/sorting.scm" . 43035)
       (if.null?
         (push.iloc.0 . 0)
         (push.const)
         (ret.subr.gloc.of |.values| "../stdlib/core/sorting.scm" . 43046))
       (call
         (push.car.iloc (0 . 1) "../stdlib/core/sorting.scm" . 45086)
         (push.cadr.iloc (0 . 1) "../stdlib/core/sorting.scm" . 45096)
         (apply.iloc (4 . 0) "../stdlib/core/sorting.scm" . 45080))
       (if.true
         (push.n+.iloc (0 . 0) 1 "../stdlib/core/sorting.scm" . 46110)
         (push.cdr.iloc (0 . 1) "../stdlib/core/sorting.scm" . 46120)
         (apply.iloc+ (1 . 0) "../stdlib/core/sorting.scm" . 46104))
       (push.iloc.0 . 0)
       (push.cdr.iloc (0 . 1) "../stdlib/core/sorting.scm" . 47140)
       (ret.subr.gloc.of |.values| "../stdlib/core/sorting.scm" . 47128))
     (push.const . 1)
     (push.iloc.1 . 0)
     (apply.iloc+ (0 . 0) "../stdlib/core/sorting.scm" . 43021))
   (enclose . 3)
   (iloc.1 . 1)
   (if.null?.ret.const)
   (push.iloc.1 . 1)
   (push.subr.gloc.of |.length| 1 "../stdlib/core/sorting.scm" . 51225)
   (extend . 1)
   (push.close (0 0) (push.iloc 3 . 1) (apply.iloc+ (2 . 2) "../stdlib/core/sorting.scm" . 52263))
   (push.close
     (2 0)
     (iloc.0 . 1)
     (if.null? (ret.iloc 3 . 1))
     (push.iloc 3 . 1)
     (push.iloc.0 . 0)
     (push.subr.gloc.of |.list-head| 2 "../stdlib/core/sorting.scm" . 55328)
     (call
       (push.iloc.0 . 1)
       (push.iloc.1 . 0)
       (push.iloc.0 . 0)
       (push.subr.gloc.of |.-| 2 "../stdlib/core/sorting.scm" . 56363)
       (apply.iloc+ (2 . 1) "../stdlib/core/sorting.scm" . 56352))
     (push)
     (apply.iloc+ (2 . 0) "../stdlib/core/sorting.scm" . 55321))
   (apply.gloc.of
     |.call-with-values|
     (|.call-with-values|
       (lambda () (|divide`183*| |lst`182*|))
       (lambda (|n`200*| |rest`200*|)
         (if (|.null?| |rest`200*|)
             |lst`182*|
             (|merge`183*|
               (|.list-head| |lst`182*| |n`200*|)
               (|sort`183*| |rest`200*| (|.-| |len`198*| |n`200*|))))))))
 (set.gloc.of |core.sorting'list-sort|)
 (close
   (2 0 . |core.sorting'vector-sort|)
   (push.iloc.0 . 1)
   (push.subr.gloc.of |.vector->list| 1 "../stdlib/core/sorting.scm" . 60434)
   (extend . 1)
   (call
     (push.iloc.1 . 0)
     (push.iloc.0 . 0)
     (apply.gloc.of |core.sorting'list-sort| "../stdlib/core/sorting.scm" . 61461))
   (push)
   (extend . 1)
   (push.iloc.1 . 0)
   (iloc.0 . 0)
   (if.eq? (ret.iloc 2 . 1))
   (push.iloc.0 . 0)
   (ret.subr.gloc.of |.list->vector| "../stdlib/core/sorting.scm" . 64530))
 (set.gloc.of |core.sorting'vector-sort|)
 (close
   (2 0 . |core.sorting'vector-sort!|)
   (push.iloc.0 . 1)
   (push.subr.gloc.of |.vector-length| 1 "../stdlib/core/sorting.scm" . 68625)
   (extend . 1)
   (push.iloc.0 . 0)
   (push.const . 2)
   (push.subr.gloc.of |.div| 2 "../stdlib/core/sorting.scm" . 68669)
   (push.const . 1)
   (push.subr.gloc.of |.+| 2 "../stdlib/core/sorting.scm" . 68666)
   (push.subr.gloc.of |.make-vector| 1 "../stdlib/core/sorting.scm" . 68653)
   (extend . 1)
   (extend.unbound . 2)
   (push.close
     (2 0 . simple-sort!)
     (extend.enclose+
       (1 0 . loop1)
       (iloc.0 . 0)
       (<.iloc (2 . 1) "../stdlib/core/sorting.scm" . 73750)
       (if.true
         (push.iloc.0 . 0)
         (push.vector-ref.iloc (6 . 1) "../stdlib/core/sorting.scm" . 74783)
         (push.iloc.0 . 0)
         (extend . 2)
         (extend.enclose+
           (1 0 . loop2)
           (iloc.0 . 0)
           (<=.iloc (5 . 1) "../stdlib/core/sorting.scm" . 76833)
           (if.true
             (call
               (call
                 (push.iloc.0 . 0)
                 (push.vector-ref.iloc (9 . 1) "../stdlib/core/sorting.scm" . 77867)
                 (push.iloc 2 . 0)
                 (apply.iloc (9 . 0) "../stdlib/core/sorting.scm" . 77861))
               (if.false.ret)
               (iloc.0 . 0)
               (vector-ref.iloc (9 . 1) "../stdlib/core/sorting.scm" . 79919)
               (set.iloc (2 . 0) "../stdlib/core/sorting.scm" . 79911)
               (iloc.0 . 0)
               (set.iloc (2 . 1) "../stdlib/core/sorting.scm" . 80935)
               (ret.const.unspec))
             (push.n+.iloc (0 . 0) 1 "../stdlib/core/sorting.scm" . 81960)
             (apply.iloc+ (1 . 0) "../stdlib/core/sorting.scm" . 81953))
           (push.iloc 9 . 1)
           (push.iloc 2 . 1)
           (push.iloc 3 . 0)
           (push.vector-ref.iloc (9 . 1) "../stdlib/core/sorting.scm" . 84021)
           (subr.gloc.of |.vector-set!| 3 "../stdlib/core/sorting.scm" . 84001)
           (push.iloc 9 . 1)
           (push.iloc 3 . 0)
           (push.iloc 2 . 0)
           (subr.gloc.of |.vector-set!| 3 "../stdlib/core/sorting.scm" . 85025)
           (push.n+.iloc (3 . 0) 1 "../stdlib/core/sorting.scm" . 86056)
           (apply.iloc+ (4 . 0) "../stdlib/core/sorting.scm" . 86049))
         (push.n+.iloc (2 . 0) 1 "../stdlib/core/sorting.scm" . 75815)
         (apply.iloc+ (0 . 0) "../stdlib/core/sorting.scm" . 76826))
       (ret.const.unspec))
     (push.iloc.1 . 0)
     (apply.iloc+ (0 . 0) "../stdlib/core/sorting.scm" . 73743))
   (push.close
     (2 0 . sort!)
     (push.iloc.0 . 1)
     (push.iloc.0 . 0)
     (push.subr.gloc.of |.-| 2 "../stdlib/core/sorting.scm" . 90135)
     (push.const . 10)
     (subr.gloc.of |.>| 2 "../stdlib/core/sorting.scm" . 90132)
     (if.true
       (push.iloc.0 . 0)
       (push.iloc.0 . 1)
       (push.subr.gloc.of |.+| 2 "../stdlib/core/sorting.scm" . 91175)
       (push.const . 2)
       (push.subr.gloc.of |.div| 2 "../stdlib/core/sorting.scm" . 91170)
       (extend . 1)
       (call
         (push.iloc.1 . 0)
         (push.iloc.0 . 0)
         (apply.iloc (2 . 1) "../stdlib/core/sorting.scm" . 92182))
       (call
         (push.n+.iloc (0 . 0) 1 "../stdlib/core/sorting.scm" . 93213)
         (push.iloc.1 . 1)
         (apply.iloc (2 . 1) "../stdlib/core/sorting.scm" . 93206))
       (extend.enclose+
         (2 0 . loop)
         (iloc.0 . 0)
         (>.iloc (2 . 0) "../stdlib/core/sorting.scm" . 95263)
         (if.true
           (extend.enclose+
             (3 0 . loop)
             (call
               (iloc.0 . 0)
               (<=.iloc (5 . 1) "../stdlib/core/sorting.scm" . 97325)
               (if.false.ret)
               (push.iloc.0 . 1)
               (push.iloc 2 . 1)
               (ret.subr.gloc.of |.<| "../stdlib/core/sorting.scm" . 97338))
             (if.true
               (call
                 (push.iloc.0 . 1)
                 (push.vector-ref.iloc (7 . 0) "../stdlib/core/sorting.scm" . 98357)
                 (push.iloc.0 . 0)
                 (push.vector-ref.iloc (9 . 1) "../stdlib/core/sorting.scm" . 98378)
                 (apply.iloc (9 . 0) "../stdlib/core/sorting.scm" . 98351))
               (if.true
                 (push.iloc 9 . 1)
                 (push.iloc.0 . 2)
                 (push.iloc.0 . 1)
                 (push.vector-ref.iloc (7 . 0) "../stdlib/core/sorting.scm" . 99396)
                 (subr.gloc.of |.vector-set!| 3 "../stdlib/core/sorting.scm" . 99375)
                 (push.iloc.0 . 0)
                 (push.n+.iloc (0 . 1) 1 "../stdlib/core/sorting.scm" . 100408)
                 (push.n+.iloc (0 . 2) 1 "../stdlib/core/sorting.scm" . 100417)
                 (apply.iloc+ (1 . 0) "../stdlib/core/sorting.scm" . 100399))
               (push.iloc 9 . 1)
               (push.iloc.0 . 2)
               (push.iloc.0 . 0)
               (push.vector-ref.iloc (9 . 1) "../stdlib/core/sorting.scm" . 102468)
               (subr.gloc.of |.vector-set!| 3 "../stdlib/core/sorting.scm" . 102447)
               (push.n+.iloc (0 . 0) 1 "../stdlib/core/sorting.scm" . 103477)
               (push.iloc.0 . 1)
               (push.n+.iloc (0 . 2) 1 "../stdlib/core/sorting.scm" . 103489)
               (apply.iloc+ (1 . 0) "../stdlib/core/sorting.scm" . 103471))
             (extend.enclose+
               (2 0 . loop)
               (iloc.0 . 0)
               (<.iloc (4 . 1) "../stdlib/core/sorting.scm" . 106545)
               (if.true
                 (push.iloc 11 . 1)
                 (push.iloc.0 . 1)
                 (push.iloc.0 . 0)
                 (push.vector-ref.iloc (9 . 0) "../stdlib/core/sorting.scm" . 107590)
                 (subr.gloc.of |.vector-set!| 3 "../stdlib/core/sorting.scm" . 107569)
                 (push.n+.iloc (0 . 0) 1 "../stdlib/core/sorting.scm" . 108599)
                 (push.n+.iloc (0 . 1) 1 "../stdlib/core/sorting.scm" . 108608)
                 (apply.iloc+ (1 . 0) "../stdlib/core/sorting.scm" . 108593))
               (ret.const.unspec))
             (push.iloc.1 . 1)
             (push.iloc.1 . 2)
             (apply.iloc+ (0 . 0) "../stdlib/core/sorting.scm" . 106538))
           (push.n+.iloc (3 . 0) 1 "../stdlib/core/sorting.scm" . 96302)
           (push.const . 0)
           (push.iloc 4 . 0)
           (apply.iloc+ (0 . 0) "../stdlib/core/sorting.scm" . 97313))
         (push.iloc 5 . 0)
         (push.iloc.0 . 1)
         (push.iloc.0 . 0)
         (push.vector-ref.iloc (7 . 1) "../stdlib/core/sorting.scm" . 110648)
         (subr.gloc.of |.vector-set!| 3 "../stdlib/core/sorting.scm" . 110623)
         (push.n+.iloc (0 . 0) 1 "../stdlib/core/sorting.scm" . 111653)
         (push.n+.iloc (0 . 1) 1 "../stdlib/core/sorting.scm" . 111661)
         (apply.iloc+ (1 . 0) "../stdlib/core/sorting.scm" . 111647))
       (push.iloc 2 . 0)
       (push.const . 0)
       (apply.iloc+ (0 . 0) "../stdlib/core/sorting.scm" . 95256))
     (push.iloc.0 . 0)
     (push.iloc.0 . 1)
     (apply.iloc (1 . 0) "../stdlib/core/sorting.scm" . 113684))
   (enclose . 2)
   (push.const . 0)
   (push.n+.iloc (2 . 0) -1 "../stdlib/core/sorting.scm" . 115730)
   (apply.iloc (0 . 1) "../stdlib/core/sorting.scm" . 115721))
 (set.gloc.of |core.sorting'vector-sort!|)
 (push.const . core.sorting)
 (push.const . #f)
 (push.const
   (list-sort import . |core.sorting'list-sort|)
   (vector-sort import . |core.sorting'vector-sort|)
   (vector-sort! import . |core.sorting'vector-sort!|))
 (apply.gloc.of |.intern-scheme-library| "../stdlib/core/sorting.scm" . 5121))

((call
   (push.const core arithmetic)
   (apply.gloc.of |.require-scheme-library| "../stdlib/core/bytevectors.scm" . 5121))
 (call
   (push.const core primitives)
   (apply.gloc.of |.require-scheme-library| "../stdlib/core/bytevectors.scm" . 5121))
 (close
   (4 0 . |core.bytevectors'bytevector-uint-ref|)
   (push.iloc.0 . 2)
   (const . big)
   (if.eq?
     (push.iloc.0 . 1)
     (push.iloc.0 . 3)
     (push.subr.gloc.of |.+| 2 "../stdlib/core/bytevectors.scm" . 46105)
     (extend . 1)
     (extend.enclose+
       (2 0 . loop)
       (iloc.0 . 0)
       (>=.iloc (2 . 0) "../stdlib/core/bytevectors.scm" . 48150)
       (if.true (ret.iloc 0 . 1))
       (push.n+.iloc (0 . 0) 1 "../stdlib/core/bytevectors.scm" . 50204)
       (push.const . 256)
       (push.iloc.0 . 1)
       (push.subr.gloc.of |.*| 2 "../stdlib/core/bytevectors.scm" . 50215)
       (push.iloc 3 . 0)
       (push.iloc.0 . 0)
       (push.subr.gloc.of |.bytevector-u8-ref| 2 "../stdlib/core/bytevectors.scm" . 50227)
       (push.subr.gloc.of |.+| 2 "../stdlib/core/bytevectors.scm" . 50212)
       (apply.iloc+ (1 . 0) "../stdlib/core/bytevectors.scm" . 50198))
     (push.iloc 2 . 1)
     (push.const . 0)
     (apply.iloc+ (0 . 0) "../stdlib/core/bytevectors.scm" . 48146))
   (push.iloc.0 . 2)
   (const . little)
   (if.eq?
     (extend.enclose+
       (2 0 . loop)
       (iloc.0 . 0)
       (<.iloc (2 . 1) "../stdlib/core/bytevectors.scm" . 53268)
       (if.true (ret.iloc 0 . 1))
       (push.n+.iloc (0 . 0) -1 "../stdlib/core/bytevectors.scm" . 55322)
       (push.const . 256)
       (push.iloc.0 . 1)
       (push.subr.gloc.of |.*| 2 "../stdlib/core/bytevectors.scm" . 55333)
       (push.iloc 2 . 0)
       (push.iloc.0 . 0)
       (push.subr.gloc.of |.bytevector-u8-ref| 2 "../stdlib/core/bytevectors.scm" . 55345)
       (push.subr.gloc.of |.+| 2 "../stdlib/core/bytevectors.scm" . 55330)
       (apply.iloc+ (1 . 0) "../stdlib/core/bytevectors.scm" . 55316))
     (push.iloc.1 . 1)
     (push.iloc.1 . 3)
     (push.const . -1)
     (push.subr.gloc.of |.+| 3 "../stdlib/core/bytevectors.scm" . 52252)
     (push.const . 0)
     (apply.iloc+ (0 . 0) "../stdlib/core/bytevectors.scm" . 53264))
   (push.const . bytevector-uint-ref)
   (push.const . "expected endianness, but got ~r, as argument 3")
   (push.iloc.0 . 2)
   (push.subr.gloc.of |.format| 2 "../stdlib/core/bytevectors.scm" . 58403)
   (push.iloc.0 . 0)
   (push.iloc.0 . 1)
   (push.iloc.0 . 2)
   (push.iloc.0 . 3)
   (push.subr.gloc.of |.list| 4 "../stdlib/core/bytevectors.scm" . 59427)
   (apply.gloc.of |.assertion-violation| "../stdlib/core/bytevectors.scm" . 57358))
 (set.gloc.of |core.bytevectors'bytevector-uint-ref|)
 (close
   (4 0 . |core.bytevectors'bytevector-sint-ref|)
   (push.iloc.0 . 2)
   (const . big)
   (if.eq?
     (push.iloc.0 . 0)
     (push.iloc.0 . 1)
     (push.subr.gloc.of |.bytevector-u8-ref| 2 "../stdlib/core/bytevectors.scm" . 64533)
     (push.const . 127)
     (subr.gloc.of |.>| 2 "../stdlib/core/bytevectors.scm" . 64530)
     (if.true
       (call
         (push.iloc.0 . 0)
         (push.iloc.0 . 1)
         (push.iloc.0 . 2)
         (push.iloc.0 . 3)
         (apply.gloc.of
           |core.bytevectors'bytevector-uint-ref|
           "../stdlib/core/bytevectors.scm"
           .
           65557))
       (push)
       (push.const . 256)
       (push.iloc.0 . 3)
       (push.subr.gloc.of |.expt| 2 "../stdlib/core/bytevectors.scm" . 65600)
       (ret.subr.gloc.of |.-| "../stdlib/core/bytevectors.scm" . 65554))
     (push.iloc.0 . 0)
     (push.iloc.0 . 1)
     (push.iloc.0 . 2)
     (push.iloc.0 . 3)
     (apply.gloc.of
       |core.bytevectors'bytevector-uint-ref|
       "../stdlib/core/bytevectors.scm"
       .
       66578))
   (push.iloc.0 . 2)
   (const . little)
   (if.eq?
     (push.iloc.0 . 0)
     (push.iloc.0 . 1)
     (push.iloc.0 . 3)
     (push.const . -1)
     (push.subr.gloc.of |.+| 3 "../stdlib/core/bytevectors.scm" . 68651)
     (push.subr.gloc.of |.bytevector-u8-ref| 2 "../stdlib/core/bytevectors.scm" . 68629)
     (push.const . 127)
     (subr.gloc.of |.>| 2 "../stdlib/core/bytevectors.scm" . 68626)
     (if.true
       (call
         (push.iloc.0 . 0)
         (push.iloc.0 . 1)
         (push.iloc.0 . 2)
         (push.iloc.0 . 3)
         (apply.gloc.of
           |core.bytevectors'bytevector-uint-ref|
           "../stdlib/core/bytevectors.scm"
           .
           69653))
       (push)
       (push.const . 256)
       (push.iloc.0 . 3)
       (push.subr.gloc.of |.expt| 2 "../stdlib/core/bytevectors.scm" . 69696)
       (ret.subr.gloc.of |.-| "../stdlib/core/bytevectors.scm" . 69650))
     (push.iloc.0 . 0)
     (push.iloc.0 . 1)
     (push.iloc.0 . 2)
     (push.iloc.0 . 3)
     (apply.gloc.of
       |core.bytevectors'bytevector-uint-ref|
       "../stdlib/core/bytevectors.scm"
       .
       70674))
   (push.const . bytevector-uint-ref)
   (push.const . "expected endianness, but got ~r, as argument 3")
   (push.iloc.0 . 2)
   (push.subr.gloc.of |.format| 2 "../stdlib/core/bytevectors.scm" . 73763)
   (push.iloc.0 . 0)
   (push.iloc.0 . 1)
   (push.iloc.0 . 2)
   (push.iloc.0 . 3)
   (push.subr.gloc.of |.list| 4 "../stdlib/core/bytevectors.scm" . 74787)
   (apply.gloc.of |.assertion-violation| "../stdlib/core/bytevectors.scm" . 72718))
 (set.gloc.of |core.bytevectors'bytevector-sint-ref|)
 (close
   (5 0 . |core.bytevectors'bytevector-uint-set!|)
   (call
     (=n.iloc (0 . 2) 0 "../stdlib/core/bytevectors.scm" . 78862)
     (if.true
       (push.iloc.0 . 1)
       (push.iloc.0 . 4)
       (push.subr.gloc.of |.+| 2 "../stdlib/core/bytevectors.scm" . 79897)
       (extend . 1)
       (extend.enclose+
         (1 0 . loop)
         (iloc.0 . 0)
         (>=.iloc (2 . 0) "../stdlib/core/bytevectors.scm" . 81945)
         (if.true (ret.const.unspec))
         (push.iloc 3 . 0)
         (push.iloc.0 . 0)
         (push.const . 0)
         (subr.gloc.of |.bytevector-u8-set!| 3 "../stdlib/core/bytevectors.scm" . 83993)
         (push.n+.iloc (0 . 0) 1 "../stdlib/core/bytevectors.scm" . 85023)
         (apply.iloc+ (1 . 0) "../stdlib/core/bytevectors.scm" . 85017))
       (push.iloc 2 . 1)
       (apply.iloc+ (0 . 0) "../stdlib/core/bytevectors.scm" . 81938))
     (push.const . 0)
     (push.iloc.0 . 2)
     (push.const . 256)
     (push.iloc.0 . 4)
     (push.subr.gloc.of |.expt| 2 "../stdlib/core/bytevectors.scm" . 86039)
     (subr.gloc.of |.<| 3 "../stdlib/core/bytevectors.scm" . 86030)
     (if.true
       (push.iloc.0 . 3)
       (const . big)
       (if.eq?
         (extend.enclose+
           (2 0 . loop)
           (iloc.0 . 0)
           (<.iloc (2 . 1) "../stdlib/core/bytevectors.scm" . 90144)
           (if.true (ret.const.unspec))
           (push.iloc 2 . 0)
           (push.iloc.0 . 0)
           (push.iloc.0 . 1)
           (push.const . 255)
           (push.subr.gloc.of |.bitwise-and| 2 "../stdlib/core/bytevectors.scm" . 92217)
           (subr.gloc.of |.bytevector-u8-set!| 3 "../stdlib/core/bytevectors.scm" . 92192)
           (push.n+.iloc (0 . 0) -1 "../stdlib/core/bytevectors.scm" . 93222)
           (push.iloc.0 . 1)
           (push.const . -8)
           (push.subr.gloc.of
             |.bitwise-arithmetic-shift|
             2
             "../stdlib/core/bytevectors.scm"
             .
             93230)
           (apply.iloc+ (1 . 0) "../stdlib/core/bytevectors.scm" . 93216))
         (push.iloc.1 . 1)
         (push.iloc.1 . 4)
         (push.subr.gloc.of |.+| 2 "../stdlib/core/bytevectors.scm" . 88101)
         (push.const . 1)
         (push.subr.gloc.of |.-| 2 "../stdlib/core/bytevectors.scm" . 88098)
         (push.iloc.1 . 2)
         (apply.iloc+ (0 . 0) "../stdlib/core/bytevectors.scm" . 90137))
       (push.iloc.0 . 3)
       (const . little)
       (if.eq?
         (push.iloc.0 . 1)
         (push.iloc.0 . 4)
         (push.subr.gloc.of |.+| 2 "../stdlib/core/bytevectors.scm" . 95264)
         (extend . 1)
         (extend.enclose+
           (2 0 . loop)
           (iloc.0 . 0)
           (>=.iloc (2 . 0) "../stdlib/core/bytevectors.scm" . 97312)
           (if.true (ret.const.unspec))
           (push.iloc 3 . 0)
           (push.iloc.0 . 0)
           (push.iloc.0 . 1)
           (push.const . 255)
           (push.subr.gloc.of |.bitwise-and| 2 "../stdlib/core/bytevectors.scm" . 99385)
           (subr.gloc.of |.bytevector-u8-set!| 3 "../stdlib/core/bytevectors.scm" . 99360)
           (push.n+.iloc (0 . 0) 1 "../stdlib/core/bytevectors.scm" . 100390)
           (push.iloc.0 . 1)
           (push.const . -8)
           (push.subr.gloc.of
             |.bitwise-arithmetic-shift|
             2
             "../stdlib/core/bytevectors.scm"
             .
             100398)
           (apply.iloc+ (1 . 0) "../stdlib/core/bytevectors.scm" . 100384))
         (push.iloc 2 . 1)
         (push.iloc 2 . 2)
         (apply.iloc+ (0 . 0) "../stdlib/core/bytevectors.scm" . 97305))
       (ret.const.unspec))
     (push.const . bytevector-uint-set!)
     (push.const . "value out of range, ~s as argument 3")
     (push.iloc.0 . 2)
     (push.subr.gloc.of |.format| 2 "../stdlib/core/bytevectors.scm" . 103459)
     (push.iloc.0 . 0)
     (push.iloc.0 . 1)
     (push.iloc.0 . 2)
     (push.iloc.0 . 3)
     (push.iloc.0 . 4)
     (push.subr.gloc.of |.list| 5 "../stdlib/core/bytevectors.scm" . 104483)
     (apply.gloc.of |.assertion-violation| "../stdlib/core/bytevectors.scm" . 102414))
   (ret.const.unspec))
 (set.gloc.of |core.bytevectors'bytevector-uint-set!|)
 (close
   (5 0 . |core.bytevectors'bytevector-sint-set!|)
   (call
     (push.const . 2)
     (push.iloc.0 . 4)
     (push.const . 8)
     (push.subr.gloc.of |.*| 2 "../stdlib/core/bytevectors.scm" . 109602)
     (push.const . 1)
     (push.subr.gloc.of |.-| 2 "../stdlib/core/bytevectors.scm" . 109599)
     (push.subr.gloc.of |.expt| 2 "../stdlib/core/bytevectors.scm" . 109591)
     (extend . 1)
     (push.n+.iloc (0 . 0) 1 "../stdlib/core/bytevectors.scm" . 110618)
     (push.subr.gloc.of |.-| 1 "../stdlib/core/bytevectors.scm" . 110615)
     (push.iloc.1 . 2)
     (push.iloc.0 . 0)
     (subr.gloc.of |.<| 3 "../stdlib/core/bytevectors.scm" . 111629)
     (if.true
       (>n.iloc (1 . 2) 0 "../stdlib/core/bytevectors.scm" . 112657)
       (if.true
         (push.iloc.1 . 0)
         (push.iloc.1 . 1)
         (push.iloc.1 . 2)
         (push.iloc.1 . 3)
         (push.iloc.1 . 4)
         (apply.gloc.of
           |core.bytevectors'bytevector-uint-set!|
           "../stdlib/core/bytevectors.scm"
           .
           113681))
       (push.iloc.1 . 0)
       (push.iloc.1 . 1)
       (push.iloc.1 . 2)
       (push.const . 256)
       (push.iloc.1 . 4)
       (push.subr.gloc.of |.expt| 2 "../stdlib/core/bytevectors.scm" . 114743)
       (push.subr.gloc.of |.+| 2 "../stdlib/core/bytevectors.scm" . 114736)
       (push.iloc.1 . 3)
       (push.iloc.1 . 4)
       (apply.gloc.of
         |core.bytevectors'bytevector-uint-set!|
         "../stdlib/core/bytevectors.scm"
         .
         114705))
     (push.const . bytevector-sint-set!)
     (push.const . "value out of range, ~s as argument 3")
     (push.iloc.1 . 2)
     (push.subr.gloc.of |.format| 2 "../stdlib/core/bytevectors.scm" . 116770)
     (push.iloc.1 . 0)
     (push.iloc.1 . 1)
     (push.iloc.1 . 2)
     (push.iloc.1 . 3)
     (push.iloc.1 . 4)
     (push.subr.gloc.of |.list| 5 "../stdlib/core/bytevectors.scm" . 117794)
     (apply.gloc.of |.assertion-violation| "../stdlib/core/bytevectors.scm" . 115725))
   (ret.const.unspec))
 (set.gloc.of |core.bytevectors'bytevector-sint-set!|)
 (close
   (3 0 . |core.bytevectors'bytevector->uint-list|)
   (extend.enclose+
     (2 0 . loop)
     (>n.iloc (0 . 0) -1 "../stdlib/core/bytevectors.scm" . 123917)
     (if.true
       (push.iloc.0 . 0)
       (push.iloc 2 . 2)
       (push.subr.gloc.of |.-| 2 "../stdlib/core/bytevectors.scm" . 124947)
       (call
         (push.iloc 2 . 0)
         (push.iloc.0 . 0)
         (push.iloc 2 . 1)
         (push.iloc 2 . 2)
         (apply.gloc.of
           |core.bytevectors'bytevector-uint-ref|
           "../stdlib/core/bytevectors.scm"
           .
           124964))
       (push)
       (iloc.0 . 1)
       (push.cons)
       (apply.iloc+ (1 . 0) "../stdlib/core/bytevectors.scm" . 124941))
     (push.iloc 2 . 2)
     (subr.gloc.of |.-| 1 "../stdlib/core/bytevectors.scm" . 125974)
     (=.iloc (0 . 0) "../stdlib/core/bytevectors.scm" . 125969)
     (if.true (ret.iloc 0 . 1))
     (push.const . bytevector->uint-list)
     (push.const . "expected appropriate element size as argument 3, but got ~r")
     (push.iloc 2 . 2)
     (push.subr.gloc.of |.format| 2 "../stdlib/core/bytevectors.scm" . 129062)
     (push.iloc 2 . 0)
     (push.iloc 2 . 1)
     (push.iloc 2 . 2)
     (push.subr.gloc.of |.list| 3 "../stdlib/core/bytevectors.scm" . 130086)
     (apply.gloc.of |.assertion-violation| "../stdlib/core/bytevectors.scm" . 128017))
   (push.iloc.1 . 0)
   (push.subr.gloc.of |.bytevector-length| 1 "../stdlib/core/bytevectors.scm" . 122904)
   (push.iloc.1 . 2)
   (push.subr.gloc.of |.-| 2 "../stdlib/core/bytevectors.scm" . 122901)
   (push.const)
   (apply.iloc+ (0 . 0) "../stdlib/core/bytevectors.scm" . 123913))
 (set.gloc.of |core.bytevectors'bytevector->uint-list|)
 (close
   (3 0 . |core.bytevectors'bytevector->sint-list|)
   (extend.enclose+
     (2 0 . loop)
     (>n.iloc (0 . 0) -1 "../stdlib/core/bytevectors.scm" . 135181)
     (if.true
       (push.iloc.0 . 0)
       (push.iloc 2 . 2)
       (push.subr.gloc.of |.-| 2 "../stdlib/core/bytevectors.scm" . 136211)
       (call
         (push.iloc 2 . 0)
         (push.iloc.0 . 0)
         (push.iloc 2 . 1)
         (push.iloc 2 . 2)
         (apply.gloc.of
           |core.bytevectors'bytevector-sint-ref|
           "../stdlib/core/bytevectors.scm"
           .
           136228))
       (push)
       (iloc.0 . 1)
       (push.cons)
       (apply.iloc+ (1 . 0) "../stdlib/core/bytevectors.scm" . 136205))
     (push.iloc 2 . 2)
     (subr.gloc.of |.-| 1 "../stdlib/core/bytevectors.scm" . 137238)
     (=.iloc (0 . 0) "../stdlib/core/bytevectors.scm" . 137233)
     (if.true (ret.iloc 0 . 1))
     (push.const . bytevector->sint-list)
     (push.const . "expected appropriate element size as argument 3, but got ~r")
     (push.iloc 2 . 2)
     (push.subr.gloc.of |.format| 2 "../stdlib/core/bytevectors.scm" . 140326)
     (push.iloc 2 . 0)
     (push.iloc 2 . 1)
     (push.iloc 2 . 2)
     (push.subr.gloc.of |.list| 3 "../stdlib/core/bytevectors.scm" . 141350)
     (apply.gloc.of |.assertion-violation| "../stdlib/core/bytevectors.scm" . 139281))
   (push.iloc.1 . 0)
   (push.subr.gloc.of |.bytevector-length| 1 "../stdlib/core/bytevectors.scm" . 134168)
   (push.iloc.1 . 2)
   (push.subr.gloc.of |.-| 2 "../stdlib/core/bytevectors.scm" . 134165)
   (push.const)
   (apply.iloc+ (0 . 0) "../stdlib/core/bytevectors.scm" . 135177))
 (set.gloc.of |core.bytevectors'bytevector->sint-list|)
 (close
   (3 0 . |core.bytevectors'uint-list->bytevector|)
   (push.iloc.0 . 2)
   (push.iloc.0 . 0)
   (push.subr.gloc.of |.length| 1 "../stdlib/core/bytevectors.scm" . 145450)
   (push.subr.gloc.of |.*| 2 "../stdlib/core/bytevectors.scm" . 145442)
   (push.subr.gloc.of |.make-bytevector| 1 "../stdlib/core/bytevectors.scm" . 145425)
   (extend . 1)
   (extend.enclose+
     (2 0 . loop)
     (iloc.0 . 1)
     (if.null? (ret.iloc 2 . 0))
     (call
       (push.iloc 2 . 0)
       (push.iloc.0 . 0)
       (push.car.iloc (0 . 1) "../stdlib/core/bytevectors.scm" . 149549)
       (push.iloc 3 . 1)
       (push.iloc 3 . 2)
       (apply.gloc.of
         |core.bytevectors'bytevector-uint-set!|
         "../stdlib/core/bytevectors.scm"
         .
         149522))
     (push.iloc.0 . 0)
     (push.iloc 3 . 2)
     (push.subr.gloc.of |.+| 2 "../stdlib/core/bytevectors.scm" . 150552)
     (push.cdr.iloc (0 . 1) "../stdlib/core/bytevectors.scm" . 150563)
     (apply.iloc+ (1 . 0) "../stdlib/core/bytevectors.scm" . 150546))
   (push.const . 0)
   (push.iloc 2 . 0)
   (apply.iloc+ (0 . 0) "../stdlib/core/bytevectors.scm" . 147467))
 (set.gloc.of |core.bytevectors'uint-list->bytevector|)
 (close
   (3 0 . |core.bytevectors'sint-list->bytevector|)
   (push.iloc.0 . 2)
   (push.iloc.0 . 0)
   (push.subr.gloc.of |.length| 1 "../stdlib/core/bytevectors.scm" . 154666)
   (push.subr.gloc.of |.*| 2 "../stdlib/core/bytevectors.scm" . 154658)
   (push.subr.gloc.of |.make-bytevector| 1 "../stdlib/core/bytevectors.scm" . 154641)
   (extend . 1)
   (extend.enclose+
     (2 0 . loop)
     (iloc.0 . 1)
     (if.null? (ret.iloc 2 . 0))
     (call
       (push.iloc 2 . 0)
       (push.iloc.0 . 0)
       (push.car.iloc (0 . 1) "../stdlib/core/bytevectors.scm" . 158765)
       (push.iloc 3 . 1)
       (push.iloc 3 . 2)
       (apply.gloc.of
         |core.bytevectors'bytevector-sint-set!|
         "../stdlib/core/bytevectors.scm"
         .
         158738))
     (push.iloc.0 . 0)
     (push.iloc 3 . 2)
     (push.subr.gloc.of |.+| 2 "../stdlib/core/bytevectors.scm" . 159768)
     (push.cdr.iloc (0 . 1) "../stdlib/core/bytevectors.scm" . 159779)
     (apply.iloc+ (1 . 0) "../stdlib/core/bytevectors.scm" . 159762))
   (push.const . 0)
   (push.iloc 2 . 0)
   (apply.iloc+ (0 . 0) "../stdlib/core/bytevectors.scm" . 156683))
 (set.gloc.of |core.bytevectors'sint-list->bytevector|)
 (call
   (push.const
     (native unbound)
     (endianness import . |core.bytevectors'endianness|)
     (big unbound)
     (x unbound)
     (little unbound)
     (_ import . |._|)
     (div256 import . |core.bytevectors'div256|)
     (mod256 import . |core.bytevectors'mod256|)
     (bitwise-arithmetic-shift import . |.bitwise-arithmetic-shift|)
     (... import . |....|)
     (bitwise-and import . |.bitwise-and|)
     (quote import . |.quote|)
     (native-endianness import . |.native-endianness|))
   (extend . 1)
   (call
     (push.const . syntax)
     (push.const . |core.bytevectors'div256|)
     (push.const
       ...
       ()
       ("../stdlib/core/bytevectors.scm" . 29701)
       ((_ x) (bitwise-arithmetic-shift x -8) ((x . 0)) (bitwise-arithmetic-shift)))
     (push.iloc.0 . 0)
     (apply.gloc.of |.set-top-level-macro!| "../stdlib/core/bytevectors.scm" . 5121))
   (call
     (push.const . syntax)
     (push.const . |core.bytevectors'mod256|)
     (push.const
       ...
       ()
       ("../stdlib/core/bytevectors.scm" . 33797)
       ((_ x) (bitwise-and x 255) ((x . 0)) (bitwise-and)))
     (push.iloc.0 . 0)
     (apply.gloc.of |.set-top-level-macro!| "../stdlib/core/bytevectors.scm" . 5121))
   (push.const . syntax)
   (push.const . |core.bytevectors'endianness|)
   (push.const
     ...
     (big little native)
     ("../stdlib/core/bytevectors.scm" . 37893)
     ((_ big) 'big () (big quote))
     ((_ little) 'little () (little quote))
     ((_ native) (native-endianness) () (native-endianness)))
   (push.iloc.0 . 0)
   (apply.gloc.of |.set-top-level-macro!| "../stdlib/core/bytevectors.scm" . 5121))
 (push.const . core.bytevectors)
 (push.const . #f)
 (push.const
   (endianness import . |core.bytevectors'endianness|)
   (native-endianness import . |.native-endianness|)
   (bytevector? import . |.bytevector?|)
   (make-bytevector import . |.make-bytevector|)
   (bytevector-length import . |.bytevector-length|)
   (bytevector=? import . |.bytevector=?|)
   (bytevector-fill! import . |.bytevector-fill!|)
   (bytevector-copy! import . |.bytevector-copy!|)
   (bytevector-copy import . |.bytevector-copy|)
   (bytevector-u8-ref import . |.bytevector-u8-ref|)
   (bytevector-s8-ref import . |.bytevector-s8-ref|)
   (bytevector-u8-set! import . |.bytevector-u8-set!|)
   (bytevector-s8-set! import . |.bytevector-s8-set!|)
   (bytevector->u8-list import . |.bytevector->u8-list|)
   (u8-list->bytevector import . |.u8-list->bytevector|)
   (bytevector-uint-ref import . |core.bytevectors'bytevector-uint-ref|)
   (bytevector-sint-ref import . |core.bytevectors'bytevector-sint-ref|)
   (bytevector-uint-set! import . |core.bytevectors'bytevector-uint-set!|)
   (bytevector-sint-set! import . |core.bytevectors'bytevector-sint-set!|)
   (bytevector->uint-list import . |core.bytevectors'bytevector->uint-list|)
   (bytevector->sint-list import . |core.bytevectors'bytevector->sint-list|)
   (uint-list->bytevector import . |core.bytevectors'uint-list->bytevector|)
   (sint-list->bytevector import . |core.bytevectors'sint-list->bytevector|)
   (bytevector-u16-ref import . |.bytevector-u16-ref|)
   (bytevector-s16-ref import . |.bytevector-s16-ref|)
   (bytevector-u16-native-ref import . |.bytevector-u16-native-ref|)
   (bytevector-s16-native-ref import . |.bytevector-s16-native-ref|)
   (bytevector-u16-set! import . |.bytevector-u16-set!|)
   (bytevector-s16-set! import . |.bytevector-s16-set!|)
   (bytevector-u16-native-set! import . |.bytevector-u16-native-set!|)
   (bytevector-s16-native-set! import . |.bytevector-s16-native-set!|)
   (bytevector-u32-ref import . |.bytevector-u32-ref|)
   (bytevector-s32-ref import . |.bytevector-s32-ref|)
   (bytevector-u32-native-ref import . |.bytevector-u32-native-ref|)
   (bytevector-s32-native-ref import . |.bytevector-s32-native-ref|)
   (bytevector-u32-set! import . |.bytevector-u32-set!|)
   (bytevector-s32-set! import . |.bytevector-s32-set!|)
   (bytevector-u32-native-set! import . |.bytevector-u32-native-set!|)
   (bytevector-s32-native-set! import . |.bytevector-s32-native-set!|)
   (bytevector-u64-ref import . |.bytevector-u64-ref|)
   (bytevector-s64-ref import . |.bytevector-s64-ref|)
   (bytevector-u64-native-ref import . |.bytevector-u64-native-ref|)
   (bytevector-s64-native-ref import . |.bytevector-s64-native-ref|)
   (bytevector-u64-set! import . |.bytevector-u64-set!|)
   (bytevector-s64-set! import . |.bytevector-s64-set!|)
   (bytevector-u64-native-set! import . |.bytevector-u64-native-set!|)
   (bytevector-s64-native-set! import . |.bytevector-s64-native-set!|)
   (bytevector-ieee-single-ref import . |.bytevector-ieee-single-ref|)
   (bytevector-ieee-single-native-ref import . |.bytevector-ieee-single-native-ref|)
   (bytevector-ieee-single-set! import . |.bytevector-ieee-single-set!|)
   (bytevector-ieee-single-native-set! import . |.bytevector-ieee-single-native-set!|)
   (bytevector-ieee-double-ref import . |.bytevector-ieee-double-ref|)
   (bytevector-ieee-double-native-ref import . |.bytevector-ieee-double-native-ref|)
   (bytevector-ieee-double-set! import . |.bytevector-ieee-double-set!|)
   (bytevector-ieee-double-native-set! import . |.bytevector-ieee-double-native-set!|))
 (apply.gloc.of |.intern-scheme-library| "../stdlib/core/bytevectors.scm" . 5121))

((close
   (1 0)
   (push.const . with-syntax)
   (push.const . "value does not match to pattern")
   (push.const (d dnew))
   (apply.gloc.of |.syntax-violation| "../stdlib/core/syntax-case.scm" . 33797))
 (set.gloc.of |.L126|)
 (close
   (1 0)
   (push.gloc.of |.vars|)
   (push.iloc.0 . 0)
   (push.const)
   (push.const _ ((p e0) ...) e1 e2 ...)
   (push.const . #f)
   (push.gloc.of |.L108|)
   (push.subr.gloc.of |.list| 3 "../stdlib/core/syntax-case.scm" . 34823)
   (apply.gloc.of |.syntax-dispatch| "../stdlib/core/syntax-case.scm" . 34823))
 (set.gloc.of |.L117|)
 (close
   (1 0)
   (push.gloc.of |.vars|)
   (push.iloc.0 . 0)
   (push.const)
   (push.const _ (name . args) . body)
   (push.const . #f)
   (push.gloc.of |.L136|)
   (push.subr.gloc.of |.list| 3 "../stdlib/core/syntax-case.scm" . 49159)
   (push.const _ name body)
   (push.const . #f)
   (push.gloc.of |.L107|)
   (push.subr.gloc.of |.list| 3 "../stdlib/core/syntax-case.scm" . 49159)
   (apply.gloc.of |.syntax-dispatch| "../stdlib/core/syntax-case.scm" . 49159))
 (set.gloc.of |.L135|)
 (close
   (1 0)
   (push.const . with-syntax)
   (push.const . "value does not match to pattern")
   (push.const (a anew) (d dnew))
   (apply.gloc.of |.syntax-violation| "../stdlib/core/syntax-case.scm" . 33797))
 (set.gloc.of |.L110|)
 (close
   (1 0)
   (push.const . with-syntax)
   (push.const . "value does not match to pattern")
   (push.const (((m ...) ...) (syntax ((t (... ...)) ...))))
   (apply.gloc.of |.syntax-violation| "../stdlib/core/syntax-case.scm" . 171031))
 (set.gloc.of |.L121|)
 (close
   (1 0)
   (push.iloc.0 . 0)
   (push.const unsyntax-splicing . d)
   (push.const (d . 0))
   (apply.gloc.of |.syntax/c1n| "../stdlib/core/syntax-case.scm" . 33797))
 (set.gloc.of |.L116|)
 (close
   (1 0)
   (push.iloc.0 . 0)
   (push.const define-macro name (lambda args . body))
   (push.const (body . 0) (args . 0) (name . 0))
   (apply.gloc.of |.syntax/c1n| "../stdlib/core/syntax-case.scm" . 50185))
 (set.gloc.of |.L136|)
 (close
   (1 0)
   (push.const . with-syntax)
   (push.const . "value does not match to pattern")
   (push.const (((m ...) ...) (syntax ((t (... ...)) ...))))
   (apply.gloc.of |.syntax-violation| "../stdlib/core/syntax-case.scm" . 131090))
 (set.gloc.of |.L113|)
 (close
   (1 0)
   (push.iloc.0 . 0)
   (push.const unsyntax . d)
   (push.const (d . 0))
   (apply.gloc.of |.syntax/c1n| "../stdlib/core/syntax-case.scm" . 33797))
 (set.gloc.of |.L118|)
 (close
   (1 0)
   (push.const . with-syntax)
   (push.const . "value does not match to pattern")
   (push.const (d dnew))
   (apply.gloc.of |.syntax-violation| "../stdlib/core/syntax-case.scm" . 123922))
 (set.gloc.of |.L120|)
 (close
   (1 0)
   (push.const . with-syntax)
   (push.const . "value does not match to pattern")
   (push.const (d dnew))
   (apply.gloc.of |.syntax-violation| "../stdlib/core/syntax-case.scm" . 33797))
 (set.gloc.of |.L124|)
 (close
   (1 0)
   (push.iloc.0 . 0)
   (push.const quasisyntax . d)
   (push.const (d . 0))
   (apply.gloc.of |.syntax/c1n| "../stdlib/core/syntax-case.scm" . 33797))
 (set.gloc.of |.L103|)
 (close
   (1 0)
   (push.iloc.0 . 0)
   (push.const with-syntax (b ...) (syntax x))
   (push.const (x . 0) (b . 1))
   (apply.gloc.of |.syntax/c1n| "../stdlib/core/syntax-case.scm" . 33797))
 (set.gloc.of |.L128|)
 (close
   (1 0)
   (push.gloc.of |.vars|)
   (push.iloc.0 . 0)
   (push.const)
   (push.const _ x)
   (push.const . #f)
   (push.gloc.of |.L131|)
   (push.subr.gloc.of |.list| 3 "../stdlib/core/syntax-case.scm" . 178183)
   (apply.gloc.of |.syntax-dispatch| "../stdlib/core/syntax-case.scm" . 178183))
 (set.gloc.of |.L125|)
 (close
   (1 0)
   (push.const . with-syntax)
   (push.const . "value does not match to pattern")
   (push.const ((x ...) xnew*))
   (apply.gloc.of |.syntax-violation| "../stdlib/core/syntax-case.scm" . 33797))
 (set.gloc.of |.L105|)
 (close
   (1 0)
   (touch.gloc.of |qs`365*|)
   (call
     (push.iloc.0 . 0)
     (push.const . x)
     (apply.gloc.of |.syntax/i1n| "../stdlib/core/syntax-case.scm" . 180234))
   (push)
   (push.const . 0)
   (push.const)
   (push.close
     (2 0)
     (push.iloc.0 . 1)
     (call
       (push.iloc.1 . 0)
       (push.const . x)
       (apply.gloc.of |.syntax/i1n| "../stdlib/core/syntax-case.scm" . 182292))
     (if.eq?
       (push.iloc.1 . 0)
       (push.const syntax x)
       (push.const (x . 0))
       (apply.gloc.of |.syntax/c1n| "../stdlib/core/syntax-case.scm" . 182288))
     (push.iloc.1 . 0)
     (push.iloc.0 . 0)
     (push.iloc.0 . 1)
     (push.subr.gloc.of |.list| 2 "../stdlib/core/syntax-case.scm" . 33797)
     (push.const)
     (push.const (b ...) x)
     (push.const . #f)
     (push.gloc.of |.L128|)
     (push.subr.gloc.of |.list| 3 "../stdlib/core/syntax-case.scm" . 33797)
     (push.const . _)
     (push.const . #f)
     (push.gloc.of |.L137|)
     (push.subr.gloc.of |.list| 3 "../stdlib/core/syntax-case.scm" . 33797)
     (apply.gloc.of |.syntax-dispatch| "../stdlib/core/syntax-case.scm" . 33797))
   (apply.gloc.of |qs`365*| "../stdlib/core/syntax-case.scm" . 180234))
 (set.gloc.of |.L131|)
 (close
   (1 0)
   (push.iloc.0 . 0)
   (push.const
     define-syntax
     name
     (let ((define-macro-transformer body))
       (lambda (x)
         (syntax-case x
           ()
           ((e0 . e1)
            (datum->syntax
              (syntax e0)
              (apply define-macro-transformer (syntax->datum (syntax e1)))))))))
   (push.const (body . 0) (name . 0))
   (push.const (x . |x`354*|))
   (apply.gloc.of |.syntax/c3n| "../stdlib/core/syntax-case.scm" . 52233))
 (set.gloc.of |.L107|)
 (close
   (1 0)
   (push.iloc.0 . 0)
   (push.const a . d)
   (push.const (d . 0) (a . 0))
   (apply.gloc.of |.syntax/c1n| "../stdlib/core/syntax-case.scm" . 33797))
 (set.gloc.of |.L133|)
 (close
   (1 0)
   (push.const . #f)
   (push.const . "misplaced auxiliary syntactic keyword")
   (push.iloc.0 . 0)
   (apply.gloc.of |.syntax-violation| "../stdlib/core/syntax-case.scm" . 65543))
 (set.gloc.of |.L115|)
 (close
   (1 0)
   (push.const . with-syntax)
   (push.const . "value does not match to pattern")
   (push.const ((t ...) (generate-temporaries (syntax (q ...)))))
   (apply.gloc.of |.syntax-violation| "../stdlib/core/syntax-case.scm" . 165911))
 (set.gloc.of |.L134|)
 (close
   (1 0)
   (push.const . with-syntax)
   (push.const . "value does not match to pattern")
   (push.const (d dnew))
   (apply.gloc.of |.syntax-violation| "../stdlib/core/syntax-case.scm" . 131090))
 (set.gloc.of |.L111|)
 (close
   (1 0)
   (push.iloc.0 . 0)
   (push.const m ... ... . d)
   (push.const (d . 0) (m . 2))
   (apply.gloc.of |.syntax/c1n| "../stdlib/core/syntax-case.scm" . 131090))
 (set.gloc.of |.L106|)
 (close
   (1 0)
   (subr.gloc.of |.backtrace| 0 "../stdlib/core/syntax-case.scm" . 36878)
   (if.true
     (push.iloc.0 . 0)
     (push.const
       syntax-case
       (list e0 ...)
       ()
       ((p ...) (let () e1 e2 ...))
       (_ (syntax-violation 'with-syntax "value does not match to pattern" '((p e0) ...))))
     (push.const (e2 . 1) (e1 . 0) (p . 1) (e0 . 1))
     (apply.gloc.of |.syntax/c1n| "../stdlib/core/syntax-case.scm" . 36874))
   (push.iloc.0 . 0)
   (push.const syntax-case (list e0 ...) () ((p ...) (let () e1 e2 ...)))
   (push.const (e2 . 1) (e1 . 0) (p . 1) (e0 . 1))
   (apply.gloc.of |.syntax/c1n| "../stdlib/core/syntax-case.scm" . 36874))
 (set.gloc.of |.L108|)
 (close
   (1 0)
   (push.const . with-syntax)
   (push.const . "value does not match to pattern")
   (push.const ((t ...) (generate-temporaries (syntax (q ...)))))
   (apply.gloc.of |.syntax-violation| "../stdlib/core/syntax-case.scm" . 131090))
 (set.gloc.of |.L104|)
 (close
   (1 0)
   (push.const . with-syntax)
   (push.const . "value does not match to pattern")
   (push.const ((t ...) (generate-temporaries (syntax (q ...)))))
   (apply.gloc.of |.syntax-violation| "../stdlib/core/syntax-case.scm" . 171031))
 (set.gloc.of |.L109|)
 (close
   (2 0 . same?)
   (iloc.0 . 0)
   (if.null? (iloc.0 . 1) (ret.null? "../stdlib/core/syntax-case.scm" . 150561))
   (iloc.0 . 1)
   (if.null?.ret.const . #f)
   (push.car.iloc (0 . 0) "../stdlib/core/syntax-case.scm" . 152619)
   (car.iloc (0 . 1) "../stdlib/core/syntax-case.scm" . 152628)
   (if.not.eq?.ret.const . #f)
   (touch.gloc.of |same?`472*|)
   (push.cdr.iloc (0 . 0) "../stdlib/core/syntax-case.scm" . 153645)
   (push.cdr.iloc (0 . 1) "../stdlib/core/syntax-case.scm" . 153654)
   (apply.gloc.of |same?`472*| "../stdlib/core/syntax-case.scm" . 153638))
 (set.gloc.of |same?`472*|)
 (close
   (1 0)
   (push.const . with-syntax)
   (push.const . "value does not match to pattern")
   (push.const ((b ...) b*) (x xnew))
   (apply.gloc.of |.syntax-violation| "../stdlib/core/syntax-case.scm" . 33797))
 (set.gloc.of |.L137|)
 (close
   (1 0)
   (push.const . with-syntax)
   (push.const . "value does not match to pattern")
   (push.const ((t) (generate-temporaries (syntax (q)))))
   (apply.gloc.of |.syntax-violation| "../stdlib/core/syntax-case.scm" . 117772))
 (set.gloc.of |.L114|)
 (close
   (1 0)
   (push.const . with-syntax)
   (push.const . "value does not match to pattern")
   (push.const ((t ...) (generate-temporaries (syntax (q ...)))))
   (apply.gloc.of |.syntax-violation| "../stdlib/core/syntax-case.scm" . 123922))
 (set.gloc.of |.L129|)
 (close
   (1 0)
   (push.iloc.0 . 0)
   (push.const t ... . d)
   (push.const (d . 0) (t . 1))
   (apply.gloc.of |.syntax/c1n| "../stdlib/core/syntax-case.scm" . 123922))
 (set.gloc.of |.L132|)
 (close
   (4 0 . qs)
   (push.gloc.of |.vars|)
   (push.iloc.0 . 0)
   (push.const quasisyntax unsyntax unsyntax-splicing)
   (push.const quasisyntax . d)
   (push.const . #f)
   (push.close
     (1 0)
     (touch.gloc.of |qs`365*|)
     (call
       (push.iloc.0 . 0)
       (push.const . d)
       (apply.gloc.of |.syntax/i1n| "../stdlib/core/syntax-case.scm" . 93196))
     (push)
     (push.n+.iloc (1 . 1) 1 "../stdlib/core/syntax-case.scm" . 93204)
     (push.iloc.1 . 2)
     (push.close
       (2 0)
       (push.iloc.0 . 0)
       (call
         (push.iloc.0 . 1)
         (call
           (push.iloc.1 . 0)
           (push.const . d)
           (apply.gloc.of |.syntax/i1n| "../stdlib/core/syntax-case.scm" . 96281))
         (if.eq? (ret.iloc 2 . 0))
         (push.iloc.1 . 0)
         (push.iloc.0 . 1)
         (push.subr.gloc.of |.list| 1 "../stdlib/core/syntax-case.scm" . 33797)
         (push.const)
         (push.const d)
         (push.const . #f)
         (push.gloc.of |.L103|)
         (push.subr.gloc.of |.list| 3 "../stdlib/core/syntax-case.scm" . 33797)
         (push.const . _)
         (push.const . #f)
         (push.gloc.of |.L124|)
         (push.subr.gloc.of |.list| 3 "../stdlib/core/syntax-case.scm" . 33797)
         (apply.gloc.of |.syntax-dispatch| "../stdlib/core/syntax-case.scm" . 33797))
       (push)
       (apply.iloc (2 . 3) "../stdlib/core/syntax-case.scm" . 96281))
     (apply.gloc.of |qs`365*| "../stdlib/core/syntax-case.scm" . 93196))
   (push.subr.gloc.of |.list| 3 "../stdlib/core/syntax-case.scm" . 91145)
   (push.const unsyntax . d)
   (push.close
     (1 0)
     (push.iloc.1 . 1)
     (push.const . 0)
     (push.subr.gloc.of |.=| 2 "../stdlib/core/syntax-case.scm" . 100369)
     (ret.subr.gloc.of |.not| "../stdlib/core/syntax-case.scm" . 100364))
   (push.close
     (1 0)
     (touch.gloc.of |qs`365*|)
     (call
       (push.iloc.0 . 0)
       (push.const . d)
       (apply.gloc.of |.syntax/i1n| "../stdlib/core/syntax-case.scm" . 101388))
     (push)
     (push.n+.iloc (1 . 1) -1 "../stdlib/core/syntax-case.scm" . 101396)
     (push.iloc.1 . 2)
     (push.close
       (2 0)
       (push.iloc.0 . 0)
       (call
         (push.iloc.0 . 1)
         (call
           (push.iloc.1 . 0)
           (push.const . d)
           (apply.gloc.of |.syntax/i1n| "../stdlib/core/syntax-case.scm" . 104473))
         (if.eq? (ret.iloc 2 . 0))
         (push.iloc.1 . 0)
         (push.iloc.0 . 1)
         (push.subr.gloc.of |.list| 1 "../stdlib/core/syntax-case.scm" . 33797)
         (push.const)
         (push.const d)
         (push.const . #f)
         (push.gloc.of |.L118|)
         (push.subr.gloc.of |.list| 3 "../stdlib/core/syntax-case.scm" . 33797)
         (push.const . _)
         (push.const . #f)
         (push.gloc.of |.L127|)
         (push.subr.gloc.of |.list| 3 "../stdlib/core/syntax-case.scm" . 33797)
         (apply.gloc.of |.syntax-dispatch| "../stdlib/core/syntax-case.scm" . 33797))
       (push)
       (apply.iloc (2 . 3) "../stdlib/core/syntax-case.scm" . 104473))
     (apply.gloc.of |qs`365*| "../stdlib/core/syntax-case.scm" . 101388))
   (push.subr.gloc.of |.list| 3 "../stdlib/core/syntax-case.scm" . 91145)
   (push.const unsyntax-splicing . d)
   (push.close
     (1 0)
     (push.iloc.1 . 1)
     (push.const . 0)
     (push.subr.gloc.of |.=| 2 "../stdlib/core/syntax-case.scm" . 108561)
     (ret.subr.gloc.of |.not| "../stdlib/core/syntax-case.scm" . 108556))
   (push.close
     (1 0)
     (touch.gloc.of |qs`365*|)
     (call
       (push.iloc.0 . 0)
       (push.const . d)
       (apply.gloc.of |.syntax/i1n| "../stdlib/core/syntax-case.scm" . 109580))
     (push)
     (push.n+.iloc (1 . 1) -1 "../stdlib/core/syntax-case.scm" . 109588)
     (push.iloc.1 . 2)
     (push.close
       (2 0)
       (push.iloc.0 . 0)
       (call
         (push.iloc.0 . 1)
         (call
           (push.iloc.1 . 0)
           (push.const . d)
           (apply.gloc.of |.syntax/i1n| "../stdlib/core/syntax-case.scm" . 112665))
         (if.eq? (ret.iloc 2 . 0))
         (push.iloc.1 . 0)
         (push.iloc.0 . 1)
         (push.subr.gloc.of |.list| 1 "../stdlib/core/syntax-case.scm" . 33797)
         (push.const)
         (push.const d)
         (push.const . #f)
         (push.gloc.of |.L116|)
         (push.subr.gloc.of |.list| 3 "../stdlib/core/syntax-case.scm" . 33797)
         (push.const . _)
         (push.const . #f)
         (push.gloc.of |.L126|)
         (push.subr.gloc.of |.list| 3 "../stdlib/core/syntax-case.scm" . 33797)
         (apply.gloc.of |.syntax-dispatch| "../stdlib/core/syntax-case.scm" . 33797))
       (push)
       (apply.iloc (2 . 3) "../stdlib/core/syntax-case.scm" . 112665))
     (apply.gloc.of |qs`365*| "../stdlib/core/syntax-case.scm" . 109580))
   (push.subr.gloc.of |.list| 3 "../stdlib/core/syntax-case.scm" . 91145)
   (push.const unsyntax q)
   (push.close
     (1 0)
     (push.iloc.1 . 1)
     (push.const . 0)
     (ret.subr.gloc.of |.=| "../stdlib/core/syntax-case.scm" . 116748))
   (push.close
     (1 0)
     (push.iloc.0 . 0)
     (call
       (call
         (push.iloc.0 . 0)
         (push.const q)
         (push.const (q . 0))
         (apply.gloc.of |.syntax/c1n| "../stdlib/core/syntax-case.scm" . 117772))
       (push)
       (apply.gloc.of |.generate-temporaries| "../stdlib/core/syntax-case.scm" . 117772))
     (push)
     (push.subr.gloc.of |.list| 1 "../stdlib/core/syntax-case.scm" . 117772)
     (push.const)
     (push.const (t))
     (push.const . #f)
     (push.close
       (1 0)
       (call
         (push.iloc.0 . 0)
         (push.const t q)
         (push.const (q . 0) (t . 0))
         (apply.gloc.of |.syntax/c1n| "../stdlib/core/syntax-case.scm" . 117772))
       (push)
       (iloc 2 . 2)
       (push.cons)
       (call
         (push.iloc.0 . 0)
         (push.const . t)
         (apply.gloc.of |.syntax/i1n| "../stdlib/core/syntax-case.scm" . 117772))
       (push)
       (apply.iloc (2 . 3) "../stdlib/core/syntax-case.scm" . 117772))
     (push.subr.gloc.of |.list| 3 "../stdlib/core/syntax-case.scm" . 117772)
     (push.const . _)
     (push.const . #f)
     (push.gloc.of |.L114|)
     (push.subr.gloc.of |.list| 3 "../stdlib/core/syntax-case.scm" . 117772)
     (apply.gloc.of |.syntax-dispatch| "../stdlib/core/syntax-case.scm" . 117772))
   (push.subr.gloc.of |.list| 3 "../stdlib/core/syntax-case.scm" . 91145)
   (push.const (unsyntax q ...) . d)
   (push.close
     (1 0)
     (push.iloc.1 . 1)
     (push.const . 0)
     (ret.subr.gloc.of |.=| "../stdlib/core/syntax-case.scm" . 120844))
   (push.close
     (1 0)
     (touch.gloc.of |qs`365*|)
     (call
       (push.iloc.0 . 0)
       (push.const . d)
       (apply.gloc.of |.syntax/i1n| "../stdlib/core/syntax-case.scm" . 121868))
     (push)
     (push.iloc.1 . 1)
     (push.iloc.1 . 2)
     (push.close
       (2 0)
       (push.iloc.1 . 0)
       (call
         (call
           (push.iloc.1 . 0)
           (push.const q ...)
           (push.const (q . 1))
           (apply.gloc.of |.syntax/c1n| "../stdlib/core/syntax-case.scm" . 123922))
         (push)
         (apply.gloc.of |.generate-temporaries| "../stdlib/core/syntax-case.scm" . 123922))
       (push)
       (push.subr.gloc.of |.list| 1 "../stdlib/core/syntax-case.scm" . 123922)
       (push.const)
       (push.const (t ...))
       (push.const . #f)
       (push.close
         (1 0)
         (call
           (push.iloc.0 . 0)
           (push.const (t q) ...)
           (push.const (q . 1) (t . 1))
           (apply.gloc.of |.syntax/c1n| "../stdlib/core/syntax-case.scm" . 123922))
         (push)
         (push.iloc.1 . 0)
         (push.subr.gloc.of |.append| 2 "../stdlib/core/syntax-case.scm" . 123922)
         (call
           (push.iloc.0 . 0)
           (push.iloc.1 . 1)
           (push.subr.gloc.of |.list| 1 "../stdlib/core/syntax-case.scm" . 123922)
           (push.const)
           (push.const d)
           (push.const . #f)
           (push.gloc.of |.L132|)
           (push.subr.gloc.of |.list| 3 "../stdlib/core/syntax-case.scm" . 123922)
           (push.const . _)
           (push.const . #f)
           (push.gloc.of |.L120|)
           (push.subr.gloc.of |.list| 3 "../stdlib/core/syntax-case.scm" . 123922)
           (apply.gloc.of |.syntax-dispatch| "../stdlib/core/syntax-case.scm" . 123922))
         (push)
         (apply.iloc (3 . 3) "../stdlib/core/syntax-case.scm" . 123922))
       (push.subr.gloc.of |.list| 3 "../stdlib/core/syntax-case.scm" . 123922)
       (push.const . _)
       (push.const . #f)
       (push.gloc.of |.L129|)
       (push.subr.gloc.of |.list| 3 "../stdlib/core/syntax-case.scm" . 123922)
       (apply.gloc.of |.syntax-dispatch| "../stdlib/core/syntax-case.scm" . 123922))
     (apply.gloc.of |qs`365*| "../stdlib/core/syntax-case.scm" . 121868))
   (push.subr.gloc.of |.list| 3 "../stdlib/core/syntax-case.scm" . 91145)
   (push.const (unsyntax-splicing q ...) . d)
   (push.close
     (1 0)
     (push.iloc.1 . 1)
     (push.const . 0)
     (ret.subr.gloc.of |.=| "../stdlib/core/syntax-case.scm" . 128012))
   (push.close
     (1 0)
     (touch.gloc.of |qs`365*|)
     (call
       (push.iloc.0 . 0)
       (push.const . d)
       (apply.gloc.of |.syntax/i1n| "../stdlib/core/syntax-case.scm" . 129036))
     (push)
     (push.iloc.1 . 1)
     (push.iloc.1 . 2)
     (push.close
       (2 0)
       (push.iloc.1 . 0)
       (call
         (call
           (push.iloc.1 . 0)
           (push.const q ...)
           (push.const (q . 1))
           (apply.gloc.of |.syntax/c1n| "../stdlib/core/syntax-case.scm" . 131090))
         (push)
         (apply.gloc.of |.generate-temporaries| "../stdlib/core/syntax-case.scm" . 131090))
       (push)
       (push.subr.gloc.of |.list| 1 "../stdlib/core/syntax-case.scm" . 131090)
       (push.const)
       (push.const (t ...))
       (push.const . #f)
       (push.close
         (1 0)
         (call
           (push.iloc.0 . 0)
           (push.const ((t (... ...)) q) ...)
           (push.const (q . 1) (t . 1))
           (apply.gloc.of |.syntax/c1n| "../stdlib/core/syntax-case.scm" . 131090))
         (push)
         (push.iloc.1 . 0)
         (push.subr.gloc.of |.append| 2 "../stdlib/core/syntax-case.scm" . 131090)
         (call
           (push.iloc.0 . 0)
           (call
             (push.iloc.0 . 0)
             (push.const (t (... ...)) ...)
             (push.const (t . 1))
             (apply.gloc.of |.syntax/c1n| "../stdlib/core/syntax-case.scm" . 131090))
           (push)
           (push.subr.gloc.of |.list| 1 "../stdlib/core/syntax-case.scm" . 131090)
           (push.const)
           (push.const ((m ...) ...))
           (push.const . #f)
           (push.close
             (1 0)
             (push.iloc.0 . 0)
             (push.iloc 2 . 1)
             (push.subr.gloc.of |.list| 1 "../stdlib/core/syntax-case.scm" . 131090)
             (push.const)
             (push.const d)
             (push.const . #f)
             (push.gloc.of |.L106|)
             (push.subr.gloc.of |.list| 3 "../stdlib/core/syntax-case.scm" . 131090)
             (push.const . _)
             (push.const . #f)
             (push.gloc.of |.L111|)
             (push.subr.gloc.of |.list| 3 "../stdlib/core/syntax-case.scm" . 131090)
             (apply.gloc.of |.syntax-dispatch| "../stdlib/core/syntax-case.scm" . 131090))
           (push.subr.gloc.of |.list| 3 "../stdlib/core/syntax-case.scm" . 131090)
           (push.const . _)
           (push.const . #f)
           (push.gloc.of |.L113|)
           (push.subr.gloc.of |.list| 3 "../stdlib/core/syntax-case.scm" . 131090)
           (apply.gloc.of |.syntax-dispatch| "../stdlib/core/syntax-case.scm" . 131090))
         (push)
         (apply.iloc (3 . 3) "../stdlib/core/syntax-case.scm" . 131090))
       (push.subr.gloc.of |.list| 3 "../stdlib/core/syntax-case.scm" . 131090)
       (push.const . _)
       (push.const . #f)
       (push.gloc.of |.L104|)
       (push.subr.gloc.of |.list| 3 "../stdlib/core/syntax-case.scm" . 131090)
       (apply.gloc.of |.syntax-dispatch| "../stdlib/core/syntax-case.scm" . 131090))
     (apply.gloc.of |qs`365*| "../stdlib/core/syntax-case.scm" . 129036))
   (push.subr.gloc.of |.list| 3 "../stdlib/core/syntax-case.scm" . 91145)
   (push.const a . d)
   (push.const . #f)
   (push.close
     (1 0)
     (touch.gloc.of |qs`365*|)
     (call
       (push.iloc.0 . 0)
       (push.const . a)
       (apply.gloc.of |.syntax/i1n| "../stdlib/core/syntax-case.scm" . 136204))
     (push)
     (push.iloc.1 . 1)
     (push.iloc.1 . 2)
     (push.close
       (2 0)
       (touch.gloc.of |qs`365*|)
       (call
         (push.iloc.1 . 0)
         (push.const . d)
         (apply.gloc.of |.syntax/i1n| "../stdlib/core/syntax-case.scm" . 138258))
       (push)
       (push.iloc 2 . 1)
       (push.iloc.0 . 0)
       (push.close
         (2 0)
         (push.iloc.0 . 0)
         (call
           (call
             (push.iloc.1 . 1)
             (call
               (push.iloc 2 . 0)
               (push.const . a)
               (apply.gloc.of |.syntax/i1n| "../stdlib/core/syntax-case.scm" . 141348))
             (if.not.eq?.ret.const . #f)
             (push.iloc.0 . 1)
             (call
               (push.iloc 2 . 0)
               (push.const . d)
               (apply.gloc.of |.syntax/i1n| "../stdlib/core/syntax-case.scm" . 141363))
             (ret.eq? "../stdlib/core/syntax-case.scm" . 141363))
           (if.true (ret.iloc 3 . 0))
           (push.iloc 2 . 0)
           (push.iloc.1 . 1)
           (push.iloc.0 . 1)
           (push.subr.gloc.of |.list| 2 "../stdlib/core/syntax-case.scm" . 33797)
           (push.const)
           (push.const a d)
           (push.const . #f)
           (push.gloc.of |.L133|)
           (push.subr.gloc.of |.list| 3 "../stdlib/core/syntax-case.scm" . 33797)
           (push.const . _)
           (push.const . #f)
           (push.gloc.of |.L110|)
           (push.subr.gloc.of |.list| 3 "../stdlib/core/syntax-case.scm" . 33797)
           (apply.gloc.of |.syntax-dispatch| "../stdlib/core/syntax-case.scm" . 33797))
         (push)
         (apply.iloc (3 . 3) "../stdlib/core/syntax-case.scm" . 141343))
       (apply.gloc.of |qs`365*| "../stdlib/core/syntax-case.scm" . 138258))
     (apply.gloc.of |qs`365*| "../stdlib/core/syntax-case.scm" . 136204))
   (push.subr.gloc.of |.list| 3 "../stdlib/core/syntax-case.scm" . 91145)
   (push.const . #(x ...))
   (push.const . #f)
   (push.close
     (1 0)
     (touch.gloc.of |vqs`365*|)
     (call
       (push.iloc.0 . 0)
       (push.const x ...)
       (push.const (x . 1))
       (apply.gloc.of |.syntax/c1n| "../stdlib/core/syntax-case.scm" . 145421))
     (push)
     (push.iloc.1 . 1)
     (push.iloc.1 . 2)
     (push.close
       (2 0)
       (push.iloc.0 . 0)
       (call
         (call
           (touch.gloc.of |same?`472*|)
           (call
             (push.iloc.1 . 0)
             (push.const x ...)
             (push.const (x . 1))
             (apply.gloc.of |.syntax/c1n| "../stdlib/core/syntax-case.scm" . 148519))
           (push)
           (push.iloc.0 . 1)
           (apply.gloc.of |same?`472*| "../stdlib/core/syntax-case.scm" . 149533))
         (if.true (ret.iloc 2 . 0))
         (push.iloc.1 . 0)
         (push.iloc.0 . 1)
         (push.subr.gloc.of |.list| 1 "../stdlib/core/syntax-case.scm" . 33797)
         (push.const)
         (push.const (x ...))
         (push.const . #f)
         (push.gloc.of |.L130|)
         (push.subr.gloc.of |.list| 3 "../stdlib/core/syntax-case.scm" . 33797)
         (push.const . _)
         (push.const . #f)
         (push.gloc.of |.L105|)
         (push.subr.gloc.of |.list| 3 "../stdlib/core/syntax-case.scm" . 33797)
         (apply.gloc.of |.syntax-dispatch| "../stdlib/core/syntax-case.scm" . 33797))
       (push)
       (apply.iloc
         (2 . 3)
         (|k`366*|
           |b*`468*|
           (if (|same?`472*| (|.syntax/c1n| |.vars`466*| '(x ...) '((x . 1))) |xnew*`468*|)
               |q`366*|
               (|.syntax-dispatch|
                 |.vars`466*|
                 (|.list| |xnew*`468*|)
                 '()
                 (|.list| '((x ...)) #f |.L130|)
                 (|.list| '_ #f |.L105|))))))
     (apply.gloc.of
       |vqs`365*|
       (|vqs`365*|
         (|.syntax/c1n| |.vars`466*| '(x ...) '((x . 1)))
         |n`366*|
         |b*`366*|
         (lambda (|b*`468*| |xnew*`468*|)
           (|k`366*|
             |b*`468*|
             (if (|same?`472*| (|.syntax/c1n| |.vars`466*| '(x ...) '((x . 1))) |xnew*`468*|)
                 |q`366*|
                 (|.syntax-dispatch|
                   |.vars`466*|
                   (|.list| |xnew*`468*|)
                   '()
                   (|.list| '((x ...)) #f |.L130|)
                   (|.list| '_ #f |.L105|))))))))
   (push.subr.gloc.of
     |.list|
     3
     (|.list|
       '#(x ...)
       #f
       (lambda (|.vars`466*|)
         (|vqs`365*|
           (|.syntax/c1n| |.vars`466*| '(x ...) '((x . 1)))
           |n`366*|
           |b*`366*|
           (lambda (|b*`468*| |xnew*`468*|)
             (|k`366*|
               |b*`468*|
               (if (|same?`472*| (|.syntax/c1n| |.vars`466*| '(x ...) '((x . 1))) |xnew*`468*|)
                   |q`366*|
                   (|.syntax-dispatch|
                     |.vars`466*|
                     (|.list| |xnew*`468*|)
                     '()
                     (|.list| '((x ...)) #f |.L130|)
                     (|.list| '_ #f |.L105|)))))))))
   (push.const . _)
   (push.const . #f)
   (push.close
     (1 0)
     (push.iloc.1 . 2)
     (push.iloc.1 . 0)
     (apply.iloc (1 . 3) "../stdlib/core/syntax-case.scm" . 156686))
   (push.subr.gloc.of |.list| 3 "../stdlib/core/syntax-case.scm" . 91145)
   (apply.gloc.of
     |.syntax-dispatch|
     (|.syntax-dispatch|
       |.vars|
       |q`366*|
       '(quasisyntax unsyntax unsyntax-splicing)
       (|.list|
         '(quasisyntax . d)
         #f
         (lambda (|.vars`368*|)
           (|qs`365*|
             (|.syntax/i1n| |.vars`368*| 'd)
             (|.+| |n`366*| 1)
             |b*`366*|
             (lambda (|b*`370*| |dnew`370*|)
               (|k`366*|
                 |b*`370*|
                 (if (|.eq?| |dnew`370*| (|.syntax/i1n| |.vars`368*| 'd))
                     |q`366*|
                     (|.syntax-dispatch|
                       |.vars`368*|
                       (|.list| |dnew`370*|)
                       '()
                       (|.list| '(d) #f |.L103|)
                       (|.list| '_ #f |.L124|))))))))
       (|.list|
         '(unsyntax . d)
         (lambda (|.vars`378*|) (|.not| (|.=| |n`366*| 0)))
         (lambda (|.vars`380*|)
           (|qs`365*|
             (|.syntax/i1n| |.vars`380*| 'd)
             (|.-| |n`366*| 1)
             |b*`366*|
             (lambda (|b*`382*| |dnew`382*|)
               (|k`366*|
                 |b*`382*|
                 (if (|.eq?| |dnew`382*| (|.syntax/i1n| |.vars`380*| 'd))
                     |q`366*|
                     (|.syntax-dispatch|
                       |.vars`380*|
                       (|.list| |dnew`382*|)
                       '()
                       (|.list| '(d) #f |.L118|)
                       (|.list| '_ #f |.L127|))))))))
       (|.list|
         '(unsyntax-splicing . d)
         (lambda (|.vars`390*|) (|.not| (|.=| |n`366*| 0)))
         (lambda (|.vars`392*|)
           (|qs`365*|
             (|.syntax/i1n| |.vars`392*| 'd)
             (|.-| |n`366*| 1)
             |b*`366*|
             (lambda (|b*`394*| |dnew`394*|)
               (|k`366*|
                 |b*`394*|
                 (if (|.eq?| |dnew`394*| (|.syntax/i1n| |.vars`392*| 'd))
                     |q`366*|
                     (|.syntax-dispatch|
                       |.vars`392*|
                       (|.list| |dnew`394*|)
                       '()
                       (|.list| '(d) #f |.L116|)
                       (|.list| '_ #f |.L126|))))))))
       (|.list|
         '(unsyntax q)
         (lambda (|.vars`402*|) (|.=| |n`366*| 0))
         (lambda (|.vars`404*|)
           (|.syntax-dispatch|
             |.vars`404*|
             (|.list| (|.generate-temporaries| (|.syntax/c1n| |.vars`404*| '(q) '((q . 0)))))
             '()
             (|.list|
               '((t))
               #f
               (lambda (|.vars`407*|)
                 (|k`366*|
                   (|.cons| (|.syntax/c1n| |.vars`407*| '(t q) '((q . 0) (t . 0))) |b*`366*|)
                   (|.syntax/i1n| |.vars`407*| 't))))
             (|.list| '_ #f |.L114|))))
       (|.list|
         '((unsyntax q ...) . d)
         (lambda (|.vars`412*|) (|.=| |n`366*| 0))
         (lambda (|.vars`414*|)
           (|qs`365*|
             (|.syntax/i1n| |.vars`414*| 'd)
             |n`366*|
             |b*`366*|
             (lambda (|b*`416*| |dnew`416*|)
               (|.syntax-dispatch|
                 |.vars`414*|
                 (|.list|
                   (|.generate-temporaries| (|.syntax/c1n| |.vars`414*| '(q ...) '((q . 1)))))
                 '()
                 (|.list|
                   '((t ...))
                   #f
                   (lambda (|.vars`419*|)
                     (|k`366*|
                       (|.append|
                         (|.syntax/c1n| |.vars`419*| '((t q) ...) '((q . 1) (t . 1)))
                         |b*`416*|)
                       (|.syntax-dispatch|
                         |.vars`419*|
                         (|.list| |dnew`416*|)
                         '()
                         (|.list| '(d) #f |.L132|)
                         (|.list| '_ #f |.L120|)))))
                 (|.list| '_ #f |.L129|))))))
       (|.list|
         '((unsyntax-splicing q ...) . d)
         (lambda (|.vars`430*|) (|.=| |n`366*| 0))
         (lambda (|.vars`432*|)
           (|qs`365*|
             (|.syntax/i1n| |.vars`432*| 'd)
             |n`366*|
             |b*`366*|
             (lambda (|b*`434*| |dnew`434*|)
               (|.syntax-dispatch|
                 |.vars`432*|
                 (|.list|
                   (|.generate-temporaries| (|.syntax/c1n| |.vars`432*| '(q ...) '((q . 1)))))
                 '()
                 (|.list|
                   '((t ...))
                   #f
                   (lambda (|.vars`437*|)
                     (|k`366*|
                       (|.append|
                         (|.syntax/c1n| |.vars`437*| '(((t (... ...)) q) ...) '((q . 1) (t . 1)))
                         |b*`434*|)
                       (|.syntax-dispatch|
                         |.vars`437*|
                         (|.list| (|.syntax/c1n| |.vars`437*| '((t (... ...)) ...) '((t . 1))))
                         '()
                         (|.list|
                           '(((m ...) ...))
                           #f
                           (lambda (|.vars`441*|)
                             (|.syntax-dispatch|
                               |.vars`441*|
                               (|.list| |dnew`434*|)
                               '()
                               (|.list| '(d) #f |.L106|)
                               (|.list| '_ #f |.L111|))))
                         (|.list| '_ #f |.L113|)))))
                 (|.list| '_ #f |.L104|))))))
       (|.list|
         '(a . d)
         #f
         (lambda (|.vars`454*|)
           (|qs`365*|
             (|.syntax/i1n| |.vars`454*| 'a)
             |n`366*|
             |b*`366*|
             (lambda (|b*`456*| |anew`456*|)
               (|qs`365*|
                 (|.syntax/i1n| |.vars`454*| 'd)
                 |n`366*|
                 |b*`456*|
                 (lambda (|b*`458*| |dnew`458*|)
                   (|k`366*|
                     |b*`458*|
                     (if (and (|.eq?| |anew`456*| (|.syntax/i1n| |.vars`454*| 'a))
                              (|.eq?| |dnew`458*| (|.syntax/i1n| |.vars`454*| 'd)))
                         |q`366*|
                         (|.syntax-dispatch|
                           |.vars`454*|
                           (|.list| |anew`456*| |dnew`458*|)
                           '()
                           (|.list| '(a d) #f |.L133|)
                           (|.list| '_ #f |.L110|))))))))))
       (|.list|
         '#(x ...)
         #f
         (lambda (|.vars`466*|)
           (|vqs`365*|
             (|.syntax/c1n| |.vars`466*| '(x ...) '((x . 1)))
             |n`366*|
             |b*`366*|
             (lambda (|b*`468*| |xnew*`468*|)
               (|k`366*|
                 |b*`468*|
                 (if (|same?`472*| (|.syntax/c1n| |.vars`466*| '(x ...) '((x . 1))) |xnew*`468*|)
                     |q`366*|
                     (|.syntax-dispatch|
                       |.vars`466*|
                       (|.list| |xnew*`468*|)
                       '()
                       (|.list| '((x ...)) #f |.L130|)
                       (|.list| '_ #f |.L105|))))))))
       (|.list| '_ #f (lambda (|.vars`482*|) (|k`366*| |b*`366*| |q`366*|))))))
 (set.gloc.of |qs`365*|)
 (close
   (1 0)
   (push.const . #f)
   (push.const . "misplaced auxiliary syntactic keyword")
   (push.iloc.0 . 0)
   (apply.gloc.of |.syntax-violation| "../stdlib/core/syntax-case.scm" . 69639))
 (set.gloc.of |.L112|)
 (close
   (4 0 . vqs)
   (iloc.0 . 0)
   (if.null?
     (push.iloc.0 . 2)
     (push.const)
     (apply.iloc (0 . 3) "../stdlib/core/syntax-case.scm" . 159757))
   (touch.gloc.of |vqs`365*|)
   (push.cdr.iloc (0 . 0) "../stdlib/core/syntax-case.scm" . 160786)
   (push.iloc.0 . 1)
   (push.iloc.0 . 2)
   (push.close
     (2 0)
     (push.gloc.of |.vars|)
     (push.car.iloc (1 . 0) "../stdlib/core/syntax-case.scm" . 162849)
     (push.const unsyntax unsyntax-splicing)
     (push.const unsyntax q ...)
     (push.close
       (1 0)
       (push.iloc 2 . 1)
       (push.const . 0)
       (ret.subr.gloc.of |.=| "../stdlib/core/syntax-case.scm" . 164887))
     (push.close
       (1 0)
       (push.iloc.0 . 0)
       (call
         (call
           (push.iloc.0 . 0)
           (push.const q ...)
           (push.const (q . 1))
           (apply.gloc.of |.syntax/c1n| "../stdlib/core/syntax-case.scm" . 165911))
         (push)
         (apply.gloc.of |.generate-temporaries| "../stdlib/core/syntax-case.scm" . 165911))
       (push)
       (push.subr.gloc.of |.list| 1 "../stdlib/core/syntax-case.scm" . 165911)
       (push.const)
       (push.const (t ...))
       (push.const . #f)
       (push.close
         (1 0)
         (call
           (push.iloc.0 . 0)
           (push.const (t q) ...)
           (push.const (q . 1) (t . 1))
           (apply.gloc.of |.syntax/c1n| "../stdlib/core/syntax-case.scm" . 165911))
         (push)
         (push.iloc 2 . 0)
         (push.subr.gloc.of |.append| 2 "../stdlib/core/syntax-case.scm" . 165911)
         (call
           (push.iloc.0 . 0)
           (push.const t ...)
           (push.const (t . 1))
           (apply.gloc.of |.syntax/c1n| "../stdlib/core/syntax-case.scm" . 165911))
         (push)
         (push.iloc 2 . 1)
         (push.subr.gloc.of |.append| 2 "../stdlib/core/syntax-case.scm" . 165911)
         (apply.iloc (3 . 3) "../stdlib/core/syntax-case.scm" . 165911))
       (push.subr.gloc.of |.list| 3 "../stdlib/core/syntax-case.scm" . 165911)
       (push.const . _)
       (push.const . #f)
       (push.gloc.of |.L134|)
       (push.subr.gloc.of |.list| 3 "../stdlib/core/syntax-case.scm" . 165911)
       (apply.gloc.of |.syntax-dispatch| "../stdlib/core/syntax-case.scm" . 165911))
     (push.subr.gloc.of |.list| 3 "../stdlib/core/syntax-case.scm" . 163863)
     (push.const unsyntax-splicing q ...)
     (push.close
       (1 0)
       (push.iloc 2 . 1)
       (push.const . 0)
       (ret.subr.gloc.of |.=| "../stdlib/core/syntax-case.scm" . 170007))
     (push.close
       (1 0)
       (push.iloc.0 . 0)
       (call
         (call
           (push.iloc.0 . 0)
           (push.const q ...)
           (push.const (q . 1))
           (apply.gloc.of |.syntax/c1n| "../stdlib/core/syntax-case.scm" . 171031))
         (push)
         (apply.gloc.of |.generate-temporaries| "../stdlib/core/syntax-case.scm" . 171031))
       (push)
       (push.subr.gloc.of |.list| 1 "../stdlib/core/syntax-case.scm" . 171031)
       (push.const)
       (push.const (t ...))
       (push.const . #f)
       (push.close
         (1 0)
         (call
           (push.iloc.0 . 0)
           (push.const ((t (... ...)) q) ...)
           (push.const (q . 1) (t . 1))
           (apply.gloc.of |.syntax/c1n| "../stdlib/core/syntax-case.scm" . 171031))
         (push)
         (push.iloc 2 . 0)
         (push.subr.gloc.of |.append| 2 "../stdlib/core/syntax-case.scm" . 171031)
         (call
           (push.iloc.0 . 0)
           (call
             (push.iloc.0 . 0)
             (push.const (t (... ...)) ...)
             (push.const (t . 1))
             (apply.gloc.of |.syntax/c1n| "../stdlib/core/syntax-case.scm" . 171031))
           (push)
           (push.subr.gloc.of |.list| 1 "../stdlib/core/syntax-case.scm" . 171031)
           (push.const)
           (push.const ((m ...) ...))
           (push.const . #f)
           (push.close
             (1 0)
             (call
               (push.iloc.0 . 0)
               (push.const m ... ...)
               (push.const (m . 2))
               (apply.gloc.of |.syntax/c1n| "../stdlib/core/syntax-case.scm" . 171031))
             (push)
             (push.iloc 3 . 1)
             (ret.subr.gloc.of |.append| "../stdlib/core/syntax-case.scm" . 171031))
           (push.subr.gloc.of |.list| 3 "../stdlib/core/syntax-case.scm" . 171031)
           (push.const . _)
           (push.const . #f)
           (push.gloc.of |.L121|)
           (push.subr.gloc.of |.list| 3 "../stdlib/core/syntax-case.scm" . 171031)
           (apply.gloc.of |.syntax-dispatch| "../stdlib/core/syntax-case.scm" . 171031))
         (push)
         (apply.iloc (3 . 3) "../stdlib/core/syntax-case.scm" . 171031))
       (push.subr.gloc.of |.list| 3 "../stdlib/core/syntax-case.scm" . 171031)
       (push.const . _)
       (push.const . #f)
       (push.gloc.of |.L109|)
       (push.subr.gloc.of |.list| 3 "../stdlib/core/syntax-case.scm" . 171031)
       (apply.gloc.of |.syntax-dispatch| "../stdlib/core/syntax-case.scm" . 171031))
     (push.subr.gloc.of |.list| 3 "../stdlib/core/syntax-case.scm" . 168983)
     (push.const . _)
     (push.const . #f)
     (push.close
       (1 0)
       (touch.gloc.of |qs`365*|)
       (push.car.iloc (2 . 0) "../stdlib/core/syntax-case.scm" . 175133)
       (push.iloc 2 . 1)
       (push.iloc.1 . 0)
       (push.close
         (2 0)
         (push.iloc.0 . 0)
         (push.iloc.0 . 1)
         (iloc 2 . 1)
         (push.cons)
         (apply.iloc (3 . 3) "../stdlib/core/syntax-case.scm" . 177183))
       (apply.gloc.of |qs`365*| "../stdlib/core/syntax-case.scm" . 175129))
     (push.subr.gloc.of |.list| 3 "../stdlib/core/syntax-case.scm" . 162849)
     (apply.gloc.of |.syntax-dispatch| "../stdlib/core/syntax-case.scm" . 162849))
   (apply.gloc.of |vqs`365*| "../stdlib/core/syntax-case.scm" . 160786))
 (set.gloc.of |vqs`365*|)
 (close
   (1 0)
   (push.const . with-syntax)
   (push.const . "value does not match to pattern")
   (push.const (d dnew))
   (apply.gloc.of |.syntax-violation| "../stdlib/core/syntax-case.scm" . 33797))
 (set.gloc.of |.L127|)
 (close
   (1 0)
   (push.iloc.0 . 0)
   (push.const . #(x ...))
   (push.const (x . 1))
   (apply.gloc.of |.syntax/c1n| "../stdlib/core/syntax-case.scm" . 33797))
 (set.gloc.of |.L130|)
 (call
   (push.const core primitives)
   (apply.gloc.of |.require-scheme-library| "../stdlib/core/syntax-case.scm" . 33797))
 (call
   (push.const
     (define-macro import . |core.syntax-case'define-macro|)
     (datum->syntax import . |.datum->syntax|)
     (... import . |....|)
     (unsyntax-splicing import . |core.syntax-case'unsyntax-splicing|)
     (x unbound)
     (b* unbound)
     (a unbound)
     (e1 unbound)
     (d unbound)
     (apply import . |.apply|)
     (e0 unbound)
     (datum import . |core.syntax-case'datum|)
     (body unbound)
     (name unbound)
     (t unbound)
     (unsyntax import . |core.syntax-case'unsyntax|)
     (list import . |.list|)
     (xnew* unbound)
     (q unbound)
     (let import . |.let|)
     (b unbound)
     (with-syntax import . |core.syntax-case'with-syntax|)
     (if import . |.if|)
     (xnew unbound)
     (define-syntax import . |.define-syntax|)
     (syntax->datum import . |.syntax->datum|)
     (and import . |.and|)
     (_ import . |._|)
     (quasisyntax import . |core.syntax-case'quasisyntax|)
     (e2 unbound)
     (syntax-violation import . |.syntax-violation|)
     (define-macro-transformer unbound)
     (generate-temporaries import . |.generate-temporaries|)
     (p unbound)
     (args unbound)
     (anew unbound)
     (m unbound)
     (syntax import . |.syntax|)
     (quote import . |.quote|)
     (dnew unbound)
     (letrec* import . |.letrec*|)
     (lambda import . |.lambda|)
     (syntax-case import . |.syntax-case|))
   (extend . 1)
   (call
     (push.const . syntax)
     (push.const . |core.syntax-case'datum|)
     (push.const
       ...
       ()
       ("../stdlib/core/syntax-case.scm" . 29701)
       ((_ x) (syntax->datum (syntax x)) ((x . 0)) (syntax syntax->datum)))
     (push.iloc.0 . 0)
     (apply.gloc.of |.set-top-level-macro!| "../stdlib/core/syntax-case.scm" . 30728))
   (call
     (push.const . syntax)
     (push.const . |core.syntax-case'with-syntax|)
     (call
       (push.gloc.of |.L117|)
       (apply.gloc.of |.transformer-thunk| "../stdlib/core/syntax-case.scm" . 30728))
     (push)
     (push.iloc.0 . 0)
     (apply.gloc.of |.set-top-level-macro!| "../stdlib/core/syntax-case.scm" . 30728))
   (call
     (push.const . syntax)
     (push.const . |core.syntax-case'define-macro|)
     (call
       (push.gloc.of |.L135|)
       (apply.gloc.of |.transformer-thunk| "../stdlib/core/syntax-case.scm" . 30728))
     (push)
     (push.iloc.0 . 0)
     (apply.gloc.of |.set-top-level-macro!| "../stdlib/core/syntax-case.scm" . 30728))
   (call
     (push.const . syntax)
     (push.const . |core.syntax-case'unsyntax|)
     (call
       (push.gloc.of |.L115|)
       (apply.gloc.of |.transformer-thunk| "../stdlib/core/syntax-case.scm" . 30728))
     (push)
     (push.iloc.0 . 0)
     (apply.gloc.of |.set-top-level-macro!| "../stdlib/core/syntax-case.scm" . 30728))
   (call
     (push.const . syntax)
     (push.const . |core.syntax-case'unsyntax-splicing|)
     (call
       (push.gloc.of |.L112|)
       (apply.gloc.of |.transformer-thunk| "../stdlib/core/syntax-case.scm" . 30728))
     (push)
     (push.iloc.0 . 0)
     (apply.gloc.of |.set-top-level-macro!| "../stdlib/core/syntax-case.scm" . 30728))
   (push.const . syntax)
   (push.const . |core.syntax-case'quasisyntax|)
   (call
     (push.gloc.of |.L125|)
     (apply.gloc.of |.transformer-thunk| "../stdlib/core/syntax-case.scm" . 89093))
   (push)
   (push.iloc.0 . 0)
   (apply.gloc.of |.set-top-level-macro!| "../stdlib/core/syntax-case.scm" . 30728))
 (push.const . core.syntax-case)
 (push.const . #f)
 (push.const
   (syntax-case import . |.syntax-case|)
   (syntax import . |.syntax|)
   (with-syntax import . |core.syntax-case'with-syntax|)
   (_ import . |._|)
   (... import . |....|)
   (make-variable-transformer import . |.make-variable-transformer|)
   (identifier? import . |.identifier?|)
   (bound-identifier=? import . |.bound-identifier=?|)
   (free-identifier=? import . |.free-identifier=?|)
   (datum->syntax import . |.datum->syntax|)
   (syntax->datum import . |.syntax->datum|)
   (generate-temporaries import . |.generate-temporaries|)
   (quasisyntax import . |core.syntax-case'quasisyntax|)
   (syntax-violation import . |.syntax-violation|)
   (datum import . |core.syntax-case'datum|)
   (define-macro import . |core.syntax-case'define-macro|)
   (unsyntax import . |core.syntax-case'unsyntax|)
   (unsyntax-splicing import . |core.syntax-case'unsyntax-splicing|))
 (apply.gloc.of |.intern-scheme-library| "../stdlib/core/syntax-case.scm" . 33797))

((call
   (push.const core primitives)
   (apply.gloc.of |.require-scheme-library| "../stdlib/core/r5rs.scm" . 5121))
 (close (1 0 . |core.r5rs'force|) (apply.iloc (0 . 0) "../stdlib/core/r5rs.scm" . 18439))
 (set.gloc.of |core.r5rs'force|)
 (close
   (1 0 . |core.r5rs'make-promise|)
   (push.const . #f)
   (push.const . #f)
   (extend . 2)
   (ret.close
     (0 0)
     (iloc.1 . 0)
     (if.true (ret.iloc 1 . 1))
     (call (apply.iloc (2 . 0) "../stdlib/core/r5rs.scm" . 27672))
     (push)
     (extend . 1)
     (iloc 2 . 0)
     (if.true (ret.iloc 2 . 1))
     (const . #t)
     (set.iloc (2 . 0) "../stdlib/core/r5rs.scm" . 30748)
     (iloc.0 . 0)
     (set.iloc (2 . 1) "../stdlib/core/r5rs.scm" . 31767)
     (ret.iloc 2 . 1)))
 (set.gloc.of |core.r5rs'make-promise|)
 (call
   (push.const . syntax)
   (push.const . |core.r5rs'delay|)
   (push.const
     ...
     ()
     ("../stdlib/core/r5rs.scm" . 35845)
     ((delay expression)
      (make-promise (lambda () expression))
      ((expression . 0) (delay . 0))
      (lambda make-promise)))
   (push.const
     (... import . |....|)
     (expression unbound)
     (lambda import . |.lambda|)
     (delay import . |core.r5rs'delay|)
     (make-promise import . |core.r5rs'make-promise|))
   (apply.gloc.of |.set-top-level-macro!| "../stdlib/core/r5rs.scm" . 5121))
 (push.const . core.r5rs)
 (push.const . #f)
 (push.const
   (inexact->exact import . |.exact|)
   (exact->inexact import . |.inexact|)
   (quotient import . |.quotient|)
   (remainder import . |.remainder|)
   (modulo import . |.modulo|)
   (delay import . |core.r5rs'delay|)
   (force import . |core.r5rs'force|))
 (apply.gloc.of |.intern-scheme-library| "../stdlib/core/r5rs.scm" . 5121))

((close
   (1 0)
   (call
     (push.iloc.0 . 0)
     (push.const . k)
     (apply.gloc.of |.syntax/i0n| "../stdlib/core/control.scm" . 18456))
   (push)
   (call
     (push.iloc.0 . 0)
     (push.const lst ...)
     (push.const (lst . 1))
     (apply.gloc.of |.syntax/c1n| "../stdlib/core/control.scm" . 18483))
   (push)
   (push.subr.gloc.of |.length| 1 "../stdlib/core/control.scm" . 18475)
   (apply.gloc.of |.datum->syntax| "../stdlib/core/control.scm" . 18456))
 (set.gloc.of |.L179|)
 (close
   (1 0)
   (push.gloc.of |.vars|)
   (push.iloc.0 . 0)
   (push.const)
   (push.const _ (lst ...))
   (push.const . #f)
   (push.gloc.of |.L179|)
   (push.subr.gloc.of |.list| 3 "../stdlib/core/control.scm" . 17415)
   (apply.gloc.of |.syntax-dispatch| "../stdlib/core/control.scm" . 17415))
 (set.gloc.of |.L180|)
 (call
   (push.const core syntax-case)
   (apply.gloc.of |.require-scheme-library| "../stdlib/core/control.scm" . 18456))
 (call
   (push.const core primitives)
   (apply.gloc.of |.require-scheme-library| "../stdlib/core/control.scm" . 18456))
 (call
   (push.const core intrinsics)
   (apply.gloc.of |.require-scheme-library| "../stdlib/core/control.scm" . 18456))
 (call
   (push.const
     (more unbound)
     (_ import . |._|)
     (... import . |....|)
     (fmls unbound)
     (begin import . |.begin|)
     (case-lambda import . |core.control'case-lambda|)
     (x2 unbound)
     (syntax-length import . |core.control'syntax-length|)
     (result1 unbound)
     (r unbound)
     (result2 unbound)
     (assertion-violation import . |.assertion-violation|)
     (k unbound)
     (let import . |.let|)
     (>= import . |.>=|)
     (if import . |.if|)
     (n unbound)
     (b1 unbound)
     (= import . |.=|)
     (test unbound)
     (apply import . |.apply|)
     (unless import . |core.control'unless|)
     (when import . |core.control'when|)
     (x unbound)
     (lst unbound)
     (args unbound)
     (not import . |.not|)
     (b2 unbound)
     (length import . |.length|)
     (quote import . |.quote|)
     (case-lambda-help import . |core.control'case-lambda-help|)
     (lambda import . |.lambda|)
     (x1 unbound))
   (extend . 1)
   (call
     (push.const . syntax)
     (push.const . |core.control'syntax-length|)
     (call
       (push.gloc.of |.L180|)
       (apply.gloc.of |.transformer-thunk| "../stdlib/core/control.scm" . 18456))
     (push)
     (push.iloc.0 . 0)
     (apply.gloc.of |.set-top-level-macro!| "../stdlib/core/control.scm" . 18456))
   (call
     (push.const . syntax)
     (push.const . |core.control'when|)
     (push.const
       ...
       ()
       ("../stdlib/core/control.scm" . 21509)
       ((when test result1 result2 ...)
        (if test (begin result1 result2 ...))
        ((result2 . 1) (result1 . 0) (test . 0) (when . 0))
        (begin if)))
     (push.iloc.0 . 0)
     (apply.gloc.of |.set-top-level-macro!| "../stdlib/core/control.scm" . 18456))
   (call
     (push.const . syntax)
     (push.const . |core.control'unless|)
     (push.const
       ...
       ()
       ("../stdlib/core/control.scm" . 27653)
       ((unless test result1 result2 ...)
        (if (not test) (begin result1 result2 ...))
        ((result2 . 1) (result1 . 0) (test . 0) (unless . 0))
        (begin not if)))
     (push.iloc.0 . 0)
     (apply.gloc.of |.set-top-level-macro!| "../stdlib/core/control.scm" . 18456))
   (call
     (push.const . syntax)
     (push.const . |core.control'case-lambda-help|)
     (push.const
       ...
       ()
       ("../stdlib/core/control.scm" . 33797)
       ((_ args n)
        (assertion-violation #f "wrong number of arguments" args)
        ((n . 0) (args . 0))
        (assertion-violation))
       ((_ args n ((x ...) b1 b2 ...) more ...)
        (if (= n (syntax-length (x ...)))
            (apply (lambda (x ...) b1 b2 ...) args)
            (case-lambda-help args n more ...))
        ((more . 1) (b2 . 1) (b1 . 0) (x . 1) (n . 0) (args . 0))
        (case-lambda-help lambda apply syntax-length = if))
       ((_ args n ((x1 x2 ... . r) b1 b2 ...) more ...)
        (if (>= n (syntax-length (x1 x2 ...)))
            (apply (lambda (x1 x2 ... . r) b1 b2 ...) args)
            (case-lambda-help args n more ...))
        ((more . 1) (b2 . 1) (b1 . 0) (r . 0) (x2 . 1) (x1 . 0) (n . 0) (args . 0))
        (case-lambda-help lambda apply syntax-length >= if))
       ((_ args n (r b1 b2 ...) more ...)
        (apply (lambda r b1 b2 ...) args)
        ((more . 1) (b2 . 1) (b1 . 0) (r . 0) (n . 0) (args . 0))
        (lambda apply)))
     (push.iloc.0 . 0)
     (apply.gloc.of |.set-top-level-macro!| "../stdlib/core/control.scm" . 18456))
   (push.const . syntax)
   (push.const . |core.control'case-lambda|)
   (push.const
     ...
     ()
     ("../stdlib/core/control.scm" . 49157)
     ((_ (fmls b1 b2 ...)) (lambda fmls b1 b2 ...) ((b2 . 1) (b1 . 0) (fmls . 0)) (lambda))
     ((_ (fmls b1 b2 ...) ...)
      (lambda args (let ((n (length args))) (case-lambda-help args n (fmls b1 b2 ...) ...)))
      ((b2 . 2) (b1 . 1) (fmls . 1))
      (case-lambda-help length n let args lambda)))
   (push.iloc.0 . 0)
   (apply.gloc.of |.set-top-level-macro!| "../stdlib/core/control.scm" . 18456))
 (push.const . core.control)
 (push.const . #f)
 (push.const
   (when import . |core.control'when|)
   (unless import . |core.control'unless|)
   (do import . |.do|)
   (case-lambda import . |core.control'case-lambda|))
 (apply.gloc.of |.intern-scheme-library| "../stdlib/core/control.scm" . 18456))

((close
   (1 0)
   (push.gloc.of |.vars|)
   (push.iloc.0 . 0)
   (push.const)
   (push.const _ (lst ...))
   (push.const . #f)
   (push.gloc.of |.L185|)
   (push.subr.gloc.of |.list| 3 "../stdlib/core/optargs.scm" . 13319)
   (apply.gloc.of |.syntax-dispatch| "../stdlib/core/optargs.scm" . 13319))
 (set.gloc.of |.L184|)
 (close
   (1 0)
   (call
     (push.iloc.0 . 0)
     (push.const . k)
     (apply.gloc.of |.syntax/i0n| "../stdlib/core/optargs.scm" . 15370))
   (push)
   (call
     (push.iloc.0 . 0)
     (push.const lst ...)
     (push.const (lst . 1))
     (apply.gloc.of |.syntax/c1n| "../stdlib/core/optargs.scm" . 15397))
   (push)
   (push.subr.gloc.of |.length| 1 "../stdlib/core/optargs.scm" . 15389)
   (apply.gloc.of |.datum->syntax| "../stdlib/core/optargs.scm" . 15370))
 (set.gloc.of |.L185|)
 (call
   (push.const core syntax-case)
   (apply.gloc.of |.require-scheme-library| "../stdlib/core/optargs.scm" . 12293))
 (call
   (push.const core intrinsics)
   (apply.gloc.of |.require-scheme-library| "../stdlib/core/optargs.scm" . 12293))
 (call
   (push.const
     (temp unbound)
     (body2 unbound)
     (_ import . |._|)
     (body1 unbound)
     (argc unbound)
     (... import . |....|)
     (var2 unbound)
     (syntax-length import . |core.optargs'syntax-length|)
     (value unbound)
     (car import . |.car|)
     (pair? import . |.pair?|)
     (append import . |.append|)
     (list import . |.list|)
     (let import . |.let|)
     (def2 unbound)
     (if import . |.if|)
     (def unbound)
     (var1 unbound)
     (def1 unbound)
     (var unbound)
     (= import . |.=|)
     (apply import . |.apply|)
     (k unbound)
     (lst unbound)
     (let-optionals import . |core.optargs'let-optionals|)
     (let-optionals-aux import . |core.optargs'let-optionals-aux|)
     (args unbound)
     (length import . |.length|)
     (quote import . |.quote|)
     (lambda import . |.lambda|))
   (extend . 1)
   (call
     (push.const . syntax)
     (push.const . |core.optargs'syntax-length|)
     (call
       (push.gloc.of |.L184|)
       (apply.gloc.of |.transformer-thunk| "../stdlib/core/optargs.scm" . 12293))
     (push)
     (push.iloc.0 . 0)
     (apply.gloc.of |.set-top-level-macro!| "../stdlib/core/optargs.scm" . 12293))
   (call
     (push.const . syntax)
     (push.const . |core.optargs'let-optionals-aux|)
     (push.const
       ...
       ()
       ("../stdlib/core/optargs.scm" . 18437)
       ((_ _ _ (value ...) () ()) (list value ...) ((value . 1)) (list))
       ((_ argc args () (var1 ... var2) (def1 ... def2))
        (if (= argc (syntax-length (var1 ... var2)))
            args
            (let ((temp def2)) (let-optionals-aux argc args (temp) (var1 ...) (def1 ...))))
        ((def2 . 0) (def1 . 1) (var2 . 0) (var1 . 1) (args . 0) (argc . 0))
        (let-optionals-aux temp let syntax-length = if))
       ((_ argc args (value ...) (var) (def))
        (if (= argc 1) (append args (list value ...)) (list def value ...))
        ((def . 0) (var . 0) (value . 1) (args . 0) (argc . 0))
        (list append = if))
       ((_ argc args (value ...) (var1 ... var2) (def1 ... def2))
        (if (= argc (syntax-length (var1 ... var2)))
            (append args (list value ...))
            (let ((temp def2))
              (let-optionals-aux argc args (temp value ...) (var1 ...) (def1 ...))))
        ((def2 . 0) (def1 . 1) (var2 . 0) (var1 . 1) (value . 1) (args . 0) (argc . 0))
        (let-optionals-aux temp let list append syntax-length = if)))
     (push.iloc.0 . 0)
     (apply.gloc.of |.set-top-level-macro!| "../stdlib/core/optargs.scm" . 12293))
   (push.const . syntax)
   (push.const . |core.optargs'let-optionals|)
   (push.const
     ...
     ()
     ("../stdlib/core/optargs.scm" . 37893)
     ((_ args ((var def)) body1 body2 ...)
      (let ((var (if (pair? args) (car args) def))) body1 body2 ...)
      ((body2 . 1) (body1 . 0) (def . 0) (var . 0) (args . 0))
      (car pair? if let))
     ((_ args ((var def) ...) body1 body2 ...)
      (apply
        (lambda (var ...) body1 body2 ...)
        (let ((argc (length args))) (let-optionals-aux argc args () (var ...) (def ...))))
      ((body2 . 1) (body1 . 0) (def . 1) (var . 1) (args . 0))
      (let-optionals-aux length argc let lambda apply)))
   (push.iloc.0 . 0)
   (apply.gloc.of |.set-top-level-macro!| "../stdlib/core/optargs.scm" . 12293))
 (push.const . core.optargs)
 (push.const . #f)
 (push.const (let-optionals import . |core.optargs'let-optionals|))
 (apply.gloc.of |.intern-scheme-library| "../stdlib/core/optargs.scm" . 12293))

((close
   (1 0 . loop)
   (iloc.0 . 0)
   (if.null?.ret.const)
   (push.iloc.0 . 0)
   (subr.gloc.of |.cdar| 1 "../stdlib/core/lists.scm" . 29719)
   (if.null?
     (touch.gloc.of |loop`550*|)
     (push.cdr.iloc (0 . 0) "../stdlib/core/lists.scm" . 29737)
     (apply.gloc.of |loop`550*| "../stdlib/core/lists.scm" . 29731))
   (push.iloc.0 . 0)
   (push.subr.gloc.of |.cdar| 1 "../stdlib/core/lists.scm" . 30747)
   (call
     (touch.gloc.of |loop`550*|)
     (push.cdr.iloc (0 . 0) "../stdlib/core/lists.scm" . 30764)
     (apply.gloc.of |loop`550*| "../stdlib/core/lists.scm" . 30758))
   (ret.cons "../stdlib/core/lists.scm" . 30741))
 (set.gloc.of |loop`550*|)
 (close
   (2 0 . loop)
   (iloc.0 . 0)
   (if.null? (push.iloc.0 . 1) (ret.subr.gloc.of |.reverse| "../stdlib/core/lists.scm" . 305165))
   (push.car.iloc (0 . 0) "../stdlib/core/lists.scm" . 306199)
   (push.iloc.0 . 1)
   (subr.gloc.of |.memq| 2 "../stdlib/core/lists.scm" . 306193)
   (if.true
     (touch.gloc.of |loop`755*|)
     (push.cdr.iloc (0 . 0) "../stdlib/core/lists.scm" . 307223)
     (push.iloc.0 . 1)
     (apply.gloc.of |loop`755*| "../stdlib/core/lists.scm" . 307217))
   (touch.gloc.of |loop`755*|)
   (push.cdr.iloc (0 . 0) "../stdlib/core/lists.scm" . 308247)
   (push.car.iloc (0 . 0) "../stdlib/core/lists.scm" . 308263)
   (iloc.0 . 1)
   (push.cons)
   (apply.gloc.of |loop`755*| "../stdlib/core/lists.scm" . 308241))
 (set.gloc.of |loop`755*|)
 (close
   (1 0 . loop)
   (iloc.0 . 0)
   (if.not.pair?.ret.const . #f)
   (car.iloc (0 . 0) "../stdlib/core/lists.scm" . 297002)
   (if.not.symbol?.ret.const . #t)
   (push.car.iloc (0 . 0) "../stdlib/core/lists.scm" . 298018)
   (push.cdr.iloc (0 . 0) "../stdlib/core/lists.scm" . 298028)
   (subr.gloc.of |.memq| 2 "../stdlib/core/lists.scm" . 298012)
   (if.true.ret)
   (touch.gloc.of |loop`747*|)
   (push.cdr.iloc (0 . 0) "../stdlib/core/lists.scm" . 299042)
   (apply.gloc.of |loop`747*| "../stdlib/core/lists.scm" . 299036))
 (set.gloc.of |loop`747*|)
 (call
   (push.const core optargs)
   (apply.gloc.of |.require-scheme-library| "../stdlib/core/lists.scm" . 28681))
 (call
   (push.const core primitives)
   (apply.gloc.of |.require-scheme-library| "../stdlib/core/lists.scm" . 28681))
 (close
   (1 0 . |core.lists'collect-cdr|)
   (touch.gloc.of |loop`550*|)
   (push.iloc.0 . 0)
   (apply.gloc.of |loop`550*| "../stdlib/core/lists.scm" . 28681))
 (set.gloc.of |core.lists'collect-cdr|)
 (close
   (2 0 . |core.lists'find|)
   (iloc.0 . 1)
   (if.null?.ret.const . #f)
   (iloc.0 . 1)
   (if.pair?
     (extend.enclose+
       (2 0 . loop)
       (call (push.iloc.0 . 0) (apply.iloc (2 . 0) "../stdlib/core/lists.scm" . 37911))
       (if.true (ret.iloc 0 . 0))
       (iloc.0 . 1)
       (if.null?.ret.const . #f)
       (iloc.0 . 1)
       (if.pair?
         (push.car.iloc (0 . 1) "../stdlib/core/lists.scm" . 39978)
         (push.cdr.iloc (0 . 1) "../stdlib/core/lists.scm" . 39989)
         (apply.iloc+ (1 . 0) "../stdlib/core/lists.scm" . 39972))
       (push.const . find)
       (push.const . "traversal reached to non-pair element ~s")
       (push.iloc.0 . 1)
       (push.subr.gloc.of |.format| 2 "../stdlib/core/lists.scm" . 42034)
       (push.iloc 2 . 0)
       (push.iloc 2 . 1)
       (push.subr.gloc.of |.list| 2 "../stdlib/core/lists.scm" . 42091)
       (apply.gloc.of |.assertion-violation| "../stdlib/core/lists.scm" . 42007))
     (push.car.iloc (1 . 1) "../stdlib/core/lists.scm" . 36895)
     (push.cdr.iloc (1 . 1) "../stdlib/core/lists.scm" . 36912)
     (apply.iloc+ (0 . 0) "../stdlib/core/lists.scm" . 37904))
   (push.const . find)
   (push.const . "expected chain of pairs, but got ~r, as argument 2")
   (push.iloc.0 . 1)
   (push.subr.gloc.of |.format| 2 "../stdlib/core/lists.scm" . 44073)
   (push.iloc.0 . 0)
   (push.iloc.0 . 1)
   (push.subr.gloc.of |.list| 2 "../stdlib/core/lists.scm" . 44139)
   (apply.gloc.of |.assertion-violation| "../stdlib/core/lists.scm" . 44046))
 (set.gloc.of |core.lists'find|)
 (close
   (2 0 . |core.lists'for-all-n|)
   (push.iloc.0 . 1)
   (push.subr.gloc.of |.length| 1 "../stdlib/core/lists.scm" . 48147)
   (extend . 1)
   (extend.enclose+
     (1 0 . collect-car)
     (extend.enclose+
       (1 0 . loop)
       (iloc.0 . 0)
       (if.null?.ret.const)
       (car.iloc (0 . 0) "../stdlib/core/lists.scm" . 54301)
       (if.pair?
         (push.iloc.0 . 0)
         (push.subr.gloc.of |.caar| 1 "../stdlib/core/lists.scm" . 55324)
         (call
           (push.cdr.iloc (0 . 0) "../stdlib/core/lists.scm" . 55341)
           (apply.iloc+ (1 . 0) "../stdlib/core/lists.scm" . 55335))
         (ret.cons "../stdlib/core/lists.scm" . 55318))
       (push.const . for-all)
       (push.const . "traversal reached to non-pair element ~s")
       (push.car.iloc (0 . 0) "../stdlib/core/lists.scm" . 57447)
       (push.subr.gloc.of |.format| 2 "../stdlib/core/lists.scm" . 57396)
       (push.iloc 5 . 1)
       (apply.gloc.of |.assertion-violation| "../stdlib/core/lists.scm" . 57366))
     (push.iloc.1 . 0)
     (apply.iloc+ (0 . 0) "../stdlib/core/lists.scm" . 53263))
   (extend.enclose+
     (2 0 . loop)
     (push.iloc.0 . 0)
     (subr.gloc.of |.length| 1 "../stdlib/core/lists.scm" . 60434)
     (=.iloc (3 . 0) "../stdlib/core/lists.scm" . 60431)
     (if.false.call
       (push.const . for-all)
       (push.const . "expected same length chains of pairs")
       (push.iloc 4 . 1)
       (apply.gloc.of |.assertion-violation| "../stdlib/core/lists.scm" . 61455))
     (iloc.0 . 1)
     (if.null?
       (push.iloc 4 . 0)
       (push.iloc.0 . 0)
       (apply.gloc.of |.apply| "../stdlib/core/lists.scm" . 63503))
     (call
       (push.iloc 4 . 0)
       (push.iloc.0 . 0)
       (apply.gloc.of |.apply| "../stdlib/core/lists.scm" . 64532))
     (if.false.ret)
     (call (push.iloc.0 . 1) (apply.iloc+ (2 . 0) "../stdlib/core/lists.scm" . 65562))
     (push)
     (call
       (push.iloc.0 . 1)
       (apply.gloc.of |core.lists'collect-cdr| "../stdlib/core/lists.scm" . 65581))
     (push)
     (apply.iloc+ (1 . 0) "../stdlib/core/lists.scm" . 65556))
   (call (push.iloc 3 . 1) (apply.iloc+ (1 . 0) "../stdlib/core/lists.scm" . 59418))
   (push)
   (call
     (push.iloc 3 . 1)
     (apply.gloc.of |core.lists'collect-cdr| "../stdlib/core/lists.scm" . 59453))
   (push)
   (apply.iloc+ (0 . 0) "../stdlib/core/lists.scm" . 60427))
 (set.gloc.of |core.lists'for-all-n|)
 (close
   (2 0 . |core.lists'exists-n|)
   (push.iloc.0 . 1)
   (push.subr.gloc.of |.length| 1 "../stdlib/core/lists.scm" . 69651)
   (extend . 1)
   (extend.enclose+
     (1 0 . collect-car)
     (extend.enclose+
       (1 0 . loop)
       (iloc.0 . 0)
       (if.null?.ret.const)
       (car.iloc (0 . 0) "../stdlib/core/lists.scm" . 75805)
       (if.pair?
         (push.iloc.0 . 0)
         (push.subr.gloc.of |.caar| 1 "../stdlib/core/lists.scm" . 76828)
         (call
           (push.cdr.iloc (0 . 0) "../stdlib/core/lists.scm" . 76845)
           (apply.iloc+ (1 . 0) "../stdlib/core/lists.scm" . 76839))
         (ret.cons "../stdlib/core/lists.scm" . 76822))
       (push.const . exists)
       (push.const . "traversal reached to non-pair element ~s")
       (push.car.iloc (0 . 0) "../stdlib/core/lists.scm" . 78950)
       (push.subr.gloc.of |.format| 2 "../stdlib/core/lists.scm" . 78899)
       (push.iloc 5 . 1)
       (apply.gloc.of |.assertion-violation| "../stdlib/core/lists.scm" . 78870))
     (push.iloc.1 . 0)
     (apply.iloc+ (0 . 0) "../stdlib/core/lists.scm" . 74767))
   (extend.enclose+
     (2 0 . loop)
     (push.iloc.0 . 0)
     (subr.gloc.of |.length| 1 "../stdlib/core/lists.scm" . 81938)
     (=.iloc (3 . 0) "../stdlib/core/lists.scm" . 81935)
     (if.false.call
       (push.const . exists)
       (push.const . "expected same length chains of pairs")
       (push.iloc 4 . 1)
       (apply.gloc.of |.assertion-violation| "../stdlib/core/lists.scm" . 82959))
     (iloc.0 . 1)
     (if.null?
       (push.iloc 4 . 0)
       (push.iloc.0 . 0)
       (apply.gloc.of |.apply| "../stdlib/core/lists.scm" . 85007))
     (call
       (push.iloc 4 . 0)
       (push.iloc.0 . 0)
       (apply.gloc.of |.apply| "../stdlib/core/lists.scm" . 86035))
     (if.true.ret)
     (call (push.iloc.0 . 1) (apply.iloc+ (2 . 0) "../stdlib/core/lists.scm" . 87065))
     (push)
     (call
       (push.iloc.0 . 1)
       (apply.gloc.of |core.lists'collect-cdr| "../stdlib/core/lists.scm" . 87084))
     (push)
     (apply.iloc+ (1 . 0) "../stdlib/core/lists.scm" . 87059))
   (call (push.iloc 3 . 1) (apply.iloc+ (1 . 0) "../stdlib/core/lists.scm" . 80922))
   (push)
   (call
     (push.iloc 3 . 1)
     (apply.gloc.of |core.lists'collect-cdr| "../stdlib/core/lists.scm" . 80957))
   (push)
   (apply.iloc+ (0 . 0) "../stdlib/core/lists.scm" . 81931))
 (set.gloc.of |core.lists'exists-n|)
 (close
   (2 0 . |core.lists'for-all-n-quick|)
   (iloc.0 . 1)
   (if.null?.ret.const . #t)
   (extend.enclose+
     (2 0 . loop)
     (iloc.0 . 1)
     (if.null?
       (push.iloc 2 . 0)
       (push.iloc.0 . 0)
       (apply.gloc.of |.apply| "../stdlib/core/lists.scm" . 94225))
     (call
       (push.iloc 2 . 0)
       (push.iloc.0 . 0)
       (apply.gloc.of |.apply| "../stdlib/core/lists.scm" . 95254))
     (if.false.ret)
     (push.car.iloc (0 . 1) "../stdlib/core/lists.scm" . 96284)
     (push.cdr.iloc (0 . 1) "../stdlib/core/lists.scm" . 96295)
     (apply.iloc+ (1 . 0) "../stdlib/core/lists.scm" . 96278))
   (push.car.iloc (1 . 1) "../stdlib/core/lists.scm" . 92188)
   (push.cdr.iloc (1 . 1) "../stdlib/core/lists.scm" . 92205)
   (apply.iloc+ (0 . 0) "../stdlib/core/lists.scm" . 93197))
 (set.gloc.of |core.lists'for-all-n-quick|)
 (close
   (2 0 . |core.lists'exists-n-quick|)
   (iloc.0 . 1)
   (if.not.pair?.ret.const . #f)
   (extend.enclose+
     (2 0 . loop)
     (iloc.0 . 1)
     (if.null?
       (push.iloc 2 . 0)
       (push.iloc.0 . 0)
       (apply.gloc.of |.apply| "../stdlib/core/lists.scm" . 103442))
     (call
       (push.iloc 2 . 0)
       (push.iloc.0 . 0)
       (apply.gloc.of |.apply| "../stdlib/core/lists.scm" . 104470))
     (if.true.ret)
     (push.car.iloc (0 . 1) "../stdlib/core/lists.scm" . 105500)
     (push.cdr.iloc (0 . 1) "../stdlib/core/lists.scm" . 105511)
     (apply.iloc+ (1 . 0) "../stdlib/core/lists.scm" . 105494))
   (push.car.iloc (1 . 1) "../stdlib/core/lists.scm" . 101405)
   (push.cdr.iloc (1 . 1) "../stdlib/core/lists.scm" . 101422)
   (apply.iloc+ (0 . 0) "../stdlib/core/lists.scm" . 102414))
 (set.gloc.of |core.lists'exists-n-quick|)
 (close
   (2 0 . |core.lists'for-all-1|)
   (iloc.0 . 1)
   (if.null?.ret.const . #t)
   (iloc.0 . 1)
   (if.pair?
     (extend.enclose+
       (2 0 . loop)
       (iloc.0 . 1)
       (if.null? (push.iloc.0 . 0) (apply.iloc (2 . 0) "../stdlib/core/lists.scm" . 112676))
       (iloc.0 . 1)
       (if.pair?
         (call (push.iloc.0 . 0) (apply.iloc (2 . 0) "../stdlib/core/lists.scm" . 114716))
         (if.false.ret)
         (push.car.iloc (0 . 1) "../stdlib/core/lists.scm" . 115746)
         (push.cdr.iloc (0 . 1) "../stdlib/core/lists.scm" . 115757)
         (apply.iloc+ (1 . 0) "../stdlib/core/lists.scm" . 115740))
       (call (push.iloc.0 . 0) (apply.iloc (2 . 0) "../stdlib/core/lists.scm" . 117788))
       (if.false.ret)
       (push.const . for-all)
       (push.const . "traversal reached to non-pair element ~s")
       (push.iloc.0 . 1)
       (push.subr.gloc.of |.format| 2 "../stdlib/core/lists.scm" . 118842)
       (push.iloc 2 . 0)
       (push.iloc 2 . 1)
       (push.subr.gloc.of |.list| 2 "../stdlib/core/lists.scm" . 118899)
       (apply.gloc.of |.assertion-violation| "../stdlib/core/lists.scm" . 118812))
     (push.car.iloc (1 . 1) "../stdlib/core/lists.scm" . 111647)
     (push.cdr.iloc (1 . 1) "../stdlib/core/lists.scm" . 111664)
     (apply.iloc+ (0 . 0) "../stdlib/core/lists.scm" . 112656))
   (push.const . for-all)
   (push.const . "expected chain of pairs, but got ~r, as argument 2")
   (push.iloc.0 . 1)
   (push.subr.gloc.of |.format| 2 "../stdlib/core/lists.scm" . 120876)
   (push.iloc.0 . 0)
   (push.iloc.0 . 1)
   (push.subr.gloc.of |.list| 2 "../stdlib/core/lists.scm" . 120942)
   (apply.gloc.of |.assertion-violation| "../stdlib/core/lists.scm" . 120846))
 (set.gloc.of |core.lists'for-all-1|)
 (close
   (2 0 . |core.lists'exists-1|)
   (iloc.0 . 1)
   (if.null?.ret.const . #f)
   (iloc.0 . 1)
   (if.pair?
     (extend.enclose+
       (2 0 . loop)
       (iloc.0 . 1)
       (if.null? (push.iloc.0 . 0) (apply.iloc (2 . 0) "../stdlib/core/lists.scm" . 128036))
       (call (push.iloc.0 . 0) (apply.iloc (2 . 0) "../stdlib/core/lists.scm" . 129047))
       (if.true.ret)
       (iloc.0 . 1)
       (if.pair?
         (push.car.iloc (0 . 1) "../stdlib/core/lists.scm" . 130090)
         (push.cdr.iloc (0 . 1) "../stdlib/core/lists.scm" . 130101)
         (apply.iloc+ (1 . 0) "../stdlib/core/lists.scm" . 130084))
       (push.const . exists)
       (push.const . "traversal reached to non-pair element ~s")
       (push.iloc.0 . 1)
       (push.subr.gloc.of |.format| 2 "../stdlib/core/lists.scm" . 132148)
       (push.iloc 2 . 0)
       (push.iloc 2 . 1)
       (push.subr.gloc.of |.list| 2 "../stdlib/core/lists.scm" . 132205)
       (apply.gloc.of |.assertion-violation| "../stdlib/core/lists.scm" . 132119))
     (push.car.iloc (1 . 1) "../stdlib/core/lists.scm" . 127007)
     (push.cdr.iloc (1 . 1) "../stdlib/core/lists.scm" . 127024)
     (apply.iloc+ (0 . 0) "../stdlib/core/lists.scm" . 128016))
   (push.const . exists)
   (push.const . "expected chain of pairs, but got ~r, as argument 2")
   (push.iloc.0 . 1)
   (push.subr.gloc.of |.format| 2 "../stdlib/core/lists.scm" . 134187)
   (push.iloc.0 . 0)
   (push.iloc.0 . 1)
   (push.subr.gloc.of |.list| 2 "../stdlib/core/lists.scm" . 134253)
   (apply.gloc.of |.assertion-violation| "../stdlib/core/lists.scm" . 134158))
 (set.gloc.of |core.lists'exists-1|)
 (close
   (2 1 . |core.lists'for-all|)
   (iloc.0 . 2)
   (if.null?
     (push.iloc.0 . 0)
     (push.iloc.0 . 1)
     (apply.gloc.of |core.lists'for-all-1| "../stdlib/core/lists.scm" . 139278))
   (call
     (push.gloc.of |.list-transpose+|)
     (push.iloc.0 . 1)
     (push.iloc.0 . 2)
     (apply.gloc.of |.apply| "../stdlib/core/lists.scm" . 140302))
   (push)
   (extend . 1)
   (iloc.0 . 0)
   (if.true
     (push.iloc.1 . 0)
     (push.iloc.0 . 0)
     (apply.gloc.of |core.lists'for-all-n-quick| "../stdlib/core/lists.scm" . 141343))
   (push.iloc.1 . 0)
   (push.iloc.1 . 1)
   (iloc.1 . 2)
   (push.cons)
   (apply.gloc.of |core.lists'for-all-n| "../stdlib/core/lists.scm" . 143374))
 (set.gloc.of |core.lists'for-all|)
 (close
   (2 1 . |core.lists'exists|)
   (iloc.0 . 2)
   (if.null?
     (push.iloc.0 . 0)
     (push.iloc.0 . 1)
     (apply.gloc.of |core.lists'exists-1| "../stdlib/core/lists.scm" . 148494))
   (call
     (push.gloc.of |.list-transpose+|)
     (push.iloc.0 . 1)
     (push.iloc.0 . 2)
     (apply.gloc.of |.apply| "../stdlib/core/lists.scm" . 149518))
   (push)
   (extend . 1)
   (iloc.0 . 0)
   (if.true
     (push.iloc.1 . 0)
     (push.iloc.0 . 0)
     (apply.gloc.of |core.lists'exists-n-quick| "../stdlib/core/lists.scm" . 150559))
   (push.iloc.1 . 0)
   (push.iloc.1 . 1)
   (iloc.1 . 2)
   (push.cons)
   (apply.gloc.of |core.lists'exists-n| "../stdlib/core/lists.scm" . 152590))
 (set.gloc.of |core.lists'exists|)
 (close
   (2 0 . |core.lists'filter|)
   (extend.enclose+
     (1 0 . loop)
     (iloc.0 . 0)
     (if.null?.ret.const)
     (call
       (push.car.iloc (0 . 0) "../stdlib/core/lists.scm" . 158742)
       (apply.iloc (2 . 0) "../stdlib/core/lists.scm" . 158736))
     (if.true
       (push.car.iloc (0 . 0) "../stdlib/core/lists.scm" . 158759)
       (call
         (push.cdr.iloc (0 . 0) "../stdlib/core/lists.scm" . 158775)
         (apply.iloc+ (1 . 0) "../stdlib/core/lists.scm" . 158769))
       (ret.cons "../stdlib/core/lists.scm" . 158753))
     (push.cdr.iloc (0 . 0) "../stdlib/core/lists.scm" . 159771)
     (apply.iloc+ (1 . 0) "../stdlib/core/lists.scm" . 159765))
   (push.iloc.1 . 1)
   (apply.iloc+ (0 . 0) "../stdlib/core/lists.scm" . 157705))
 (set.gloc.of |core.lists'filter|)
 (close
   (2 0 . |core.lists'partition|)
   (extend.enclose+
     (3 0 . loop)
     (iloc.0 . 0)
     (if.null?
       (push.iloc.0 . 1)
       (push.subr.gloc.of |.reverse| 1 "../stdlib/core/lists.scm" . 164900)
       (push.iloc.0 . 2)
       (push.subr.gloc.of |.reverse| 1 "../stdlib/core/lists.scm" . 164915)
       (ret.subr.gloc.of |.values| "../stdlib/core/lists.scm" . 164892))
     (call
       (push.car.iloc (0 . 0) "../stdlib/core/lists.scm" . 165910)
       (apply.iloc (2 . 0) "../stdlib/core/lists.scm" . 165904))
     (if.true
       (push.cdr.iloc (0 . 0) "../stdlib/core/lists.scm" . 165927)
       (push.car.iloc (0 . 0) "../stdlib/core/lists.scm" . 165943)
       (iloc.0 . 1)
       (push.cons)
       (push.iloc.0 . 2)
       (apply.iloc+ (1 . 0) "../stdlib/core/lists.scm" . 165921))
     (push.cdr.iloc (0 . 0) "../stdlib/core/lists.scm" . 166939)
     (push.iloc.0 . 1)
     (push.car.iloc (0 . 0) "../stdlib/core/lists.scm" . 166960)
     (iloc.0 . 2)
     (push.cons)
     (apply.iloc+ (1 . 0) "../stdlib/core/lists.scm" . 166933))
   (push.iloc.1 . 1)
   (push.const)
   (push.const)
   (apply.iloc+ (0 . 0) "../stdlib/core/lists.scm" . 164873))
 (set.gloc.of |core.lists'partition|)
 (close
   (3 0 . |core.lists'fold-left-1|)
   (iloc.0 . 2)
   (if.null? (ret.iloc 0 . 1))
   (push.iloc.0 . 0)
   (call
     (push.iloc.0 . 1)
     (push.car.iloc (0 . 2) "../stdlib/core/lists.scm" . 173099)
     (apply.iloc (0 . 0) "../stdlib/core/lists.scm" . 173088))
   (push)
   (push.cdr.iloc (0 . 2) "../stdlib/core/lists.scm" . 173110)
   (apply.gloc.of |core.lists'fold-left-1| "../stdlib/core/lists.scm" . 173070))
 (set.gloc.of |core.lists'fold-left-1|)
 (close
   (3 0 . |core.lists'fold-left-n|)
   (iloc.0 . 2)
   (if.null? (ret.iloc 0 . 1))
   (push.iloc.0 . 0)
   (call
     (push.iloc.0 . 0)
     (push.iloc.0 . 1)
     (push.subr.gloc.of |.list| 1 "../stdlib/core/lists.scm" . 179252)
     (push.car.iloc (0 . 2) "../stdlib/core/lists.scm" . 179264)
     (push.subr.gloc.of |.append| 2 "../stdlib/core/lists.scm" . 179244)
     (apply.gloc.of |.apply| "../stdlib/core/lists.scm" . 179232))
   (push)
   (push.cdr.iloc (0 . 2) "../stdlib/core/lists.scm" . 179276)
   (apply.gloc.of |core.lists'fold-left-n| "../stdlib/core/lists.scm" . 179214))
 (set.gloc.of |core.lists'fold-left-n|)
 (close
   (3 1 . |core.lists'fold-left|)
   (iloc.0 . 3)
   (if.null?
     (push.iloc.0 . 2)
     (subr.gloc.of |.list?| 1 "../stdlib/core/lists.scm" . 184335)
     (if.true
       (push.iloc.0 . 0)
       (push.iloc.0 . 1)
       (push.iloc.0 . 2)
       (apply.gloc.of |core.lists'fold-left-1| "../stdlib/core/lists.scm" . 185359))
     (push.const . fold-left)
     (push.const . "expected proper list, but got ~r, as argument 3")
     (push.iloc.0 . 2)
     (push.subr.gloc.of |.format| 2 "../stdlib/core/lists.scm" . 186415)
     (push.iloc.0 . 0)
     (push.iloc.0 . 1)
     (push.iloc.0 . 2)
     (push.iloc.0 . 3)
     (push.subr.gloc.of |.cons*| 4 "../stdlib/core/lists.scm" . 186479)
     (apply.gloc.of |.assertion-violation| "../stdlib/core/lists.scm" . 186383))
   (call
     (push.gloc.of |.list-transpose+|)
     (push.iloc.0 . 2)
     (push.iloc.0 . 3)
     (apply.gloc.of |.apply| "../stdlib/core/lists.scm" . 187410))
   (push)
   (extend . 1)
   (iloc.0 . 0)
   (if.true
     (push.iloc.1 . 0)
     (push.iloc.1 . 1)
     (push.iloc.0 . 0)
     (apply.gloc.of |core.lists'fold-left-n| "../stdlib/core/lists.scm" . 188451))
   (push.const . fold-left)
   (push.const . "expected same length proper lists")
   (push.iloc.1 . 0)
   (push.iloc.1 . 1)
   (push.iloc.1 . 2)
   (push.iloc.1 . 3)
   (push.subr.gloc.of |.cons*| 4 "../stdlib/core/lists.scm" . 190550)
   (apply.gloc.of |.assertion-violation| "../stdlib/core/lists.scm" . 190482))
 (set.gloc.of |core.lists'fold-left|)
 (close
   (3 0 . |core.lists'fold-right-1|)
   (iloc.0 . 2)
   (if.null? (ret.iloc 0 . 1))
   (push.car.iloc (0 . 2) "../stdlib/core/lists.scm" . 196628)
   (call
     (push.iloc.0 . 0)
     (push.iloc.0 . 1)
     (push.cdr.iloc (0 . 2) "../stdlib/core/lists.scm" . 196662)
     (apply.gloc.of |core.lists'fold-right-1| "../stdlib/core/lists.scm" . 196638))
   (push)
   (apply.iloc (0 . 0) "../stdlib/core/lists.scm" . 196622))
 (set.gloc.of |core.lists'fold-right-1|)
 (close
   (3 0 . |core.lists'fold-right-n|)
   (iloc.0 . 2)
   (if.null? (ret.iloc 0 . 1))
   (push.iloc.0 . 0)
   (push.car.iloc (0 . 2) "../stdlib/core/lists.scm" . 202786)
   (call
     (push.iloc.0 . 0)
     (push.iloc.0 . 1)
     (push.cdr.iloc (0 . 2) "../stdlib/core/lists.scm" . 202826)
     (apply.gloc.of |core.lists'fold-right-n| "../stdlib/core/lists.scm" . 202802))
   (push)
   (push.subr.gloc.of |.list| 1 "../stdlib/core/lists.scm" . 202796)
   (push.subr.gloc.of |.append| 2 "../stdlib/core/lists.scm" . 202778)
   (apply.gloc.of |.apply| "../stdlib/core/lists.scm" . 202766))
 (set.gloc.of |core.lists'fold-right-n|)
 (close
   (3 1 . |core.lists'fold-right|)
   (iloc.0 . 3)
   (if.null?
     (push.iloc.0 . 2)
     (subr.gloc.of |.list?| 1 "../stdlib/core/lists.scm" . 207887)
     (if.true
       (push.iloc.0 . 0)
       (push.iloc.0 . 1)
       (push.iloc.0 . 2)
       (apply.gloc.of |core.lists'fold-right-1| "../stdlib/core/lists.scm" . 208911))
     (push.const . fold-right)
     (push.const . "expected proper list, but got ~r, as argument 3")
     (push.iloc.0 . 2)
     (push.subr.gloc.of |.format| 2 "../stdlib/core/lists.scm" . 209968)
     (push.iloc.0 . 0)
     (push.iloc.0 . 1)
     (push.iloc.0 . 2)
     (push.iloc.0 . 3)
     (push.subr.gloc.of |.cons*| 4 "../stdlib/core/lists.scm" . 210032)
     (apply.gloc.of |.assertion-violation| "../stdlib/core/lists.scm" . 209935))
   (call
     (push.gloc.of |.list-transpose+|)
     (push.iloc.0 . 2)
     (push.iloc.0 . 3)
     (apply.gloc.of |.apply| "../stdlib/core/lists.scm" . 210962))
   (push)
   (extend . 1)
   (iloc.0 . 0)
   (if.true
     (push.iloc.1 . 0)
     (push.iloc.1 . 1)
     (push.iloc.0 . 0)
     (apply.gloc.of |core.lists'fold-right-n| "../stdlib/core/lists.scm" . 212003))
   (push.const . fold-right)
   (push.const . "expected same length proper lists")
   (push.iloc.1 . 0)
   (push.iloc.1 . 1)
   (push.iloc.1 . 2)
   (push.iloc.1 . 3)
   (push.subr.gloc.of |.cons*| 4 "../stdlib/core/lists.scm" . 214103)
   (apply.gloc.of |.assertion-violation| "../stdlib/core/lists.scm" . 214034))
 (set.gloc.of |core.lists'fold-right|)
 (close
   (2 0 . |core.lists'remp|)
   (extend.enclose+
     (1 0 . loop)
     (iloc.0 . 0)
     (if.null?.ret.const)
     (call
       (push.car.iloc (0 . 0) "../stdlib/core/lists.scm" . 220182)
       (apply.iloc (2 . 0) "../stdlib/core/lists.scm" . 220176))
     (if.true
       (push.cdr.iloc (0 . 0) "../stdlib/core/lists.scm" . 221206)
       (apply.iloc+ (1 . 0) "../stdlib/core/lists.scm" . 221200))
     (push.car.iloc (0 . 0) "../stdlib/core/lists.scm" . 223254)
     (call
       (push.cdr.iloc (0 . 0) "../stdlib/core/lists.scm" . 224284)
       (apply.iloc+ (1 . 0) "../stdlib/core/lists.scm" . 224278))
     (ret.cons "../stdlib/core/lists.scm" . 223248))
   (push.iloc.1 . 1)
   (apply.iloc+ (0 . 0) "../stdlib/core/lists.scm" . 219145))
 (set.gloc.of |core.lists'remp|)
 (close
   (2 0 . |core.lists'remove|)
   (extend.enclose+
     (1 0 . loop)
     (iloc.0 . 0)
     (if.null?.ret.const)
     (push.car.iloc (0 . 0) "../stdlib/core/lists.scm" . 230424)
     (push.iloc 2 . 0)
     (subr.gloc.of |.equal?| 2 "../stdlib/core/lists.scm" . 230416)
     (if.true
       (push.cdr.iloc (0 . 0) "../stdlib/core/lists.scm" . 231446)
       (apply.iloc+ (1 . 0) "../stdlib/core/lists.scm" . 231440))
     (push.car.iloc (0 . 0) "../stdlib/core/lists.scm" . 233494)
     (call
       (push.cdr.iloc (0 . 0) "../stdlib/core/lists.scm" . 234524)
       (apply.iloc+ (1 . 0) "../stdlib/core/lists.scm" . 234518))
     (ret.cons "../stdlib/core/lists.scm" . 233488))
   (push.iloc.1 . 1)
   (apply.iloc+ (0 . 0) "../stdlib/core/lists.scm" . 229385))
 (set.gloc.of |core.lists'remove|)
 (close
   (2 0 . |core.lists'remv|)
   (extend.enclose+
     (1 0 . loop)
     (iloc.0 . 0)
     (if.null?.ret.const)
     (push.car.iloc (0 . 0) "../stdlib/core/lists.scm" . 240662)
     (push.iloc 2 . 0)
     (subr.gloc.of |.eqv?| 2 "../stdlib/core/lists.scm" . 240656)
     (if.true
       (push.cdr.iloc (0 . 0) "../stdlib/core/lists.scm" . 241686)
       (apply.iloc+ (1 . 0) "../stdlib/core/lists.scm" . 241680))
     (push.car.iloc (0 . 0) "../stdlib/core/lists.scm" . 243734)
     (call
       (push.cdr.iloc (0 . 0) "../stdlib/core/lists.scm" . 244764)
       (apply.iloc+ (1 . 0) "../stdlib/core/lists.scm" . 244758))
     (ret.cons "../stdlib/core/lists.scm" . 243728))
   (push.iloc.1 . 1)
   (apply.iloc+ (0 . 0) "../stdlib/core/lists.scm" . 239625))
 (set.gloc.of |core.lists'remv|)
 (close
   (2 0 . |core.lists'remq|)
   (extend.enclose+
     (1 0 . loop)
     (iloc.0 . 0)
     (if.null?.ret.const)
     (push.car.iloc (0 . 0) "../stdlib/core/lists.scm" . 250901)
     (iloc 2 . 0)
     (if.eq?
       (push.cdr.iloc (0 . 0) "../stdlib/core/lists.scm" . 251926)
       (apply.iloc+ (1 . 0) "../stdlib/core/lists.scm" . 251920))
     (push.car.iloc (0 . 0) "../stdlib/core/lists.scm" . 253974)
     (call
       (push.cdr.iloc (0 . 0) "../stdlib/core/lists.scm" . 255004)
       (apply.iloc+ (1 . 0) "../stdlib/core/lists.scm" . 254998))
     (ret.cons "../stdlib/core/lists.scm" . 253968))
   (push.iloc.1 . 1)
   (apply.iloc+ (0 . 0) "../stdlib/core/lists.scm" . 249865))
 (set.gloc.of |core.lists'remq|)
 (close
   (2 0 . |core.lists'memp|)
   (iloc.0 . 1)
   (if.null?.ret.const . #f)
   (call
     (push.car.iloc (0 . 1) "../stdlib/core/lists.scm" . 261135)
     (apply.iloc (0 . 0) "../stdlib/core/lists.scm" . 261129))
   (if.true (ret.iloc 0 . 1))
   (push.iloc.0 . 0)
   (push.cdr.iloc (0 . 1) "../stdlib/core/lists.scm" . 263188)
   (apply.gloc.of |core.lists'memp| "../stdlib/core/lists.scm" . 263177))
 (set.gloc.of |core.lists'memp|)
 (close
   (2 0 . |core.lists'assp|)
   (iloc.0 . 1)
   (if.null?.ret.const . #f)
   (call
     (push.iloc.0 . 1)
     (push.subr.gloc.of |.caar| 1 "../stdlib/core/lists.scm" . 269327)
     (apply.iloc (0 . 0) "../stdlib/core/lists.scm" . 269321))
   (if.true (push.iloc.0 . 1) (ret.subr.gloc.of |.car| "../stdlib/core/lists.scm" . 269339))
   (push.iloc.0 . 0)
   (push.cdr.iloc (0 . 1) "../stdlib/core/lists.scm" . 271380)
   (apply.gloc.of |core.lists'assp| "../stdlib/core/lists.scm" . 271369))
 (set.gloc.of |core.lists'assp|)
 (close
   (1 1 . |core.lists'iota|)
   (call
     (push.iloc.0 . 0)
     (subr.gloc.of |.number?| 1 "../stdlib/core/lists.scm" . 275472)
     (if.false.ret)
     (push.iloc.0 . 0)
     (subr.gloc.of |.exact?| 1 "../stdlib/core/lists.scm" . 275484)
     (if.false.ret)
     (push.iloc.0 . 0)
     (push.const . 0)
     (ret.subr.gloc.of |.>=| "../stdlib/core/lists.scm" . 275495))
   (if.false.call
     (push.const . iota)
     (push.const . "expected non-negative exact integer, but got ~u as argument 1")
     (push.iloc.0 . 0)
     (push.subr.gloc.of |.format| 2 "../stdlib/core/lists.scm" . 276518)
     (push.iloc.0 . 0)
     (iloc.0 . 1)
     (push.cons)
     (apply.gloc.of |.assertion-violation| "../stdlib/core/lists.scm" . 276491))
   (push.close
     (2 0)
     (extend.enclose+
       (2 0 . loop)
       (<n.iloc (0 . 0) 0 "../stdlib/core/lists.scm" . 279570)
       (if.true (ret.iloc 0 . 1))
       (push.n+.iloc (0 . 0) -1 "../stdlib/core/lists.scm" . 280605)
       (push.iloc 2 . 0)
       (push.iloc.0 . 0)
       (push.iloc 2 . 1)
       (push.subr.gloc.of |.*| 2 "../stdlib/core/lists.scm" . 280628)
       (push.subr.gloc.of |.+| 2 "../stdlib/core/lists.scm" . 280619)
       (iloc.0 . 1)
       (push.cons)
       (apply.iloc+ (1 . 0) "../stdlib/core/lists.scm" . 280599))
     (push.n+.iloc (2 . 0) -1 "../stdlib/core/lists.scm" . 278551)
     (push.const)
     (apply.iloc+ (0 . 0) "../stdlib/core/lists.scm" . 279563))
   (call
     (push.iloc.0 . 1)
     (push.subr.gloc.of |.length| 1 "../stdlib/core/lists.scm" . 278537)
     (extend . 1)
     (=n.iloc (0 . 0) 2 "../stdlib/core/lists.scm" . 278537)
     (if.true (ret.iloc 1 . 1))
     (=n.iloc (0 . 0) 1 "../stdlib/core/lists.scm" . 278537)
     (if.true
       (push.iloc.1 . 1)
       (push.const . 1)
       (push.subr.gloc.of |.list| 1 "../stdlib/core/lists.scm" . 278537)
       (ret.subr.gloc.of |.append| "../stdlib/core/lists.scm" . 278537))
     (push.const . 0)
     (push.const . 1)
     (ret.subr.gloc.of |.list| "../stdlib/core/lists.scm" . 278537))
   (push)
   (apply.gloc.of
     |.apply|
     (|.apply|
       (lambda (|start`717*| |step`717*|)
         (letrec* ((|loop`721*|
                     (lambda (|n`722*| |lst`722*|)
                       (if (|.<| |n`722*| 0)
                           |lst`722*|
                           (|loop`721*|
                             (|.-| |n`722*| 1)
                             (|.cons|
                               (|.+| |start`717*| (|.*| |n`722*| |step`717*|))
                               |lst`722*|))))))
           (|loop`721*| (|.-| |n`714*| 1) '())))
       (let ((|argc`716`725*| (|.length| |opt`714*|)))
         (if (|.=| |argc`716`725*| 2)
             |opt`714*|
             (if (|.=| |argc`716`725*| 1) (|.append| |opt`714*| (|.list| 1)) (|.list| 0 1)))))))
 (set.gloc.of |core.lists'iota|)
 (close
   (1 1 . |core.lists'make-list|)
   (call
     (push.iloc.0 . 0)
     (subr.gloc.of |.number?| 1 "../stdlib/core/lists.scm" . 284688)
     (if.false.ret)
     (push.iloc.0 . 0)
     (subr.gloc.of |.exact?| 1 "../stdlib/core/lists.scm" . 284700)
     (if.false.ret)
     (push.iloc.0 . 0)
     (push.const . 0)
     (ret.subr.gloc.of |.>=| "../stdlib/core/lists.scm" . 284711))
   (if.false.call
     (push.const . make-list)
     (push.const . "expected non-negative exact integer, but got ~u as argument 1")
     (push.iloc.0 . 0)
     (push.subr.gloc.of |.format| 2 "../stdlib/core/lists.scm" . 285739)
     (push.iloc.0 . 0)
     (iloc.0 . 1)
     (push.cons)
     (apply.gloc.of |.assertion-violation| "../stdlib/core/lists.scm" . 285707))
   (call
     (iloc.0 . 1)
     (if.not.pair?.ret.const . #f)
     (push.iloc.0 . 1)
     (ret.subr.gloc.of |.car| (|.car| |opt`732*|)))
   (push)
   (extend . 1)
   (extend.enclose+
     (2 0 . loop)
     (<=n.iloc (0 . 1) 0 "../stdlib/core/lists.scm" . 288786)
     (if.true (ret.iloc 0 . 0))
     (push.iloc 2 . 0)
     (iloc.0 . 0)
     (push.cons)
     (push.n+.iloc (0 . 1) -1 "../stdlib/core/lists.scm" . 289837)
     (apply.iloc+ (1 . 0) "../stdlib/core/lists.scm" . 289815))
   (push.const)
   (push.iloc 2 . 0)
   (apply.iloc+ (0 . 0) "../stdlib/core/lists.scm" . 288779))
 (set.gloc.of |core.lists'make-list|)
 (close
   (1 0 . |core.lists'list-of-unique-symbols?|)
   (push.iloc.0 . 0)
   (subr.gloc.of |.list?| 1 "../stdlib/core/lists.scm" . 293900)
   (if.false.ret)
   (call
     (touch.gloc.of |loop`747*|)
     (push.iloc.0 . 0)
     (apply.gloc.of |loop`747*| "../stdlib/core/lists.scm" . 295955))
   (push)
   (ret.subr.gloc.of |.not| (|.not| (|loop`747*| |lst`743*|))))
 (set.gloc.of |core.lists'list-of-unique-symbols?|)
 (close
   (1 0 . |core.lists'remove-duplicate-symbols|)
   (touch.gloc.of |loop`755*|)
   (push.iloc.0 . 0)
   (push.const)
   (apply.gloc.of |loop`755*| "../stdlib/core/lists.scm" . 304137))
 (set.gloc.of |core.lists'remove-duplicate-symbols|)
 (close
   (2 0 . |core.lists'break|)
   (push.const)
   (extend . 1)
   (call
     (extend.enclose
       (1 0 . loop)
       (iloc.0 . 0)
       (if.null?.ret.const)
       (call
         (push.car.iloc (0 . 0) "../stdlib/core/lists.scm" . 316447)
         (apply.iloc (3 . 0) "../stdlib/core/lists.scm" . 316441))
       (if.true (iloc.0 . 0) (set.iloc (2 . 0) "../stdlib/core/lists.scm" . 317472) (ret.const))
       (push.car.iloc (0 . 0) "../stdlib/core/lists.scm" . 319519)
       (call
         (push.cdr.iloc (0 . 0) "../stdlib/core/lists.scm" . 319535)
         (apply.iloc (1 . 0) "../stdlib/core/lists.scm" . 319529))
       (ret.cons "../stdlib/core/lists.scm" . 319513))
     (push.iloc 2 . 1)
     (apply.iloc (0 . 0) "../stdlib/core/lists.scm" . 315410))
   (push)
   (push.iloc.0 . 0)
   (ret.subr.gloc.of
     |.values|
     (|.values|
       (letrec* ((|loop`765*|
                   (lambda (|lst`766*|)
                     (if (|.null?| |lst`766*|)
                         '()
                         (if (|pred`759*| (|.car| |lst`766*|))
                             (begin (set! |tail`761*| |lst`766*|) '())
                             (|.cons| (|.car| |lst`766*|) (|loop`765*| (|.cdr| |lst`766*|))))))))
         (|loop`765*| |lst`759*|))
       |tail`761*|)))
 (set.gloc.of |core.lists'break|)
 (gloc.of |.list-head|)
 (set.gloc.of |core.lists'take|)
 (gloc.of |.list-tail|)
 (set.gloc.of |core.lists'drop|)
 (push.const . core.lists)
 (push.const . #f)
 (push.const
   (find import . |core.lists'find|)
   (for-all import . |core.lists'for-all|)
   (exists import . |core.lists'exists|)
   (filter import . |core.lists'filter|)
   (partition import . |core.lists'partition|)
   (fold-left import . |core.lists'fold-left|)
   (fold-right import . |core.lists'fold-right|)
   (remp import . |core.lists'remp|)
   (remove import . |core.lists'remove|)
   (remv import . |core.lists'remv|)
   (remq import . |core.lists'remq|)
   (memp import . |core.lists'memp|)
   (member import . |.member|)
   (memv import . |.memv|)
   (memq import . |.memq|)
   (assp import . |core.lists'assp|)
   (assoc import . |.assoc|)
   (assv import . |.assv|)
   (assq import . |.assq|)
   (cons* import . |.cons*|)
   (iota import . |core.lists'iota|)
   (make-list import . |core.lists'make-list|)
   (list-of-unique-symbols? import . |core.lists'list-of-unique-symbols?|)
   (remove-duplicate-symbols import . |core.lists'remove-duplicate-symbols|)
   (take import . |core.lists'take|)
   (drop import . |core.lists'drop|)
   (break import . |core.lists'break|))
 (apply.gloc.of |.intern-scheme-library| "../stdlib/core/lists.scm" . 28681))

((close
   (1 0)
   (push.gloc.of |.vars|)
   (push.iloc.0 . 0)
   (push.const)
   (push.const ?_ ?pat ?expr ?body ...)
   (push.const . #f)
   (push.close
     (1 0)
     (call
       (call
         (push.iloc.0 . 0)
         (push.const . ?pat)
         (apply.gloc.of |.syntax/i1n| "../stdlib/core/destructuring.scm" . 213013))
       (push)
       (apply.gloc.of |.syntax->datum| "../stdlib/core/destructuring.scm" . 213013))
     (push)
     (call (apply.gloc.of |.generate-temporary-symbol| "../stdlib/core/destructuring.scm" . 214039))
     (push)
     (subr.gloc.of |.make-core-hashtable| 0)
     (push)
     (push.const)
     (push.subr.gloc.of |.vector| 1 "../stdlib/core/destructuring.scm" . 216085)
     (extend . 4)
     (push.close
       (0 0)
       (push.iloc.1 . 2)
       (push.iloc.1 . 3)
       (push.iloc.1 . 0)
       (push.iloc.1 . 1)
       (push.const)
       (push.const)
       (push.const)
       (apply.gloc.of
         |core.destructuring'compile-match|
         "../stdlib/core/destructuring.scm"
         .
         218138))
     (push.close
       (3 0)
       (push.const . 0)
       (push.vector-ref.iloc (1 . 3) "../stdlib/core/destructuring.scm" . 219169)
       (push.subr.gloc.of |.null?| 1 "../stdlib/core/destructuring.scm" . 219162)
       (subr.gloc.of |.not| 1 "../stdlib/core/destructuring.scm" . 219157)
       (if.true
         (push.const . destructuring-bind)
         (push.const . "tail match not supported")
         (push.iloc 3 . 0)
         (push.iloc.1 . 0)
         (apply.gloc.of |.syntax-violation| "../stdlib/core/destructuring.scm" . 220181))
       (call
         (push.iloc.0 . 2)
         (apply.gloc.of
           |core.destructuring'duplicates?|
           "../stdlib/core/destructuring.scm"
           .
           221205))
       (if.true
         (push.const . destructuring-bind)
         (push.const . "duplicate variables")
         (push.iloc 3 . 0)
         (push.iloc.1 . 0)
         (apply.gloc.of |.syntax-violation| "../stdlib/core/destructuring.scm" . 222229))
       (iloc.0 . 0)
       (if.true
         (push.iloc 2 . 0)
         (call
           (call
             (push.iloc 2 . 0)
             (push.const . k)
             (apply.gloc.of |.syntax/i0n| "../stdlib/core/destructuring.scm" . 224277))
           (push)
           (push.iloc.1 . 1)
           (apply.gloc.of |.datum->syntax| "../stdlib/core/destructuring.scm" . 224277))
         (push)
         (call
           (push.close
             (1 0)
             (call
               (push.iloc 3 . 0)
               (push.const . ?_)
               (apply.gloc.of |.syntax/i1n| "../stdlib/core/destructuring.scm" . 224277))
             (push)
             (push.iloc.0 . 0)
             (apply.gloc.of |.datum->syntax| "../stdlib/core/destructuring.scm" . 224277))
           (push.iloc.0 . 2)
           (apply.gloc.of |.map| "../stdlib/core/destructuring.scm" . 224277))
         (push)
         (call
           (push.close
             (1 0)
             (call
               (push.iloc 3 . 0)
               (push.const . k)
               (apply.gloc.of |.syntax/i0n| "../stdlib/core/destructuring.scm" . 224277))
             (push)
             (push.iloc.0 . 0)
             (apply.gloc.of |.datum->syntax| "../stdlib/core/destructuring.scm" . 224277))
           (push.iloc.0 . 1)
           (apply.gloc.of |.map| "../stdlib/core/destructuring.scm" . 224277))
         (push)
         (push.subr.gloc.of |.list| 3 "../stdlib/core/destructuring.scm" . 224277)
         (push.const)
         (push.const ?datum (?vars ...) (?inits ...))
         (push.const . #f)
         (push.gloc.of |.L278|)
         (push.subr.gloc.of |.list| 3 "../stdlib/core/destructuring.scm" . 224277)
         (push.const . _)
         (push.const . #f)
         (push.gloc.of |.L270|)
         (push.subr.gloc.of |.list| 3 "../stdlib/core/destructuring.scm" . 224277)
         (apply.gloc.of |.syntax-dispatch| "../stdlib/core/destructuring.scm" . 224277))
       (push.const . destructuring-bind)
       (push.const . "malformed pattern")
       (push.iloc 3 . 0)
       (push.iloc.1 . 0)
       (apply.gloc.of |.syntax-violation| "../stdlib/core/destructuring.scm" . 233493))
     (apply.gloc.of |.call-with-values| "../stdlib/core/destructuring.scm" . 218138))
   (push.subr.gloc.of |.list| 3 "../stdlib/core/destructuring.scm" . 210951)
   (apply.gloc.of |.syntax-dispatch| "../stdlib/core/destructuring.scm" . 210951))
 (set.gloc.of |.L263|)
 (close
   (1 0)
   (push.car.iloc (0 . 0) "../stdlib/core/destructuring.scm" . 166929)
   (call
     (push.cadr.iloc (0 . 0) "../stdlib/core/destructuring.scm" . 166958)
     (push.const (pair? and) (null?) (list?))
     (apply.gloc.of |core.destructuring'reorder-tests| "../stdlib/core/destructuring.scm" . 166943))
   (push)
   (push.cddr.iloc (0 . 0) "../stdlib/core/destructuring.scm" . 167006)
   (ret.subr.gloc.of |.cons*| "../stdlib/core/destructuring.scm" . 165900))
 (set.gloc.of |.L290|)
 (close
   (3 0 . loop)
   (call
     (iloc.0 . 1)
     (if.null?.ret.const . #t)
     (iloc.0 . 2)
     (if.null?.ret.const . #t)
     (push.car.iloc (0 . 1) "../stdlib/core/destructuring.scm" . 173111)
     (push.car.iloc (0 . 2) "../stdlib/core/destructuring.scm" . 173120)
     (push.subr.gloc.of |.equal?| 2 "../stdlib/core/destructuring.scm" . 173103)
     (ret.subr.gloc.of |.not| "../stdlib/core/destructuring.scm" . 173098))
   (if.true (ret.iloc 0 . 0))
   (touch.gloc.of |loop`933*|)
   (push.n+.iloc (0 . 0) 1 "../stdlib/core/destructuring.scm" . 174107)
   (push.cdr.iloc (0 . 1) "../stdlib/core/destructuring.scm" . 174115)
   (push.cdr.iloc (0 . 2) "../stdlib/core/destructuring.scm" . 174124)
   (apply.gloc.of |loop`933*| "../stdlib/core/destructuring.scm" . 174101))
 (set.gloc.of |loop`933*|)
 (close
   (1 0)
   (push.gloc.of |core.destructuring'ca---r|)
   (push.car.iloc (0 . 0) "../stdlib/core/destructuring.scm" . 305205)
   (push.cdr.iloc (0 . 0) "../stdlib/core/destructuring.scm" . 305213)
   (ret.subr.gloc.of |.core-hashtable-set!| "../stdlib/core/destructuring.scm" . 305177))
 (set.gloc.of |.L281|)
 (close
   (1 0)
   (push.gloc.of |.vars|)
   (push.iloc.0 . 0)
   (push.const)
   (push.const ?_ ?expr ?clauses ...)
   (push.const . #f)
   (push.close
     (1 0)
     (call (apply.gloc.of |.generate-temporary-symbol| "../stdlib/core/destructuring.scm" . 239639))
     (push)
     (subr.gloc.of |.make-core-hashtable| 0)
     (push)
     (push.const)
     (push.subr.gloc.of |.vector| 1 "../stdlib/core/destructuring.scm" . 241685)
     (extend . 3)
     (call
       (call
         (call
           (push.close
             (1 0)
             (push.iloc 2 . 0)
             (push.iloc.0 . 0)
             (push.const)
             (push.const ?pat)
             (push.const . #f)
             (push.close
               (1 0)
               (call
                 (call
                   (push.iloc.0 . 0)
                   (push.const . ?pat)
                   (apply.gloc.of |.syntax/i1n| "../stdlib/core/destructuring.scm" . 248874))
                 (push)
                 (apply.gloc.of |.syntax->datum| "../stdlib/core/destructuring.scm" . 248874))
               (push)
               (extend . 1)
               (push.close
                 (0 0)
                 (push.iloc 4 . 1)
                 (push.iloc 4 . 2)
                 (push.iloc.1 . 0)
                 (push.iloc 4 . 0)
                 (push.const)
                 (push.const)
                 (push.const)
                 (apply.gloc.of
                   |core.destructuring'compile-match|
                   "../stdlib/core/destructuring.scm"
                   .
                   249922))
               (push.close
                 (3 0)
                 (call
                   (push.iloc.0 . 2)
                   (apply.gloc.of
                     |core.destructuring'duplicates?|
                     "../stdlib/core/destructuring.scm"
                     .
                     250922))
                 (if.true
                   (push.const . destructuring-match)
                   (push.const . "duplicate variables")
                   (push.iloc 6 . 0)
                   (push.iloc.1 . 0)
                   (apply.gloc.of |.syntax-violation| "../stdlib/core/destructuring.scm" . 250941))
                 (iloc.0 . 0)
                 (if.true
                   (push.const . #f)
                   (push.iloc.0 . 0)
                   (push.subr.gloc.of |.reverse| 1 "../stdlib/core/destructuring.scm" . 251961)
                   (push.const)
                   (push.const)
                   (call
                     (push.iloc 2 . 0)
                     (push.const . #t)
                     (apply.gloc.of |.syntax/c0n| (|.syntax/c0n| |.vars`797*| #t)))
                   (push)
                   (call
                     (push.iloc 2 . 0)
                     (push.const . #t)
                     (apply.gloc.of |.syntax/c0n| (|.syntax/c0n| |.vars`797*| #t)))
                   (push)
                   (ret.subr.gloc.of
                     |.list|
                     (|.list|
                       #f
                       (|.reverse| |match`801*|)
                       '()
                       '()
                       (|.syntax/c0n| |.vars`797*| #t)
                       (|.syntax/c0n| |.vars`797*| #t))))
                 (push.const . destructuring-match)
                 (push.const . "malformed pattern")
                 (push.iloc 6 . 0)
                 (push.iloc.1 . 0)
                 (apply.gloc.of |.syntax-violation| "../stdlib/core/destructuring.scm" . 252975))
               (apply.gloc.of
                 |.call-with-values|
                 (|.call-with-values|
                   (lambda ()
                     (|core.destructuring'compile-match|
                       |ren`793*|
                       |mem`793*|
                       |pat`799*|
                       |datum`793*|
                       '()
                       '()
                       '()))
                   (lambda (|match`801*| |inits`801*| |vars`801*|)
                     (if (|core.destructuring'duplicates?| |vars`801*|)
                         (|.syntax-violation|
                           'destructuring-match
                           "duplicate variables"
                           |x`789*|
                           |pat`799*|)
                         (if |match`801*|
                             (|.list|
                               #f
                               (|.reverse| |match`801*|)
                               '()
                               '()
                               (|.syntax/c0n| |.vars`797*| #t)
                               (|.syntax/c0n| |.vars`797*| #t))
                             (|.syntax-violation|
                               'destructuring-match
                               "malformed pattern"
                               |x`789*|
                               |pat`799*|)))))))
             (push.subr.gloc.of
               |.list|
               3
               (|.list|
                 '(?pat)
                 #f
                 (lambda (|.vars`797*|)
                   (let ((|pat`799*| (|.syntax->datum| (|.syntax/i1n| |.vars`797*| '?pat))))
                     (|.call-with-values|
                       (lambda ()
                         (|core.destructuring'compile-match|
                           |ren`793*|
                           |mem`793*|
                           |pat`799*|
                           |datum`793*|
                           '()
                           '()
                           '()))
                       (lambda (|match`801*| |inits`801*| |vars`801*|)
                         (if (|core.destructuring'duplicates?| |vars`801*|)
                             (|.syntax-violation|
                               'destructuring-match
                               "duplicate variables"
                               |x`789*|
                               |pat`799*|)
                             (if |match`801*|
                                 (|.list|
                                   #f
                                   (|.reverse| |match`801*|)
                                   '()
                                   '()
                                   (|.syntax/c0n| |.vars`797*| #t)
                                   (|.syntax/c0n| |.vars`797*| #t))
                                 (|.syntax-violation|
                                   'destructuring-match
                                   "malformed pattern"
                                   |x`789*|
                                   |pat`799*|)))))))))
             (push.const ?pat ?body)
             (push.const . #f)
             (push.close
               (1 0)
               (call
                 (call
                   (push.iloc.0 . 0)
                   (push.const . ?pat)
                   (apply.gloc.of |.syntax/i1n| "../stdlib/core/destructuring.scm" . 255018))
                 (push)
                 (apply.gloc.of |.syntax->datum| "../stdlib/core/destructuring.scm" . 255018))
               (push)
               (extend . 1)
               (push.close
                 (0 0)
                 (push.iloc 4 . 1)
                 (push.iloc 4 . 2)
                 (push.iloc.1 . 0)
                 (push.iloc 4 . 0)
                 (push.const)
                 (push.const)
                 (push.const)
                 (apply.gloc.of
                   |core.destructuring'compile-match|
                   "../stdlib/core/destructuring.scm"
                   .
                   256066))
               (push.close
                 (3 0)
                 (call
                   (push.iloc.0 . 2)
                   (apply.gloc.of
                     |core.destructuring'duplicates?|
                     "../stdlib/core/destructuring.scm"
                     .
                     257066))
                 (if.true
                   (push.const . destructuring-match)
                   (push.const . "duplicate variables")
                   (push.iloc 6 . 0)
                   (push.iloc.1 . 0)
                   (apply.gloc.of |.syntax-violation| "../stdlib/core/destructuring.scm" . 257085))
                 (iloc.0 . 0)
                 (if.true
                   (push.const . #f)
                   (push.iloc.0 . 0)
                   (push.subr.gloc.of |.reverse| 1 "../stdlib/core/destructuring.scm" . 258105)
                   (push.iloc.0 . 2)
                   (push.iloc.0 . 1)
                   (call
                     (push.iloc 2 . 0)
                     (push.const . ?body)
                     (apply.gloc.of |.syntax/i1n| "../stdlib/core/destructuring.scm" . 258132))
                   (push)
                   (call
                     (push.iloc 2 . 0)
                     (push.const . #t)
                     (apply.gloc.of |.syntax/c0n| (|.syntax/c0n| |.vars`803*| #t)))
                   (push)
                   (ret.subr.gloc.of
                     |.list|
                     (|.list|
                       #f
                       (|.reverse| |match`807*|)
                       |vars`807*|
                       |inits`807*|
                       (|.syntax/i1n| |.vars`803*| '?body)
                       (|.syntax/c0n| |.vars`803*| #t))))
                 (push.const . destructuring-match)
                 (push.const . "malformed pattern")
                 (push.iloc 6 . 0)
                 (push.iloc.1 . 0)
                 (apply.gloc.of |.syntax-violation| "../stdlib/core/destructuring.scm" . 259119))
               (apply.gloc.of
                 |.call-with-values|
                 (|.call-with-values|
                   (lambda ()
                     (|core.destructuring'compile-match|
                       |ren`793*|
                       |mem`793*|
                       |pat`805*|
                       |datum`793*|
                       '()
                       '()
                       '()))
                   (lambda (|match`807*| |inits`807*| |vars`807*|)
                     (if (|core.destructuring'duplicates?| |vars`807*|)
                         (|.syntax-violation|
                           'destructuring-match
                           "duplicate variables"
                           |x`789*|
                           |pat`805*|)
                         (if |match`807*|
                             (|.list|
                               #f
                               (|.reverse| |match`807*|)
                               |vars`807*|
                               |inits`807*|
                               (|.syntax/i1n| |.vars`803*| '?body)
                               (|.syntax/c0n| |.vars`803*| #t))
                             (|.syntax-violation|
                               'destructuring-match
                               "malformed pattern"
                               |x`789*|
                               |pat`805*|)))))))
             (push.subr.gloc.of
               |.list|
               3
               (|.list|
                 '(?pat ?body)
                 #f
                 (lambda (|.vars`803*|)
                   (let ((|pat`805*| (|.syntax->datum| (|.syntax/i1n| |.vars`803*| '?pat))))
                     (|.call-with-values|
                       (lambda ()
                         (|core.destructuring'compile-match|
                           |ren`793*|
                           |mem`793*|
                           |pat`805*|
                           |datum`793*|
                           '()
                           '()
                           '()))
                       (lambda (|match`807*| |inits`807*| |vars`807*|)
                         (if (|core.destructuring'duplicates?| |vars`807*|)
                             (|.syntax-violation|
                               'destructuring-match
                               "duplicate variables"
                               |x`789*|
                               |pat`805*|)
                             (if |match`807*|
                                 (|.list|
                                   #f
                                   (|.reverse| |match`807*|)
                                   |vars`807*|
                                   |inits`807*|
                                   (|.syntax/i1n| |.vars`803*| '?body)
                                   (|.syntax/c0n| |.vars`803*| #t))
                                 (|.syntax-violation|
                                   'destructuring-match
                                   "malformed pattern"
                                   |x`789*|
                                   |pat`805*|)))))))))
             (push.const ?pat ?fender ?body)
             (push.const . #f)
             (push.close
               (1 0)
               (call
                 (call
                   (push.iloc.0 . 0)
                   (push.const . ?pat)
                   (apply.gloc.of |.syntax/i1n| "../stdlib/core/destructuring.scm" . 261162))
                 (push)
                 (apply.gloc.of |.syntax->datum| "../stdlib/core/destructuring.scm" . 261162))
               (push)
               (extend . 1)
               (push.close
                 (0 0)
                 (push.iloc 4 . 1)
                 (push.iloc 4 . 2)
                 (push.iloc.1 . 0)
                 (push.iloc 4 . 0)
                 (push.const)
                 (push.const)
                 (push.const)
                 (apply.gloc.of
                   |core.destructuring'compile-match|
                   "../stdlib/core/destructuring.scm"
                   .
                   262210))
               (push.close
                 (3 0)
                 (call
                   (push.iloc.0 . 2)
                   (apply.gloc.of
                     |core.destructuring'duplicates?|
                     "../stdlib/core/destructuring.scm"
                     .
                     263210))
                 (if.true
                   (push.const . destructuring-match)
                   (push.const . "duplicate variables")
                   (push.iloc 6 . 0)
                   (push.iloc.1 . 0)
                   (apply.gloc.of |.syntax-violation| "../stdlib/core/destructuring.scm" . 263229))
                 (iloc.0 . 0)
                 (if.true
                   (push.const . #f)
                   (push.iloc.0 . 0)
                   (push.subr.gloc.of |.reverse| 1 "../stdlib/core/destructuring.scm" . 264249)
                   (push.iloc.0 . 2)
                   (push.iloc.0 . 1)
                   (call
                     (push.iloc 2 . 0)
                     (push.const . ?body)
                     (apply.gloc.of |.syntax/i1n| "../stdlib/core/destructuring.scm" . 264276))
                   (push)
                   (call
                     (push.iloc 2 . 0)
                     (push.const . ?fender)
                     (apply.gloc.of |.syntax/i1n| "../stdlib/core/destructuring.scm" . 264291))
                   (push)
                   (ret.subr.gloc.of |.list| "../stdlib/core/destructuring.scm" . 264240))
                 (push.const . destructuring-match)
                 (push.const . "malformed pattern")
                 (push.iloc 6 . 0)
                 (push.iloc.1 . 0)
                 (apply.gloc.of |.syntax-violation| "../stdlib/core/destructuring.scm" . 265263))
               (apply.gloc.of
                 |.call-with-values|
                 (|.call-with-values|
                   (lambda ()
                     (|core.destructuring'compile-match|
                       |ren`793*|
                       |mem`793*|
                       |pat`811*|
                       |datum`793*|
                       '()
                       '()
                       '()))
                   (lambda (|match`813*| |inits`813*| |vars`813*|)
                     (if (|core.destructuring'duplicates?| |vars`813*|)
                         (|.syntax-violation|
                           'destructuring-match
                           "duplicate variables"
                           |x`789*|
                           |pat`811*|)
                         (if |match`813*|
                             (|.list|
                               #f
                               (|.reverse| |match`813*|)
                               |vars`813*|
                               |inits`813*|
                               (|.syntax/i1n| |.vars`809*| '?body)
                               (|.syntax/i1n| |.vars`809*| '?fender))
                             (|.syntax-violation|
                               'destructuring-match
                               "malformed pattern"
                               |x`789*|
                               |pat`811*|)))))))
             (push.subr.gloc.of
               |.list|
               3
               (|.list|
                 '(?pat ?fender ?body)
                 #f
                 (lambda (|.vars`809*|)
                   (let ((|pat`811*| (|.syntax->datum| (|.syntax/i1n| |.vars`809*| '?pat))))
                     (|.call-with-values|
                       (lambda ()
                         (|core.destructuring'compile-match|
                           |ren`793*|
                           |mem`793*|
                           |pat`811*|
                           |datum`793*|
                           '()
                           '()
                           '()))
                       (lambda (|match`813*| |inits`813*| |vars`813*|)
                         (if (|core.destructuring'duplicates?| |vars`813*|)
                             (|.syntax-violation|
                               'destructuring-match
                               "duplicate variables"
                               |x`789*|
                               |pat`811*|)
                             (if |match`813*|
                                 (|.list|
                                   #f
                                   (|.reverse| |match`813*|)
                                   |vars`813*|
                                   |inits`813*|
                                   (|.syntax/i1n| |.vars`809*| '?body)
                                   (|.syntax/i1n| |.vars`809*| '?fender))
                                 (|.syntax-violation|
                                   'destructuring-match
                                   "malformed pattern"
                                   |x`789*|
                                   |pat`811*|)))))))))
             (push.const . _)
             (push.const . #f)
             (push.close
               (1 0)
               (push.const . destructuring-match)
               (push.const . "malformed clause")
               (push.iloc 4 . 0)
               (push.iloc.1 . 0)
               (apply.gloc.of |.syntax-violation| "../stdlib/core/destructuring.scm" . 267295))
             (push.subr.gloc.of |.list| 3 "../stdlib/core/destructuring.scm" . 246812)
             (apply.gloc.of
               |.syntax-dispatch|
               (|.syntax-dispatch|
                 |.vars`791*|
                 |clause`795*|
                 '()
                 (|.list|
                   '(?pat)
                   #f
                   (lambda (|.vars`797*|)
                     (let ((|pat`799*| (|.syntax->datum| (|.syntax/i1n| |.vars`797*| '?pat))))
                       (|.call-with-values|
                         (lambda ()
                           (|core.destructuring'compile-match|
                             |ren`793*|
                             |mem`793*|
                             |pat`799*|
                             |datum`793*|
                             '()
                             '()
                             '()))
                         (lambda (|match`801*| |inits`801*| |vars`801*|)
                           (if (|core.destructuring'duplicates?| |vars`801*|)
                               (|.syntax-violation|
                                 'destructuring-match
                                 "duplicate variables"
                                 |x`789*|
                                 |pat`799*|)
                               (if |match`801*|
                                   (|.list|
                                     #f
                                     (|.reverse| |match`801*|)
                                     '()
                                     '()
                                     (|.syntax/c0n| |.vars`797*| #t)
                                     (|.syntax/c0n| |.vars`797*| #t))
                                   (|.syntax-violation|
                                     'destructuring-match
                                     "malformed pattern"
                                     |x`789*|
                                     |pat`799*|))))))))
                 (|.list|
                   '(?pat ?body)
                   #f
                   (lambda (|.vars`803*|)
                     (let ((|pat`805*| (|.syntax->datum| (|.syntax/i1n| |.vars`803*| '?pat))))
                       (|.call-with-values|
                         (lambda ()
                           (|core.destructuring'compile-match|
                             |ren`793*|
                             |mem`793*|
                             |pat`805*|
                             |datum`793*|
                             '()
                             '()
                             '()))
                         (lambda (|match`807*| |inits`807*| |vars`807*|)
                           (if (|core.destructuring'duplicates?| |vars`807*|)
                               (|.syntax-violation|
                                 'destructuring-match
                                 "duplicate variables"
                                 |x`789*|
                                 |pat`805*|)
                               (if |match`807*|
                                   (|.list|
                                     #f
                                     (|.reverse| |match`807*|)
                                     |vars`807*|
                                     |inits`807*|
                                     (|.syntax/i1n| |.vars`803*| '?body)
                                     (|.syntax/c0n| |.vars`803*| #t))
                                   (|.syntax-violation|
                                     'destructuring-match
                                     "malformed pattern"
                                     |x`789*|
                                     |pat`805*|))))))))
                 (|.list|
                   '(?pat ?fender ?body)
                   #f
                   (lambda (|.vars`809*|)
                     (let ((|pat`811*| (|.syntax->datum| (|.syntax/i1n| |.vars`809*| '?pat))))
                       (|.call-with-values|
                         (lambda ()
                           (|core.destructuring'compile-match|
                             |ren`793*|
                             |mem`793*|
                             |pat`811*|
                             |datum`793*|
                             '()
                             '()
                             '()))
                         (lambda (|match`813*| |inits`813*| |vars`813*|)
                           (if (|core.destructuring'duplicates?| |vars`813*|)
                               (|.syntax-violation|
                                 'destructuring-match
                                 "duplicate variables"
                                 |x`789*|
                                 |pat`811*|)
                               (if |match`813*|
                                   (|.list|
                                     #f
                                     (|.reverse| |match`813*|)
                                     |vars`813*|
                                     |inits`813*|
                                     (|.syntax/i1n| |.vars`809*| '?body)
                                     (|.syntax/i1n| |.vars`809*| '?fender))
                                   (|.syntax-violation|
                                     'destructuring-match
                                     "malformed pattern"
                                     |x`789*|
                                     |pat`811*|))))))))
                 (|.list|
                   '_
                   #f
                   (lambda (|.vars`815*|)
                     (|.syntax-violation|
                       'destructuring-match
                       "malformed clause"
                       |x`789*|
                       |clause`795*|))))))
           (call
             (push.iloc.1 . 0)
             (push.const ?clauses ...)
             (push.const (?clauses . 1))
             (apply.gloc.of |.syntax/c1n| "../stdlib/core/destructuring.scm" . 268314))
           (push)
           (apply.gloc.of
             |.map|
             (|.map|
               (lambda (|clause`795*|)
                 (|.syntax-dispatch|
                   |.vars`791*|
                   |clause`795*|
                   '()
                   (|.list|
                     '(?pat)
                     #f
                     (lambda (|.vars`797*|)
                       (let ((|pat`799*| (|.syntax->datum| (|.syntax/i1n| |.vars`797*| '?pat))))
                         (|.call-with-values|
                           (lambda ()
                             (|core.destructuring'compile-match|
                               |ren`793*|
                               |mem`793*|
                               |pat`799*|
                               |datum`793*|
                               '()
                               '()
                               '()))
                           (lambda (|match`801*| |inits`801*| |vars`801*|)
                             (if (|core.destructuring'duplicates?| |vars`801*|)
                                 (|.syntax-violation|
                                   'destructuring-match
                                   "duplicate variables"
                                   |x`789*|
                                   |pat`799*|)
                                 (if |match`801*|
                                     (|.list|
                                       #f
                                       (|.reverse| |match`801*|)
                                       '()
                                       '()
                                       (|.syntax/c0n| |.vars`797*| #t)
                                       (|.syntax/c0n| |.vars`797*| #t))
                                     (|.syntax-violation|
                                       'destructuring-match
                                       "malformed pattern"
                                       |x`789*|
                                       |pat`799*|))))))))
                   (|.list|
                     '(?pat ?body)
                     #f
                     (lambda (|.vars`803*|)
                       (let ((|pat`805*| (|.syntax->datum| (|.syntax/i1n| |.vars`803*| '?pat))))
                         (|.call-with-values|
                           (lambda ()
                             (|core.destructuring'compile-match|
                               |ren`793*|
                               |mem`793*|
                               |pat`805*|
                               |datum`793*|
                               '()
                               '()
                               '()))
                           (lambda (|match`807*| |inits`807*| |vars`807*|)
                             (if (|core.destructuring'duplicates?| |vars`807*|)
                                 (|.syntax-violation|
                                   'destructuring-match
                                   "duplicate variables"
                                   |x`789*|
                                   |pat`805*|)
                                 (if |match`807*|
                                     (|.list|
                                       #f
                                       (|.reverse| |match`807*|)
                                       |vars`807*|
                                       |inits`807*|
                                       (|.syntax/i1n| |.vars`803*| '?body)
                                       (|.syntax/c0n| |.vars`803*| #t))
                                     (|.syntax-violation|
                                       'destructuring-match
                                       "malformed pattern"
                                       |x`789*|
                                       |pat`805*|))))))))
                   (|.list|
                     '(?pat ?fender ?body)
                     #f
                     (lambda (|.vars`809*|)
                       (let ((|pat`811*| (|.syntax->datum| (|.syntax/i1n| |.vars`809*| '?pat))))
                         (|.call-with-values|
                           (lambda ()
                             (|core.destructuring'compile-match|
                               |ren`793*|
                               |mem`793*|
                               |pat`811*|
                               |datum`793*|
                               '()
                               '()
                               '()))
                           (lambda (|match`813*| |inits`813*| |vars`813*|)
                             (if (|core.destructuring'duplicates?| |vars`813*|)
                                 (|.syntax-violation|
                                   'destructuring-match
                                   "duplicate variables"
                                   |x`789*|
                                   |pat`811*|)
                                 (if |match`813*|
                                     (|.list|
                                       #f
                                       (|.reverse| |match`813*|)
                                       |vars`813*|
                                       |inits`813*|
                                       (|.syntax/i1n| |.vars`809*| '?body)
                                       (|.syntax/i1n| |.vars`809*| '?fender))
                                     (|.syntax-violation|
                                       'destructuring-match
                                       "malformed pattern"
                                       |x`789*|
                                       |pat`811*|))))))))
                   (|.list|
                     '_
                     #f
                     (lambda (|.vars`815*|)
                       (|.syntax-violation|
                         'destructuring-match
                         "malformed clause"
                         |x`789*|
                         |clause`795*|)))))
               (|.syntax/c1n| |.vars`791*| '(?clauses ...) '((?clauses . 1))))))
         (push)
         (apply.gloc.of
           |core.destructuring'reorder|
           (|core.destructuring'reorder|
             (|.map|
               (lambda (|clause`795*|)
                 (|.syntax-dispatch|
                   |.vars`791*|
                   |clause`795*|
                   '()
                   (|.list|
                     '(?pat)
                     #f
                     (lambda (|.vars`797*|)
                       (let ((|pat`799*| (|.syntax->datum| (|.syntax/i1n| |.vars`797*| '?pat))))
                         (|.call-with-values|
                           (lambda ()
                             (|core.destructuring'compile-match|
                               |ren`793*|
                               |mem`793*|
                               |pat`799*|
                               |datum`793*|
                               '()
                               '()
                               '()))
                           (lambda (|match`801*| |inits`801*| |vars`801*|)
                             (if (|core.destructuring'duplicates?| |vars`801*|)
                                 (|.syntax-violation|
                                   'destructuring-match
                                   "duplicate variables"
                                   |x`789*|
                                   |pat`799*|)
                                 (if |match`801*|
                                     (|.list|
                                       #f
                                       (|.reverse| |match`801*|)
                                       '()
                                       '()
                                       (|.syntax/c0n| |.vars`797*| #t)
                                       (|.syntax/c0n| |.vars`797*| #t))
                                     (|.syntax-violation|
                                       'destructuring-match
                                       "malformed pattern"
                                       |x`789*|
                                       |pat`799*|))))))))
                   (|.list|
                     '(?pat ?body)
                     #f
                     (lambda (|.vars`803*|)
                       (let ((|pat`805*| (|.syntax->datum| (|.syntax/i1n| |.vars`803*| '?pat))))
                         (|.call-with-values|
                           (lambda ()
                             (|core.destructuring'compile-match|
                               |ren`793*|
                               |mem`793*|
                               |pat`805*|
                               |datum`793*|
                               '()
                               '()
                               '()))
                           (lambda (|match`807*| |inits`807*| |vars`807*|)
                             (if (|core.destructuring'duplicates?| |vars`807*|)
                                 (|.syntax-violation|
                                   'destructuring-match
                                   "duplicate variables"
                                   |x`789*|
                                   |pat`805*|)
                                 (if |match`807*|
                                     (|.list|
                                       #f
                                       (|.reverse| |match`807*|)
                                       |vars`807*|
                                       |inits`807*|
                                       (|.syntax/i1n| |.vars`803*| '?body)
                                       (|.syntax/c0n| |.vars`803*| #t))
                                     (|.syntax-violation|
                                       'destructuring-match
                                       "malformed pattern"
                                       |x`789*|
                                       |pat`805*|))))))))
                   (|.list|
                     '(?pat ?fender ?body)
                     #f
                     (lambda (|.vars`809*|)
                       (let ((|pat`811*| (|.syntax->datum| (|.syntax/i1n| |.vars`809*| '?pat))))
                         (|.call-with-values|
                           (lambda ()
                             (|core.destructuring'compile-match|
                               |ren`793*|
                               |mem`793*|
                               |pat`811*|
                               |datum`793*|
                               '()
                               '()
                               '()))
                           (lambda (|match`813*| |inits`813*| |vars`813*|)
                             (if (|core.destructuring'duplicates?| |vars`813*|)
                                 (|.syntax-violation|
                                   'destructuring-match
                                   "duplicate variables"
                                   |x`789*|
                                   |pat`811*|)
                                 (if |match`813*|
                                     (|.list|
                                       #f
                                       (|.reverse| |match`813*|)
                                       |vars`813*|
                                       |inits`813*|
                                       (|.syntax/i1n| |.vars`809*| '?body)
                                       (|.syntax/i1n| |.vars`809*| '?fender))
                                     (|.syntax-violation|
                                       'destructuring-match
                                       "malformed pattern"
                                       |x`789*|
                                       |pat`811*|))))))))
                   (|.list|
                     '_
                     #f
                     (lambda (|.vars`815*|)
                       (|.syntax-violation|
                         'destructuring-match
                         "malformed clause"
                         |x`789*|
                         |clause`795*|)))))
               (|.syntax/c1n| |.vars`791*| '(?clauses ...) '((?clauses . 1)))))))
       (push)
       (apply.gloc.of
         |core.destructuring'cse|
         (|core.destructuring'cse|
           (|core.destructuring'reorder|
             (|.map|
               (lambda (|clause`795*|)
                 (|.syntax-dispatch|
                   |.vars`791*|
                   |clause`795*|
                   '()
                   (|.list|
                     '(?pat)
                     #f
                     (lambda (|.vars`797*|)
                       (let ((|pat`799*| (|.syntax->datum| (|.syntax/i1n| |.vars`797*| '?pat))))
                         (|.call-with-values|
                           (lambda ()
                             (|core.destructuring'compile-match|
                               |ren`793*|
                               |mem`793*|
                               |pat`799*|
                               |datum`793*|
                               '()
                               '()
                               '()))
                           (lambda (|match`801*| |inits`801*| |vars`801*|)
                             (if (|core.destructuring'duplicates?| |vars`801*|)
                                 (|.syntax-violation|
                                   'destructuring-match
                                   "duplicate variables"
                                   |x`789*|
                                   |pat`799*|)
                                 (if |match`801*|
                                     (|.list|
                                       #f
                                       (|.reverse| |match`801*|)
                                       '()
                                       '()
                                       (|.syntax/c0n| |.vars`797*| #t)
                                       (|.syntax/c0n| |.vars`797*| #t))
                                     (|.syntax-violation|
                                       'destructuring-match
                                       "malformed pattern"
                                       |x`789*|
                                       |pat`799*|))))))))
                   (|.list|
                     '(?pat ?body)
                     #f
                     (lambda (|.vars`803*|)
                       (let ((|pat`805*| (|.syntax->datum| (|.syntax/i1n| |.vars`803*| '?pat))))
                         (|.call-with-values|
                           (lambda ()
                             (|core.destructuring'compile-match|
                               |ren`793*|
                               |mem`793*|
                               |pat`805*|
                               |datum`793*|
                               '()
                               '()
                               '()))
                           (lambda (|match`807*| |inits`807*| |vars`807*|)
                             (if (|core.destructuring'duplicates?| |vars`807*|)
                                 (|.syntax-violation|
                                   'destructuring-match
                                   "duplicate variables"
                                   |x`789*|
                                   |pat`805*|)
                                 (if |match`807*|
                                     (|.list|
                                       #f
                                       (|.reverse| |match`807*|)
                                       |vars`807*|
                                       |inits`807*|
                                       (|.syntax/i1n| |.vars`803*| '?body)
                                       (|.syntax/c0n| |.vars`803*| #t))
                                     (|.syntax-violation|
                                       'destructuring-match
                                       "malformed pattern"
                                       |x`789*|
                                       |pat`805*|))))))))
                   (|.list|
                     '(?pat ?fender ?body)
                     #f
                     (lambda (|.vars`809*|)
                       (let ((|pat`811*| (|.syntax->datum| (|.syntax/i1n| |.vars`809*| '?pat))))
                         (|.call-with-values|
                           (lambda ()
                             (|core.destructuring'compile-match|
                               |ren`793*|
                               |mem`793*|
                               |pat`811*|
                               |datum`793*|
                               '()
                               '()
                               '()))
                           (lambda (|match`813*| |inits`813*| |vars`813*|)
                             (if (|core.destructuring'duplicates?| |vars`813*|)
                                 (|.syntax-violation|
                                   'destructuring-match
                                   "duplicate variables"
                                   |x`789*|
                                   |pat`811*|)
                                 (if |match`813*|
                                     (|.list|
                                       #f
                                       (|.reverse| |match`813*|)
                                       |vars`813*|
                                       |inits`813*|
                                       (|.syntax/i1n| |.vars`809*| '?body)
                                       (|.syntax/i1n| |.vars`809*| '?fender))
                                     (|.syntax-violation|
                                       'destructuring-match
                                       "malformed pattern"
                                       |x`789*|
                                       |pat`811*|))))))))
                   (|.list|
                     '_
                     #f
                     (lambda (|.vars`815*|)
                       (|.syntax-violation|
                         'destructuring-match
                         "malformed clause"
                         |x`789*|
                         |clause`795*|)))))
               (|.syntax/c1n| |.vars`791*| '(?clauses ...) '((?clauses . 1))))))))
     (push)
     (extend . 1)
     (push.close
       (0 0)
       (push.gloc.of |.car|)
       (push.iloc.1 . 0)
       (apply.gloc.of |core.lists'partition| "../stdlib/core/destructuring.scm" . 269356))
     (push.close
       (2 0)
       (call
         (push.gloc.of |.L292|)
         (push.iloc.0 . 0)
         (apply.gloc.of |.map| "../stdlib/core/destructuring.scm" . 270368))
       (push)
       (call
         (push.gloc.of |.cdr|)
         (push.iloc.0 . 1)
         (apply.gloc.of |.map| "../stdlib/core/destructuring.scm" . 271391))
       (push)
       (extend . 2)
       (push.iloc 4 . 0)
       (call
         (call
           (push.iloc 4 . 0)
           (push.const . k)
           (apply.gloc.of |.syntax/i0n| "../stdlib/core/destructuring.scm" . 272402))
         (push)
         (push.iloc 3 . 0)
         (apply.gloc.of |.datum->syntax| "../stdlib/core/destructuring.scm" . 272402))
       (push)
       (call
         (push.close
           (1 0)
           (call
             (call
               (push.iloc 5 . 0)
               (push.const . k)
               (apply.gloc.of |.syntax/i0n| "../stdlib/core/destructuring.scm" . 272402))
             (push)
             (push.cdr.iloc (0 . 0) "../stdlib/core/destructuring.scm" . 272402)
             (apply.gloc.of |.datum->syntax| "../stdlib/core/destructuring.scm" . 272402))
           (push)
           (call
             (call
               (push.iloc 5 . 0)
               (push.const . ?_)
               (apply.gloc.of |.syntax/i1n| "../stdlib/core/destructuring.scm" . 272402))
             (push)
             (push.car.iloc (0 . 0) "../stdlib/core/destructuring.scm" . 272402)
             (apply.gloc.of |.datum->syntax| "../stdlib/core/destructuring.scm" . 272402))
           (push)
           (ret.subr.gloc.of |.list| "../stdlib/core/destructuring.scm" . 272402))
         (push.iloc 3 . 1)
         (push.subr.gloc.of |.core-hashtable->alist| 1 "../stdlib/core/destructuring.scm" . 272402)
         (apply.gloc.of |.map| "../stdlib/core/destructuring.scm" . 272402))
       (push)
       (call
         (push.close
           (1 0)
           (call
             (push.iloc 5 . 0)
             (push.const . k)
             (apply.gloc.of |.syntax/i0n| "../stdlib/core/destructuring.scm" . 272402))
           (push)
           (push.cdr.iloc (0 . 0) "../stdlib/core/destructuring.scm" . 272402)
           (apply.gloc.of |.datum->syntax| "../stdlib/core/destructuring.scm" . 272402))
         (push.const . 0)
         (push.vector-ref.iloc (3 . 2) "../stdlib/core/destructuring.scm" . 272402)
         (apply.gloc.of |.map| "../stdlib/core/destructuring.scm" . 272402))
       (push)
       (call
         (push.close
           (1 0)
           (call
             (push.iloc 5 . 0)
             (push.const . k)
             (apply.gloc.of |.syntax/i0n| "../stdlib/core/destructuring.scm" . 272402))
           (push)
           (push.iloc.0 . 0)
           (apply.gloc.of |.datum->syntax| "../stdlib/core/destructuring.scm" . 272402))
         (push.iloc.0 . 0)
         (apply.gloc.of |.map| "../stdlib/core/destructuring.scm" . 272402))
       (push)
       (call
         (push.close
           (1 0)
           (push.close
             (0 0)
             (push.gloc.of |.values|)
             (push.iloc.1 . 0)
             (apply.gloc.of |.apply| "../stdlib/core/destructuring.scm" . 272402))
           (push.close
             (5 0)
             (push.iloc 6 . 0)
             (call
               (push.close
                 (1 0)
                 (call
                   (push.iloc 7 . 0)
                   (push.const . ?_)
                   (apply.gloc.of |.syntax/i1n| "../stdlib/core/destructuring.scm" . 272402))
                 (push)
                 (push.iloc.0 . 0)
                 (apply.gloc.of |.datum->syntax| "../stdlib/core/destructuring.scm" . 272402))
               (push.iloc.0 . 1)
               (apply.gloc.of |.map| "../stdlib/core/destructuring.scm" . 272402))
             (push)
             (call
               (push.close
                 (1 0)
                 (call
                   (push.iloc 7 . 0)
                   (push.const . k)
                   (apply.gloc.of |.syntax/i0n| "../stdlib/core/destructuring.scm" . 272402))
                 (push)
                 (push.iloc.0 . 0)
                 (apply.gloc.of |.datum->syntax| "../stdlib/core/destructuring.scm" . 272402))
               (push.iloc.0 . 2)
               (apply.gloc.of |.map| "../stdlib/core/destructuring.scm" . 272402))
             (push)
             (call
               (push.close
                 (1 0)
                 (call
                   (push.iloc 7 . 0)
                   (push.const . k)
                   (apply.gloc.of |.syntax/i0n| "../stdlib/core/destructuring.scm" . 272402))
                 (push)
                 (push.iloc.0 . 0)
                 (apply.gloc.of |.datum->syntax| "../stdlib/core/destructuring.scm" . 272402))
               (push.iloc.0 . 0)
               (apply.gloc.of |.map| "../stdlib/core/destructuring.scm" . 272402))
             (push)
             (push.iloc.0 . 4)
             (push.iloc.0 . 3)
             (push.subr.gloc.of |.list| 5 "../stdlib/core/destructuring.scm" . 272402)
             (push.const)
             (push.const (?vars ...) (?inits ...) (?tests ...) ?fender ?body)
             (push.const . #f)
             (push.gloc.of |.L276|)
             (push.subr.gloc.of |.list| 3 "../stdlib/core/destructuring.scm" . 272402)
             (push.const . _)
             (push.const . #f)
             (push.gloc.of |.L275|)
             (push.subr.gloc.of |.list| 3 "../stdlib/core/destructuring.scm" . 272402)
             (apply.gloc.of |.syntax-dispatch| "../stdlib/core/destructuring.scm" . 272402))
           (apply.gloc.of |.call-with-values| "../stdlib/core/destructuring.scm" . 272402))
         (push.iloc.0 . 1)
         (apply.gloc.of |.map| "../stdlib/core/destructuring.scm" . 272402))
       (push)
       (push.subr.gloc.of |.list| 5 "../stdlib/core/destructuring.scm" . 272402)
       (push.const)
       (push.const ?datum ((?pred-lhs ?pred-rhs) ...) (?mem ...) (?subexprs ...) (?dispatch ...))
       (push.const . #f)
       (push.gloc.of |.L273|)
       (push.subr.gloc.of |.list| 3 "../stdlib/core/destructuring.scm" . 272402)
       (push.const . _)
       (push.const . #f)
       (push.gloc.of |.L272|)
       (push.subr.gloc.of |.list| 3 "../stdlib/core/destructuring.scm" . 272402)
       (apply.gloc.of |.syntax-dispatch| "../stdlib/core/destructuring.scm" . 272402))
     (apply.gloc.of |.call-with-values| "../stdlib/core/destructuring.scm" . 269356))
   (push.subr.gloc.of |.list| 3 "../stdlib/core/destructuring.scm" . 237575)
   (apply.gloc.of |.syntax-dispatch| "../stdlib/core/destructuring.scm" . 237575))
 (set.gloc.of |.L271|)
 (close
   (1 0)
   (push.const . with-syntax)
   (push.const . "value does not match to pattern")
   (push.const
     ((?vars ...) (map (lambda (e) (datum->syntax (syntax ?_) e)) vars))
     ((?inits ...) (map (lambda (e) (datum->syntax (syntax k) e)) inits))
     ((?tests ...) (map (lambda (e) (datum->syntax (syntax k) e)) tests))
     (?fender fender)
     (?body body))
   (apply.gloc.of |.syntax-violation| "../stdlib/core/destructuring.scm" . 272402))
 (set.gloc.of |.L275|)
 (close
   (1 0)
   (push.iloc.0 . 0)
   (push.const let ((?datum ?expr)) (let ((?vars ?inits) ...) ?body ...))
   (push.const (?body . 1) (?inits . 1) (?vars . 1) (?expr . 0) (?datum . 0))
   (apply.gloc.of |.syntax/c1n| "../stdlib/core/destructuring.scm" . 224277))
 (set.gloc.of |.L278|)
 (close
   (2 0 . loop)
   (iloc.0 . 0)
   (if.pair?
     (call
       (push.iloc.0 . 0)
       (apply.gloc.of
         |core.destructuring'predicate-pair?|
         "../stdlib/core/destructuring.scm"
         .
         73751))
     (if.true (ret.iloc 0 . 1))
     (touch.gloc.of |loop`889*|)
     (push.cdr.iloc (0 . 0) "../stdlib/core/destructuring.scm" . 74786)
     (push.n+.iloc (0 . 1) 1 "../stdlib/core/destructuring.scm" . 74796)
     (apply.gloc.of |loop`889*| "../stdlib/core/destructuring.scm" . 74780))
   (ret.iloc 0 . 1))
 (set.gloc.of |loop`889*|)
 (close
   (1 0)
   (push.iloc.0 . 0)
   (push.const
     let
     ((?datum ?expr) (?pred-lhs ?pred-rhs) ... (?mem #f) ...)
     (let* (?subexprs ...) (cond ?dispatch ... (else #f))))
   (push.const
     (?dispatch . 1)
     (?subexprs . 1)
     (?mem . 1)
     (?pred-rhs . 1)
     (?pred-lhs . 1)
     (?expr . 0)
     (?datum . 0))
   (apply.gloc.of |.syntax/c1n| "../stdlib/core/destructuring.scm" . 272402))
 (set.gloc.of |.L273|)
 (close
   (3 0 . loop)
   (iloc.0 . 1)
   (if.null?
     (push.iloc.0 . 2)
     (push.iloc.0 . 0)
     (ret.subr.gloc.of |.append| "../stdlib/core/destructuring.scm" . 159757))
   (push.close
     (0 0)
     (push.close
       (1 0)
       (push.car.iloc (0 . 0) "../stdlib/core/destructuring.scm" . 160836)
       (push.car.iloc (2 . 1) "../stdlib/core/destructuring.scm" . 160844)
       (ret.subr.gloc.of |.memq| "../stdlib/core/destructuring.scm" . 160830))
     (push.iloc.1 . 0)
     (apply.gloc.of |core.lists'partition| "../stdlib/core/destructuring.scm" . 160807))
   (push.close
     (2 0)
     (touch.gloc.of |loop`917*|)
     (push.iloc.0 . 1)
     (push.cdr.iloc (1 . 1) "../stdlib/core/destructuring.scm" . 161818)
     (push.iloc.1 . 2)
     (push.iloc.0 . 0)
     (push.subr.gloc.of |.append| 2 "../stdlib/core/destructuring.scm" . 161830)
     (apply.gloc.of |loop`917*| "../stdlib/core/destructuring.scm" . 161807))
   (apply.gloc.of
     |.call-with-values|
     (|.call-with-values|
       (lambda ()
         (|core.lists'partition|
           (lambda (|e`921*|) (|.memq| (|.car| |e`921*|) (|.car| |preds`918*|)))
           |lst`918*|))
       (lambda (|hits`920*| |rest`920*|)
         (|loop`917*| |rest`920*| (|.cdr| |preds`918*|) (|.append| |acc`918*| |hits`920*|))))))
 (set.gloc.of |loop`917*|)
 (close
   (1 0)
   (call
     (call
       (push.iloc.0 . 0)
       (push.const . ?fender)
       (apply.gloc.of |.syntax/i1n| "../stdlib/core/destructuring.scm" . 272402))
     (push)
     (apply.gloc.of |.syntax->datum| "../stdlib/core/destructuring.scm" . 272402))
   (push)
   (const . #t)
   (if.eq?
     (push.iloc.0 . 0)
     (push.const (and ?tests ...) (let ((?vars ?inits) ...) ?body))
     (push.const (?body . 0) (?inits . 1) (?vars . 1) (?tests . 1))
     (apply.gloc.of |.syntax/c1n| "../stdlib/core/destructuring.scm" . 272402))
   (push.iloc.0 . 0)
   (push.const (and ?tests ... (let ((?vars ?inits) ...) ?fender)) (let ((?vars ?inits) ...) ?body))
   (push.const (?body . 0) (?fender . 0) (?inits . 1) (?vars . 1) (?tests . 1))
   (apply.gloc.of |.syntax/c1n| "../stdlib/core/destructuring.scm" . 272402))
 (set.gloc.of |.L276|)
 (close
   (1 0)
   (push.gloc.of |core.destructuring'cd---r|)
   (push.car.iloc (0 . 0) "../stdlib/core/destructuring.scm" . 309301)
   (push.cdr.iloc (0 . 0) "../stdlib/core/destructuring.scm" . 309309)
   (ret.subr.gloc.of |.core-hashtable-set!| "../stdlib/core/destructuring.scm" . 309273))
 (set.gloc.of |.L267|)
 (close
   (1 0)
   (push.car.iloc (0 . 0) "../stdlib/core/destructuring.scm" . 270388)
   (push.const . and)
   (cadr.iloc (0 . 0) "../stdlib/core/destructuring.scm" . 270403)
   (push.cons)
   (ret.subr.gloc.of |.list| "../stdlib/core/destructuring.scm" . 270373))
 (set.gloc.of |.L292|)
 (close
   (1 0)
   (push.iloc.0 . 0)
   (push.const . 2)
   (ret.subr.gloc.of |.>=| "../stdlib/core/destructuring.scm" . 184366))
 (set.gloc.of |.L277|)
 (close
   (2 0 . loop)
   (push.iloc.0 . 0)
   (push.iloc.0 . 1)
   (subr.gloc.of |.memq| 2 "../stdlib/core/destructuring.scm" . 38930)
   (if.true.ret)
   (iloc.0 . 1)
   (if.not.pair?.ret.const . #f)
   (touch.gloc.of |loop`873*|)
   (push.car.iloc (0 . 1) "../stdlib/core/destructuring.scm" . 40989)
   (push.cdr.iloc (0 . 1) "../stdlib/core/destructuring.scm" . 41000)
   (apply.gloc.of |loop`873*| "../stdlib/core/destructuring.scm" . 40983))
 (set.gloc.of |loop`873*|)
 (close
   (1 0)
   (push.const . with-syntax)
   (push.const . "value does not match to pattern")
   (push.const
     (?datum (datum->syntax (syntax k) datum))
     (((?pred-lhs ?pred-rhs) ...)
      (map (lambda (a)
             (list (datum->syntax (syntax k) (cdr a)) (datum->syntax (syntax ?_) (car a))))
           (core-hashtable->alist ren)))
     ((?mem ...) (map (lambda (e) (datum->syntax (syntax k) (cdr e))) (vector-ref mem 0)))
     ((?subexprs ...) (map (lambda (e) (datum->syntax (syntax k) e)) subexprs))
     ((?dispatch ...)
      (map (lambda (clause)
             (let-values (((tests vars inits body fender) (apply values clause)))
               (with-syntax (((?vars ...) (map (lambda (e) (datum->syntax (syntax ?_) e)) vars))
                             ((?inits ...) (map (lambda (e) (datum->syntax (syntax k) e)) inits))
                             ((?tests ...) (map (lambda (e) (datum->syntax (syntax k) e)) tests))
                             (?fender fender)
                             (?body body))
                 (if (eq? (syntax->datum (syntax ?fender)) #t)
                     (syntax ((and ?tests ...) (let ((?vars ?inits) ...) ?body)))
                     (syntax
                       ((and ?tests ... (let ((?vars ?inits) ...) ?fender))
                        (let ((?vars ?inits) ...) ?body)))))))
           clauses)))
   (apply.gloc.of |.syntax-violation| "../stdlib/core/destructuring.scm" . 272402))
 (set.gloc.of |.L272|)
 (close
   (1 0)
   (push.const . with-syntax)
   (push.const . "value does not match to pattern")
   (push.const
     (?datum (datum->syntax (syntax k) datum))
     ((?vars ...) (map (lambda (e) (datum->syntax (syntax ?_) e)) vars))
     ((?inits ...) (map (lambda (e) (datum->syntax (syntax k) e)) inits)))
   (apply.gloc.of |.syntax-violation| "../stdlib/core/destructuring.scm" . 224277))
 (set.gloc.of |.L270|)
 (call
   (push.const core syntax-case)
   (apply.gloc.of |.require-scheme-library| "../stdlib/core/destructuring.scm" . 209925))
 (call
   (push.const core lists)
   (apply.gloc.of |.require-scheme-library| "../stdlib/core/destructuring.scm" . 209925))
 (call
   (push.const core primitives)
   (apply.gloc.of |.require-scheme-library| "../stdlib/core/destructuring.scm" . 209925))
 (subr.gloc.of |.make-core-hashtable| 0 "../stdlib/core/destructuring.scm" . 14354)
 (set.gloc.of |core.destructuring'ca---r|)
 (subr.gloc.of |.make-core-hashtable| 0 "../stdlib/core/destructuring.scm" . 16402)
 (set.gloc.of |core.destructuring'cd---r|)
 (close
   (1 0 . |core.destructuring'car+|)
   (call
     (iloc.0 . 0)
     (if.not.pair?.ret.const . #f)
     (push.gloc.of |core.destructuring'ca---r|)
     (push.car.iloc (0 . 0) "../stdlib/core/destructuring.scm" . 20539)
     (push.const . #f)
     (ret.subr.gloc.of |.core-hashtable-ref| "../stdlib/core/destructuring.scm" . 20512))
   (push)
   (extend . 1)
   (iloc.0 . 0)
   (if.true
     (push.iloc.0 . 0)
     (cdr.iloc (1 . 0) "../stdlib/core/destructuring.scm" . 22555)
     (ret.cons "../stdlib/core/destructuring.scm" . 22547))
   (push.const . car)
   (push.iloc.1 . 0)
   (ret.subr.gloc.of |.list| "../stdlib/core/destructuring.scm" . 24590))
 (set.gloc.of |core.destructuring'car+|)
 (close
   (1 0 . |core.destructuring'cdr+|)
   (call
     (iloc.0 . 0)
     (if.not.pair?.ret.const . #f)
     (push.gloc.of |core.destructuring'cd---r|)
     (push.car.iloc (0 . 0) "../stdlib/core/destructuring.scm" . 28731)
     (push.const . #f)
     (ret.subr.gloc.of |.core-hashtable-ref| "../stdlib/core/destructuring.scm" . 28704))
   (push)
   (extend . 1)
   (iloc.0 . 0)
   (if.true
     (push.iloc.0 . 0)
     (cdr.iloc (1 . 0) "../stdlib/core/destructuring.scm" . 30747)
     (ret.cons "../stdlib/core/destructuring.scm" . 30739))
   (push.const . cdr)
   (push.iloc.1 . 0)
   (ret.subr.gloc.of |.list| "../stdlib/core/destructuring.scm" . 32782))
 (set.gloc.of |core.destructuring'cdr+|)
 (close
   (1 0 . |core.destructuring'duplicates?|)
   (iloc.0 . 0)
   (if.not.pair?.ret.const . #f)
   (touch.gloc.of |loop`873*|)
   (push.car.iloc (0 . 0) "../stdlib/core/destructuring.scm" . 37917)
   (push.cdr.iloc (0 . 0) "../stdlib/core/destructuring.scm" . 37934)
   (apply.gloc.of |loop`873*| "../stdlib/core/destructuring.scm" . 38926))
 (set.gloc.of |core.destructuring'duplicates?|)
 (close
   (1 0 . |core.destructuring'ellipsis-pair?|)
   (iloc.0 . 0)
   (if.not.pair?.ret.const . #f)
   (car.iloc (0 . 0) "../stdlib/core/destructuring.scm" . 46101)
   (if.not.symbol?.ret.const . #f)
   (cdr.iloc (0 . 0) "../stdlib/core/destructuring.scm" . 47123)
   (if.not.pair?.ret.const . #f)
   (push.cadr.iloc (0 . 0) "../stdlib/core/destructuring.scm" . 48145)
   (const . ...)
   (ret.eq? "../stdlib/core/destructuring.scm" . 48140))
 (set.gloc.of |core.destructuring'ellipsis-pair?|)
 (close
   (1 0 . |core.destructuring'quoted-pair?|)
   (iloc.0 . 0)
   (if.not.pair?.ret.const . #f)
   (push.car.iloc (0 . 0) "../stdlib/core/destructuring.scm" . 53265)
   (const . quote)
   (if.not.eq?.ret.const . #f)
   (cdr.iloc (0 . 0) "../stdlib/core/destructuring.scm" . 54291)
   (if.not.pair?.ret.const . #f)
   (cddr.iloc (0 . 0) "../stdlib/core/destructuring.scm" . 55315)
   (ret.null? "../stdlib/core/destructuring.scm" . 55308))
 (set.gloc.of |core.destructuring'quoted-pair?|)
 (close
   (1 0 . |core.destructuring'predicate-pair?|)
   (iloc.0 . 0)
   (if.not.pair?.ret.const . #f)
   (push.car.iloc (0 . 0) "../stdlib/core/destructuring.scm" . 60433)
   (const . ?)
   (if.not.eq?.ret.const . #f)
   (cdr.iloc (0 . 0) "../stdlib/core/destructuring.scm" . 61459)
   (ret.pair? "../stdlib/core/destructuring.scm" . 61452))
 (set.gloc.of |core.destructuring'predicate-pair?|)
 (close
   (1 0 . |core.destructuring'choose-pred|)
   (call
     (iloc.0 . 0)
     (if.symbol?.ret.const . #t)
     (push.iloc.0 . 0)
     (subr.gloc.of |.boolean?| 1 "../stdlib/core/destructuring.scm" . 65568)
     (if.true.ret)
     (iloc.0 . 0)
     (if.null?.ret.const . #t)
     (push.iloc.0 . 0)
     (subr.gloc.of |.char?| 1 "../stdlib/core/destructuring.scm" . 65595)
     (if.true.ret)
     (push.iloc.0 . 0)
     (ret.subr.gloc.of |.fixnum?| "../stdlib/core/destructuring.scm" . 65607))
   (if.true.ret.const . eq?)
   (push.iloc.0 . 0)
   (subr.gloc.of |.number?| 1 "../stdlib/core/destructuring.scm" . 66574)
   (if.true.ret.const . eqv?)
   (ret.const . equal?))
 (set.gloc.of |core.destructuring'choose-pred|)
 (close
   (1 0 . |core.destructuring'count-non-dotted-pattern|)
   (touch.gloc.of |loop`889*|)
   (push.iloc.0 . 0)
   (push.const . 0)
   (apply.gloc.of |loop`889*| "../stdlib/core/destructuring.scm" . 72713))
 (set.gloc.of |core.destructuring'count-non-dotted-pattern|)
 (close
   (2 0 . |core.destructuring'memoize-ref|)
   (push.iloc.0 . 0)
   (push.const . 0)
   (push.vector-ref.iloc (0 . 1) "../stdlib/core/destructuring.scm" . 79895)
   (push.subr.gloc.of |.assoc| 2 "../stdlib/core/destructuring.scm" . 79886)
   (extend . 1)
   (iloc.0 . 0)
   (if.true (push.iloc.0 . 0) (ret.subr.gloc.of |.cdr| "../stdlib/core/destructuring.scm" . 81934))
   (call (apply.gloc.of |.generate-temporary-symbol| "../stdlib/core/destructuring.scm" . 81946))
   (push)
   (extend . 1)
   (push.iloc 2 . 1)
   (push.const . 0)
   (push.iloc 2 . 0)
   (iloc.0 . 0)
   (push.cons)
   (const . 0)
   (vector-ref.iloc (2 . 1) "../stdlib/core/destructuring.scm" . 83006)
   (push.cons)
   (subr.gloc.of |.vector-set!| 3 "../stdlib/core/destructuring.scm" . 82967)
   (ret.iloc 0 . 0))
 (set.gloc.of |core.destructuring'memoize-ref|)
 (close
   (7 0 . |core.destructuring'compile-match|)
   (call
     (push.iloc.0 . 2)
     (apply.gloc.of |core.destructuring'quoted-pair?| "../stdlib/core/destructuring.scm" . 87054))
   (if.true
     (call
       (push.cadr.iloc (0 . 2) "../stdlib/core/destructuring.scm" . 88108)
       (apply.gloc.of |core.destructuring'choose-pred| "../stdlib/core/destructuring.scm" . 88095))
     (push)
     (push.iloc.0 . 3)
     (push.const . quote)
     (push.cadr.iloc (0 . 2) "../stdlib/core/destructuring.scm" . 88127)
     (push.subr.gloc.of |.list| 2 "../stdlib/core/destructuring.scm" . 88127)
     (push.subr.gloc.of |.list| 3 "../stdlib/core/destructuring.scm" . 88086)
     (iloc.0 . 4)
     (push.cons)
     (push.iloc.0 . 5)
     (push.iloc.0 . 6)
     (ret.subr.gloc.of |.values| "../stdlib/core/destructuring.scm" . 88078))
   (call
     (push.iloc.0 . 2)
     (apply.gloc.of |core.destructuring'ellipsis-pair?| "../stdlib/core/destructuring.scm" . 89102))
   (if.true
     (cddr.iloc (0 . 2) "../stdlib/core/destructuring.scm" . 90140)
     (if.null?
       (push.car.iloc (0 . 2) "../stdlib/core/destructuring.scm" . 91166)
       (const . _)
       (if.eq?
         (push.const . list?)
         (push.iloc.0 . 3)
         (push.subr.gloc.of |.list| 2 "../stdlib/core/destructuring.scm" . 92193)
         (iloc.0 . 4)
         (push.cons)
         (push.iloc.0 . 5)
         (push.iloc.0 . 6)
         (ret.subr.gloc.of |.values| "../stdlib/core/destructuring.scm" . 92185))
       (push.const . list?)
       (push.iloc.0 . 3)
       (push.subr.gloc.of |.list| 2 "../stdlib/core/destructuring.scm" . 93217)
       (iloc.0 . 4)
       (push.cons)
       (push.iloc.0 . 3)
       (iloc.0 . 5)
       (push.cons)
       (push.car.iloc (0 . 2) "../stdlib/core/destructuring.scm" . 93266)
       (iloc.0 . 6)
       (push.cons)
       (ret.subr.gloc.of |.values| "../stdlib/core/destructuring.scm" . 93209))
     (call
       (cddr.iloc (0 . 2) "../stdlib/core/destructuring.scm" . 94245)
       (if.not.pair?.ret.const . #t)
       (push.cddr.iloc (0 . 2) "../stdlib/core/destructuring.scm" . 94275)
       (apply.gloc.of
         |core.destructuring'predicate-pair?|
         "../stdlib/core/destructuring.scm"
         .
         94258))
     (if.true
       (push.car.iloc (0 . 2) "../stdlib/core/destructuring.scm" . 95262)
       (const . _)
       (if.eq?
         (push.iloc.0 . 0)
         (push.iloc.0 . 1)
         (push.cddr.iloc (0 . 2) "../stdlib/core/destructuring.scm" . 96304)
         (push.const . last-cdr)
         (push.iloc.0 . 3)
         (push.subr.gloc.of |.list| 2 "../stdlib/core/destructuring.scm" . 96281)
         (push.iloc.0 . 4)
         (push.iloc.0 . 5)
         (push.iloc.0 . 6)
         (apply.gloc.of
           |core.destructuring'compile-match|
           "../stdlib/core/destructuring.scm"
           .
           96281))
       (push.iloc.0 . 0)
       (push.iloc.0 . 1)
       (push.cddr.iloc (0 . 2) "../stdlib/core/destructuring.scm" . 100400)
       (push.const . last-cdr)
       (push.iloc.0 . 3)
       (push.subr.gloc.of |.list| 2 "../stdlib/core/destructuring.scm" . 100377)
       (push.iloc.0 . 4)
       (push.const . drop-last-cdr)
       (push.iloc.0 . 3)
       (push.subr.gloc.of |.list| 2 "../stdlib/core/destructuring.scm" . 102440)
       (iloc.0 . 5)
       (push.cons)
       (push.car.iloc (0 . 2) "../stdlib/core/destructuring.scm" . 103470)
       (iloc.0 . 6)
       (push.cons)
       (apply.gloc.of
         |core.destructuring'compile-match|
         "../stdlib/core/destructuring.scm"
         .
         100377))
     (cddr.iloc (0 . 2) "../stdlib/core/destructuring.scm" . 104476)
     (if.pair?
       (call
         (apply.gloc.of |.generate-temporary-symbol| "../stdlib/core/destructuring.scm" . 105508))
       (push.iloc.0 . 2)
       (subr.gloc.of |.cdddr| 1 "../stdlib/core/destructuring.scm" . 106533)
       (if.null?
         (call
           (push.const . last-pair)
           (push.iloc.0 . 3)
           (push.subr.gloc.of |.list| 2 "../stdlib/core/destructuring.scm" . 107565)
           (push.iloc.0 . 1)
           (apply.gloc.of
             |core.destructuring'memoize-ref|
             "../stdlib/core/destructuring.scm"
             .
             107565))
         (push)
         (extend . 1)
         (push.car.iloc (1 . 2) "../stdlib/core/destructuring.scm" . 108585)
         (const . _)
         (if.eq?
           (push.iloc.1 . 0)
           (push.iloc.1 . 1)
           (push.cddr.iloc (1 . 2) "../stdlib/core/destructuring.scm" . 109627)
           (push.iloc.0 . 0)
           (push.const . and)
           (push.const . pair?)
           (push.iloc.1 . 3)
           (push.subr.gloc.of |.list| 2 (|.list| 'pair? |ref`899*|))
           (push.const . set!)
           (push.iloc.0 . 0)
           (push.const . last-pair)
           (push.iloc.1 . 3)
           (push.subr.gloc.of |.list| 2 (|.list| 'last-pair |ref`899*|))
           (push.subr.gloc.of
             |.list|
             3
             (|.list| 'set! |memoize`903*| (|.list| 'last-pair |ref`899*|)))
           (push.subr.gloc.of |.list| 3 "../stdlib/core/destructuring.scm" . 110643)
           (iloc.1 . 4)
           (push.cons)
           (push.iloc.1 . 5)
           (push.iloc.1 . 6)
           (apply.gloc.of
             |core.destructuring'compile-match|
             "../stdlib/core/destructuring.scm"
             .
             109604))
         (push.iloc.1 . 0)
         (push.iloc.1 . 1)
         (push.cddr.iloc (1 . 2) "../stdlib/core/destructuring.scm" . 113723)
         (push.iloc.0 . 0)
         (push.const . and)
         (push.const . pair?)
         (push.iloc.1 . 3)
         (push.subr.gloc.of |.list| 2 (|.list| 'pair? |ref`899*|))
         (push.const . set!)
         (push.iloc.0 . 0)
         (push.const . last-pair)
         (push.iloc.1 . 3)
         (push.subr.gloc.of |.list| 2 (|.list| 'last-pair |ref`899*|))
         (push.subr.gloc.of
           |.list|
           3
           (|.list| 'set! |memoize`903*| (|.list| 'last-pair |ref`899*|)))
         (push.subr.gloc.of |.list| 3 "../stdlib/core/destructuring.scm" . 114739)
         (iloc.1 . 4)
         (push.cons)
         (push.const . drop-last-pair)
         (push.iloc.1 . 3)
         (push.subr.gloc.of |.list| 2 "../stdlib/core/destructuring.scm" . 115763)
         (iloc.1 . 5)
         (push.cons)
         (push.car.iloc (1 . 2) "../stdlib/core/destructuring.scm" . 116793)
         (iloc.1 . 6)
         (push.cons)
         (apply.gloc.of
           |core.destructuring'compile-match|
           "../stdlib/core/destructuring.scm"
           .
           113700))
       (call
         (push.iloc.0 . 2)
         (apply.gloc.of
           |core.destructuring'count-non-dotted-pattern|
           "../stdlib/core/destructuring.scm"
           .
           118826))
       (push)
       (push.const . 2)
       (push.subr.gloc.of |.-| 2 "../stdlib/core/destructuring.scm" . 118823)
       (extend . 1)
       (call
         (push.const . last-n-pair)
         (push.iloc.0 . 0)
         (push.iloc.1 . 3)
         (push.subr.gloc.of |.list| 3 "../stdlib/core/destructuring.scm" . 119855)
         (push.iloc.1 . 1)
         (apply.gloc.of
           |core.destructuring'memoize-ref|
           "../stdlib/core/destructuring.scm"
           .
           119855))
       (push)
       (extend . 1)
       (push.car.iloc (2 . 2) "../stdlib/core/destructuring.scm" . 120875)
       (const . _)
       (if.eq?
         (push.iloc 2 . 0)
         (push.iloc 2 . 1)
         (push.cddr.iloc (2 . 2) "../stdlib/core/destructuring.scm" . 121917)
         (push.iloc.0 . 0)
         (push.const . and)
         (push.const . pair?)
         (push.iloc 2 . 3)
         (push.subr.gloc.of |.list| 2 (|.list| 'pair? |ref`899*|))
         (push.const . set!)
         (push.iloc.0 . 0)
         (push.const . last-n-pair)
         (push.iloc.1 . 0)
         (push.iloc 2 . 3)
         (push.subr.gloc.of |.list| 3 (|.list| 'last-n-pair |n`905*| |ref`899*|))
         (push.subr.gloc.of
           |.list|
           3
           (|.list| 'set! |memoize`907*| (|.list| 'last-n-pair |n`905*| |ref`899*|)))
         (push.subr.gloc.of |.list| 3 "../stdlib/core/destructuring.scm" . 122933)
         (iloc 2 . 4)
         (push.cons)
         (push.iloc 2 . 5)
         (push.iloc 2 . 6)
         (apply.gloc.of
           |core.destructuring'compile-match|
           "../stdlib/core/destructuring.scm"
           .
           121894))
       (push.iloc 2 . 0)
       (push.iloc 2 . 1)
       (push.cddr.iloc (2 . 2) "../stdlib/core/destructuring.scm" . 126013)
       (push.iloc.0 . 0)
       (push.const . and)
       (push.const . pair?)
       (push.iloc 2 . 3)
       (push.subr.gloc.of |.list| 2 (|.list| 'pair? |ref`899*|))
       (push.const . set!)
       (push.iloc.0 . 0)
       (push.const . last-n-pair)
       (push.iloc.1 . 0)
       (push.iloc 2 . 3)
       (push.subr.gloc.of |.list| 3 (|.list| 'last-n-pair |n`905*| |ref`899*|))
       (push.subr.gloc.of
         |.list|
         3
         (|.list| 'set! |memoize`907*| (|.list| 'last-n-pair |n`905*| |ref`899*|)))
       (push.subr.gloc.of |.list| 3 "../stdlib/core/destructuring.scm" . 127029)
       (iloc 2 . 4)
       (push.cons)
       (push.const . drop-last-n-pair)
       (push.iloc.1 . 0)
       (push.iloc 2 . 3)
       (push.subr.gloc.of |.list| 3 "../stdlib/core/destructuring.scm" . 128053)
       (iloc 2 . 5)
       (push.cons)
       (push.car.iloc (2 . 2) "../stdlib/core/destructuring.scm" . 129083)
       (iloc 2 . 6)
       (push.cons)
       (apply.gloc.of
         |core.destructuring'compile-match|
         "../stdlib/core/destructuring.scm"
         .
         125990))
     (push.const . #f)
     (push.const . #f)
     (push.const . #f)
     (ret.subr.gloc.of |.values| "../stdlib/core/destructuring.scm" . 131093))
   (call
     (push.iloc.0 . 2)
     (apply.gloc.of
       |core.destructuring'predicate-pair?|
       "../stdlib/core/destructuring.scm"
       .
       132110))
   (if.true
     (call
       (push.iloc.0 . 0)
       (push.cadr.iloc (0 . 2) "../stdlib/core/destructuring.scm" . 133177)
       (push.const . #f)
       (subr.gloc.of |.core-hashtable-ref| 3 "../stdlib/core/destructuring.scm" . 133153)
       (if.true.ret)
       (apply.gloc.of |.generate-temporary-symbol| "../stdlib/core/destructuring.scm" . 133192))
     (push)
     (extend . 1)
     (push.iloc.1 . 0)
     (push.cadr.iloc (1 . 2) "../stdlib/core/destructuring.scm" . 134185)
     (push.iloc.0 . 0)
     (subr.gloc.of |.core-hashtable-set!| 3 "../stdlib/core/destructuring.scm" . 134160)
     (cddr.iloc (1 . 2) "../stdlib/core/destructuring.scm" . 135195)
     (if.null?
       (push.iloc.0 . 0)
       (push.iloc.1 . 3)
       (push.subr.gloc.of |.list| 2 "../stdlib/core/destructuring.scm" . 136220)
       (iloc.1 . 4)
       (push.cons)
       (push.iloc.1 . 5)
       (push.iloc.1 . 6)
       (ret.subr.gloc.of |.values| "../stdlib/core/destructuring.scm" . 136212))
     (push.iloc.1 . 0)
     (push.iloc.1 . 1)
     (push.iloc.1 . 2)
     (push.subr.gloc.of |.caddr| 1 "../stdlib/core/destructuring.scm" . 137259)
     (push.iloc.1 . 3)
     (push.iloc.0 . 0)
     (push.iloc.1 . 3)
     (push.subr.gloc.of |.list| 2 "../stdlib/core/destructuring.scm" . 137275)
     (iloc.1 . 4)
     (push.cons)
     (push.iloc.1 . 5)
     (push.iloc.1 . 6)
     (apply.gloc.of |core.destructuring'compile-match| "../stdlib/core/destructuring.scm" . 137236))
   (iloc.0 . 2)
   (if.pair?
     (push.close
       (0 0)
       (push.iloc.1 . 0)
       (push.iloc.1 . 1)
       (push.car.iloc (1 . 2) "../stdlib/core/destructuring.scm" . 141355)
       (call
         (push.iloc.1 . 3)
         (apply.gloc.of |core.destructuring'car+| "../stdlib/core/destructuring.scm" . 141365))
       (push)
       (push.const . pair?)
       (push.iloc.1 . 3)
       (push.subr.gloc.of |.list| 2 "../stdlib/core/destructuring.scm" . 141376)
       (iloc.1 . 4)
       (push.cons)
       (push.iloc.1 . 5)
       (push.iloc.1 . 6)
       (apply.gloc.of
         |core.destructuring'compile-match|
         "../stdlib/core/destructuring.scm"
         .
         141332))
     (push.close
       (3 0)
       (iloc.0 . 0)
       (if.true
         (push.iloc.1 . 0)
         (push.iloc.1 . 1)
         (push.cdr.iloc (1 . 2) "../stdlib/core/destructuring.scm" . 142389)
         (call
           (push.iloc.1 . 3)
           (apply.gloc.of |core.destructuring'cdr+| "../stdlib/core/destructuring.scm" . 142399))
         (push)
         (push.iloc.0 . 0)
         (push.iloc.0 . 1)
         (push.iloc.0 . 2)
         (apply.gloc.of
           |core.destructuring'compile-match|
           "../stdlib/core/destructuring.scm"
           .
           142366))
       (push.const . #f)
       (push.const . #f)
       (push.const . #f)
       (ret.subr.gloc.of |.values| "../stdlib/core/destructuring.scm" . 143388))
     (apply.gloc.of |.call-with-values| "../stdlib/core/destructuring.scm" . 89102))
   (push.iloc.0 . 2)
   (const . ...)
   (if.eq?
     (push.const . #f)
     (push.const . #f)
     (push.const . #f)
     (ret.subr.gloc.of |.values| "../stdlib/core/destructuring.scm" . 145422))
   (push.iloc.0 . 2)
   (const . _)
   (if.eq?
     (push.iloc.0 . 4)
     (push.iloc.0 . 5)
     (push.iloc.0 . 6)
     (ret.subr.gloc.of |.values| "../stdlib/core/destructuring.scm" . 147470))
   (iloc.0 . 2)
   (if.symbol?
     (push.iloc.0 . 4)
     (push.iloc.0 . 3)
     (iloc.0 . 5)
     (push.cons)
     (push.iloc.0 . 2)
     (iloc.0 . 6)
     (push.cons)
     (ret.subr.gloc.of |.values| "../stdlib/core/destructuring.scm" . 149518))
   (iloc.0 . 2)
   (if.null?
     (push.const . null?)
     (push.iloc.0 . 3)
     (push.subr.gloc.of |.list| 2 "../stdlib/core/destructuring.scm" . 151574)
     (iloc.0 . 4)
     (push.cons)
     (push.iloc.0 . 5)
     (push.iloc.0 . 6)
     (ret.subr.gloc.of |.values| "../stdlib/core/destructuring.scm" . 151566))
   (call
     (push.iloc.0 . 2)
     (apply.gloc.of |core.destructuring'choose-pred| "../stdlib/core/destructuring.scm" . 153631))
   (push)
   (push.iloc.0 . 3)
   (push.iloc.0 . 2)
   (push.subr.gloc.of |.list| 3 "../stdlib/core/destructuring.scm" . 153622)
   (iloc.0 . 4)
   (push.cons)
   (push.iloc.0 . 5)
   (push.iloc.0 . 6)
   (ret.subr.gloc.of |.values| "../stdlib/core/destructuring.scm" . 153614))
 (set.gloc.of |core.destructuring'compile-match|)
 (close
   (2 0 . |core.destructuring'reorder-tests|)
   (touch.gloc.of |loop`917*|)
   (push.iloc.0 . 0)
   (push.iloc.0 . 1)
   (push.const)
   (apply.gloc.of |loop`917*| "../stdlib/core/destructuring.scm" . 158729))
 (set.gloc.of |core.destructuring'reorder-tests|)
 (close
   (1 0 . |core.destructuring'reorder|)
   (push.gloc.of |.L290|)
   (push.iloc.0 . 0)
   (apply.gloc.of |.map| "../stdlib/core/destructuring.scm" . 165895))
 (set.gloc.of |core.destructuring'reorder|)
 (close
   (2 0 . |core.destructuring'cse-length|)
   (touch.gloc.of |loop`933*|)
   (push.const . 0)
   (push.cadr.iloc (0 . 0) "../stdlib/core/destructuring.scm" . 172060)
   (push.cadr.iloc (0 . 1) "../stdlib/core/destructuring.scm" . 172080)
   (apply.gloc.of |loop`933*| "../stdlib/core/destructuring.scm" . 173065))
 (set.gloc.of |core.destructuring'cse-length|)
 (close
   (2 0 . |core.destructuring'cse-1|)
   (call
     (push.close
       (1 0)
       (push.iloc.0 . 0)
       (iloc.1 . 1)
       (if.eq?.ret.const . -1)
       (push.iloc.0 . 0)
       (push.iloc.1 . 1)
       (apply.gloc.of |core.destructuring'cse-length| "../stdlib/core/destructuring.scm" . 181282))
     (push.iloc.0 . 0)
     (apply.gloc.of
       |.map|
       (|.map|
         (lambda (|clause`939*|)
           (if (|.eq?| |clause`939*| |current`937*|)
               -1
               (|core.destructuring'cse-length| |clause`939*| |current`937*|)))
         |clauses`937*|)))
   (push)
   (extend . 1)
   (call
     (call
       (push.gloc.of |.L277|)
       (push.iloc.0 . 0)
       (apply.gloc.of |core.lists'filter| "../stdlib/core/destructuring.scm" . 184346))
     (push)
     (extend . 1)
     (iloc.0 . 0)
     (if.null?.ret.const . 0)
     (push.gloc.of |.min|)
     (push.iloc.0 . 0)
     (apply.gloc.of |.apply| "../stdlib/core/destructuring.scm" . 186397))
   (push)
   (extend . 1)
   (>=n.iloc (0 . 0) 2 "../stdlib/core/destructuring.scm" . 187406)
   (if.false.ret)
   (call (apply.gloc.of |.generate-temporary-symbol| "../stdlib/core/destructuring.scm" . 188445))
   (push)
   (extend . 1)
   (push.cadr.iloc (3 . 1) "../stdlib/core/destructuring.scm" . 189481)
   (push.iloc.1 . 0)
   (push.subr.gloc.of |.list-head| 2 "../stdlib/core/destructuring.scm" . 189470)
   (extend . 1)
   (call
     (push.close
       (2 0)
       (call
         (=n.iloc (0 . 1) -1 "../stdlib/core/destructuring.scm" . 192552)
         (if.true.ret)
         (push.iloc.0 . 1)
         (push.iloc 3 . 0)
         (ret.subr.gloc.of |.>=| "../stdlib/core/destructuring.scm" . 192563))
       (if.true
         (push.car.iloc (0 . 0) "../stdlib/core/destructuring.scm" . 193575)
         (push.iloc 2 . 0)
         (push.cadr.iloc (0 . 0) "../stdlib/core/destructuring.scm" . 193613)
         (push.iloc 3 . 0)
         (subr.gloc.of |.list-tail| 2 "../stdlib/core/destructuring.scm" . 193602)
         (push.cons)
         (push.cddr.iloc (0 . 0) "../stdlib/core/destructuring.scm" . 193638)
         (ret.subr.gloc.of |.cons*| "../stdlib/core/destructuring.scm" . 192547))
       (ret.iloc 0 . 0))
     (push.iloc 4 . 0)
     (push.iloc 3 . 0)
     (apply.gloc.of
       |.map|
       (|.map|
         (lambda (|clause`954*| |len`954*|)
           (if (or (|.=| |len`954*| -1) (|.>=| |len`954*| |cs-max`947*|))
               (|.cons*|
                 (|.car| |clause`954*|)
                 (|.cons| |cs-tag`950*| (|.list-tail| (|.cadr| |clause`954*|) |cs-max`947*|))
                 (|.cddr| |clause`954*|))
               |clause`954*|))
         |clauses`937*|
         |cs-lst`941*|)))
   (push)
   (extend . 1)
   (car.iloc (1 . 0) "../stdlib/core/destructuring.scm" . 196637)
   (if.symbol?
     (push.iloc.0 . 0)
     (push.iloc 2 . 0)
     (push.iloc.1 . 0)
     (push.subr.gloc.of |.list| 2 "../stdlib/core/destructuring.scm" . 197674)
     (push.subr.gloc.of |.list| 1 "../stdlib/core/destructuring.scm" . 197668)
     (ret.subr.gloc.of |.append| "../stdlib/core/destructuring.scm" . 197652))
   (push.iloc 2 . 0)
   (push.iloc.1 . 0)
   (push.subr.gloc.of |.list| 2 "../stdlib/core/destructuring.scm" . 198682)
   (iloc.0 . 0)
   (ret.cons "../stdlib/core/destructuring.scm" . 198676))
 (set.gloc.of |core.destructuring'cse-1|)
 (close
   (1 0 . |core.destructuring'cse|)
   (extend.enclose+
     (1 0 . loop)
     (iloc.0 . 0)
     (if.null? (ret.iloc 2 . 0))
     (call
       (push.iloc 2 . 0)
       (push.car.iloc (0 . 0) "../stdlib/core/destructuring.scm" . 205859)
       (apply.gloc.of |core.destructuring'cse-1| "../stdlib/core/destructuring.scm" . 205844))
     (push)
     (extend . 1)
     (iloc.0 . 0)
     (if.true
       (push.iloc.0 . 0)
       (apply.gloc.of |core.destructuring'cse| "../stdlib/core/destructuring.scm" . 206873))
     (push.cdr.iloc (1 . 0) "../stdlib/core/destructuring.scm" . 206879)
     (apply.iloc+ (2 . 0) "../stdlib/core/destructuring.scm" . 206873))
   (push.iloc.1 . 0)
   (apply.iloc+ (0 . 0) "../stdlib/core/destructuring.scm" . 203785))
 (set.gloc.of |core.destructuring'cse|)
 (call
   (push.gloc.of |.L281|)
   (push.const
     (car . caar)
     (cdr . cadr)
     (caar . caaar)
     (cadr . caadr)
     (cdar . cadar)
     (cddr . caddr)
     (caaar . caaaar)
     (caadr . caaadr)
     (cadar . caadar)
     (caddr . caaddr)
     (cdaar . cadaar)
     (cdadr . cadadr)
     (cddar . caddar)
     (cdddr . cadddr))
   (apply.gloc.of |.for-each| "../stdlib/core/destructuring.scm" . 305155))
 (call
   (push.gloc.of |.L267|)
   (push.const
     (car . cdar)
     (cdr . cddr)
     (caar . cdaar)
     (cadr . cdadr)
     (cdar . cddar)
     (cddr . cdddr)
     (caaar . cdaaar)
     (caadr . cdaadr)
     (cadar . cdadar)
     (caddr . cdaddr)
     (cdaar . cddaar)
     (cdadr . cddadr)
     (cddar . cdddar)
     (cdddr . cddddr))
   (apply.gloc.of |.for-each| "../stdlib/core/destructuring.scm" . 309251))
 (call
   (push.const
     (syntax import . |.syntax|)
     (?pred-rhs unbound)
     (lambda import . |.lambda|)
     (subexprs unbound)
     (syntax->datum import . |.syntax->datum|)
     (?clauses unbound)
     (destructuring-match import . |core.destructuring'destructuring-match|)
     (e unbound)
     (destructuring-bind import . |core.destructuring'destructuring-bind|)
     (?body unbound)
     (?mem unbound)
     (... import . |....|)
     (ren unbound)
     (quote import . |.quote|)
     (if import . |.if|)
     (begin import . |.begin|)
     (datum->syntax import . |.datum->syntax|)
     (?fender unbound)
     (?inits unbound)
     (with-syntax import . |core.syntax-case'with-syntax|)
     (core-hashtable->alist import . |.core-hashtable->alist|)
     (tests unbound)
     (cdr import . |.cdr|)
     (|core.destructuring'cse| unbound)
     (?subexprs unbound)
     (?pat unbound)
     (?_ unbound)
     (cond import . |.cond|)
     (let-values import . |.let-values|)
     (apply import . |.apply|)
     (?tests unbound)
     (map import . |.map|)
     (?datum unbound)
     (datum import . |core.syntax-case'datum|)
     (vector-ref import . |.vector-ref|)
     (?dispatch unbound)
     (let import . |.let|)
     (mem unbound)
     (vars unbound)
     (else import . |.else|)
     (let* import . |.let*|)
     (a unbound)
     (values import . |.values|)
     (?expr unbound)
     (|core.lists'partition| unbound)
     (fender unbound)
     (clauses unbound)
     (and import . |.and|)
     (inits unbound)
     (list import . |.list|)
     (car import . |.car|)
     (?vars unbound)
     (?pred-lhs unbound)
     (|core.destructuring'reorder| unbound)
     (|core.destructuring'compile-match| unbound)
     (body unbound)
     (k unbound)
     (|core.destructuring'duplicates?| unbound)
     (_ import . |._|)
     (clause unbound)
     (eq? import . |.eq?|))
   (extend . 1)
   (call
     (push.const . syntax)
     (push.const . |core.destructuring'destructuring-bind|)
     (call
       (push.gloc.of |.L263|)
       (apply.gloc.of |.transformer-thunk| "../stdlib/core/destructuring.scm" . 209925))
     (push)
     (push.iloc.0 . 0)
     (apply.gloc.of |.set-top-level-macro!| "../stdlib/core/destructuring.scm" . 209925))
   (push.const . syntax)
   (push.const . |core.destructuring'destructuring-match|)
   (call
     (push.gloc.of |.L271|)
     (apply.gloc.of |.transformer-thunk| "../stdlib/core/destructuring.scm" . 236549))
   (push)
   (push.iloc.0 . 0)
   (apply.gloc.of |.set-top-level-macro!| "../stdlib/core/destructuring.scm" . 209925))
 (push.const . core.destructuring)
 (push.const . #f)
 (push.const
   (destructuring-match import . |core.destructuring'destructuring-match|)
   (destructuring-bind import . |core.destructuring'destructuring-bind|))
 (apply.gloc.of |.intern-scheme-library| "../stdlib/core/destructuring.scm" . 209925))

((close
   (1 0)
   (push.const . with-syntax)
   (push.const . "value does not match to pattern")
   (push.const ((_ _ name) spec) (n index))
   (apply.gloc.of |.syntax-violation| "../stdlib/core/records.scm" . 122892))
 (set.gloc.of |.L348|)
 (close
   (1 0)
   (push.iloc.0 . 0)
   (push.const (mutable name) proc1 proc2)
   (push.const (proc2 . 0) (proc1 . 0) (name . 0))
   (apply.gloc.of |.syntax/c1n| "../stdlib/core/records.scm" . 104478))
 (set.gloc.of |.L375|)
 (close
   (1 0)
   (push.const . #f)
   (push.const . "misplaced auxiliary syntactic keyword")
   (push.iloc.0 . 0)
   (apply.gloc.of |.syntax-violation| "../stdlib/core/records.scm" . 210951))
 (set.gloc.of |.L370|)
 (close
   (1 0)
   (call
     (call
       (push.iloc.0 . 0)
       (push.const . e1)
       (apply.gloc.of |.syntax/i1n| "../stdlib/core/records.scm" . 76829))
     (push)
     (apply.gloc.of |.syntax->datum| "../stdlib/core/records.scm" . 76829))
   (push)
   (ret.subr.gloc.of |.boolean?| "../stdlib/core/records.scm" . 76819))
 (set.gloc.of |.L333|)
 (close
   (1 0)
   (push.iloc.0 . 0)
   (push.const begin record-type constructor predicate accessors ... mutators ...)
   (push.const (mutators . 1) (accessors . 1) (predicate . 0) (constructor . 0) (record-type . 0))
   (apply.gloc.of |.syntax/c1n| "../stdlib/core/records.scm" . 122892))
 (set.gloc.of |.L362|)
 (close
   (1 0)
   (call
     (push.iloc.0 . 0)
     (push.const . e1)
     (apply.gloc.of |.syntax/i1n| "../stdlib/core/records.scm" . 82963))
   (push)
   (apply.gloc.of |.identifier?| "../stdlib/core/records.scm" . 82963))
 (set.gloc.of |.L347|)
 (close
   (1 0)
   (push.const . #f)
   (push.const . "misplaced auxiliary syntactic keyword")
   (push.iloc.0 . 0)
   (apply.gloc.of |.syntax-violation| "../stdlib/core/records.scm" . 223239))
 (set.gloc.of |.L330|)
 (close
   (1 0)
   (call
     (call
       (push.iloc.0 . 0)
       (push.const . name)
       (apply.gloc.of |.syntax/i1n| "../stdlib/core/records.scm" . 122892))
     (push)
     (apply.gloc.of |.identifier?| "../stdlib/core/records.scm" . 122892))
   (if.false.ret)
   (push.iloc.0 . 0)
   (push.const define name (record-mutator (record-type-rtd record-name) n))
   (push.const (n . 0) (record-name . 0) (name . 0))
   (apply.gloc.of |.syntax/c1n| "../stdlib/core/records.scm" . 122892))
 (set.gloc.of |.L332|)
 (close
   (1 0)
   (push.iloc.0 . 0)
   (push.const (immutable name) proc #f)
   (push.const (proc . 0) (name . 0))
   (apply.gloc.of |.syntax/c1n| "../stdlib/core/records.scm" . 100382))
 (set.gloc.of |.L349|)
 (close
   (1 0)
   (push.const . #f)
   (push.const . "misplaced auxiliary syntactic keyword")
   (push.iloc.0 . 0)
   (apply.gloc.of |.syntax-violation| "../stdlib/core/records.scm" . 198663))
 (set.gloc.of |.L353|)
 (close
   (1 0)
   (push.const . #f)
   (push.const . "misplaced auxiliary syntactic keyword")
   (push.iloc.0 . 0)
   (apply.gloc.of |.syntax-violation| "../stdlib/core/records.scm" . 190471))
 (set.gloc.of |.L374|)
 (close
   (1 0)
   (push.const . #f)
   (push.const . "misplaced auxiliary syntactic keyword")
   (push.iloc.0 . 0)
   (apply.gloc.of |.syntax-violation| "../stdlib/core/records.scm" . 215047))
 (set.gloc.of |.L361|)
 (close
   (1 0)
   (push.const . with-syntax)
   (push.const . "value does not match to pattern")
   (push.const (parent (stash-ref 'parent #f)))
   (apply.gloc.of |.syntax-violation| "../stdlib/core/records.scm" . 122892))
 (set.gloc.of |.L351|)
 (close
   (1 0)
   (push.const . with-syntax)
   (push.const . "value does not match to pattern")
   (push.const ((_ name _) spec) (n index))
   (apply.gloc.of |.syntax-violation| "../stdlib/core/records.scm" . 122892))
 (set.gloc.of |.L368|)
 (close
   (1 0)
   (push.iloc.0 . 0)
   (push.const (immutable name) accessor #f)
   (push.const (accessor . 0) (name . 0))
   (apply.gloc.of |.syntax/c1n| "../stdlib/core/records.scm" . 92189))
 (set.gloc.of |.L358|)
 (close
   (1 0)
   (push.const . with-syntax)
   (push.const . "value does not match to pattern")
   (push.const (proc (method-name "~a-~a" (syntax name))))
   (apply.gloc.of |.syntax-violation| "../stdlib/core/records.scm" . 100382))
 (set.gloc.of |.L371|)
 (close
   (1 0)
   (call
     (push.iloc.0 . 0)
     (push.const . name)
     (apply.gloc.of |.syntax/i1n| "../stdlib/core/records.scm" . 186387))
   (push)
   (apply.gloc.of |.identifier?| "../stdlib/core/records.scm" . 186387))
 (set.gloc.of |.L337|)
 (close
   (1 0)
   (push.const . with-syntax)
   (push.const . "value does not match to pattern")
   (push.const (proc (method-name "~a-~a" (syntax name))))
   (apply.gloc.of |.syntax-violation| "../stdlib/core/records.scm" . 110622))
 (set.gloc.of |.L346|)
 (close
   (1 0)
   (push.const . #f)
   (push.const . "misplaced auxiliary syntactic keyword")
   (push.iloc.0 . 0)
   (apply.gloc.of |.syntax-violation| "../stdlib/core/records.scm" . 219143))
 (set.gloc.of |.L344|)
 (close
   (1 0)
   (push.iloc.0 . 0)
   (push.const record-type-rcd name)
   (push.const (name . 0))
   (apply.gloc.of |.syntax/c1n| "../stdlib/core/records.scm" . 186377))
 (set.gloc.of |.L360|)
 (close
   (1 0)
   (subr.gloc.of |.make-core-hashtable| 0)
   (push)
   (extend . 1)
   (extend.unbound . 3)
   (push.close
     (2 0 . stash-set!)
     (call
       (push.iloc 2 . 0)
       (push.iloc.0 . 0)
       (push.const . #f)
       (subr.gloc.of |.core-hashtable-ref| 3 "../stdlib/core/records.scm" . 49170)
       (if.false.ret)
       (push.const . define-record-type)
       (push.const . "duplicate ~a clause")
       (push.iloc.0 . 0)
       (push.subr.gloc.of |.format| 2 "../stdlib/core/records.scm" . 50232)
       (push.iloc 3 . 0)
       (apply.gloc.of |.syntax-violation| "../stdlib/core/records.scm" . 50194))
     (push.iloc 2 . 0)
     (push.iloc.0 . 0)
     (push.iloc.0 . 1)
     (push.subr.gloc.of |.list| 1 "../stdlib/core/records.scm" . 51244)
     (ret.subr.gloc.of |.core-hashtable-set!| "../stdlib/core/records.scm" . 51213))
   (push.close
     (2 0 . stash-ref)
     (push.iloc 2 . 0)
     (push.iloc.0 . 0)
     (push.const . #f)
     (push.subr.gloc.of |.core-hashtable-ref| 3 "../stdlib/core/records.scm" . 55316)
     (extend . 1)
     (iloc.0 . 0)
     (if.true (push.iloc.0 . 0) (ret.subr.gloc.of |.car| (|.car| |.L325`977*|)))
     (ret.iloc 1 . 1))
   (push.close
     (2 0 . parse-record-clauses)
     (extend.enclose+
       (2 0 . method-name)
       (push.iloc.0 . 1)
       (push.iloc.0 . 0)
       (push.iloc 2 . 0)
       (call
         (push.iloc.0 . 1)
         (apply.gloc.of |.syntax->datum| "../stdlib/core/records.scm" . 63572))
       (push)
       (push.subr.gloc.of |.format| 3 "../stdlib/core/records.scm" . 63548)
       (push.subr.gloc.of |.string->symbol| 1 "../stdlib/core/records.scm" . 63532)
       (apply.gloc.of |.datum->syntax| "../stdlib/core/records.scm" . 63505))
     (push.close
       (1 0)
       (push.gloc.of |.vars|)
       (push.iloc.0 . 0)
       (push.const parent protocol parent-rtd sealed opaque nongenerative fields)
       (push.const parent e1)
       (push.gloc.of |.L350|)
       (push.close
         (1 0)
         (push.const . parent)
         (call
           (push.iloc.0 . 0)
           (push.const . e1)
           (apply.gloc.of |.syntax/i1n| "../stdlib/core/records.scm" . 70675))
         (push)
         (apply.iloc (4 . 0) "../stdlib/core/records.scm" . 70675))
       (push.subr.gloc.of |.list| 3 "../stdlib/core/records.scm" . 67600)
       (push.const protocol e1)
       (push.const . #f)
       (push.close
         (1 0)
         (push.const . protocol)
         (call
           (push.iloc.0 . 0)
           (push.const . e1)
           (apply.gloc.of |.syntax/i1n| "../stdlib/core/records.scm" . 72723))
         (push)
         (apply.iloc (4 . 0) "../stdlib/core/records.scm" . 72723))
       (push.subr.gloc.of |.list| 3 "../stdlib/core/records.scm" . 67600)
       (push.const parent-rtd e1 e2)
       (push.const . #f)
       (push.close
         (1 0)
         (push.const . parent-rtd)
         (call
           (push.iloc.0 . 0)
           (push.const . e1)
           (apply.gloc.of |.syntax/i1n| "../stdlib/core/records.scm" . 74795))
         (push)
         (call
           (push.iloc.0 . 0)
           (push.const . e2)
           (apply.gloc.of |.syntax/i1n| "../stdlib/core/records.scm" . 74795))
         (push.cons)
         (apply.iloc (4 . 0) "../stdlib/core/records.scm" . 74771))
       (push.subr.gloc.of |.list| 3 "../stdlib/core/records.scm" . 67600)
       (push.const sealed e1)
       (push.gloc.of |.L333|)
       (push.close
         (1 0)
         (push.const . sealed)
         (call
           (push.iloc.0 . 0)
           (push.const . e1)
           (apply.gloc.of |.syntax/i1n| "../stdlib/core/records.scm" . 77843))
         (push)
         (apply.iloc (4 . 0) "../stdlib/core/records.scm" . 77843))
       (push.subr.gloc.of |.list| 3 "../stdlib/core/records.scm" . 67600)
       (push.const opaque e1)
       (push.gloc.of |.L355|)
       (push.close
         (1 0)
         (push.const . opaque)
         (call
           (push.iloc.0 . 0)
           (push.const . e1)
           (apply.gloc.of |.syntax/i1n| "../stdlib/core/records.scm" . 80915))
         (push)
         (apply.iloc (4 . 0) "../stdlib/core/records.scm" . 80915))
       (push.subr.gloc.of |.list| 3 "../stdlib/core/records.scm" . 67600)
       (push.const nongenerative e1)
       (push.gloc.of |.L347|)
       (push.close
         (1 0)
         (push.const . nongenerative)
         (call
           (push.iloc.0 . 0)
           (push.const . e1)
           (apply.gloc.of |.syntax/i1n| "../stdlib/core/records.scm" . 83987))
         (push)
         (apply.iloc (4 . 0) "../stdlib/core/records.scm" . 83987))
       (push.subr.gloc.of |.list| 3 "../stdlib/core/records.scm" . 67600)
       (push.const nongenerative)
       (push.const . #f)
       (push.close
         (1 0)
         (push.const . nongenerative)
         (call
           (call
             (push.iloc.0 . 0)
             (push.const . k)
             (apply.gloc.of |.syntax/i0n| "../stdlib/core/records.scm" . 86062))
           (push)
           (push.const . "<~a>")
           (subr.gloc.of |.make-uuid| 0)
           (push)
           (push.subr.gloc.of |.format| 2 "../stdlib/core/records.scm" . 86097)
           (push.subr.gloc.of |.string->symbol| 1 "../stdlib/core/records.scm" . 86081)
           (apply.gloc.of |.datum->syntax| "../stdlib/core/records.scm" . 86062))
         (push)
         (apply.iloc (4 . 0) "../stdlib/core/records.scm" . 86035))
       (push.subr.gloc.of |.list| 3 "../stdlib/core/records.scm" . 67600)
       (push.const fields specs ...)
       (push.const . #f)
       (push.close
         (1 0)
         (push.const . fields)
         (call
           (push.close
             (1 0)
             (push.iloc.1 . 0)
             (push.iloc.0 . 0)
             (push.const immutable mutable)
             (push.const immutable name accessor)
             (push.gloc.of |.L357|)
             (push.gloc.of |.L358|)
             (push.subr.gloc.of |.list| 3 "../stdlib/core/records.scm" . 91163)
             (push.const mutable name accessor mutator)
             (push.gloc.of |.L340|)
             (push.gloc.of |.L373|)
             (push.subr.gloc.of |.list| 3 "../stdlib/core/records.scm" . 91163)
             (push.const immutable name)
             (push.gloc.of |.L343|)
             (push.close
               (1 0)
               (push.iloc.0 . 0)
               (call
                 (push.const . "~a-~a")
                 (call
                   (push.iloc.0 . 0)
                   (push.const . name)
                   (apply.gloc.of |.syntax/i1n| "../stdlib/core/records.scm" . 100382))
                 (push)
                 (apply.iloc+ (4 . 0) "../stdlib/core/records.scm" . 100382))
               (push)
               (push.subr.gloc.of |.list| 1 "../stdlib/core/records.scm" . 100382)
               (push.const)
               (push.const proc)
               (push.const . #f)
               (push.gloc.of |.L349|)
               (push.subr.gloc.of |.list| 3 "../stdlib/core/records.scm" . 100382)
               (push.const . _)
               (push.const . #f)
               (push.gloc.of |.L371|)
               (push.subr.gloc.of |.list| 3 "../stdlib/core/records.scm" . 100382)
               (apply.gloc.of |.syntax-dispatch| "../stdlib/core/records.scm" . 100382))
             (push.subr.gloc.of |.list| 3 "../stdlib/core/records.scm" . 91163)
             (push.const mutable name)
             (push.gloc.of |.L338|)
             (push.close
               (1 0)
               (push.iloc.0 . 0)
               (call
                 (push.const . "~a-~a")
                 (call
                   (push.iloc.0 . 0)
                   (push.const . name)
                   (apply.gloc.of |.syntax/i1n| "../stdlib/core/records.scm" . 104478))
                 (push)
                 (apply.iloc+ (4 . 0) "../stdlib/core/records.scm" . 104478))
               (push)
               (call
                 (push.const . "~a-~a-set!")
                 (call
                   (push.iloc.0 . 0)
                   (push.const . name)
                   (apply.gloc.of |.syntax/i1n| "../stdlib/core/records.scm" . 104478))
                 (push)
                 (apply.iloc+ (4 . 0) "../stdlib/core/records.scm" . 104478))
               (push)
               (push.subr.gloc.of |.list| 2 "../stdlib/core/records.scm" . 104478)
               (push.const)
               (push.const proc1 proc2)
               (push.const . #f)
               (push.gloc.of |.L375|)
               (push.subr.gloc.of |.list| 3 "../stdlib/core/records.scm" . 104478)
               (push.const . _)
               (push.const . #f)
               (push.gloc.of |.L342|)
               (push.subr.gloc.of |.list| 3 "../stdlib/core/records.scm" . 104478)
               (apply.gloc.of |.syntax-dispatch| "../stdlib/core/records.scm" . 104478))
             (push.subr.gloc.of |.list| 3 "../stdlib/core/records.scm" . 91163)
             (push.const . name)
             (push.gloc.of |.L372|)
             (push.close
               (1 0)
               (push.iloc.0 . 0)
               (call
                 (push.const . "~a-~a")
                 (call
                   (push.iloc.0 . 0)
                   (push.const . name)
                   (apply.gloc.of |.syntax/i1n| "../stdlib/core/records.scm" . 110622))
                 (push)
                 (apply.iloc+ (4 . 0) "../stdlib/core/records.scm" . 110622))
               (push)
               (push.subr.gloc.of |.list| 1 "../stdlib/core/records.scm" . 110622)
               (push.const)
               (push.const proc)
               (push.const . #f)
               (push.gloc.of |.L339|)
               (push.subr.gloc.of |.list| 3 "../stdlib/core/records.scm" . 110622)
               (push.const . _)
               (push.const . #f)
               (push.gloc.of |.L346|)
               (push.subr.gloc.of |.list| 3 "../stdlib/core/records.scm" . 110622)
               (apply.gloc.of |.syntax-dispatch| "../stdlib/core/records.scm" . 110622))
             (push.subr.gloc.of |.list| 3 "../stdlib/core/records.scm" . 91163)
             (push.const . _)
             (push.const . #f)
             (push.close
               (1 0)
               (push.const . define-record-type)
               (push.const . "malformed field spec")
               (push.iloc 8 . 0)
               (push.iloc.1 . 0)
               (apply.gloc.of |.syntax-violation| "../stdlib/core/records.scm" . 113694))
             (push.subr.gloc.of |.list| 3 "../stdlib/core/records.scm" . 91163)
             (apply.gloc.of |.syntax-dispatch| "../stdlib/core/records.scm" . 91163))
           (call
             (push.iloc.0 . 0)
             (push.const specs ...)
             (push.const (specs . 1))
             (apply.gloc.of |.syntax/c1n| "../stdlib/core/records.scm" . 90132))
           (push)
           (apply.gloc.of |.map| "../stdlib/core/records.scm" . 90137))
         (push)
         (apply.iloc (4 . 0) "../stdlib/core/records.scm" . 88083))
       (push.subr.gloc.of |.list| 3 "../stdlib/core/records.scm" . 67600)
       (push.const . _)
       (push.const . #f)
       (push.close
         (1 0)
         (push.const . define-record-type)
         (push.const . "malformed record clauses")
         (push.iloc 6 . 0)
         (call
           (push.iloc.1 . 0)
           (apply.gloc.of |.syntax->datum| "../stdlib/core/records.scm" . 116824))
         (push)
         (apply.gloc.of |.syntax-violation| "../stdlib/core/records.scm" . 116757))
       (push.subr.gloc.of |.list| 3 "../stdlib/core/records.scm" . 67600)
       (apply.gloc.of |.syntax-dispatch| "../stdlib/core/records.scm" . 67600))
     (push.iloc.1 . 1)
     (apply.gloc.of |.for-each| "../stdlib/core/records.scm" . 66574))
   (enclose . 3)
   (push.gloc.of |.vars|)
   (push.iloc 2 . 0)
   (push.const)
   (push.const _ (record-name constructor-name predicate-name) record-clauses ...)
   (push.gloc.of |.L363|)
   (push.close
     (1 0)
     (call
       (call
         (call
           (push.iloc.0 . 0)
           (push.const . record-name)
           (apply.gloc.of |.syntax/i1n| "../stdlib/core/records.scm" . 123940))
         (push)
         (apply.gloc.of |.syntax->datum| "../stdlib/core/records.scm" . 123940))
       (push)
       (call
         (push.iloc.0 . 0)
         (push.const record-clauses ...)
         (push.const (record-clauses . 1))
         (apply.gloc.of |.syntax/c1n| "../stdlib/core/records.scm" . 123918))
       (push)
       (apply.iloc (1 . 2) "../stdlib/core/records.scm" . 123918))
     (call
       (call
         (push.const . parent-rtd)
         (push.const . #f)
         (apply.iloc (1 . 1) "../stdlib/core/records.scm" . 124947))
       (if.false.ret)
       (call
         (push.const . parent)
         (push.const . #f)
         (apply.iloc (1 . 1) "../stdlib/core/records.scm" . 125971))
       (if.false.ret)
       (push.const . define-record-type)
       (push.const . "definition have both parent and parent-rtd clause")
       (push.iloc 3 . 0)
       (apply.gloc.of |.syntax-violation| "../stdlib/core/records.scm" . 126995))
     (push.iloc.0 . 0)
     (call
       (push.iloc.0 . 0)
       (call
         (push.const . parent)
         (push.const . #f)
         (apply.iloc (1 . 1) "../stdlib/core/records.scm" . 122892))
       (push)
       (push.subr.gloc.of |.list| 1 "../stdlib/core/records.scm" . 122892)
       (push.const)
       (push.const parent)
       (push.const . #f)
       (push.close
         (1 0)
         (push.iloc.0 . 0)
         (call
           (call
             (push.const . parent-rtd)
             (push.const . #f)
             (apply.iloc (2 . 1) "../stdlib/core/records.scm" . 122892))
           (push)
           (extend . 1)
           (iloc.0 . 0)
           (if.true
             (push.iloc.0 . 0)
             (ret.subr.gloc.of |.car| "../stdlib/core/records.scm" . 122892))
           (call
             (push.const . parent)
             (push.const . #f)
             (apply.iloc (3 . 1) "../stdlib/core/records.scm" . 122892))
           (if.false.ret)
           (push.iloc.1 . 0)
           (push.const record-type-rtd parent)
           (push.const (parent . 0))
           (apply.gloc.of |.syntax/c1n| "../stdlib/core/records.scm" . 122892))
         (push)
         (call
           (call
             (push.const . parent-rtd)
             (push.const . #f)
             (apply.iloc (2 . 1) "../stdlib/core/records.scm" . 122892))
           (push)
           (extend . 1)
           (iloc.0 . 0)
           (if.true
             (push.iloc.0 . 0)
             (ret.subr.gloc.of |.cdr| "../stdlib/core/records.scm" . 122892))
           (call
             (push.const . parent)
             (push.const . #f)
             (apply.iloc (3 . 1) "../stdlib/core/records.scm" . 122892))
           (if.false.ret)
           (push.iloc.1 . 0)
           (push.const record-type-rcd parent)
           (push.const (parent . 0))
           (apply.gloc.of |.syntax/c1n| "../stdlib/core/records.scm" . 122892))
         (push)
         (call
           (push.const . nongenerative)
           (push.const . #f)
           (apply.iloc (2 . 1) "../stdlib/core/records.scm" . 122892))
         (push)
         (call
           (push.const . sealed)
           (push.const . #f)
           (apply.iloc (2 . 1) "../stdlib/core/records.scm" . 122892))
         (push)
         (call
           (push.const . opaque)
           (push.const . #f)
           (apply.iloc (2 . 1) "../stdlib/core/records.scm" . 122892))
         (push)
         (call
           (push.const . protocol)
           (push.const . #f)
           (apply.iloc (2 . 1) "../stdlib/core/records.scm" . 122892))
         (push)
         (call
           (call
             (push.iloc.0 . 0)
             (push.const . k)
             (apply.gloc.of |.syntax/i0n| "../stdlib/core/records.scm" . 122892))
           (push)
           (call
             (push.const . fields)
             (push.const)
             (apply.iloc (2 . 1) "../stdlib/core/records.scm" . 122892))
           (push)
           (apply.gloc.of |.datum->syntax| "../stdlib/core/records.scm" . 122892))
         (push)
         (push.subr.gloc.of |.list| 7 "../stdlib/core/records.scm" . 122892)
         (push.const)
         (push.const rtd-parent rcd-parent uid sealed opaque protocol ((fields _ _) ...))
         (push.const . #f)
         (push.gloc.of |.L345|)
         (push.subr.gloc.of |.list| 3 "../stdlib/core/records.scm" . 122892)
         (push.const . _)
         (push.const . #f)
         (push.gloc.of |.L336|)
         (push.subr.gloc.of |.list| 3 "../stdlib/core/records.scm" . 122892)
         (apply.gloc.of |.syntax-dispatch| "../stdlib/core/records.scm" . 122892))
       (push.subr.gloc.of |.list| 3 "../stdlib/core/records.scm" . 122892)
       (push.const . _)
       (push.const . #f)
       (push.gloc.of |.L351|)
       (push.subr.gloc.of |.list| 3 "../stdlib/core/records.scm" . 122892)
       (apply.gloc.of |.syntax-dispatch| "../stdlib/core/records.scm" . 122892))
     (push)
     (call
       (push.iloc.0 . 0)
       (push.const define constructor-name (record-constructor (record-type-rcd record-name)))
       (push.const (record-name . 0) (constructor-name . 0))
       (apply.gloc.of |.syntax/c1n| "../stdlib/core/records.scm" . 122892))
     (push)
     (call
       (push.iloc.0 . 0)
       (push.const define predicate-name (record-predicate (record-type-rtd record-name)))
       (push.const (record-name . 0) (predicate-name . 0))
       (apply.gloc.of |.syntax/c1n| "../stdlib/core/records.scm" . 122892))
     (push)
     (call
       (push.const . -1)
       (extend . 1)
       (push.gloc.of |.values|)
       (call
         (push.close
           (1 0)
           (n+.iloc (1 . 0) 1 "../stdlib/core/records.scm" . 122892)
           (set.iloc (1 . 0) "../stdlib/core/records.scm" . 122892)
           (push.iloc 2 . 0)
           (push.iloc.0 . 0)
           (push.iloc.1 . 0)
           (push.subr.gloc.of |.list| 2 "../stdlib/core/records.scm" . 122892)
           (push.const)
           (push.const (_ name _) n)
           (push.const . #f)
           (push.gloc.of |.L367|)
           (push.subr.gloc.of |.list| 3 "../stdlib/core/records.scm" . 122892)
           (push.const . _)
           (push.const . #f)
           (push.gloc.of |.L368|)
           (push.subr.gloc.of |.list| 3 "../stdlib/core/records.scm" . 122892)
           (apply.gloc.of |.syntax-dispatch| "../stdlib/core/records.scm" . 122892))
         (call
           (push.const . fields)
           (push.const)
           (apply.iloc (2 . 1) "../stdlib/core/records.scm" . 122892))
         (push)
         (apply.gloc.of |.map| "../stdlib/core/records.scm" . 122892))
       (push)
       (apply.gloc.of |core.lists'filter| "../stdlib/core/records.scm" . 122892))
     (push)
     (call
       (push.const . -1)
       (extend . 1)
       (push.gloc.of |.values|)
       (call
         (push.close
           (1 0)
           (n+.iloc (1 . 0) 1 "../stdlib/core/records.scm" . 122892)
           (set.iloc (1 . 0) "../stdlib/core/records.scm" . 122892)
           (push.iloc 2 . 0)
           (push.iloc.0 . 0)
           (push.iloc.1 . 0)
           (push.subr.gloc.of |.list| 2 "../stdlib/core/records.scm" . 122892)
           (push.const)
           (push.const (_ _ name) n)
           (push.const . #f)
           (push.gloc.of |.L332|)
           (push.subr.gloc.of |.list| 3 "../stdlib/core/records.scm" . 122892)
           (push.const . _)
           (push.const . #f)
           (push.gloc.of |.L348|)
           (push.subr.gloc.of |.list| 3 "../stdlib/core/records.scm" . 122892)
           (apply.gloc.of |.syntax-dispatch| "../stdlib/core/records.scm" . 122892))
         (call
           (push.const . fields)
           (push.const)
           (apply.iloc (2 . 1) "../stdlib/core/records.scm" . 122892))
         (push)
         (apply.gloc.of |.map| "../stdlib/core/records.scm" . 122892))
       (push)
       (apply.gloc.of |core.lists'filter| "../stdlib/core/records.scm" . 122892))
     (push)
     (push.subr.gloc.of |.list| 5 "../stdlib/core/records.scm" . 122892)
     (push.const)
     (push.const record-type constructor predicate (accessors ...) (mutators ...))
     (push.const . #f)
     (push.gloc.of |.L362|)
     (push.subr.gloc.of |.list| 3 "../stdlib/core/records.scm" . 122892)
     (push.const . _)
     (push.const . #f)
     (push.gloc.of |.L356|)
     (push.subr.gloc.of |.list| 3 "../stdlib/core/records.scm" . 122892)
     (apply.gloc.of |.syntax-dispatch| "../stdlib/core/records.scm" . 122892))
   (push.subr.gloc.of |.list| 3 "../stdlib/core/records.scm" . 119817)
   (push.const _ record-name record-clauses ...)
   (push.gloc.of |.L364|)
   (push.gloc.of |.L354|)
   (push.subr.gloc.of |.list| 3 "../stdlib/core/records.scm" . 119817)
   (apply.gloc.of |.syntax-dispatch| "../stdlib/core/records.scm" . 119817))
 (set.gloc.of |.L365|)
 (close
   (1 0)
   (push.const . #f)
   (push.const . "misplaced auxiliary syntactic keyword")
   (push.iloc.0 . 0)
   (apply.gloc.of |.syntax-violation| "../stdlib/core/records.scm" . 194567))
 (set.gloc.of |.L366|)
 (close
   (1 0)
   (call
     (call
       (push.iloc.0 . 0)
       (push.const . name)
       (apply.gloc.of |.syntax/i1n| "../stdlib/core/records.scm" . 122892))
     (push)
     (apply.gloc.of |.identifier?| "../stdlib/core/records.scm" . 122892))
   (if.false.ret)
   (push.iloc.0 . 0)
   (push.const define name (record-accessor (record-type-rtd record-name) n))
   (push.const (n . 0) (record-name . 0) (name . 0))
   (apply.gloc.of |.syntax/c1n| "../stdlib/core/records.scm" . 122892))
 (set.gloc.of |.L367|)
 (close
   (1 0)
   (call
     (push.iloc.0 . 0)
     (push.const . name)
     (apply.gloc.of |.syntax/i1n| "../stdlib/core/records.scm" . 99358))
   (push)
   (apply.gloc.of |.identifier?| "../stdlib/core/records.scm" . 99358))
 (set.gloc.of |.L343|)
 (close
   (1 0)
   (call
     (push.iloc.0 . 0)
     (push.const . record-name)
     (apply.gloc.of |.syntax/i1n| "../stdlib/core/records.scm" . 171020))
   (push)
   (apply.gloc.of |.identifier?| "../stdlib/core/records.scm" . 171020))
 (set.gloc.of |.L364|)
 (close
   (1 0)
   (push.const . with-syntax)
   (push.const . "value does not match to pattern")
   (push.const
     (proc1 (method-name "~a-~a" (syntax name)))
     (proc2 (method-name "~a-~a-set!" (syntax name))))
   (apply.gloc.of |.syntax-violation| "../stdlib/core/records.scm" . 104478))
 (set.gloc.of |.L342|)
 (close
   (1 0)
   (push.iloc.0 . 0)
   (push.const (immutable name) proc #f)
   (push.const (proc . 0) (name . 0))
   (apply.gloc.of |.syntax/c1n| "../stdlib/core/records.scm" . 110622))
 (set.gloc.of |.L339|)
 (close
   (1 0)
   (call
     (call
       (push.iloc.0 . 0)
       (push.const . record-name)
       (apply.gloc.of |.syntax/i1n| "../stdlib/core/records.scm" . 121873))
     (push)
     (apply.gloc.of |.identifier?| "../stdlib/core/records.scm" . 121873))
   (if.false.ret)
   (call
     (call
       (push.iloc.0 . 0)
       (push.const . constructor-name)
       (apply.gloc.of |.syntax/i1n| "../stdlib/core/records.scm" . 121901))
     (push)
     (apply.gloc.of |.identifier?| "../stdlib/core/records.scm" . 121901))
   (if.false.ret)
   (call
     (push.iloc.0 . 0)
     (push.const . predicate-name)
     (apply.gloc.of |.syntax/i1n| "../stdlib/core/records.scm" . 121934))
   (push)
   (apply.gloc.of |.identifier?| "../stdlib/core/records.scm" . 121934))
 (set.gloc.of |.L363|)
 (close
   (1 0)
   (push.const . with-syntax)
   (push.const . "value does not match to pattern")
   (push.const
     (record-type
       (with-syntax ((parent (stash-ref 'parent #f)))
         (with-syntax ((rtd-parent
                         (cond ((stash-ref 'parent-rtd #f) => car)
                               ((stash-ref 'parent #f) (syntax (record-type-rtd parent)))
                               (else #f)))
                       (rcd-parent
                         (cond ((stash-ref 'parent-rtd #f) => cdr)
                               ((stash-ref 'parent #f) (syntax (record-type-rcd parent)))
                               (else #f)))
                       (uid (stash-ref 'nongenerative #f))
                       (sealed (stash-ref 'sealed #f))
                       (opaque (stash-ref 'opaque #f))
                       (protocol (stash-ref 'protocol #f))
                       (((fields _ _) ...) (datum->syntax (syntax k) (stash-ref 'fields '()))))
           (syntax
             (define record-name
               (let* ((rtd
                        (make-record-type-descriptor
                          'record-name
                          rtd-parent
                          'uid
                          sealed
                          opaque
                          '#(fields ...)))
                      (rcd (make-record-constructor-descriptor rtd rcd-parent protocol)))
                 (make-record-type 'record-name rtd rcd)))))))
     (constructor
       (syntax (define constructor-name (record-constructor (record-type-rcd record-name)))))
     (predicate (syntax (define predicate-name (record-predicate (record-type-rtd record-name)))))
     ((accessors ...)
      (let ((index -1))
        (filter
          values
          (map (lambda (spec)
                 (set! index (+ index 1))
                 (with-syntax (((_ name _) spec) (n index))
                   (and (identifier? (syntax name))
                        (syntax (define name (record-accessor (record-type-rtd record-name) n))))))
               (stash-ref 'fields '())))))
     ((mutators ...)
      (let ((index -1))
        (filter
          values
          (map (lambda (spec)
                 (set! index (+ index 1))
                 (with-syntax (((_ _ name) spec) (n index))
                   (and (identifier? (syntax name))
                        (syntax (define name (record-mutator (record-type-rtd record-name) n))))))
               (stash-ref 'fields '()))))))
   (apply.gloc.of |.syntax-violation| "../stdlib/core/records.scm" . 122892))
 (set.gloc.of |.L356|)
 (close
   (1 0)
   (push.const . #f)
   (push.const . "misplaced auxiliary syntactic keyword")
   (push.iloc.0 . 0)
   (apply.gloc.of |.syntax-violation| "../stdlib/core/records.scm" . 206855))
 (set.gloc.of |.L369|)
 (close
   (1 0)
   (call
     (call
       (push.iloc.0 . 0)
       (push.const . name)
       (apply.gloc.of |.syntax/i1n| "../stdlib/core/records.scm" . 93219))
     (push)
     (apply.gloc.of |.identifier?| "../stdlib/core/records.scm" . 93219))
   (if.false.ret)
   (call
     (push.iloc.0 . 0)
     (push.const . accessor)
     (apply.gloc.of |.syntax/i1n| "../stdlib/core/records.scm" . 93240))
   (push)
   (apply.gloc.of |.identifier?| "../stdlib/core/records.scm" . 93240))
 (set.gloc.of |.L357|)
 (close
   (1 0)
   (call
     (call
       (push.iloc.0 . 0)
       (push.const . e1)
       (apply.gloc.of |.syntax/i1n| "../stdlib/core/records.scm" . 79901))
     (push)
     (apply.gloc.of |.syntax->datum| "../stdlib/core/records.scm" . 79901))
   (push)
   (ret.subr.gloc.of |.boolean?| "../stdlib/core/records.scm" . 79891))
 (set.gloc.of |.L355|)
 (close
   (1 0)
   (push.iloc.0 . 0)
   (push.const record-type-rtd name)
   (push.const (name . 0))
   (apply.gloc.of |.syntax/c1n| "../stdlib/core/records.scm" . 181257))
 (set.gloc.of |.L331|)
 (close
   (1 0)
   (call
     (call
       (push.iloc.0 . 0)
       (push.const . record-name)
       (apply.gloc.of |.syntax/i1n| "../stdlib/core/records.scm" . 172077))
     (push)
     (apply.gloc.of |.syntax->datum| "../stdlib/core/records.scm" . 172077))
   (push)
   (push.subr.gloc.of |.symbol->string| 1 "../stdlib/core/records.scm" . 172061)
   (extend . 1)
   (push.iloc.1 . 0)
   (call
     (call
       (push.iloc.1 . 0)
       (push.const . record-name)
       (apply.gloc.of |.syntax/i1n| "../stdlib/core/records.scm" . 173070))
     (push)
     (push.const . "make-")
     (push.iloc.0 . 0)
     (push.subr.gloc.of |.string-append| 2 "../stdlib/core/records.scm" . 173070)
     (push.subr.gloc.of |.string->symbol| 1 "../stdlib/core/records.scm" . 173070)
     (apply.gloc.of |.datum->syntax| "../stdlib/core/records.scm" . 173070))
   (push)
   (call
     (call
       (push.iloc.1 . 0)
       (push.const . record-name)
       (apply.gloc.of |.syntax/i1n| "../stdlib/core/records.scm" . 173070))
     (push)
     (push.iloc.0 . 0)
     (push.const . "?")
     (push.subr.gloc.of |.string-append| 2 "../stdlib/core/records.scm" . 173070)
     (push.subr.gloc.of |.string->symbol| 1 "../stdlib/core/records.scm" . 173070)
     (apply.gloc.of |.datum->syntax| "../stdlib/core/records.scm" . 173070))
   (push)
   (push.subr.gloc.of |.list| 2 "../stdlib/core/records.scm" . 173070)
   (push.const)
   (push.const constructor-name predicate-name)
   (push.const . #f)
   (push.gloc.of |.L329|)
   (push.subr.gloc.of |.list| 3 "../stdlib/core/records.scm" . 173070)
   (push.const . _)
   (push.const . #f)
   (push.gloc.of |.L335|)
   (push.subr.gloc.of |.list| 3 "../stdlib/core/records.scm" . 173070)
   (apply.gloc.of |.syntax-dispatch| "../stdlib/core/records.scm" . 173070))
 (set.gloc.of |.L354|)
 (close
   (1 0)
   (call
     (call
       (push.iloc.0 . 0)
       (push.const . name)
       (apply.gloc.of |.syntax/i1n| "../stdlib/core/records.scm" . 96291))
     (push)
     (apply.gloc.of |.identifier?| "../stdlib/core/records.scm" . 96291))
   (if.false.ret)
   (call
     (call
       (push.iloc.0 . 0)
       (push.const . accessor)
       (apply.gloc.of |.syntax/i1n| "../stdlib/core/records.scm" . 96312))
     (push)
     (apply.gloc.of |.identifier?| "../stdlib/core/records.scm" . 96312))
   (if.false.ret)
   (call
     (push.iloc.0 . 0)
     (push.const . mutator)
     (apply.gloc.of |.syntax/i1n| "../stdlib/core/records.scm" . 96337))
   (push)
   (apply.gloc.of |.identifier?| "../stdlib/core/records.scm" . 96337))
 (set.gloc.of |.L340|)
 (close
   (1 0)
   (call
     (push.iloc.0 . 0)
     (push.const . e1)
     (apply.gloc.of |.syntax/i1n| "../stdlib/core/records.scm" . 69651))
   (push)
   (apply.gloc.of |.identifier?| "../stdlib/core/records.scm" . 69651))
 (set.gloc.of |.L350|)
 (close
   (1 0)
   (push.const . with-syntax)
   (push.const . "value does not match to pattern")
   (push.const
     (rtd-parent
       (cond ((stash-ref 'parent-rtd #f) => car)
             ((stash-ref 'parent #f) (syntax (record-type-rtd parent)))
             (else #f)))
     (rcd-parent
       (cond ((stash-ref 'parent-rtd #f) => cdr)
             ((stash-ref 'parent #f) (syntax (record-type-rcd parent)))
             (else #f)))
     (uid (stash-ref 'nongenerative #f))
     (sealed (stash-ref 'sealed #f))
     (opaque (stash-ref 'opaque #f))
     (protocol (stash-ref 'protocol #f))
     (((fields _ _) ...) (datum->syntax (syntax k) (stash-ref 'fields '()))))
   (apply.gloc.of |.syntax-violation| "../stdlib/core/records.scm" . 122892))
 (set.gloc.of |.L336|)
 (close
   (1 0)
   (push.gloc.of |.vars|)
   (push.iloc.0 . 0)
   (push.const)
   (push.const _ name)
   (push.gloc.of |.L359|)
   (push.gloc.of |.L331|)
   (push.subr.gloc.of |.list| 3 "../stdlib/core/records.scm" . 180231)
   (apply.gloc.of |.syntax-dispatch| "../stdlib/core/records.scm" . 180231))
 (set.gloc.of |.L341|)
 (close
   (1 0)
   (push.iloc.0 . 0)
   (push.const
     define
     record-name
     (let* ((rtd
              (make-record-type-descriptor
                'record-name
                rtd-parent
                'uid
                sealed
                opaque
                '#(fields ...)))
            (rcd (make-record-constructor-descriptor rtd rcd-parent protocol)))
       (make-record-type 'record-name rtd rcd)))
   (push.const
     (protocol . 0)
     (rcd-parent . 0)
     (fields . 1)
     (opaque . 0)
     (sealed . 0)
     (uid . 0)
     (rtd-parent . 0)
     (record-name . 0))
   (apply.gloc.of |.syntax/c1n| "../stdlib/core/records.scm" . 122892))
 (set.gloc.of |.L345|)
 (close
   (1 0)
   (push.gloc.of |.vars|)
   (push.iloc.0 . 0)
   (push.const)
   (push.const _ name)
   (push.gloc.of |.L337|)
   (push.gloc.of |.L360|)
   (push.subr.gloc.of |.list| 3 "../stdlib/core/records.scm" . 185351)
   (apply.gloc.of |.syntax-dispatch| "../stdlib/core/records.scm" . 185351))
 (set.gloc.of |.L352|)
 (close
   (1 0)
   (push.const . #f)
   (push.const . "misplaced auxiliary syntactic keyword")
   (push.iloc.0 . 0)
   (apply.gloc.of |.syntax-violation| "../stdlib/core/records.scm" . 202759))
 (set.gloc.of |.L334|)
 (close
   (1 0)
   (call
     (push.iloc.0 . 0)
     (push.const . name)
     (apply.gloc.of |.syntax/i1n| "../stdlib/core/records.scm" . 103454))
   (push)
   (apply.gloc.of |.identifier?| "../stdlib/core/records.scm" . 103454))
 (set.gloc.of |.L338|)
 (close
   (1 0)
   (push.iloc.0 . 0)
   (push.const define-record-type (record-name constructor-name predicate-name) record-clauses ...)
   (push.const (record-clauses . 1) (predicate-name . 0) (constructor-name . 0) (record-name . 0))
   (apply.gloc.of |.syntax/c1n| "../stdlib/core/records.scm" . 173070))
 (set.gloc.of |.L329|)
 (close
   (1 0)
   (call
     (push.iloc.0 . 0)
     (push.const . name)
     (apply.gloc.of |.syntax/i1n| "../stdlib/core/records.scm" . 109598))
   (push)
   (apply.gloc.of |.identifier?| "../stdlib/core/records.scm" . 109598))
 (set.gloc.of |.L372|)
 (close
   (1 0)
   (push.iloc.0 . 0)
   (push.const (mutable name) accessor mutator)
   (push.const (mutator . 0) (accessor . 0) (name . 0))
   (apply.gloc.of |.syntax/c1n| "../stdlib/core/records.scm" . 95261))
 (set.gloc.of |.L373|)
 (close
   (1 0)
   (push.const . with-syntax)
   (push.const . "value does not match to pattern")
   (push.const
     (constructor-name
       (datum->syntax (syntax record-name) (string->symbol (string-append "make-" base-name))))
     (predicate-name
       (datum->syntax (syntax record-name) (string->symbol (string-append base-name "?")))))
   (apply.gloc.of |.syntax-violation| "../stdlib/core/records.scm" . 173070))
 (set.gloc.of |.L335|)
 (close
   (1 0)
   (call
     (push.iloc.0 . 0)
     (push.const . name)
     (apply.gloc.of |.syntax/i1n| "../stdlib/core/records.scm" . 181267))
   (push)
   (apply.gloc.of |.identifier?| "../stdlib/core/records.scm" . 181267))
 (set.gloc.of |.L359|)
 (call
   (push.const core destructuring)
   (apply.gloc.of |.require-scheme-library| "../stdlib/core/records.scm" . 122892))
 (call
   (push.const core syntax-case)
   (apply.gloc.of |.require-scheme-library| "../stdlib/core/records.scm" . 122892))
 (call
   (push.const core lists)
   (apply.gloc.of |.require-scheme-library| "../stdlib/core/records.scm" . 122892))
 (call
   (push.const core primitives)
   (apply.gloc.of |.require-scheme-library| "../stdlib/core/records.scm" . 122892))
 (call
   (push.const
     (let import . |.let|)
     (|core.lists'filter| unbound)
     (nongenerative import . |core.records'nongenerative|)
     (define import . |.define|)
     (constructor-name unbound)
     (proc unbound)
     (map import . |.map|)
     (parent import . |core.records'parent|)
     (set! import . |.set!|)
     (accessors unbound)
     (identifier? import . |.identifier?|)
     (e2 unbound)
     (rcd unbound)
     (method-name unbound)
     (spec unbound)
     (... import . |....|)
     (record-mutator import . |.record-mutator|)
     (quote import . |.quote|)
     (if import . |.if|)
     (e1 unbound)
     (datum->syntax import . |.datum->syntax|)
     (rtd unbound)
     (+ import . |.+|)
     (base-name unbound)
     (predicate-name unbound)
     (with-syntax import . |core.syntax-case'with-syntax|)
     (record-type-descriptor import . |core.records'record-type-descriptor|)
     (record-constructor-descriptor import . |core.records'record-constructor-descriptor|)
     (protocol import . |core.records'protocol|)
     (record-name unbound)
     (cdr import . |.cdr|)
     (let* import . |.let*|)
     (specs unbound)
     (constructor unbound)
     (cond import . |.cond|)
     (parent-rtd import . |core.records'parent-rtd|)
     (proc1 unbound)
     (uid unbound)
     (record-clauses unbound)
     (accessor unbound)
     (record-type-rtd import . |.record-type-rtd|)
     (lambda import . |.lambda|)
     (mutator unbound)
     (filter import . |core.lists'filter|)
     (letrec* import . |.letrec*|)
     (define-record-type import . |core.records'define-record-type|)
     (syntax import . |.syntax|)
     (record-predicate import . |.record-predicate|)
     (string->symbol import . |.string->symbol|)
     (else import . |.else|)
     (make-record-constructor-descriptor import . |.make-record-constructor-descriptor|)
     (rtd-parent unbound)
     (values import . |.values|)
     (make-record-type import . |.make-record-type|)
     (begin import . |.begin|)
     (predicate unbound)
     (sealed import . |core.records'sealed|)
     (mutable import . |core.records'mutable|)
     (record-type-rcd import . |.record-type-rcd|)
     (string-append import . |.string-append|)
     (stash-ref unbound)
     (and import . |.and|)
     (=> import . |.=>|)
     (rcd-parent unbound)
     (make-record-type-descriptor import . |.make-record-type-descriptor|)
     (opaque import . |core.records'opaque|)
     (n unbound)
     (car import . |.car|)
     (index unbound)
     (record-accessor import . |.record-accessor|)
     (record-constructor import . |.record-constructor|)
     (immutable import . |core.records'immutable|)
     (k unbound)
     (_ import . |._|)
     (record-type unbound)
     (mutators unbound)
     (fields import . |core.records'fields|)
     (name unbound)
     (proc2 unbound))
   (extend . 1)
   (call
     (push.const . syntax)
     (push.const . |core.records'define-record-type|)
     (call
       (push.gloc.of |.L365|)
       (apply.gloc.of |.transformer-thunk| "../stdlib/core/records.scm" . 44037))
     (push)
     (push.iloc.0 . 0)
     (apply.gloc.of |.set-top-level-macro!| "../stdlib/core/records.scm" . 44037))
   (call
     (push.const . syntax)
     (push.const . |core.records'record-type-descriptor|)
     (call
       (push.gloc.of |.L341|)
       (apply.gloc.of |.transformer-thunk| "../stdlib/core/records.scm" . 44037))
     (push)
     (push.iloc.0 . 0)
     (apply.gloc.of |.set-top-level-macro!| "../stdlib/core/records.scm" . 44037))
   (call
     (push.const . syntax)
     (push.const . |core.records'record-constructor-descriptor|)
     (call
       (push.gloc.of |.L352|)
       (apply.gloc.of |.transformer-thunk| "../stdlib/core/records.scm" . 44037))
     (push)
     (push.iloc.0 . 0)
     (apply.gloc.of |.set-top-level-macro!| "../stdlib/core/records.scm" . 44037))
   (call
     (push.const . syntax)
     (push.const . |core.records'fields|)
     (call
       (push.gloc.of |.L374|)
       (apply.gloc.of |.transformer-thunk| "../stdlib/core/records.scm" . 44037))
     (push)
     (push.iloc.0 . 0)
     (apply.gloc.of |.set-top-level-macro!| "../stdlib/core/records.scm" . 44037))
   (call
     (push.const . syntax)
     (push.const . |core.records'mutable|)
     (call
       (push.gloc.of |.L366|)
       (apply.gloc.of |.transformer-thunk| "../stdlib/core/records.scm" . 44037))
     (push)
     (push.iloc.0 . 0)
     (apply.gloc.of |.set-top-level-macro!| "../stdlib/core/records.scm" . 44037))
   (call
     (push.const . syntax)
     (push.const . |core.records'immutable|)
     (call
       (push.gloc.of |.L353|)
       (apply.gloc.of |.transformer-thunk| "../stdlib/core/records.scm" . 44037))
     (push)
     (push.iloc.0 . 0)
     (apply.gloc.of |.set-top-level-macro!| "../stdlib/core/records.scm" . 44037))
   (call
     (push.const . syntax)
     (push.const . |core.records'parent|)
     (call
       (push.gloc.of |.L334|)
       (apply.gloc.of |.transformer-thunk| "../stdlib/core/records.scm" . 44037))
     (push)
     (push.iloc.0 . 0)
     (apply.gloc.of |.set-top-level-macro!| "../stdlib/core/records.scm" . 44037))
   (call
     (push.const . syntax)
     (push.const . |core.records'protocol|)
     (call
       (push.gloc.of |.L369|)
       (apply.gloc.of |.transformer-thunk| "../stdlib/core/records.scm" . 44037))
     (push)
     (push.iloc.0 . 0)
     (apply.gloc.of |.set-top-level-macro!| "../stdlib/core/records.scm" . 44037))
   (call
     (push.const . syntax)
     (push.const . |core.records'sealed|)
     (call
       (push.gloc.of |.L370|)
       (apply.gloc.of |.transformer-thunk| "../stdlib/core/records.scm" . 44037))
     (push)
     (push.iloc.0 . 0)
     (apply.gloc.of |.set-top-level-macro!| "../stdlib/core/records.scm" . 44037))
   (call
     (push.const . syntax)
     (push.const . |core.records'opaque|)
     (call
       (push.gloc.of |.L361|)
       (apply.gloc.of |.transformer-thunk| "../stdlib/core/records.scm" . 44037))
     (push)
     (push.iloc.0 . 0)
     (apply.gloc.of |.set-top-level-macro!| "../stdlib/core/records.scm" . 44037))
   (call
     (push.const . syntax)
     (push.const . |core.records'nongenerative|)
     (call
       (push.gloc.of |.L344|)
       (apply.gloc.of |.transformer-thunk| "../stdlib/core/records.scm" . 44037))
     (push)
     (push.iloc.0 . 0)
     (apply.gloc.of |.set-top-level-macro!| "../stdlib/core/records.scm" . 44037))
   (push.const . syntax)
   (push.const . |core.records'parent-rtd|)
   (call
     (push.gloc.of |.L330|)
     (apply.gloc.of |.transformer-thunk| "../stdlib/core/records.scm" . 44037))
   (push)
   (push.iloc.0 . 0)
   (apply.gloc.of |.set-top-level-macro!| "../stdlib/core/records.scm" . 44037))
 (push.const . core.records)
 (push.const . #f)
 (push.const
   (make-record-type-descriptor import . |.make-record-type-descriptor|)
   (record-type-descriptor? import . |.record-type-descriptor?|)
   (make-record-constructor-descriptor import . |.make-record-constructor-descriptor|)
   (record-constructor import . |.record-constructor|)
   (record-predicate import . |.record-predicate|)
   (record-accessor import . |.record-accessor|)
   (record-mutator import . |.record-mutator|)
   (record? import . |.record?|)
   (record-rtd import . |.record-rtd|)
   (record-type-name import . |.record-type-name|)
   (record-type-parent import . |.record-type-parent|)
   (record-type-uid import . |.record-type-uid|)
   (record-type-generative? import . |.record-type-generative?|)
   (record-type-sealed? import . |.record-type-sealed?|)
   (record-type-opaque? import . |.record-type-opaque?|)
   (record-type-field-names import . |.record-type-field-names|)
   (record-field-mutable? import . |.record-field-mutable?|)
   (record-type-descriptor import . |core.records'record-type-descriptor|)
   (record-constructor-descriptor import . |core.records'record-constructor-descriptor|)
   (define-record-type import . |core.records'define-record-type|)
   (fields import . |core.records'fields|)
   (mutable import . |core.records'mutable|)
   (immutable import . |core.records'immutable|)
   (parent import . |core.records'parent|)
   (protocol import . |core.records'protocol|)
   (sealed import . |core.records'sealed|)
   (opaque import . |core.records'opaque|)
   (nongenerative import . |core.records'nongenerative|)
   (parent-rtd import . |core.records'parent-rtd|))
 (apply.gloc.of |.intern-scheme-library| "../stdlib/core/records.scm" . 122892))

((close
   (1 0)
   (push.iloc.0 . 0)
   (call
     (call
       (push.iloc.0 . 0)
       (push.const cond-fields ...)
       (push.const (cond-fields . 1))
       (apply.gloc.of |.syntax/c1n| "../stdlib/core/conditions.scm" . 35850))
     (push)
     (apply.gloc.of |.generate-temporaries| "../stdlib/core/conditions.scm" . 35850))
   (push)
   (push.subr.gloc.of |.list| 1 "../stdlib/core/conditions.scm" . 35850)
   (push.const)
   (push.const (rec-accessors ...))
   (push.const . #f)
   (push.gloc.of |.L425|)
   (push.subr.gloc.of |.list| 3 "../stdlib/core/conditions.scm" . 35850)
   (push.const . _)
   (push.const . #f)
   (push.gloc.of |.L426|)
   (push.subr.gloc.of |.list| 3 "../stdlib/core/conditions.scm" . 35850)
   (apply.gloc.of |.syntax-dispatch| "../stdlib/core/conditions.scm" . 35850))
 (set.gloc.of |.L427|)
 (close
   (1 0)
   (push.iloc.0 . 0)
   (push.const
     begin
     (define-record-type
       (condition-type constructor temp)
       (parent supertype)
       (nongenerative)
       (fields (immutable cond-fields rec-accessors) ...))
     (define predicate (condition-predicate (record-type-descriptor condition-type)))
     (define cond-accessors
       (condition-accessor (record-type-descriptor condition-type) rec-accessors))
     ...)
   (push.const
     (cond-accessors . 1)
     (predicate . 0)
     (rec-accessors . 1)
     (cond-fields . 1)
     (supertype . 0)
     (constructor . 0)
     (condition-type . 0))
   (apply.gloc.of |.syntax/c1n| "../stdlib/core/conditions.scm" . 35850))
 (set.gloc.of |.L425|)
 (close
   (1 0)
   (push.const . with-syntax)
   (push.const . "value does not match to pattern")
   (push.const ((rec-accessors ...) (generate-temporaries (syntax (cond-fields ...)))))
   (apply.gloc.of |.syntax-violation| "../stdlib/core/conditions.scm" . 35850))
 (set.gloc.of |.L426|)
 (close
   (1 0)
   (push.gloc.of |.vars|)
   (push.iloc.0 . 0)
   (push.const)
   (push.const _ condition-type supertype constructor predicate (cond-fields cond-accessors) ...)
   (push.const . #f)
   (push.gloc.of |.L427|)
   (push.subr.gloc.of |.list| 3 "../stdlib/core/conditions.scm" . 31751)
   (apply.gloc.of |.syntax-dispatch| "../stdlib/core/conditions.scm" . 31751))
 (set.gloc.of |.L424|)
 (call
   (push.const core records)
   (apply.gloc.of |.require-scheme-library| "../stdlib/core/conditions.scm" . 35850))
 (call
   (push.const core syntax-case)
   (apply.gloc.of |.require-scheme-library| "../stdlib/core/conditions.scm" . 35850))
 (call
   (push.const core primitives)
   (apply.gloc.of |.require-scheme-library| "../stdlib/core/conditions.scm" . 35850))
 (call
   (push.const . syntax)
   (push.const . |core.conditions'define-condition-type|)
   (call
     (push.gloc.of |.L424|)
     (apply.gloc.of |.transformer-thunk| "../stdlib/core/conditions.scm" . 30725))
   (push)
   (push.const
     (temp unbound)
     (immutable import . |core.records'immutable|)
     (_ import . |._|)
     (... import . |....|)
     (begin import . |.begin|)
     (predicate unbound)
     (with-syntax import . |core.syntax-case'with-syntax|)
     (define-condition-type import . |core.conditions'define-condition-type|)
     (constructor unbound)
     (condition-predicate import . |.condition-predicate|)
     (let import . |.let|)
     (rec-accessors unbound)
     (nongenerative import . |core.records'nongenerative|)
     (parent import . |core.records'parent|)
     (condition-type unbound)
     (cond-fields unbound)
     (define import . |.define|)
     (condition-accessor import . |.condition-accessor|)
     (fields import . |core.records'fields|)
     (define-record-type import . |core.records'define-record-type|)
     (generate-temporaries import . |.generate-temporaries|)
     (record-type-descriptor import . |core.records'record-type-descriptor|)
     (syntax import . |.syntax|)
     (quote import . |.quote|)
     (cond-accessors unbound)
     (lambda import . |.lambda|)
     (supertype unbound))
   (apply.gloc.of |.set-top-level-macro!| "../stdlib/core/conditions.scm" . 30725))
 (push.const . core.conditions)
 (push.const . #f)
 (push.const
   (define-condition-type import . |core.conditions'define-condition-type|)
   (condition import . |.condition|)
   (simple-conditions import . |.simple-conditions|)
   (condition? import . |.condition?|)
   (condition-predicate import . |.condition-predicate|)
   (condition-accessor import . |.condition-accessor|)
   (&condition import . |.&condition|)
   (&message import . |.&message|)
   (make-message-condition import . |.make-message-condition|)
   (message-condition? import . |.message-condition?|)
   (condition-message import . |.condition-message|)
   (&warning import . |.&warning|)
   (make-warning import . |.make-warning|)
   (warning? import . |.warning?|)
   (&serious import . |.&serious|)
   (make-serious-condition import . |.make-serious-condition|)
   (serious-condition? import . |.serious-condition?|)
   (&error import . |.&error|)
   (make-error import . |.make-error|)
   (error? import . |.error?|)
   (&violation import . |.&violation|)
   (make-violation import . |.make-violation|)
   (violation? import . |.violation?|)
   (&assertion import . |.&assertion|)
   (make-assertion-violation import . |.make-assertion-violation|)
   (assertion-violation? import . |.assertion-violation?|)
   (&irritants import . |.&irritants|)
   (make-irritants-condition import . |.make-irritants-condition|)
   (irritants-condition? import . |.irritants-condition?|)
   (condition-irritants import . |.condition-irritants|)
   (&who import . |.&who|)
   (make-who-condition import . |.make-who-condition|)
   (who-condition? import . |.who-condition?|)
   (condition-who import . |.condition-who|)
   (&non-continuable import . |.&non-continuable|)
   (make-non-continuable-violation import . |.make-non-continuable-violation|)
   (non-continuable-violation? import . |.non-continuable-violation?|)
   (&implementation-restriction import . |.&implementation-restriction|)
   (make-implementation-restriction-violation import . |.make-implementation-restriction-violation|)
   (implementation-restriction-violation? import . |.implementation-restriction-violation?|)
   (&lexical import . |.&lexical|)
   (make-lexical-violation import . |.make-lexical-violation|)
   (lexical-violation? import . |.lexical-violation?|)
   (&syntax import . |.&syntax|)
   (make-syntax-violation import . |.make-syntax-violation|)
   (syntax-violation? import . |.syntax-violation?|)
   (syntax-violation-form import . |.syntax-violation-form|)
   (syntax-violation-subform import . |.syntax-violation-subform|)
   (&undefined import . |.&undefined|)
   (make-undefined-violation import . |.make-undefined-violation|)
   (undefined-violation? import . |.undefined-violation?|))
 (apply.gloc.of |.intern-scheme-library| "../stdlib/core/conditions.scm" . 35850))

((close
   (1 0)
   (ret.close
     (1 0)
     (push.iloc.1 . 0)
     (push.const . 1)
     (push.subr.gloc.of |.tuple-ref| 2 "../stdlib/core/enums.scm" . 37955)
     (push.const . 1)
     (push.subr.gloc.of |.tuple-ref| 2 "../stdlib/core/enums.scm" . 37935)
     (push.iloc.0 . 0)
     (push.const . #f)
     (ret.subr.gloc.of |.core-hashtable-ref| "../stdlib/core/enums.scm" . 37915)))
 (set.gloc.of |.L442|)
 (close
   (1 0)
   (ret.close
     (1 0)
     (call
       (push.iloc.0 . 0)
       (apply.gloc.of |core.lists'remove-duplicate-symbols| "../stdlib/core/enums.scm" . 40998))
     (push)
     (push.iloc.1 . 0)
     (push.const . 1)
     (push.subr.gloc.of |.tuple-ref| 2 "../stdlib/core/enums.scm" . 42047)
     (push.const . 1)
     (push.subr.gloc.of |.tuple-ref| 2 "../stdlib/core/enums.scm" . 42027)
     (extend . 2)
     (call
       (push.close
         (1 0)
         (push.iloc.0 . 0)
         (subr.gloc.of |.symbol?| 1 "../stdlib/core/enums.scm" . 44077)
         (if.false.call
           (push.const . "enum-set constructor")
           (push.const . "expected list of symbols, but got ~r as argument 1")
           (push.iloc 2 . 0)
           (push.subr.gloc.of |.format| 2 "../stdlib/core/enums.scm" . 45145)
           (apply.gloc.of |.assertion-violation| "../stdlib/core/enums.scm" . 45101))
         (push.iloc.1 . 1)
         (push.iloc.0 . 0)
         (push.const . #f)
         (subr.gloc.of |.core-hashtable-ref| 3 "../stdlib/core/enums.scm" . 46125)
         (if.true.ret)
         (push.const . "enum-set constructor")
         (push.const . "excpectd symbols which belong to the universe, but got ~r as argument 1")
         (push.iloc 2 . 0)
         (push.subr.gloc.of |.format| 2 "../stdlib/core/enums.scm" . 47193)
         (apply.gloc.of |.assertion-violation| "../stdlib/core/enums.scm" . 47149))
       (push.iloc.0 . 0)
       (apply.gloc.of |.for-each| "../stdlib/core/enums.scm" . 43037))
     (push.const . type:enum-set)
     (push.iloc 2 . 0)
     (push.const . 1)
     (push.subr.gloc.of |.tuple-ref| 2 "../stdlib/core/enums.scm" . 49196)
     (push.iloc.0 . 0)
     (ret.subr.gloc.of |.tuple| "../stdlib/core/enums.scm" . 49181)))
 (set.gloc.of |.L437|)
 (close
   (2 0)
   (push.cdr.iloc (0 . 0) "../stdlib/core/enums.scm" . 90154)
   (push.cdr.iloc (0 . 1) "../stdlib/core/enums.scm" . 90162)
   (ret.subr.gloc.of |.<| "../stdlib/core/enums.scm" . 90151))
 (set.gloc.of |.L440|)
 (call
   (push.const core sorting)
   (apply.gloc.of |.require-scheme-library| "../stdlib/core/enums.scm" . 35863))
 (call
   (push.const core lists)
   (apply.gloc.of |.require-scheme-library| "../stdlib/core/enums.scm" . 35863))
 (call
   (push.const core struct)
   (apply.gloc.of |.require-scheme-library| "../stdlib/core/enums.scm" . 35863))
 (call
   (push.const core primitives)
   (apply.gloc.of |.require-scheme-library| "../stdlib/core/enums.scm" . 35863))
 (close
   (2 0 . |core.enums'construct-enum-type|)
   (push.const . type:enum-type)
   (push.iloc.0 . 0)
   (push.iloc.0 . 1)
   (push.gloc.of |.L442|)
   (push.gloc.of |.L437|)
   (ret.subr.gloc.of |.tuple| "../stdlib/core/enums.scm" . 33799))
 (set.gloc.of |core.enums'construct-enum-type|)
 (close
   (1 0 . |core.enums'make-enumeration|)
   (call
     (push.iloc.0 . 0)
     (apply.gloc.of |core.lists'remove-duplicate-symbols| "../stdlib/core/enums.scm" . 53274))
   (push)
   (extend . 1)
   (subr.gloc.of |.make-core-hashtable| 0)
   (push)
   (push.const . 0)
   (extend . 2)
   (call
     (push.close
       (1 0)
       (push.iloc.0 . 0)
       (subr.gloc.of |.symbol?| 1 "../stdlib/core/enums.scm" . 56347)
       (if.false.call
         (push.const . make-enumeration)
         (push.const . "expected list of symbols, but got ~r as argument 1")
         (push.iloc 2 . 0)
         (push.subr.gloc.of |.format| 2 "../stdlib/core/enums.scm" . 57410)
         (apply.gloc.of |.assertion-violation| "../stdlib/core/enums.scm" . 57371))
       (push.iloc.1 . 0)
       (push.iloc.0 . 0)
       (push.iloc.1 . 1)
       (subr.gloc.of |.core-hashtable-set!| 3 "../stdlib/core/enums.scm" . 58391)
       (n+.iloc (1 . 1) 1 "../stdlib/core/enums.scm" . 59427)
       (set.iloc (1 . 1) "../stdlib/core/enums.scm" . 59415)
       (ret.const.unspec))
     (push.iloc.1 . 0)
     (apply.gloc.of |.for-each| "../stdlib/core/enums.scm" . 55307))
   (push.const . type:enum-set)
   (call
     (push.iloc.0 . 0)
     (push.iloc.1 . 0)
     (apply.gloc.of |core.enums'construct-enum-type| "../stdlib/core/enums.scm" . 61463))
   (push)
   (push.iloc.1 . 0)
   (ret.subr.gloc.of |.tuple| "../stdlib/core/enums.scm" . 62477))
 (set.gloc.of |core.enums'make-enumeration|)
 (close
   (1 0 . |core.enums'enum-set-universe|)
   (push.iloc.0 . 0)
   (push.const . 0)
   (push.subr.gloc.of |.tuple-ref| 2 (|.tuple-ref| |set`1185*| 0))
   (push.const . type:enum-set)
   (subr.gloc.of |.eq?| 2 "../stdlib/core/enums.scm" . 66571)
   (if.false.call
     (push.const . enum-set-universe)
     (push.const . "expected enum-set, but got ~r as argument 1")
     (push.iloc.0 . 0)
     (push.subr.gloc.of |.format| 2 "../stdlib/core/enums.scm" . 67635)
     (apply.gloc.of |.assertion-violation| "../stdlib/core/enums.scm" . 67595))
   (push.const . type:enum-set)
   (push.iloc.0 . 0)
   (push.const . 1)
   (push.subr.gloc.of |.tuple-ref| 2 "../stdlib/core/enums.scm" . 68630)
   (push.iloc.0 . 0)
   (push.const . 1)
   (push.subr.gloc.of |.tuple-ref| 2 "../stdlib/core/enums.scm" . 69673)
   (push.const . 2)
   (push.subr.gloc.of |.tuple-ref| 2 "../stdlib/core/enums.scm" . 69654)
   (ret.subr.gloc.of |.tuple| "../stdlib/core/enums.scm" . 68615))
 (set.gloc.of |core.enums'enum-set-universe|)
 (close
   (1 0 . |core.enums'enum-set-indexer|)
   (push.iloc.0 . 0)
   (push.const . 0)
   (push.subr.gloc.of |.tuple-ref| 2 (|.tuple-ref| |set`1192*| 0))
   (push.const . type:enum-set)
   (subr.gloc.of |.eq?| 2 "../stdlib/core/enums.scm" . 73739)
   (if.false.call
     (push.const . enum-set-indexer)
     (push.const . "expected enum-set, but got ~r as argument 1")
     (push.iloc.0 . 0)
     (push.subr.gloc.of |.format| 2 "../stdlib/core/enums.scm" . 74802)
     (apply.gloc.of |.assertion-violation| "../stdlib/core/enums.scm" . 74763))
   (push.iloc.0 . 0)
   (push.iloc.0 . 0)
   (push.const . 1)
   (push.subr.gloc.of |.tuple-ref| 2 "../stdlib/core/enums.scm" . 75803)
   (push.const . 3)
   (subr.gloc.of |.tuple-ref| 2 "../stdlib/core/enums.scm" . 75784)
   (apply))
 (set.gloc.of |core.enums'enum-set-indexer|)
 (close
   (1 0 . |core.enums'enum-set-constructor|)
   (push.iloc.0 . 0)
   (push.const . 0)
   (push.subr.gloc.of |.tuple-ref| 2 (|.tuple-ref| |set`1197*| 0))
   (push.const . type:enum-set)
   (subr.gloc.of |.eq?| 2 "../stdlib/core/enums.scm" . 79883)
   (if.false.call
     (push.const . enum-set-constructor)
     (push.const . "expected enum-set, but got ~r as argument 1")
     (push.iloc.0 . 0)
     (push.subr.gloc.of |.format| 2 "../stdlib/core/enums.scm" . 80950)
     (apply.gloc.of |.assertion-violation| "../stdlib/core/enums.scm" . 80907))
   (push.iloc.0 . 0)
   (push.iloc.0 . 0)
   (push.const . 1)
   (push.subr.gloc.of |.tuple-ref| 2 "../stdlib/core/enums.scm" . 81951)
   (push.const . 4)
   (subr.gloc.of |.tuple-ref| 2 "../stdlib/core/enums.scm" . 81928)
   (apply))
 (set.gloc.of |core.enums'enum-set-constructor|)
 (close
   (1 0 . |core.enums'enum-set->list|)
   (push.iloc.0 . 0)
   (push.const . 0)
   (push.subr.gloc.of |.tuple-ref| 2 (|.tuple-ref| |set`1202*| 0))
   (push.const . type:enum-set)
   (subr.gloc.of |.eq?| 2 "../stdlib/core/enums.scm" . 86027)
   (if.false.call
     (push.const . enum-set->list)
     (push.const . "expected enum-set, but got ~r as argument 1")
     (push.iloc.0 . 0)
     (push.subr.gloc.of |.format| 2 "../stdlib/core/enums.scm" . 87088)
     (apply.gloc.of |.assertion-violation| "../stdlib/core/enums.scm" . 87051))
   (push.iloc.0 . 0)
   (push.const . 1)
   (push.subr.gloc.of |.tuple-ref| 2 "../stdlib/core/enums.scm" . 88107)
   (push.const . 1)
   (push.subr.gloc.of |.tuple-ref| 2 "../stdlib/core/enums.scm" . 88087)
   (extend . 1)
   (push.gloc.of |.car|)
   (call
     (push.gloc.of |.L440|)
     (call
       (push.close
         (1 0)
         (push.iloc.0 . 0)
         (push.iloc.1 . 0)
         (push.iloc.0 . 0)
         (push.const . #f)
         (subr.gloc.of |.core-hashtable-ref| 3 "../stdlib/core/enums.scm" . 91186)
         (ret.cons "../stdlib/core/enums.scm" . 91178))
       (push.iloc.1 . 0)
       (push.const . 2)
       (push.subr.gloc.of |.tuple-ref| 2 "../stdlib/core/enums.scm" . 92190)
       (apply.gloc.of |.map| "../stdlib/core/enums.scm" . 91161))
     (push)
     (apply.gloc.of |core.sorting'list-sort| "../stdlib/core/enums.scm" . 90126))
   (push)
   (apply.gloc.of |.map| "../stdlib/core/enums.scm" . 89097))
 (set.gloc.of |core.enums'enum-set->list|)
 (close
   (2 0 . |core.enums'enum-set-member?|)
   (push.iloc.0 . 0)
   (subr.gloc.of |.symbol?| 1 "../stdlib/core/enums.scm" . 96267)
   (if.false.call
     (push.const . enum-set-member?)
     (push.const . "expected enum-set, but got ~r as argument 1")
     (push.iloc.0 . 0)
     (push.subr.gloc.of |.format| 2 "../stdlib/core/enums.scm" . 97330)
     (push.iloc.0 . 0)
     (push.iloc.0 . 1)
     (push.subr.gloc.of |.list| 2 "../stdlib/core/enums.scm" . 97392)
     (apply.gloc.of |.assertion-violation| "../stdlib/core/enums.scm" . 97291))
   (push.iloc.0 . 1)
   (push.const . 0)
   (push.subr.gloc.of |.tuple-ref| 2 (|.tuple-ref| |set`1214*| 0))
   (push.const . type:enum-set)
   (subr.gloc.of |.eq?| 2 "../stdlib/core/enums.scm" . 98315)
   (if.false.call
     (push.const . enum-set-member?)
     (push.const . "expected enum-set, but got ~r as argument 2")
     (push.iloc.0 . 1)
     (push.subr.gloc.of |.format| 2 "../stdlib/core/enums.scm" . 99378)
     (push.iloc.0 . 0)
     (push.iloc.0 . 1)
     (push.subr.gloc.of |.list| 2 "../stdlib/core/enums.scm" . 99437)
     (apply.gloc.of |.assertion-violation| "../stdlib/core/enums.scm" . 99339))
   (push.iloc.0 . 0)
   (push.iloc.0 . 1)
   (push.const . 2)
   (push.subr.gloc.of |.tuple-ref| 2 "../stdlib/core/enums.scm" . 100377)
   (subr.gloc.of |.memq| 2 "../stdlib/core/enums.scm" . 100364)
   (if.false.ret)
   (ret.const . #t))
 (set.gloc.of |core.enums'enum-set-member?|)
 (close
   (2 0 . |core.enums'enum-set-subset?|)
   (push.iloc.0 . 0)
   (push.const . 0)
   (push.subr.gloc.of |.tuple-ref| 2 (|.tuple-ref| |set1`1218*| 0))
   (push.const . type:enum-set)
   (subr.gloc.of |.eq?| 2 "../stdlib/core/enums.scm" . 104459)
   (if.false.call
     (push.const . enum-set-subset?)
     (push.const . "expected enum-set, but got ~r as argument 1")
     (push.iloc.0 . 0)
     (push.subr.gloc.of |.format| 2 "../stdlib/core/enums.scm" . 105522)
     (push.iloc.0 . 0)
     (push.iloc.0 . 1)
     (push.subr.gloc.of |.list| 2 "../stdlib/core/enums.scm" . 105582)
     (apply.gloc.of |.assertion-violation| "../stdlib/core/enums.scm" . 105483))
   (push.iloc.0 . 1)
   (push.const . 0)
   (push.subr.gloc.of |.tuple-ref| 2 (|.tuple-ref| |set2`1218*| 0))
   (push.const . type:enum-set)
   (subr.gloc.of |.eq?| 2 "../stdlib/core/enums.scm" . 106507)
   (if.false.call
     (push.const . enum-set-subset?)
     (push.const . "expected enum-set, but got ~r as argument 2")
     (push.iloc.0 . 1)
     (push.subr.gloc.of |.format| 2 "../stdlib/core/enums.scm" . 107570)
     (push.iloc.0 . 0)
     (push.iloc.0 . 1)
     (push.subr.gloc.of |.list| 2 "../stdlib/core/enums.scm" . 107630)
     (apply.gloc.of |.assertion-violation| "../stdlib/core/enums.scm" . 107531))
   (call
     (push.close
       (1 0)
       (push.iloc.0 . 0)
       (push.iloc.1 . 1)
       (apply.gloc.of |core.enums'enum-set-member?| "../stdlib/core/enums.scm" . 108577))
     (push.iloc.0 . 0)
     (push.const . 2)
     (push.subr.gloc.of |.tuple-ref| 2 "../stdlib/core/enums.scm" . 108604)
     (apply.gloc.of |core.lists'for-all| "../stdlib/core/enums.scm" . 108556))
   (if.false.ret)
   (call
     (push.iloc.0 . 1)
     (push.const . 1)
     (push.subr.gloc.of |.tuple-ref| 2 "../stdlib/core/enums.scm" . 109609)
     (push.const . 2)
     (push.subr.gloc.of |.tuple-ref| 2 "../stdlib/core/enums.scm" . 109590)
     (extend . 1)
     (push.close
       (1 0)
       (push.iloc.0 . 0)
       (push.iloc.1 . 0)
       (ret.subr.gloc.of |.memq| "../stdlib/core/enums.scm" . 110627))
     (push.iloc.1 . 0)
     (push.const . 1)
     (push.subr.gloc.of |.tuple-ref| 2 "../stdlib/core/enums.scm" . 110659)
     (push.const . 2)
     (push.subr.gloc.of |.tuple-ref| 2 "../stdlib/core/enums.scm" . 110640)
     (apply.gloc.of |core.lists'for-all| "../stdlib/core/enums.scm" . 110606))
   (if.false.ret)
   (ret.const . #t))
 (set.gloc.of |core.enums'enum-set-subset?|)
 (close
   (2 0 . |core.enums'enum-set=?|)
   (push.iloc.0 . 0)
   (push.const . 0)
   (push.subr.gloc.of |.tuple-ref| 2 (|.tuple-ref| |set1`1233*| 0))
   (push.const . type:enum-set)
   (subr.gloc.of |.eq?| 2 "../stdlib/core/enums.scm" . 115723)
   (if.false.call
     (push.const . enum-set=?)
     (push.const . "expected enum-set, but got ~r as argument 1")
     (push.iloc.0 . 0)
     (push.subr.gloc.of |.format| 2 "../stdlib/core/enums.scm" . 116780)
     (push.iloc.0 . 0)
     (push.iloc.0 . 1)
     (push.subr.gloc.of |.list| 2 "../stdlib/core/enums.scm" . 116840)
     (apply.gloc.of |.assertion-violation| "../stdlib/core/enums.scm" . 116747))
   (push.iloc.0 . 1)
   (push.const . 0)
   (push.subr.gloc.of |.tuple-ref| 2 (|.tuple-ref| |set2`1233*| 0))
   (push.const . type:enum-set)
   (subr.gloc.of |.eq?| 2 "../stdlib/core/enums.scm" . 117771)
   (if.false.call
     (push.const . enum-set=?)
     (push.const . "expected enum-set, but got ~r as argument 2")
     (push.iloc.0 . 1)
     (push.subr.gloc.of |.format| 2 "../stdlib/core/enums.scm" . 118828)
     (push.iloc.0 . 0)
     (push.iloc.0 . 1)
     (push.subr.gloc.of |.list| 2 "../stdlib/core/enums.scm" . 118888)
     (apply.gloc.of |.assertion-violation| "../stdlib/core/enums.scm" . 118795))
   (call
     (push.iloc.0 . 1)
     (push.iloc.0 . 0)
     (apply.gloc.of |core.enums'enum-set-subset?| "../stdlib/core/enums.scm" . 119820))
   (if.false.ret)
   (call
     (push.iloc.0 . 0)
     (push.iloc.0 . 1)
     (apply.gloc.of |core.enums'enum-set-subset?| "../stdlib/core/enums.scm" . 120844))
   (if.false.ret)
   (ret.const . #t))
 (set.gloc.of |core.enums'enum-set=?|)
 (close
   (2 0 . |core.enums'enum-set-union|)
   (push.iloc.0 . 0)
   (push.const . 0)
   (push.subr.gloc.of |.tuple-ref| 2 (|.tuple-ref| |set1`1237*| 0))
   (push.const . type:enum-set)
   (subr.gloc.of |.eq?| 2 "../stdlib/core/enums.scm" . 125963)
   (if.false.call
     (push.const . enum-set-union)
     (push.const . "expected enum-set, but got ~r as argument 1")
     (push.iloc.0 . 0)
     (push.subr.gloc.of |.format| 2 "../stdlib/core/enums.scm" . 127024)
     (push.iloc.0 . 0)
     (push.iloc.0 . 1)
     (push.subr.gloc.of |.list| 2 "../stdlib/core/enums.scm" . 127084)
     (apply.gloc.of |.assertion-violation| "../stdlib/core/enums.scm" . 126987))
   (push.iloc.0 . 1)
   (push.const . 0)
   (push.subr.gloc.of |.tuple-ref| 2 (|.tuple-ref| |set2`1237*| 0))
   (push.const . type:enum-set)
   (subr.gloc.of |.eq?| 2 "../stdlib/core/enums.scm" . 128011)
   (if.false.call
     (push.const . enum-set-union)
     (push.const . "expected enum-set, but got ~r as argument 2")
     (push.iloc.0 . 1)
     (push.subr.gloc.of |.format| 2 "../stdlib/core/enums.scm" . 129072)
     (push.iloc.0 . 0)
     (push.iloc.0 . 1)
     (push.subr.gloc.of |.list| 2 "../stdlib/core/enums.scm" . 129132)
     (apply.gloc.of |.assertion-violation| "../stdlib/core/enums.scm" . 129035))
   (push.iloc.0 . 0)
   (push.const . 1)
   (push.subr.gloc.of |.tuple-ref| 2 "../stdlib/core/enums.scm" . 130064)
   (push.iloc.0 . 1)
   (push.const . 1)
   (push.subr.gloc.of |.tuple-ref| 2 "../stdlib/core/enums.scm" . 130085)
   (subr.gloc.of |.eq?| 2 "../stdlib/core/enums.scm" . 130059)
   (if.false.call
     (push.const . enum-set-union)
     (push.const . "expected same type enum-sets")
     (push.iloc.0 . 0)
     (push.iloc.0 . 1)
     (apply.gloc.of |.assertion-violation| "../stdlib/core/enums.scm" . 131083))
   (push.const . type:enum-set)
   (push.iloc.0 . 0)
   (push.const . 1)
   (push.subr.gloc.of |.tuple-ref| 2 "../stdlib/core/enums.scm" . 132118)
   (call
     (push.iloc.0 . 0)
     (push.const . 2)
     (push.subr.gloc.of |.tuple-ref| 2 "../stdlib/core/enums.scm" . 133176)
     (push.iloc.0 . 1)
     (push.const . 2)
     (push.subr.gloc.of |.tuple-ref| 2 "../stdlib/core/enums.scm" . 133200)
     (push.subr.gloc.of |.append| 2 "../stdlib/core/enums.scm" . 133168)
     (apply.gloc.of |core.lists'remove-duplicate-symbols| "../stdlib/core/enums.scm" . 133142))
   (push)
   (ret.subr.gloc.of |.tuple| "../stdlib/core/enums.scm" . 132103))
 (set.gloc.of |core.enums'enum-set-union|)
 (close
   (2 0 . |core.enums'enum-set-intersection|)
   (push.iloc.0 . 0)
   (push.const . 0)
   (push.subr.gloc.of |.tuple-ref| 2 (|.tuple-ref| |set1`1247*| 0))
   (push.const . type:enum-set)
   (subr.gloc.of |.eq?| 2 "../stdlib/core/enums.scm" . 137227)
   (if.false.call
     (push.const . enum-set-intersection)
     (push.const . "expected enum-set, but got ~r as argument 1")
     (push.iloc.0 . 0)
     (push.subr.gloc.of |.format| 2 "../stdlib/core/enums.scm" . 138295)
     (push.iloc.0 . 0)
     (push.iloc.0 . 1)
     (push.subr.gloc.of |.list| 2 "../stdlib/core/enums.scm" . 138355)
     (apply.gloc.of |.assertion-violation| "../stdlib/core/enums.scm" . 138251))
   (push.iloc.0 . 1)
   (push.const . 0)
   (push.subr.gloc.of |.tuple-ref| 2 (|.tuple-ref| |set2`1247*| 0))
   (push.const . type:enum-set)
   (subr.gloc.of |.eq?| 2 "../stdlib/core/enums.scm" . 139275)
   (if.false.call
     (push.const . enum-set-intersection)
     (push.const . "expected enum-set, but got ~r as argument 2")
     (push.iloc.0 . 1)
     (push.subr.gloc.of |.format| 2 "../stdlib/core/enums.scm" . 140343)
     (push.iloc.0 . 0)
     (push.iloc.0 . 1)
     (push.subr.gloc.of |.list| 2 "../stdlib/core/enums.scm" . 140403)
     (apply.gloc.of |.assertion-violation| "../stdlib/core/enums.scm" . 140299))
   (push.iloc.0 . 0)
   (push.const . 1)
   (push.subr.gloc.of |.tuple-ref| 2 "../stdlib/core/enums.scm" . 141328)
   (push.iloc.0 . 1)
   (push.const . 1)
   (push.subr.gloc.of |.tuple-ref| 2 "../stdlib/core/enums.scm" . 141349)
   (subr.gloc.of |.eq?| 2 "../stdlib/core/enums.scm" . 141323)
   (if.false.call
     (push.const . enum-set-intersection)
     (push.const . "expected same type enum-sets")
     (push.iloc.0 . 0)
     (push.iloc.0 . 1)
     (apply.gloc.of |.assertion-violation| "../stdlib/core/enums.scm" . 142347))
   (push.iloc.0 . 1)
   (push.const . 2)
   (push.subr.gloc.of |.tuple-ref| 2 "../stdlib/core/enums.scm" . 143387)
   (extend . 1)
   (push.const . type:enum-set)
   (push.iloc.1 . 0)
   (push.const . 1)
   (push.subr.gloc.of |.tuple-ref| 2 "../stdlib/core/enums.scm" . 144408)
   (call
     (push.gloc.of |.values|)
     (call
       (push.close
         (1 0)
         (push.iloc.0 . 0)
         (push.iloc.1 . 0)
         (subr.gloc.of |.memq| 2 "../stdlib/core/enums.scm" . 145469)
         (if.false.ret)
         (ret.iloc 0 . 0))
       (push.iloc.1 . 0)
       (push.const . 2)
       (push.subr.gloc.of |.tuple-ref| 2 "../stdlib/core/enums.scm" . 146476)
       (apply.gloc.of |.map| "../stdlib/core/enums.scm" . 145447))
     (push)
     (apply.gloc.of |core.lists'filter| "../stdlib/core/enums.scm" . 145432))
   (push)
   (ret.subr.gloc.of |.tuple| "../stdlib/core/enums.scm" . 144393))
 (set.gloc.of |core.enums'enum-set-intersection|)
 (close
   (2 0 . |core.enums'enum-set-difference|)
   (push.iloc.0 . 0)
   (push.const . 0)
   (push.subr.gloc.of |.tuple-ref| 2 (|.tuple-ref| |set1`1261*| 0))
   (push.const . type:enum-set)
   (subr.gloc.of |.eq?| 2 "../stdlib/core/enums.scm" . 150539)
   (if.false.call
     (push.const . enum-set-difference)
     (push.const . "expected enum-set, but got ~r as argument 1")
     (push.iloc.0 . 0)
     (push.subr.gloc.of |.format| 2 "../stdlib/core/enums.scm" . 151605)
     (push.iloc.0 . 0)
     (push.iloc.0 . 1)
     (push.subr.gloc.of |.list| 2 "../stdlib/core/enums.scm" . 151665)
     (apply.gloc.of |.assertion-violation| "../stdlib/core/enums.scm" . 151563))
   (push.iloc.0 . 1)
   (push.const . 0)
   (push.subr.gloc.of |.tuple-ref| 2 (|.tuple-ref| |set2`1261*| 0))
   (push.const . type:enum-set)
   (subr.gloc.of |.eq?| 2 "../stdlib/core/enums.scm" . 152587)
   (if.false.call
     (push.const . enum-set-difference)
     (push.const . "expected enum-set, but got ~r as argument 2")
     (push.iloc.0 . 1)
     (push.subr.gloc.of |.format| 2 "../stdlib/core/enums.scm" . 153653)
     (push.iloc.0 . 0)
     (push.iloc.0 . 1)
     (push.subr.gloc.of |.list| 2 "../stdlib/core/enums.scm" . 153713)
     (apply.gloc.of |.assertion-violation| "../stdlib/core/enums.scm" . 153611))
   (push.iloc.0 . 0)
   (push.const . 1)
   (push.subr.gloc.of |.tuple-ref| 2 "../stdlib/core/enums.scm" . 154640)
   (push.iloc.0 . 1)
   (push.const . 1)
   (push.subr.gloc.of |.tuple-ref| 2 "../stdlib/core/enums.scm" . 154661)
   (subr.gloc.of |.eq?| 2 "../stdlib/core/enums.scm" . 154635)
   (if.false.call
     (push.const . enum-set-difference)
     (push.const . "expected same type enum-sets")
     (push.iloc.0 . 0)
     (push.iloc.0 . 1)
     (apply.gloc.of |.assertion-violation| "../stdlib/core/enums.scm" . 155659))
   (push.iloc.0 . 1)
   (push.const . 2)
   (push.subr.gloc.of |.tuple-ref| 2 "../stdlib/core/enums.scm" . 156699)
   (extend . 1)
   (push.const . type:enum-set)
   (push.iloc.1 . 0)
   (push.const . 1)
   (push.subr.gloc.of |.tuple-ref| 2 "../stdlib/core/enums.scm" . 157720)
   (call
     (push.gloc.of |.values|)
     (call
       (push.close
         (1 0)
         (push.iloc.0 . 0)
         (push.iloc.1 . 0)
         (subr.gloc.of |.memq| 2 "../stdlib/core/enums.scm" . 158786)
         (if.true.ret.const . #f)
         (ret.iloc 0 . 0))
       (push.iloc.1 . 0)
       (push.const . 2)
       (push.subr.gloc.of |.tuple-ref| 2 "../stdlib/core/enums.scm" . 159788)
       (apply.gloc.of |.map| "../stdlib/core/enums.scm" . 158759))
     (push)
     (apply.gloc.of |core.lists'filter| "../stdlib/core/enums.scm" . 158744))
   (push)
   (ret.subr.gloc.of |.tuple| "../stdlib/core/enums.scm" . 157705))
 (set.gloc.of |core.enums'enum-set-difference|)
 (close
   (1 0 . |core.enums'enum-set-complement|)
   (push.iloc.0 . 0)
   (push.const . 0)
   (push.subr.gloc.of |.tuple-ref| 2 (|.tuple-ref| |set`1275*| 0))
   (push.const . type:enum-set)
   (subr.gloc.of |.eq?| 2 "../stdlib/core/enums.scm" . 163851)
   (if.false.call
     (push.const . enum-set-complement)
     (push.const . "expected enum-set, but got ~r as argument 1")
     (push.iloc.0 . 0)
     (push.subr.gloc.of |.format| 2 "../stdlib/core/enums.scm" . 164917)
     (apply.gloc.of |.assertion-violation| "../stdlib/core/enums.scm" . 164875))
   (push.iloc.0 . 0)
   (push.const . 2)
   (push.subr.gloc.of |.tuple-ref| 2 "../stdlib/core/enums.scm" . 165914)
   (extend . 1)
   (push.const . type:enum-set)
   (push.iloc.1 . 0)
   (push.const . 1)
   (push.subr.gloc.of |.tuple-ref| 2 "../stdlib/core/enums.scm" . 166936)
   (call
     (push.gloc.of |.values|)
     (call
       (push.close
         (1 0)
         (push.iloc.0 . 0)
         (push.iloc.1 . 0)
         (subr.gloc.of |.memq| 2 "../stdlib/core/enums.scm" . 168002)
         (if.true.ret.const . #f)
         (ret.iloc 0 . 0))
       (push.iloc.1 . 0)
       (push.const . 1)
       (push.subr.gloc.of |.tuple-ref| 2 "../stdlib/core/enums.scm" . 169023)
       (push.const . 2)
       (push.subr.gloc.of |.tuple-ref| 2 "../stdlib/core/enums.scm" . 169004)
       (apply.gloc.of |.map| "../stdlib/core/enums.scm" . 167975))
     (push)
     (apply.gloc.of |core.lists'filter| "../stdlib/core/enums.scm" . 167960))
   (push)
   (ret.subr.gloc.of |.tuple| "../stdlib/core/enums.scm" . 166921))
 (set.gloc.of |core.enums'enum-set-complement|)
 (close
   (2 0 . |core.enums'enum-set-projection|)
   (push.iloc.0 . 0)
   (push.const . 0)
   (push.subr.gloc.of |.tuple-ref| 2 (|.tuple-ref| |set1`1287*| 0))
   (push.const . type:enum-set)
   (subr.gloc.of |.eq?| 2 "../stdlib/core/enums.scm" . 173067)
   (if.false.call
     (push.const . enum-set-projection)
     (push.const . "expected enum-set, but got ~r as argument 1")
     (push.iloc.0 . 0)
     (push.subr.gloc.of |.format| 2 "../stdlib/core/enums.scm" . 174133)
     (push.iloc.0 . 0)
     (push.iloc.0 . 1)
     (push.subr.gloc.of |.list| 2 "../stdlib/core/enums.scm" . 174193)
     (apply.gloc.of |.assertion-violation| "../stdlib/core/enums.scm" . 174091))
   (push.iloc.0 . 1)
   (push.const . 0)
   (push.subr.gloc.of |.tuple-ref| 2 (|.tuple-ref| |set2`1287*| 0))
   (push.const . type:enum-set)
   (subr.gloc.of |.eq?| 2 "../stdlib/core/enums.scm" . 175115)
   (if.false.call
     (push.const . enum-set-projection)
     (push.const . "expected enum-set, but got ~r as argument 2")
     (push.iloc.0 . 1)
     (push.subr.gloc.of |.format| 2 "../stdlib/core/enums.scm" . 176181)
     (push.iloc.0 . 0)
     (push.iloc.0 . 1)
     (push.subr.gloc.of |.list| 2 "../stdlib/core/enums.scm" . 176241)
     (apply.gloc.of |.assertion-violation| "../stdlib/core/enums.scm" . 176139))
   (push.iloc.0 . 1)
   (push.const . 1)
   (push.subr.gloc.of |.tuple-ref| 2 "../stdlib/core/enums.scm" . 177207)
   (push.const . 2)
   (push.subr.gloc.of |.tuple-ref| 2 "../stdlib/core/enums.scm" . 177188)
   (extend . 1)
   (push.const . type:enum-set)
   (push.iloc.1 . 1)
   (push.const . 1)
   (push.subr.gloc.of |.tuple-ref| 2 "../stdlib/core/enums.scm" . 178200)
   (call
     (push.gloc.of |.values|)
     (call
       (push.close
         (1 0)
         (push.iloc.0 . 0)
         (push.iloc.1 . 0)
         (subr.gloc.of |.memq| 2 "../stdlib/core/enums.scm" . 179261)
         (if.false.ret)
         (ret.iloc 0 . 0))
       (push.iloc.1 . 0)
       (push.const . 2)
       (push.subr.gloc.of |.tuple-ref| 2 "../stdlib/core/enums.scm" . 180268)
       (apply.gloc.of |.map| "../stdlib/core/enums.scm" . 179239))
     (push)
     (apply.gloc.of |core.lists'filter| "../stdlib/core/enums.scm" . 179224))
   (push)
   (ret.subr.gloc.of |.tuple| "../stdlib/core/enums.scm" . 178185))
 (set.gloc.of |core.enums'enum-set-projection|)
 (call
   (push.const
     (enum-type? import . |core.enums'enum-type?|)
     (|type:enum-set`1152| import . type:enum-set)
     (_ import . |._|)
     (|unspecified`1152| import . |.unspecified|)
     (define import . |.define|)
     (enum-type-members-set! import . |core.enums'enum-type-members-set!|)
     (syntax->datum import . |.syntax->datum|)
     (begin import . |.begin|)
     (|eq?`1151| import . |.eq?|)
     (syntax-case import . |.syntax-case|)
     (|members`1151| import . members)
     (e unbound)
     (constructor-syntax unbound)
     (enum-type-indexer import . |core.enums'enum-type-indexer|)
     (... import . |....|)
     (|tuple`1152| import . |.tuple|)
     (quote import . |.quote|)
     (|eq?`1152| import . |.eq?|)
     (|unspecified`1151| import . |.unspecified|)
     (enum-set-type-set! import . |core.enums'enum-set-type-set!|)
     (define-enumeration import . |core.enums'define-enumeration|)
     (|type:enum-type`1151| import . type:enum-type)
     (make-enumeration import . |core.enums'make-enumeration|)
     (|members`1152| import . members)
     (symbol1 unbound)
     (make-enum-set import . |core.enums'make-enum-set|)
     (|tuple-ref`1152| import . |.tuple-ref|)
     (enum-type-constructor import . |core.enums'enum-type-constructor|)
     (|constructor`1151| import . constructor)
     (|tuple`1151| import . |.tuple|)
     (enum-set-constructor import . |core.enums'enum-set-constructor|)
     (|tuple-set!`1152| import . |.tuple-set!|)
     (enum-set-members import . |core.enums'enum-set-members|)
     (lambda import . |.lambda|)
     (|universe`1151| import . universe)
     (symbol2 unbound)
     (enum-type-universe-set! import . |core.enums'enum-type-universe-set!|)
     (|type`1152| import . type)
     (symbol3 unbound)
     (syntax import . |.syntax|)
     (enum-type-constructor-set! import . |core.enums'enum-type-constructor-set!|)
     (define-syntax import . |.define-syntax|)
     (enum-set-members-set! import . |core.enums'enum-set-members-set!|)
     (enum-set? import . |core.enums'enum-set?|)
     (enum-type-members import . |core.enums'enum-type-members|)
     (enum-type-universe import . |core.enums'enum-type-universe|)
     (type-name unbound)
     (|tuple-ref`1151| import . |.tuple-ref|)
     (syntax-violation import . |.syntax-violation|)
     (constructor unbound)
     (|indexer`1151| import . indexer)
     (enum-set-type import . |core.enums'enum-set-type|)
     (x unbound)
     (for-all import . |core.lists'for-all|)
     (memq import . |.memq|)
     (make-enum-type import . |core.enums'make-enum-type|)
     (or import . |.or|)
     (|tuple-set!`1151| import . |.tuple-set!|)
     (enum-type-indexer-set! import . |core.enums'enum-type-indexer-set!|))
   (extend . 1)
   (call
     (push.const . syntax)
     (push.const . |core.enums'make-enum-type|)
     (push.const
       ...
       ()
       ("../stdlib/core/enums.scm" . 28675)
       ((_ |universe`1151| |members`1151| |indexer`1151| |constructor`1151|)
        (|tuple`1151|
          (|.quote| |type:enum-type`1151|)
          |universe`1151|
          |members`1151|
          |indexer`1151|
          |constructor`1151|)
        ((|constructor`1151| . 0) (|indexer`1151| . 0) (|members`1151| . 0) (|universe`1151| . 0))
        (|type:enum-type`1151| |.quote| |tuple`1151|))
       ((_)
        (|tuple`1151|
          (|.quote| |type:enum-type`1151|)
          (|unspecified`1151|)
          (|unspecified`1151|)
          (|unspecified`1151|)
          (|unspecified`1151|))
        ()
        (|unspecified`1151| |type:enum-type`1151| |.quote| |tuple`1151|)))
     (push.iloc.0 . 0)
     (apply.gloc.of |.set-top-level-macro!| "../stdlib/core/enums.scm" . 35863))
   (call
     (push.const . syntax)
     (push.const . |core.enums'enum-type?|)
     (push.const
       ...
       ()
       ("../stdlib/core/enums.scm" . 28675)
       ((_ |obj`1151|)
        (|eq?`1151| (|tuple-ref`1151| |obj`1151| 0) (|.quote| |type:enum-type`1151|))
        ((|obj`1151| . 0))
        (|type:enum-type`1151| |.quote| |tuple-ref`1151| |eq?`1151|)))
     (push.iloc.0 . 0)
     (apply.gloc.of |.set-top-level-macro!| "../stdlib/core/enums.scm" . 35863))
   (call
     (push.const . syntax)
     (push.const . |core.enums'enum-type-universe|)
     (push.const
       ...
       ()
       ("../stdlib/core/enums.scm" . 28675)
       ((_ |obj`1151|) (|tuple-ref`1151| |obj`1151| 1) ((|obj`1151| . 0)) (|tuple-ref`1151|)))
     (push.iloc.0 . 0)
     (apply.gloc.of |.set-top-level-macro!| "../stdlib/core/enums.scm" . 35863))
   (call
     (push.const . syntax)
     (push.const . |core.enums'enum-type-members|)
     (push.const
       ...
       ()
       ("../stdlib/core/enums.scm" . 28675)
       ((_ |obj`1151|) (|tuple-ref`1151| |obj`1151| 2) ((|obj`1151| . 0)) (|tuple-ref`1151|)))
     (push.iloc.0 . 0)
     (apply.gloc.of |.set-top-level-macro!| "../stdlib/core/enums.scm" . 35863))
   (call
     (push.const . syntax)
     (push.const . |core.enums'enum-type-indexer|)
     (push.const
       ...
       ()
       ("../stdlib/core/enums.scm" . 28675)
       ((_ |obj`1151|) (|tuple-ref`1151| |obj`1151| 3) ((|obj`1151| . 0)) (|tuple-ref`1151|)))
     (push.iloc.0 . 0)
     (apply.gloc.of |.set-top-level-macro!| "../stdlib/core/enums.scm" . 35863))
   (call
     (push.const . syntax)
     (push.const . |core.enums'enum-type-constructor|)
     (push.const
       ...
       ()
       ("../stdlib/core/enums.scm" . 28675)
       ((_ |obj`1151|) (|tuple-ref`1151| |obj`1151| 4) ((|obj`1151| . 0)) (|tuple-ref`1151|)))
     (push.iloc.0 . 0)
     (apply.gloc.of |.set-top-level-macro!| "../stdlib/core/enums.scm" . 35863))
   (call
     (push.const . syntax)
     (push.const . |core.enums'enum-type-universe-set!|)
     (push.const
       ...
       ()
       ("../stdlib/core/enums.scm" . 28675)
       ((_ |obj`1151| |value`1151|)
        (|tuple-set!`1151| |obj`1151| 1 |value`1151|)
        ((|value`1151| . 0) (|obj`1151| . 0))
        (|tuple-set!`1151|)))
     (push.iloc.0 . 0)
     (apply.gloc.of |.set-top-level-macro!| "../stdlib/core/enums.scm" . 35863))
   (call
     (push.const . syntax)
     (push.const . |core.enums'enum-type-members-set!|)
     (push.const
       ...
       ()
       ("../stdlib/core/enums.scm" . 28675)
       ((_ |obj`1151| |value`1151|)
        (|tuple-set!`1151| |obj`1151| 2 |value`1151|)
        ((|value`1151| . 0) (|obj`1151| . 0))
        (|tuple-set!`1151|)))
     (push.iloc.0 . 0)
     (apply.gloc.of |.set-top-level-macro!| "../stdlib/core/enums.scm" . 35863))
   (call
     (push.const . syntax)
     (push.const . |core.enums'enum-type-indexer-set!|)
     (push.const
       ...
       ()
       ("../stdlib/core/enums.scm" . 28675)
       ((_ |obj`1151| |value`1151|)
        (|tuple-set!`1151| |obj`1151| 3 |value`1151|)
        ((|value`1151| . 0) (|obj`1151| . 0))
        (|tuple-set!`1151|)))
     (push.iloc.0 . 0)
     (apply.gloc.of |.set-top-level-macro!| "../stdlib/core/enums.scm" . 35863))
   (call
     (push.const . syntax)
     (push.const . |core.enums'enum-type-constructor-set!|)
     (push.const
       ...
       ()
       ("../stdlib/core/enums.scm" . 28675)
       ((_ |obj`1151| |value`1151|)
        (|tuple-set!`1151| |obj`1151| 4 |value`1151|)
        ((|value`1151| . 0) (|obj`1151| . 0))
        (|tuple-set!`1151|)))
     (push.iloc.0 . 0)
     (apply.gloc.of |.set-top-level-macro!| "../stdlib/core/enums.scm" . 35863))
   (call
     (push.const . syntax)
     (push.const . |core.enums'make-enum-set|)
     (push.const
       ...
       ()
       ("../stdlib/core/enums.scm" . 29699)
       ((_ |type`1152| |members`1152|)
        (|tuple`1152| (|.quote| |type:enum-set`1152|) |type`1152| |members`1152|)
        ((|members`1152| . 0) (|type`1152| . 0))
        (|type:enum-set`1152| |.quote| |tuple`1152|))
       ((_)
        (|tuple`1152| (|.quote| |type:enum-set`1152|) (|unspecified`1152|) (|unspecified`1152|))
        ()
        (|unspecified`1152| |type:enum-set`1152| |.quote| |tuple`1152|)))
     (push.iloc.0 . 0)
     (apply.gloc.of |.set-top-level-macro!| "../stdlib/core/enums.scm" . 35863))
   (call
     (push.const . syntax)
     (push.const . |core.enums'enum-set?|)
     (push.const
       ...
       ()
       ("../stdlib/core/enums.scm" . 29699)
       ((_ |obj`1152|)
        (|eq?`1152| (|tuple-ref`1152| |obj`1152| 0) (|.quote| |type:enum-set`1152|))
        ((|obj`1152| . 0))
        (|type:enum-set`1152| |.quote| |tuple-ref`1152| |eq?`1152|)))
     (push.iloc.0 . 0)
     (apply.gloc.of |.set-top-level-macro!| "../stdlib/core/enums.scm" . 35863))
   (call
     (push.const . syntax)
     (push.const . |core.enums'enum-set-type|)
     (push.const
       ...
       ()
       ("../stdlib/core/enums.scm" . 29699)
       ((_ |obj`1152|) (|tuple-ref`1152| |obj`1152| 1) ((|obj`1152| . 0)) (|tuple-ref`1152|)))
     (push.iloc.0 . 0)
     (apply.gloc.of |.set-top-level-macro!| "../stdlib/core/enums.scm" . 35863))
   (call
     (push.const . syntax)
     (push.const . |core.enums'enum-set-members|)
     (push.const
       ...
       ()
       ("../stdlib/core/enums.scm" . 29699)
       ((_ |obj`1152|) (|tuple-ref`1152| |obj`1152| 2) ((|obj`1152| . 0)) (|tuple-ref`1152|)))
     (push.iloc.0 . 0)
     (apply.gloc.of |.set-top-level-macro!| "../stdlib/core/enums.scm" . 35863))
   (call
     (push.const . syntax)
     (push.const . |core.enums'enum-set-type-set!|)
     (push.const
       ...
       ()
       ("../stdlib/core/enums.scm" . 29699)
       ((_ |obj`1152| |value`1152|)
        (|tuple-set!`1152| |obj`1152| 1 |value`1152|)
        ((|value`1152| . 0) (|obj`1152| . 0))
        (|tuple-set!`1152|)))
     (push.iloc.0 . 0)
     (apply.gloc.of |.set-top-level-macro!| "../stdlib/core/enums.scm" . 35863))
   (call
     (push.const . syntax)
     (push.const . |core.enums'enum-set-members-set!|)
     (push.const
       ...
       ()
       ("../stdlib/core/enums.scm" . 29699)
       ((_ |obj`1152| |value`1152|)
        (|tuple-set!`1152| |obj`1152| 2 |value`1152|)
        ((|value`1152| . 0) (|obj`1152| . 0))
        (|tuple-set!`1152|)))
     (push.iloc.0 . 0)
     (apply.gloc.of |.set-top-level-macro!| "../stdlib/core/enums.scm" . 35863))
   (push.const . syntax)
   (push.const . |core.enums'define-enumeration|)
   (push.const
     ...
     ()
     ("../stdlib/core/enums.scm" . 183301)
     ((_ type-name (symbol1 ...) constructor-syntax)
      (begin
        (define constructor (enum-set-constructor (make-enumeration '(symbol1 ...))))
        (define-syntax type-name
          (lambda (x)
            (syntax-case x
              ()
              ((_ symbol2)
               (or (memq (syntax->datum (syntax symbol2)) '(symbol1 ...))
                   (syntax-violation 'type-name "excpectd symbols which belong to the universe" x))
               (syntax 'symbol2)))))
        (define-syntax constructor-syntax
          (lambda (x)
            (syntax-case x
              ()
              ((_ symbol3 (... ...))
               (or (for-all (lambda (e) (memq e '(symbol1 ...)))
                            (syntax->datum (syntax (symbol3 (... ...)))))
                   (syntax-violation
                     'constructor-syntax
                     "excpectd symbols which belong to the universe"
                     x))
               (syntax (constructor '(symbol3 (... ...)))))))))
      ((constructor-syntax . 0) (symbol1 . 1) (type-name . 0))
      (e
        for-all
        symbol3
        syntax-violation
        syntax
        syntax->datum
        memq
        or
        symbol2
        _
        syntax-case
        x
        lambda
        define-syntax
        quote
        make-enumeration
        enum-set-constructor
        constructor
        define
        begin)))
   (push.iloc.0 . 0)
   (apply.gloc.of |.set-top-level-macro!| "../stdlib/core/enums.scm" . 35863))
 (push.const . core.enums)
 (push.const . #f)
 (push.const
   (make-enumeration import . |core.enums'make-enumeration|)
   (enum-set? import . |core.enums'enum-set?|)
   (enum-set-universe import . |core.enums'enum-set-universe|)
   (enum-set-indexer import . |core.enums'enum-set-indexer|)
   (enum-set-constructor import . |core.enums'enum-set-constructor|)
   (enum-set->list import . |core.enums'enum-set->list|)
   (enum-set-member? import . |core.enums'enum-set-member?|)
   (enum-set-subset? import . |core.enums'enum-set-subset?|)
   (enum-set=? import . |core.enums'enum-set=?|)
   (enum-set-union import . |core.enums'enum-set-union|)
   (enum-set-intersection import . |core.enums'enum-set-intersection|)
   (enum-set-difference import . |core.enums'enum-set-difference|)
   (enum-set-complement import . |core.enums'enum-set-complement|)
   (enum-set-projection import . |core.enums'enum-set-projection|)
   (define-enumeration import . |core.enums'define-enumeration|))
 (apply.gloc.of |.intern-scheme-library| "../stdlib/core/enums.scm" . 35863))

((close
   (1 0)
   (push.gloc.of |.vars|)
   (push.iloc.0 . 0)
   (push.const)
   (push.const _ type)
   (push.const . #f)
   (push.close
     (1 0)
     (call
       (push.iloc.0 . 0)
       (push.const . k)
       (apply.gloc.of |.syntax/i0n| "../stdlib/core/io.scm" . 57354))
     (push)
     (call
       (call
         (call
           (push.iloc.0 . 0)
           (push.const . type)
           (apply.gloc.of |.syntax/i1n| "../stdlib/core/io.scm" . 59431))
         (push)
         (apply.gloc.of |.syntax->datum| "../stdlib/core/io.scm" . 59416))
       (push)
       (push.gloc.of |core.io.assistants'type-codes|)
       (push.subr.gloc.of |.assq| 2 "../stdlib/core/io.scm" . 59410)
       (extend . 1)
       (iloc.0 . 0)
       (if.true (push.iloc.0 . 0) (ret.subr.gloc.of |.cdr| "../stdlib/core/io.scm" . 61458))
       (push.const . port-type)
       (push.const . "invalid port type")
       (push.iloc 2 . 0)
       (apply.gloc.of |.syntax-violation| "../stdlib/core/io.scm" . 61458))
     (push)
     (apply.gloc.of
       |.datum->syntax|
       (|.datum->syntax|
         (|.syntax/i0n| |.vars`1302*| 'k)
         (let ((|.L467`1304*|
                 (|.assq|
                   (|.syntax->datum| (|.syntax/i1n| |.vars`1302*| 'type))
                   |core.io.assistants'type-codes|)))
           (if |.L467`1304*|
               (|.cdr| |.L467`1304*|)
               (|.syntax-violation| 'port-type "invalid port type" |x`1300*|))))))
   (push.subr.gloc.of
     |.list|
     3
     (|.list|
       '(_ type)
       #f
       (lambda (|.vars`1302*|)
         (|.datum->syntax|
           (|.syntax/i0n| |.vars`1302*| 'k)
           (let ((|.L467`1304*|
                   (|.assq|
                     (|.syntax->datum| (|.syntax/i1n| |.vars`1302*| 'type))
                     |core.io.assistants'type-codes|)))
             (if |.L467`1304*|
                 (|.cdr| |.L467`1304*|)
                 (|.syntax-violation| 'port-type "invalid port type" |x`1300*|)))))))
   (push.const . _)
   (push.const . #f)
   (push.close
     (1 0)
     (push.const . port-type)
     (push.const . "invalid port type")
     (push.iloc.1 . 0)
     (apply.gloc.of |.syntax-violation| "../stdlib/core/io.scm" . 63498))
   (push.subr.gloc.of |.list| 3 "../stdlib/core/io.scm" . 55303)
   (apply.gloc.of
     |.syntax-dispatch|
     (|.syntax-dispatch|
       |.vars|
       |x`1300*|
       '()
       (|.list|
         '(_ type)
         #f
         (lambda (|.vars`1302*|)
           (|.datum->syntax|
             (|.syntax/i0n| |.vars`1302*| 'k)
             (let ((|.L467`1304*|
                     (|.assq|
                       (|.syntax->datum| (|.syntax/i1n| |.vars`1302*| 'type))
                       |core.io.assistants'type-codes|)))
               (if |.L467`1304*|
                   (|.cdr| |.L467`1304*|)
                   (|.syntax-violation| 'port-type "invalid port type" |x`1300*|))))))
       (|.list|
         '_
         #f
         (lambda (|.vars`1306*|) (|.syntax-violation| 'port-type "invalid port type" |x`1300*|))))))
 (set.gloc.of |.L473|)
 (close
   (1 0)
   (push.cdr.iloc (0 . 0) "../stdlib/core/io.scm" . 43061)
   (car.iloc (0 . 0) "../stdlib/core/io.scm" . 43069)
   (ret.cons "../stdlib/core/io.scm" . 43055))
 (set.gloc.of |.L485|)
 (close
   (1 0)
   (call
     (push.iloc.0 . 0)
     (push.const . k)
     (apply.gloc.of |.syntax/i0n| "../stdlib/core/io.scm" . 71690))
   (push)
   (call
     (push.const . output)
     (push.gloc.of |core.io.assistants'direction-codes|)
     (apply.gloc.of |core.io.assistants'lookup| "../stdlib/core/io.scm" . 71709))
   (push)
   (apply.gloc.of |.datum->syntax| "../stdlib/core/io.scm" . 71690))
 (set.gloc.of |.L477|)
 (close
   (1 0)
   (push.gloc.of |.vars|)
   (push.iloc.0 . 0)
   (push.const input output)
   (push.const _ input)
   (push.const . #f)
   (push.gloc.of |.L475|)
   (push.subr.gloc.of |.list| 3 "../stdlib/core/io.scm" . 67591)
   (push.const _ output)
   (push.const . #f)
   (push.gloc.of |.L477|)
   (push.subr.gloc.of |.list| 3 "../stdlib/core/io.scm" . 67591)
   (push.const _ input output)
   (push.const . #f)
   (push.gloc.of |.L476|)
   (push.subr.gloc.of |.list| 3 "../stdlib/core/io.scm" . 67591)
   (push.const . _)
   (push.const . #f)
   (push.close
     (1 0)
     (push.const . port-direction)
     (push.const . "invalid port direction")
     (push.iloc.1 . 0)
     (apply.gloc.of |.syntax-violation| "../stdlib/core/io.scm" . 75786))
   (push.subr.gloc.of |.list| 3 "../stdlib/core/io.scm" . 67591)
   (apply.gloc.of |.syntax-dispatch| "../stdlib/core/io.scm" . 67591))
 (set.gloc.of |.L482|)
 (close
   (1 0)
   (call
     (push.iloc.0 . 0)
     (push.const . k)
     (apply.gloc.of |.syntax/i0n| "../stdlib/core/io.scm" . 69642))
   (push)
   (call
     (push.const . input)
     (push.gloc.of |core.io.assistants'direction-codes|)
     (apply.gloc.of |core.io.assistants'lookup| "../stdlib/core/io.scm" . 69661))
   (push)
   (apply.gloc.of |.datum->syntax| "../stdlib/core/io.scm" . 69642))
 (set.gloc.of |.L475|)
 (close
   (1 0)
   (call
     (push.iloc.0 . 0)
     (push.const . k)
     (apply.gloc.of |.syntax/i0n| "../stdlib/core/io.scm" . 73738))
   (push)
   (call
     (push.const . input/output)
     (push.gloc.of |core.io.assistants'direction-codes|)
     (apply.gloc.of |core.io.assistants'lookup| "../stdlib/core/io.scm" . 73757))
   (push)
   (apply.gloc.of |.datum->syntax| "../stdlib/core/io.scm" . 73738))
 (set.gloc.of |.L476|)
 (call
   (push.const core enums)
   (apply.gloc.of |.require-scheme-library| "../stdlib/core/io.scm" . 54277))
 (call
   (push.const core primitives)
   (apply.gloc.of |.require-scheme-library| "../stdlib/core/io.scm" . 54277))
 (const (input . 1) (output . 2) (input/output . 3))
 (set.gloc.of |core.io.assistants'direction-codes|)
 (const (file . 1) (bytevector . 2) (custom . 3))
 (set.gloc.of |core.io.assistants'type-codes|)
 (const (no-create . 1) (no-fail . 2) (no-truncate . 4))
 (set.gloc.of |core.io.assistants'file-option-codes|)
 (const (none . 1) (line . 2) (block . 3))
 (set.gloc.of |core.io.assistants'buffer-mode-codes|)
 (const (latin-1 . 1) (utf-8 . 2) (utf-16 . 3))
 (set.gloc.of |core.io.assistants'codec-codes|)
 (const (none . 1) (lf . 2) (cr . 3) (crlf . 4) (nel . 5) (crnel . 6) (ls . 7))
 (set.gloc.of |core.io.assistants'eol-style-codes|)
 (const (ignore . 1) (raise . 2) (replace . 3))
 (set.gloc.of |core.io.assistants'error-handling-mode-codes|)
 (close
   (1 0 . |core.io.assistants'flip|)
   (push.gloc.of |.L485|)
   (push.iloc.0 . 0)
   (apply.gloc.of |.map| "../stdlib/core/io.scm" . 43038))
 (set.gloc.of |core.io.assistants'flip|)
 (call
   (push.gloc.of |core.io.assistants'codec-codes|)
   (apply.gloc.of |core.io.assistants'flip| "../stdlib/core/io.scm" . 45087))
 (set.gloc.of |core.io.assistants'flipped-codec-codes|)
 (call
   (push.gloc.of |core.io.assistants'eol-style-codes|)
   (apply.gloc.of |core.io.assistants'flip| "../stdlib/core/io.scm" . 47139))
 (set.gloc.of |core.io.assistants'flipped-eol-style-codes|)
 (call
   (push.gloc.of |core.io.assistants'error-handling-mode-codes|)
   (apply.gloc.of |core.io.assistants'flip| "../stdlib/core/io.scm" . 49197))
 (set.gloc.of |core.io.assistants'flipped-error-handling-mode-codes|)
 (close
   (2 0 . |core.io.assistants'lookup|)
   (push.iloc.0 . 0)
   (push.iloc.0 . 1)
   (push.subr.gloc.of |.assq| 2 "../stdlib/core/io.scm" . 51245)
   (extend . 1)
   (iloc.0 . 0)
   (if.false.ret)
   (push.iloc.0 . 0)
   (ret.subr.gloc.of |.cdr| (|.cdr| |.L468`1324*|)))
 (set.gloc.of |core.io.assistants'lookup|)
 (close
   (1 0 . |core.io.assistants'port-lookup-file-option-code|)
   (push.iloc.0 . 0)
   (push.gloc.of |core.io.assistants'file-option-codes|)
   (apply.gloc.of |core.io.assistants'lookup| "../stdlib/core/io.scm" . 77878))
 (set.gloc.of |core.io.assistants'port-lookup-file-option-code|)
 (close
   (1 0 . |core.io.assistants'port-lookup-buffer-mode-code|)
   (push.iloc.0 . 0)
   (push.gloc.of |core.io.assistants'buffer-mode-codes|)
   (apply.gloc.of |core.io.assistants'lookup| "../stdlib/core/io.scm" . 78902))
 (set.gloc.of |core.io.assistants'port-lookup-buffer-mode-code|)
 (close
   (1 0 . |core.io.assistants'port-lookup-codec-code|)
   (push.iloc.0 . 0)
   (push.gloc.of |core.io.assistants'codec-codes|)
   (apply.gloc.of |core.io.assistants'lookup| "../stdlib/core/io.scm" . 79920))
 (set.gloc.of |core.io.assistants'port-lookup-codec-code|)
 (close
   (1 0 . |core.io.assistants'port-lookup-eol-style-code|)
   (push.iloc.0 . 0)
   (push.gloc.of |core.io.assistants'eol-style-codes|)
   (apply.gloc.of |core.io.assistants'lookup| "../stdlib/core/io.scm" . 80948))
 (set.gloc.of |core.io.assistants'port-lookup-eol-style-code|)
 (close
   (1 0 . |core.io.assistants'port-lookup-error-handling-mode-code|)
   (push.iloc.0 . 0)
   (push.gloc.of |core.io.assistants'error-handling-mode-codes|)
   (apply.gloc.of |core.io.assistants'lookup| "../stdlib/core/io.scm" . 81982))
 (set.gloc.of |core.io.assistants'port-lookup-error-handling-mode-code|)
 (close
   (1 0 . |core.io.assistants'port-reverse-lookup-codec-code|)
   (push.iloc.0 . 0)
   (push.gloc.of |core.io.assistants'flipped-codec-codes|)
   (apply.gloc.of |core.io.assistants'lookup| "../stdlib/core/io.scm" . 83000))
 (set.gloc.of |core.io.assistants'port-reverse-lookup-codec-code|)
 (close
   (1 0 . |core.io.assistants'port-reverse-lookup-eol-style-code|)
   (push.iloc.0 . 0)
   (push.gloc.of |core.io.assistants'flipped-eol-style-codes|)
   (apply.gloc.of |core.io.assistants'lookup| "../stdlib/core/io.scm" . 84028))
 (set.gloc.of |core.io.assistants'port-reverse-lookup-eol-style-code|)
 (close
   (1 0 . |core.io.assistants'port-reverse-lookup-error-handling-mode-code|)
   (push.iloc.0 . 0)
   (push.gloc.of |core.io.assistants'flipped-error-handling-mode-codes|)
   (apply.gloc.of |core.io.assistants'lookup| "../stdlib/core/io.scm" . 85062))
 (set.gloc.of |core.io.assistants'port-reverse-lookup-error-handling-mode-code|)
 (call
   (call
     (call
       (push.gloc.of |.car|)
       (push.gloc.of |core.io.assistants'file-option-codes|)
       (apply.gloc.of |.map| "../stdlib/core/io.scm" . 87109))
     (push)
     (apply.gloc.of |core.enums'make-enumeration| "../stdlib/core/io.scm" . 87091))
   (push)
   (apply.gloc.of |core.enums'enum-set-constructor| "../stdlib/core/io.scm" . 87069))
 (set.gloc.of |core.io.assistants'make-file-options|)
 (call
   (push.const
     (begin import . |.begin|)
     (port-direction import . |core.io.assistants'port-direction|)
     (|core.io.assistants'type-codes| unbound)
     (input unbound)
     (port-type import . |core.io.assistants'port-type|)
     (let import . |.let|)
     (|core.io.assistants'direction-codes| unbound)
     (_ import . |._|)
     (|core.io.assistants'lookup| unbound)
     (output unbound)
     (lambda import . |.lambda|)
     (input/output unbound)
     (k unbound)
     (type unbound)
     (quote import . |.quote|)
     (if import . |.if|))
   (extend . 1)
   (call
     (push.const . syntax)
     (push.const . |core.io.assistants'port-type|)
     (call
       (push.gloc.of |.L473|)
       (apply.gloc.of |.transformer-thunk| "../stdlib/core/io.scm" . 54277))
     (push)
     (push.iloc.0 . 0)
     (apply.gloc.of |.set-top-level-macro!| "../stdlib/core/io.scm" . 54277))
   (push.const . syntax)
   (push.const . |core.io.assistants'port-direction|)
   (call
     (push.gloc.of |.L482|)
     (apply.gloc.of |.transformer-thunk| "../stdlib/core/io.scm" . 54277))
   (push)
   (push.iloc.0 . 0)
   (apply.gloc.of |.set-top-level-macro!| "../stdlib/core/io.scm" . 54277))
 (push.const . core.io.assistants)
 (push.const . #f)
 (push.const
   (port-type import . |core.io.assistants'port-type|)
   (port-direction import . |core.io.assistants'port-direction|)
   (port-lookup-file-option-code import . |core.io.assistants'port-lookup-file-option-code|)
   (port-lookup-buffer-mode-code import . |core.io.assistants'port-lookup-buffer-mode-code|)
   (port-lookup-codec-code import . |core.io.assistants'port-lookup-codec-code|)
   (port-lookup-eol-style-code import . |core.io.assistants'port-lookup-eol-style-code|)
   (port-lookup-error-handling-mode-code
     import
     .
     |core.io.assistants'port-lookup-error-handling-mode-code|)
   (port-reverse-lookup-codec-code import . |core.io.assistants'port-reverse-lookup-codec-code|)
   (port-reverse-lookup-eol-style-code
     import
     .
     |core.io.assistants'port-reverse-lookup-eol-style-code|)
   (port-reverse-lookup-error-handling-mode-code
     import
     .
     |core.io.assistants'port-reverse-lookup-error-handling-mode-code|)
   (make-file-options import . |core.io.assistants'make-file-options|))
 (apply.gloc.of |.intern-scheme-library| "../stdlib/core/io.scm" . 54277))
((close
   (1 0)
   (push.iloc.0 . 0)
   (push.const quote mode)
   (push.const (mode . 0))
   (apply.gloc.of |.syntax/c1n| "../stdlib/core/io.scm" . 261130))
 (set.gloc.of |.L526|)
 (close
   (1 0)
   (push.gloc.of |.vars|)
   (push.iloc.0 . 0)
   (push.const)
   (push.const _ name n-args n-options args ... options)
   (push.const . #f)
   (push.gloc.of |.L508|)
   (push.subr.gloc.of |.list| 3 "../stdlib/core/io.scm" . 223239)
   (apply.gloc.of |.syntax-dispatch| "../stdlib/core/io.scm" . 223239))
 (set.gloc.of |.L543|)
 (close
   (1 0)
   (push.iloc.0 . 0)
   (push.const quote style)
   (push.const (style . 0))
   (apply.gloc.of |.syntax/c1n| "../stdlib/core/io.scm" . 285706))
 (set.gloc.of |.L547|)
 (close
   (1 0)
   (push.iloc.0 . 0)
   (apply.gloc.of
     |core.io.assistants'port-lookup-file-option-code|
     "../stdlib/core/io.scm"
     .
     403530))
 (set.gloc.of |.L533|)
 (close
   (1 0)
   (push.iloc.0 . 0)
   (apply.gloc.of
     |core.io.assistants'port-lookup-file-option-code|
     "../stdlib/core/io.scm"
     .
     596049))
 (set.gloc.of |.L534|)
 (close
   (1 0)
   (push.iloc.0 . 0)
   (apply.gloc.of
     |core.io.assistants'port-lookup-file-option-code|
     "../stdlib/core/io.scm"
     .
     489547))
 (set.gloc.of |.L552|)
 (close
   (1 0)
   (push.iloc.0 . 0)
   (push.const
     or
     (<= (length options) n-options)
     (assertion-violation
       'name
       (format
         "expected ~a to ~a, but ~a arguments given"
         n-args
         n-limit
         (+ n-args (length options)))
       (cons* args ... options)))
   (push.const (args . 1) (n-limit . 0) (n-args . 0) (name . 0) (n-options . 0) (options . 0))
   (apply.gloc.of |.syntax/c1n| "../stdlib/core/io.scm" . 225290))
 (set.gloc.of |.L564|)
 (close
   (1 0)
   (push.gloc.of |.vars|)
   (push.iloc.0 . 0)
   (push.const)
   (push.const _ mode)
   (push.close
     (1 0)
     (call
       (call
         (call
           (push.iloc.0 . 0)
           (push.const . mode)
           (apply.gloc.of |.syntax/i1n| "../stdlib/core/io.scm" . 293955))
         (push)
         (apply.gloc.of |.syntax->datum| "../stdlib/core/io.scm" . 293940))
       (push)
       (apply.gloc.of
         |core.io.assistants'port-lookup-error-handling-mode-code|
         "../stdlib/core/io.scm"
         .
         293902))
     (if.true.ret)
     (push.const . error-handling-mode)
     (push.const . "invalid directive")
     (push.iloc.1 . 0)
     (apply.gloc.of |.syntax-violation| "../stdlib/core/io.scm" . 294926))
   (push.gloc.of |.L540|)
   (push.subr.gloc.of |.list| 3 "../stdlib/core/io.scm" . 291847)
   (push.const . _)
   (push.const . #f)
   (push.close
     (1 0)
     (push.const . error-handling-mode)
     (push.const . "invalid directive")
     (push.iloc.1 . 0)
     (apply.gloc.of |.syntax-violation| "../stdlib/core/io.scm" . 297994))
   (push.subr.gloc.of |.list| 3 "../stdlib/core/io.scm" . 291847)
   (apply.gloc.of |.syntax-dispatch| "../stdlib/core/io.scm" . 291847))
 (set.gloc.of |.L532|)
 (close
   (1 0)
   (push.iloc.0 . 0)
   (call
     (call
       (push.iloc.0 . 0)
       (push.const . n-args)
       (apply.gloc.of |.syntax/i1n| "../stdlib/core/io.scm" . 225290))
     (push)
     (apply.gloc.of |.syntax->datum| "../stdlib/core/io.scm" . 225290))
   (push)
   (call
     (call
       (push.iloc.0 . 0)
       (push.const . n-options)
       (apply.gloc.of |.syntax/i1n| "../stdlib/core/io.scm" . 225290))
     (push)
     (apply.gloc.of |.syntax->datum| "../stdlib/core/io.scm" . 225290))
   (push)
   (push.subr.gloc.of |.+| 2 "../stdlib/core/io.scm" . 225290)
   (push.subr.gloc.of |.list| 1 "../stdlib/core/io.scm" . 225290)
   (push.const)
   (push.const n-limit)
   (push.const . #f)
   (push.gloc.of |.L564|)
   (push.subr.gloc.of |.list| 3 "../stdlib/core/io.scm" . 225290)
   (push.const . _)
   (push.const . #f)
   (push.gloc.of |.L545|)
   (push.subr.gloc.of |.list| 3 "../stdlib/core/io.scm" . 225290)
   (apply.gloc.of |.syntax-dispatch| "../stdlib/core/io.scm" . 225290))
 (set.gloc.of |.L508|)
 (close
   (1 0)
   (push.gloc.of |.vars|)
   (push.iloc.0 . 0)
   (push.const)
   (push.const _ mode)
   (push.close
     (1 0)
     (call
       (call
         (call
           (push.iloc.0 . 0)
           (push.const . mode)
           (apply.gloc.of |.syntax/i1n| "../stdlib/core/io.scm" . 259131))
         (push)
         (apply.gloc.of |.syntax->datum| "../stdlib/core/io.scm" . 259116))
       (push)
       (apply.gloc.of
         |core.io.assistants'port-lookup-buffer-mode-code|
         "../stdlib/core/io.scm"
         .
         259086))
     (if.true.ret)
     (push.const . buffer-mode)
     (push.const . "invalid buffer mode")
     (push.iloc.1 . 0)
     (apply.gloc.of |.syntax-violation| "../stdlib/core/io.scm" . 260110))
   (push.gloc.of |.L526|)
   (push.subr.gloc.of |.list| 3 "../stdlib/core/io.scm" . 257031)
   (push.const . _)
   (push.const . #f)
   (push.close
     (1 0)
     (push.const . buffer-mode)
     (push.const . "invalid buffer mode")
     (push.iloc.1 . 0)
     (apply.gloc.of |.syntax-violation| "../stdlib/core/io.scm" . 263178))
   (push.subr.gloc.of |.list| 3 "../stdlib/core/io.scm" . 257031)
   (apply.gloc.of |.syntax-dispatch| "../stdlib/core/io.scm" . 257031))
 (set.gloc.of |.L523|)
 (close
   (1 0)
   (push.const . with-syntax)
   (push.const . "value does not match to pattern")
   (push.const (n-limit (+ (datum n-args) (datum n-options))))
   (apply.gloc.of |.syntax-violation| "../stdlib/core/io.scm" . 225290))
 (set.gloc.of |.L545|)
 (close
   (1 0)
   (push.gloc.of |.vars|)
   (push.iloc.0 . 0)
   (push.const)
   (push.const _ style)
   (push.close
     (1 0)
     (call
       (call
         (call
           (push.iloc.0 . 0)
           (push.const . style)
           (apply.gloc.of |.syntax/i1n| "../stdlib/core/io.scm" . 283705))
         (push)
         (apply.gloc.of |.syntax->datum| "../stdlib/core/io.scm" . 283690))
       (push)
       (apply.gloc.of
         |core.io.assistants'port-lookup-eol-style-code|
         "../stdlib/core/io.scm"
         .
         283662))
     (if.true.ret)
     (push.const . eol-style)
     (push.const . "invalid eol style")
     (push.iloc.1 . 0)
     (apply.gloc.of |.syntax-violation| "../stdlib/core/io.scm" . 284686))
   (push.gloc.of |.L547|)
   (push.subr.gloc.of |.list| 3 "../stdlib/core/io.scm" . 281607)
   (push.const . _)
   (push.const . #f)
   (push.close
     (1 0)
     (push.const . eol-style)
     (push.const . "invalid eol style")
     (push.iloc.1 . 0)
     (apply.gloc.of |.syntax-violation| "../stdlib/core/io.scm" . 287754))
   (push.subr.gloc.of |.list| 3 "../stdlib/core/io.scm" . 281607)
   (apply.gloc.of |.syntax-dispatch| "../stdlib/core/io.scm" . 281607))
 (set.gloc.of |.L544|)
 (close
   (2 0)
   (push.iloc.0 . 0)
   (call
     (iloc.0 . 1)
     (if.false.ret)
     (push.const . open-temporary-file-port)
     (push.const . 1)
     (push.iloc.0 . 1)
     (apply.gloc.of |core.io'transcoder-descriptor| "../stdlib/core/io.scm" . 712760))
   (push)
   (ret.subr.gloc.of |.make-temporary-file-port| "../stdlib/core/io.scm" . 712713))
 (set.gloc.of |.L561|)
 (close (0 0) (apply.gloc.of |core.io'open-string-output-port| "../stdlib/core/io.scm" . 521252))
 (set.gloc.of |.L517|)
 (close
   (1 0)
   (push.iloc.0 . 0)
   (push.const quote mode)
   (push.const (mode . 0))
   (apply.gloc.of |.syntax/c1n| "../stdlib/core/io.scm" . 295946))
 (set.gloc.of |.L540|)
 (close (0 0) (apply.gloc.of |core.io'open-string-output-port| "../stdlib/core/io.scm" . 346147))
 (set.gloc.of |.L516|)
 (close
   (1 0)
   (push.gloc.of |.vars|)
   (push.iloc.0 . 0)
   (push.const)
   (push.const _ options ...)
   (push.const . #f)
   (push.close
     (1 0)
     (call
       (call
         (push.iloc.0 . 0)
         (push.const options ...)
         (push.const (options . 1))
         (apply.gloc.of |.syntax/c1n| "../stdlib/core/io.scm" . 237604))
       (push)
       (apply.gloc.of |.syntax->datum| "../stdlib/core/io.scm" . 237589))
     (push)
     (extend . 1)
     (call
       (call
         (call
           (push.iloc.0 . 0)
           (apply.gloc.of |core.lists'list-of-unique-symbols?| "../stdlib/core/io.scm" . 238613))
         (if.false.ret)
         (push.gloc.of |core.io.assistants'port-lookup-file-option-code|)
         (push.iloc.0 . 0)
         (apply.gloc.of |core.lists'for-all| "../stdlib/core/io.scm" . 238643))
       (if.true.ret)
       (push.const . file-options)
       (push.const . "invalid option")
       (push.iloc 2 . 0)
       (apply.gloc.of |.syntax-violation| "../stdlib/core/io.scm" . 239632))
     (push.iloc.1 . 0)
     (push.const make-file-options '(options ...))
     (push.const (options . 1))
     (apply.gloc.of |.syntax/c1n| "../stdlib/core/io.scm" . 240652))
   (push.subr.gloc.of |.list| 3 "../stdlib/core/io.scm" . 235527)
   (push.const . _)
   (push.const . #f)
   (push.close
     (1 0)
     (push.const . file-options)
     (push.const . "invalid syntax")
     (push.iloc.1 . 0)
     (apply.gloc.of |.syntax-violation| "../stdlib/core/io.scm" . 242698))
   (push.subr.gloc.of |.list| 3 "../stdlib/core/io.scm" . 235527)
   (apply.gloc.of |.syntax-dispatch| "../stdlib/core/io.scm" . 235527))
 (set.gloc.of |.L512|)
 (call
   (push.const core enums)
   (apply.gloc.of |.require-scheme-library| "../stdlib/core/io.scm" . 261130))
 (call
   (push.const core optargs)
   (apply.gloc.of |.require-scheme-library| "../stdlib/core/io.scm" . 261130))
 (call
   (push.const core bytevectors)
   (apply.gloc.of |.require-scheme-library| "../stdlib/core/io.scm" . 261130))
 (call
   (push.const core conditions)
   (apply.gloc.of |.require-scheme-library| "../stdlib/core/io.scm" . 261130))
 (call
   (push.const core lists)
   (apply.gloc.of |.require-scheme-library| "../stdlib/core/io.scm" . 261130))
 (call
   (push.const core syntax-case)
   (apply.gloc.of |.require-scheme-library| "../stdlib/core/io.scm" . 261130))
 (call
   (push.const core primitives)
   (apply.gloc.of |.require-scheme-library| "../stdlib/core/io.scm" . 261130))
 (call
   (push.const core io assistants)
   (apply.gloc.of |.require-scheme-library| "../stdlib/core/io.scm" . 261130))
 (close
   (1 0 . |core.io'buffer-mode?|)
   (call
     (push.iloc.0 . 0)
     (apply.gloc.of
       |core.io.assistants'port-lookup-buffer-mode-code|
       "../stdlib/core/io.scm"
       .
       267276))
   (if.false.ret)
   (ret.const . #t))
 (set.gloc.of |core.io'buffer-mode?|)
 (push.const . type:codec)
 (push.const . utf-8)
 (subr.gloc.of |.tuple| 2 "../stdlib/core/io.scm" . 271394)
 (set.gloc.of |core.io'predefined-utf-8-codec|)
 (push.const . type:codec)
 (push.const . utf-16)
 (subr.gloc.of |.tuple| 2 "../stdlib/core/io.scm" . 272419)
 (set.gloc.of |core.io'predefined-utf-16-codec|)
 (push.const . type:codec)
 (push.const . latin-1)
 (subr.gloc.of |.tuple| 2 "../stdlib/core/io.scm" . 273444)
 (set.gloc.of |core.io'predefined-latin-1-codec|)
 (close (0 0 . |core.io'utf-8-codec|) (ret.gloc.of |core.io'predefined-utf-8-codec|))
 (set.gloc.of |core.io'utf-8-codec|)
 (close (0 0 . |core.io'utf-16-codec|) (ret.gloc.of |core.io'predefined-utf-16-codec|))
 (set.gloc.of |core.io'utf-16-codec|)
 (close (0 0 . |core.io'latin-1-codec|) (ret.gloc.of |core.io'predefined-latin-1-codec|))
 (set.gloc.of |core.io'latin-1-codec|)
 (close
   (1 1 . |core.io'make-transcoder|)
   (push.iloc.0 . 1)
   (push.subr.gloc.of |.length| 1 (|.length| |options`1394*|))
   (push.const . 2)
   (subr.gloc.of |.<=| 2 (|.<=| (|.length| |options`1394*|) 2))
   (if.false.call
     (push.const . make-transcoder)
     (push.const . "expected ~a to ~a, but ~a arguments given")
     (push.const . 1)
     (push.const . 3)
     (push.const . 1)
     (push.iloc.0 . 1)
     (push.subr.gloc.of |.length| 1 (|.length| |options`1394*|))
     (push.subr.gloc.of |.+| 2 (|.+| 1 (|.length| |options`1394*|)))
     (push.subr.gloc.of
       |.format|
       4
       (|.format|
         "expected ~a to ~a, but ~a arguments given"
         1
         3
         (|.+| 1 (|.length| |options`1394*|))))
     (push.iloc.0 . 0)
     (push.iloc.0 . 1)
     (push.subr.gloc.of |.cons*| 2 (|.cons*| |codec`1394*| |options`1394*|))
     (apply.gloc.of
       |.assertion-violation|
       (|.assertion-violation|
         'make-transcoder
         (|.format|
           "expected ~a to ~a, but ~a arguments given"
           1
           3
           (|.+| 1 (|.length| |options`1394*|)))
         (|.cons*| |codec`1394*| |options`1394*|))))
   (push.close
     (2 0)
     (call
       (push.iloc.1 . 0)
       (push.const . 0)
       (push.subr.gloc.of |.tuple-ref| 2 "../stdlib/core/io.scm" . 304161)
       (const . type:codec)
       (if.not.eq?.ret.const . #f)
       (push.iloc.1 . 0)
       (push.const . 1)
       (push.subr.gloc.of |.tuple-ref| 2 "../stdlib/core/io.scm" . 304218)
       (apply.gloc.of |core.io.assistants'port-lookup-codec-code| "../stdlib/core/io.scm" . 304194))
     (push)
     (call
       (push.iloc.0 . 0)
       (apply.gloc.of
         |core.io.assistants'port-lookup-eol-style-code|
         "../stdlib/core/io.scm"
         .
         305175))
     (push)
     (call
       (push.iloc.0 . 1)
       (apply.gloc.of
         |core.io.assistants'port-lookup-error-handling-mode-code|
         "../stdlib/core/io.scm"
         .
         306199))
     (push)
     (extend . 3)
     (iloc.0 . 0)
     (if.false.call
       (push.const . make-transcoder)
       (push.const . "expected codec, but got ~r, as argument 1")
       (push.iloc 2 . 0)
       (push.subr.gloc.of |.format| 2 "../stdlib/core/io.scm" . 307260)
       (apply.gloc.of |.assertion-violation| "../stdlib/core/io.scm" . 307222))
     (iloc.0 . 1)
     (if.false.call
       (push.const . make-transcoder)
       (push.const . "expected eol-style, but got ~r, as argument 2")
       (push.iloc.1 . 0)
       (push.subr.gloc.of |.format| 2 "../stdlib/core/io.scm" . 308284)
       (apply.gloc.of |.assertion-violation| "../stdlib/core/io.scm" . 308246))
     (iloc.0 . 2)
     (if.false.call
       (push.const . make-transcoder)
       (push.const . "expected error-handling-mode, but got ~r, as argument 3")
       (push.iloc.1 . 1)
       (push.subr.gloc.of |.format| 2 "../stdlib/core/io.scm" . 309308)
       (apply.gloc.of |.assertion-violation| "../stdlib/core/io.scm" . 309270))
     (push.const . 3)
     (push.subr.gloc.of |.make-bytevector| 1 "../stdlib/core/io.scm" . 310293)
     (extend . 1)
     (push.iloc.0 . 0)
     (push.const . 0)
     (push.iloc.1 . 0)
     (subr.gloc.of |.bytevector-u8-set!| 3 "../stdlib/core/io.scm" . 311309)
     (push.iloc.0 . 0)
     (push.const . 1)
     (push.iloc.1 . 1)
     (subr.gloc.of |.bytevector-u8-set!| 3 "../stdlib/core/io.scm" . 312333)
     (push.iloc.0 . 0)
     (push.const . 2)
     (push.iloc.1 . 2)
     (subr.gloc.of |.bytevector-u8-set!| 3 "../stdlib/core/io.scm" . 313357)
     (push.const . type:transcoder)
     (push.iloc.0 . 0)
     (ret.subr.gloc.of |.tuple| "../stdlib/core/io.scm" . 314381))
   (call
     (push.iloc.0 . 1)
     (push.subr.gloc.of |.length| 1 "../stdlib/core/io.scm" . 303146)
     (extend . 1)
     (=n.iloc (0 . 0) 2 "../stdlib/core/io.scm" . 303146)
     (if.true (ret.iloc 1 . 1))
     (=n.iloc (0 . 0) 1 (|.=| |argc`1397`1404*| 1))
     (if.true
       (push.iloc.1 . 1)
       (push.const . replace)
       (push.subr.gloc.of |.list| 1 (|.list| 'replace))
       (ret.subr.gloc.of |.append| (|.append| |options`1394*| (|.list| 'replace))))
     (call (apply.gloc.of |core.io'native-eol-style| "../stdlib/core/io.scm" . 303146))
     (push)
     (push.const . replace)
     (ret.subr.gloc.of |.list| "../stdlib/core/io.scm" . 303146))
   (push)
   (apply.gloc.of
     |.apply|
     (|.apply|
       (lambda (|eol-style`1398*| |error-handling-mode`1398*|)
         (let ((|octet0`1400*|
                 (and (|.eq?| (|.tuple-ref| |codec`1394*| 0) 'type:codec)
                      (|core.io.assistants'port-lookup-codec-code| (|.tuple-ref| |codec`1394*| 1))))
               (|octet1`1400*| (|core.io.assistants'port-lookup-eol-style-code| |eol-style`1398*|))
               (|octet2`1400*|
                 (|core.io.assistants'port-lookup-error-handling-mode-code|
                   |error-handling-mode`1398*|)))
           (or |octet0`1400*|
               (|.assertion-violation|
                 'make-transcoder
                 (|.format| "expected codec, but got ~r, as argument 1" |codec`1394*|)))
           (or |octet1`1400*|
               (|.assertion-violation|
                 'make-transcoder
                 (|.format| "expected eol-style, but got ~r, as argument 2" |eol-style`1398*|)))
           (or |octet2`1400*|
               (|.assertion-violation|
                 'make-transcoder
                 (|.format|
                   "expected error-handling-mode, but got ~r, as argument 3"
                   |error-handling-mode`1398*|)))
           (let ((|bv`1402*| (|.make-bytevector| 3)))
             (|.bytevector-u8-set!| |bv`1402*| 0 |octet0`1400*|)
             (|.bytevector-u8-set!| |bv`1402*| 1 |octet1`1400*|)
             (|.bytevector-u8-set!| |bv`1402*| 2 |octet2`1400*|)
             (|.tuple| 'type:transcoder |bv`1402*|))))
       (let ((|argc`1397`1404*| (|.length| |options`1394*|)))
         (if (|.=| |argc`1397`1404*| 2)
             |options`1394*|
             (if (|.=| |argc`1397`1404*| 1)
                 (|.append| |options`1394*| (|.list| 'replace))
                 (|.list| (|core.io'native-eol-style|) 'replace)))))))
 (set.gloc.of |core.io'make-transcoder|)
 (close
   (3 0 . |core.io'transcoder-descriptor|)
   (push.iloc.0 . 2)
   (push.const . 0)
   (push.subr.gloc.of |.tuple-ref| 2 "../stdlib/core/io.scm" . 318480)
   (push.const . type:transcoder)
   (subr.gloc.of |.eq?| 2 "../stdlib/core/io.scm" . 318475)
   (if.false.call
     (push.iloc.0 . 0)
     (push.const . "expected transcoder, but got ~r, as argument ~a")
     (push.iloc.0 . 2)
     (push.iloc.0 . 1)
     (push.subr.gloc.of |.format| 3 "../stdlib/core/io.scm" . 319524)
     (apply.gloc.of |.assertion-violation| "../stdlib/core/io.scm" . 319499))
   (push.iloc.0 . 2)
   (push.const . 1)
   (ret.subr.gloc.of |.tuple-ref| "../stdlib/core/io.scm" . 320519))
 (set.gloc.of |core.io'transcoder-descriptor|)
 (close
   (1 0 . |core.io'transcoder-codec|)
   (call
     (call
       (push.const . transcoder-codec)
       (push.const . 1)
       (push.iloc.0 . 0)
       (apply.gloc.of |core.io'transcoder-descriptor| "../stdlib/core/io.scm" . 324672))
     (push)
     (push.const . 0)
     (push.subr.gloc.of |.bytevector-u8-ref| 2 "../stdlib/core/io.scm" . 324653)
     (apply.gloc.of
       |core.io.assistants'port-reverse-lookup-codec-code|
       "../stdlib/core/io.scm"
       .
       324621))
   (push)
   (extend . 1)
   (push.iloc.0 . 0)
   (const . latin-1)
   (if.eq? (apply.gloc.of |core.io'latin-1-codec| "../stdlib/core/io.scm" . 325652))
   (push.iloc.0 . 0)
   (const . utf-8)
   (if.eq? (apply.gloc.of |core.io'utf-8-codec| "../stdlib/core/io.scm" . 326674))
   (push.iloc.0 . 0)
   (const . utf-16)
   (if.eq? (apply.gloc.of |core.io'utf-16-codec| "../stdlib/core/io.scm" . 327699))
   (ret.const.unspec))
 (set.gloc.of |core.io'transcoder-codec|)
 (close
   (1 0 . |core.io'transcoder-eol-style|)
   (call
     (push.const . transcoder-eol-style)
     (push.const . 1)
     (push.iloc.0 . 0)
     (apply.gloc.of |core.io'transcoder-descriptor| "../stdlib/core/io.scm" . 331838))
   (push)
   (push.const . 1)
   (push.subr.gloc.of |.bytevector-u8-ref| 2 "../stdlib/core/io.scm" . 331819)
   (apply.gloc.of
     |core.io.assistants'port-reverse-lookup-eol-style-code|
     "../stdlib/core/io.scm"
     .
     331783))
 (set.gloc.of |core.io'transcoder-eol-style|)
 (close
   (1 0 . |core.io'transcoder-error-handling-mode|)
   (call
     (push.const . transcoder-error-handling-mode)
     (push.const . 1)
     (push.iloc.0 . 0)
     (apply.gloc.of |core.io'transcoder-descriptor| "../stdlib/core/io.scm" . 335944))
   (push)
   (push.const . 2)
   (push.subr.gloc.of |.bytevector-u8-ref| 2 "../stdlib/core/io.scm" . 335925)
   (apply.gloc.of
     |core.io.assistants'port-reverse-lookup-error-handling-mode-code|
     "../stdlib/core/io.scm"
     .
     335879))
 (set.gloc.of |core.io'transcoder-error-handling-mode|)
 (call
   (push.const . type:transcoder)
   (subr.gloc.of |.native-transcoder-descriptor| 0)
   (push)
   (push.subr.gloc.of |.tuple| 2 "../stdlib/core/io.scm" . 338967)
   (extend . 1)
   (ret.close (0 0) (ret.iloc 1 . 0)))
 (set.gloc.of |core.io'native-transcoder|)
 (close
   (0 0 . |core.io'native-eol-style|)
   (call (apply.gloc.of |core.io'native-transcoder| "../stdlib/core/io.scm" . 342077))
   (push)
   (apply.gloc.of |core.io'transcoder-eol-style| "../stdlib/core/io.scm" . 342055))
 (set.gloc.of |core.io'native-eol-style|)
 (close
   (2 0 . |core.io'bytevector->string|)
   (push.gloc.of |.L516|)
   (push.close
     (2 0)
     (call
       (push.iloc.1 . 0)
       (push.iloc.1 . 1)
       (apply.gloc.of |core.io'open-bytevector-input-port| "../stdlib/core/io.scm" . 348171))
     (push)
     (push.close
       (1 0)
       (extend.enclose+
         (1 0 . loop)
         (push.iloc.0 . 0)
         (subr.gloc.of |.eof-object?| 1 "../stdlib/core/io.scm" . 351254)
         (if.true (apply.iloc (3 . 1) "../stdlib/core/io.scm" . 351270))
         (push.iloc 3 . 0)
         (push.iloc.0 . 0)
         (subr.gloc.of |.put-char| 2 "../stdlib/core/io.scm" . 353302)
         (push.iloc 2 . 0)
         (push.subr.gloc.of |.get-char| 1 "../stdlib/core/io.scm" . 354332)
         (apply.iloc+ (1 . 0) "../stdlib/core/io.scm" . 354326))
       (push.iloc.1 . 0)
       (push.subr.gloc.of |.get-char| 1 "../stdlib/core/io.scm" . 350235)
       (apply.iloc+ (0 . 0) "../stdlib/core/io.scm" . 351247))
     (apply.gloc.of
       |.call-with-port|
       (|.call-with-port|
         (|core.io'open-bytevector-input-port| |bytes`1427*| |transcoder`1427*|)
         (lambda (|in`1431*|)
           (letrec* ((|loop`1435*|
                       (lambda (|c`1436*|)
                         (if (|.eof-object?| |c`1436*|)
                             (|extract`1429*|)
                             (begin
                               (|.put-char| |out`1429*| |c`1436*|)
                               (|loop`1435*| (|.get-char| |in`1431*|)))))))
             (|loop`1435*| (|.get-char| |in`1431*|)))))))
   (apply.gloc.of |.call-with-values| "../stdlib/core/io.scm" . 261130))
 (set.gloc.of |core.io'bytevector->string|)
 (close
   (2 0 . |core.io'string->bytevector|)
   (push.close
     (0 0)
     (push.iloc.1 . 1)
     (apply.gloc.of |core.io'open-bytevector-output-port| "../stdlib/core/io.scm" . 358435))
   (push.close
     (2 0)
     (push.iloc.1 . 0)
     (push.subr.gloc.of |.make-string-input-port| 1 "../stdlib/core/io.scm" . 360459)
     (push.close
       (1 0)
       (extend.enclose+
         (1 0 . loop)
         (push.iloc.0 . 0)
         (subr.gloc.of |.eof-object?| 1 "../stdlib/core/io.scm" . 363542)
         (if.true (apply.iloc (3 . 1) "../stdlib/core/io.scm" . 363558))
         (push.iloc 3 . 0)
         (push.iloc.0 . 0)
         (subr.gloc.of |.put-char| 2 "../stdlib/core/io.scm" . 365590)
         (push.iloc 2 . 0)
         (push.subr.gloc.of |.get-char| 1 "../stdlib/core/io.scm" . 366620)
         (apply.iloc+ (1 . 0) "../stdlib/core/io.scm" . 366614))
       (push.iloc.1 . 0)
       (push.subr.gloc.of |.get-char| 1 "../stdlib/core/io.scm" . 362523)
       (apply.iloc+ (0 . 0) "../stdlib/core/io.scm" . 363535))
     (apply.gloc.of
       |.call-with-port|
       (|.call-with-port|
         (|.make-string-input-port| |string`1439*|)
         (lambda (|in`1443*|)
           (letrec* ((|loop`1447*|
                       (lambda (|c`1448*|)
                         (if (|.eof-object?| |c`1448*|)
                             (|extract`1441*|)
                             (begin
                               (|.put-char| |out`1441*| |c`1448*|)
                               (|loop`1447*| (|.get-char| |in`1443*|)))))))
             (|loop`1447*| (|.get-char| |in`1443*|)))))))
   (apply.gloc.of |.call-with-values| "../stdlib/core/io.scm" . 358435))
 (set.gloc.of |core.io'string->bytevector|)
 (close
   (1 0 . |core.io'port-transcoder|)
   (push.iloc.0 . 0)
   (push.subr.gloc.of |.port-transcoder-descriptor| 1 "../stdlib/core/io.scm" . 372755)
   (extend . 1)
   (iloc.0 . 0)
   (if.false.ret)
   (push.iloc.0 . 0)
   (const . #t)
   (if.eq? (apply.gloc.of |core.io'native-transcoder| "../stdlib/core/io.scm" . 375826))
   (push.const . type:transcoder)
   (push.iloc.0 . 0)
   (ret.subr.gloc.of |.tuple| "../stdlib/core/io.scm" . 376850))
 (set.gloc.of |core.io'port-transcoder|)
 (close
   (1 0 . |core.io'textual-port?|)
   (push.iloc.0 . 0)
   (subr.gloc.of |.port-transcoder-descriptor| 1 "../stdlib/core/io.scm" . 380940)
   (if.false.ret)
   (ret.const . #t))
 (set.gloc.of |core.io'textual-port?|)
 (close
   (1 0 . |core.io'binary-port?|)
   (push.iloc.0 . 0)
   (push.subr.gloc.of |.port-transcoder-descriptor| 1 "../stdlib/core/io.scm" . 385036)
   (ret.subr.gloc.of |.not| "../stdlib/core/io.scm" . 385031))
 (set.gloc.of |core.io'binary-port?|)
 (close
   (2 0 . |core.io'transcoded-port|)
   (push.iloc.0 . 0)
   (call
     (push.const . transcoded-port)
     (push.const . 2)
     (push.iloc.0 . 1)
     (apply.gloc.of |core.io'transcoder-descriptor| "../stdlib/core/io.scm" . 389154))
   (push)
   (ret.subr.gloc.of |.make-transcoded-port| "../stdlib/core/io.scm" . 389127))
 (set.gloc.of |core.io'transcoded-port|)
 (close
   (1 1 . |core.io'open-file-input-port|)
   (push.iloc.0 . 1)
   (push.subr.gloc.of |.length| 1 (|.length| |options`1461*|))
   (push.const . 3)
   (subr.gloc.of |.<=| 2 (|.<=| (|.length| |options`1461*|) 3))
   (if.false.call
     (push.const . open-file-input-port)
     (push.const . "expected ~a to ~a, but ~a arguments given")
     (push.const . 1)
     (push.const . 4)
     (push.const . 1)
     (push.iloc.0 . 1)
     (push.subr.gloc.of |.length| 1 (|.length| |options`1461*|))
     (push.subr.gloc.of |.+| 2 (|.+| 1 (|.length| |options`1461*|)))
     (push.subr.gloc.of
       |.format|
       4
       (|.format|
         "expected ~a to ~a, but ~a arguments given"
         1
         4
         (|.+| 1 (|.length| |options`1461*|))))
     (push.iloc.0 . 0)
     (push.iloc.0 . 1)
     (push.subr.gloc.of |.cons*| 2 (|.cons*| |filename`1461*| |options`1461*|))
     (apply.gloc.of
       |.assertion-violation|
       (|.assertion-violation|
         'open-file-input-port
         (|.format|
           "expected ~a to ~a, but ~a arguments given"
           1
           4
           (|.+| 1 (|.length| |options`1461*|)))
         (|.cons*| |filename`1461*| |options`1461*|))))
   (push.close
     (3 0)
     (push.const . open-file-input-port)
     (push.const . 1)
     (push.const . 1)
     (push.iloc.1 . 0)
     (call
       (push.iloc.0 . 0)
       (push.const . 0)
       (push.subr.gloc.of |.tuple-ref| 2 "../stdlib/core/io.scm" . 403530)
       (const . type:enum-set)
       (if.not.eq?.ret.const . #f)
       (push.iloc.0 . 0)
       (call
         (call
           (push.const)
           (apply.gloc.of |core.io.assistants'make-file-options| "../stdlib/core/io.scm" . 403530))
         (push)
         (apply.gloc.of |core.enums'enum-set-universe| "../stdlib/core/io.scm" . 403530))
       (push)
       (apply.gloc.of |core.enums'enum-set-subset?| "../stdlib/core/io.scm" . 403530))
     (if.false.call
       (push.const . open-file-input-port)
       (push.const . "expected file-options object, but got ~r, as argument 2")
       (push.iloc.0 . 0)
       (push.subr.gloc.of |.format| 2 "../stdlib/core/io.scm" . 403530)
       (push.iloc.1 . 0)
       (push.iloc.1 . 1)
       (push.subr.gloc.of |.cons*| 2 "../stdlib/core/io.scm" . 403530)
       (apply.gloc.of |.assertion-violation| "../stdlib/core/io.scm" . 403530))
     (call
       (push.gloc.of |.+|)
       (call
         (push.gloc.of |.L533|)
         (call
           (push.iloc.0 . 0)
           (apply.gloc.of |core.enums'enum-set->list| "../stdlib/core/io.scm" . 403530))
         (push)
         (apply.gloc.of |.map| "../stdlib/core/io.scm" . 403530))
       (push)
       (apply.gloc.of |.apply| "../stdlib/core/io.scm" . 403530))
     (push)
     (call
       (push.iloc.0 . 1)
       (apply.gloc.of
         |core.io.assistants'port-lookup-buffer-mode-code|
         "../stdlib/core/io.scm"
         .
         404500))
     (push)
     (call
       (iloc.0 . 2)
       (if.false.ret)
       (push.const . open-file-input-port)
       (push.const . 4)
       (push.iloc.0 . 2)
       (apply.gloc.of |core.io'transcoder-descriptor| "../stdlib/core/io.scm" . 405540))
     (push)
     (ret.subr.gloc.of |.open-port| "../stdlib/core/io.scm" . 399369))
   (call
     (push.iloc.0 . 1)
     (push.subr.gloc.of |.length| 1 "../stdlib/core/io.scm" . 396333)
     (extend . 1)
     (=n.iloc (0 . 0) 3 "../stdlib/core/io.scm" . 396333)
     (if.true (ret.iloc 1 . 1))
     (=n.iloc (0 . 0) 2 (|.=| |argc`1464`1474*| 2))
     (if.true
       (push.iloc.1 . 1)
       (push.const . #f)
       (push.subr.gloc.of |.list| 1 (|.list| #f))
       (ret.subr.gloc.of |.append| (|.append| |options`1461*| (|.list| #f))))
     (=n.iloc (0 . 0) 1 "../stdlib/core/io.scm" . 396333)
     (if.true
       (push.iloc.1 . 1)
       (push.const . block)
       (push.const . #f)
       (push.subr.gloc.of |.list| 2 (|.list| 'block #f))
       (ret.subr.gloc.of |.append| (|.append| |options`1461*| (|.list| 'block #f))))
     (call
       (push.const)
       (apply.gloc.of |core.io.assistants'make-file-options| "../stdlib/core/io.scm" . 396333))
     (push)
     (push.const . block)
     (push.const . #f)
     (ret.subr.gloc.of |.list| (|.list| (|core.io.assistants'make-file-options| '()) 'block #f)))
   (push)
   (apply.gloc.of
     |.apply|
     (|.apply|
       (lambda (|file-options`1465*| |buffer-mode`1465*| |transcoder`1465*|)
         (|.open-port|
           'open-file-input-port
           1
           1
           |filename`1461*|
           (begin
             (or (and (|.eq?| (|.tuple-ref| |file-options`1465*| 0) 'type:enum-set)
                      (|core.enums'enum-set-subset?|
                        |file-options`1465*|
                        (|core.enums'enum-set-universe|
                          (|core.io.assistants'make-file-options| '()))))
                 (|.assertion-violation|
                   'open-file-input-port
                   (|.format|
                     "expected file-options object, but got ~r, as argument 2"
                     |file-options`1465*|)
                   (|.cons*| |filename`1461*| |options`1461*|)))
             (|.apply| |.+| (|.map| |.L533| (|core.enums'enum-set->list| |file-options`1465*|))))
           (|core.io.assistants'port-lookup-buffer-mode-code| |buffer-mode`1465*|)
           (and |transcoder`1465*|
                (|core.io'transcoder-descriptor| 'open-file-input-port 4 |transcoder`1465*|))))
       (let ((|argc`1464`1474*| (|.length| |options`1461*|)))
         (if (|.=| |argc`1464`1474*| 3)
             |options`1461*|
             (if (|.=| |argc`1464`1474*| 2)
                 (|.append| |options`1461*| (|.list| #f))
                 (if (|.=| |argc`1464`1474*| 1)
                     (|.append| |options`1461*| (|.list| 'block #f))
                     (|.list| (|core.io.assistants'make-file-options| '()) 'block #f))))))))
 (set.gloc.of |core.io'open-file-input-port|)
 (close
   (1 1 . |core.io'open-bytevector-input-port|)
   (push.iloc.0 . 1)
   (push.subr.gloc.of |.length| 1 (|.length| |options`1486*|))
   (push.const . 1)
   (subr.gloc.of |.<=| 2 (|.<=| (|.length| |options`1486*|) 1))
   (if.false.call
     (push.const . open-bytevector-input-port)
     (push.const . "expected ~a to ~a, but ~a arguments given")
     (push.const . 1)
     (push.const . 2)
     (push.const . 1)
     (push.iloc.0 . 1)
     (push.subr.gloc.of |.length| 1 (|.length| |options`1486*|))
     (push.subr.gloc.of |.+| 2 (|.+| 1 (|.length| |options`1486*|)))
     (push.subr.gloc.of
       |.format|
       4
       (|.format|
         "expected ~a to ~a, but ~a arguments given"
         1
         2
         (|.+| 1 (|.length| |options`1486*|))))
     (push.iloc.0 . 0)
     (push.iloc.0 . 1)
     (push.subr.gloc.of |.cons*| 2 (|.cons*| |bytes`1486*| |options`1486*|))
     (apply.gloc.of
       |.assertion-violation|
       (|.assertion-violation|
         'open-bytevector-input-port
         (|.format|
           "expected ~a to ~a, but ~a arguments given"
           1
           2
           (|.+| 1 (|.length| |options`1486*|)))
         (|.cons*| |bytes`1486*| |options`1486*|))))
   (call
     (iloc.0 . 1)
     (if.not.pair?.ret.const . #f)
     (push.iloc.0 . 1)
     (ret.subr.gloc.of |.car| (|.car| |options`1486*|)))
   (push)
   (extend . 1)
   (push.const . open-bytevector-input-port)
   (push.const . 2)
   (push.const . 1)
   (push.const . bytevector)
   (push.iloc.1 . 0)
   (push.const . #f)
   (call
     (iloc.0 . 0)
     (if.false.ret)
     (push.const . open-bytevector-input-port)
     (push.const . 2)
     (push.iloc.0 . 0)
     (apply.gloc.of |core.io'transcoder-descriptor| "../stdlib/core/io.scm" . 417828))
   (push)
   (ret.subr.gloc.of |.open-port| "../stdlib/core/io.scm" . 411657))
 (set.gloc.of |core.io'open-bytevector-input-port|)
 (close
   (1 0 . |core.io'open-string-input-port|)
   (push.iloc.0 . 0)
   (ret.subr.gloc.of |.make-string-input-port| "../stdlib/core/io.scm" . 421895))
 (set.gloc.of |core.io'open-string-input-port|)
 (close
   (5 0 . |core.io'make-custom-binary-input-port|)
   (push.const . make-custom-binary-input-port)
   (push.const . 3)
   (push.const . 1)
   (push.iloc.0 . 0)
   (push.const . #f)
   (push.iloc.0 . 1)
   (push.const . #f)
   (push.iloc.0 . 2)
   (push.iloc.0 . 3)
   (push.iloc.0 . 4)
   (push.subr.gloc.of |.vector| 6 "../stdlib/core/io.scm" . 430098)
   (push.const . #f)
   (push.const . #f)
   (ret.subr.gloc.of |.open-port| "../stdlib/core/io.scm" . 425991))
 (set.gloc.of |core.io'make-custom-binary-input-port|)
 (close
   (5 0 . |core.io'make-custom-textual-input-port|)
   (extend.unbound . 4)
   (push.close
     (3 0 . bv-read!)
     (=n.iloc (0 . 2) 0 "../stdlib/core/io.scm" . 441362)
     (if.true.ret.const . 0)
     (push.iloc.0 . 2)
     (push.const . 4)
     (push.subr.gloc.of |.div| 2 "../stdlib/core/io.scm" . 443422)
     (extend . 1)
     (push.iloc.0 . 0)
     (push.const . #\nul)
     (push.subr.gloc.of |.make-string| 2 "../stdlib/core/io.scm" . 444446)
     (extend . 1)
     (call
       (push.iloc.0 . 0)
       (push.const . 0)
       (push.iloc.1 . 0)
       (apply.iloc (4 . 1) "../stdlib/core/io.scm" . 445472))
     (push)
     (extend . 1)
     (=n.iloc (0 . 0) 0 "../stdlib/core/io.scm" . 446491)
     (if.true.ret.const . 0)
     (push.iloc.1 . 0)
     (push.const . 0)
     (push.iloc.0 . 0)
     (push.subr.gloc.of |.substring| 3 "../stdlib/core/io.scm" . 448569)
     (push.subr.gloc.of |.string->utf8| 1 "../stdlib/core/io.scm" . 448555)
     (extend . 1)
     (push.iloc.0 . 0)
     (push.subr.gloc.of |.bytevector-length| 1 "../stdlib/core/io.scm" . 449577)
     (extend . 1)
     (push.iloc.1 . 0)
     (push.const . 0)
     (push.iloc 5 . 0)
     (push.iloc 5 . 1)
     (push.iloc.0 . 0)
     (subr.gloc.of |.bytevector-copy!| 5 "../stdlib/core/io.scm" . 450589)
     (ret.iloc 0 . 0))
   (push.close
     (1 0 . bv-get-position)
     (push.iloc.1 . 3)
     (push.iloc.0 . 0)
     (call (apply.iloc (2 . 2) "../stdlib/core/io.scm" . 455727))
     (push)
     (subr.gloc.of |.core-hashtable-set!| 3 "../stdlib/core/io.scm" . 455691)
     (ret.iloc 0 . 0))
   (push.close
     (1 0 . bv-set-position!)
     (push.iloc.1 . 3)
     (push.iloc.0 . 0)
     (push.const . #f)
     (push.subr.gloc.of |.core-hashtable-ref| 3 "../stdlib/core/io.scm" . 460818)
     (extend . 1)
     (iloc.0 . 0)
     (if.true (push.iloc.0 . 0) (apply.iloc (3 . 3) "../stdlib/core/io.scm" . 461859))
     (subr.gloc.of |.warning-level| 0 "../stdlib/core/io.scm" . 462866)
     (if.true
       (subr.gloc.of |.current-error-port| 0)
       (push)
       (push.const
         .
         "~&warning in set-port-position: expected return value of a call to get-position, but got ~u~%~!")
       (push.iloc.1 . 0)
       (subr.gloc.of |.format| 3 "../stdlib/core/io.scm" . 463890)
       (push.iloc.1 . 0)
       (apply.iloc (3 . 3) "../stdlib/core/io.scm" . 464914))
     (push.iloc.1 . 0)
     (apply.iloc (3 . 3) "../stdlib/core/io.scm" . 466962))
   (enclose . 3)
   (push.const . eqv?)
   (subr.gloc.of |.make-core-hashtable| 1 "../stdlib/core/io.scm" . 437272)
   (set.iloc (0 . 3))
   (push.const . make-custom-textual-input-port)
   (push.const . 3)
   (push.const . 1)
   (push.iloc.1 . 0)
   (push.const . #t)
   (call (iloc.1 . 1) (if.false.ret) (ret.iloc 0 . 0))
   (push)
   (push.const . #f)
   (call (iloc.1 . 2) (if.false.ret) (ret.iloc 0 . 1))
   (push)
   (call (iloc.1 . 3) (if.false.ret) (ret.iloc 0 . 2))
   (push)
   (push.iloc.1 . 4)
   (push.subr.gloc.of |.vector| 6 "../stdlib/core/io.scm" . 473106)
   (push.const . #f)
   (push.const . #t)
   (ret.subr.gloc.of |.open-port| "../stdlib/core/io.scm" . 468999))
 (set.gloc.of |core.io'make-custom-textual-input-port|)
 (close
   (1 1 . |core.io'open-file-output-port|)
   (push.iloc.0 . 1)
   (push.subr.gloc.of |.length| 1 (|.length| |options`1526*|))
   (push.const . 3)
   (subr.gloc.of |.<=| 2 (|.<=| (|.length| |options`1526*|) 3))
   (if.false.call
     (push.const . open-file-output-port)
     (push.const . "expected ~a to ~a, but ~a arguments given")
     (push.const . 1)
     (push.const . 4)
     (push.const . 1)
     (push.iloc.0 . 1)
     (push.subr.gloc.of |.length| 1 (|.length| |options`1526*|))
     (push.subr.gloc.of |.+| 2 (|.+| 1 (|.length| |options`1526*|)))
     (push.subr.gloc.of
       |.format|
       4
       (|.format|
         "expected ~a to ~a, but ~a arguments given"
         1
         4
         (|.+| 1 (|.length| |options`1526*|))))
     (push.iloc.0 . 0)
     (push.iloc.0 . 1)
     (push.subr.gloc.of |.cons*| 2 (|.cons*| |filename`1526*| |options`1526*|))
     (apply.gloc.of
       |.assertion-violation|
       (|.assertion-violation|
         'open-file-output-port
         (|.format|
           "expected ~a to ~a, but ~a arguments given"
           1
           4
           (|.+| 1 (|.length| |options`1526*|)))
         (|.cons*| |filename`1526*| |options`1526*|))))
   (push.close
     (3 0)
     (push.const . open-file-output-port)
     (push.const . 1)
     (push.const . 2)
     (push.iloc.1 . 0)
     (call
       (push.iloc.0 . 0)
       (push.const . 0)
       (push.subr.gloc.of |.tuple-ref| 2 "../stdlib/core/io.scm" . 489547)
       (const . type:enum-set)
       (if.not.eq?.ret.const . #f)
       (push.iloc.0 . 0)
       (call
         (call
           (push.const)
           (apply.gloc.of |core.io.assistants'make-file-options| "../stdlib/core/io.scm" . 489547))
         (push)
         (apply.gloc.of |core.enums'enum-set-universe| "../stdlib/core/io.scm" . 489547))
       (push)
       (apply.gloc.of |core.enums'enum-set-subset?| "../stdlib/core/io.scm" . 489547))
     (if.false.call
       (push.const . open-file-output-port)
       (push.const . "expected file-options object, but got ~r, as argument 2")
       (push.iloc.0 . 0)
       (push.subr.gloc.of |.format| 2 "../stdlib/core/io.scm" . 489547)
       (push.iloc.1 . 0)
       (push.iloc.1 . 1)
       (push.subr.gloc.of |.cons*| 2 "../stdlib/core/io.scm" . 489547)
       (apply.gloc.of |.assertion-violation| "../stdlib/core/io.scm" . 489547))
     (call
       (push.gloc.of |.+|)
       (call
         (push.gloc.of |.L552|)
         (call
           (push.iloc.0 . 0)
           (apply.gloc.of |core.enums'enum-set->list| "../stdlib/core/io.scm" . 489547))
         (push)
         (apply.gloc.of |.map| "../stdlib/core/io.scm" . 489547))
       (push)
       (apply.gloc.of |.apply| "../stdlib/core/io.scm" . 489547))
     (push)
     (call
       (push.iloc.0 . 1)
       (apply.gloc.of
         |core.io.assistants'port-lookup-buffer-mode-code|
         "../stdlib/core/io.scm"
         .
         490516))
     (push)
     (call
       (iloc.0 . 2)
       (if.false.ret)
       (push.const . open-file-output-port)
       (push.const . 4)
       (push.iloc.0 . 2)
       (apply.gloc.of |core.io'transcoder-descriptor| "../stdlib/core/io.scm" . 491556))
     (push)
     (ret.subr.gloc.of |.open-port| "../stdlib/core/io.scm" . 485385))
   (call
     (push.iloc.0 . 1)
     (push.subr.gloc.of |.length| 1 "../stdlib/core/io.scm" . 482349)
     (extend . 1)
     (=n.iloc (0 . 0) 3 "../stdlib/core/io.scm" . 482349)
     (if.true (ret.iloc 1 . 1))
     (=n.iloc (0 . 0) 2 (|.=| |argc`1529`1539*| 2))
     (if.true
       (push.iloc.1 . 1)
       (push.const . #f)
       (push.subr.gloc.of |.list| 1 (|.list| #f))
       (ret.subr.gloc.of |.append| (|.append| |options`1526*| (|.list| #f))))
     (=n.iloc (0 . 0) 1 "../stdlib/core/io.scm" . 482349)
     (if.true
       (push.iloc.1 . 1)
       (push.const . block)
       (push.const . #f)
       (push.subr.gloc.of |.list| 2 (|.list| 'block #f))
       (ret.subr.gloc.of |.append| (|.append| |options`1526*| (|.list| 'block #f))))
     (call
       (push.const)
       (apply.gloc.of |core.io.assistants'make-file-options| "../stdlib/core/io.scm" . 482349))
     (push)
     (push.const . block)
     (push.const . #f)
     (ret.subr.gloc.of |.list| (|.list| (|core.io.assistants'make-file-options| '()) 'block #f)))
   (push)
   (apply.gloc.of
     |.apply|
     (|.apply|
       (lambda (|file-options`1530*| |buffer-mode`1530*| |transcoder`1530*|)
         (|.open-port|
           'open-file-output-port
           1
           2
           |filename`1526*|
           (begin
             (or (and (|.eq?| (|.tuple-ref| |file-options`1530*| 0) 'type:enum-set)
                      (|core.enums'enum-set-subset?|
                        |file-options`1530*|
                        (|core.enums'enum-set-universe|
                          (|core.io.assistants'make-file-options| '()))))
                 (|.assertion-violation|
                   'open-file-output-port
                   (|.format|
                     "expected file-options object, but got ~r, as argument 2"
                     |file-options`1530*|)
                   (|.cons*| |filename`1526*| |options`1526*|)))
             (|.apply| |.+| (|.map| |.L552| (|core.enums'enum-set->list| |file-options`1530*|))))
           (|core.io.assistants'port-lookup-buffer-mode-code| |buffer-mode`1530*|)
           (and |transcoder`1530*|
                (|core.io'transcoder-descriptor| 'open-file-output-port 4 |transcoder`1530*|))))
       (let ((|argc`1529`1539*| (|.length| |options`1526*|)))
         (if (|.=| |argc`1529`1539*| 3)
             |options`1526*|
             (if (|.=| |argc`1529`1539*| 2)
                 (|.append| |options`1526*| (|.list| #f))
                 (if (|.=| |argc`1529`1539*| 1)
                     (|.append| |options`1526*| (|.list| 'block #f))
                     (|.list| (|core.io.assistants'make-file-options| '()) 'block #f))))))))
 (set.gloc.of |core.io'open-file-output-port|)
 (close
   (1 0 . |core.io'bytevector-output-port-values|)
   (push.iloc.0 . 0)
   (push.close
     (0 0)
     (push.iloc.1 . 0)
     (ret.subr.gloc.of |.extract-accumulated-bytevector| "../stdlib/core/io.scm" . 495647))
   (ret.subr.gloc.of |.values| "../stdlib/core/io.scm" . 495623))
 (set.gloc.of |core.io'bytevector-output-port-values|)
 (close
   (0 1 . |core.io'open-bytevector-output-port|)
   (push.iloc.0 . 0)
   (push.subr.gloc.of |.length| 1 (|.length| |options`1555*|))
   (push.const . 1)
   (subr.gloc.of |.<=| 2 (|.<=| (|.length| |options`1555*|) 1))
   (if.false.call
     (push.const . open-bytevector-output-port)
     (push.const . "expected ~a to ~a, but ~a arguments given")
     (push.const . 0)
     (push.const . 1)
     (push.const . 0)
     (push.iloc.0 . 0)
     (push.subr.gloc.of |.length| 1 (|.length| |options`1555*|))
     (push.subr.gloc.of |.+| 2 (|.+| 0 (|.length| |options`1555*|)))
     (push.subr.gloc.of
       |.format|
       4
       (|.format|
         "expected ~a to ~a, but ~a arguments given"
         0
         1
         (|.+| 0 (|.length| |options`1555*|))))
     (push.iloc.0 . 0)
     (push.subr.gloc.of |.cons*| 1 (|.cons*| |options`1555*|))
     (apply.gloc.of
       |.assertion-violation|
       (|.assertion-violation|
         'open-bytevector-output-port
         (|.format|
           "expected ~a to ~a, but ~a arguments given"
           0
           1
           (|.+| 0 (|.length| |options`1555*|)))
         (|.cons*| |options`1555*|))))
   (call
     (iloc.0 . 0)
     (if.not.pair?.ret.const . #f)
     (push.iloc.0 . 0)
     (ret.subr.gloc.of |.car| (|.car| |options`1555*|)))
   (push)
   (extend . 1)
   (push.const . open-bytevector-output-port)
   (push.const . 2)
   (push.const . 2)
   (push.const . bytevector)
   (push.const . #f)
   (push.const . #f)
   (call
     (iloc.0 . 0)
     (if.false.ret)
     (push.const . open-bytevector-output-port)
     (push.const . 1)
     (push.iloc.0 . 0)
     (apply.gloc.of |core.io'transcoder-descriptor| "../stdlib/core/io.scm" . 508965))
   (push)
   (push.subr.gloc.of |.open-port| 7 "../stdlib/core/io.scm" . 502794)
   (apply.gloc.of |core.io'bytevector-output-port-values| "../stdlib/core/io.scm" . 501769))
 (set.gloc.of |core.io'open-bytevector-output-port|)
 (close
   (1 1 . |core.io'call-with-bytevector-output-port|)
   (push.iloc.0 . 1)
   (push.subr.gloc.of |.length| 1 (|.length| |options`1563*|))
   (push.const . 1)
   (subr.gloc.of |.<=| 2 (|.<=| (|.length| |options`1563*|) 1))
   (if.false.call
     (push.const . call-with-bytevector-output-port)
     (push.const . "expected ~a to ~a, but ~a arguments given")
     (push.const . 1)
     (push.const . 2)
     (push.const . 1)
     (push.iloc.0 . 1)
     (push.subr.gloc.of |.length| 1 (|.length| |options`1563*|))
     (push.subr.gloc.of |.+| 2 (|.+| 1 (|.length| |options`1563*|)))
     (push.subr.gloc.of
       |.format|
       4
       (|.format|
         "expected ~a to ~a, but ~a arguments given"
         1
         2
         (|.+| 1 (|.length| |options`1563*|))))
     (push.iloc.0 . 0)
     (push.iloc.0 . 1)
     (push.subr.gloc.of |.cons*| 2 (|.cons*| |proc`1563*| |options`1563*|))
     (apply.gloc.of
       |.assertion-violation|
       (|.assertion-violation|
         'call-with-bytevector-output-port
         (|.format|
           "expected ~a to ~a, but ~a arguments given"
           1
           2
           (|.+| 1 (|.length| |options`1563*|)))
         (|.cons*| |proc`1563*| |options`1563*|))))
   (call
     (iloc.0 . 1)
     (if.not.pair?.ret.const . #f)
     (push.iloc.0 . 1)
     (ret.subr.gloc.of |.car| (|.car| |options`1563*|)))
   (push)
   (extend . 1)
   (push.close
     (0 0)
     (push.iloc.1 . 0)
     (apply.gloc.of |core.io'open-bytevector-output-port| "../stdlib/core/io.scm" . 515110))
   (push.close
     (2 0)
     (call (push.iloc.0 . 0) (apply.iloc (2 . 0) "../stdlib/core/io.scm" . 516107))
     (call (apply.iloc (0 . 1) "../stdlib/core/io.scm" . 517145))
     (push)
     (extend . 1)
     (push.iloc.1 . 0)
     (subr.gloc.of |.close-port| 1 "../stdlib/core/io.scm" . 517157)
     (ret.iloc 0 . 0))
   (apply.gloc.of
     |.call-with-values|
     (|.call-with-values|
       (lambda () (|core.io'open-bytevector-output-port| |transcoder`1567*|))
       (lambda (|port`1569*| |extract`1569*|)
         (|proc`1563*| |port`1569*|)
         (let ((|result`1571*| (|extract`1569*|))) (|.close-port| |port`1569*|) |result`1571*|)))))
 (set.gloc.of |core.io'call-with-bytevector-output-port|)
 (close
   (1 0 . |core.io'call-with-string-output-port|)
   (push.gloc.of |.L517|)
   (push.close
     (2 0)
     (call (push.iloc.0 . 0) (apply.iloc (1 . 0) "../stdlib/core/io.scm" . 522249))
     (call (apply.iloc (0 . 1) "../stdlib/core/io.scm" . 523287))
     (push)
     (extend . 1)
     (push.iloc.1 . 0)
     (subr.gloc.of |.close-port| 1 "../stdlib/core/io.scm" . 523299)
     (ret.iloc 0 . 0))
   (apply.gloc.of |.call-with-values| "../stdlib/core/io.scm" . 261130))
 (set.gloc.of |core.io'call-with-string-output-port|)
 (close
   (1 0 . |core.io'string-output-port-values|)
   (push.iloc.0 . 0)
   (push.close
     (0 0)
     (push.iloc.1 . 0)
     (ret.subr.gloc.of |.extract-accumulated-string| "../stdlib/core/io.scm" . 527391))
   (ret.subr.gloc.of |.values| "../stdlib/core/io.scm" . 527367))
 (set.gloc.of |core.io'string-output-port-values|)
 (close
   (0 0 . |core.io'open-string-output-port|)
   (subr.gloc.of |.make-string-output-port| 0)
   (push)
   (apply.gloc.of |core.io'string-output-port-values| "../stdlib/core/io.scm" . 531463))
 (set.gloc.of |core.io'open-string-output-port|)
 (close
   (5 0 . |core.io'make-custom-binary-output-port|)
   (push.const . make-custom-binary-output-port)
   (push.const . 3)
   (push.const . 2)
   (push.iloc.0 . 0)
   (push.const . #f)
   (push.const . #f)
   (push.iloc.0 . 1)
   (push.iloc.0 . 2)
   (push.iloc.0 . 3)
   (push.iloc.0 . 4)
   (push.subr.gloc.of |.vector| 6 "../stdlib/core/io.scm" . 539666)
   (push.const . #f)
   (push.const . #f)
   (ret.subr.gloc.of |.open-port| "../stdlib/core/io.scm" . 535559))
 (set.gloc.of |core.io'make-custom-binary-output-port|)
 (close
   (5 0 . |core.io'make-custom-textual-output-port|)
   (extend.unbound . 4)
   (push.close
     (3 0 . bv-write!)
     (=n.iloc (0 . 2) 0 "../stdlib/core/io.scm" . 550930)
     (if.true
       (call
         (push.const . "")
         (push.const . 0)
         (push.const . 0)
         (apply.iloc (2 . 1) "../stdlib/core/io.scm" . 550942))
       (ret.const . 0))
     (push.iloc.0 . 2)
     (push.subr.gloc.of |.make-bytevector| 1 "../stdlib/core/io.scm" . 552993)
     (extend . 1)
     (push.iloc.1 . 0)
     (push.iloc.1 . 1)
     (push.iloc.0 . 0)
     (push.const . 0)
     (push.iloc.1 . 2)
     (subr.gloc.of |.bytevector-copy!| 5 "../stdlib/core/io.scm" . 554004)
     (push.iloc.0 . 0)
     (push.subr.gloc.of |.utf8->string| 1 "../stdlib/core/io.scm" . 555040)
     (extend . 1)
     (push.iloc.0 . 0)
     (push.const . 0)
     (call
       (push.iloc.0 . 0)
       (push.const . 0)
       (push.iloc.0 . 0)
       (push.subr.gloc.of |.string-length| 1 "../stdlib/core/io.scm" . 556064)
       (apply.iloc (4 . 1) "../stdlib/core/io.scm" . 557093))
     (push)
     (push.subr.gloc.of |.substring| 3 "../stdlib/core/io.scm" . 558137)
     (push.subr.gloc.of |.string->utf8| 1 "../stdlib/core/io.scm" . 558123)
     (ret.subr.gloc.of |.bytevector-length| "../stdlib/core/io.scm" . 558104))
   (push.close
     (1 0 . bv-get-position)
     (push.iloc.1 . 3)
     (push.iloc.0 . 0)
     (call (apply.iloc (2 . 2) "../stdlib/core/io.scm" . 562223))
     (push)
     (subr.gloc.of |.core-hashtable-set!| 3 "../stdlib/core/io.scm" . 562187)
     (ret.iloc 0 . 0))
   (push.close
     (1 0 . bv-set-position!)
     (push.iloc.1 . 3)
     (push.iloc.0 . 0)
     (push.const . #f)
     (push.subr.gloc.of |.core-hashtable-ref| 3 "../stdlib/core/io.scm" . 567314)
     (extend . 1)
     (iloc.0 . 0)
     (if.true (push.iloc.0 . 0) (apply.iloc (3 . 3) "../stdlib/core/io.scm" . 568355))
     (subr.gloc.of |.warning-level| 0 "../stdlib/core/io.scm" . 569362)
     (if.true
       (subr.gloc.of |.current-error-port| 0)
       (push)
       (push.const
         .
         "~&warning in set-port-position: expected return value of a call to get-position, but got ~u~%~!")
       (push.iloc.1 . 0)
       (subr.gloc.of |.format| 3 "../stdlib/core/io.scm" . 570386)
       (push.iloc.1 . 0)
       (apply.iloc (3 . 3) "../stdlib/core/io.scm" . 571410))
     (push.iloc.1 . 0)
     (apply.iloc (3 . 3) "../stdlib/core/io.scm" . 573458))
   (enclose . 3)
   (push.const . eqv?)
   (subr.gloc.of |.make-core-hashtable| 1 "../stdlib/core/io.scm" . 546840)
   (set.iloc (0 . 3))
   (push.const . make-custom-textual-output-port)
   (push.const . 3)
   (push.const . 2)
   (push.iloc.1 . 0)
   (push.const . #t)
   (push.const . #f)
   (call (iloc.1 . 1) (if.false.ret) (ret.iloc 0 . 0))
   (push)
   (call (iloc.1 . 2) (if.false.ret) (ret.iloc 0 . 1))
   (push)
   (call (iloc.1 . 3) (if.false.ret) (ret.iloc 0 . 2))
   (push)
   (push.iloc.1 . 4)
   (push.subr.gloc.of |.vector| 6 "../stdlib/core/io.scm" . 579602)
   (push.const . #f)
   (push.const . #t)
   (ret.subr.gloc.of |.open-port| "../stdlib/core/io.scm" . 575495))
 (set.gloc.of |core.io'make-custom-textual-output-port|)
 (close
   (1 1 . |core.io'open-file-input/output-port|)
   (push.iloc.0 . 1)
   (push.subr.gloc.of |.length| 1 (|.length| |options`1612*|))
   (push.const . 3)
   (subr.gloc.of |.<=| 2 (|.<=| (|.length| |options`1612*|) 3))
   (if.false.call
     (push.const . open-file-input/output-port)
     (push.const . "expected ~a to ~a, but ~a arguments given")
     (push.const . 1)
     (push.const . 4)
     (push.const . 1)
     (push.iloc.0 . 1)
     (push.subr.gloc.of |.length| 1 (|.length| |options`1612*|))
     (push.subr.gloc.of |.+| 2 (|.+| 1 (|.length| |options`1612*|)))
     (push.subr.gloc.of
       |.format|
       4
       (|.format|
         "expected ~a to ~a, but ~a arguments given"
         1
         4
         (|.+| 1 (|.length| |options`1612*|))))
     (push.iloc.0 . 0)
     (push.iloc.0 . 1)
     (push.subr.gloc.of |.cons*| 2 (|.cons*| |filename`1612*| |options`1612*|))
     (apply.gloc.of
       |.assertion-violation|
       (|.assertion-violation|
         'open-file-input/output-port
         (|.format|
           "expected ~a to ~a, but ~a arguments given"
           1
           4
           (|.+| 1 (|.length| |options`1612*|)))
         (|.cons*| |filename`1612*| |options`1612*|))))
   (push.close
     (3 0)
     (push.const . open-file-input/output-port)
     (push.const . 1)
     (push.const . 3)
     (push.iloc.1 . 0)
     (call
       (push.iloc.0 . 0)
       (push.const . 0)
       (push.subr.gloc.of |.tuple-ref| 2 "../stdlib/core/io.scm" . 596049)
       (const . type:enum-set)
       (if.not.eq?.ret.const . #f)
       (push.iloc.0 . 0)
       (call
         (call
           (push.const)
           (apply.gloc.of |core.io.assistants'make-file-options| "../stdlib/core/io.scm" . 596049))
         (push)
         (apply.gloc.of |core.enums'enum-set-universe| "../stdlib/core/io.scm" . 596049))
       (push)
       (apply.gloc.of |core.enums'enum-set-subset?| "../stdlib/core/io.scm" . 596049))
     (if.false.call
       (push.const . open-file-input/output-port)
       (push.const . "expected file-options object, but got ~r, as argument 2")
       (push.iloc.0 . 0)
       (push.subr.gloc.of |.format| 2 "../stdlib/core/io.scm" . 596049)
       (push.iloc.1 . 0)
       (push.iloc.1 . 1)
       (push.subr.gloc.of |.cons*| 2 "../stdlib/core/io.scm" . 596049)
       (apply.gloc.of |.assertion-violation| "../stdlib/core/io.scm" . 596049))
     (call
       (push.gloc.of |.+|)
       (call
         (push.gloc.of |.L534|)
         (call
           (push.iloc.0 . 0)
           (apply.gloc.of |core.enums'enum-set->list| "../stdlib/core/io.scm" . 596049))
         (push)
         (apply.gloc.of |.map| "../stdlib/core/io.scm" . 596049))
       (push)
       (apply.gloc.of |.apply| "../stdlib/core/io.scm" . 596049))
     (push)
     (call
       (push.iloc.0 . 1)
       (apply.gloc.of
         |core.io.assistants'port-lookup-buffer-mode-code|
         "../stdlib/core/io.scm"
         .
         597012))
     (push)
     (call
       (iloc.0 . 2)
       (if.false.ret)
       (push.const . open-file-input/output-port)
       (push.const . 4)
       (push.iloc.0 . 2)
       (apply.gloc.of |core.io'transcoder-descriptor| "../stdlib/core/io.scm" . 598052))
     (push)
     (ret.subr.gloc.of |.open-port| "../stdlib/core/io.scm" . 591881))
   (call
     (push.iloc.0 . 1)
     (push.subr.gloc.of |.length| 1 "../stdlib/core/io.scm" . 588845)
     (extend . 1)
     (=n.iloc (0 . 0) 3 "../stdlib/core/io.scm" . 588845)
     (if.true (ret.iloc 1 . 1))
     (=n.iloc (0 . 0) 2 (|.=| |argc`1615`1625*| 2))
     (if.true
       (push.iloc.1 . 1)
       (push.const . #f)
       (push.subr.gloc.of |.list| 1 (|.list| #f))
       (ret.subr.gloc.of |.append| (|.append| |options`1612*| (|.list| #f))))
     (=n.iloc (0 . 0) 1 "../stdlib/core/io.scm" . 588845)
     (if.true
       (push.iloc.1 . 1)
       (push.const . block)
       (push.const . #f)
       (push.subr.gloc.of |.list| 2 (|.list| 'block #f))
       (ret.subr.gloc.of |.append| (|.append| |options`1612*| (|.list| 'block #f))))
     (call
       (push.const)
       (apply.gloc.of |core.io.assistants'make-file-options| "../stdlib/core/io.scm" . 588845))
     (push)
     (push.const . block)
     (push.const . #f)
     (ret.subr.gloc.of |.list| (|.list| (|core.io.assistants'make-file-options| '()) 'block #f)))
   (push)
   (apply.gloc.of
     |.apply|
     (|.apply|
       (lambda (|file-options`1616*| |buffer-mode`1616*| |transcoder`1616*|)
         (|.open-port|
           'open-file-input/output-port
           1
           3
           |filename`1612*|
           (begin
             (or (and (|.eq?| (|.tuple-ref| |file-options`1616*| 0) 'type:enum-set)
                      (|core.enums'enum-set-subset?|
                        |file-options`1616*|
                        (|core.enums'enum-set-universe|
                          (|core.io.assistants'make-file-options| '()))))
                 (|.assertion-violation|
                   'open-file-input/output-port
                   (|.format|
                     "expected file-options object, but got ~r, as argument 2"
                     |file-options`1616*|)
                   (|.cons*| |filename`1612*| |options`1612*|)))
             (|.apply| |.+| (|.map| |.L534| (|core.enums'enum-set->list| |file-options`1616*|))))
           (|core.io.assistants'port-lookup-buffer-mode-code| |buffer-mode`1616*|)
           (and |transcoder`1616*|
                (|core.io'transcoder-descriptor|
                  'open-file-input/output-port
                  4
                  |transcoder`1616*|))))
       (let ((|argc`1615`1625*| (|.length| |options`1612*|)))
         (if (|.=| |argc`1615`1625*| 3)
             |options`1612*|
             (if (|.=| |argc`1615`1625*| 2)
                 (|.append| |options`1612*| (|.list| #f))
                 (if (|.=| |argc`1615`1625*| 1)
                     (|.append| |options`1612*| (|.list| 'block #f))
                     (|.list| (|core.io.assistants'make-file-options| '()) 'block #f))))))))
 (set.gloc.of |core.io'open-file-input/output-port|)
 (close
   (6 0 . |core.io'make-custom-binary-input/output-port|)
   (push.const . make-custom-binary-input/output-port)
   (push.const . 3)
   (push.const . 3)
   (push.iloc.0 . 0)
   (push.const . #f)
   (push.iloc.0 . 1)
   (push.iloc.0 . 2)
   (push.iloc.0 . 3)
   (push.iloc.0 . 4)
   (push.iloc.0 . 5)
   (push.subr.gloc.of |.vector| 6 "../stdlib/core/io.scm" . 606226)
   (push.const . #f)
   (push.const . #f)
   (ret.subr.gloc.of |.open-port| "../stdlib/core/io.scm" . 602119))
 (set.gloc.of |core.io'make-custom-binary-input/output-port|)
 (close
   (6 0 . |core.io'make-custom-textual-input/output-port|)
   (extend.unbound . 5)
   (push.close
     (3 0 . bv-read!)
     (=n.iloc (0 . 2) 0 "../stdlib/core/io.scm" . 617490)
     (if.true.ret.const . 0)
     (push.iloc.0 . 2)
     (push.const . 4)
     (push.subr.gloc.of |.div| 2 "../stdlib/core/io.scm" . 619550)
     (extend . 1)
     (push.iloc.0 . 0)
     (push.const . #\nul)
     (push.subr.gloc.of |.make-string| 2 "../stdlib/core/io.scm" . 620574)
     (extend . 1)
     (call
       (push.iloc.0 . 0)
       (push.const . 0)
       (push.iloc.1 . 0)
       (apply.iloc (4 . 1) "../stdlib/core/io.scm" . 621600))
     (push)
     (extend . 1)
     (=n.iloc (0 . 0) 0 "../stdlib/core/io.scm" . 622619)
     (if.true.ret.const . 0)
     (push.iloc.1 . 0)
     (push.const . 0)
     (push.iloc.0 . 0)
     (push.subr.gloc.of |.substring| 3 "../stdlib/core/io.scm" . 624697)
     (push.subr.gloc.of |.string->utf8| 1 "../stdlib/core/io.scm" . 624683)
     (extend . 1)
     (push.iloc.0 . 0)
     (push.subr.gloc.of |.bytevector-length| 1 "../stdlib/core/io.scm" . 625705)
     (extend . 1)
     (push.iloc.1 . 0)
     (push.const . 0)
     (push.iloc 5 . 0)
     (push.iloc 5 . 1)
     (push.iloc.0 . 0)
     (subr.gloc.of |.bytevector-copy!| 5 "../stdlib/core/io.scm" . 626717)
     (ret.iloc 0 . 0))
   (push.close
     (3 0 . bv-write!)
     (=n.iloc (0 . 2) 0 "../stdlib/core/io.scm" . 631826)
     (if.true
       (call
         (push.const . "")
         (push.const . 0)
         (push.const . 0)
         (apply.iloc (2 . 2) "../stdlib/core/io.scm" . 631838))
       (ret.const . 0))
     (push.iloc.0 . 2)
     (push.subr.gloc.of |.make-bytevector| 1 "../stdlib/core/io.scm" . 633889)
     (extend . 1)
     (push.iloc.1 . 0)
     (push.iloc.1 . 1)
     (push.iloc.0 . 0)
     (push.const . 0)
     (push.iloc.1 . 2)
     (subr.gloc.of |.bytevector-copy!| 5 "../stdlib/core/io.scm" . 634900)
     (push.iloc.0 . 0)
     (push.subr.gloc.of |.utf8->string| 1 "../stdlib/core/io.scm" . 635936)
     (extend . 1)
     (push.iloc.0 . 0)
     (push.const . 0)
     (call
       (push.iloc.0 . 0)
       (push.const . 0)
       (push.iloc.0 . 0)
       (push.subr.gloc.of |.string-length| 1 "../stdlib/core/io.scm" . 636960)
       (apply.iloc (4 . 2) "../stdlib/core/io.scm" . 637989))
     (push)
     (push.subr.gloc.of |.substring| 3 "../stdlib/core/io.scm" . 639033)
     (push.subr.gloc.of |.string->utf8| 1 "../stdlib/core/io.scm" . 639019)
     (ret.subr.gloc.of |.bytevector-length| "../stdlib/core/io.scm" . 639000))
   (push.close
     (1 0 . bv-get-position)
     (push.iloc.1 . 4)
     (push.iloc.0 . 0)
     (call (apply.iloc (2 . 3) "../stdlib/core/io.scm" . 643119))
     (push)
     (subr.gloc.of |.core-hashtable-set!| 3 "../stdlib/core/io.scm" . 643083)
     (ret.iloc 0 . 0))
   (push.close
     (1 0 . bv-set-position!)
     (push.iloc.1 . 4)
     (push.iloc.0 . 0)
     (push.const . #f)
     (push.subr.gloc.of |.core-hashtable-ref| 3 "../stdlib/core/io.scm" . 648210)
     (extend . 1)
     (iloc.0 . 0)
     (if.true (push.iloc.0 . 0) (apply.iloc (3 . 4) "../stdlib/core/io.scm" . 649251))
     (subr.gloc.of |.warning-level| 0 "../stdlib/core/io.scm" . 650258)
     (if.true
       (subr.gloc.of |.current-error-port| 0)
       (push)
       (push.const
         .
         "~&warning in set-port-position: expected return value of a call to get-position, but got ~u~%~!")
       (push.iloc.1 . 0)
       (subr.gloc.of |.format| 3 "../stdlib/core/io.scm" . 651282)
       (push.iloc.1 . 0)
       (apply.iloc (3 . 4) "../stdlib/core/io.scm" . 652306))
     (push.iloc.1 . 0)
     (apply.iloc (3 . 4) "../stdlib/core/io.scm" . 654354))
   (enclose . 4)
   (push.const . eqv?)
   (subr.gloc.of |.make-core-hashtable| 1 "../stdlib/core/io.scm" . 613400)
   (set.iloc (0 . 4))
   (push.const . make-custom-textual-input/output-port)
   (push.const . 3)
   (push.const . 3)
   (push.iloc.1 . 0)
   (push.const . #t)
   (call (iloc.1 . 1) (if.false.ret) (ret.iloc 0 . 0))
   (push)
   (call (iloc.1 . 2) (if.false.ret) (ret.iloc 0 . 1))
   (push)
   (call (iloc.1 . 3) (if.false.ret) (ret.iloc 0 . 2))
   (push)
   (call (iloc.1 . 4) (if.false.ret) (ret.iloc 0 . 3))
   (push)
   (push.iloc.1 . 5)
   (push.subr.gloc.of |.vector| 6 "../stdlib/core/io.scm" . 660498)
   (push.const . #f)
   (push.const . #t)
   (ret.subr.gloc.of |.open-port| "../stdlib/core/io.scm" . 656391))
 (set.gloc.of |core.io'make-custom-textual-input/output-port|)
 (close
   (2 0 . |core.io'call-with-input-file|)
   (call
     (push.iloc.0 . 0)
     (apply.gloc.of |core.io'open-input-file| "../stdlib/core/io.scm" . 668695))
   (push)
   (push.iloc.0 . 1)
   (apply.gloc.of |.call-with-port| "../stdlib/core/io.scm" . 668679))
 (set.gloc.of |core.io'call-with-input-file|)
 (close
   (2 0 . |core.io'call-with-output-file|)
   (call
     (push.iloc.0 . 0)
     (apply.gloc.of |core.io'open-output-file| "../stdlib/core/io.scm" . 672791))
   (push)
   (push.iloc.0 . 1)
   (apply.gloc.of |.call-with-port| "../stdlib/core/io.scm" . 672775))
 (set.gloc.of |core.io'call-with-output-file|)
 (close
   (2 0 . |core.io'with-input-from-file|)
   (call
     (push.iloc.0 . 0)
     (apply.gloc.of |core.io'open-input-file| "../stdlib/core/io.scm" . 676883))
   (push)
   (subr.gloc.of |.current-input-port| 0)
   (push)
   (extend . 2)
   (push.close
     (0 0)
     (push.iloc.1 . 0)
     (ret.subr.gloc.of |.set-current-input-port!| "../stdlib/core/io.scm" . 678933))
   (push.close
     (0 0)
     (call (apply.iloc (2 . 1) "../stdlib/core/io.scm" . 679968))
     (push)
     (extend . 1)
     (call
       (push.iloc 2 . 0)
       (apply.gloc.of |core.io'close-input-port| "../stdlib/core/io.scm" . 679978))
     (ret.iloc 0 . 0))
   (push.close
     (0 0)
     (push.iloc.1 . 1)
     (ret.subr.gloc.of |.set-current-input-port!| "../stdlib/core/io.scm" . 680981))
   (apply.gloc.of |.dynamic-wind| "../stdlib/core/io.scm" . 677897))
 (set.gloc.of |core.io'with-input-from-file|)
 (close
   (2 0 . |core.io'with-output-to-file|)
   (call
     (push.iloc.0 . 0)
     (apply.gloc.of |core.io'open-output-file| "../stdlib/core/io.scm" . 685075))
   (push)
   (subr.gloc.of |.current-output-port| 0)
   (push)
   (extend . 2)
   (push.close
     (0 0)
     (push.iloc.1 . 0)
     (ret.subr.gloc.of |.set-current-output-port!| "../stdlib/core/io.scm" . 687125))
   (push.close
     (0 0)
     (call (apply.iloc (2 . 1) "../stdlib/core/io.scm" . 688160))
     (push)
     (extend . 1)
     (call
       (push.iloc 2 . 0)
       (apply.gloc.of |core.io'close-output-port| "../stdlib/core/io.scm" . 688170))
     (ret.iloc 0 . 0))
   (push.close
     (0 0)
     (push.iloc.1 . 1)
     (ret.subr.gloc.of |.set-current-output-port!| "../stdlib/core/io.scm" . 689173))
   (apply.gloc.of |.dynamic-wind| "../stdlib/core/io.scm" . 686089))
 (set.gloc.of |core.io'with-output-to-file|)
 (close
   (1 0 . |core.io'open-input-file|)
   (push.iloc.0 . 0)
   (call
     (push.const)
     (apply.gloc.of |core.io.assistants'make-file-options| "../stdlib/core/io.scm" . 693286))
   (push)
   (push.const . block)
   (call (apply.gloc.of |core.io'native-transcoder| "../stdlib/core/io.scm" . 693321))
   (push)
   (apply.gloc.of |core.io'open-file-input-port| "../stdlib/core/io.scm" . 693255))
 (set.gloc.of |core.io'open-input-file|)
 (close
   (1 0 . |core.io'open-output-file|)
   (push.iloc.0 . 0)
   (call
     (push.const)
     (apply.gloc.of |core.io.assistants'make-file-options| "../stdlib/core/io.scm" . 697383))
   (push)
   (push.const . block)
   (call (apply.gloc.of |core.io'native-transcoder| "../stdlib/core/io.scm" . 697418))
   (push)
   (apply.gloc.of |core.io'open-file-output-port| "../stdlib/core/io.scm" . 697351))
 (set.gloc.of |core.io'open-output-file|)
 (close
   (1 0 . |core.io'close-input-port|)
   (push.iloc.0 . 0)
   (ret.subr.gloc.of |.close-port| "../stdlib/core/io.scm" . 701447))
 (set.gloc.of |core.io'close-input-port|)
 (close
   (1 0 . |core.io'close-output-port|)
   (push.iloc.0 . 0)
   (ret.subr.gloc.of |.close-port| "../stdlib/core/io.scm" . 705543))
 (set.gloc.of |core.io'close-output-port|)
 (close
   (0 1 . |core.io'open-temporary-file-port|)
   (push.gloc.of |.L561|)
   (call
     (push.iloc.0 . 0)
     (push.subr.gloc.of |.length| 1 "../stdlib/core/io.scm" . 711687)
     (extend . 1)
     (=n.iloc (0 . 0) 2 "../stdlib/core/io.scm" . 711687)
     (if.true (ret.iloc 1 . 0))
     (=n.iloc (0 . 0) 1 "../stdlib/core/io.scm" . 711687)
     (if.true
       (push.iloc.1 . 0)
       (push.const . #f)
       (push.subr.gloc.of |.list| 1 (|.list| #f))
       (ret.subr.gloc.of |.append| (|.append| |options`1718*| (|.list| #f))))
     (push.const . "temporary file")
     (push.const . #f)
     (ret.subr.gloc.of |.list| (|.list| "temporary file" #f)))
   (push)
   (apply.gloc.of
     |.apply|
     (|.apply|
       |.L561|
       (let ((|argc`1720`1723*| (|.length| |options`1718*|)))
         (if (|.=| |argc`1720`1723*| 2)
             |options`1718*|
             (if (|.=| |argc`1720`1723*| 1)
                 (|.append| |options`1718*| (|.list| #f))
                 (|.list| "temporary file" #f)))))))
 (set.gloc.of |core.io'open-temporary-file-port|)
 (call
   (push.const
     (<= import . |.<=|)
     (_ import . |._|)
     (|core.io.assistants'port-lookup-file-option-code| unbound)
     (... import . |....|)
     (begin import . |.begin|)
     (enum-set-universe import . |core.enums'enum-set-universe|)
     (x unbound)
     (buffer-mode import . |core.io'buffer-mode|)
     (|core.lists'for-all| unbound)
     (error-handling-mode import . |core.io'error-handling-mode|)
     (datum import . |core.syntax-case'datum|)
     (|core.io.assistants'port-lookup-buffer-mode-code| unbound)
     (who unbound)
     (enum-set-subset? import . |core.enums'enum-set-subset?|)
     (name unbound)
     (eol-style import . |core.io'eol-style|)
     (assertion-violation import . |.assertion-violation|)
     (enum-set? import . |core.enums'enum-set?|)
     (options unbound)
     (map import . |.map|)
     (let import . |.let|)
     (or import . |.or|)
     (with-syntax import . |core.syntax-case'with-syntax|)
     (n-limit unbound)
     (make-file-options import . |core.io.assistants'make-file-options|)
     (e unbound)
     (and import . |.and|)
     (|core.lists'list-of-unique-symbols?| unbound)
     (mode unbound)
     (apply import . |.apply|)
     (style unbound)
     (n-options unbound)
     (format import . |.format|)
     (file-options->bits import . |core.io'file-options->bits|)
     (|core.io.assistants'port-lookup-eol-style-code| unbound)
     (check-option-count import . |core.io'check-option-count|)
     (+ import . |.+|)
     (|core.io.assistants'port-lookup-error-handling-mode-code| unbound)
     (args unbound)
     (n-args unbound)
     (length import . |.length|)
     (quote import . |.quote|)
     (port-lookup-file-option-code import . |core.io.assistants'port-lookup-file-option-code|)
     (file-options import . |core.io'file-options|)
     (enum-set->list import . |core.enums'enum-set->list|)
     (lambda import . |.lambda|)
     (cons* import . |.cons*|))
   (extend . 1)
   (call
     (push.const . syntax)
     (push.const . |core.io'check-option-count|)
     (call
       (push.gloc.of |.L543|)
       (apply.gloc.of |.transformer-thunk| "../stdlib/core/io.scm" . 222213))
     (push)
     (push.iloc.0 . 0)
     (apply.gloc.of |.set-top-level-macro!| "../stdlib/core/io.scm" . 222213))
   (call
     (push.const . syntax)
     (push.const . |core.io'file-options|)
     (call
       (push.gloc.of |.L512|)
       (apply.gloc.of |.transformer-thunk| "../stdlib/core/io.scm" . 222213))
     (push)
     (push.iloc.0 . 0)
     (apply.gloc.of |.set-top-level-macro!| "../stdlib/core/io.scm" . 222213))
   (call
     (push.const . syntax)
     (push.const . |core.io'file-options->bits|)
     (push.const
       ...
       ()
       ("../stdlib/core/io.scm" . 245765)
       ((_ x who args)
        (begin
          (or (and (enum-set? x) (enum-set-subset? x (enum-set-universe (file-options))))
              (assertion-violation
                'who
                (format "expected file-options object, but got ~r, as argument 2" x)
                args))
          (apply + (map (lambda (e) (port-lookup-file-option-code e)) (enum-set->list x))))
        ((args . 0) (who . 0) (x . 0))
        (enum-set->list
          port-lookup-file-option-code
          e
          lambda
          map
          +
          apply
          format
          quote
          assertion-violation
          file-options
          enum-set-universe
          enum-set-subset?
          enum-set?
          and
          or
          begin)))
     (push.iloc.0 . 0)
     (apply.gloc.of |.set-top-level-macro!| "../stdlib/core/io.scm" . 222213))
   (call
     (push.const . syntax)
     (push.const . |core.io'buffer-mode|)
     (call
       (push.gloc.of |.L523|)
       (apply.gloc.of |.transformer-thunk| "../stdlib/core/io.scm" . 222213))
     (push)
     (push.iloc.0 . 0)
     (apply.gloc.of |.set-top-level-macro!| "../stdlib/core/io.scm" . 222213))
   (call
     (push.const . syntax)
     (push.const . |core.io'eol-style|)
     (call
       (push.gloc.of |.L544|)
       (apply.gloc.of |.transformer-thunk| "../stdlib/core/io.scm" . 222213))
     (push)
     (push.iloc.0 . 0)
     (apply.gloc.of |.set-top-level-macro!| "../stdlib/core/io.scm" . 222213))
   (push.const . syntax)
   (push.const . |core.io'error-handling-mode|)
   (call
     (push.gloc.of |.L532|)
     (apply.gloc.of |.transformer-thunk| "../stdlib/core/io.scm" . 222213))
   (push)
   (push.iloc.0 . 0)
   (apply.gloc.of |.set-top-level-macro!| "../stdlib/core/io.scm" . 222213))
 (push.const . core.io)
 (push.const . #f)
 (push.const
   (file-options import . |core.io'file-options|)
   (buffer-mode import . |core.io'buffer-mode|)
   (buffer-mode? import . |core.io'buffer-mode?|)
   (utf-8-codec import . |core.io'utf-8-codec|)
   (utf-16-codec import . |core.io'utf-16-codec|)
   (latin-1-codec import . |core.io'latin-1-codec|)
   (eol-style import . |core.io'eol-style|)
   (error-handling-mode import . |core.io'error-handling-mode|)
   (make-transcoder import . |core.io'make-transcoder|)
   (transcoder-codec import . |core.io'transcoder-codec|)
   (transcoder-eol-style import . |core.io'transcoder-eol-style|)
   (transcoder-error-handling-mode import . |core.io'transcoder-error-handling-mode|)
   (native-transcoder import . |core.io'native-transcoder|)
   (native-eol-style import . |core.io'native-eol-style|)
   (bytevector->string import . |core.io'bytevector->string|)
   (string->bytevector import . |core.io'string->bytevector|)
   (eof-object import . |.eof-object|)
   (eof-object? import . |.eof-object?|)
   (port? import . |.port?|)
   (port-transcoder import . |core.io'port-transcoder|)
   (textual-port? import . |core.io'textual-port?|)
   (binary-port? import . |core.io'binary-port?|)
   (transcoded-port import . |core.io'transcoded-port|)
   (port-has-port-position? import . |.port-has-port-position?|)
   (port-position import . |.port-position|)
   (port-has-set-port-position!? import . |.port-has-set-port-position!?|)
   (set-port-position! import . |.set-port-position!|)
   (close-port import . |.close-port|)
   (call-with-port import . |.call-with-port|)
   (input-port? import . |.input-port?|)
   (port-eof? import . |.port-eof?|)
   (open-file-input-port import . |core.io'open-file-input-port|)
   (open-bytevector-input-port import . |core.io'open-bytevector-input-port|)
   (open-string-input-port import . |core.io'open-string-input-port|)
   (standard-input-port import . |.standard-input-port|)
   (current-input-port import . |.current-input-port|)
   (get-u8 import . |.get-u8|)
   (lookahead-u8 import . |.lookahead-u8|)
   (get-bytevector-n import . |.get-bytevector-n|)
   (get-bytevector-n! import . |.get-bytevector-n!|)
   (get-bytevector-some import . |.get-bytevector-some|)
   (get-bytevector-all import . |.get-bytevector-all|)
   (get-char import . |.get-char|)
   (lookahead-char import . |.lookahead-char|)
   (get-string-n import . |.get-string-n|)
   (get-string-n! import . |.get-string-n!|)
   (get-string-all import . |.get-string-all|)
   (get-line import . |.get-line|)
   (get-datum import . |.get-datum|)
   (output-port? import . |.output-port?|)
   (flush-output-port import . |.flush-output-port|)
   (output-port-buffer-mode import . |.output-port-buffer-mode|)
   (open-file-output-port import . |core.io'open-file-output-port|)
   (open-bytevector-output-port import . |core.io'open-bytevector-output-port|)
   (call-with-bytevector-output-port import . |core.io'call-with-bytevector-output-port|)
   (open-string-output-port import . |core.io'open-string-output-port|)
   (call-with-string-output-port import . |core.io'call-with-string-output-port|)
   (standard-output-port import . |.standard-output-port|)
   (standard-error-port import . |.standard-error-port|)
   (current-output-port import . |.current-output-port|)
   (current-error-port import . |.current-error-port|)
   (put-u8 import . |.put-u8|)
   (put-bytevector import . |.put-bytevector|)
   (put-char import . |.put-char|)
   (put-string import . |.put-string|)
   (put-datum import . |.put-datum|)
   (open-file-input/output-port import . |core.io'open-file-input/output-port|)
   (call-with-input-file import . |core.io'call-with-input-file|)
   (call-with-output-file import . |core.io'call-with-output-file|)
   (with-input-from-file import . |core.io'with-input-from-file|)
   (with-output-to-file import . |core.io'with-output-to-file|)
   (open-input-file import . |core.io'open-input-file|)
   (open-output-file import . |core.io'open-output-file|)
   (close-input-port import . |core.io'close-input-port|)
   (close-output-port import . |core.io'close-output-port|)
   (read-char import . |.read-char|)
   (peek-char import . |.peek-char|)
   (read import . |.read|)
   (write-char import . |.write-char|)
   (newline import . |.newline|)
   (display import . |.display|)
   (write import . |.write|)
   (make-custom-binary-input-port import . |core.io'make-custom-binary-input-port|)
   (make-custom-textual-input-port import . |core.io'make-custom-textual-input-port|)
   (make-custom-binary-output-port import . |core.io'make-custom-binary-output-port|)
   (make-custom-textual-output-port import . |core.io'make-custom-textual-output-port|)
   (make-custom-binary-input/output-port import . |core.io'make-custom-binary-input/output-port|)
   (make-custom-textual-input/output-port import . |core.io'make-custom-textual-input/output-port|)
   (&i/o import . |.&i/o|)
   (make-i/o-error import . |.make-i/o-error|)
   (i/o-error? import . |.i/o-error?|)
   (&i/o-read import . |.&i/o-read|)
   (make-i/o-read-error import . |.make-i/o-read-error|)
   (i/o-read-error? import . |.i/o-read-error?|)
   (&i/o-write import . |.&i/o-write|)
   (make-i/o-write-error import . |.make-i/o-write-error|)
   (i/o-write-error? import . |.i/o-write-error?|)
   (&i/o-invalid-position import . |.&i/o-invalid-position|)
   (make-i/o-invalid-position-error import . |.make-i/o-invalid-position-error|)
   (i/o-invalid-position-error? import . |.i/o-invalid-position-error?|)
   (i/o-error-position import . |.i/o-error-position|)
   (&i/o-filename import . |.&i/o-filename|)
   (make-i/o-filename-error import . |.make-i/o-filename-error|)
   (i/o-filename-error? import . |.i/o-filename-error?|)
   (i/o-error-filename import . |.i/o-error-filename|)
   (&i/o-file-protection import . |.&i/o-file-protection|)
   (make-i/o-file-protection-error import . |.make-i/o-file-protection-error|)
   (i/o-file-protection-error? import . |.i/o-file-protection-error?|)
   (&i/o-file-is-read-only import . |.&i/o-file-is-read-only|)
   (make-i/o-file-is-read-only-error import . |.make-i/o-file-is-read-only-error|)
   (i/o-file-is-read-only-error? import . |.i/o-file-is-read-only-error?|)
   (&i/o-file-already-exists import . |.&i/o-file-already-exists|)
   (make-i/o-file-already-exists-error import . |.make-i/o-file-already-exists-error|)
   (i/o-file-already-exists-error? import . |.i/o-file-already-exists-error?|)
   (&i/o-file-does-not-exist import . |.&i/o-file-does-not-exist|)
   (make-i/o-file-does-not-exist-error import . |.make-i/o-file-does-not-exist-error|)
   (i/o-file-does-not-exist-error? import . |.i/o-file-does-not-exist-error?|)
   (&i/o-port import . |.&i/o-port|)
   (make-i/o-port-error import . |.make-i/o-port-error|)
   (i/o-port-error? import . |.i/o-port-error?|)
   (i/o-error-port import . |.i/o-error-port|)
   (&i/o-decoding import . |.&i/o-decoding|)
   (make-i/o-decoding-error import . |.make-i/o-decoding-error|)
   (i/o-decoding-error? import . |.i/o-decoding-error?|)
   (&i/o-encoding import . |.&i/o-encoding|)
   (make-i/o-encoding-error import . |.make-i/o-encoding-error|)
   (i/o-encoding-error? import . |.i/o-encoding-error?|)
   (i/o-encoding-error-char import . |.i/o-encoding-error-char|)
   (open-temporary-file-port import . |core.io'open-temporary-file-port|)
   (format import . |.format|))
 (apply.gloc.of |.intern-scheme-library| "../stdlib/core/io.scm" . 261130))

((call
   (push.const core optargs)
   (apply.gloc.of |.require-scheme-library| (|.require-scheme-library| '(core optargs))))
 (call
   (push.const core lists)
   (apply.gloc.of |.require-scheme-library| (|.require-scheme-library| '(core lists))))
 (call
   (push.const core io)
   (apply.gloc.of |.require-scheme-library| (|.require-scheme-library| '(core io))))
 (call
   (push.const core primitives)
   (apply.gloc.of |.require-scheme-library| (|.require-scheme-library| '(core primitives))))
 (push.const . core.files)
 (push.const . #f)
 (push.const
   (file-exists? import . |.file-exists?|)
   (delete-file import . |.delete-file|)
   (directory-list import . |.directory-list|)
   (current-directory import . |.current-directory|)
   (&i/o import . |.&i/o|)
   (make-i/o-error import . |.make-i/o-error|)
   (i/o-error? import . |.i/o-error?|)
   (&i/o-read import . |.&i/o-read|)
   (make-i/o-read-error import . |.make-i/o-read-error|)
   (i/o-read-error? import . |.i/o-read-error?|)
   (&i/o-write import . |.&i/o-write|)
   (make-i/o-write-error import . |.make-i/o-write-error|)
   (i/o-write-error? import . |.i/o-write-error?|)
   (&i/o-invalid-position import . |.&i/o-invalid-position|)
   (make-i/o-invalid-position-error import . |.make-i/o-invalid-position-error|)
   (i/o-invalid-position-error? import . |.i/o-invalid-position-error?|)
   (i/o-error-position import . |.i/o-error-position|)
   (&i/o-filename import . |.&i/o-filename|)
   (make-i/o-filename-error import . |.make-i/o-filename-error|)
   (i/o-filename-error? import . |.i/o-filename-error?|)
   (i/o-error-filename import . |.i/o-error-filename|)
   (&i/o-file-protection import . |.&i/o-file-protection|)
   (make-i/o-file-protection-error import . |.make-i/o-file-protection-error|)
   (i/o-file-protection-error? import . |.i/o-file-protection-error?|)
   (&i/o-file-is-read-only import . |.&i/o-file-is-read-only|)
   (make-i/o-file-is-read-only-error import . |.make-i/o-file-is-read-only-error|)
   (i/o-file-is-read-only-error? import . |.i/o-file-is-read-only-error?|)
   (&i/o-file-already-exists import . |.&i/o-file-already-exists|)
   (make-i/o-file-already-exists-error import . |.make-i/o-file-already-exists-error|)
   (i/o-file-already-exists-error? import . |.i/o-file-already-exists-error?|)
   (&i/o-file-does-not-exist import . |.&i/o-file-does-not-exist|)
   (make-i/o-file-does-not-exist-error import . |.make-i/o-file-does-not-exist-error|)
   (i/o-file-does-not-exist-error? import . |.i/o-file-does-not-exist-error?|)
   (&i/o-port import . |.&i/o-port|)
   (make-i/o-port-error import . |.make-i/o-port-error|)
   (i/o-port-error? import . |.i/o-port-error?|)
   (i/o-error-port import . |.i/o-error-port|))
 (apply.gloc.of
   |.intern-scheme-library|
   (|.intern-scheme-library|
     'core.files
     #f
     '((file-exists? import . |.file-exists?|)
       (delete-file import . |.delete-file|)
       (directory-list import . |.directory-list|)
       (current-directory import . |.current-directory|)
       (&i/o import . |.&i/o|)
       (make-i/o-error import . |.make-i/o-error|)
       (i/o-error? import . |.i/o-error?|)
       (&i/o-read import . |.&i/o-read|)
       (make-i/o-read-error import . |.make-i/o-read-error|)
       (i/o-read-error? import . |.i/o-read-error?|)
       (&i/o-write import . |.&i/o-write|)
       (make-i/o-write-error import . |.make-i/o-write-error|)
       (i/o-write-error? import . |.i/o-write-error?|)
       (&i/o-invalid-position import . |.&i/o-invalid-position|)
       (make-i/o-invalid-position-error import . |.make-i/o-invalid-position-error|)
       (i/o-invalid-position-error? import . |.i/o-invalid-position-error?|)
       (i/o-error-position import . |.i/o-error-position|)
       (&i/o-filename import . |.&i/o-filename|)
       (make-i/o-filename-error import . |.make-i/o-filename-error|)
       (i/o-filename-error? import . |.i/o-filename-error?|)
       (i/o-error-filename import . |.i/o-error-filename|)
       (&i/o-file-protection import . |.&i/o-file-protection|)
       (make-i/o-file-protection-error import . |.make-i/o-file-protection-error|)
       (i/o-file-protection-error? import . |.i/o-file-protection-error?|)
       (&i/o-file-is-read-only import . |.&i/o-file-is-read-only|)
       (make-i/o-file-is-read-only-error import . |.make-i/o-file-is-read-only-error|)
       (i/o-file-is-read-only-error? import . |.i/o-file-is-read-only-error?|)
       (&i/o-file-already-exists import . |.&i/o-file-already-exists|)
       (make-i/o-file-already-exists-error import . |.make-i/o-file-already-exists-error|)
       (i/o-file-already-exists-error? import . |.i/o-file-already-exists-error?|)
       (&i/o-file-does-not-exist import . |.&i/o-file-does-not-exist|)
       (make-i/o-file-does-not-exist-error import . |.make-i/o-file-does-not-exist-error|)
       (i/o-file-does-not-exist-error? import . |.i/o-file-does-not-exist-error?|)
       (&i/o-port import . |.&i/o-port|)
       (make-i/o-port-error import . |.make-i/o-port-error|)
       (i/o-port-error? import . |.i/o-port-error?|)
       (i/o-error-port import . |.i/o-error-port|)))))

((close
   (0 0)
   (apply.gloc.of
     |core.io'open-bytevector-output-port|
     "../stdlib/core/bytevector-transcoders.scm"
     .
     24622))
 (set.gloc.of |.L628|)
 (close
   (0 0)
   (apply.gloc.of
     |core.io'open-bytevector-output-port|
     "../stdlib/core/bytevector-transcoders.scm"
     .
     99374))
 (set.gloc.of |.L636|)
 (call
   (push.const core bytevectors)
   (apply.gloc.of |.require-scheme-library| "../stdlib/core/bytevector-transcoders.scm" . 24622))
 (call
   (push.const core primitives)
   (apply.gloc.of |.require-scheme-library| "../stdlib/core/bytevector-transcoders.scm" . 24622))
 (call
   (push.const core io)
   (apply.gloc.of |.require-scheme-library| "../stdlib/core/bytevector-transcoders.scm" . 24622))
 (call
   (push.const core optargs)
   (apply.gloc.of |.require-scheme-library| "../stdlib/core/bytevector-transcoders.scm" . 24622))
 (call
   (push.const core intrinsics)
   (apply.gloc.of |.require-scheme-library| "../stdlib/core/bytevector-transcoders.scm" . 24622))
 (close
   (1 1 . |core.bytevector-transcoders'string->utf32|)
   (call
     (iloc.0 . 1)
     (if.pair?
       (push.iloc.0 . 1)
       (ret.subr.gloc.of |.car| "../stdlib/core/bytevector-transcoders.scm" . 19491))
     (ret.const . big))
   (push)
   (extend . 1)
   (push.iloc.1 . 0)
   (push.subr.gloc.of |.string-length| 1 "../stdlib/core/bytevector-transcoders.scm" . 20496)
   (push.const . 0)
   (subr.gloc.of |.=| 2 "../stdlib/core/bytevector-transcoders.scm" . 20493)
   (if.true.ret.const . #u8())
   (push.iloc.1 . 0)
   (push.subr.gloc.of
     |.make-string-input-port|
     1
     "../stdlib/core/bytevector-transcoders.scm"
     .
     22554)
   (push.const . 4)
   (push.subr.gloc.of |.make-bytevector| 1 "../stdlib/core/bytevector-transcoders.scm" . 23576)
   (extend . 2)
   (push.gloc.of |.L628|)
   (push.close
     (2 0)
     (extend.enclose+
       (1 0 . loop)
       (push.iloc.0 . 0)
       (subr.gloc.of |.eof-object?| 1 "../stdlib/core/bytevector-transcoders.scm" . 26650)
       (if.true (apply.iloc (2 . 1) "../stdlib/core/bytevector-transcoders.scm" . 26667))
       (push.iloc 3 . 1)
       (push.const . 0)
       (push.iloc.0 . 0)
       (push.subr.gloc.of |.char->integer| 1 "../stdlib/core/bytevector-transcoders.scm" . 28725)
       (push.iloc 4 . 0)
       (subr.gloc.of |.bytevector-u32-set!| 4 "../stdlib/core/bytevector-transcoders.scm" . 28698)
       (push.iloc 2 . 0)
       (push.iloc 3 . 1)
       (subr.gloc.of |.put-bytevector| 2 "../stdlib/core/bytevector-transcoders.scm" . 29722)
       (push.iloc 3 . 0)
       (push.subr.gloc.of |.get-char| 1 "../stdlib/core/bytevector-transcoders.scm" . 30752)
       (apply.iloc+ (1 . 0) "../stdlib/core/bytevector-transcoders.scm" . 30746))
     (push.iloc 2 . 0)
     (push.subr.gloc.of |.get-char| 1 "../stdlib/core/bytevector-transcoders.scm" . 25632)
     (apply.iloc+ (0 . 0) "../stdlib/core/bytevector-transcoders.scm" . 26643))
   (apply.gloc.of
     |.call-with-values|
     (|.call-with-values|
       |.L628|
       (lambda (|output`1738*| |extract`1738*|)
         (letrec* ((|loop`1742*|
                     (lambda (|ch`1743*|)
                       (if (|.eof-object?| |ch`1743*|)
                           (|extract`1738*|)
                           (begin
                             (|.bytevector-u32-set!|
                               |buf`1736*|
                               0
                               (|.char->integer| |ch`1743*|)
                               |endian`1734*|)
                             (|.put-bytevector| |output`1738*| |buf`1736*|)
                             (|loop`1742*| (|.get-char| |input`1736*|)))))))
           (|loop`1742*| (|.get-char| |input`1736*|)))))))
 (set.gloc.of |core.bytevector-transcoders'string->utf32|)
 (close
   (1 0 . |core.bytevector-transcoders'test-utf32-bom|)
   (push.iloc.0 . 0)
   (push.subr.gloc.of |.bytevector-length| 1 "../stdlib/core/bytevector-transcoders.scm" . 34832)
   (push.const . 4)
   (subr.gloc.of |.>=| 2 "../stdlib/core/bytevector-transcoders.scm" . 34828)
   (if.false.ret)
   (push.const . 4)
   (push.subr.gloc.of |.make-bytevector| 1 "../stdlib/core/bytevector-transcoders.scm" . 35863)
   (extend . 1)
   (push.iloc.1 . 0)
   (push.const . 0)
   (push.iloc.0 . 0)
   (push.const . 0)
   (push.const . 4)
   (subr.gloc.of |.bytevector-copy!| 5 "../stdlib/core/bytevector-transcoders.scm" . 36878)
   (push.iloc.0 . 0)
   (push.const . #u8(0 0 254 255))
   (subr.gloc.of |.equal?| 2 "../stdlib/core/bytevector-transcoders.scm" . 37909)
   (if.true.ret.const . big)
   (push.iloc.0 . 0)
   (push.const . #u8(255 254 0 0))
   (subr.gloc.of |.equal?| 2 "../stdlib/core/bytevector-transcoders.scm" . 38933)
   (if.false.ret)
   (ret.const . little))
 (set.gloc.of |core.bytevector-transcoders'test-utf32-bom|)
 (close
   (4 0 . |core.bytevector-transcoders'transcode-utf32->string|)
   (subr.gloc.of |.make-string-output-port| 0)
   (push)
   (extend . 1)
   (extend.enclose+
     (2 0 . loop)
     (=n.iloc (0 . 1) 0 "../stdlib/core/bytevector-transcoders.scm" . 46098)
     (if.true
       (push.iloc 2 . 0)
       (ret.subr.gloc.of
         |.extract-accumulated-string|
         "../stdlib/core/bytevector-transcoders.scm"
         .
         46109))
     (>=n.iloc (0 . 1) 4 "../stdlib/core/bytevector-transcoders.scm" . 47122)
     (if.true
       (call
         (push.iloc 3 . 2)
         (push.iloc.0 . 0)
         (push.iloc 3 . 3)
         (push.subr.gloc.of
           |.bytevector-u32-ref|
           3
           "../stdlib/core/bytevector-transcoders.scm"
           .
           48156)
         (extend . 1)
         (>n.iloc (0 . 0) 1114111 "../stdlib/core/bytevector-transcoders.scm" . 49179)
         (if.true
           (push.iloc 3 . 0)
           (push.const . #\�)
           (ret.subr.gloc.of |.put-char| "../stdlib/core/bytevector-transcoders.scm" . 49195))
         (push.const . 55296)
         (push.iloc.0 . 0)
         (push.const . 57343)
         (subr.gloc.of |.<=| 3 "../stdlib/core/bytevector-transcoders.scm" . 50203)
         (if.true
           (push.iloc 3 . 0)
           (push.const . #\�)
           (ret.subr.gloc.of |.put-char| "../stdlib/core/bytevector-transcoders.scm" . 50225))
         (push.iloc 3 . 0)
         (push.iloc.0 . 0)
         (push.subr.gloc.of |.integer->char| 1 "../stdlib/core/bytevector-transcoders.scm" . 51249)
         (ret.subr.gloc.of |.put-char| "../stdlib/core/bytevector-transcoders.scm" . 51232))
       (push.n+.iloc (0 . 0) 4 "../stdlib/core/bytevector-transcoders.scm" . 52248)
       (push.n+.iloc (0 . 1) -4 "../stdlib/core/bytevector-transcoders.scm" . 52256)
       (apply.iloc+ (1 . 0) "../stdlib/core/bytevector-transcoders.scm" . 52242))
     (push.iloc 2 . 0)
     (push.const . #\�)
     (subr.gloc.of |.put-char| 2 "../stdlib/core/bytevector-transcoders.scm" . 54290)
     (push.iloc 2 . 0)
     (ret.subr.gloc.of
       |.extract-accumulated-string|
       "../stdlib/core/bytevector-transcoders.scm"
       .
       55314))
   (push.iloc 2 . 0)
   (push.iloc 2 . 1)
   (apply.iloc+ (0 . 0) "../stdlib/core/bytevector-transcoders.scm" . 46091))
 (set.gloc.of |core.bytevector-transcoders'transcode-utf32->string|)
 (close
   (2 1 . |core.bytevector-transcoders'utf32->string|)
   (call
     (iloc.0 . 2)
     (if.not.pair?.ret.const . #f)
     (push.iloc.0 . 2)
     (ret.subr.gloc.of |.car| "../stdlib/core/bytevector-transcoders.scm" . 61456))
   (if.true
     (push.const . 0)
     (push.iloc.0 . 0)
     (push.subr.gloc.of |.bytevector-length| 1 "../stdlib/core/bytevector-transcoders.scm" . 61483)
     (push.iloc.0 . 0)
     (push.iloc.0 . 1)
     (apply.gloc.of
       |core.bytevector-transcoders'transcode-utf32->string|
       "../stdlib/core/bytevector-transcoders.scm"
       .
       61456))
   (call
     (push.iloc.0 . 0)
     (apply.gloc.of
       |core.bytevector-transcoders'test-utf32-bom|
       "../stdlib/core/bytevector-transcoders.scm"
       .
       62480))
   (push)
   (extend . 1)
   (iloc.0 . 0)
   (if.true
     (push.const . 4)
     (push.iloc.1 . 0)
     (push.subr.gloc.of |.bytevector-length| 1 "../stdlib/core/bytevector-transcoders.scm" . 64563)
     (push.const . 4)
     (push.subr.gloc.of |.-| 2 "../stdlib/core/bytevector-transcoders.scm" . 64560)
     (push.iloc.1 . 0)
     (push.iloc.0 . 0)
     (apply.gloc.of
       |core.bytevector-transcoders'transcode-utf32->string|
       "../stdlib/core/bytevector-transcoders.scm"
       .
       64533))
   (push.const . 0)
   (push.iloc.1 . 0)
   (push.subr.gloc.of |.bytevector-length| 1 "../stdlib/core/bytevector-transcoders.scm" . 66603)
   (push.iloc.1 . 0)
   (push.iloc.1 . 1)
   (apply.gloc.of
     |core.bytevector-transcoders'transcode-utf32->string|
     "../stdlib/core/bytevector-transcoders.scm"
     .
     66576))
 (set.gloc.of |core.bytevector-transcoders'utf32->string|)
 (close
   (1 0 . |core.bytevector-transcoders'encode-surrogates|)
   (push.n+.iloc (0 . 0) -65536 "../stdlib/core/bytevector-transcoders.scm" . 70672)
   (extend . 1)
   (push.iloc.0 . 0)
   (push.const . 1024)
   (push.subr.gloc.of |.div| 2 "../stdlib/core/bytevector-transcoders.scm" . 71701)
   (push.const . 55296)
   (push.subr.gloc.of |.+| 2 "../stdlib/core/bytevector-transcoders.scm" . 71698)
   (call
     (push.iloc.0 . 0)
     (push.const . 1024)
     (apply.gloc.of |.mod| "../stdlib/core/bytevector-transcoders.scm" . 72725))
   (push)
   (push.const . 56320)
   (push.subr.gloc.of |.+| 2 "../stdlib/core/bytevector-transcoders.scm" . 72722)
   (ret.subr.gloc.of |.values| "../stdlib/core/bytevector-transcoders.scm" . 73739))
 (set.gloc.of |core.bytevector-transcoders'encode-surrogates|)
 (close
   (2 0 . |core.bytevector-transcoders'decode-surrogates|)
   (push.n+.iloc (0 . 0) -55296 "../stdlib/core/bytevector-transcoders.scm" . 77847)
   (push.const . 1024)
   (push.subr.gloc.of |.*| 2 "../stdlib/core/bytevector-transcoders.scm" . 77844)
   (push.n+.iloc (0 . 1) -56320 "../stdlib/core/bytevector-transcoders.scm" . 77869)
   (push.const . 65536)
   (push.subr.gloc.of |.+| 3 "../stdlib/core/bytevector-transcoders.scm" . 77841)
   (extend . 1)
   (>n.iloc (0 . 0) 1114111 "../stdlib/core/bytevector-transcoders.scm" . 78864)
   (if.true.ret.const . #\�)
   (push.const . 55296)
   (push.iloc.0 . 0)
   (push.const . 57343)
   (subr.gloc.of |.<=| 3 "../stdlib/core/bytevector-transcoders.scm" . 79888)
   (if.true.ret.const . #\�)
   (push.iloc.0 . 0)
   (ret.subr.gloc.of |.integer->char| "../stdlib/core/bytevector-transcoders.scm" . 80917))
 (set.gloc.of |core.bytevector-transcoders'decode-surrogates|)
 (close
   (1 0 . |core.bytevector-transcoders'test-utf16-bom|)
   (push.iloc.0 . 0)
   (push.subr.gloc.of |.bytevector-length| 1 "../stdlib/core/bytevector-transcoders.scm" . 85008)
   (push.const . 2)
   (subr.gloc.of |.>=| 2 "../stdlib/core/bytevector-transcoders.scm" . 85004)
   (if.false.ret)
   (push.const . 2)
   (push.subr.gloc.of |.make-bytevector| 1 "../stdlib/core/bytevector-transcoders.scm" . 86039)
   (extend . 1)
   (push.iloc.1 . 0)
   (push.const . 0)
   (push.iloc.0 . 0)
   (push.const . 0)
   (push.const . 2)
   (subr.gloc.of |.bytevector-copy!| 5 "../stdlib/core/bytevector-transcoders.scm" . 87054)
   (push.iloc.0 . 0)
   (push.const . #u8(254 255))
   (subr.gloc.of |.equal?| 2 "../stdlib/core/bytevector-transcoders.scm" . 88085)
   (if.true.ret.const . big)
   (push.iloc.0 . 0)
   (push.const . #u8(255 254))
   (subr.gloc.of |.equal?| 2 "../stdlib/core/bytevector-transcoders.scm" . 89109)
   (if.false.ret)
   (ret.const . little))
 (set.gloc.of |core.bytevector-transcoders'test-utf16-bom|)
 (close
   (1 1 . |core.bytevector-transcoders'string->utf16|)
   (call
     (iloc.0 . 1)
     (if.pair?
       (push.iloc.0 . 1)
       (ret.subr.gloc.of |.car| "../stdlib/core/bytevector-transcoders.scm" . 94243))
     (ret.const . big))
   (push)
   (extend . 1)
   (push.iloc.1 . 0)
   (push.subr.gloc.of |.string-length| 1 "../stdlib/core/bytevector-transcoders.scm" . 95248)
   (push.const . 0)
   (subr.gloc.of |.=| 2 "../stdlib/core/bytevector-transcoders.scm" . 95245)
   (if.true.ret.const . #u8())
   (push.iloc.1 . 0)
   (push.subr.gloc.of
     |.make-string-input-port|
     1
     "../stdlib/core/bytevector-transcoders.scm"
     .
     97306)
   (push.const . 2)
   (push.subr.gloc.of |.make-bytevector| 1 "../stdlib/core/bytevector-transcoders.scm" . 98328)
   (extend . 2)
   (push.gloc.of |.L636|)
   (push.close
     (2 0)
     (extend.enclose+
       (1 0 . loop)
       (push.iloc.0 . 0)
       (subr.gloc.of |.eof-object?| 1 "../stdlib/core/bytevector-transcoders.scm" . 101402)
       (if.true (apply.iloc (2 . 1) "../stdlib/core/bytevector-transcoders.scm" . 101419))
       (push.iloc.0 . 0)
       (push.subr.gloc.of |.char->integer| 1 "../stdlib/core/bytevector-transcoders.scm" . 103460)
       (extend . 1)
       (>=n.iloc (0 . 0) 65536 "../stdlib/core/bytevector-transcoders.scm" . 104483)
       (if.true
         (call
           (push.close
             (0 0)
             (push.iloc.1 . 0)
             (apply.gloc.of
               |core.bytevector-transcoders'encode-surrogates|
               "../stdlib/core/bytevector-transcoders.scm"
               .
               105534))
           (push.close
             (2 0)
             (push.iloc 5 . 1)
             (push.const . 0)
             (push.iloc.0 . 0)
             (push.iloc 6 . 0)
             (subr.gloc.of
               |.bytevector-u16-set!|
               4
               "../stdlib/core/bytevector-transcoders.scm"
               .
               106533)
             (push.iloc 4 . 0)
             (push.iloc 5 . 1)
             (subr.gloc.of |.put-bytevector| 2 "../stdlib/core/bytevector-transcoders.scm" . 107557)
             (push.iloc 5 . 1)
             (push.const . 0)
             (push.iloc.0 . 1)
             (push.iloc 6 . 0)
             (subr.gloc.of
               |.bytevector-u16-set!|
               4
               "../stdlib/core/bytevector-transcoders.scm"
               .
               108581)
             (push.iloc 4 . 0)
             (push.iloc 5 . 1)
             (ret.subr.gloc.of
               |.put-bytevector|
               "../stdlib/core/bytevector-transcoders.scm"
               .
               109605))
           (apply.gloc.of
             |.call-with-values|
             (|.call-with-values|
               (lambda () (|core.bytevector-transcoders'encode-surrogates| |sv`1804*|))
               (lambda (|left`1806*| |right`1806*|)
                 (|.bytevector-u16-set!| |buf`1795*| 0 |left`1806*| |endian`1793*|)
                 (|.put-bytevector| |output`1797*| |buf`1795*|)
                 (|.bytevector-u16-set!| |buf`1795*| 0 |right`1806*| |endian`1793*|)
                 (|.put-bytevector| |output`1797*| |buf`1795*|)))))
         (push.iloc 4 . 0)
         (push.subr.gloc.of |.get-char| 1 "../stdlib/core/bytevector-transcoders.scm" . 110633)
         (apply.iloc+ (2 . 0) "../stdlib/core/bytevector-transcoders.scm" . 110627))
       (push.iloc 4 . 1)
       (push.const . 0)
       (push.iloc.0 . 0)
       (push.iloc 5 . 0)
       (subr.gloc.of |.bytevector-u16-set!| 4 "../stdlib/core/bytevector-transcoders.scm" . 112675)
       (push.iloc 3 . 0)
       (push.iloc 4 . 1)
       (subr.gloc.of |.put-bytevector| 2 "../stdlib/core/bytevector-transcoders.scm" . 113699)
       (push.iloc 4 . 0)
       (push.subr.gloc.of |.get-char| 1 "../stdlib/core/bytevector-transcoders.scm" . 114729)
       (apply.iloc+ (2 . 0) "../stdlib/core/bytevector-transcoders.scm" . 114723))
     (push.iloc 2 . 0)
     (push.subr.gloc.of |.get-char| 1 "../stdlib/core/bytevector-transcoders.scm" . 100384)
     (apply.iloc+ (0 . 0) "../stdlib/core/bytevector-transcoders.scm" . 101395))
   (apply.gloc.of
     |.call-with-values|
     (|.call-with-values|
       |.L636|
       (lambda (|output`1797*| |extract`1797*|)
         (letrec* ((|loop`1801*|
                     (lambda (|ch`1802*|)
                       (if (|.eof-object?| |ch`1802*|)
                           (|extract`1797*|)
                           (let ((|sv`1804*| (|.char->integer| |ch`1802*|)))
                             (if (|.>=| |sv`1804*| 65536)
                                 (begin
                                   (|.call-with-values|
                                     (lambda ()
                                       (|core.bytevector-transcoders'encode-surrogates| |sv`1804*|))
                                     (lambda (|left`1806*| |right`1806*|)
                                       (|.bytevector-u16-set!|
                                         |buf`1795*|
                                         0
                                         |left`1806*|
                                         |endian`1793*|)
                                       (|.put-bytevector| |output`1797*| |buf`1795*|)
                                       (|.bytevector-u16-set!|
                                         |buf`1795*|
                                         0
                                         |right`1806*|
                                         |endian`1793*|)
                                       (|.put-bytevector| |output`1797*| |buf`1795*|)))
                                   (|loop`1801*| (|.get-char| |input`1795*|)))
                                 (begin
                                   (|.bytevector-u16-set!| |buf`1795*| 0 |sv`1804*| |endian`1793*|)
                                   (|.put-bytevector| |output`1797*| |buf`1795*|)
                                   (|loop`1801*| (|.get-char| |input`1795*|)))))))))
           (|loop`1801*| (|.get-char| |input`1795*|)))))))
 (set.gloc.of |core.bytevector-transcoders'string->utf16|)
 (close
   (4 0 . |core.bytevector-transcoders'transcode-utf16->string|)
   (subr.gloc.of |.make-string-output-port| 0)
   (push)
   (extend . 1)
   (extend.enclose+
     (2 0 . loop)
     (=n.iloc (0 . 1) 0 "../stdlib/core/bytevector-transcoders.scm" . 120850)
     (if.true
       (push.iloc 2 . 0)
       (ret.subr.gloc.of
         |.extract-accumulated-string|
         "../stdlib/core/bytevector-transcoders.scm"
         .
         120861))
     (>=n.iloc (0 . 1) 2 "../stdlib/core/bytevector-transcoders.scm" . 121874)
     (if.true
       (push.iloc 3 . 2)
       (push.iloc.0 . 0)
       (push.iloc 3 . 3)
       (push.subr.gloc.of
         |.bytevector-u16-ref|
         3
         "../stdlib/core/bytevector-transcoders.scm"
         .
         122908)
       (extend . 1)
       (push.const . 55296)
       (push.iloc.0 . 0)
       (push.const . 56319)
       (subr.gloc.of |.<=| 3 "../stdlib/core/bytevector-transcoders.scm" . 123931)
       (if.true
         (>=n.iloc (1 . 1) 4 "../stdlib/core/bytevector-transcoders.scm" . 124962)
         (if.true
           (push.iloc 4 . 2)
           (push.n+.iloc (1 . 0) 2 "../stdlib/core/bytevector-transcoders.scm" . 126025)
           (push.iloc 4 . 3)
           (push.subr.gloc.of
             |.bytevector-u16-ref|
             3
             "../stdlib/core/bytevector-transcoders.scm"
             .
             125999)
           (extend . 1)
           (push.const . 56320)
           (push.iloc.0 . 0)
           (push.const . 57343)
           (subr.gloc.of |.<=| 3 "../stdlib/core/bytevector-transcoders.scm" . 127019)
           (if.true
             (push.iloc 4 . 0)
             (call
               (push.iloc.1 . 0)
               (push.iloc.0 . 0)
               (apply.gloc.of
                 |core.bytevector-transcoders'decode-surrogates|
                 "../stdlib/core/bytevector-transcoders.scm"
                 .
                 128060))
             (push)
             (subr.gloc.of |.put-char| 2 "../stdlib/core/bytevector-transcoders.scm" . 128043)
             (push.n+.iloc (2 . 0) 4 "../stdlib/core/bytevector-transcoders.scm" . 129073)
             (push.n+.iloc (2 . 1) -4 "../stdlib/core/bytevector-transcoders.scm" . 129081)
             (apply.iloc+ (3 . 0) "../stdlib/core/bytevector-transcoders.scm" . 129067))
           (push.iloc 4 . 0)
           (push.const . #\�)
           (subr.gloc.of |.put-char| 2 "../stdlib/core/bytevector-transcoders.scm" . 131115)
           (push.n+.iloc (2 . 0) 2 "../stdlib/core/bytevector-transcoders.scm" . 132145)
           (push.n+.iloc (2 . 1) -2 "../stdlib/core/bytevector-transcoders.scm" . 132153)
           (apply.iloc+ (3 . 0) "../stdlib/core/bytevector-transcoders.scm" . 132139))
         (push.iloc 3 . 0)
         (push.const . #\�)
         (subr.gloc.of |.put-char| 2 "../stdlib/core/bytevector-transcoders.scm" . 134178)
         (push.iloc 3 . 0)
         (ret.subr.gloc.of
           |.extract-accumulated-string|
           "../stdlib/core/bytevector-transcoders.scm"
           .
           135202))
       (push.const . 56320)
       (push.iloc.0 . 0)
       (push.const . 57343)
       (subr.gloc.of |.<=| 3 "../stdlib/core/bytevector-transcoders.scm" . 136219)
       (if.true
         (push.iloc 3 . 0)
         (push.const . #\�)
         (subr.gloc.of |.put-char| 2 "../stdlib/core/bytevector-transcoders.scm" . 137243)
         (push.n+.iloc (1 . 0) 2 "../stdlib/core/bytevector-transcoders.scm" . 138273)
         (push.n+.iloc (1 . 1) -2 "../stdlib/core/bytevector-transcoders.scm" . 138281)
         (apply.iloc+ (2 . 0) "../stdlib/core/bytevector-transcoders.scm" . 138267))
       (push.iloc 3 . 0)
       (push.iloc.0 . 0)
       (push.subr.gloc.of |.integer->char| 1 "../stdlib/core/bytevector-transcoders.scm" . 140332)
       (subr.gloc.of |.put-char| 2 "../stdlib/core/bytevector-transcoders.scm" . 140315)
       (push.n+.iloc (1 . 0) 2 "../stdlib/core/bytevector-transcoders.scm" . 141345)
       (push.n+.iloc (1 . 1) -2 "../stdlib/core/bytevector-transcoders.scm" . 141353)
       (apply.iloc+ (2 . 0) "../stdlib/core/bytevector-transcoders.scm" . 141339))
     (push.iloc 2 . 0)
     (push.const . #\�)
     (subr.gloc.of |.put-char| 2 "../stdlib/core/bytevector-transcoders.scm" . 143378)
     (push.iloc 2 . 0)
     (ret.subr.gloc.of
       |.extract-accumulated-string|
       "../stdlib/core/bytevector-transcoders.scm"
       .
       144402))
   (push.iloc 2 . 0)
   (push.iloc 2 . 1)
   (apply.iloc+ (0 . 0) "../stdlib/core/bytevector-transcoders.scm" . 120843))
 (set.gloc.of |core.bytevector-transcoders'transcode-utf16->string|)
 (close
   (2 1 . |core.bytevector-transcoders'utf16->string|)
   (call
     (iloc.0 . 2)
     (if.not.pair?.ret.const . #f)
     (push.iloc.0 . 2)
     (ret.subr.gloc.of |.car| "../stdlib/core/bytevector-transcoders.scm" . 150544))
   (if.true
     (push.const . 0)
     (push.iloc.0 . 0)
     (push.subr.gloc.of |.bytevector-length| 1 "../stdlib/core/bytevector-transcoders.scm" . 150571)
     (push.iloc.0 . 0)
     (push.iloc.0 . 1)
     (apply.gloc.of
       |core.bytevector-transcoders'transcode-utf16->string|
       "../stdlib/core/bytevector-transcoders.scm"
       .
       150544))
   (call
     (push.iloc.0 . 0)
     (apply.gloc.of
       |core.bytevector-transcoders'test-utf16-bom|
       "../stdlib/core/bytevector-transcoders.scm"
       .
       151568))
   (push)
   (extend . 1)
   (iloc.0 . 0)
   (if.true
     (push.const . 2)
     (push.iloc.1 . 0)
     (push.subr.gloc.of |.bytevector-length| 1 "../stdlib/core/bytevector-transcoders.scm" . 153651)
     (push.const . 2)
     (push.subr.gloc.of |.-| 2 "../stdlib/core/bytevector-transcoders.scm" . 153648)
     (push.iloc.1 . 0)
     (push.iloc.0 . 0)
     (apply.gloc.of
       |core.bytevector-transcoders'transcode-utf16->string|
       "../stdlib/core/bytevector-transcoders.scm"
       .
       153621))
   (push.const . 0)
   (push.iloc.1 . 0)
   (push.subr.gloc.of |.bytevector-length| 1 "../stdlib/core/bytevector-transcoders.scm" . 155691)
   (push.iloc.1 . 0)
   (push.iloc.1 . 1)
   (apply.gloc.of
     |core.bytevector-transcoders'transcode-utf16->string|
     "../stdlib/core/bytevector-transcoders.scm"
     .
     155664))
 (set.gloc.of |core.bytevector-transcoders'utf16->string|)
 (push.const . core.bytevector-transcoders)
 (push.const . #f)
 (push.const
   (string->utf8 import . |.string->utf8|)
   (utf8->string import . |.utf8->string|)
   (string->utf16 import . |core.bytevector-transcoders'string->utf16|)
   (utf16->string import . |core.bytevector-transcoders'utf16->string|)
   (string->utf32 import . |core.bytevector-transcoders'string->utf32|)
   (utf32->string import . |core.bytevector-transcoders'utf32->string|))
 (apply.gloc.of |.intern-scheme-library| "../stdlib/core/bytevector-transcoders.scm" . 24622))

((close
   (1 0)
   (push.iloc.0 . 0)
   (ret.subr.gloc.of |.get-datum| "../stdlib/core/unicode-assistants.scm" . 52237))
 (set.gloc.of |.L656|)
 (call
   (push.const core bytevector-transcoders)
   (apply.gloc.of |.require-scheme-library| "../stdlib/core/unicode-assistants.scm" . 51211))
 (call
   (push.const core bytevectors)
   (apply.gloc.of |.require-scheme-library| "../stdlib/core/unicode-assistants.scm" . 51211))
 (call
   (push.const core lists)
   (apply.gloc.of |.require-scheme-library| "../stdlib/core/unicode-assistants.scm" . 51211))
 (call
   (push.const core files)
   (apply.gloc.of |.require-scheme-library| "../stdlib/core/unicode-assistants.scm" . 51211))
 (call
   (push.const core io)
   (apply.gloc.of |.require-scheme-library| "../stdlib/core/unicode-assistants.scm" . 51211))
 (call
   (push.const core primitives)
   (apply.gloc.of |.require-scheme-library| "../stdlib/core/unicode-assistants.scm" . 51211))
 (close
   (2 0 . |core.unicode-assistants'load-unicode-table-file|)
   (push.iloc.0 . 0)
   (push.subr.gloc.of
     |.open-builtin-data-input-port|
     1
     "../stdlib/core/unicode-assistants.scm"
     .
     36875)
   (push.close
     (1 0)
     (push.const . eqv?)
     (push.iloc.1 . 1)
     (push.subr.gloc.of |.make-core-hashtable| 2 "../stdlib/core/unicode-assistants.scm" . 38935)
     (extend . 1)
     (call
       (extend.enclose+
         (1 0 . loop)
         (iloc.0 . 0)
         (if.null?.ret.const . #t)
         (push.iloc 2 . 0)
         (push.iloc.0 . 0)
         (push.subr.gloc.of |.caar| 1 "../stdlib/core/unicode-assistants.scm" . 43056)
         (push.iloc.0 . 0)
         (push.subr.gloc.of |.cdar| 1 "../stdlib/core/unicode-assistants.scm" . 43067)
         (subr.gloc.of |.core-hashtable-set!| 3 "../stdlib/core/unicode-assistants.scm" . 43032)
         (push.cdr.iloc (0 . 0) "../stdlib/core/unicode-assistants.scm" . 44062)
         (apply.iloc+ (1 . 0) "../stdlib/core/unicode-assistants.scm" . 44056))
       (push.iloc 2 . 0)
       (push.subr.gloc.of |.get-datum| 1 "../stdlib/core/unicode-assistants.scm" . 39967)
       (apply.iloc+ (0 . 0) "../stdlib/core/unicode-assistants.scm" . 40977))
     (push.iloc.0 . 0)
     (ret.subr.gloc.of |.core-hashtable-copy| "../stdlib/core/unicode-assistants.scm" . 45071))
   (apply.gloc.of |.call-with-port| "../stdlib/core/unicode-assistants.scm" . 35847))
 (set.gloc.of |core.unicode-assistants'load-unicode-table-file|)
 (close
   (1 0 . |core.unicode-assistants'load-unicode-list-file|)
   (push.iloc.0 . 0)
   (push.subr.gloc.of
     |.open-builtin-data-input-port|
     1
     "../stdlib/core/unicode-assistants.scm"
     .
     50187)
   (push.gloc.of |.L656|)
   (apply.gloc.of |.call-with-port| "../stdlib/core/unicode-assistants.scm" . 49159))
 (set.gloc.of |core.unicode-assistants'load-unicode-list-file|)
 (call
   (push.const . #f)
   (apply.gloc.of |.make-parameter| "../stdlib/core/unicode-assistants.scm" . 68611))
 (set.gloc.of |core.unicode-assistants'temp`1832|)
 (close
   (0 0 . |core.unicode-assistants'general-category-table-1|)
   (subr.gloc.of |.on-primordial-thread?| 0 "../stdlib/core/unicode-assistants.scm" . 68611)
   (if.true
     (call
       (push.const . "general-category-1")
       (push.const . 1000)
       (apply.gloc.of
         |core.unicode-assistants'load-unicode-table-file|
         "../stdlib/core/unicode-assistants.scm"
         .
         70660))
     (push)
     (extend . 1)
     (close (0 0 . |core.unicode-assistants'general-category-table-1|) (ret.iloc 1 . 0))
     (set.gloc.of
       |core.unicode-assistants'general-category-table-1|
       "../stdlib/core/unicode-assistants.scm"
       .
       68611)
     (ret.iloc 0 . 0))
   (call
     (touch.gloc.of |core.unicode-assistants'temp`1832|)
     (apply.gloc.of
       |core.unicode-assistants'temp`1832|
       "../stdlib/core/unicode-assistants.scm"
       .
       68611))
   (if.true.ret)
   (call
     (push.const . "general-category-1")
     (push.const . 1000)
     (apply.gloc.of
       |core.unicode-assistants'load-unicode-table-file|
       "../stdlib/core/unicode-assistants.scm"
       .
       70660))
   (push)
   (extend . 1)
   (call
     (touch.gloc.of |core.unicode-assistants'temp`1832|)
     (push.iloc.0 . 0)
     (apply.gloc.of
       |core.unicode-assistants'temp`1832|
       "../stdlib/core/unicode-assistants.scm"
       .
       68611))
   (ret.iloc 0 . 0))
 (set.gloc.of |core.unicode-assistants'general-category-table-1|)
 (call
   (push.const . #f)
   (apply.gloc.of |.make-parameter| "../stdlib/core/unicode-assistants.scm" . 72707))
 (set.gloc.of |core.unicode-assistants'temp`1833|)
 (close
   (0 0 . |core.unicode-assistants'general-category-table-2|)
   (subr.gloc.of |.on-primordial-thread?| 0 "../stdlib/core/unicode-assistants.scm" . 72707)
   (if.true
     (call
       (push.const . "general-category-2")
       (push.const . 170000)
       (apply.gloc.of
         |core.unicode-assistants'load-unicode-table-file|
         "../stdlib/core/unicode-assistants.scm"
         .
         74756))
     (push)
     (extend . 1)
     (close (0 0 . |core.unicode-assistants'general-category-table-2|) (ret.iloc 1 . 0))
     (set.gloc.of
       |core.unicode-assistants'general-category-table-2|
       "../stdlib/core/unicode-assistants.scm"
       .
       72707)
     (ret.iloc 0 . 0))
   (call
     (touch.gloc.of |core.unicode-assistants'temp`1833|)
     (apply.gloc.of
       |core.unicode-assistants'temp`1833|
       "../stdlib/core/unicode-assistants.scm"
       .
       72707))
   (if.true.ret)
   (call
     (push.const . "general-category-2")
     (push.const . 170000)
     (apply.gloc.of
       |core.unicode-assistants'load-unicode-table-file|
       "../stdlib/core/unicode-assistants.scm"
       .
       74756))
   (push)
   (extend . 1)
   (call
     (touch.gloc.of |core.unicode-assistants'temp`1833|)
     (push.iloc.0 . 0)
     (apply.gloc.of
       |core.unicode-assistants'temp`1833|
       "../stdlib/core/unicode-assistants.scm"
       .
       72707))
   (ret.iloc 0 . 0))
 (set.gloc.of |core.unicode-assistants'general-category-table-2|)
 (call
   (push.const . #f)
   (apply.gloc.of |.make-parameter| "../stdlib/core/unicode-assistants.scm" . 76803))
 (set.gloc.of |core.unicode-assistants'temp`1834|)
 (close
   (0 0 . |core.unicode-assistants'simple-uppercase-table|)
   (subr.gloc.of |.on-primordial-thread?| 0 "../stdlib/core/unicode-assistants.scm" . 76803)
   (if.true
     (call
       (push.const . "simple-uppercase")
       (push.const . 1500)
       (apply.gloc.of
         |core.unicode-assistants'load-unicode-table-file|
         "../stdlib/core/unicode-assistants.scm"
         .
         78852))
     (push)
     (extend . 1)
     (close (0 0 . |core.unicode-assistants'simple-uppercase-table|) (ret.iloc 1 . 0))
     (set.gloc.of
       |core.unicode-assistants'simple-uppercase-table|
       "../stdlib/core/unicode-assistants.scm"
       .
       76803)
     (ret.iloc 0 . 0))
   (call
     (touch.gloc.of |core.unicode-assistants'temp`1834|)
     (apply.gloc.of
       |core.unicode-assistants'temp`1834|
       "../stdlib/core/unicode-assistants.scm"
       .
       76803))
   (if.true.ret)
   (call
     (push.const . "simple-uppercase")
     (push.const . 1500)
     (apply.gloc.of
       |core.unicode-assistants'load-unicode-table-file|
       "../stdlib/core/unicode-assistants.scm"
       .
       78852))
   (push)
   (extend . 1)
   (call
     (touch.gloc.of |core.unicode-assistants'temp`1834|)
     (push.iloc.0 . 0)
     (apply.gloc.of
       |core.unicode-assistants'temp`1834|
       "../stdlib/core/unicode-assistants.scm"
       .
       76803))
   (ret.iloc 0 . 0))
 (set.gloc.of |core.unicode-assistants'simple-uppercase-table|)
 (call
   (push.const . #f)
   (apply.gloc.of |.make-parameter| "../stdlib/core/unicode-assistants.scm" . 80899))
 (set.gloc.of |core.unicode-assistants'temp`1835|)
 (close
   (0 0 . |core.unicode-assistants'simple-lowercase-table|)
   (subr.gloc.of |.on-primordial-thread?| 0 "../stdlib/core/unicode-assistants.scm" . 80899)
   (if.true
     (call
       (push.const . "simple-lowercase")
       (push.const . 1500)
       (apply.gloc.of
         |core.unicode-assistants'load-unicode-table-file|
         "../stdlib/core/unicode-assistants.scm"
         .
         82948))
     (push)
     (extend . 1)
     (close (0 0 . |core.unicode-assistants'simple-lowercase-table|) (ret.iloc 1 . 0))
     (set.gloc.of
       |core.unicode-assistants'simple-lowercase-table|
       "../stdlib/core/unicode-assistants.scm"
       .
       80899)
     (ret.iloc 0 . 0))
   (call
     (touch.gloc.of |core.unicode-assistants'temp`1835|)
     (apply.gloc.of
       |core.unicode-assistants'temp`1835|
       "../stdlib/core/unicode-assistants.scm"
       .
       80899))
   (if.true.ret)
   (call
     (push.const . "simple-lowercase")
     (push.const . 1500)
     (apply.gloc.of
       |core.unicode-assistants'load-unicode-table-file|
       "../stdlib/core/unicode-assistants.scm"
       .
       82948))
   (push)
   (extend . 1)
   (call
     (touch.gloc.of |core.unicode-assistants'temp`1835|)
     (push.iloc.0 . 0)
     (apply.gloc.of
       |core.unicode-assistants'temp`1835|
       "../stdlib/core/unicode-assistants.scm"
       .
       80899))
   (ret.iloc 0 . 0))
 (set.gloc.of |core.unicode-assistants'simple-lowercase-table|)
 (call
   (push.const . #f)
   (apply.gloc.of |.make-parameter| "../stdlib/core/unicode-assistants.scm" . 84995))
 (set.gloc.of |core.unicode-assistants'temp`1836|)
 (close
   (0 0 . |core.unicode-assistants'simple-titlecase-table|)
   (subr.gloc.of |.on-primordial-thread?| 0 "../stdlib/core/unicode-assistants.scm" . 84995)
   (if.true
     (call
       (push.const . "simple-titlecase")
       (push.const . 1500)
       (apply.gloc.of
         |core.unicode-assistants'load-unicode-table-file|
         "../stdlib/core/unicode-assistants.scm"
         .
         87044))
     (push)
     (extend . 1)
     (close (0 0 . |core.unicode-assistants'simple-titlecase-table|) (ret.iloc 1 . 0))
     (set.gloc.of
       |core.unicode-assistants'simple-titlecase-table|
       "../stdlib/core/unicode-assistants.scm"
       .
       84995)
     (ret.iloc 0 . 0))
   (call
     (touch.gloc.of |core.unicode-assistants'temp`1836|)
     (apply.gloc.of
       |core.unicode-assistants'temp`1836|
       "../stdlib/core/unicode-assistants.scm"
       .
       84995))
   (if.true.ret)
   (call
     (push.const . "simple-titlecase")
     (push.const . 1500)
     (apply.gloc.of
       |core.unicode-assistants'load-unicode-table-file|
       "../stdlib/core/unicode-assistants.scm"
       .
       87044))
   (push)
   (extend . 1)
   (call
     (touch.gloc.of |core.unicode-assistants'temp`1836|)
     (push.iloc.0 . 0)
     (apply.gloc.of
       |core.unicode-assistants'temp`1836|
       "../stdlib/core/unicode-assistants.scm"
       .
       84995))
   (ret.iloc 0 . 0))
 (set.gloc.of |core.unicode-assistants'simple-titlecase-table|)
 (call
   (push.const . #f)
   (apply.gloc.of |.make-parameter| "../stdlib/core/unicode-assistants.scm" . 89091))
 (set.gloc.of |core.unicode-assistants'temp`1837|)
 (close
   (0 0 . |core.unicode-assistants'numeric-property-table|)
   (subr.gloc.of |.on-primordial-thread?| 0 "../stdlib/core/unicode-assistants.scm" . 89091)
   (if.true
     (call
       (push.const . "numeric-property")
       (push.const . 1500)
       (apply.gloc.of
         |core.unicode-assistants'load-unicode-table-file|
         "../stdlib/core/unicode-assistants.scm"
         .
         91140))
     (push)
     (extend . 1)
     (close (0 0 . |core.unicode-assistants'numeric-property-table|) (ret.iloc 1 . 0))
     (set.gloc.of
       |core.unicode-assistants'numeric-property-table|
       "../stdlib/core/unicode-assistants.scm"
       .
       89091)
     (ret.iloc 0 . 0))
   (call
     (touch.gloc.of |core.unicode-assistants'temp`1837|)
     (apply.gloc.of
       |core.unicode-assistants'temp`1837|
       "../stdlib/core/unicode-assistants.scm"
       .
       89091))
   (if.true.ret)
   (call
     (push.const . "numeric-property")
     (push.const . 1500)
     (apply.gloc.of
       |core.unicode-assistants'load-unicode-table-file|
       "../stdlib/core/unicode-assistants.scm"
       .
       91140))
   (push)
   (extend . 1)
   (call
     (touch.gloc.of |core.unicode-assistants'temp`1837|)
     (push.iloc.0 . 0)
     (apply.gloc.of
       |core.unicode-assistants'temp`1837|
       "../stdlib/core/unicode-assistants.scm"
       .
       89091))
   (ret.iloc 0 . 0))
 (set.gloc.of |core.unicode-assistants'numeric-property-table|)
 (call
   (push.const . #f)
   (apply.gloc.of |.make-parameter| "../stdlib/core/unicode-assistants.scm" . 93187))
 (set.gloc.of |core.unicode-assistants'temp`1838|)
 (close
   (0 0 . |core.unicode-assistants'special-casing-lower-table|)
   (subr.gloc.of |.on-primordial-thread?| 0 "../stdlib/core/unicode-assistants.scm" . 93187)
   (if.true
     (call
       (push.const . "special-casing-lower")
       (push.const . 300)
       (apply.gloc.of
         |core.unicode-assistants'load-unicode-table-file|
         "../stdlib/core/unicode-assistants.scm"
         .
         95236))
     (push)
     (extend . 1)
     (close (0 0 . |core.unicode-assistants'special-casing-lower-table|) (ret.iloc 1 . 0))
     (set.gloc.of
       |core.unicode-assistants'special-casing-lower-table|
       "../stdlib/core/unicode-assistants.scm"
       .
       93187)
     (ret.iloc 0 . 0))
   (call
     (touch.gloc.of |core.unicode-assistants'temp`1838|)
     (apply.gloc.of
       |core.unicode-assistants'temp`1838|
       "../stdlib/core/unicode-assistants.scm"
       .
       93187))
   (if.true.ret)
   (call
     (push.const . "special-casing-lower")
     (push.const . 300)
     (apply.gloc.of
       |core.unicode-assistants'load-unicode-table-file|
       "../stdlib/core/unicode-assistants.scm"
       .
       95236))
   (push)
   (extend . 1)
   (call
     (touch.gloc.of |core.unicode-assistants'temp`1838|)
     (push.iloc.0 . 0)
     (apply.gloc.of
       |core.unicode-assistants'temp`1838|
       "../stdlib/core/unicode-assistants.scm"
       .
       93187))
   (ret.iloc 0 . 0))
 (set.gloc.of |core.unicode-assistants'special-casing-lower-table|)
 (call
   (push.const . #f)
   (apply.gloc.of |.make-parameter| "../stdlib/core/unicode-assistants.scm" . 97283))
 (set.gloc.of |core.unicode-assistants'temp`1839|)
 (close
   (0 0 . |core.unicode-assistants'special-casing-title-table|)
   (subr.gloc.of |.on-primordial-thread?| 0 "../stdlib/core/unicode-assistants.scm" . 97283)
   (if.true
     (call
       (push.const . "special-casing-title")
       (push.const . 300)
       (apply.gloc.of
         |core.unicode-assistants'load-unicode-table-file|
         "../stdlib/core/unicode-assistants.scm"
         .
         99332))
     (push)
     (extend . 1)
     (close (0 0 . |core.unicode-assistants'special-casing-title-table|) (ret.iloc 1 . 0))
     (set.gloc.of
       |core.unicode-assistants'special-casing-title-table|
       "../stdlib/core/unicode-assistants.scm"
       .
       97283)
     (ret.iloc 0 . 0))
   (call
     (touch.gloc.of |core.unicode-assistants'temp`1839|)
     (apply.gloc.of
       |core.unicode-assistants'temp`1839|
       "../stdlib/core/unicode-assistants.scm"
       .
       97283))
   (if.true.ret)
   (call
     (push.const . "special-casing-title")
     (push.const . 300)
     (apply.gloc.of
       |core.unicode-assistants'load-unicode-table-file|
       "../stdlib/core/unicode-assistants.scm"
       .
       99332))
   (push)
   (extend . 1)
   (call
     (touch.gloc.of |core.unicode-assistants'temp`1839|)
     (push.iloc.0 . 0)
     (apply.gloc.of
       |core.unicode-assistants'temp`1839|
       "../stdlib/core/unicode-assistants.scm"
       .
       97283))
   (ret.iloc 0 . 0))
 (set.gloc.of |core.unicode-assistants'special-casing-title-table|)
 (call
   (push.const . #f)
   (apply.gloc.of |.make-parameter| "../stdlib/core/unicode-assistants.scm" . 101379))
 (set.gloc.of |core.unicode-assistants'temp`1840|)
 (close
   (0 0 . |core.unicode-assistants'special-casing-upper-table|)
   (subr.gloc.of |.on-primordial-thread?| 0 "../stdlib/core/unicode-assistants.scm" . 101379)
   (if.true
     (call
       (push.const . "special-casing-upper")
       (push.const . 300)
       (apply.gloc.of
         |core.unicode-assistants'load-unicode-table-file|
         "../stdlib/core/unicode-assistants.scm"
         .
         103428))
     (push)
     (extend . 1)
     (close (0 0 . |core.unicode-assistants'special-casing-upper-table|) (ret.iloc 1 . 0))
     (set.gloc.of
       |core.unicode-assistants'special-casing-upper-table|
       "../stdlib/core/unicode-assistants.scm"
       .
       101379)
     (ret.iloc 0 . 0))
   (call
     (touch.gloc.of |core.unicode-assistants'temp`1840|)
     (apply.gloc.of
       |core.unicode-assistants'temp`1840|
       "../stdlib/core/unicode-assistants.scm"
       .
       101379))
   (if.true.ret)
   (call
     (push.const . "special-casing-upper")
     (push.const . 300)
     (apply.gloc.of
       |core.unicode-assistants'load-unicode-table-file|
       "../stdlib/core/unicode-assistants.scm"
       .
       103428))
   (push)
   (extend . 1)
   (call
     (touch.gloc.of |core.unicode-assistants'temp`1840|)
     (push.iloc.0 . 0)
     (apply.gloc.of
       |core.unicode-assistants'temp`1840|
       "../stdlib/core/unicode-assistants.scm"
       .
       101379))
   (ret.iloc 0 . 0))
 (set.gloc.of |core.unicode-assistants'special-casing-upper-table|)
 (call
   (push.const . #f)
   (apply.gloc.of |.make-parameter| "../stdlib/core/unicode-assistants.scm" . 105475))
 (set.gloc.of |core.unicode-assistants'temp`1841|)
 (close
   (0 0 . |core.unicode-assistants'case-folding-table|)
   (subr.gloc.of |.on-primordial-thread?| 0 "../stdlib/core/unicode-assistants.scm" . 105475)
   (if.true
     (call
       (push.const . "case-folding")
       (push.const . 1500)
       (apply.gloc.of
         |core.unicode-assistants'load-unicode-table-file|
         "../stdlib/core/unicode-assistants.scm"
         .
         107524))
     (push)
     (extend . 1)
     (close (0 0 . |core.unicode-assistants'case-folding-table|) (ret.iloc 1 . 0))
     (set.gloc.of
       |core.unicode-assistants'case-folding-table|
       "../stdlib/core/unicode-assistants.scm"
       .
       105475)
     (ret.iloc 0 . 0))
   (call
     (touch.gloc.of |core.unicode-assistants'temp`1841|)
     (apply.gloc.of
       |core.unicode-assistants'temp`1841|
       "../stdlib/core/unicode-assistants.scm"
       .
       105475))
   (if.true.ret)
   (call
     (push.const . "case-folding")
     (push.const . 1500)
     (apply.gloc.of
       |core.unicode-assistants'load-unicode-table-file|
       "../stdlib/core/unicode-assistants.scm"
       .
       107524))
   (push)
   (extend . 1)
   (call
     (touch.gloc.of |core.unicode-assistants'temp`1841|)
     (push.iloc.0 . 0)
     (apply.gloc.of
       |core.unicode-assistants'temp`1841|
       "../stdlib/core/unicode-assistants.scm"
       .
       105475))
   (ret.iloc 0 . 0))
 (set.gloc.of |core.unicode-assistants'case-folding-table|)
 (call
   (push.const . #f)
   (apply.gloc.of |.make-parameter| "../stdlib/core/unicode-assistants.scm" . 109571))
 (set.gloc.of |core.unicode-assistants'temp`1842|)
 (close
   (0 0 . |core.unicode-assistants'other-uppercase-list|)
   (subr.gloc.of |.on-primordial-thread?| 0 "../stdlib/core/unicode-assistants.scm" . 109571)
   (if.true
     (call
       (push.const . "other-uppercase")
       (apply.gloc.of
         |core.unicode-assistants'load-unicode-list-file|
         "../stdlib/core/unicode-assistants.scm"
         .
         111620))
     (push)
     (extend . 1)
     (close (0 0 . |core.unicode-assistants'other-uppercase-list|) (ret.iloc 1 . 0))
     (set.gloc.of
       |core.unicode-assistants'other-uppercase-list|
       "../stdlib/core/unicode-assistants.scm"
       .
       109571)
     (ret.iloc 0 . 0))
   (call
     (touch.gloc.of |core.unicode-assistants'temp`1842|)
     (apply.gloc.of
       |core.unicode-assistants'temp`1842|
       "../stdlib/core/unicode-assistants.scm"
       .
       109571))
   (if.true.ret)
   (call
     (push.const . "other-uppercase")
     (apply.gloc.of
       |core.unicode-assistants'load-unicode-list-file|
       "../stdlib/core/unicode-assistants.scm"
       .
       111620))
   (push)
   (extend . 1)
   (call
     (touch.gloc.of |core.unicode-assistants'temp`1842|)
     (push.iloc.0 . 0)
     (apply.gloc.of
       |core.unicode-assistants'temp`1842|
       "../stdlib/core/unicode-assistants.scm"
       .
       109571))
   (ret.iloc 0 . 0))
 (set.gloc.of |core.unicode-assistants'other-uppercase-list|)
 (call
   (push.const . #f)
   (apply.gloc.of |.make-parameter| "../stdlib/core/unicode-assistants.scm" . 113667))
 (set.gloc.of |core.unicode-assistants'temp`1843|)
 (close
   (0 0 . |core.unicode-assistants'other-lowercase-list|)
   (subr.gloc.of |.on-primordial-thread?| 0 "../stdlib/core/unicode-assistants.scm" . 113667)
   (if.true
     (call
       (push.const . "other-lowercase")
       (apply.gloc.of
         |core.unicode-assistants'load-unicode-list-file|
         "../stdlib/core/unicode-assistants.scm"
         .
         115716))
     (push)
     (extend . 1)
     (close (0 0 . |core.unicode-assistants'other-lowercase-list|) (ret.iloc 1 . 0))
     (set.gloc.of
       |core.unicode-assistants'other-lowercase-list|
       "../stdlib/core/unicode-assistants.scm"
       .
       113667)
     (ret.iloc 0 . 0))
   (call
     (touch.gloc.of |core.unicode-assistants'temp`1843|)
     (apply.gloc.of
       |core.unicode-assistants'temp`1843|
       "../stdlib/core/unicode-assistants.scm"
       .
       113667))
   (if.true.ret)
   (call
     (push.const . "other-lowercase")
     (apply.gloc.of
       |core.unicode-assistants'load-unicode-list-file|
       "../stdlib/core/unicode-assistants.scm"
       .
       115716))
   (push)
   (extend . 1)
   (call
     (touch.gloc.of |core.unicode-assistants'temp`1843|)
     (push.iloc.0 . 0)
     (apply.gloc.of
       |core.unicode-assistants'temp`1843|
       "../stdlib/core/unicode-assistants.scm"
       .
       113667))
   (ret.iloc 0 . 0))
 (set.gloc.of |core.unicode-assistants'other-lowercase-list|)
 (call
   (push.const . #f)
   (apply.gloc.of |.make-parameter| "../stdlib/core/unicode-assistants.scm" . 117763))
 (set.gloc.of |core.unicode-assistants'temp`1844|)
 (close
   (0 0 . |core.unicode-assistants'other-alphabetic-list|)
   (subr.gloc.of |.on-primordial-thread?| 0 "../stdlib/core/unicode-assistants.scm" . 117763)
   (if.true
     (call
       (push.const . "other-alphabetic")
       (apply.gloc.of
         |core.unicode-assistants'load-unicode-list-file|
         "../stdlib/core/unicode-assistants.scm"
         .
         119812))
     (push)
     (extend . 1)
     (close (0 0 . |core.unicode-assistants'other-alphabetic-list|) (ret.iloc 1 . 0))
     (set.gloc.of
       |core.unicode-assistants'other-alphabetic-list|
       "../stdlib/core/unicode-assistants.scm"
       .
       117763)
     (ret.iloc 0 . 0))
   (call
     (touch.gloc.of |core.unicode-assistants'temp`1844|)
     (apply.gloc.of
       |core.unicode-assistants'temp`1844|
       "../stdlib/core/unicode-assistants.scm"
       .
       117763))
   (if.true.ret)
   (call
     (push.const . "other-alphabetic")
     (apply.gloc.of
       |core.unicode-assistants'load-unicode-list-file|
       "../stdlib/core/unicode-assistants.scm"
       .
       119812))
   (push)
   (extend . 1)
   (call
     (touch.gloc.of |core.unicode-assistants'temp`1844|)
     (push.iloc.0 . 0)
     (apply.gloc.of
       |core.unicode-assistants'temp`1844|
       "../stdlib/core/unicode-assistants.scm"
       .
       117763))
   (ret.iloc 0 . 0))
 (set.gloc.of |core.unicode-assistants'other-alphabetic-list|)
 (close
   (1 0 . |core.unicode-assistants'general-category|)
   (push.iloc.0 . 0)
   (push.subr.gloc.of |.char->integer| 1 "../stdlib/core/unicode-assistants.scm" . 123921)
   (extend . 1)
   (call
     (apply.gloc.of
       |core.unicode-assistants'general-category-table-1|
       "../stdlib/core/unicode-assistants.scm"
       .
       124961))
   (push)
   (push.iloc.0 . 0)
   (push.const . #f)
   (subr.gloc.of |.core-hashtable-ref| 3 "../stdlib/core/unicode-assistants.scm" . 124941)
   (if.true.ret)
   (call
     (apply.gloc.of
       |core.unicode-assistants'general-category-table-2|
       "../stdlib/core/unicode-assistants.scm"
       .
       125985))
   (push)
   (push.iloc.0 . 0)
   (push.const . #f)
   (subr.gloc.of |.core-hashtable-ref| 3 "../stdlib/core/unicode-assistants.scm" . 125965)
   (if.true.ret)
   (push.const . 13312)
   (push.iloc.0 . 0)
   (push.const . 19893)
   (subr.gloc.of |.<=| 3 "../stdlib/core/unicode-assistants.scm" . 130063)
   (if.true.ret.const . Lo)
   (push.const . 19968)
   (push.iloc.0 . 0)
   (push.const . 40891)
   (subr.gloc.of |.<=| 3 "../stdlib/core/unicode-assistants.scm" . 133135)
   (if.true.ret.const . Lo)
   (push.const . 44032)
   (push.iloc.0 . 0)
   (push.const . 55203)
   (subr.gloc.of |.<=| 3 "../stdlib/core/unicode-assistants.scm" . 136207)
   (if.true.ret.const . Lo)
   (push.const . 55296)
   (push.iloc.0 . 0)
   (push.const . 56191)
   (subr.gloc.of |.<=| 3 "../stdlib/core/unicode-assistants.scm" . 139279)
   (if.true.ret.const . Cs)
   (push.const . 56192)
   (push.iloc.0 . 0)
   (push.const . 56319)
   (subr.gloc.of |.<=| 3 "../stdlib/core/unicode-assistants.scm" . 142351)
   (if.true.ret.const . Cs)
   (push.const . 56320)
   (push.iloc.0 . 0)
   (push.const . 57343)
   (subr.gloc.of |.<=| 3 "../stdlib/core/unicode-assistants.scm" . 145423)
   (if.true.ret.const . Cs)
   (push.const . 57344)
   (push.iloc.0 . 0)
   (push.const . 63743)
   (subr.gloc.of |.<=| 3 "../stdlib/core/unicode-assistants.scm" . 148495)
   (if.true.ret.const . Co)
   (push.const . 131072)
   (push.iloc.0 . 0)
   (push.const . 173782)
   (subr.gloc.of |.<=| 3 "../stdlib/core/unicode-assistants.scm" . 151567)
   (if.true.ret.const . Lo)
   (push.const . 983040)
   (push.iloc.0 . 0)
   (push.const . 1048573)
   (subr.gloc.of |.<=| 3 "../stdlib/core/unicode-assistants.scm" . 154639)
   (if.true.ret.const . Co)
   (push.const . 1048576)
   (push.iloc.0 . 0)
   (push.const . 1114109)
   (subr.gloc.of |.<=| 3 "../stdlib/core/unicode-assistants.scm" . 157711)
   (if.true.ret.const . Co)
   (ret.const . Cn))
 (set.gloc.of |core.unicode-assistants'general-category|)
 (close
   (1 0 . |core.unicode-assistants'numeric-property?|)
   (call
     (push.iloc.0 . 0)
     (apply.gloc.of
       |core.unicode-assistants'digit-value|
       "../stdlib/core/unicode-assistants.scm"
       .
       162828))
   (if.false.ret)
   (ret.const . #t))
 (set.gloc.of |core.unicode-assistants'numeric-property?|)
 (close
   (1 0 . |core.unicode-assistants'digit-value|)
   (call
     (apply.gloc.of
       |core.unicode-assistants'numeric-property-table|
       "../stdlib/core/unicode-assistants.scm"
       .
       166939))
   (push)
   (push.iloc.0 . 0)
   (push.subr.gloc.of |.char->integer| 1 "../stdlib/core/unicode-assistants.scm" . 166964)
   (push.const . #f)
   (ret.subr.gloc.of |.core-hashtable-ref| "../stdlib/core/unicode-assistants.scm" . 166919))
 (set.gloc.of |core.unicode-assistants'digit-value|)
 (close
   (1 0 . |core.unicode-assistants'simple-uppercase|)
   (call
     (apply.gloc.of
       |core.unicode-assistants'simple-uppercase-table|
       "../stdlib/core/unicode-assistants.scm"
       .
       171042))
   (push)
   (push.iloc.0 . 0)
   (push.subr.gloc.of |.char->integer| 1 "../stdlib/core/unicode-assistants.scm" . 171067)
   (push.const . #f)
   (push.subr.gloc.of |.core-hashtable-ref| 3 "../stdlib/core/unicode-assistants.scm" . 171022)
   (extend . 1)
   (iloc.0 . 0)
   (if.true
     (push.iloc.0 . 0)
     (ret.subr.gloc.of |.integer->char| "../stdlib/core/unicode-assistants.scm" . 172061))
   (ret.iloc 1 . 0))
 (set.gloc.of |core.unicode-assistants'simple-uppercase|)
 (close
   (1 0 . |core.unicode-assistants'simple-lowercase|)
   (call
     (apply.gloc.of
       |core.unicode-assistants'simple-lowercase-table|
       "../stdlib/core/unicode-assistants.scm"
       .
       177186))
   (push)
   (push.iloc.0 . 0)
   (push.subr.gloc.of |.char->integer| 1 "../stdlib/core/unicode-assistants.scm" . 177211)
   (push.const . #f)
   (push.subr.gloc.of |.core-hashtable-ref| 3 "../stdlib/core/unicode-assistants.scm" . 177166)
   (extend . 1)
   (iloc.0 . 0)
   (if.true
     (push.iloc.0 . 0)
     (ret.subr.gloc.of |.integer->char| "../stdlib/core/unicode-assistants.scm" . 178205))
   (ret.iloc 1 . 0))
 (set.gloc.of |core.unicode-assistants'simple-lowercase|)
 (close
   (1 0 . |core.unicode-assistants'simple-titlecase|)
   (call
     (apply.gloc.of
       |core.unicode-assistants'simple-titlecase-table|
       "../stdlib/core/unicode-assistants.scm"
       .
       183330))
   (push)
   (push.iloc.0 . 0)
   (push.subr.gloc.of |.char->integer| 1 "../stdlib/core/unicode-assistants.scm" . 183355)
   (push.const . #f)
   (push.subr.gloc.of |.core-hashtable-ref| 3 "../stdlib/core/unicode-assistants.scm" . 183310)
   (extend . 1)
   (iloc.0 . 0)
   (if.true
     (push.iloc.0 . 0)
     (ret.subr.gloc.of |.integer->char| "../stdlib/core/unicode-assistants.scm" . 184349))
   (push.iloc.1 . 0)
   (apply.gloc.of
     |core.unicode-assistants'simple-uppercase|
     "../stdlib/core/unicode-assistants.scm"
     .
     185363))
 (set.gloc.of |core.unicode-assistants'simple-titlecase|)
 (close
   (1 0 . |core.unicode-assistants'other-uppercase-property?|)
   (push.iloc.0 . 0)
   (push.subr.gloc.of |.char->integer| 1 "../stdlib/core/unicode-assistants.scm" . 189457)
   (extend . 1)
   (push.const . 8544)
   (push.iloc.0 . 0)
   (push.const . 9423)
   (subr.gloc.of |.<=| 3 "../stdlib/core/unicode-assistants.scm" . 190478)
   (if.false.ret)
   (push.close
     (1 0)
     (push.car.iloc (0 . 0) "../stdlib/core/unicode-assistants.scm" . 191526)
     (push.iloc.1 . 0)
     (push.cdr.iloc (0 . 0) "../stdlib/core/unicode-assistants.scm" . 191537)
     (ret.subr.gloc.of |.<=| "../stdlib/core/unicode-assistants.scm" . 191522))
   (call
     (apply.gloc.of
       |core.unicode-assistants'other-uppercase-list|
       "../stdlib/core/unicode-assistants.scm"
       .
       191547))
   (push)
   (apply.gloc.of |core.lists'exists| "../stdlib/core/unicode-assistants.scm" . 191502))
 (set.gloc.of |core.unicode-assistants'other-uppercase-property?|)
 (close
   (1 0 . |core.unicode-assistants'other-lowercase-property?|)
   (push.iloc.0 . 0)
   (push.subr.gloc.of |.char->integer| 1 "../stdlib/core/unicode-assistants.scm" . 195601)
   (extend . 1)
   (push.const . 688)
   (push.iloc.0 . 0)
   (push.const . 9449)
   (subr.gloc.of |.<=| 3 "../stdlib/core/unicode-assistants.scm" . 196622)
   (if.false.ret)
   (push.close
     (1 0)
     (push.car.iloc (0 . 0) "../stdlib/core/unicode-assistants.scm" . 197670)
     (push.iloc.1 . 0)
     (push.cdr.iloc (0 . 0) "../stdlib/core/unicode-assistants.scm" . 197681)
     (ret.subr.gloc.of |.<=| "../stdlib/core/unicode-assistants.scm" . 197666))
   (call
     (apply.gloc.of
       |core.unicode-assistants'other-lowercase-list|
       "../stdlib/core/unicode-assistants.scm"
       .
       197691))
   (push)
   (apply.gloc.of |core.lists'exists| "../stdlib/core/unicode-assistants.scm" . 197646))
 (set.gloc.of |core.unicode-assistants'other-lowercase-property?|)
 (close
   (1 0 . |core.unicode-assistants'other-alphabetic-property?|)
   (push.iloc.0 . 0)
   (push.subr.gloc.of |.char->integer| 1 "../stdlib/core/unicode-assistants.scm" . 201745)
   (extend . 1)
   (push.const . 837)
   (push.iloc.0 . 0)
   (push.const . 68111)
   (subr.gloc.of |.<=| 3 "../stdlib/core/unicode-assistants.scm" . 202766)
   (if.false.ret)
   (push.close
     (1 0)
     (push.car.iloc (0 . 0) "../stdlib/core/unicode-assistants.scm" . 203814)
     (push.iloc.1 . 0)
     (push.cdr.iloc (0 . 0) "../stdlib/core/unicode-assistants.scm" . 203825)
     (ret.subr.gloc.of |.<=| "../stdlib/core/unicode-assistants.scm" . 203810))
   (call
     (apply.gloc.of
       |core.unicode-assistants'other-alphabetic-list|
       "../stdlib/core/unicode-assistants.scm"
       .
       203835))
   (push)
   (apply.gloc.of |core.lists'exists| "../stdlib/core/unicode-assistants.scm" . 203790))
 (set.gloc.of |core.unicode-assistants'other-alphabetic-property?|)
 (close
   (1 0 . |core.unicode-assistants'special-casing-lower|)
   (call
     (apply.gloc.of
       |core.unicode-assistants'special-casing-lower-table|
       "../stdlib/core/unicode-assistants.scm"
       .
       207899))
   (push)
   (push.iloc.0 . 0)
   (push.subr.gloc.of |.char->integer| 1 "../stdlib/core/unicode-assistants.scm" . 207928)
   (push.const . #f)
   (ret.subr.gloc.of |.core-hashtable-ref| "../stdlib/core/unicode-assistants.scm" . 207879))
 (set.gloc.of |core.unicode-assistants'special-casing-lower|)
 (close
   (1 0 . |core.unicode-assistants'special-casing-title|)
   (call
     (apply.gloc.of
       |core.unicode-assistants'special-casing-title-table|
       "../stdlib/core/unicode-assistants.scm"
       .
       211995))
   (push)
   (push.iloc.0 . 0)
   (push.subr.gloc.of |.char->integer| 1 "../stdlib/core/unicode-assistants.scm" . 212024)
   (push.const . #f)
   (ret.subr.gloc.of |.core-hashtable-ref| "../stdlib/core/unicode-assistants.scm" . 211975))
 (set.gloc.of |core.unicode-assistants'special-casing-title|)
 (close
   (1 0 . |core.unicode-assistants'special-casing-upper|)
   (call
     (apply.gloc.of
       |core.unicode-assistants'special-casing-upper-table|
       "../stdlib/core/unicode-assistants.scm"
       .
       216091))
   (push)
   (push.iloc.0 . 0)
   (push.subr.gloc.of |.char->integer| 1 "../stdlib/core/unicode-assistants.scm" . 216120)
   (push.const . #f)
   (ret.subr.gloc.of |.core-hashtable-ref| "../stdlib/core/unicode-assistants.scm" . 216071))
 (set.gloc.of |core.unicode-assistants'special-casing-upper|)
 (close
   (1 0 . |core.unicode-assistants'foldcase|)
   (call
     (apply.gloc.of
       |core.unicode-assistants'case-folding-table|
       "../stdlib/core/unicode-assistants.scm"
       .
       220187))
   (push)
   (push.iloc.0 . 0)
   (push.subr.gloc.of |.char->integer| 1 "../stdlib/core/unicode-assistants.scm" . 220208)
   (push.const . #f)
   (ret.subr.gloc.of |.core-hashtable-ref| "../stdlib/core/unicode-assistants.scm" . 220167))
 (set.gloc.of |core.unicode-assistants'foldcase|)
 (call
   (push.const . #f)
   (apply.gloc.of |.make-parameter| "../stdlib/core/unicode-assistants.scm" . 222211))
 (set.gloc.of |core.unicode-assistants'temp`1845|)
 (close
   (0 0 . |core.unicode-assistants'canonical-class-table|)
   (subr.gloc.of |.on-primordial-thread?| 0 "../stdlib/core/unicode-assistants.scm" . 222211)
   (if.true
     (call
       (push.const . "canonical-class")
       (push.const . 1500)
       (apply.gloc.of
         |core.unicode-assistants'load-unicode-table-file|
         "../stdlib/core/unicode-assistants.scm"
         .
         224260))
     (push)
     (extend . 1)
     (close (0 0 . |core.unicode-assistants'canonical-class-table|) (ret.iloc 1 . 0))
     (set.gloc.of
       |core.unicode-assistants'canonical-class-table|
       "../stdlib/core/unicode-assistants.scm"
       .
       222211)
     (ret.iloc 0 . 0))
   (call
     (touch.gloc.of |core.unicode-assistants'temp`1845|)
     (apply.gloc.of
       |core.unicode-assistants'temp`1845|
       "../stdlib/core/unicode-assistants.scm"
       .
       222211))
   (if.true.ret)
   (call
     (push.const . "canonical-class")
     (push.const . 1500)
     (apply.gloc.of
       |core.unicode-assistants'load-unicode-table-file|
       "../stdlib/core/unicode-assistants.scm"
       .
       224260))
   (push)
   (extend . 1)
   (call
     (touch.gloc.of |core.unicode-assistants'temp`1845|)
     (push.iloc.0 . 0)
     (apply.gloc.of
       |core.unicode-assistants'temp`1845|
       "../stdlib/core/unicode-assistants.scm"
       .
       222211))
   (ret.iloc 0 . 0))
 (set.gloc.of |core.unicode-assistants'canonical-class-table|)
 (call
   (push.const . #f)
   (apply.gloc.of |.make-parameter| "../stdlib/core/unicode-assistants.scm" . 226307))
 (set.gloc.of |core.unicode-assistants'temp`1846|)
 (close
   (0 0 . |core.unicode-assistants'decompose-table|)
   (subr.gloc.of |.on-primordial-thread?| 0 "../stdlib/core/unicode-assistants.scm" . 226307)
   (if.true
     (call
       (push.const . "decompose")
       (push.const . 80000)
       (apply.gloc.of
         |core.unicode-assistants'load-unicode-table-file|
         "../stdlib/core/unicode-assistants.scm"
         .
         228356))
     (push)
     (extend . 1)
     (close (0 0 . |core.unicode-assistants'decompose-table|) (ret.iloc 1 . 0))
     (set.gloc.of
       |core.unicode-assistants'decompose-table|
       "../stdlib/core/unicode-assistants.scm"
       .
       226307)
     (ret.iloc 0 . 0))
   (call
     (touch.gloc.of |core.unicode-assistants'temp`1846|)
     (apply.gloc.of
       |core.unicode-assistants'temp`1846|
       "../stdlib/core/unicode-assistants.scm"
       .
       226307))
   (if.true.ret)
   (call
     (push.const . "decompose")
     (push.const . 80000)
     (apply.gloc.of
       |core.unicode-assistants'load-unicode-table-file|
       "../stdlib/core/unicode-assistants.scm"
       .
       228356))
   (push)
   (extend . 1)
   (call
     (touch.gloc.of |core.unicode-assistants'temp`1846|)
     (push.iloc.0 . 0)
     (apply.gloc.of
       |core.unicode-assistants'temp`1846|
       "../stdlib/core/unicode-assistants.scm"
       .
       226307))
   (ret.iloc 0 . 0))
 (set.gloc.of |core.unicode-assistants'decompose-table|)
 (call
   (push.const . #f)
   (apply.gloc.of |.make-parameter| "../stdlib/core/unicode-assistants.scm" . 230403))
 (set.gloc.of |core.unicode-assistants'temp`1847|)
 (close
   (0 0 . |core.unicode-assistants'compose-table|)
   (subr.gloc.of |.on-primordial-thread?| 0 "../stdlib/core/unicode-assistants.scm" . 230403)
   (if.true
     (call
       (push.const . "compose")
       (push.const . 5000)
       (apply.gloc.of
         |core.unicode-assistants'load-unicode-table-file|
         "../stdlib/core/unicode-assistants.scm"
         .
         232452))
     (push)
     (extend . 1)
     (close (0 0 . |core.unicode-assistants'compose-table|) (ret.iloc 1 . 0))
     (set.gloc.of
       |core.unicode-assistants'compose-table|
       "../stdlib/core/unicode-assistants.scm"
       .
       230403)
     (ret.iloc 0 . 0))
   (call
     (touch.gloc.of |core.unicode-assistants'temp`1847|)
     (apply.gloc.of
       |core.unicode-assistants'temp`1847|
       "../stdlib/core/unicode-assistants.scm"
       .
       230403))
   (if.true.ret)
   (call
     (push.const . "compose")
     (push.const . 5000)
     (apply.gloc.of
       |core.unicode-assistants'load-unicode-table-file|
       "../stdlib/core/unicode-assistants.scm"
       .
       232452))
   (push)
   (extend . 1)
   (call
     (touch.gloc.of |core.unicode-assistants'temp`1847|)
     (push.iloc.0 . 0)
     (apply.gloc.of
       |core.unicode-assistants'temp`1847|
       "../stdlib/core/unicode-assistants.scm"
       .
       230403))
   (ret.iloc 0 . 0))
 (set.gloc.of |core.unicode-assistants'compose-table|)
 (call
   (push.const . #f)
   (apply.gloc.of |.make-parameter| "../stdlib/core/unicode-assistants.scm" . 234499))
 (set.gloc.of |core.unicode-assistants'temp`1848|)
 (close
   (0 0 . |core.unicode-assistants'compatibility-table|)
   (subr.gloc.of |.on-primordial-thread?| 0 "../stdlib/core/unicode-assistants.scm" . 234499)
   (if.true
     (call
       (push.const . "compatibility")
       (push.const . 5000)
       (apply.gloc.of
         |core.unicode-assistants'load-unicode-table-file|
         "../stdlib/core/unicode-assistants.scm"
         .
         236548))
     (push)
     (extend . 1)
     (close (0 0 . |core.unicode-assistants'compatibility-table|) (ret.iloc 1 . 0))
     (set.gloc.of
       |core.unicode-assistants'compatibility-table|
       "../stdlib/core/unicode-assistants.scm"
       .
       234499)
     (ret.iloc 0 . 0))
   (call
     (touch.gloc.of |core.unicode-assistants'temp`1848|)
     (apply.gloc.of
       |core.unicode-assistants'temp`1848|
       "../stdlib/core/unicode-assistants.scm"
       .
       234499))
   (if.true.ret)
   (call
     (push.const . "compatibility")
     (push.const . 5000)
     (apply.gloc.of
       |core.unicode-assistants'load-unicode-table-file|
       "../stdlib/core/unicode-assistants.scm"
       .
       236548))
   (push)
   (extend . 1)
   (call
     (touch.gloc.of |core.unicode-assistants'temp`1848|)
     (push.iloc.0 . 0)
     (apply.gloc.of
       |core.unicode-assistants'temp`1848|
       "../stdlib/core/unicode-assistants.scm"
       .
       234499))
   (ret.iloc 0 . 0))
 (set.gloc.of |core.unicode-assistants'compatibility-table|)
 (const . 44032)
 (set.gloc.of |core.unicode-assistants'SBase|)
 (const . 4352)
 (set.gloc.of |core.unicode-assistants'LBase|)
 (const . 4449)
 (set.gloc.of |core.unicode-assistants'VBase|)
 (const . 4519)
 (set.gloc.of |core.unicode-assistants'TBase|)
 (const . 19)
 (set.gloc.of |core.unicode-assistants'LCount|)
 (const . 21)
 (set.gloc.of |core.unicode-assistants'VCount|)
 (const . 28)
 (set.gloc.of |core.unicode-assistants'TCount|)
 (push.gloc.of |core.unicode-assistants'VCount|)
 (push.gloc.of |core.unicode-assistants'TCount|)
 (subr.gloc.of |.*| 2 "../stdlib/core/unicode-assistants.scm" . 245778)
 (set.gloc.of |core.unicode-assistants'NCount|)
 (push.gloc.of |core.unicode-assistants'LCount|)
 (push.gloc.of |core.unicode-assistants'NCount|)
 (subr.gloc.of |.*| 2 "../stdlib/core/unicode-assistants.scm" . 246802)
 (set.gloc.of |core.unicode-assistants'SCount|)
 (close
   (2 0 . |core.unicode-assistants'pair-wise-composition|)
   (call
     (<n.iloc (0 . 0) 0 "../stdlib/core/unicode-assistants.scm" . 250898)
     (if.true.ret)
     (>n.iloc (0 . 0) 1114111 "../stdlib/core/unicode-assistants.scm" . 250910)
     (if.true.ret)
     (<n.iloc (0 . 1) 0 "../stdlib/core/unicode-assistants.scm" . 250929)
     (if.true.ret)
     (push.iloc.0 . 1)
     (push.const . 1114111)
     (ret.subr.gloc.of |.>| "../stdlib/core/unicode-assistants.scm" . 250942))
   (if.true.ret.const . #f)
   (push.iloc.0 . 0)
   (push.gloc.of |core.unicode-assistants'LBase|)
   (push.subr.gloc.of |.-| 2 "../stdlib/core/unicode-assistants.scm" . 252956)
   (push.iloc.0 . 1)
   (push.gloc.of |core.unicode-assistants'VBase|)
   (push.subr.gloc.of |.-| 2 "../stdlib/core/unicode-assistants.scm" . 252981)
   (push.iloc.0 . 0)
   (push.gloc.of |core.unicode-assistants'SBase|)
   (push.subr.gloc.of |.-| 2 "../stdlib/core/unicode-assistants.scm" . 253007)
   (push.iloc.0 . 1)
   (push.gloc.of |core.unicode-assistants'TBase|)
   (push.subr.gloc.of |.-| 2 "../stdlib/core/unicode-assistants.scm" . 253032)
   (extend . 4)
   (call
     (push.const . -1)
     (push.iloc.0 . 0)
     (push.gloc.of |core.unicode-assistants'LCount|)
     (subr.gloc.of |.<| 3 "../stdlib/core/unicode-assistants.scm" . 253980)
     (if.false.ret)
     (push.const . -1)
     (push.iloc.0 . 1)
     (push.gloc.of |core.unicode-assistants'VCount|)
     (ret.subr.gloc.of |.<| "../stdlib/core/unicode-assistants.scm" . 254001))
   (if.true
     (push.gloc.of |core.unicode-assistants'SBase|)
     (push.gloc.of |core.unicode-assistants'TCount|)
     (push.iloc.0 . 1)
     (push.iloc.0 . 0)
     (push.gloc.of |core.unicode-assistants'VCount|)
     (push.subr.gloc.of |.*| 2 "../stdlib/core/unicode-assistants.scm" . 255028)
     (push.subr.gloc.of |.+| 2 "../stdlib/core/unicode-assistants.scm" . 255018)
     (push.subr.gloc.of |.*| 2 "../stdlib/core/unicode-assistants.scm" . 255008)
     (ret.subr.gloc.of |.+| "../stdlib/core/unicode-assistants.scm" . 254999))
   (call
     (push.const . -1)
     (push.iloc.0 . 2)
     (push.gloc.of |core.unicode-assistants'SCount|)
     (subr.gloc.of |.<| 3 "../stdlib/core/unicode-assistants.scm" . 256028)
     (if.false.ret)
     (push.const . -1)
     (push.iloc.0 . 3)
     (push.gloc.of |core.unicode-assistants'TCount|)
     (subr.gloc.of |.<| 3 "../stdlib/core/unicode-assistants.scm" . 256049)
     (if.false.ret)
     (push.const . 0)
     (call
       (push.iloc.0 . 2)
       (push.gloc.of |core.unicode-assistants'TCount|)
       (apply.gloc.of |.mod| "../stdlib/core/unicode-assistants.scm" . 256075))
     (push)
     (ret.subr.gloc.of |.=| "../stdlib/core/unicode-assistants.scm" . 256070))
   (if.true
     (push.iloc.1 . 0)
     (push.iloc.0 . 3)
     (ret.subr.gloc.of |.+| "../stdlib/core/unicode-assistants.scm" . 257047))
   (call
     (apply.gloc.of
       |core.unicode-assistants'compose-table|
       "../stdlib/core/unicode-assistants.scm"
       .
       259115))
   (push)
   (push.iloc.1 . 0)
   (push.const . 65536)
   (push.subr.gloc.of |.*| 2 "../stdlib/core/unicode-assistants.scm" . 259134)
   (push.iloc.1 . 1)
   (push.subr.gloc.of |.+| 2 "../stdlib/core/unicode-assistants.scm" . 259131)
   (push.const . #f)
   (ret.subr.gloc.of |.core-hashtable-ref| "../stdlib/core/unicode-assistants.scm" . 259095))
 (set.gloc.of |core.unicode-assistants'pair-wise-composition|)
 (close
   (3 0 . |core.unicode-assistants'recursive-decomposition|)
   (call
     (apply.gloc.of
       |core.unicode-assistants'decompose-table|
       "../stdlib/core/unicode-assistants.scm"
       .
       263206))
   (push)
   (push.iloc.0 . 1)
   (push.const . #f)
   (push.subr.gloc.of |.core-hashtable-ref| 3 "../stdlib/core/unicode-assistants.scm" . 263186)
   (extend . 1)
   (push.iloc.1 . 1)
   (push.gloc.of |core.unicode-assistants'SBase|)
   (push.subr.gloc.of |.-| 2 "../stdlib/core/unicode-assistants.scm" . 264215)
   (extend . 1)
   (call
     (iloc.1 . 0)
     (if.false.ret)
     (call
       (iloc 2 . 0)
       (if.false.ret)
       (call
         (apply.gloc.of
           |core.unicode-assistants'compatibility-table|
           "../stdlib/core/unicode-assistants.scm"
           .
           265283))
       (push)
       (push.iloc 2 . 1)
       (push.const . #f)
       (ret.subr.gloc.of |.core-hashtable-ref| "../stdlib/core/unicode-assistants.scm" . 265263))
     (push)
     (ret.subr.gloc.of |.not| "../stdlib/core/unicode-assistants.scm" . 265243))
   (if.true
     (push.close
       (1 0)
       (push.iloc 3 . 0)
       (push.iloc.0 . 0)
       (push.iloc 3 . 2)
       (apply.gloc.of
         |core.unicode-assistants'recursive-decomposition|
         "../stdlib/core/unicode-assistants.scm"
         .
         266281))
     (push.iloc.1 . 0)
     (apply.gloc.of |.for-each| "../stdlib/core/unicode-assistants.scm" . 266258))
   (push.const . -1)
   (push.iloc.0 . 0)
   (push.gloc.of |core.unicode-assistants'SCount|)
   (subr.gloc.of |.<| 3 "../stdlib/core/unicode-assistants.scm" . 267282)
   (if.true
     (push.gloc.of |core.unicode-assistants'VBase|)
     (call
       (push.iloc.0 . 0)
       (push.gloc.of |core.unicode-assistants'NCount|)
       (apply.gloc.of |.mod| "../stdlib/core/unicode-assistants.scm" . 269353))
     (push)
     (push.gloc.of |core.unicode-assistants'TCount|)
     (push.subr.gloc.of |.div| 2 "../stdlib/core/unicode-assistants.scm" . 269348)
     (push.subr.gloc.of |.+| 2 "../stdlib/core/unicode-assistants.scm" . 269339)
     (push.gloc.of |core.unicode-assistants'TBase|)
     (call
       (push.iloc.0 . 0)
       (push.gloc.of |core.unicode-assistants'TCount|)
       (apply.gloc.of |.mod| "../stdlib/core/unicode-assistants.scm" . 270372))
     (push)
     (push.subr.gloc.of |.+| 2 "../stdlib/core/unicode-assistants.scm" . 270363)
     (extend . 2)
     (push.iloc 3 . 2)
     (push.gloc.of |core.unicode-assistants'LBase|)
     (push.iloc.1 . 0)
     (push.gloc.of |core.unicode-assistants'NCount|)
     (push.subr.gloc.of |.div| 2 "../stdlib/core/unicode-assistants.scm" . 268324)
     (push.subr.gloc.of |.+| 2 "../stdlib/core/unicode-assistants.scm" . 268315)
     (push.subr.gloc.of |.integer->char| 1 "../stdlib/core/unicode-assistants.scm" . 271397)
     (subr.gloc.of |.put-char| 2 "../stdlib/core/unicode-assistants.scm" . 271380)
     (push.iloc 3 . 2)
     (push.iloc.0 . 0)
     (push.subr.gloc.of |.integer->char| 1 "../stdlib/core/unicode-assistants.scm" . 272421)
     (subr.gloc.of |.put-char| 2 "../stdlib/core/unicode-assistants.scm" . 272404)
     (gloc.of |core.unicode-assistants'TBase|)
     (=.iloc (0 . 1) "../stdlib/core/unicode-assistants.scm" . 273432)
     (if.true.ret)
     (push.iloc 3 . 2)
     (push.iloc.0 . 1)
     (push.subr.gloc.of |.integer->char| 1 "../stdlib/core/unicode-assistants.scm" . 273461)
     (ret.subr.gloc.of |.put-char| "../stdlib/core/unicode-assistants.scm" . 273444))
   (push.iloc 2 . 2)
   (push.iloc 2 . 1)
   (push.subr.gloc.of |.integer->char| 1 "../stdlib/core/unicode-assistants.scm" . 275491)
   (ret.subr.gloc.of |.put-char| "../stdlib/core/unicode-assistants.scm" . 275474))
 (set.gloc.of |core.unicode-assistants'recursive-decomposition|)
 (close
   (2 0 . |core.unicode-assistants'decompose|)
   (subr.gloc.of |.make-string-output-port| 0)
   (push)
   (extend . 1)
   (extend.enclose+
     (1 0 . loop)
     (push.iloc.0 . 0)
     (subr.gloc.of |.eof-object?| 1 "../stdlib/core/unicode-assistants.scm" . 281618)
     (if.true
       (push.iloc 2 . 0)
       (push.subr.gloc.of
         |.extract-accumulated-string|
         1
         "../stdlib/core/unicode-assistants.scm"
         .
         282657)
       (subr.gloc.of |.native-endianness| 0)
       (push)
       (apply.gloc.of
         |core.bytevector-transcoders'string->utf32|
         "../stdlib/core/unicode-assistants.scm"
         .
         282642))
     (call
       (push.iloc 3 . 1)
       (push.iloc.0 . 0)
       (push.subr.gloc.of |.char->integer| 1 "../stdlib/core/unicode-assistants.scm" . 284725)
       (push.iloc 2 . 0)
       (apply.gloc.of
         |core.unicode-assistants'recursive-decomposition|
         "../stdlib/core/unicode-assistants.scm"
         .
         284690))
     (push.iloc 3 . 0)
     (push.subr.gloc.of |.get-char| 1 "../stdlib/core/unicode-assistants.scm" . 285720)
     (apply.iloc+ (1 . 0) "../stdlib/core/unicode-assistants.scm" . 285714))
   (push.iloc 2 . 0)
   (push.subr.gloc.of |.get-char| 1 "../stdlib/core/unicode-assistants.scm" . 280600)
   (apply.iloc+ (0 . 0) "../stdlib/core/unicode-assistants.scm" . 281611))
 (set.gloc.of |core.unicode-assistants'decompose|)
 (close
   (1 0 . |core.unicode-assistants'canonical-class|)
   (call
     (apply.gloc.of
       |core.unicode-assistants'canonical-class-table|
       "../stdlib/core/unicode-assistants.scm"
       .
       289819))
   (push)
   (push.iloc.0 . 0)
   (push.const . 0)
   (ret.subr.gloc.of |.core-hashtable-ref| "../stdlib/core/unicode-assistants.scm" . 289799))
 (set.gloc.of |core.unicode-assistants'canonical-class|)
 (close
   (1 0 . |core.unicode-assistants'sort-combining-marks!|)
   (push.iloc.0 . 0)
   (push.subr.gloc.of |.bytevector-length| 1 "../stdlib/core/unicode-assistants.scm" . 293910)
   (push.const . 4)
   (push.subr.gloc.of |.-| 2 "../stdlib/core/unicode-assistants.scm" . 293907)
   (extend . 1)
   (extend.enclose+
     (1 0 . loop)
     (iloc.0 . 0)
     (>=.iloc (2 . 0) "../stdlib/core/unicode-assistants.scm" . 295954)
     (if.true (ret.iloc 3 . 0))
     (push.iloc 3 . 0)
     (push.iloc.0 . 0)
     (push.subr.gloc.of
       |.bytevector-u32-native-ref|
       2
       "../stdlib/core/unicode-assistants.scm"
       .
       298014)
     (push.iloc 3 . 0)
     (push.n+.iloc (0 . 0) 4 "../stdlib/core/unicode-assistants.scm" . 299068)
     (push.subr.gloc.of
       |.bytevector-u32-native-ref|
       2
       "../stdlib/core/unicode-assistants.scm"
       .
       299038)
     (extend . 2)
     (call
       (push.iloc.0 . 0)
       (apply.gloc.of
         |core.unicode-assistants'canonical-class|
         "../stdlib/core/unicode-assistants.scm"
         .
         300067))
     (push)
     (call
       (push.iloc.0 . 1)
       (apply.gloc.of
         |core.unicode-assistants'canonical-class|
         "../stdlib/core/unicode-assistants.scm"
         .
         301091))
     (push)
     (extend . 2)
     (call
       (>n.iloc (0 . 0) 0 "../stdlib/core/unicode-assistants.scm" . 302114)
       (if.false.ret)
       (>n.iloc (0 . 1) 0 "../stdlib/core/unicode-assistants.scm" . 302128)
       (if.false.ret)
       (push.iloc.0 . 0)
       (push.iloc.0 . 1)
       (ret.subr.gloc.of |.>| "../stdlib/core/unicode-assistants.scm" . 302142))
     (if.true
       (push.iloc 5 . 0)
       (push.iloc 2 . 0)
       (push.iloc.1 . 1)
       (subr.gloc.of
         |.bytevector-u32-native-set!|
         3
         "../stdlib/core/unicode-assistants.scm"
         .
         303133)
       (push.iloc 5 . 0)
       (push.n+.iloc (2 . 0) 4 "../stdlib/core/unicode-assistants.scm" . 304188)
       (push.iloc.1 . 0)
       (subr.gloc.of
         |.bytevector-u32-native-set!|
         3
         "../stdlib/core/unicode-assistants.scm"
         .
         304157)
       (call
         (>=n.iloc (2 . 0) 4 "../stdlib/core/unicode-assistants.scm" . 305191)
         (if.true
           (push.iloc 2 . 0)
           (push.const . 4)
           (ret.subr.gloc.of |.-| "../stdlib/core/unicode-assistants.scm" . 305200))
         (ret.const . 4))
       (push)
       (apply.iloc+ (3 . 0) "../stdlib/core/unicode-assistants.scm" . 305181))
     (push.n+.iloc (2 . 0) 4 "../stdlib/core/unicode-assistants.scm" . 307235)
     (apply.iloc+ (3 . 0) "../stdlib/core/unicode-assistants.scm" . 307229))
   (push.const . 0)
   (apply.iloc+ (0 . 0) "../stdlib/core/unicode-assistants.scm" . 295947))
 (set.gloc.of |core.unicode-assistants'sort-combining-marks!|)
 (close
   (1 0 . |core.unicode-assistants'compose|)
   (push.iloc.0 . 0)
   (push.subr.gloc.of |.bytevector-length| 1 "../stdlib/core/unicode-assistants.scm" . 311314)
   (extend . 1)
   (push.iloc.1 . 0)
   (push.const . 0)
   (push.subr.gloc.of
     |.bytevector-u32-native-ref|
     2
     "../stdlib/core/unicode-assistants.scm"
     .
     312343)
   (extend . 1)
   (extend.enclose+
     (5 0 . loop)
     (iloc.0 . 0)
     (>=.iloc (3 . 0) "../stdlib/core/unicode-assistants.scm" . 315412)
     (if.true
       (push.iloc.0 . 4)
       (push.subr.gloc.of |.make-bytevector| 1 "../stdlib/core/unicode-assistants.scm" . 316450)
       (extend . 1)
       (push.iloc 5 . 0)
       (push.const . 0)
       (push.iloc.0 . 0)
       (push.const . 0)
       (push.iloc.1 . 4)
       (subr.gloc.of |.bytevector-copy!| 5 "../stdlib/core/unicode-assistants.scm" . 317462)
       (push.iloc.0 . 0)
       (subr.gloc.of |.native-endianness| 0)
       (push)
       (push.const . #t)
       (apply.gloc.of
         |core.bytevector-transcoders'utf32->string|
         "../stdlib/core/unicode-assistants.scm"
         .
         318486))
     (push.iloc 4 . 0)
     (push.iloc.0 . 0)
     (push.subr.gloc.of
       |.bytevector-u32-native-ref|
       2
       "../stdlib/core/unicode-assistants.scm"
       .
       320545)
     (extend . 1)
     (call
       (push.iloc.0 . 0)
       (apply.gloc.of
         |core.unicode-assistants'canonical-class|
         "../stdlib/core/unicode-assistants.scm"
         .
         321572))
     (push)
     (extend . 1)
     (call
       (call
         (=n.iloc (2 . 2) 0 "../stdlib/core/unicode-assistants.scm" . 322598)
         (if.true.ret)
         (push.iloc 2 . 2)
         (push.iloc.0 . 0)
         (ret.subr.gloc.of |.<| "../stdlib/core/unicode-assistants.scm" . 322615))
       (if.false.ret)
       (push.iloc 2 . 1)
       (push.iloc.1 . 0)
       (apply.gloc.of
         |core.unicode-assistants'pair-wise-composition|
         "../stdlib/core/unicode-assistants.scm"
         .
         323618))
     (push)
     (extend . 1)
     (iloc.0 . 0)
     (if.true
       (push.iloc 7 . 0)
       (push.iloc 3 . 3)
       (push.iloc.0 . 0)
       (subr.gloc.of
         |.bytevector-u32-native-set!|
         3
         "../stdlib/core/unicode-assistants.scm"
         .
         325666)
       (push.n+.iloc (3 . 0) 4 "../stdlib/core/unicode-assistants.scm" . 326696)
       (push.iloc.0 . 0)
       (call
         (push.iloc.0 . 0)
         (apply.gloc.of
           |core.unicode-assistants'canonical-class|
           "../stdlib/core/unicode-assistants.scm"
           .
           326713))
       (push)
       (push.iloc 3 . 3)
       (push.iloc 3 . 4)
       (apply.iloc+ (4 . 0) "../stdlib/core/unicode-assistants.scm" . 326690))
     (push.iloc 7 . 0)
     (push.iloc 3 . 4)
     (push.iloc 2 . 0)
     (subr.gloc.of |.bytevector-u32-native-set!| 3 "../stdlib/core/unicode-assistants.scm" . 328733)
     (=n.iloc (1 . 0) 0 "../stdlib/core/unicode-assistants.scm" . 329761)
     (if.true
       (push.n+.iloc (3 . 0) 4 "../stdlib/core/unicode-assistants.scm" . 330791)
       (push.iloc 2 . 0)
       (push.iloc.1 . 0)
       (push.iloc 3 . 4)
       (push.n+.iloc (3 . 4) 4 "../stdlib/core/unicode-assistants.scm" . 330821)
       (apply.iloc+ (4 . 0) "../stdlib/core/unicode-assistants.scm" . 330785))
     (push.n+.iloc (3 . 0) 4 "../stdlib/core/unicode-assistants.scm" . 331815)
     (push.iloc 3 . 1)
     (push.iloc.1 . 0)
     (push.iloc 3 . 3)
     (push.n+.iloc (3 . 4) 4 "../stdlib/core/unicode-assistants.scm" . 331851)
     (apply.iloc+ (4 . 0) "../stdlib/core/unicode-assistants.scm" . 331809))
   (push.const . 4)
   (push.iloc.1 . 0)
   (call
     (call
       (push.iloc.1 . 0)
       (apply.gloc.of
         |core.unicode-assistants'canonical-class|
         "../stdlib/core/unicode-assistants.scm"
         .
         313381))
     (push)
     (subr.gloc.of |.zero?| 1 "../stdlib/core/unicode-assistants.scm" . 313374)
     (if.true (ret.const . 0))
     (ret.const . 256))
   (push)
   (push.const . 0)
   (push.const . 4)
   (apply.iloc+ (0 . 0) "../stdlib/core/unicode-assistants.scm" . 315405))
 (set.gloc.of |core.unicode-assistants'compose|)
 (call
   (push.const . syntax)
   (push.const . |core.unicode-assistants'autoload|)
   (push.const
     ...
     ()
     ("../stdlib/core/unicode-assistants.scm" . 55301)
     ((_ var init)
      (begin
        (define temp (make-parameter #f))
        (define var
          (lambda ()
            (if (on-primordial-thread?)
                (let ((value init)) (set! var (lambda () value)) value)
                (or (temp) (let ((value init)) (temp value) value))))))
      ((init . 0) (var . 0))
      (or set! value let on-primordial-thread? if lambda make-parameter temp define begin)))
   (push.const
     (or import . |.or|)
     (init unbound)
     (let import . |.let|)
     (value unbound)
     (on-primordial-thread? import . |.on-primordial-thread?|)
     (temp unbound)
     (make-parameter import . |.make-parameter|)
     (begin import . |.begin|)
     (define import . |.define|)
     (_ import . |._|)
     (autoload import . |core.unicode-assistants'autoload|)
     (set! import . |.set!|)
     (lambda import . |.lambda|)
     (... import . |....|)
     (var unbound)
     (if import . |.if|))
   (apply.gloc.of |.set-top-level-macro!| "../stdlib/core/unicode-assistants.scm" . 51211))
 (push.const . core.unicode-assistants)
 (push.const . #f)
 (push.const
   (general-category import . |core.unicode-assistants'general-category|)
   (simple-uppercase import . |core.unicode-assistants'simple-uppercase|)
   (simple-lowercase import . |core.unicode-assistants'simple-lowercase|)
   (simple-titlecase import . |core.unicode-assistants'simple-titlecase|)
   (numeric-property? import . |core.unicode-assistants'numeric-property?|)
   (other-uppercase-property? import . |core.unicode-assistants'other-uppercase-property?|)
   (other-lowercase-property? import . |core.unicode-assistants'other-lowercase-property?|)
   (other-alphabetic-property? import . |core.unicode-assistants'other-alphabetic-property?|)
   (special-casing-lower import . |core.unicode-assistants'special-casing-lower|)
   (special-casing-title import . |core.unicode-assistants'special-casing-title|)
   (special-casing-upper import . |core.unicode-assistants'special-casing-upper|)
   (foldcase import . |core.unicode-assistants'foldcase|)
   (pair-wise-composition import . |core.unicode-assistants'pair-wise-composition|)
   (recursive-decomposition import . |core.unicode-assistants'recursive-decomposition|)
   (decompose import . |core.unicode-assistants'decompose|)
   (sort-combining-marks! import . |core.unicode-assistants'sort-combining-marks!|)
   (compose import . |core.unicode-assistants'compose|)
   (digit-value import . |core.unicode-assistants'digit-value|))
 (apply.gloc.of |.intern-scheme-library| "../stdlib/core/unicode-assistants.scm" . 51211))

((call
   (push.const core bytevector-transcoders)
   (apply.gloc.of |.require-scheme-library| "../stdlib/core/unicode.scm" . 5121))
 (call
   (push.const core bytevectors)
   (apply.gloc.of |.require-scheme-library| "../stdlib/core/unicode.scm" . 5121))
 (call
   (push.const core unicode-assistants)
   (apply.gloc.of |.require-scheme-library| "../stdlib/core/unicode.scm" . 5121))
 (call
   (push.const core io)
   (apply.gloc.of |.require-scheme-library| "../stdlib/core/unicode.scm" . 5121))
 (call
   (push.const core lists)
   (apply.gloc.of |.require-scheme-library| "../stdlib/core/unicode.scm" . 5121))
 (call
   (push.const core primitives)
   (apply.gloc.of |.require-scheme-library| "../stdlib/core/unicode.scm" . 5121))
 (close
   (1 0 . |core.unicode'char-upcase|)
   (push.iloc.0 . 0)
   (push.const . #\a)
   (subr.gloc.of |.char<?| 2 "../stdlib/core/unicode.scm" . 47118)
   (if.true (ret.iloc 0 . 0))
   (push.iloc.0 . 0)
   (push.const . #\z)
   (subr.gloc.of |.char>?| 2 "../stdlib/core/unicode.scm" . 48142)
   (if.true
     (push.iloc.0 . 0)
     (apply.gloc.of
       |core.unicode-assistants'simple-uppercase|
       "../stdlib/core/unicode.scm"
       .
       49166))
   (push.iloc.0 . 0)
   (push.subr.gloc.of |.char->integer| 1 "../stdlib/core/unicode.scm" . 51232)
   (push.const . 32)
   (push.subr.gloc.of |.-| 2 "../stdlib/core/unicode.scm" . 51229)
   (ret.subr.gloc.of |.integer->char| "../stdlib/core/unicode.scm" . 51214))
 (set.gloc.of |core.unicode'char-upcase|)
 (close
   (1 0 . |core.unicode'char-downcase|)
   (push.iloc.0 . 0)
   (push.const . #\A)
   (subr.gloc.of |.char<?| 2 "../stdlib/core/unicode.scm" . 55310)
   (if.true (ret.iloc 0 . 0))
   (push.iloc.0 . 0)
   (push.const . #\Z)
   (subr.gloc.of |.char<=?| 2 "../stdlib/core/unicode.scm" . 56334)
   (if.true
     (push.iloc.0 . 0)
     (push.subr.gloc.of |.char->integer| 1 "../stdlib/core/unicode.scm" . 57376)
     (push.const . 32)
     (push.subr.gloc.of |.+| 2 "../stdlib/core/unicode.scm" . 57373)
     (ret.subr.gloc.of |.integer->char| "../stdlib/core/unicode.scm" . 57358))
   (push.iloc.0 . 0)
   (push.const . #\z)
   (subr.gloc.of |.char>?| 2 "../stdlib/core/unicode.scm" . 58382)
   (if.true
     (push.iloc.0 . 0)
     (apply.gloc.of
       |core.unicode-assistants'simple-lowercase|
       "../stdlib/core/unicode.scm"
       .
       59406))
   (ret.iloc 0 . 0))
 (set.gloc.of |core.unicode'char-downcase|)
 (close
   (1 0 . |core.unicode'char-titlecase|)
   (push.iloc.0 . 0)
   (apply.gloc.of |core.unicode-assistants'simple-titlecase| "../stdlib/core/unicode.scm" . 64519))
 (set.gloc.of |core.unicode'char-titlecase|)
 (close
   (1 0 . |core.unicode'char-foldcase|)
   (push.iloc.0 . 0)
   (push.const . #\z)
   (subr.gloc.of |.char<=?| 2 "../stdlib/core/unicode.scm" . 68622)
   (if.true
     (push.iloc.0 . 0)
     (apply.gloc.of |core.unicode'char-downcase| "../stdlib/core/unicode.scm" . 69646))
   (call
     (push.iloc.0 . 0)
     (push.const . #\İ)
     (subr.gloc.of |.char=?| 2 "../stdlib/core/unicode.scm" . 70674)
     (if.true.ret)
     (push.iloc.0 . 0)
     (push.const . #\ı)
     (ret.subr.gloc.of |.char=?| "../stdlib/core/unicode.scm" . 71698))
   (if.true (ret.iloc 0 . 0))
   (call
     (push.iloc.0 . 0)
     (apply.gloc.of |core.unicode'char-upcase| "../stdlib/core/unicode.scm" . 74781))
   (push)
   (apply.gloc.of |core.unicode'char-downcase| "../stdlib/core/unicode.scm" . 74766))
 (set.gloc.of |core.unicode'char-foldcase|)
 (close
   (0 1 . |core.unicode'char-ci=?|)
   (push.gloc.of |.char=?|)
   (call
     (push.gloc.of |core.unicode'char-foldcase|)
     (push.iloc.0 . 0)
     (apply.gloc.of |.map| "../stdlib/core/unicode.scm" . 76847))
   (push)
   (apply.gloc.of |.apply| "../stdlib/core/unicode.scm" . 76833))
 (set.gloc.of |core.unicode'char-ci=?|)
 (close
   (0 1 . |core.unicode'char-ci<?|)
   (push.gloc.of |.char<?|)
   (call
     (push.gloc.of |core.unicode'char-foldcase|)
     (push.iloc.0 . 0)
     (apply.gloc.of |.map| "../stdlib/core/unicode.scm" . 77871))
   (push)
   (apply.gloc.of |.apply| "../stdlib/core/unicode.scm" . 77857))
 (set.gloc.of |core.unicode'char-ci<?|)
 (close
   (0 1 . |core.unicode'char-ci>?|)
   (push.gloc.of |.char>?|)
   (call
     (push.gloc.of |core.unicode'char-foldcase|)
     (push.iloc.0 . 0)
     (apply.gloc.of |.map| "../stdlib/core/unicode.scm" . 78895))
   (push)
   (apply.gloc.of |.apply| "../stdlib/core/unicode.scm" . 78881))
 (set.gloc.of |core.unicode'char-ci>?|)
 (close
   (0 1 . |core.unicode'char-ci<=?|)
   (push.gloc.of |.char<=?|)
   (call
     (push.gloc.of |core.unicode'char-foldcase|)
     (push.iloc.0 . 0)
     (apply.gloc.of |.map| "../stdlib/core/unicode.scm" . 79921))
   (push)
   (apply.gloc.of |.apply| "../stdlib/core/unicode.scm" . 79906))
 (set.gloc.of |core.unicode'char-ci<=?|)
 (close
   (0 1 . |core.unicode'char-ci>=?|)
   (push.gloc.of |.char>=?|)
   (call
     (push.gloc.of |core.unicode'char-foldcase|)
     (push.iloc.0 . 0)
     (apply.gloc.of |.map| "../stdlib/core/unicode.scm" . 80945))
   (push)
   (apply.gloc.of |.apply| "../stdlib/core/unicode.scm" . 80930))
 (set.gloc.of |core.unicode'char-ci>=?|)
 (close
   (1 0 . |core.unicode'char-alphabetic?|)
   (call
     (push.const . #\a)
     (push.iloc.0 . 0)
     (subr.gloc.of |.char<=?| 2 "../stdlib/core/unicode.scm" . 85008)
     (if.false.ret)
     (push.iloc.0 . 0)
     (push.const . #\z)
     (ret.subr.gloc.of |.char<=?| "../stdlib/core/unicode.scm" . 85025))
   (if.true.ret)
   (call
     (push.const . #\A)
     (push.iloc.0 . 0)
     (subr.gloc.of |.char<=?| 2 "../stdlib/core/unicode.scm" . 86032)
     (if.false.ret)
     (push.iloc.0 . 0)
     (push.const . #\Z)
     (ret.subr.gloc.of |.char<=?| "../stdlib/core/unicode.scm" . 86049))
   (if.true.ret)
   (push.const . #\)
   (push.iloc.0 . 0)
   (subr.gloc.of |.char<=?| 2 "../stdlib/core/unicode.scm" . 87056)
   (if.false.ret)
   (call
     (push.iloc.0 . 0)
     (apply.gloc.of
       |core.unicode-assistants'general-category|
       "../stdlib/core/unicode.scm"
       .
       88086))
   (push)
   (extend . 1)
   (push.iloc.0 . 0)
   (push.const Lu Ll Lt Lm Lo Nl)
   (subr.gloc.of |.memq| 2 "../stdlib/core/unicode.scm" . 89107)
   (if.true.ret.const . #t)
   (push.iloc.0 . 0)
   (push.const Mn Mc So)
   (subr.gloc.of |.memq| 2 "../stdlib/core/unicode.scm" . 89107)
   (if.false.ret)
   (push.iloc.1 . 0)
   (apply.gloc.of
     |core.unicode-assistants'other-alphabetic-property?|
     "../stdlib/core/unicode.scm"
     .
     91155))
 (set.gloc.of |core.unicode'char-alphabetic?|)
 (close
   (1 0 . |core.unicode'char-numeric?|)
   (call
     (push.const . #\0)
     (push.iloc.0 . 0)
     (subr.gloc.of |.char<=?| 2 "../stdlib/core/unicode.scm" . 96272)
     (if.false.ret)
     (push.iloc.0 . 0)
     (push.const . #\9)
     (ret.subr.gloc.of |.char<=?| "../stdlib/core/unicode.scm" . 96289))
   (if.true.ret)
   (push.const . #\)
   (push.iloc.0 . 0)
   (subr.gloc.of |.char<=?| 2 "../stdlib/core/unicode.scm" . 97296)
   (if.false.ret)
   (call
     (push.iloc.0 . 0)
     (apply.gloc.of
       |core.unicode-assistants'general-category|
       "../stdlib/core/unicode.scm"
       .
       98325))
   (push)
   (const . Nd)
   (ret.eq? "../stdlib/core/unicode.scm" . 98320))
 (set.gloc.of |core.unicode'char-numeric?|)
 (close
   (1 0 . |core.unicode'char-upper-case?|)
   (call
     (push.const . #\A)
     (push.iloc.0 . 0)
     (subr.gloc.of |.char<=?| 2 "../stdlib/core/unicode.scm" . 102416)
     (if.false.ret)
     (push.iloc.0 . 0)
     (push.const . #\Z)
     (ret.subr.gloc.of |.char<=?| "../stdlib/core/unicode.scm" . 102433))
   (if.true.ret)
   (push.const . #\)
   (push.iloc.0 . 0)
   (subr.gloc.of |.char<=?| 2 "../stdlib/core/unicode.scm" . 103440)
   (if.false.ret)
   (call
     (push.iloc.0 . 0)
     (apply.gloc.of
       |core.unicode-assistants'general-category|
       "../stdlib/core/unicode.scm"
       .
       104470))
   (push)
   (extend . 1)
   (push.iloc.0 . 0)
   (const . Lu)
   (if.eq?.ret.const . #t)
   (push.iloc.0 . 0)
   (push.const Nl So)
   (subr.gloc.of |.memq| 2 "../stdlib/core/unicode.scm" . 106515)
   (if.false.ret)
   (push.iloc.1 . 0)
   (apply.gloc.of
     |core.unicode-assistants'other-uppercase-property?|
     "../stdlib/core/unicode.scm"
     .
     107539))
 (set.gloc.of |core.unicode'char-upper-case?|)
 (close
   (1 0 . |core.unicode'char-lower-case?|)
   (call
     (push.const . #\a)
     (push.iloc.0 . 0)
     (subr.gloc.of |.char<=?| 2 "../stdlib/core/unicode.scm" . 112656)
     (if.false.ret)
     (push.iloc.0 . 0)
     (push.const . #\z)
     (ret.subr.gloc.of |.char<=?| "../stdlib/core/unicode.scm" . 112673))
   (if.true.ret)
   (push.const . #\)
   (push.iloc.0 . 0)
   (subr.gloc.of |.char<=?| 2 "../stdlib/core/unicode.scm" . 113680)
   (if.false.ret)
   (call
     (push.iloc.0 . 0)
     (apply.gloc.of
       |core.unicode-assistants'general-category|
       "../stdlib/core/unicode.scm"
       .
       114710))
   (push)
   (extend . 1)
   (push.iloc.0 . 0)
   (const . Ll)
   (if.eq?.ret.const . #t)
   (push.iloc.0 . 0)
   (push.const Lm Mn Nl So)
   (subr.gloc.of |.memq| 2 "../stdlib/core/unicode.scm" . 116755)
   (if.false.ret)
   (push.iloc.1 . 0)
   (apply.gloc.of
     |core.unicode-assistants'other-lowercase-property?|
     "../stdlib/core/unicode.scm"
     .
     117779))
 (set.gloc.of |core.unicode'char-lower-case?|)
 (close
   (1 0 . |core.unicode'char-title-case?|)
   (call
     (push.iloc.0 . 0)
     (apply.gloc.of
       |core.unicode-assistants'general-category|
       "../stdlib/core/unicode.scm"
       .
       122892))
   (push)
   (const . Lt)
   (ret.eq? "../stdlib/core/unicode.scm" . 122887))
 (set.gloc.of |core.unicode'char-title-case?|)
 (close
   (1 0 . |core.unicode'char-general-category|)
   (push.iloc.0 . 0)
   (apply.gloc.of |core.unicode-assistants'general-category| "../stdlib/core/unicode.scm" . 126983))
 (set.gloc.of |core.unicode'char-general-category|)
 (close
   (1 0 . |core.unicode'string-upcase|)
   (call
     (push.iloc.0 . 0)
     (apply.gloc.of |core.io'open-string-input-port| "../stdlib/core/unicode.scm" . 131092))
   (push)
   (subr.gloc.of |.make-string-output-port| 0)
   (push)
   (extend . 2)
   (call
     (extend.enclose+
       (1 0 . loop)
       (push.iloc.0 . 0)
       (subr.gloc.of |.eof-object?| 1 "../stdlib/core/unicode.scm" . 135193)
       (if.true
         (push.iloc 2 . 1)
         (ret.subr.gloc.of |.extract-accumulated-string| "../stdlib/core/unicode.scm" . 135210))
       (call
         (push.iloc.0 . 0)
         (apply.gloc.of
           |core.unicode-assistants'special-casing-upper|
           "../stdlib/core/unicode.scm"
           .
           136217))
       (push)
       (extend . 1)
       (iloc.0 . 0)
       (if.true
         (call
           (push.close
             (1 0)
             (push.iloc 4 . 1)
             (call
               (push.iloc.0 . 0)
               (push.subr.gloc.of |.integer->char| 1 "../stdlib/core/unicode.scm" . 138322)
               (apply.gloc.of |core.unicode'char-upcase| "../stdlib/core/unicode.scm" . 138309))
             (push)
             (ret.subr.gloc.of |.put-char| "../stdlib/core/unicode.scm" . 138292))
           (push.iloc.0 . 0)
           (apply.gloc.of |.for-each| "../stdlib/core/unicode.scm" . 138270))
         (push.iloc 3 . 0)
         (push.subr.gloc.of |.get-char| 1 "../stdlib/core/unicode.scm" . 139300)
         (apply.iloc+ (2 . 0) "../stdlib/core/unicode.scm" . 139294))
       (push.iloc 3 . 1)
       (call
         (push.iloc.1 . 0)
         (apply.gloc.of |core.unicode'char-upcase| "../stdlib/core/unicode.scm" . 141354))
       (push)
       (subr.gloc.of |.put-char| 2 "../stdlib/core/unicode.scm" . 141337)
       (push.iloc 3 . 0)
       (push.subr.gloc.of |.get-char| 1 "../stdlib/core/unicode.scm" . 142367)
       (apply.iloc+ (2 . 0) "../stdlib/core/unicode.scm" . 142361))
     (push.iloc.1 . 0)
     (push.subr.gloc.of |.get-char| 1 "../stdlib/core/unicode.scm" . 134175)
     (apply.iloc+ (0 . 0) "../stdlib/core/unicode.scm" . 135186))
   (push)
   (extend . 1)
   (push.iloc 2 . 0)
   (push.iloc.0 . 0)
   (subr.gloc.of |.string=?| 2 "../stdlib/core/unicode.scm" . 143375)
   (if.true (ret.iloc 2 . 0))
   (ret.iloc 0 . 0))
 (set.gloc.of |core.unicode'string-upcase|)
 (close
   (2 0 . |core.unicode'final-sigma?|)
   (push.iloc.0 . 0)
   (push.subr.gloc.of |.lookahead-char| 1 "../stdlib/core/unicode.scm" . 147473)
   (extend . 1)
   (push.iloc.0 . 0)
   (subr.gloc.of |.eof-object?| 1 "../stdlib/core/unicode.scm" . 148496)
   (if.true
     (push.iloc.1 . 1)
     (push.subr.gloc.of |.port-position| 1 "../stdlib/core/unicode.scm" . 149528)
     (push.const . 0)
     (push.subr.gloc.of |.=| 2 "../stdlib/core/unicode.scm" . 149525)
     (ret.subr.gloc.of |.not| "../stdlib/core/unicode.scm" . 149520))
   (call
     (push.iloc.0 . 0)
     (apply.gloc.of |core.unicode'char-alphabetic?| "../stdlib/core/unicode.scm" . 150544))
   (if.true.ret.const . #f)
   (push.iloc.0 . 0)
   (subr.gloc.of |.char-whitespace?| 1 "../stdlib/core/unicode.scm" . 151568)
   (if.true.ret.const . #t)
   (call
     (push.iloc.0 . 0)
     (apply.gloc.of
       |core.unicode-assistants'general-category|
       "../stdlib/core/unicode.scm"
       .
       152597))
   (push)
   (const . Pd)
   (if.eq?.ret.const . #t)
   (push.iloc.1 . 0)
   (push.subr.gloc.of |.port-position| 1 "../stdlib/core/unicode.scm" . 154651)
   (extend . 1)
   (push.iloc 2 . 0)
   (subr.gloc.of |.get-char| 1 "../stdlib/core/unicode.scm" . 155666)
   (call
     (extend.enclose+
       (1 0 . loop)
       (push.iloc.0 . 0)
       (subr.gloc.of |.eof-object?| 1 "../stdlib/core/unicode.scm" . 158754)
       (if.true
         (push.iloc 4 . 1)
         (push.subr.gloc.of |.port-position| 1 "../stdlib/core/unicode.scm" . 159786)
         (push.const . 0)
         (push.subr.gloc.of |.=| 2 "../stdlib/core/unicode.scm" . 159783)
         (ret.subr.gloc.of |.not| "../stdlib/core/unicode.scm" . 159778))
       (call
         (push.iloc.0 . 0)
         (apply.gloc.of |core.unicode'char-alphabetic?| "../stdlib/core/unicode.scm" . 160802))
       (if.true.ret.const . #f)
       (push.iloc.0 . 0)
       (subr.gloc.of |.char-whitespace?| 1 "../stdlib/core/unicode.scm" . 161826)
       (if.true.ret.const . #t)
       (call
         (push.iloc.0 . 0)
         (apply.gloc.of
           |core.unicode-assistants'general-category|
           "../stdlib/core/unicode.scm"
           .
           162855))
       (push)
       (const . Pd)
       (if.eq?.ret.const . #t)
       (push.iloc 4 . 0)
       (push.subr.gloc.of |.get-char| 1 "../stdlib/core/unicode.scm" . 164904)
       (apply.iloc+ (1 . 0) "../stdlib/core/unicode.scm" . 164898))
     (push.iloc 3 . 0)
     (push.subr.gloc.of |.get-char| 1 "../stdlib/core/unicode.scm" . 157736)
     (apply.iloc+ (0 . 0) "../stdlib/core/unicode.scm" . 158747))
   (push)
   (extend . 1)
   (push.iloc 3 . 0)
   (push.iloc.1 . 0)
   (subr.gloc.of |.set-port-position!| 2 "../stdlib/core/unicode.scm" . 165908)
   (ret.iloc 0 . 0))
 (set.gloc.of |core.unicode'final-sigma?|)
 (close
   (1 0 . |core.unicode'string-downcase|)
   (call
     (push.iloc.0 . 0)
     (apply.gloc.of |core.io'open-string-input-port| "../stdlib/core/unicode.scm" . 171028))
   (push)
   (subr.gloc.of |.make-string-output-port| 0)
   (push)
   (extend . 2)
   (call
     (extend.enclose+
       (2 0 . loop)
       (push.iloc.0 . 0)
       (subr.gloc.of |.eof-object?| 1 "../stdlib/core/unicode.scm" . 175129)
       (if.true
         (push.iloc 2 . 1)
         (ret.subr.gloc.of |.extract-accumulated-string| "../stdlib/core/unicode.scm" . 175146))
       (push.iloc.0 . 0)
       (push.const . #\Σ)
       (subr.gloc.of |.char=?| 2 "../stdlib/core/unicode.scm" . 176153)
       (if.true
         (push.iloc.0 . 1)
         (subr.gloc.of |.char-whitespace?| 1 "../stdlib/core/unicode.scm" . 177184)
         (if.true
           (push.iloc 2 . 1)
           (push.const . #\σ)
           (subr.gloc.of |.put-char| 2 "../stdlib/core/unicode.scm" . 178208)
           (push.iloc 2 . 0)
           (push.subr.gloc.of |.get-char| 1 "../stdlib/core/unicode.scm" . 179238)
           (push.iloc.0 . 0)
           (apply.iloc+ (1 . 0) "../stdlib/core/unicode.scm" . 179232))
         (call
           (call
             (push.iloc 2 . 0)
             (push.iloc 2 . 1)
             (apply.gloc.of |core.unicode'final-sigma?| "../stdlib/core/unicode.scm" . 181284))
           (if.true
             (push.iloc 2 . 1)
             (push.const . #\ς)
             (ret.subr.gloc.of |.put-char| "../stdlib/core/unicode.scm" . 182308))
           (push.iloc 2 . 1)
           (push.const . #\σ)
           (ret.subr.gloc.of |.put-char| "../stdlib/core/unicode.scm" . 183332))
         (push.iloc 2 . 0)
         (push.subr.gloc.of |.get-char| 1 "../stdlib/core/unicode.scm" . 184358)
         (push.iloc.0 . 0)
         (apply.iloc+ (1 . 0) "../stdlib/core/unicode.scm" . 184352))
       (call
         (push.iloc.0 . 0)
         (apply.gloc.of
           |core.unicode-assistants'special-casing-lower|
           "../stdlib/core/unicode.scm"
           .
           185369))
       (push)
       (extend . 1)
       (iloc.0 . 0)
       (if.true
         (call
           (push.close
             (1 0)
             (push.iloc 4 . 1)
             (call
               (push.iloc.0 . 0)
               (push.subr.gloc.of |.integer->char| 1 "../stdlib/core/unicode.scm" . 187476)
               (apply.gloc.of |core.unicode'char-downcase| "../stdlib/core/unicode.scm" . 187461))
             (push)
             (ret.subr.gloc.of |.put-char| "../stdlib/core/unicode.scm" . 187444))
           (push.iloc.0 . 0)
           (apply.gloc.of |.for-each| "../stdlib/core/unicode.scm" . 187422))
         (push.iloc 3 . 0)
         (push.subr.gloc.of |.get-char| 1 "../stdlib/core/unicode.scm" . 188452)
         (push.iloc.1 . 0)
         (apply.iloc+ (2 . 0) "../stdlib/core/unicode.scm" . 188446))
       (push.iloc 3 . 1)
       (call
         (push.iloc.1 . 0)
         (apply.gloc.of |core.unicode'char-downcase| "../stdlib/core/unicode.scm" . 190506))
       (push)
       (subr.gloc.of |.put-char| 2 "../stdlib/core/unicode.scm" . 190489)
       (push.iloc 3 . 0)
       (push.subr.gloc.of |.get-char| 1 "../stdlib/core/unicode.scm" . 191519)
       (push.iloc.1 . 0)
       (apply.iloc+ (2 . 0) "../stdlib/core/unicode.scm" . 191513))
     (push.iloc.1 . 0)
     (push.subr.gloc.of |.get-char| 1 "../stdlib/core/unicode.scm" . 174111)
     (push.const . #\space)
     (apply.iloc+ (0 . 0) "../stdlib/core/unicode.scm" . 175122))
   (push)
   (extend . 1)
   (push.iloc 2 . 0)
   (push.iloc.0 . 0)
   (subr.gloc.of |.string=?| 2 "../stdlib/core/unicode.scm" . 192527)
   (if.true (ret.iloc 2 . 0))
   (ret.iloc 0 . 0))
 (set.gloc.of |core.unicode'string-downcase|)
 (close
   (1 0 . |core.unicode'string-foldcase|)
   (call
     (push.iloc.0 . 0)
     (apply.gloc.of |core.io'open-string-input-port| "../stdlib/core/unicode.scm" . 196628))
   (push)
   (subr.gloc.of |.make-string-output-port| 0)
   (push)
   (extend . 2)
   (call
     (extend.enclose+
       (1 0 . loop)
       (push.iloc.0 . 0)
       (subr.gloc.of |.eof-object?| 1 "../stdlib/core/unicode.scm" . 200729)
       (if.true
         (push.iloc 2 . 1)
         (ret.subr.gloc.of |.extract-accumulated-string| "../stdlib/core/unicode.scm" . 200746))
       (call
         (push.iloc.0 . 0)
         (apply.gloc.of |core.unicode-assistants'foldcase| "../stdlib/core/unicode.scm" . 201753))
       (push)
       (extend . 1)
       (iloc.0 . 0)
       (if.true
         (call
           (push.close
             (1 0)
             (push.iloc 4 . 1)
             (push.iloc.0 . 0)
             (push.subr.gloc.of |.integer->char| 1 "../stdlib/core/unicode.scm" . 203845)
             (ret.subr.gloc.of |.put-char| "../stdlib/core/unicode.scm" . 203828))
           (push.iloc.0 . 0)
           (apply.gloc.of |.for-each| "../stdlib/core/unicode.scm" . 203806))
         (push.iloc 3 . 0)
         (push.subr.gloc.of |.get-char| 1 "../stdlib/core/unicode.scm" . 204836)
         (apply.iloc+ (2 . 0) "../stdlib/core/unicode.scm" . 204830))
       (push.iloc 3 . 1)
       (push.iloc.1 . 0)
       (subr.gloc.of |.put-char| 2 "../stdlib/core/unicode.scm" . 206873)
       (push.iloc 3 . 0)
       (push.subr.gloc.of |.get-char| 1 "../stdlib/core/unicode.scm" . 207903)
       (apply.iloc+ (2 . 0) "../stdlib/core/unicode.scm" . 207897))
     (push.iloc.1 . 0)
     (push.subr.gloc.of |.get-char| 1 "../stdlib/core/unicode.scm" . 199711)
     (apply.iloc+ (0 . 0) "../stdlib/core/unicode.scm" . 200722))
   (push)
   (extend . 1)
   (push.iloc 2 . 0)
   (push.iloc.0 . 0)
   (subr.gloc.of |.string=?| 2 "../stdlib/core/unicode.scm" . 208911)
   (if.true (ret.iloc 2 . 0))
   (ret.iloc 0 . 0))
 (set.gloc.of |core.unicode'string-foldcase|)
 (close
   (1 0 . |core.unicode'string-titlecase|)
   (call
     (push.iloc.0 . 0)
     (apply.gloc.of |core.io'open-string-input-port| "../stdlib/core/unicode.scm" . 213012))
   (push)
   (subr.gloc.of |.make-string-output-port| 0)
   (push)
   (extend . 2)
   (extend.unbound . 2)
   (push.close
     (0 0 . titlecase-first-char)
     (extend.enclose+
       (1 0 . loop)
       (push.iloc.0 . 0)
       (subr.gloc.of |.eof-object?| 1 "../stdlib/core/unicode.scm" . 218142)
       (if.true
         (push.iloc 4 . 1)
         (ret.subr.gloc.of |.extract-accumulated-string| "../stdlib/core/unicode.scm" . 219166))
       (call
         (push.iloc.0 . 0)
         (apply.gloc.of
           |core.unicode-assistants'general-category|
           "../stdlib/core/unicode.scm"
           .
           221220))
       (push)
       (push.const Ll Lu Lt)
       (subr.gloc.of |.memq| 2 "../stdlib/core/unicode.scm" . 222241)
       (if.true
         (push.iloc 4 . 1)
         (call
           (push.iloc.0 . 0)
           (apply.gloc.of |core.unicode'char-titlecase| "../stdlib/core/unicode.scm" . 223282))
         (push)
         (subr.gloc.of |.put-char| 2 "../stdlib/core/unicode.scm" . 223265)
         (apply.iloc (3 . 1) "../stdlib/core/unicode.scm" . 224289))
       (push.iloc 4 . 1)
       (push.iloc.0 . 0)
       (subr.gloc.of |.put-char| 2 "../stdlib/core/unicode.scm" . 226337)
       (push.iloc 4 . 0)
       (push.subr.gloc.of |.get-char| 1 "../stdlib/core/unicode.scm" . 227367)
       (apply.iloc+ (1 . 0) "../stdlib/core/unicode.scm" . 227361))
     (push.iloc 3 . 0)
     (push.subr.gloc.of |.get-char| 1 "../stdlib/core/unicode.scm" . 217124)
     (apply.iloc+ (0 . 0) "../stdlib/core/unicode.scm" . 218135))
   (push.close
     (0 0 . downcase-subsequence)
     (extend.enclose+
       (1 0 . loop)
       (push.iloc.0 . 0)
       (subr.gloc.of |.eof-object?| 1 "../stdlib/core/unicode.scm" . 231454)
       (if.true
         (push.iloc 4 . 1)
         (ret.subr.gloc.of |.extract-accumulated-string| "../stdlib/core/unicode.scm" . 232478))
       (call
         (push.iloc.0 . 0)
         (apply.gloc.of
           |core.unicode-assistants'general-category|
           "../stdlib/core/unicode.scm"
           .
           234532))
       (push)
       (extend . 1)
       (push.iloc.0 . 0)
       (push.const Ll Lu Lt)
       (subr.gloc.of |.memq| 2 "../stdlib/core/unicode.scm" . 235553)
       (if.true
         (push.iloc 5 . 1)
         (call
           (push.iloc.1 . 0)
           (apply.gloc.of |core.unicode'char-downcase| "../stdlib/core/unicode.scm" . 236594))
         (push)
         (subr.gloc.of |.put-char| 2 "../stdlib/core/unicode.scm" . 236577)
         (push.iloc 5 . 0)
         (push.subr.gloc.of |.get-char| 1 "../stdlib/core/unicode.scm" . 237607)
         (apply.iloc+ (2 . 0) "../stdlib/core/unicode.scm" . 237601))
       (push.iloc.0 . 0)
       (push.const Po Pf)
       (subr.gloc.of |.memq| 2 "../stdlib/core/unicode.scm" . 235553)
       (if.true
         (push.iloc.1 . 0)
         (push.const #\' #\: #\· #\״ #\’ #\‧)
         (subr.gloc.of |.memq| 2 "../stdlib/core/unicode.scm" . 240676)
         (if.true
           (push.iloc 5 . 1)
           (push.iloc.1 . 0)
           (subr.gloc.of |.put-char| 2 "../stdlib/core/unicode.scm" . 247844)
           (push.iloc 5 . 0)
           (push.subr.gloc.of |.get-char| 1 "../stdlib/core/unicode.scm" . 248874)
           (apply.iloc+ (2 . 0) "../stdlib/core/unicode.scm" . 248868))
         (push.iloc 5 . 1)
         (push.iloc.1 . 0)
         (subr.gloc.of |.put-char| 2 "../stdlib/core/unicode.scm" . 250916)
         (apply.iloc (4 . 0) "../stdlib/core/unicode.scm" . 251940))
       (push.iloc.0 . 0)
       (const . Nd)
       (if.eq?
         (push.iloc 5 . 1)
         (push.iloc.1 . 0)
         (subr.gloc.of |.put-char| 2 "../stdlib/core/unicode.scm" . 253985)
         (push.iloc 5 . 0)
         (push.subr.gloc.of |.get-char| 1 "../stdlib/core/unicode.scm" . 255015)
         (apply.iloc+ (2 . 0) "../stdlib/core/unicode.scm" . 255009))
       (push.iloc 5 . 1)
       (push.iloc.1 . 0)
       (subr.gloc.of |.put-char| 2 "../stdlib/core/unicode.scm" . 257057)
       (apply.iloc (4 . 0) "../stdlib/core/unicode.scm" . 258081))
     (push.iloc 3 . 0)
     (push.subr.gloc.of |.get-char| 1 "../stdlib/core/unicode.scm" . 230436)
     (apply.iloc+ (0 . 0) "../stdlib/core/unicode.scm" . 231447))
   (enclose . 2)
   (call (apply.iloc (0 . 0) "../stdlib/core/unicode.scm" . 259094))
   (push)
   (extend . 1)
   (push.iloc 3 . 0)
   (push.iloc.0 . 0)
   (subr.gloc.of |.string=?| 2 "../stdlib/core/unicode.scm" . 260113)
   (if.true (ret.iloc 3 . 0))
   (ret.iloc 0 . 0))
 (set.gloc.of |core.unicode'string-titlecase|)
 (close
   (0 1 . |core.unicode'string-ci=?|)
   (push.gloc.of |.string=?|)
   (call
     (push.gloc.of |core.unicode'string-foldcase|)
     (push.iloc.0 . 0)
     (apply.gloc.of |.map| "../stdlib/core/unicode.scm" . 264215))
   (push)
   (apply.gloc.of |.apply| "../stdlib/core/unicode.scm" . 264199))
 (set.gloc.of |core.unicode'string-ci=?|)
 (close
   (0 1 . |core.unicode'string-ci<?|)
   (push.gloc.of |.string<?|)
   (call
     (push.gloc.of |core.unicode'string-foldcase|)
     (push.iloc.0 . 0)
     (apply.gloc.of |.map| "../stdlib/core/unicode.scm" . 268311))
   (push)
   (apply.gloc.of |.apply| "../stdlib/core/unicode.scm" . 268295))
 (set.gloc.of |core.unicode'string-ci<?|)
 (close
   (0 1 . |core.unicode'string-ci>?|)
   (push.gloc.of |.string>?|)
   (call
     (push.gloc.of |core.unicode'string-foldcase|)
     (push.iloc.0 . 0)
     (apply.gloc.of |.map| "../stdlib/core/unicode.scm" . 272407))
   (push)
   (apply.gloc.of |.apply| "../stdlib/core/unicode.scm" . 272391))
 (set.gloc.of |core.unicode'string-ci>?|)
 (close
   (0 1 . |core.unicode'string-ci<=?|)
   (push.gloc.of |.string<=?|)
   (call
     (push.gloc.of |core.unicode'string-foldcase|)
     (push.iloc.0 . 0)
     (apply.gloc.of |.map| "../stdlib/core/unicode.scm" . 276504))
   (push)
   (apply.gloc.of |.apply| "../stdlib/core/unicode.scm" . 276487))
 (set.gloc.of |core.unicode'string-ci<=?|)
 (close
   (0 1 . |core.unicode'string-ci>=?|)
   (push.gloc.of |.string>=?|)
   (call
     (push.gloc.of |core.unicode'string-foldcase|)
     (push.iloc.0 . 0)
     (apply.gloc.of |.map| "../stdlib/core/unicode.scm" . 280600))
   (push)
   (apply.gloc.of |.apply| "../stdlib/core/unicode.scm" . 280583))
 (set.gloc.of |core.unicode'string-ci>=?|)
 (close
   (1 0 . |core.unicode'string-normalize-nfd|)
   (call
     (call
       (call
         (push.iloc.0 . 0)
         (apply.gloc.of |core.io'open-string-input-port| "../stdlib/core/unicode.scm" . 285738))
       (push)
       (push.const . #t)
       (apply.gloc.of |core.unicode-assistants'decompose| "../stdlib/core/unicode.scm" . 285727))
     (push)
     (apply.gloc.of
       |core.unicode-assistants'sort-combining-marks!|
       "../stdlib/core/unicode.scm"
       .
       285704))
   (push)
   (subr.gloc.of |.native-endianness| 0)
   (push)
   (push.const . #t)
   (apply.gloc.of
     |core.bytevector-transcoders'utf32->string|
     "../stdlib/core/unicode.scm"
     .
     284679))
 (set.gloc.of |core.unicode'string-normalize-nfd|)
 (close
   (1 0 . |core.unicode'string-normalize-nfkd|)
   (call
     (call
       (call
         (push.iloc.0 . 0)
         (apply.gloc.of |core.io'open-string-input-port| "../stdlib/core/unicode.scm" . 291882))
       (push)
       (push.const . #f)
       (apply.gloc.of |core.unicode-assistants'decompose| "../stdlib/core/unicode.scm" . 291871))
     (push)
     (apply.gloc.of
       |core.unicode-assistants'sort-combining-marks!|
       "../stdlib/core/unicode.scm"
       .
       291848))
   (push)
   (subr.gloc.of |.native-endianness| 0)
   (push)
   (push.const . #t)
   (apply.gloc.of
     |core.bytevector-transcoders'utf32->string|
     "../stdlib/core/unicode.scm"
     .
     290823))
 (set.gloc.of |core.unicode'string-normalize-nfkd|)
 (close
   (1 0 . |core.unicode'string-normalize-nfc|)
   (call
     (call
       (call
         (push.iloc.0 . 0)
         (apply.gloc.of |core.io'open-string-input-port| "../stdlib/core/unicode.scm" . 299028))
       (push)
       (push.const . #t)
       (apply.gloc.of |core.unicode-assistants'decompose| "../stdlib/core/unicode.scm" . 299017))
     (push)
     (apply.gloc.of
       |core.unicode-assistants'sort-combining-marks!|
       "../stdlib/core/unicode.scm"
       .
       297992))
   (push)
   (apply.gloc.of |core.unicode-assistants'compose| "../stdlib/core/unicode.scm" . 296967))
 (set.gloc.of |core.unicode'string-normalize-nfc|)
 (close
   (1 0 . |core.unicode'string-normalize-nfkc|)
   (call
     (call
       (call
         (push.iloc.0 . 0)
         (apply.gloc.of |core.io'open-string-input-port| "../stdlib/core/unicode.scm" . 305172))
       (push)
       (push.const . #f)
       (apply.gloc.of |core.unicode-assistants'decompose| "../stdlib/core/unicode.scm" . 305161))
     (push)
     (apply.gloc.of
       |core.unicode-assistants'sort-combining-marks!|
       "../stdlib/core/unicode.scm"
       .
       304136))
   (push)
   (apply.gloc.of |core.unicode-assistants'compose| "../stdlib/core/unicode.scm" . 303111))
 (set.gloc.of |core.unicode'string-normalize-nfkc|)
 (push.const . core.unicode)
 (push.const . #f)
 (push.const
   (char-upcase import . |core.unicode'char-upcase|)
   (char-downcase import . |core.unicode'char-downcase|)
   (char-titlecase import . |core.unicode'char-titlecase|)
   (char-foldcase import . |core.unicode'char-foldcase|)
   (char-ci=? import . |core.unicode'char-ci=?|)
   (char-ci<? import . |core.unicode'char-ci<?|)
   (char-ci>? import . |core.unicode'char-ci>?|)
   (char-ci<=? import . |core.unicode'char-ci<=?|)
   (char-ci>=? import . |core.unicode'char-ci>=?|)
   (char-alphabetic? import . |core.unicode'char-alphabetic?|)
   (char-numeric? import . |core.unicode'char-numeric?|)
   (char-whitespace? import . |.char-whitespace?|)
   (char-upper-case? import . |core.unicode'char-upper-case?|)
   (char-lower-case? import . |core.unicode'char-lower-case?|)
   (char-title-case? import . |core.unicode'char-title-case?|)
   (char-general-category import . |core.unicode'char-general-category|)
   (string-upcase import . |core.unicode'string-upcase|)
   (string-downcase import . |core.unicode'string-downcase|)
   (string-foldcase import . |core.unicode'string-foldcase|)
   (string-titlecase import . |core.unicode'string-titlecase|)
   (string-ci=? import . |core.unicode'string-ci=?|)
   (string-ci<? import . |core.unicode'string-ci<?|)
   (string-ci>? import . |core.unicode'string-ci>?|)
   (string-ci<=? import . |core.unicode'string-ci<=?|)
   (string-ci>=? import . |core.unicode'string-ci>=?|)
   (string-normalize-nfd import . |core.unicode'string-normalize-nfd|)
   (string-normalize-nfkd import . |core.unicode'string-normalize-nfkd|)
   (string-normalize-nfc import . |core.unicode'string-normalize-nfc|)
   (string-normalize-nfkc import . |core.unicode'string-normalize-nfkc|))
 (apply.gloc.of |.intern-scheme-library| "../stdlib/core/unicode.scm" . 5121))

((close
   (2 0 . loop)
   (iloc.0 . 0)
   (if.null? (ret.iloc 0 . 1))
   (touch.gloc.of |loop`2345*|)
   (push.cdr.iloc (0 . 0) "../stdlib/core/hashtables.scm" . 137242)
   (push.iloc.0 . 0)
   (push.subr.gloc.of |.cdar| 1 "../stdlib/core/hashtables.scm" . 137260)
   (push.iloc.0 . 1)
   (push.subr.gloc.of |.append| 2 "../stdlib/core/hashtables.scm" . 137252)
   (apply.gloc.of |loop`2345*| "../stdlib/core/hashtables.scm" . 137236))
 (set.gloc.of |loop`2345*|)
 (close
   (1 0)
   (push.car.iloc (0 . 0) "../stdlib/core/hashtables.scm" . 117825)
   (cdr.iloc (0 . 0) "../stdlib/core/hashtables.scm" . 117833)
   (ret.cons "../stdlib/core/hashtables.scm" . 117819))
 (set.gloc.of |.L855|)
 (call
   (push.const core optargs)
   (apply.gloc.of |.require-scheme-library| "../stdlib/core/hashtables.scm" . 135181))
 (call
   (push.const core unicode)
   (apply.gloc.of |.require-scheme-library| "../stdlib/core/hashtables.scm" . 135181))
 (call
   (push.const core lists)
   (apply.gloc.of |.require-scheme-library| "../stdlib/core/hashtables.scm" . 135181))
 (call
   (push.const core primitives)
   (apply.gloc.of |.require-scheme-library| "../stdlib/core/hashtables.scm" . 135181))
 (call
   (push.const core intrinsics)
   (apply.gloc.of |.require-scheme-library| "../stdlib/core/hashtables.scm" . 135181))
 (close
   (5 0 . |core.hashtables'make-generic-hashtable|)
   (extend.unbound . 11)
   (push.close (1 0 . generic-hashtable-size) (ret.iloc 2 . 3))
   (push.close
     (3 0 . generic-hashtable-ref)
     (push.close
       (1 0 . equiv?)
       (push.iloc.0 . 0)
       (push.iloc.1 . 1)
       (apply.iloc (3 . 1) "../stdlib/core/hashtables.scm" . 64549))
     (extend . 1)
     (push.iloc 3 . 2)
     (call (push.iloc.1 . 1) (apply.iloc (3 . 0) "../stdlib/core/hashtables.scm" . 63511))
     (push)
     (push.const . #f)
     (push.subr.gloc.of |.core-hashtable-ref| 3 "../stdlib/core/hashtables.scm" . 65556)
     (extend . 1)
     (iloc.0 . 0)
     (if.true
       (call
         (push.iloc.1 . 0)
         (push.iloc.0 . 0)
         (apply.gloc.of |core.lists'assp| "../stdlib/core/hashtables.scm" . 67616))
       (push)
       (extend . 1)
       (iloc.0 . 0)
       (if.true (push.iloc.0 . 0) (ret.subr.gloc.of |.cdr| (|.cdr| |.L841`2285*|)))
       (ret.iloc 3 . 2))
     (ret.iloc 2 . 2))
   (push.close
     (3 0 . generic-hashtable-set!)
     (iloc 2 . 4)
     (if.false.call
       (push.const . hashtable-set!)
       (push.const . "expected mutable hashtable, but ~s is not")
       (push.iloc.0 . 0)
       (push.subr.gloc.of |.format| 2 "../stdlib/core/hashtables.scm" . 73789)
       (push.iloc.0 . 0)
       (push.iloc.0 . 1)
       (push.iloc.0 . 2)
       (push.subr.gloc.of |.list| 3 "../stdlib/core/hashtables.scm" . 73852)
       (apply.gloc.of |.assertion-violation| "../stdlib/core/hashtables.scm" . 73752))
     (call (push.iloc.0 . 1) (apply.iloc (2 . 0) "../stdlib/core/hashtables.scm" . 74775))
     (push)
     (push.close
       (1 0 . equiv?)
       (push.iloc.0 . 0)
       (push.iloc.1 . 1)
       (apply.iloc (3 . 1) "../stdlib/core/hashtables.scm" . 75813))
     (extend . 2)
     (push.iloc 3 . 2)
     (push.iloc.0 . 0)
     (push.const . #f)
     (push.subr.gloc.of |.core-hashtable-ref| 3 "../stdlib/core/hashtables.scm" . 76820)
     (extend . 1)
     (iloc.0 . 0)
     (if.true
       (call
         (push.iloc.1 . 1)
         (push.iloc.0 . 0)
         (apply.gloc.of |core.lists'assp| "../stdlib/core/hashtables.scm" . 78880))
       (push)
       (extend . 1)
       (iloc.0 . 0)
       (if.true
         (push.iloc.0 . 0)
         (push.iloc 3 . 2)
         (ret.subr.gloc.of |.set-cdr!| "../stdlib/core/hashtables.scm" . 79919))
       (n+.iloc (5 . 3) 1 "../stdlib/core/hashtables.scm" . 81963)
       (set.iloc (5 . 3) "../stdlib/core/hashtables.scm" . 81952)
       (push.iloc 5 . 2)
       (push.iloc 2 . 0)
       (push.iloc 3 . 1)
       (iloc 3 . 2)
       (push.cons)
       (iloc.1 . 0)
       (push.cons)
       (ret.subr.gloc.of |.core-hashtable-set!| "../stdlib/core/hashtables.scm" . 82976))
     (n+.iloc (4 . 3) 1 "../stdlib/core/hashtables.scm" . 85023)
     (set.iloc (4 . 3) "../stdlib/core/hashtables.scm" . 85012)
     (push.iloc 4 . 2)
     (push.iloc.1 . 0)
     (push.iloc 2 . 1)
     (iloc 2 . 2)
     (push.cons)
     (push.subr.gloc.of |.list| 1 "../stdlib/core/hashtables.scm" . 86070)
     (ret.subr.gloc.of |.core-hashtable-set!| "../stdlib/core/hashtables.scm" . 86036))
   (push.close
     (2 0 . generic-hashtable-delete!)
     (iloc 2 . 4)
     (if.false.call
       (push.const . hashtable-delete!)
       (push.const . "expected mutable hashtable, but ~s is not")
       (push.iloc.0 . 0)
       (push.subr.gloc.of |.format| 2 "../stdlib/core/hashtables.scm" . 90176)
       (push.iloc.0 . 0)
       (push.iloc.0 . 1)
       (push.subr.gloc.of |.list| 2 "../stdlib/core/hashtables.scm" . 90239)
       (apply.gloc.of |.assertion-violation| "../stdlib/core/hashtables.scm" . 90136))
     (call
       (call (push.iloc.0 . 1) (apply.iloc (2 . 0) "../stdlib/core/hashtables.scm" . 91159))
       (push)
       (push.close
         (1 0 . equiv?)
         (push.iloc.0 . 0)
         (push.iloc.1 . 1)
         (apply.iloc (3 . 1) "../stdlib/core/hashtables.scm" . 92197))
       (extend . 2)
       (push.iloc 3 . 2)
       (push.iloc.0 . 0)
       (push.const . #f)
       (push.subr.gloc.of |.core-hashtable-ref| 3 "../stdlib/core/hashtables.scm" . 93204)
       (extend . 1)
       (iloc.0 . 0)
       (if.true
         (call
           (push.iloc.1 . 1)
           (push.iloc.0 . 0)
           (apply.gloc.of |core.lists'assp| "../stdlib/core/hashtables.scm" . 95264))
         (push)
         (extend . 1)
         (iloc.0 . 0)
         (if.true
           (push.iloc 5 . 2)
           (push.iloc 2 . 0)
           (call
             (push.iloc.0 . 0)
             (push.iloc.1 . 0)
             (apply.gloc.of |core.lists'remq| "../stdlib/core/hashtables.scm" . 97351))
           (push)
           (ret.subr.gloc.of |.core-hashtable-set!| "../stdlib/core/hashtables.scm" . 97317))
         (ret.const.unspec))
       (ret.const.unspec))
     (ret.const.unspec))
   (push.close
     (2 0 . generic-hashtable-contains?)
     (push.close
       (1 0 . equiv?)
       (push.iloc.0 . 0)
       (push.iloc.1 . 1)
       (apply.iloc (3 . 1) "../stdlib/core/hashtables.scm" . 103461))
     (extend . 1)
     (push.iloc 3 . 2)
     (call (push.iloc.1 . 1) (apply.iloc (3 . 0) "../stdlib/core/hashtables.scm" . 102423))
     (push)
     (push.const . #f)
     (push.subr.gloc.of |.core-hashtable-ref| 3 "../stdlib/core/hashtables.scm" . 104468)
     (extend . 1)
     (iloc.0 . 0)
     (if.false.ret)
     (call
       (push.iloc.1 . 0)
       (push.iloc.0 . 0)
       (apply.gloc.of |core.lists'assp| "../stdlib/core/hashtables.scm" . 106526))
     (if.false.ret)
     (ret.const . #t))
   (push.close
     (1 1 . generic-hashtable-copy)
     (call
       (iloc.0 . 1)
       (if.not.pair?.ret.const . #f)
       (push.iloc.0 . 1)
       (ret.subr.gloc.of |.car| (|.car| |opt`2325*|)))
     (push)
     (extend . 1)
     (iloc 3 . 4)
     (if.true
       (subr.gloc.of |.make-core-hashtable| 0)
       (push)
       (extend . 1)
       (call
         (push.close
           (1 0)
           (push.iloc.1 . 0)
           (push.car.iloc (0 . 0) "../stdlib/core/hashtables.scm" . 116778)
           (call
             (push.gloc.of |.L855|)
             (push.cdr.iloc (0 . 0) "../stdlib/core/hashtables.scm" . 117843)
             (apply.gloc.of |.map| "../stdlib/core/hashtables.scm" . 117802))
           (push)
           (ret.subr.gloc.of |.core-hashtable-set!| "../stdlib/core/hashtables.scm" . 114729))
         (push.iloc 4 . 2)
         (push.subr.gloc.of |.core-hashtable->alist| 1 "../stdlib/core/hashtables.scm" . 118813)
         (apply.gloc.of |.for-each| "../stdlib/core/hashtables.scm" . 114707))
       (iloc.1 . 0)
       (if.true
         (push.iloc 4 . 0)
         (push.iloc 4 . 1)
         (push.iloc.0 . 0)
         (push.iloc 4 . 3)
         (push.iloc.1 . 0)
         (apply.gloc.of
           |core.hashtables'make-generic-hashtable|
           "../stdlib/core/hashtables.scm"
           .
           120855))
       (push.iloc 4 . 0)
       (push.iloc 4 . 1)
       (push.iloc.0 . 0)
       (push.subr.gloc.of |.core-hashtable-copy| 1 "../stdlib/core/hashtables.scm" . 121932)
       (push.iloc 4 . 3)
       (push.iloc.1 . 0)
       (apply.gloc.of
         |core.hashtables'make-generic-hashtable|
         "../stdlib/core/hashtables.scm"
         .
         121879))
     (push.iloc 3 . 0)
     (push.iloc 3 . 1)
     (push.iloc 3 . 2)
     (push.iloc.0 . 0)
     (push.subr.gloc.of |.core-hashtable-copy| 2 "../stdlib/core/hashtables.scm" . 122950)
     (push.iloc 3 . 3)
     (push.iloc.0 . 0)
     (apply.gloc.of
       |core.hashtables'make-generic-hashtable|
       "../stdlib/core/hashtables.scm"
       .
       122897))
   (push.close
     (1 1 . generic-hashtable-clear!)
     (call
       (iloc.0 . 1)
       (if.pair? (push.iloc.0 . 1) (ret.subr.gloc.of |.car| (|.car| |opt`2336*|)))
       (ret.const . 0))
     (push)
     (extend . 1)
     (iloc 3 . 4)
     (if.false.call
       (push.const . hashtable-clear!)
       (push.const . "expected mutable hashtable, but ~s is not")
       (push.iloc.1 . 0)
       (push.subr.gloc.of |.format| 2 "../stdlib/core/hashtables.scm" . 128065)
       (push.iloc.1 . 0)
       (iloc.1 . 1)
       (push.cons)
       (apply.gloc.of |.assertion-violation| "../stdlib/core/hashtables.scm" . 128026))
     (push.iloc 3 . 2)
     (push.iloc.0 . 0)
     (subr.gloc.of |.core-hashtable-clear!| 2 "../stdlib/core/hashtables.scm" . 129037)
     (const . 0)
     (set.iloc (3 . 3) "../stdlib/core/hashtables.scm" . 130061)
     (ret.const.unspec))
   (push.close
     (1 0 . generic-hashtable->alist)
     (touch.gloc.of |loop`2345*|)
     (push.iloc 2 . 2)
     (push.subr.gloc.of |.core-hashtable->alist| 1 "../stdlib/core/hashtables.scm" . 134171)
     (push.const)
     (apply.gloc.of |loop`2345*| "../stdlib/core/hashtables.scm" . 135181))
   (push.close (1 0 . generic-hashtable-equivalence-function) (ret.iloc 2 . 1))
   (push.close (1 0 . generic-hashtable-hash-function) (ret.iloc 2 . 0))
   (push.close (1 0 . generic-hashtable-mutable?) (ret.iloc 2 . 4))
   (enclose . 11)
   (push.const . generic)
   (push.const . hashtable-handler)
   (push.iloc.1 . 0)
   (push.iloc.1 . 1)
   (push.iloc.0 . 0)
   (push.iloc.0 . 1)
   (push.iloc.0 . 2)
   (push.iloc.0 . 3)
   (push.iloc.0 . 4)
   (push.iloc.0 . 5)
   (push.iloc.0 . 6)
   (push.iloc.0 . 9)
   (push.iloc.0 . 8)
   (push.iloc.0 . 10)
   (push.iloc.0 . 7)
   (push.subr.gloc.of |.vector| 14 "../stdlib/core/hashtables.scm" . 146460)
   (ret.subr.gloc.of |.make-core-hashtable| "../stdlib/core/hashtables.scm" . 145415))
 (set.gloc.of |core.hashtables'make-generic-hashtable|)
 (close
   (2 1 . |core.hashtables'make-hashtable|)
   (call
     (iloc.0 . 2)
     (if.pair? (push.iloc.0 . 2) (ret.subr.gloc.of |.car| (|.car| |opt`2355*|)))
     (ret.const . 0))
   (push)
   (extend . 1)
   (push.iloc.1 . 0)
   (subr.gloc.of |.procedure?| 1 "../stdlib/core/hashtables.scm" . 164877)
   (if.false.call
     (push.const . make-hashtable)
     (push.const . "expected procedure, but got ~r, as argument 1")
     (push.iloc.1 . 0)
     (push.subr.gloc.of |.format| 2 "../stdlib/core/hashtables.scm" . 165938)
     (apply.gloc.of |.assertion-violation| "../stdlib/core/hashtables.scm" . 165901))
   (push.iloc.1 . 1)
   (subr.gloc.of |.procedure?| 1 "../stdlib/core/hashtables.scm" . 166925)
   (if.false.call
     (push.const . make-hashtable)
     (push.const . "expected procedure, but got ~r, as argument 2")
     (push.iloc.1 . 1)
     (push.subr.gloc.of |.format| 2 "../stdlib/core/hashtables.scm" . 167986)
     (apply.gloc.of |.assertion-violation| "../stdlib/core/hashtables.scm" . 167949))
   (push.iloc.1 . 0)
   (push.iloc.1 . 1)
   (push.const . eq?)
   (push.iloc.0 . 0)
   (push.subr.gloc.of |.make-core-hashtable| 2 "../stdlib/core/hashtables.scm" . 169022)
   (push.const . 0)
   (push.const . #t)
   (apply.gloc.of
     |core.hashtables'make-generic-hashtable|
     "../stdlib/core/hashtables.scm"
     .
     168969))
 (set.gloc.of |core.hashtables'make-hashtable|)
 (close
   (0 1 . |core.hashtables'make-eq-hashtable|)
   (push.const . eq?)
   (call
     (iloc.0 . 0)
     (if.pair? (push.iloc.0 . 0) (ret.subr.gloc.of |.car| (|.car| |opt`2360*|)))
     (ret.const . 0))
   (push)
   (ret.subr.gloc.of |.make-shared-core-hashtable| "../stdlib/core/hashtables.scm" . 174089))
 (set.gloc.of |core.hashtables'make-eq-hashtable|)
 (close
   (0 1 . |core.hashtables'make-eqv-hashtable|)
   (push.const . eqv?)
   (call
     (iloc.0 . 0)
     (if.pair? (push.iloc.0 . 0) (ret.subr.gloc.of |.car| (|.car| |opt`2365*|)))
     (ret.const . 0))
   (push)
   (ret.subr.gloc.of |.make-shared-core-hashtable| "../stdlib/core/hashtables.scm" . 179209))
 (set.gloc.of |core.hashtables'make-eqv-hashtable|)
 (close
   (0 1 . |core.hashtables'make-string-hashtable|)
   (push.const . string=?)
   (call
     (iloc.0 . 0)
     (if.pair? (push.iloc.0 . 0) (ret.subr.gloc.of |.car| (|.car| |opt`2370*|)))
     (ret.const . 0))
   (push)
   (ret.subr.gloc.of |.make-shared-core-hashtable| "../stdlib/core/hashtables.scm" . 184329))
 (set.gloc.of |core.hashtables'make-string-hashtable|)
 (close
   (4 0 . |core.hashtables'hashtable-update!|)
   (push.iloc.0 . 0)
   (subr.gloc.of |.core-hashtable-mutable?| 1 "../stdlib/core/hashtables.scm" . 188427)
   (if.false.call
     (push.const . hashtable-update!)
     (push.const . "expected mutable hashtable")
     (push.iloc.0 . 0)
     (push.iloc.0 . 1)
     (push.iloc.0 . 2)
     (push.iloc.0 . 3)
     (push.subr.gloc.of |.list| 4 "../stdlib/core/hashtables.scm" . 189520)
     (apply.gloc.of |.assertion-violation| "../stdlib/core/hashtables.scm" . 189451))
   (push.iloc.0 . 0)
   (push.iloc.0 . 1)
   (call
     (push.iloc.0 . 0)
     (push.iloc.0 . 1)
     (push.iloc.0 . 3)
     (push.subr.gloc.of |.core-hashtable-ref| 3 "../stdlib/core/hashtables.scm" . 190505)
     (apply.iloc (0 . 2) "../stdlib/core/hashtables.scm" . 190499))
   (push)
   (ret.subr.gloc.of |.core-hashtable-set!| "../stdlib/core/hashtables.scm" . 190471))
 (set.gloc.of |core.hashtables'hashtable-update!|)
 (close
   (1 0 . |core.hashtables'hashtable-keys|)
   (call
     (push.gloc.of |.car|)
     (push.iloc.0 . 0)
     (push.subr.gloc.of |.core-hashtable->alist| 1 "../stdlib/core/hashtables.scm" . 194590)
     (apply.gloc.of |.map| "../stdlib/core/hashtables.scm" . 194581))
   (push)
   (ret.subr.gloc.of |.list->vector| "../stdlib/core/hashtables.scm" . 194567))
 (set.gloc.of |core.hashtables'hashtable-keys|)
 (close
   (1 0 . |core.hashtables'hashtable-entries|)
   (push.iloc.0 . 0)
   (push.subr.gloc.of |.core-hashtable->alist| 1 "../stdlib/core/hashtables.scm" . 198674)
   (extend . 1)
   (call
     (push.gloc.of |.car|)
     (push.iloc.0 . 0)
     (apply.gloc.of |.map| "../stdlib/core/hashtables.scm" . 199711))
   (push)
   (push.subr.gloc.of |.list->vector| 1 "../stdlib/core/hashtables.scm" . 199697)
   (call
     (push.gloc.of |.cdr|)
     (push.iloc.0 . 0)
     (apply.gloc.of |.map| "../stdlib/core/hashtables.scm" . 200735))
   (push)
   (push.subr.gloc.of |.list->vector| 1 "../stdlib/core/hashtables.scm" . 200721)
   (ret.subr.gloc.of |.values| "../stdlib/core/hashtables.scm" . 199689))
 (set.gloc.of |core.hashtables'hashtable-entries|)
 (close
   (1 0 . |core.hashtables'string-ci-hash|)
   (call
     (push.iloc.0 . 0)
     (apply.gloc.of |core.unicode'string-foldcase| "../stdlib/core/hashtables.scm" . 204820))
   (push)
   (ret.subr.gloc.of |.string-hash| "../stdlib/core/hashtables.scm" . 204807))
 (set.gloc.of |core.hashtables'string-ci-hash|)
 (push.const . core.hashtables)
 (push.const . #f)
 (push.const
   (make-eq-hashtable import . |core.hashtables'make-eq-hashtable|)
   (make-eqv-hashtable import . |core.hashtables'make-eqv-hashtable|)
   (make-string-hashtable import . |core.hashtables'make-string-hashtable|)
   (make-hashtable import . |core.hashtables'make-hashtable|)
   (weak-hashtable? import . |.weak-core-hashtable?|)
   (make-weak-hashtable import . |.make-weak-shared-core-hashtable|)
   (hashtable-contains? import . |.core-hashtable-contains?|)
   (hashtable-delete! import . |.core-hashtable-delete!|)
   (hashtable-set! import . |.core-hashtable-set!|)
   (hashtable-ref import . |.core-hashtable-ref|)
   (hashtable-size import . |.core-hashtable-size|)
   (hashtable? import . |.core-hashtable?|)
   (hashtable-update! import . |core.hashtables'hashtable-update!|)
   (hashtable-clear! import . |.core-hashtable-clear!|)
   (hashtable-copy import . |.core-hashtable-copy|)
   (hashtable-keys import . |core.hashtables'hashtable-keys|)
   (hashtable-entries import . |core.hashtables'hashtable-entries|)
   (hashtable-mutable? import . |.core-hashtable-mutable?|)
   (hashtable-hash-function import . |.core-hashtable-hash-function|)
   (hashtable-equivalence-function import . |.core-hashtable-equivalence-function|)
   (equal-hash import . |.equal-hash|)
   (string-hash import . |.string-hash|)
   (string-ci-hash import . |core.hashtables'string-ci-hash|)
   (symbol-hash import . |.symbol-hash|)
   (hashtable->alist import . |.core-hashtable->alist|))
 (apply.gloc.of |.intern-scheme-library| "../stdlib/core/hashtables.scm" . 135181))

((close
   (1 0)
   (push.const . with-syntax)
   (push.const . "value does not match to pattern")
   (push.const
     (?make-name (datum->syntax (syntax ?_) make-name))
     (?pred-name (datum->syntax (syntax ?_) pred-name))
     (?make-rules
       (datum->syntax
         (syntax k)
         `(syntax-rules ()
            ((_ ,@field-names) (tuple ',desc-name ,@field-names))
            ((_) (tuple ',desc-name ,@(make-list field-count '(unspecified)))))))
     (?pred-rules
       (datum->syntax (syntax k) `(syntax-rules () ((_ obj) (eq? (tuple-ref obj 0) ',desc-name)))))
     ((?getter-name ...)
      (map (lambda (field-name)
             (datum->syntax (syntax ?_) (string->symbol (format "~a-~a" struct-name field-name))))
           field-names))
     ((?setter-name ...)
      (map (lambda (field-name)
             (datum->syntax
               (syntax ?_)
               (string->symbol (format "~a-~a-set!" struct-name field-name))))
           field-names))
     ((?getter-rules ...)
      (map (lambda (field-ref)
             (datum->syntax (syntax k) `(syntax-rules () ((_ obj) (tuple-ref obj ,field-ref)))))
           field-refs))
     ((?setter-rules ...)
      (map (lambda (field-ref)
             (datum->syntax
               (syntax k)
               `(syntax-rules () ((_ obj value) (tuple-set! obj ,field-ref value)))))
           field-refs)))
   (apply.gloc.of |.syntax-violation| "../stdlib/core/struct.scm" . 33808))
 (set.gloc.of |.L872|)
 (close
   (1 0)
   (push.iloc.0 . 0)
   (push.const
     begin
     (define-syntax ?make-name ?make-rules)
     (define-syntax ?pred-name ?pred-rules)
     (define-syntax ?getter-name ?getter-rules)
     ...
     (define-syntax ?setter-name ?setter-rules)
     ...)
   (push.const
     (?setter-rules . 1)
     (?setter-name . 1)
     (?getter-rules . 1)
     (?getter-name . 1)
     (?pred-rules . 0)
     (?pred-name . 0)
     (?make-rules . 0)
     (?make-name . 0))
   (apply.gloc.of |.syntax/c1n| "../stdlib/core/struct.scm" . 33808))
 (set.gloc.of |.L870|)
 (close
   (1 0)
   (push.gloc.of |.vars|)
   (push.iloc.0 . 0)
   (push.const)
   (push.const ?_ ?struct-name ?field-names)
   (push.const . #f)
   (push.close
     (1 0)
     (call
       (call
         (push.iloc.0 . 0)
         (push.const . ?struct-name)
         (apply.gloc.of |.syntax/i1n| "../stdlib/core/struct.scm" . 17437))
       (push)
       (apply.gloc.of |.syntax->datum| "../stdlib/core/struct.scm" . 17437))
     (push)
     (call
       (call
         (push.iloc.0 . 0)
         (push.const . ?field-names)
         (apply.gloc.of |.syntax/i1n| "../stdlib/core/struct.scm" . 18461))
       (push)
       (apply.gloc.of |.syntax->datum| "../stdlib/core/struct.scm" . 18461))
     (push)
     (extend . 2)
     (call
       (iloc.0 . 0)
       (if.symbol?.ret.const . #t)
       (push.const . define-struct)
       (push.const . "expected symbol for struct name")
       (push.iloc 2 . 0)
       (push.iloc.0 . 0)
       (apply.gloc.of |.syntax-violation| "../stdlib/core/struct.scm" . 20496))
     (call
       (extend.enclose+
         (1 0 . loop)
         (iloc.0 . 0)
         (if.not.pair?.ret.const . #f)
         (car.iloc (0 . 0) "../stdlib/core/struct.scm" . 23584)
         (if.symbol?
           (push.car.iloc (0 . 0) "../stdlib/core/struct.scm" . 24609)
           (push.cdr.iloc (0 . 0) "../stdlib/core/struct.scm" . 24621)
           (subr.gloc.of |.memq| 2 "../stdlib/core/struct.scm" . 24603)
           (if.true
             (push.const . define-struct)
             (push.const . "duplicate field name")
             (push.iloc 4 . 0)
             (push.iloc 2 . 1)
             (apply.gloc.of |.syntax-violation| "../stdlib/core/struct.scm" . 25627))
           (push.cdr.iloc (0 . 0) "../stdlib/core/struct.scm" . 26657)
           (apply.iloc+ (1 . 0) "../stdlib/core/struct.scm" . 26651))
         (push.const . define-struct)
         (push.const . "expected symbol for field name")
         (push.iloc 4 . 0)
         (push.iloc 2 . 1)
         (apply.gloc.of |.syntax-violation| "../stdlib/core/struct.scm" . 27671))
       (push.iloc.1 . 1)
       (apply.iloc+ (0 . 0) "../stdlib/core/struct.scm" . 22542))
     (push.const . "make-~a")
     (push.iloc.0 . 0)
     (push.subr.gloc.of |.format| 2 "../stdlib/core/struct.scm" . 28717)
     (push.subr.gloc.of |.string->symbol| 1 "../stdlib/core/struct.scm" . 28701)
     (push.const . "~a?")
     (push.iloc.0 . 0)
     (push.subr.gloc.of |.format| 2 "../stdlib/core/struct.scm" . 29741)
     (push.subr.gloc.of |.string->symbol| 1 "../stdlib/core/struct.scm" . 29725)
     (push.const . "type:~a")
     (push.iloc.0 . 0)
     (push.subr.gloc.of |.format| 2 "../stdlib/core/struct.scm" . 30765)
     (push.subr.gloc.of |.string->symbol| 1 "../stdlib/core/struct.scm" . 30749)
     (push.iloc.0 . 1)
     (push.subr.gloc.of |.length| 1 "../stdlib/core/struct.scm" . 31775)
     (extend . 4)
     (call
       (push.iloc.0 . 3)
       (push.const . 1)
       (apply.gloc.of |core.lists'iota| "../stdlib/core/struct.scm" . 32800))
     (push)
     (extend . 1)
     (push.iloc 3 . 0)
     (call
       (call
         (push.iloc 3 . 0)
         (push.const . ?_)
         (apply.gloc.of |.syntax/i1n| "../stdlib/core/struct.scm" . 33808))
       (push)
       (push.iloc.1 . 0)
       (apply.gloc.of |.datum->syntax| "../stdlib/core/struct.scm" . 33808))
     (push)
     (call
       (call
         (push.iloc 3 . 0)
         (push.const . ?_)
         (apply.gloc.of |.syntax/i1n| "../stdlib/core/struct.scm" . 33808))
       (push)
       (push.iloc.1 . 1)
       (apply.gloc.of |.datum->syntax| "../stdlib/core/struct.scm" . 33808))
     (push)
     (call
       (call
         (push.iloc 3 . 0)
         (push.const . k)
         (apply.gloc.of |.syntax/i0n| "../stdlib/core/struct.scm" . 33808))
       (push)
       (push.const . syntax-rules)
       (push.const)
       (push.const . _)
       (iloc 2 . 1)
       (push.cons)
       (push.const . tuple)
       (push.const . quote)
       (push.iloc.1 . 2)
       (push.subr.gloc.of |.list| 2 "../stdlib/core/struct.scm" . 33808)
       (push.iloc 2 . 1)
       (push.subr.gloc.of |.cons*| 3 "../stdlib/core/struct.scm" . 33808)
       (push.subr.gloc.of |.list| 2 "../stdlib/core/struct.scm" . 33808)
       (push.const _)
       (push.const . tuple)
       (push.const . quote)
       (push.iloc.1 . 2)
       (push.subr.gloc.of |.list| 2 "../stdlib/core/struct.scm" . 33808)
       (call
         (push.iloc.1 . 3)
         (push.const unspecified)
         (apply.gloc.of |core.lists'make-list| "../stdlib/core/struct.scm" . 33808))
       (push)
       (push.subr.gloc.of |.cons*| 3 "../stdlib/core/struct.scm" . 33808)
       (push.subr.gloc.of |.list| 2 "../stdlib/core/struct.scm" . 33808)
       (push.subr.gloc.of |.list| 4 "../stdlib/core/struct.scm" . 33808)
       (apply.gloc.of |.datum->syntax| "../stdlib/core/struct.scm" . 33808))
     (push)
     (call
       (call
         (push.iloc 3 . 0)
         (push.const . k)
         (apply.gloc.of |.syntax/i0n| "../stdlib/core/struct.scm" . 33808))
       (push)
       (push.const . syntax-rules)
       (push.const)
       (push.const _ obj)
       (push.const . eq?)
       (push.const tuple-ref obj 0)
       (push.const . quote)
       (push.iloc.1 . 2)
       (push.subr.gloc.of |.list| 2 "../stdlib/core/struct.scm" . 33808)
       (push.subr.gloc.of |.list| 3 "../stdlib/core/struct.scm" . 33808)
       (push.subr.gloc.of |.list| 2 "../stdlib/core/struct.scm" . 33808)
       (push.subr.gloc.of |.list| 3 "../stdlib/core/struct.scm" . 33808)
       (apply.gloc.of |.datum->syntax| "../stdlib/core/struct.scm" . 33808))
     (push)
     (call
       (push.close
         (1 0)
         (call
           (push.iloc 4 . 0)
           (push.const . ?_)
           (apply.gloc.of |.syntax/i1n| "../stdlib/core/struct.scm" . 33808))
         (push)
         (push.const . "~a-~a")
         (push.iloc 3 . 0)
         (push.iloc.0 . 0)
         (push.subr.gloc.of |.format| 3 "../stdlib/core/struct.scm" . 33808)
         (push.subr.gloc.of |.string->symbol| 1 "../stdlib/core/struct.scm" . 33808)
         (apply.gloc.of |.datum->syntax| "../stdlib/core/struct.scm" . 33808))
       (push.iloc 2 . 1)
       (apply.gloc.of |.map| "../stdlib/core/struct.scm" . 33808))
     (push)
     (call
       (push.close
         (1 0)
         (call
           (push.iloc 4 . 0)
           (push.const . ?_)
           (apply.gloc.of |.syntax/i1n| "../stdlib/core/struct.scm" . 33808))
         (push)
         (push.const . "~a-~a-set!")
         (push.iloc 3 . 0)
         (push.iloc.0 . 0)
         (push.subr.gloc.of |.format| 3 "../stdlib/core/struct.scm" . 33808)
         (push.subr.gloc.of |.string->symbol| 1 "../stdlib/core/struct.scm" . 33808)
         (apply.gloc.of |.datum->syntax| "../stdlib/core/struct.scm" . 33808))
       (push.iloc 2 . 1)
       (apply.gloc.of |.map| "../stdlib/core/struct.scm" . 33808))
     (push)
     (call
       (push.close
         (1 0)
         (call
           (push.iloc 4 . 0)
           (push.const . k)
           (apply.gloc.of |.syntax/i0n| "../stdlib/core/struct.scm" . 33808))
         (push)
         (push.const . syntax-rules)
         (push.const)
         (push.const _ obj)
         (push.const . tuple-ref)
         (push.const . obj)
         (push.iloc.0 . 0)
         (push.subr.gloc.of |.list| 3 "../stdlib/core/struct.scm" . 33808)
         (push.subr.gloc.of |.list| 2 "../stdlib/core/struct.scm" . 33808)
         (push.subr.gloc.of |.list| 3 "../stdlib/core/struct.scm" . 33808)
         (apply.gloc.of |.datum->syntax| "../stdlib/core/struct.scm" . 33808))
       (push.iloc.0 . 0)
       (apply.gloc.of |.map| "../stdlib/core/struct.scm" . 33808))
     (push)
     (call
       (push.close
         (1 0)
         (call
           (push.iloc 4 . 0)
           (push.const . k)
           (apply.gloc.of |.syntax/i0n| "../stdlib/core/struct.scm" . 33808))
         (push)
         (push.const . syntax-rules)
         (push.const)
         (push.const _ obj value)
         (push.const . tuple-set!)
         (push.const . obj)
         (push.iloc.0 . 0)
         (push.const value)
         (push.subr.gloc.of |.cons*| 4 "../stdlib/core/struct.scm" . 33808)
         (push.subr.gloc.of |.list| 2 "../stdlib/core/struct.scm" . 33808)
         (push.subr.gloc.of |.list| 3 "../stdlib/core/struct.scm" . 33808)
         (apply.gloc.of |.datum->syntax| "../stdlib/core/struct.scm" . 33808))
       (push.iloc.0 . 0)
       (apply.gloc.of |.map| "../stdlib/core/struct.scm" . 33808))
     (push)
     (push.subr.gloc.of |.list| 8 "../stdlib/core/struct.scm" . 33808)
     (push.const)
     (push.const
       ?make-name
       ?pred-name
       ?make-rules
       ?pred-rules
       (?getter-name ...)
       (?setter-name ...)
       (?getter-rules ...)
       (?setter-rules ...))
     (push.const . #f)
     (push.gloc.of |.L870|)
     (push.subr.gloc.of |.list| 3 "../stdlib/core/struct.scm" . 33808)
     (push.const . _)
     (push.const . #f)
     (push.gloc.of |.L872|)
     (push.subr.gloc.of |.list| 3 "../stdlib/core/struct.scm" . 33808)
     (apply.gloc.of |.syntax-dispatch| "../stdlib/core/struct.scm" . 33808))
   (push.subr.gloc.of
     |.list|
     3
     (|.list|
       '(?_ ?struct-name ?field-names)
       #f
       (lambda (|.vars`2387*|)
         (let ((|struct-name`2389*| (|.syntax->datum| (|.syntax/i1n| |.vars`2387*| '?struct-name)))
               (|field-names`2389*| (|.syntax->datum| (|.syntax/i1n| |.vars`2387*| '?field-names))))
           (or (|.symbol?| |struct-name`2389*|)
               (|.syntax-violation|
                 'define-struct
                 "expected symbol for struct name"
                 |x`2385*|
                 |struct-name`2389*|))
           (letrec* ((|loop`2393*|
                       (lambda (|names`2394*|)
                         (and (|.pair?| |names`2394*|)
                              (if (|.symbol?| (|.car| |names`2394*|))
                                  (if (|.memq| (|.car| |names`2394*|) (|.cdr| |names`2394*|))
                                      (|.syntax-violation|
                                        'define-struct
                                        "duplicate field name"
                                        |x`2385*|
                                        |field-names`2389*|)
                                      (|loop`2393*| (|.cdr| |names`2394*|)))
                                  (|.syntax-violation|
                                    'define-struct
                                    "expected symbol for field name"
                                    |x`2385*|
                                    |field-names`2389*|))))))
             (|loop`2393*| |field-names`2389*|))
           (let ((|make-name`2397*| (|.string->symbol| (|.format| "make-~a" |struct-name`2389*|)))
                 (|pred-name`2397*| (|.string->symbol| (|.format| "~a?" |struct-name`2389*|)))
                 (|desc-name`2397*| (|.string->symbol| (|.format| "type:~a" |struct-name`2389*|)))
                 (|field-count`2397*| (|.length| |field-names`2389*|)))
             (let ((|field-refs`2399*| (|core.lists'iota| |field-count`2397*| 1)))
               (|.syntax-dispatch|
                 |.vars`2387*|
                 (|.list|
                   (|.datum->syntax| (|.syntax/i1n| |.vars`2387*| '?_) |make-name`2397*|)
                   (|.datum->syntax| (|.syntax/i1n| |.vars`2387*| '?_) |pred-name`2397*|)
                   (|.datum->syntax|
                     (|.syntax/i0n| |.vars`2387*| 'k)
                     (|.list|
                       'syntax-rules
                       '()
                       (|.list|
                         (|.cons| '_ |field-names`2389*|)
                         (|.cons*| 'tuple (|.list| 'quote |desc-name`2397*|) |field-names`2389*|))
                       (|.list|
                         '(_)
                         (|.cons*|
                           'tuple
                           (|.list| 'quote |desc-name`2397*|)
                           (|core.lists'make-list| |field-count`2397*| '(unspecified))))))
                   (|.datum->syntax|
                     (|.syntax/i0n| |.vars`2387*| 'k)
                     (|.list|
                       'syntax-rules
                       '()
                       (|.list|
                         '(_ obj)
                         (|.list| 'eq? '(tuple-ref obj 0) (|.list| 'quote |desc-name`2397*|)))))
                   (|.map|
                     (lambda (|field-name`2402*|)
                       (|.datum->syntax|
                         (|.syntax/i1n| |.vars`2387*| '?_)
                         (|.string->symbol|
                           (|.format| "~a-~a" |struct-name`2389*| |field-name`2402*|))))
                     |field-names`2389*|)
                   (|.map|
                     (lambda (|field-name`2404*|)
                       (|.datum->syntax|
                         (|.syntax/i1n| |.vars`2387*| '?_)
                         (|.string->symbol|
                           (|.format| "~a-~a-set!" |struct-name`2389*| |field-name`2404*|))))
                     |field-names`2389*|)
                   (|.map|
                     (lambda (|field-ref`2406*|)
                       (|.datum->syntax|
                         (|.syntax/i0n| |.vars`2387*| 'k)
                         (|.list|
                           'syntax-rules
                           '()
                           (|.list| '(_ obj) (|.list| 'tuple-ref 'obj |field-ref`2406*|)))))
                     |field-refs`2399*|)
                   (|.map|
                     (lambda (|field-ref`2408*|)
                       (|.datum->syntax|
                         (|.syntax/i0n| |.vars`2387*| 'k)
                         (|.list|
                           'syntax-rules
                           '()
                           (|.list|
                             '(_ obj value)
                             (|.cons*| 'tuple-set! 'obj |field-ref`2408*| '(value))))))
                     |field-refs`2399*|))
                 '()
                 (|.list|
                   '(?make-name
                      ?pred-name
                      ?make-rules
                      ?pred-rules
                      (?getter-name ...)
                      (?setter-name ...)
                      (?getter-rules ...)
                      (?setter-rules ...))
                   #f
                   |.L870|)
                 (|.list| '_ #f |.L872|))))))))
   (apply.gloc.of
     |.syntax-dispatch|
     (|.syntax-dispatch|
       |.vars|
       |x`2385*|
       '()
       (|.list|
         '(?_ ?struct-name ?field-names)
         #f
         (lambda (|.vars`2387*|)
           (let ((|struct-name`2389*|
                   (|.syntax->datum| (|.syntax/i1n| |.vars`2387*| '?struct-name)))
                 (|field-names`2389*|
                   (|.syntax->datum| (|.syntax/i1n| |.vars`2387*| '?field-names))))
             (or (|.symbol?| |struct-name`2389*|)
                 (|.syntax-violation|
                   'define-struct
                   "expected symbol for struct name"
                   |x`2385*|
                   |struct-name`2389*|))
             (letrec* ((|loop`2393*|
                         (lambda (|names`2394*|)
                           (and (|.pair?| |names`2394*|)
                                (if (|.symbol?| (|.car| |names`2394*|))
                                    (if (|.memq| (|.car| |names`2394*|) (|.cdr| |names`2394*|))
                                        (|.syntax-violation|
                                          'define-struct
                                          "duplicate field name"
                                          |x`2385*|
                                          |field-names`2389*|)
                                        (|loop`2393*| (|.cdr| |names`2394*|)))
                                    (|.syntax-violation|
                                      'define-struct
                                      "expected symbol for field name"
                                      |x`2385*|
                                      |field-names`2389*|))))))
               (|loop`2393*| |field-names`2389*|))
             (let ((|make-name`2397*| (|.string->symbol| (|.format| "make-~a" |struct-name`2389*|)))
                   (|pred-name`2397*| (|.string->symbol| (|.format| "~a?" |struct-name`2389*|)))
                   (|desc-name`2397*| (|.string->symbol| (|.format| "type:~a" |struct-name`2389*|)))
                   (|field-count`2397*| (|.length| |field-names`2389*|)))
               (let ((|field-refs`2399*| (|core.lists'iota| |field-count`2397*| 1)))
                 (|.syntax-dispatch|
                   |.vars`2387*|
                   (|.list|
                     (|.datum->syntax| (|.syntax/i1n| |.vars`2387*| '?_) |make-name`2397*|)
                     (|.datum->syntax| (|.syntax/i1n| |.vars`2387*| '?_) |pred-name`2397*|)
                     (|.datum->syntax|
                       (|.syntax/i0n| |.vars`2387*| 'k)
                       (|.list|
                         'syntax-rules
                         '()
                         (|.list|
                           (|.cons| '_ |field-names`2389*|)
                           (|.cons*| 'tuple (|.list| 'quote |desc-name`2397*|) |field-names`2389*|))
                         (|.list|
                           '(_)
                           (|.cons*|
                             'tuple
                             (|.list| 'quote |desc-name`2397*|)
                             (|core.lists'make-list| |field-count`2397*| '(unspecified))))))
                     (|.datum->syntax|
                       (|.syntax/i0n| |.vars`2387*| 'k)
                       (|.list|
                         'syntax-rules
                         '()
                         (|.list|
                           '(_ obj)
                           (|.list| 'eq? '(tuple-ref obj 0) (|.list| 'quote |desc-name`2397*|)))))
                     (|.map|
                       (lambda (|field-name`2402*|)
                         (|.datum->syntax|
                           (|.syntax/i1n| |.vars`2387*| '?_)
                           (|.string->symbol|
                             (|.format| "~a-~a" |struct-name`2389*| |field-name`2402*|))))
                       |field-names`2389*|)
                     (|.map|
                       (lambda (|field-name`2404*|)
                         (|.datum->syntax|
                           (|.syntax/i1n| |.vars`2387*| '?_)
                           (|.string->symbol|
                             (|.format| "~a-~a-set!" |struct-name`2389*| |field-name`2404*|))))
                       |field-names`2389*|)
                     (|.map|
                       (lambda (|field-ref`2406*|)
                         (|.datum->syntax|
                           (|.syntax/i0n| |.vars`2387*| 'k)
                           (|.list|
                             'syntax-rules
                             '()
                             (|.list| '(_ obj) (|.list| 'tuple-ref 'obj |field-ref`2406*|)))))
                       |field-refs`2399*|)
                     (|.map|
                       (lambda (|field-ref`2408*|)
                         (|.datum->syntax|
                           (|.syntax/i0n| |.vars`2387*| 'k)
                           (|.list|
                             'syntax-rules
                             '()
                             (|.list|
                               '(_ obj value)
                               (|.cons*| 'tuple-set! 'obj |field-ref`2408*| '(value))))))
                       |field-refs`2399*|))
                   '()
                   (|.list|
                     '(?make-name
                        ?pred-name
                        ?make-rules
                        ?pred-rules
                        (?getter-name ...)
                        (?setter-name ...)
                        (?getter-rules ...)
                        (?setter-rules ...))
                     #f
                     |.L870|)
                   (|.list| '_ #f |.L872|))))))))))
 (set.gloc.of |.L871|)
 (call
   (push.const core lists)
   (apply.gloc.of |.require-scheme-library| "../stdlib/core/struct.scm" . 33808))
 (call
   (push.const core syntax-case)
   (apply.gloc.of |.require-scheme-library| "../stdlib/core/struct.scm" . 33808))
 (call
   (push.const core primitives)
   (apply.gloc.of |.require-scheme-library| "../stdlib/core/struct.scm" . 33808))
 (call
   (push.const . syntax)
   (push.const . |core.struct'define-struct|)
   (call
     (push.gloc.of |.L871|)
     (apply.gloc.of |.transformer-thunk| "../stdlib/core/struct.scm" . 14341))
   (push)
   (push.const
     (let import . |.let|)
     (field-name unbound)
     (?getter-name unbound)
     (make-name unbound)
     (unspecified import . |.unspecified|)
     (field-ref unbound)
     (field-names unbound)
     (if import . |.if|)
     (unquote-splicing import . |.unquote-splicing|)
     (desc-name unbound)
     (... import . |....|)
     (quote import . |.quote|)
     (?setter-name unbound)
     (define-syntax import . |.define-syntax|)
     (datum->syntax import . |.datum->syntax|)
     (value unbound)
     (quasiquote import . |.quasiquote|)
     (struct-name unbound)
     (?make-name unbound)
     (pred-name unbound)
     (unquote import . |.unquote|)
     (?_ unbound)
     (?getter-rules unbound)
     (tuple-set! import . |.tuple-set!|)
     (lambda import . |.lambda|)
     (?pred-name unbound)
     (letrec* import . |.letrec*|)
     (syntax import . |.syntax|)
     (?struct-name unbound)
     (string->symbol import . |.string->symbol|)
     (|core.lists'make-list| unbound)
     (|core.lists'iota| unbound)
     (map import . |.map|)
     (field-refs unbound)
     (begin import . |.begin|)
     (_ import . |._|)
     (?make-rules unbound)
     (?field-names unbound)
     (make-list import . |core.lists'make-list|)
     (obj unbound)
     (tuple-ref import . |.tuple-ref|)
     (field-count unbound)
     (tuple import . |.tuple|)
     (?pred-rules unbound)
     (and import . |.and|)
     (k unbound)
     (define-struct import . |core.struct'define-struct|)
     (or import . |.or|)
     (syntax-rules import . |.syntax-rules|)
     (format import . |.format|)
     (with-syntax import . |core.syntax-case'with-syntax|)
     (eq? import . |.eq?|)
     (?setter-rules unbound))
   (apply.gloc.of |.set-top-level-macro!| "../stdlib/core/struct.scm" . 14341))
 (push.const . core.struct)
 (push.const . #f)
 (push.const (define-struct import . |core.struct'define-struct|))
 (apply.gloc.of |.intern-scheme-library| "../stdlib/core/struct.scm" . 33808))

((close
   (1 0)
   (push.gloc.of |core.optimize'ht-variable-operands-refc|)
   (push.car.iloc (0 . 0) "../stdlib/core/optimize.scm" . 1103961)
   (subr.gloc.of |.core-hashtable-contains?| 2 "../stdlib/core/optimize.scm" . 1103909)
   (if.true.ret)
   (push.gloc.of |core.optimize'ht-variable-defined|)
   (push.car.iloc (0 . 0) "../stdlib/core/optimize.scm" . 1104979)
   (subr.gloc.of |.core-hashtable-contains?| 2 "../stdlib/core/optimize.scm" . 1104933)
   (if.true.ret)
   (push.gloc.of |core.optimize'ht-variable-pinned|)
   (push.car.iloc (0 . 0) "../stdlib/core/optimize.scm" . 1106002)
   (subr.gloc.of |.core-hashtable-contains?| 2 "../stdlib/core/optimize.scm" . 1105957)
   (if.true.ret)
   (push.gloc.of |core.optimize'ht-variable-letrec|)
   (push.car.iloc (0 . 0) "../stdlib/core/optimize.scm" . 1107031)
   (subr.gloc.of |.core-hashtable-contains?| 2 "../stdlib/core/optimize.scm" . 1106986)
   (if.false.ret.const . #t)
   (push.gloc.of |core.optimize'ht-lambda-node|)
   (push.cdr.iloc (0 . 0) "../stdlib/core/optimize.scm" . 1108052)
   (push.const . #f)
   (push.subr.gloc.of |.core-hashtable-ref| 3 "../stdlib/core/optimize.scm" . 1108017)
   (subr.gloc.of |.list?| 1 "../stdlib/core/optimize.scm" . 1108010)
   (if.false.ret.const . #t)
   (push.iloc.0 . 0)
   (push.subr.gloc.of |.caddr| 1 "../stdlib/core/optimize.scm" . 1109041)
   (subr.gloc.of |.list?| 1 "../stdlib/core/optimize.scm" . 1109034)
   (if.false.ret.const . #t)
   (push.iloc.0 . 0)
   (push.subr.gloc.of |.caddr| 1 "../stdlib/core/optimize.scm" . 1110075)
   (push.subr.gloc.of |.length| 1 "../stdlib/core/optimize.scm" . 1110067)
   (push.const . 1)
   (push.subr.gloc.of |.+| 2 "../stdlib/core/optimize.scm" . 1110064)
   (extend . 1)
   (push.close
     (1 0)
     (push.iloc.0 . 0)
     (push.subr.gloc.of |.length| 1 "../stdlib/core/optimize.scm" . 1111107)
     (push.iloc.1 . 0)
     (push.subr.gloc.of |.=| 2 "../stdlib/core/optimize.scm" . 1111104)
     (ret.subr.gloc.of |.not| "../stdlib/core/optimize.scm" . 1111099))
   (push.gloc.of |core.optimize'ht-variable-callsites|)
   (push.car.iloc (1 . 0) "../stdlib/core/optimize.scm" . 1112153)
   (push.const)
   (push.subr.gloc.of |.core-hashtable-ref| 3 "../stdlib/core/optimize.scm" . 1112111)
   (apply.gloc.of |core.lists'exists| "../stdlib/core/optimize.scm" . 1111079))
 (set.gloc.of |.L928|)
 (close
   (2 0 . loop)
   (call (apply.gloc.of |core.optimize'clear-context| "../stdlib/core/optimize.scm" . 1176585))
   (call
     (push.iloc.0 . 0)
     (push.const)
     (push.const)
     (push.const . #f)
     (apply.gloc.of |core.optimize'collect-context| "../stdlib/core/optimize.scm" . 1177609))
   (call
     (push.iloc.0 . 0)
     (push.iloc.0 . 1)
     (apply.gloc.of |core.optimize'crawl-lambda-lifting| "../stdlib/core/optimize.scm" . 1178654))
   (push)
   (call
     (push.iloc.0 . 0)
     (apply.gloc.of |core.optimize'crawl-beta-subst| "../stdlib/core/optimize.scm" . 1179684))
   (push)
   (extend . 2)
   (call
     (gloc.of |core.optimize'max-transform-pass|)
     (>=.iloc (1 . 1) "../stdlib/core/optimize.scm" . 1192983)
     (if.false.ret)
     (push.iloc.0 . 0)
     (push.subr.gloc.of |.core-hashtable-size| 1 "../stdlib/core/optimize.scm" . 1194014)
     (push.const . 0)
     (subr.gloc.of |.>| 2 "../stdlib/core/optimize.scm" . 1194011)
     (if.true.ret)
     (push.iloc.0 . 1)
     (push.subr.gloc.of |.core-hashtable-size| 1 "../stdlib/core/optimize.scm" . 1195038)
     (push.const . 0)
     (subr.gloc.of |.>| 2 "../stdlib/core/optimize.scm" . 1195035)
     (if.true.ret)
     (=n.iloc (1 . 1) 1 "../stdlib/core/optimize.scm" . 1196064)
     (if.false.ret)
     (push.gloc.of |.L971|)
     (push.gloc.of |core.optimize'ht-variable-binding|)
     (push.subr.gloc.of |.core-hashtable->alist| 1 "../stdlib/core/optimize.scm" . 1198120)
     (apply.gloc.of |core.lists'exists| "../stdlib/core/optimize.scm" . 1197088))
   (if.true
     (touch.gloc.of |loop`3101*|)
     (push.const . begin)
     (call
       (push.close
         (1 0)
         (extend.enclose+
           (1 0 . loop)
           (call
             (push.iloc.0 . 0)
             (push.iloc 3 . 0)
             (push.iloc 3 . 1)
             (apply.gloc.of |core.optimize'transcribe| "../stdlib/core/optimize.scm" . 1230906))
           (push)
           (extend . 1)
           (push.iloc.0 . 0)
           (iloc.1 . 0)
           (if.eq? (ret.iloc 1 . 0))
           (push.iloc.0 . 0)
           (apply.iloc+ (2 . 0) "../stdlib/core/optimize.scm" . 1232957))
         (push.iloc.1 . 0)
         (apply.iloc+ (0 . 0) "../stdlib/core/optimize.scm" . 1230895))
       (call
         (push.const . begin)
         (call
           (push.gloc.of |.values|)
           (call
             (push.gloc.of |.L967|)
             (push.iloc.0 . 0)
             (push.subr.gloc.of |.core-hashtable->alist| 1 "../stdlib/core/optimize.scm" . 1225787)
             (apply.gloc.of |.map| "../stdlib/core/optimize.scm" . 1207350))
           (push)
           (apply.gloc.of |core.lists'filter| "../stdlib/core/optimize.scm" . 1206318))
         (push.cons)
         (push.iloc.1 . 0)
         (push.subr.gloc.of |.list| 2 "../stdlib/core/optimize.scm" . 1233963)
         (apply.gloc.of |core.optimize'flatten-begin| "../stdlib/core/optimize.scm" . 1233963))
       (push)
       (apply.gloc.of
         |.map|
         (|.map|
           (lambda (|e`3115*|)
             (letrec* ((|loop`3119*|
                         (lambda (|e`3120*|)
                           (let ((|new`3122*|
                                   (|core.optimize'transcribe|
                                     |e`3120*|
                                     |ht-lift-table`3104*|
                                     |ht-bata-subst-table`3104*|)))
                             (if (|.eq?| |new`3122*| |e`3120*|)
                                 |e`3120*|
                                 (|loop`3119*| |new`3122*|))))))
               (|loop`3119*| |e`3115*|)))
           (|core.optimize'flatten-begin|
             (|.list|
               (|.cons|
                 'begin
                 (|core.lists'filter|
                   |.values|
                   (|.map| |.L967| (|.core-hashtable->alist| |ht-lift-table`3104*|))))
               |form`3102*|)))))
     (push.cons)
     (push.n+.iloc (1 . 1) 1 "../stdlib/core/optimize.scm" . 1234977)
     (apply.gloc.of
       |loop`3101*|
       (|loop`3101*|
         (|.cons|
           'begin
           (|.map|
             (lambda (|e`3115*|)
               (letrec* ((|loop`3119*|
                           (lambda (|e`3120*|)
                             (let ((|new`3122*|
                                     (|core.optimize'transcribe|
                                       |e`3120*|
                                       |ht-lift-table`3104*|
                                       |ht-bata-subst-table`3104*|)))
                               (if (|.eq?| |new`3122*| |e`3120*|)
                                   |e`3120*|
                                   (|loop`3119*| |new`3122*|))))))
                 (|loop`3119*| |e`3115*|)))
             (|core.optimize'flatten-begin|
               (|.list|
                 (|.cons|
                   'begin
                   (|core.lists'filter|
                     |.values|
                     (|.map| |.L967| (|.core-hashtable->alist| |ht-lift-table`3104*|))))
                 |form`3102*|))))
         (|.+| |pass`3102*| 1))))
   (touch.gloc.of |post-transform`3092*|)
   (push.iloc.1 . 0)
   (apply.gloc.of |post-transform`3092*| "../stdlib/core/optimize.scm" . 1237010))
 (set.gloc.of |loop`3101*|)
 (close
   (0 0 . resolve-mutual-recursion)
   (call
     (push.gloc.of |.values|)
     (call
       (push.gloc.of |.L988|)
       (push.gloc.of |core.optimize'ht-variable-binding|)
       (push.subr.gloc.of |.core-hashtable->alist| 1 "../stdlib/core/optimize.scm" . 584735)
       (apply.gloc.of |.map| "../stdlib/core/optimize.scm" . 583706))
     (push)
     (apply.gloc.of |core.lists'filter| "../stdlib/core/optimize.scm" . 582674))
   (push)
   (extend . 1)
   (iloc.0 . 0)
   (if.not.pair?.ret.const . #f)
   (call
     (push.close
       (1 0)
       (push.car.iloc (0 . 0) "../stdlib/core/optimize.scm" . 589862)
       (call
         (call
           (touch.gloc.of |make-mutual-list`2605*|)
           (push.car.iloc (0 . 0) "../stdlib/core/optimize.scm" . 591929)
           (push.iloc.1 . 0)
           (push.const)
           (push.const)
           (apply.gloc.of |make-mutual-list`2605*| "../stdlib/core/optimize.scm" . 591911))
         (push)
         (apply.gloc.of
           |core.lists'remove-duplicate-symbols|
           "../stdlib/core/optimize.scm"
           .
           590886))
       (ret.cons "../stdlib/core/optimize.scm" . 589856))
     (push.iloc.0 . 0)
     (apply.gloc.of |.map| "../stdlib/core/optimize.scm" . 588825))
   (push)
   (extend . 1)
   (push.close
     (1 0)
     (push.cdr.iloc (0 . 0) "../stdlib/core/optimize.scm" . 596008)
     (extend . 1)
     (iloc.0 . 0)
     (if.not.pair?.ret.const . #f)
     (call
       (push.close
         (1 0)
         (push.iloc.0 . 0)
         (push.iloc 3 . 0)
         (push.subr.gloc.of |.assq| 2 "../stdlib/core/optimize.scm" . 599102)
         (extend . 1)
         (iloc.0 . 0)
         (if.true
           (touch.gloc.of |list-elts=?`2605*|)
           (push.iloc 2 . 0)
           (push.cdr.iloc (0 . 0) "../stdlib/core/optimize.scm" . 599156)
           (apply.gloc.of |list-elts=?`2605*| "../stdlib/core/optimize.scm" . 599140))
         (push.iloc.1 . 0)
         (apply.gloc.of |core.optimize'variable-top-level?| "../stdlib/core/optimize.scm" . 600131))
       (push.iloc.0 . 0)
       (apply.gloc.of
         |core.lists'for-all|
         (|core.lists'for-all|
           (lambda (|id`2648*|)
             (let ((|.L890`2650*| (|.assq| |id`2648*| |mutual-list`2642*|)))
               (if |.L890`2650*|
                   (|list-elts=?`2605*| |c1`2646*| (|.cdr| |.L890`2650*|))
                   (|core.optimize'variable-top-level?| |id`2648*|))))
           |c1`2646*|)))
     (if.false.ret)
     (call
       (touch.gloc.of |lift-variables`2605*|)
       (push.iloc.0 . 0)
       (apply.gloc.of |lift-variables`2605*| "../stdlib/core/optimize.scm" . 603187))
     (ret.const . #t))
   (push.iloc.0 . 0)
   (apply.gloc.of
     |core.lists'exists|
     (|core.lists'exists|
       (lambda (|m`2644*|)
         (let ((|c1`2646*| (|.cdr| |m`2644*|)))
           (and (|.pair?| |c1`2646*|)
                (|core.lists'for-all|
                  (lambda (|id`2648*|)
                    (let ((|.L890`2650*| (|.assq| |id`2648*| |mutual-list`2642*|)))
                      (if |.L890`2650*|
                          (|list-elts=?`2605*| |c1`2646*| (|.cdr| |.L890`2650*|))
                          (|core.optimize'variable-top-level?| |id`2648*|))))
                  |c1`2646*|)
                (begin (|lift-variables`2605*| |c1`2646*|) #t))))
       |mutual-list`2642*|)))
 (set.gloc.of |resolve-mutual-recursion`2579*|)
 (close (2 0) (ret.iloc 0 . 0))
 (set.gloc.of |.L993|)
 (close
   (1 0 . post-transform)
   (call
     (push.iloc.0 . 0)
     (apply.gloc.of |core.optimize'process-stackable| "../stdlib/core/optimize.scm" . 1160203))
   (call
     (push.gloc.of |.L954|)
     (push.gloc.of |core.optimize'ht-variable-stackables|)
     (push.subr.gloc.of |.core-hashtable->alist| 1 "../stdlib/core/optimize.scm" . 1162261)
     (apply.gloc.of |.for-each| "../stdlib/core/optimize.scm" . 1161227))
   (ret.iloc 0 . 0))
 (set.gloc.of |post-transform`3092*|)
 (close
   (1 0)
   (push.const . #t)
   (push.const . "  expr: ~s~%")
   (push.car.iloc (0 . 0) "../stdlib/core/optimize.scm" . 247853)
   (subr.gloc.of |.format| 3 "../stdlib/core/optimize.scm" . 247827)
   (push.const . #t)
   (push.const . "  free: ~s~%---~%")
   (push.cdr.iloc (0 . 0) "../stdlib/core/optimize.scm" . 248882)
   (ret.subr.gloc.of |.format| "../stdlib/core/optimize.scm" . 248851))
 (set.gloc.of |.L955|)
 (close
   (1 0)
   (push.gloc.of |core.optimize'ht-lambda-node|)
   (push.car.iloc (0 . 0) "../stdlib/core/optimize.scm" . 524353)
   (push.const . #f)
   (push.subr.gloc.of |.core-hashtable-ref| 3 "../stdlib/core/optimize.scm" . 524318)
   (extend . 1)
   (iloc.0 . 0)
   (if.true
     (iloc.0 . 0)
     (if.null?
       (push.gloc.of |core.optimize'ht-lambda-node|)
       (push.car.iloc (1 . 0) "../stdlib/core/optimize.scm" . 527438)
       (push.const . functable)
       (ret.subr.gloc.of |.core-hashtable-set!| "../stdlib/core/optimize.scm" . 527402))
     (iloc.0 . 0)
     (if.not.pair?.ret.const . #t)
     (call
       (push.gloc.of |.L924|)
       (push.iloc.0 . 0)
       (apply.gloc.of |core.lists'for-all| "../stdlib/core/optimize.scm" . 529450))
     (if.true
       (push.gloc.of |core.optimize'ht-lambda-node|)
       (push.car.iloc (1 . 0) "../stdlib/core/optimize.scm" . 530510)
       (push.const . functable)
       (ret.subr.gloc.of |.core-hashtable-set!| "../stdlib/core/optimize.scm" . 530474))
     (call
       (push.gloc.of |.L941|)
       (push.iloc.0 . 0)
       (apply.gloc.of |core.lists'for-all| "../stdlib/core/optimize.scm" . 531498))
     (if.true
       (push.gloc.of |core.optimize'ht-lambda-node|)
       (push.car.iloc (1 . 0) "../stdlib/core/optimize.scm" . 532558)
       (push.const . liftable)
       (ret.subr.gloc.of |.core-hashtable-set!| "../stdlib/core/optimize.scm" . 532522))
     (ret.const.unspec))
   (ret.const.unspec))
 (set.gloc.of |.L920|)
 (close
   (2 0 . list-elts=?)
   (push.iloc.0 . 0)
   (push.subr.gloc.of |.length| 1 "../stdlib/core/optimize.scm" . 577559)
   (push.iloc.0 . 1)
   (push.subr.gloc.of |.length| 1 "../stdlib/core/optimize.scm" . 577573)
   (subr.gloc.of |.=| 2 "../stdlib/core/optimize.scm" . 577556)
   (if.false.ret)
   (push.close
     (1 0)
     (push.iloc.0 . 0)
     (push.iloc.1 . 1)
     (ret.subr.gloc.of |.memq| "../stdlib/core/optimize.scm" . 578601))
   (push.iloc.0 . 0)
   (apply.gloc.of |core.lists'for-all| "../stdlib/core/optimize.scm" . 578580))
 (set.gloc.of |list-elts=?`2605*|)
 (close
   (1 0)
   (call
     (push.car.iloc (0 . 0) "../stdlib/core/optimize.scm" . 1141809)
     (push.iloc.0 . 0)
     (push.subr.gloc.of |.cdddr| 1 "../stdlib/core/optimize.scm" . 1141817)
     (push.const . #t)
     (apply.gloc.of |core.optimize'check-stackable-seq| "../stdlib/core/optimize.scm" . 1141788))
   (if.false.ret)
   (call
     (push.gloc.of |core.optimize'ht-binding-body-mutual|)
     (push.car.iloc (0 . 0) "../stdlib/core/optimize.scm" . 1142862)
     (push.const . #f)
     (push.subr.gloc.of |.core-hashtable-ref| 3 "../stdlib/core/optimize.scm" . 1142819)
     (extend . 1)
     (iloc.0 . 0)
     (if.true
       (push.close
         (1 0)
         (push.car.iloc (2 . 0) "../stdlib/core/optimize.scm" . 1144913)
         (push.iloc.0 . 0)
         (push.const . #f)
         (apply.gloc.of |core.optimize'check-stackable| "../stdlib/core/optimize.scm" . 1144896))
       (call
         (push.cdr.iloc (1 . 0) "../stdlib/core/optimize.scm" . 1145911)
         (push.iloc.0 . 0)
         (apply.gloc.of |core.lists'remq| "../stdlib/core/optimize.scm" . 1145905))
       (push)
       (apply.gloc.of |core.lists'for-all| "../stdlib/core/optimize.scm" . 1144872))
     (ret.const . #t))
   (if.false.ret)
   (call
     (push.car.iloc (0 . 0) "../stdlib/core/optimize.scm" . 1147953)
     (push.gloc.of |core.optimize'ht-binding-body-common|)
     (push.car.iloc (0 . 0) "../stdlib/core/optimize.scm" . 1148004)
     (push.const)
     (push.subr.gloc.of |.core-hashtable-ref| 3 "../stdlib/core/optimize.scm" . 1147961)
     (push.const . #t)
     (apply.gloc.of |core.optimize'check-stackable-seq| "../stdlib/core/optimize.scm" . 1147932))
   (if.false.ret)
   (push.gloc.of |core.optimize'ht-variable-stackables|)
   (push.car.iloc (0 . 0) "../stdlib/core/optimize.scm" . 1151050)
   (push.cdr.iloc (0 . 0) "../stdlib/core/optimize.scm" . 1151058)
   (ret.subr.gloc.of |.core-hashtable-set!| "../stdlib/core/optimize.scm" . 1151006))
 (set.gloc.of |.L926|)
 (close
   (0 0 . traverse-lambda-node)
   (push.gloc.of |.L920|)
   (push.gloc.of |core.optimize'ht-lambda-node|)
   (push.subr.gloc.of |.core-hashtable->alist| 1 "../stdlib/core/optimize.scm" . 533525)
   (apply.gloc.of |.for-each| "../stdlib/core/optimize.scm" . 523285))
 (set.gloc.of |traverse-lambda-node`2579*|)
 (close
   (1 0)
   (push.cdr.iloc (0 . 0) "../stdlib/core/optimize.scm" . 1161273)
   (push.const . stack)
   (apply.gloc.of |core.optimize'closure-attribute-set!| "../stdlib/core/optimize.scm" . 1161249))
 (set.gloc.of |.L954|)
 (close (1 0) (push.const . |.list|) (iloc.0 . 0) (ret.cons "../stdlib/core/optimize.scm" . 948292))
 (set.gloc.of |.L960|)
 (close
   (1 0)
   (touch.gloc.of |make-depend-list`2605*|)
   (push.car.iloc (0 . 0) "../stdlib/core/optimize.scm" . 583741)
   (apply.gloc.of |make-depend-list`2605*| "../stdlib/core/optimize.scm" . 583723))
 (set.gloc.of |.L988|)
 (close
   (1 0)
   (cadr.iloc (0 . 0) "../stdlib/core/optimize.scm" . 1102879)
   (if.true.ret)
   (ret.const begin #f))
 (set.gloc.of |.L983|)
 (close
   (2 0 . loop)
   (iloc.0 . 0)
   (if.null? (ret.iloc 0 . 1))
   (call
     (touch.gloc.of |concatenate?`2499*|)
     (push.iloc.0 . 0)
     (apply.gloc.of |concatenate?`2499*| "../stdlib/core/optimize.scm" . 388113))
   (if.true
     (touch.gloc.of |loop`2504*|)
     (push.iloc.0 . 0)
     (push.subr.gloc.of |.cdar| 1 "../stdlib/core/optimize.scm" . 389143)
     (call
       (touch.gloc.of |loop`2504*|)
       (push.cdr.iloc (0 . 0) "../stdlib/core/optimize.scm" . 390173)
       (push.iloc.0 . 1)
       (apply.gloc.of |loop`2504*| "../stdlib/core/optimize.scm" . 390167))
     (push)
     (apply.gloc.of |loop`2504*| "../stdlib/core/optimize.scm" . 389137))
   (iloc.0 . 1)
   (if.null? (ret.iloc 0 . 0))
   (push.iloc.0 . 0)
   (push.iloc.0 . 1)
   (ret.subr.gloc.of |.append| "../stdlib/core/optimize.scm" . 394264))
 (set.gloc.of |loop`2504*|)
 (close
   (4 0 . make-mutual-list)
   (push.iloc.0 . 0)
   (push.iloc.0 . 2)
   (subr.gloc.of |.memq| 2 "../stdlib/core/optimize.scm" . 560150)
   (if.true (ret.iloc 0 . 3))
   (push.iloc.0 . 0)
   (push.iloc.0 . 1)
   (push.subr.gloc.of |.assq| 2 "../stdlib/core/optimize.scm" . 561174)
   (extend . 1)
   (iloc.0 . 0)
   (if.true
     (extend.enclose+
       (2 0 . loop)
       (iloc.0 . 0)
       (if.null? (ret.iloc 0 . 1))
       (push.car.iloc (0 . 0) "../stdlib/core/optimize.scm" . 566317)
       (extend . 1)
       (push.iloc 4 . 0)
       (iloc.0 . 0)
       (if.eq?
         (push.cdr.iloc (1 . 0) "../stdlib/core/optimize.scm" . 568371)
         (push.iloc.1 . 1)
         (apply.iloc+ (2 . 0) "../stdlib/core/optimize.scm" . 568365))
       (push.cdr.iloc (1 . 0) "../stdlib/core/optimize.scm" . 570419)
       (call
         (touch.gloc.of |make-mutual-list`2605*|)
         (push.iloc.0 . 0)
         (push.iloc 4 . 1)
         (push.iloc 4 . 0)
         (iloc 4 . 2)
         (push.cons)
         (push.iloc.0 . 0)
         (iloc.1 . 1)
         (push.cons)
         (apply.gloc.of |make-mutual-list`2605*| "../stdlib/core/optimize.scm" . 571443))
       (push)
       (apply.iloc+ (2 . 0) "../stdlib/core/optimize.scm" . 570413))
     (push.iloc.1 . 0)
     (push.iloc 2 . 3)
     (apply.iloc+ (0 . 0) "../stdlib/core/optimize.scm" . 564253))
   (push.iloc.1 . 0)
   (iloc.1 . 3)
   (ret.cons "../stdlib/core/optimize.scm" . 573462))
 (set.gloc.of |make-mutual-list`2605*|)
 (close (2 0) (ret.iloc 0 . 0))
 (set.gloc.of |.L985|)
 (close (1 0) (push.const . |.list|) (iloc.0 . 0) (ret.cons "../stdlib/core/optimize.scm" . 947248))
 (set.gloc.of |.L972|)
 (close
   (1 0 . concatenate?)
   (car.iloc (0 . 0) "../stdlib/core/optimize.scm" . 379927)
   (if.not.pair?.ret.const . #f)
   (call
     (push.car.iloc (0 . 0) "../stdlib/core/optimize.scm" . 380955)
     (subr.gloc.of |.list?| 1 "../stdlib/core/optimize.scm" . 380948)
     (if.true.ret)
     (push.const . #f)
     (push.const . "expression is not a proper list")
     (push.car.iloc (0 . 0) "../stdlib/core/optimize.scm" . 382027)
     (apply.gloc.of |.syntax-violation| "../stdlib/core/optimize.scm" . 381972))
   (if.false.ret)
   (push.const . begin)
   (push.iloc.0 . 0)
   (subr.gloc.of |.caar| 1 "../stdlib/core/optimize.scm" . 383004)
   (ret.eq? "../stdlib/core/optimize.scm" . 382992))
 (set.gloc.of |concatenate?`2499*|)
 (close
   (0 0 . make-table)
   (subr.gloc.of |.make-core-hashtable| 0)
   (push)
   (extend . 1)
   (call
     (push.close
       (1 0)
       (cdr.iloc (0 . 0) "../stdlib/core/optimize.scm" . 610353)
       (if.not.symbol?.ret.const . #f)
       (push.iloc.1 . 0)
       (push.car.iloc (0 . 0) "../stdlib/core/optimize.scm" . 610386)
       (call (apply.gloc.of |.generate-temporary-symbol| "../stdlib/core/optimize.scm" . 610394))
       (push)
       (ret.subr.gloc.of |.core-hashtable-set!| "../stdlib/core/optimize.scm" . 610362))
     (push.gloc.of |core.optimize'ht-lambda-node|)
     (push.subr.gloc.of |.core-hashtable->alist| 1 "../stdlib/core/optimize.scm" . 611351)
     (apply.gloc.of |.for-each| "../stdlib/core/optimize.scm" . 610317))
   (call
     (push.close
       (1 0)
       (push.gloc.of |core.optimize'ht-lambda-node|)
       (push.cdr.iloc (0 . 0) "../stdlib/core/optimize.scm" . 613443)
       (push.const . #f)
       (push.subr.gloc.of |.core-hashtable-ref| 3 "../stdlib/core/optimize.scm" . 613408)
       (extend . 1)
       (iloc.0 . 0)
       (if.true
         (iloc.0 . 0)
         (if.symbol?
           (push.iloc 2 . 0)
           (push.cdr.iloc (1 . 0) "../stdlib/core/optimize.scm" . 616519)
           (subr.gloc.of |.core-hashtable-delete!| 2 "../stdlib/core/optimize.scm" . 616492)
           (push.iloc 2 . 0)
           (push.car.iloc (1 . 0) "../stdlib/core/optimize.scm" . 617540)
           (push.cdr.iloc (1 . 0) "../stdlib/core/optimize.scm" . 617548)
           (ret.subr.gloc.of |.core-hashtable-set!| "../stdlib/core/optimize.scm" . 617516))
         (ret.const.unspec))
       (ret.const.unspec))
     (push.gloc.of |core.optimize'ht-variable-binding|)
     (push.subr.gloc.of |.core-hashtable->alist| 1 "../stdlib/core/optimize.scm" . 618519)
     (apply.gloc.of
       |.for-each|
       (|.for-each|
         (lambda (|b`2660*|)
           (let ((|.L891`2662*|
                   (|.core-hashtable-ref| |core.optimize'ht-lambda-node| (|.cdr| |b`2660*|) #f)))
             (if |.L891`2662*|
                 (if (|.symbol?| |.L891`2662*|)
                     (begin
                       (|.core-hashtable-delete!| |ht`2656*| (|.cdr| |b`2660*|))
                       (|.core-hashtable-set!| |ht`2656*| (|.car| |b`2660*|) (|.cdr| |b`2660*|)))
                     (|.unspecified|))
                 (|.unspecified|))))
         (|.core-hashtable->alist| |core.optimize'ht-variable-binding|))))
   (call
     (push.close
       (1 0)
       (push.iloc.1 . 0)
       (push.car.iloc (0 . 0) "../stdlib/core/optimize.scm" . 620596)
       (ret.subr.gloc.of |.core-hashtable-delete!| "../stdlib/core/optimize.scm" . 620569))
     (push.gloc.of |core.optimize'ht-variable-defined|)
     (push.subr.gloc.of |.core-hashtable->alist| 1 "../stdlib/core/optimize.scm" . 621591)
     (apply.gloc.of |.for-each| "../stdlib/core/optimize.scm" . 619533))
   (ret.iloc 0 . 0))
 (set.gloc.of |make-table`2579*|)
 (close
   (1 0 . loop)
   (call
     (push.iloc.0 . 0)
     (apply.gloc.of |core.optimize'pretty| "../stdlib/core/optimize.scm" . 1242132))
   (push)
   (extend . 1)
   (push.iloc.0 . 0)
   (iloc.1 . 0)
   (if.eq? (ret.iloc 1 . 0))
   (touch.gloc.of |loop`3132*|)
   (push.iloc.0 . 0)
   (apply.gloc.of |loop`3132*| "../stdlib/core/optimize.scm" . 1244183))
 (set.gloc.of |loop`3132*|)
 (close
   (1 0)
   (push.iloc.0 . 0)
   (apply.gloc.of |core.optimize'variable-functional?| "../stdlib/core/optimize.scm" . 529472))
 (set.gloc.of |.L924|)
 (close
   (1 0)
   (call
     (push.iloc.0 . 0)
     (const . #f)
     (if.eq?
       (push.gloc.of |.L921|)
       (apply.gloc.of |.current-after-expansion-hook| "../stdlib/core/optimize.scm" . 1269776))
     (push.gloc.of |core.optimize'optimize|)
     (apply.gloc.of |.current-after-expansion-hook| "../stdlib/core/optimize.scm" . 1270800))
   (ret.iloc 0 . 0))
 (set.gloc.of |.L982|)
 (close (3 0) (ret.iloc 0 . 0))
 (set.gloc.of |.L921|)
 (close
   (1 0)
   (push.gloc.of |core.optimize'ht-variable-refc|)
   (push.car.iloc (0 . 0) "../stdlib/core/optimize.scm" . 1197156)
   (push.subr.gloc.of |.core-hashtable-contains?| 2 "../stdlib/core/optimize.scm" . 1197113)
   (ret.subr.gloc.of |.not| "../stdlib/core/optimize.scm" . 1197108))
 (set.gloc.of |.L971|)
 (close
   (1 0)
   (push.gloc.of |core.optimize'ht-variable-formals|)
   (push.iloc.0 . 0)
   (push.const . #t)
   (ret.subr.gloc.of |.core-hashtable-set!| "../stdlib/core/optimize.scm" . 1102879))
 (set.gloc.of |.L961|)
 (close
   (1 0 . lift-variables)
   (push.gloc.of |.L935|)
   (push.iloc.0 . 0)
   (apply.gloc.of |.for-each| "../stdlib/core/optimize.scm" . 540687))
 (set.gloc.of |lift-variables`2605*|)
 (close
   (0 0 . loop)
   (call
     (touch.gloc.of |traverse-variable-binding`2579*|)
     (apply.gloc.of |traverse-variable-binding`2579*| "../stdlib/core/optimize.scm" . 625680))
   (if.true
     (touch.gloc.of |loop`2669*|)
     (apply.gloc.of |loop`2669*| "../stdlib/core/optimize.scm" . 625708))
   (call
     (touch.gloc.of |resolve-mutual-recursion`2579*|)
     (apply.gloc.of |resolve-mutual-recursion`2579*| "../stdlib/core/optimize.scm" . 626704))
   (if.true
     (touch.gloc.of |loop`2669*|)
     (apply.gloc.of |loop`2669*| "../stdlib/core/optimize.scm" . 626731))
   (ret.const.unspec))
 (set.gloc.of |loop`2669*|)
 (close
   (1 0 . loop)
   (iloc.0 . 0)
   (if.null?.ret.const)
   (call
     (push.car.iloc (0 . 0) "../stdlib/core/optimize.scm" . 902178)
     (apply.gloc.of |core.optimize'pretty| "../stdlib/core/optimize.scm" . 902170))
   (push)
   (call
     (touch.gloc.of |loop`2848*|)
     (push.cdr.iloc (0 . 0) "../stdlib/core/optimize.scm" . 902200)
     (apply.gloc.of |loop`2848*| "../stdlib/core/optimize.scm" . 902194))
   (push)
   (extend . 2)
   (call
     (push.iloc.0 . 0)
     (car.iloc (1 . 0) "../stdlib/core/optimize.scm" . 903203)
     (if.not.eq?.ret.const . #f)
     (push.iloc.0 . 1)
     (cdr.iloc (1 . 0) "../stdlib/core/optimize.scm" . 903222)
     (ret.eq? "../stdlib/core/optimize.scm" . 903214))
   (if.true (ret.iloc 1 . 0))
   (push.iloc.0 . 0)
   (iloc.0 . 1)
   (ret.cons "../stdlib/core/optimize.scm" . 905238))
 (set.gloc.of |loop`2848*|)
 (close
   (1 0)
   (push.gloc.of |core.optimize'ht-lambda-node|)
   (push.gloc.of |core.optimize'ht-variable-binding|)
   (push.iloc.0 . 0)
   (push.const . #f)
   (push.subr.gloc.of |.core-hashtable-ref| 3 "../stdlib/core/optimize.scm" . 543772)
   (push.const . liftable)
   (ret.subr.gloc.of |.core-hashtable-set!| "../stdlib/core/optimize.scm" . 541723))
 (set.gloc.of |.L935|)
 (close
   (1 0)
   (push.gloc.of |core.optimize'ht-variable-stackables|)
   (push.iloc.0 . 0)
   (ret.subr.gloc.of |.core-hashtable-contains?| "../stdlib/core/optimize.scm" . 1093685))
 (set.gloc.of |.L932|)
 (close
   (0 0 . traverse-variable-binding)
   (push.gloc.of |.L927|)
   (push.const . #f)
   (push.gloc.of |core.optimize'ht-variable-binding|)
   (push.subr.gloc.of |.core-hashtable->alist| 1 "../stdlib/core/optimize.scm" . 519190)
   (apply.gloc.of |core.lists'fold-left| "../stdlib/core/optimize.scm" . 499734))
 (set.gloc.of |traverse-variable-binding`2579*|)
 (close
   (1 0)
   (push.gloc.of |core.optimize'ht-variable-pinned|)
   (push.iloc.0 . 0)
   (push.const . #t)
   (ret.subr.gloc.of |.core-hashtable-set!| "../stdlib/core/optimize.scm" . 1102879))
 (set.gloc.of |.L966|)
 (close
   (2 0 . flatten-expression)
   (call
     (extend.enclose+
       (2 0 . loop)
       (iloc.0 . 0)
       (if.null? (ret.iloc 0 . 1))
       (call
         (car.iloc (0 . 0) "../stdlib/core/optimize.scm" . 925729)
         (if.not.pair?.ret.const . #f)
         (push.iloc 2 . 1)
         (push.iloc.0 . 0)
         (subr.gloc.of |.caar| 1 "../stdlib/core/optimize.scm" . 925749)
         (ret.eq? "../stdlib/core/optimize.scm" . 925740))
       (if.true
         (push.iloc.0 . 0)
         (push.subr.gloc.of |.cdar| 1 "../stdlib/core/optimize.scm" . 926747)
         (call
           (push.cdr.iloc (0 . 0) "../stdlib/core/optimize.scm" . 927777)
           (push.iloc.0 . 1)
           (apply.iloc+ (1 . 0) "../stdlib/core/optimize.scm" . 927771))
         (push)
         (apply.iloc+ (1 . 0) "../stdlib/core/optimize.scm" . 926741))
       (call
         (push.cdr.iloc (0 . 0) "../stdlib/core/optimize.scm" . 929829)
         (push.iloc.0 . 1)
         (apply.iloc+ (1 . 0) "../stdlib/core/optimize.scm" . 929823))
       (push)
       (extend . 1)
       (push.iloc.0 . 0)
       (cdr.iloc (1 . 0) "../stdlib/core/optimize.scm" . 930851)
       (if.eq? (ret.iloc 1 . 0))
       (push.car.iloc (1 . 0) "../stdlib/core/optimize.scm" . 932897)
       (iloc.0 . 0)
       (ret.cons "../stdlib/core/optimize.scm" . 932891))
     (push.iloc.1 . 0)
     (push.const)
     (apply.iloc+ (0 . 0) "../stdlib/core/optimize.scm" . 924686))
   (push)
   (push.iloc.0 . 0)
   (call (apply.gloc.of |core.optimize'annotate-hook| "../stdlib/core/optimize.scm" . 922636))
   (apply))
 (set.gloc.of |flatten-expression`2855*|)
 (close
   (1 0)
   (push.const . #t)
   (push.const . "  variable: ~s~%")
   (push.car.iloc (0 . 0) "../stdlib/core/optimize.scm" . 256049)
   (subr.gloc.of |.format| 3 "../stdlib/core/optimize.scm" . 256019)
   (push.const . #t)
   (push.const . "  expr: ~s~%")
   (push.cdr.iloc (0 . 0) "../stdlib/core/optimize.scm" . 257069)
   (subr.gloc.of |.format| 3 "../stdlib/core/optimize.scm" . 257043)
   (push.const . #t)
   (push.const . "  stat: ~s~%---~%")
   (push.gloc.of |core.optimize'ht-lambda-node|)
   (push.cdr.iloc (0 . 0) "../stdlib/core/optimize.scm" . 258133)
   (push.const . #f)
   (push.subr.gloc.of |.core-hashtable-ref| 3 "../stdlib/core/optimize.scm" . 258098)
   (ret.subr.gloc.of |.format| "../stdlib/core/optimize.scm" . 258067))
 (set.gloc.of |.L934|)
 (close
   (1 0)
   (push.gloc.of |core.optimize'ht-variable-binding|)
   (push.iloc.0 . 0)
   (subr.gloc.of |.core-hashtable-contains?| 2 "../stdlib/core/optimize.scm" . 1102879)
   (if.true.ret)
   (call
     (push.iloc.0 . 0)
     (subr.gloc.of |.top-level-bound?| 1 "../stdlib/core/optimize.scm" . 1102879)
     (if.false.ret)
     (push.iloc.0 . 0)
     (push.subr.gloc.of |.top-level-value| 1 "../stdlib/core/optimize.scm" . 1102879)
     (gloc.of |core.optimize'denote-call/cc|)
     (ret.eq? "../stdlib/core/optimize.scm" . 1102879))
   (push)
   (ret.subr.gloc.of |.not| "../stdlib/core/optimize.scm" . 1102879))
 (set.gloc.of |.L938|)
 (close
   (1 0)
   (push.gloc.of |core.optimize'ht-variable-pinned|)
   (push.iloc.0 . 0)
   (push.const . #t)
   (ret.subr.gloc.of |.core-hashtable-set!| "../stdlib/core/optimize.scm" . 1102879))
 (set.gloc.of |.L929|)
 (close
   (2 0)
   (push.gloc.of |core.optimize'ht-lambda-node|)
   (push.cdr.iloc (0 . 1) "../stdlib/core/optimize.scm" . 500802)
   (push.const . #f)
   (push.subr.gloc.of |.core-hashtable-ref| 3 "../stdlib/core/optimize.scm" . 500767)
   (extend . 1)
   (iloc.0 . 0)
   (if.true
     (iloc.0 . 0)
     (if.null?
       (push.gloc.of |core.optimize'ht-lambda-node|)
       (push.cdr.iloc (1 . 1) "../stdlib/core/optimize.scm" . 503887)
       (push.const . functable)
       (subr.gloc.of |.core-hashtable-set!| 3 "../stdlib/core/optimize.scm" . 503851)
       (ret.const . #t))
     (push.iloc.0 . 0)
     (push.subr.gloc.of |.pair?| 1 "../stdlib/core/optimize.scm" . 505904)
     (subr.gloc.of |.not| 1 "../stdlib/core/optimize.scm" . 505899)
     (if.true (ret.iloc 1 . 0))
     (call
       (cdr.iloc (0 . 0) "../stdlib/core/optimize.scm" . 506935)
       (if.not.null?.ret.const . #f)
       (push.car.iloc (1 . 1) "../stdlib/core/optimize.scm" . 506952)
       (car.iloc (0 . 0) "../stdlib/core/optimize.scm" . 506960)
       (ret.eq? "../stdlib/core/optimize.scm" . 506947))
     (if.true
       (push.gloc.of |core.optimize'ht-lambda-node|)
       (push.cdr.iloc (1 . 1) "../stdlib/core/optimize.scm" . 507983)
       (push.const . functable)
       (subr.gloc.of |.core-hashtable-set!| 3 "../stdlib/core/optimize.scm" . 507947)
       (ret.const . #t))
     (call
       (push.close
         (1 0)
         (push.car.iloc (2 . 1) "../stdlib/core/optimize.scm" . 510026)
         (iloc.0 . 0)
         (if.eq?.ret.const . #t)
         (push.iloc.0 . 0)
         (apply.gloc.of
           |core.optimize'variable-functional?|
           "../stdlib/core/optimize.scm"
           .
           510038))
       (push.iloc.0 . 0)
       (apply.gloc.of |core.lists'for-all| "../stdlib/core/optimize.scm" . 509995))
     (if.true
       (push.gloc.of |core.optimize'ht-lambda-node|)
       (push.cdr.iloc (1 . 1) "../stdlib/core/optimize.scm" . 511055)
       (push.const . functable)
       (subr.gloc.of |.core-hashtable-set!| 3 "../stdlib/core/optimize.scm" . 511019)
       (ret.const . #t))
     (call
       (push.close
         (1 0)
         (push.car.iloc (2 . 1) "../stdlib/core/optimize.scm" . 513098)
         (iloc.0 . 0)
         (if.eq?.ret.const . #t)
         (push.iloc.0 . 0)
         (apply.gloc.of |core.optimize'variable-top-level?| "../stdlib/core/optimize.scm" . 513110))
       (push.iloc.0 . 0)
       (apply.gloc.of |core.lists'for-all| "../stdlib/core/optimize.scm" . 513067))
     (if.true
       (push.gloc.of |core.optimize'ht-lambda-node|)
       (push.cdr.iloc (1 . 1) "../stdlib/core/optimize.scm" . 514127)
       (push.const . liftable)
       (subr.gloc.of |.core-hashtable-set!| 3 "../stdlib/core/optimize.scm" . 514091)
       (ret.const . #t))
     (ret.iloc 1 . 0))
   (ret.iloc 1 . 0))
 (set.gloc.of |.L927|)
 (close
   (1 0)
   (push.gloc.of |core.optimize'ht-lambda-node|)
   (push.cadr.iloc (0 . 0) "../stdlib/core/optimize.scm" . 1070194)
   (subr.gloc.of |.core-hashtable-contains?| 2 "../stdlib/core/optimize.scm" . 1070153)
   (if.false.ret)
   (push.iloc.0 . 0)
   (ret.subr.gloc.of |.car| "../stdlib/core/optimize.scm" . 1070204))
 (set.gloc.of |.L968|)
 (close
   (1 0)
   (push.gloc.of |core.optimize'ht-variable-stackables|)
   (push.car.iloc (0 . 0) "../stdlib/core/optimize.scm" . 1138782)
   (ret.subr.gloc.of |.core-hashtable-contains?| "../stdlib/core/optimize.scm" . 1138733))
 (set.gloc.of |.L917|)
 (close
   (1 0)
   (push.gloc.of |core.optimize'ht-variable-binding|)
   (push.iloc.0 . 0)
   (subr.gloc.of |.core-hashtable-contains?| 2 "../stdlib/core/optimize.scm" . 1102879)
   (if.true.ret)
   (call
     (push.iloc.0 . 0)
     (subr.gloc.of |.top-level-bound?| 1 "../stdlib/core/optimize.scm" . 1102879)
     (if.false.ret)
     (push.iloc.0 . 0)
     (push.subr.gloc.of |.top-level-value| 1 "../stdlib/core/optimize.scm" . 1102879)
     (gloc.of |core.optimize'denote-call/cc|)
     (ret.eq? "../stdlib/core/optimize.scm" . 1102879))
   (push)
   (ret.subr.gloc.of |.not| "../stdlib/core/optimize.scm" . 1102879))
 (set.gloc.of |.L978|)
 (close
   (1 0)
   (push.iloc.0 . 0)
   (apply.gloc.of |core.optimize'variable-top-level?| "../stdlib/core/optimize.scm" . 531520))
 (set.gloc.of |.L941|)
 (close
   (1 0 . make-depend-list)
   (call
     (push.iloc.0 . 0)
     (apply.gloc.of |core.optimize'get-free-variables| "../stdlib/core/optimize.scm" . 549910))
   (push)
   (extend . 1)
   (iloc.0 . 0)
   (if.false.ret)
   (push.iloc.0 . 0)
   (subr.gloc.of |.list?| 1 "../stdlib/core/optimize.scm" . 551968)
   (if.false.ret)
   (call
     (push.gloc.of |core.optimize'variable-top-level?|)
     (push.iloc.0 . 0)
     (apply.gloc.of |core.lists'remp| "../stdlib/core/optimize.scm" . 553004))
   (push)
   (extend . 1)
   (iloc.0 . 0)
   (if.not.pair?.ret.const . #f)
   (push.iloc 2 . 0)
   (iloc.0 . 0)
   (ret.cons "../stdlib/core/optimize.scm" . 555047))
 (set.gloc.of |make-depend-list`2605*|)
 (close
   (1 0)
   (car.iloc (0 . 0) "../stdlib/core/optimize.scm" . 1208392)
   (if.symbol?
     (push.gloc.of |core.optimize'ht-variable-refc|)
     (push.car.iloc (0 . 0) "../stdlib/core/optimize.scm" . 1208392)
     (subr.gloc.of |.core-hashtable-contains?| 2 "../stdlib/core/optimize.scm" . 1222728)
     (if.false.ret)
     (push.const . define)
     (push.car.iloc (0 . 0) "../stdlib/core/optimize.scm" . 1208392)
     (push.cdr.iloc (0 . 0) "../stdlib/core/optimize.scm" . 1208406)
     (ret.subr.gloc.of |.list| "../stdlib/core/optimize.scm" . 1222723))
   (push.const . define)
   (push.cdr.iloc (0 . 0) "../stdlib/core/optimize.scm" . 1208406)
   (push.car.iloc (0 . 0) "../stdlib/core/optimize.scm" . 1208392)
   (ret.subr.gloc.of |.list| "../stdlib/core/optimize.scm" . 1221695))
 (set.gloc.of |.L967|)
 (call
   (push.const core parameters)
   (apply.gloc.of |.require-scheme-library| "../stdlib/core/optimize.scm" . 1102879))
 (call
   (push.const core destructuring)
   (apply.gloc.of |.require-scheme-library| "../stdlib/core/optimize.scm" . 1102879))
 (call
   (push.const core lists)
   (apply.gloc.of |.require-scheme-library| "../stdlib/core/optimize.scm" . 1102879))
 (call
   (push.const core primitives)
   (apply.gloc.of |.require-scheme-library| "../stdlib/core/optimize.scm" . 1102879))
 (const . 5)
 (set.gloc.of |core.optimize'max-transform-pass|)
 (const . 200)
 (set.gloc.of |core.optimize'limit-arguments|)
 (call
   (subr.gloc.of |.make-core-hashtable| 0)
   (push)
   (extend . 1)
   (call
     (push.close
       (1 0)
       (push.iloc.1 . 0)
       (push.iloc.0 . 0)
       (push.subr.gloc.of |.top-level-value| 1 "../stdlib/core/optimize.scm" . 41013)
       (push.const . #t)
       (ret.subr.gloc.of |.core-hashtable-set!| "../stdlib/core/optimize.scm" . 40989))
     (push.const
       |.eq?|
       |.eqv?|
       |.equal?|
       |.procedure?|
       |.number?|
       |.complex?|
       |.real?|
       |.rational?|
       |.integer?|
       |.real-valued?|
       |.rational-valued?|
       |.integer-valued?|
       |.exact?|
       |.inexact?|
       |.=|
       |.<|
       |.>|
       |.<=|
       |.>=|
       |.zero?|
       |.positive?|
       |.negative?|
       |.odd?|
       |.even?|
       |.finite?|
       |.infinite?|
       |.nan?|
       |.not|
       |.boolean?|
       |.boolean=?|
       |.pair?|
       |.null?|
       |.list?|
       |.symbol?|
       |.symbol=?|
       |.char?|
       |.char=?|
       |.char<?|
       |.char>?|
       |.char<=?|
       |.char>=?|
       |.string?|
       |.string=?|
       |.string<?|
       |.string>?|
       |.string<=?|
       |.string>=?|
       |.vector?|
       |.flonum?|
       |.fl=?|
       |.fl<?|
       |.fl>?|
       |.fl<=?|
       |.fl>=?|
       |.flinteger?|
       |.flzero?|
       |.flpositive?|
       |.flnegative?|
       |.flodd?|
       |.fleven?|
       |.flfinite?|
       |.flinfinite?|
       |.flnan?|
       |.fixnum?|
       |.fx=?|
       |.fx<?|
       |.fx>?|
       |.fx<=?|
       |.fx>=?|
       |.fxzero?|
       |.fxpositive?|
       |.fxnegative?|
       |.fxodd?|
       |.fxeven?|
       |.identifier?|
       |.bound-identifier=?|
       |.free-identifier=?|
       |.record?|
       |.record-type-generative?|
       |.record-type-sealed?|
       |.record-type-opaque?|
       |.record-field-mutable?|
       |.record-type-descriptor?|
       |.record-type?|
       |.condition?|
       |.message-condition?|
       |.warning?|
       |.serious-condition?|
       |.error?|
       |.violation?|
       |.assertion-violation?|
       |.irritants-condition?|
       |.who-condition?|
       |.non-continuable-violation?|
       |.implementation-restriction-violation?|
       |.lexical-violation?|
       |.syntax-violation?|
       |.undefined-violation?|
       |.char-whitespace?|
       |.eof-object?|
       |.input-port?|
       |.output-port?|
       |.port?|
       |.nonblock-byte-ready?|
       |.port-has-port-position?|
       |.port-has-set-port-position!?|
       |.port-eof?|
       |.i/o-error?|
       |.i/o-read-error?|
       |.i/o-write-error?|
       |.i/o-invalid-position-error?|
       |.i/o-filename-error?|
       |.i/o-file-protection-error?|
       |.i/o-file-is-read-only-error?|
       |.i/o-file-already-exists-error?|
       |.i/o-file-does-not-exist-error?|
       |.i/o-port-error?|
       |.i/o-decoding-error?|
       |.i/o-encoding-error?|
       |.file-exists?|
       |.bytevector?|
       |.bytevector=?|
       |.unspecified?|
       |.tuple?|
       |.weak-mapping?|
       |.core-hashtable?|
       |.weak-core-hashtable?|
       |.core-hashtable-contains?|
       |.core-hashtable-mutable?|
       |.top-level-bound?|
       |.subr?|
       |.inexact|
       |.exact|
       |.max|
       |.min|
       |.+|
       |.*|
       |.-|
       |./|
       |.abs|
       |.div-and-mod|
       |.div|
       |.mod|
       |.div0-and-mod0|
       |.div0|
       |.mod0|
       |.gcd|
       |.lcm|
       |.numerator|
       |.denominator|
       |.floor|
       |.ceiling|
       |.truncate|
       |.round|
       |.rationalize|
       |.exp|
       |.log|
       |.sin|
       |.cos|
       |.tan|
       |.asin|
       |.acos|
       |.atan|
       |.sqrt|
       |.exact-integer-sqrt|
       |.expt|
       |.make-rectangular|
       |.make-polar|
       |.real-part|
       |.imag-part|
       |.magnitude|
       |.angle|
       |.number->string|
       |.string->number|
       |.cons|
       |.car|
       |.cdr|
       |.caar|
       |.cadr|
       |.cdar|
       |.cddr|
       |.caaar|
       |.caadr|
       |.cadar|
       |.caddr|
       |.cdaar|
       |.cdadr|
       |.cddar|
       |.cdddr|
       |.caaaar|
       |.caaadr|
       |.caadar|
       |.caaddr|
       |.cadaar|
       |.cadadr|
       |.caddar|
       |.cadddr|
       |.cdaaar|
       |.cdaadr|
       |.cdadar|
       |.cdaddr|
       |.cddaar|
       |.cddadr|
       |.cdddar|
       |.cddddr|
       |.list|
       |.length|
       |.append|
       |.reverse|
       |.list-tail|
       |.list-ref|
       |.symbol->string|
       |.string->symbol|
       |.char->integer|
       |.integer->char|
       |.make-string|
       |.string|
       |.string-length|
       |.string-ref|
       |.substring|
       |.string-append|
       |.string->list|
       |.list->string|
       |.string-copy|
       |.make-vector|
       |.vector|
       |.vector-length|
       |.vector-ref|
       |.vector->list|
       |.list->vector|
       |.values|
       |.cons*|
       |.memq|
       |.memv|
       |.member|
       |.assq|
       |.assv|
       |.assoc|
       |.list-head|
       |.list-copy|
       |.circular-list?|
       |.cyclic-object?|
       |.vector-copy|
       |.datum->syntax|
       |.syntax->datum|
       |.syntax/i0n|
       |.syntax/i1n|
       |.syntax/i2n|
       |.syntax/i3n|
       |.syntax/c0n|
       |.syntax/c1n|
       |.syntax/c2n|
       |.syntax/c3n|
       |.syntax/i0e|
       |.syntax/i1e|
       |.syntax/i2e|
       |.syntax/i3e|
       |.syntax/c0e|
       |.syntax/c1e|
       |.syntax/c2e|
       |.syntax/c3e|
       |.string-contains|
       |.symbol-contains|
       |.top-level-value|
       |.unspecified|
       |.tuple|
       |.make-tuple|
       |.tuple-ref|
       |.tuple-length|
       |.tuple-index|
       |.tuple->list|
       |.make-core-hashtable|
       |.make-weak-core-hashtable|
       |.core-hashtable-ref|
       |.core-hashtable->alist|
       |.core-hashtable-size|
       |.core-hashtable-copy|
       |.core-hashtable-equivalence-function|
       |.core-hashtable-hash-function|
       |.current-library-infix|
       |.current-library-suffix|
       |.current-primitive-prefix|
       |.current-rename-delimiter|
       |.native-endianness|
       |.bytevector?|
       |.make-bytevector|
       |.bytevector-length|
       |.bytevector=?|
       |.bytevector-copy|
       |.bytevector->u8-list|
       |.u8-list->bytevector|
       |.bytevector-u8-ref|
       |.bytevector-s8-ref|
       |.bytevector-u16-ref|
       |.bytevector-s16-ref|
       |.bytevector-u16-native-ref|
       |.bytevector-s16-native-ref|
       |.bytevector-u32-ref|
       |.bytevector-s32-ref|
       |.bytevector-u32-native-ref|
       |.bytevector-s32-native-ref|
       |.bytevector-u64-ref|
       |.bytevector-s64-ref|
       |.bytevector-u64-native-ref|
       |.bytevector-s64-native-ref|
       |.bytevector-ieee-single-ref|
       |.bytevector-ieee-single-native-ref|
       |.bytevector-ieee-double-ref|
       |.bytevector-ieee-double-native-ref|
       |.bytevector-c-short-ref|
       |.bytevector-c-int-ref|
       |.bytevector-c-long-ref|
       |.bytevector-c-long-long-ref|
       |.bytevector-c-void*-ref|
       |.bytevector-c-unsigned-short-ref|
       |.bytevector-c-unsigned-int-ref|
       |.bytevector-c-unsigned-long-ref|
       |.bytevector-c-unsigned-long-long-ref|
       |.bytevector-c-int8-ref|
       |.bytevector-c-int16-ref|
       |.bytevector-c-int32-ref|
       |.bytevector-c-int64-ref|
       |.bytevector-c-uint8-ref|
       |.bytevector-c-uint16-ref|
       |.bytevector-c-uint32-ref|
       |.bytevector-c-uint64-ref|
       |.bytevector-c-float-ref|
       |.bytevector-c-double-ref|
       |.bytevector-c-strlen|
       |.string->utf8/nul|)
     (apply.gloc.of |.for-each| "../stdlib/core/optimize.scm" . 40967))
   (push.iloc.0 . 0)
   (ret.subr.gloc.of |.core-hashtable-copy| "../stdlib/core/optimize.scm" . 191495))
 (set.gloc.of |core.optimize'ht-primitive-functions|)
 (call
   (subr.gloc.of |.make-core-hashtable| 0)
   (push)
   (extend . 1)
   (call
     (push.close
       (1 0)
       (push.iloc.1 . 0)
       (push.iloc.0 . 0)
       (push.subr.gloc.of |.top-level-value| 1 "../stdlib/core/optimize.scm" . 195637)
       (push.const . #t)
       (ret.subr.gloc.of |.core-hashtable-set!| "../stdlib/core/optimize.scm" . 195613))
     (push.const |.car| |.cdr| |.cadr| |.cddr|)
     (apply.gloc.of |.for-each| "../stdlib/core/optimize.scm" . 195591))
   (push.iloc.0 . 0)
   (ret.subr.gloc.of |.core-hashtable-copy| "../stdlib/core/optimize.scm" . 197639))
 (set.gloc.of |core.optimize'ht-inlinable-primitive-functions|)
 (call
   (subr.gloc.of |.make-core-hashtable| 0)
   (push)
   (extend . 1)
   (call
     (push.close
       (1 0)
       (push.iloc.1 . 0)
       (push.iloc.0 . 0)
       (push.subr.gloc.of |.top-level-value| 1 "../stdlib/core/optimize.scm" . 202805)
       (push.const . #t)
       (ret.subr.gloc.of |.core-hashtable-set!| "../stdlib/core/optimize.scm" . 202781))
     (push.const |.map| |.for-each|)
     (apply.gloc.of |.for-each| "../stdlib/core/optimize.scm" . 202759))
   (call
     (push.close
       (1 0)
       (push.iloc.1 . 0)
       (push.iloc.0 . 0)
       (push.const . #t)
       (ret.subr.gloc.of |.core-hashtable-set!| "../stdlib/core/optimize.scm" . 204829))
     (push.gloc.of |core.lists'find|)
     (push.gloc.of |core.lists'for-all|)
     (push.gloc.of |core.lists'exists|)
     (push.gloc.of |core.lists'filter|)
     (push.gloc.of |core.lists'partition|)
     (push.gloc.of |core.lists'fold-left|)
     (push.gloc.of |core.lists'fold-right|)
     (push.gloc.of |core.lists'assp|)
     (push.gloc.of |core.lists'memp|)
     (push.gloc.of |core.lists'remp|)
     (push.subr.gloc.of |.list| 10 "../stdlib/core/optimize.scm" . 205841)
     (apply.gloc.of |.for-each| "../stdlib/core/optimize.scm" . 204807))
   (push.iloc.0 . 0)
   (ret.subr.gloc.of |.core-hashtable-copy| "../stdlib/core/optimize.scm" . 206855))
 (set.gloc.of |core.optimize'ht-special-list-functions|)
 (subr.gloc.of |.make-core-hashtable| 0 "../stdlib/core/optimize.scm" . 208924)
 (set.gloc.of |core.optimize'ht-variable-refc|)
 (subr.gloc.of |.make-core-hashtable| 0 "../stdlib/core/optimize.scm" . 209951)
 (set.gloc.of |core.optimize'ht-variable-binding|)
 (subr.gloc.of |.make-core-hashtable| 0 "../stdlib/core/optimize.scm" . 210974)
 (set.gloc.of |core.optimize'ht-variable-letrec|)
 (subr.gloc.of |.make-core-hashtable| 0 "../stdlib/core/optimize.scm" . 211999)
 (set.gloc.of |core.optimize'ht-variable-defined|)
 (subr.gloc.of |.make-core-hashtable| 0 "../stdlib/core/optimize.scm" . 213023)
 (set.gloc.of |core.optimize'ht-variable-formals|)
 (subr.gloc.of |.make-core-hashtable| 0 "../stdlib/core/optimize.scm" . 214048)
 (set.gloc.of |core.optimize'ht-variable-assigned|)
 (subr.gloc.of |.make-core-hashtable| 0 "../stdlib/core/optimize.scm" . 215077)
 (set.gloc.of |core.optimize'ht-variable-operands-refc|)
 (subr.gloc.of |.make-core-hashtable| 0 "../stdlib/core/optimize.scm" . 216097)
 (set.gloc.of |core.optimize'ht-variable-callsites|)
 (subr.gloc.of |.make-core-hashtable| 0 "../stdlib/core/optimize.scm" . 217118)
 (set.gloc.of |core.optimize'ht-variable-pinned|)
 (subr.gloc.of |.make-core-hashtable| 0 "../stdlib/core/optimize.scm" . 218144)
 (set.gloc.of |core.optimize'ht-variable-privates|)
 (subr.gloc.of |.make-core-hashtable| 0 "../stdlib/core/optimize.scm" . 219170)
 (set.gloc.of |core.optimize'ht-variable-stackables|)
 (subr.gloc.of |.make-core-hashtable| 0 "../stdlib/core/optimize.scm" . 220186)
 (set.gloc.of |core.optimize'ht-lambda-node|)
 (subr.gloc.of |.make-core-hashtable| 0 "../stdlib/core/optimize.scm" . 221218)
 (set.gloc.of |core.optimize'ht-binding-body-common|)
 (subr.gloc.of |.make-core-hashtable| 0 "../stdlib/core/optimize.scm" . 222242)
 (set.gloc.of |core.optimize'ht-binding-body-mutual|)
 (close
   (0 0 . |core.optimize'clear-context|)
   (push.gloc.of |core.optimize'ht-variable-refc|)
   (subr.gloc.of |.core-hashtable-clear!| 1 "../stdlib/core/optimize.scm" . 226311)
   (push.gloc.of |core.optimize'ht-variable-binding|)
   (subr.gloc.of |.core-hashtable-clear!| 1 "../stdlib/core/optimize.scm" . 227335)
   (push.gloc.of |core.optimize'ht-variable-letrec|)
   (subr.gloc.of |.core-hashtable-clear!| 1 "../stdlib/core/optimize.scm" . 228359)
   (push.gloc.of |core.optimize'ht-variable-defined|)
   (subr.gloc.of |.core-hashtable-clear!| 1 "../stdlib/core/optimize.scm" . 229383)
   (push.gloc.of |core.optimize'ht-variable-formals|)
   (subr.gloc.of |.core-hashtable-clear!| 1 "../stdlib/core/optimize.scm" . 230407)
   (push.gloc.of |core.optimize'ht-variable-assigned|)
   (subr.gloc.of |.core-hashtable-clear!| 1 "../stdlib/core/optimize.scm" . 231431)
   (push.gloc.of |core.optimize'ht-variable-operands-refc|)
   (subr.gloc.of |.core-hashtable-clear!| 1 "../stdlib/core/optimize.scm" . 232455)
   (push.gloc.of |core.optimize'ht-variable-callsites|)
   (subr.gloc.of |.core-hashtable-clear!| 1 "../stdlib/core/optimize.scm" . 233479)
   (push.gloc.of |core.optimize'ht-variable-pinned|)
   (subr.gloc.of |.core-hashtable-clear!| 1 "../stdlib/core/optimize.scm" . 234503)
   (push.gloc.of |core.optimize'ht-variable-privates|)
   (subr.gloc.of |.core-hashtable-clear!| 1 "../stdlib/core/optimize.scm" . 235527)
   (push.gloc.of |core.optimize'ht-variable-stackables|)
   (subr.gloc.of |.core-hashtable-clear!| 1 "../stdlib/core/optimize.scm" . 236551)
   (push.gloc.of |core.optimize'ht-lambda-node|)
   (subr.gloc.of |.core-hashtable-clear!| 1 "../stdlib/core/optimize.scm" . 237575)
   (push.gloc.of |core.optimize'ht-binding-body-common|)
   (subr.gloc.of |.core-hashtable-clear!| 1 "../stdlib/core/optimize.scm" . 238599)
   (push.gloc.of |core.optimize'ht-binding-body-mutual|)
   (ret.subr.gloc.of |.core-hashtable-clear!| "../stdlib/core/optimize.scm" . 239623))
 (set.gloc.of |core.optimize'clear-context|)
 (push.const . |.call-with-current-continuation|)
 (subr.gloc.of |.top-level-value| 1 "../stdlib/core/optimize.scm" . 241690)
 (set.gloc.of |core.optimize'denote-call/cc|)
 (close
   (0 0 . |core.optimize'dump-lambda-node|)
   (push.const . #t)
   (push.const . ">>> dump ht-lambda-node~%")
   (subr.gloc.of |.format| 2 "../stdlib/core/optimize.scm" . 245767)
   (push.gloc.of |.L955|)
   (push.gloc.of |core.optimize'ht-lambda-node|)
   (push.subr.gloc.of |.core-hashtable->alist| 1 "../stdlib/core/optimize.scm" . 249873)
   (apply.gloc.of |.for-each| "../stdlib/core/optimize.scm" . 246791))
 (set.gloc.of |core.optimize'dump-lambda-node|)
 (close
   (0 0 . |core.optimize'dump-variable-binding|)
   (push.const . #t)
   (push.const . ">>> dump ht-variable-binding~%")
   (subr.gloc.of |.format| 2 "../stdlib/core/optimize.scm" . 253959)
   (push.gloc.of |.L934|)
   (push.gloc.of |core.optimize'ht-variable-binding|)
   (push.subr.gloc.of |.core-hashtable->alist| 1 "../stdlib/core/optimize.scm" . 259089)
   (apply.gloc.of |.for-each| "../stdlib/core/optimize.scm" . 254983))
 (set.gloc.of |core.optimize'dump-variable-binding|)
 (close
   (1 0 . |core.optimize'get-free-variables|)
   (push.gloc.of |core.optimize'ht-variable-binding|)
   (push.iloc.0 . 0)
   (push.const . #f)
   (push.subr.gloc.of |.core-hashtable-ref| 3 "../stdlib/core/optimize.scm" . 263182)
   (extend . 1)
   (iloc.0 . 0)
   (if.false.ret)
   (push.gloc.of |core.optimize'ht-lambda-node|)
   (push.iloc.0 . 0)
   (push.const . #f)
   (ret.subr.gloc.of |.core-hashtable-ref| "../stdlib/core/optimize.scm" . 264221))
 (set.gloc.of |core.optimize'get-free-variables|)
 (close
   (1 0 . |core.optimize'primitive-function?|)
   (push.iloc.0 . 0)
   (subr.gloc.of |.top-level-bound?| 1 "../stdlib/core/optimize.scm" . 269324)
   (if.false.ret)
   (push.gloc.of |core.optimize'ht-primitive-functions|)
   (push.iloc.0 . 0)
   (push.subr.gloc.of |.top-level-value| 1 "../stdlib/core/optimize.scm" . 270397)
   (ret.subr.gloc.of |.core-hashtable-contains?| "../stdlib/core/optimize.scm" . 270348))
 (set.gloc.of |core.optimize'primitive-function?|)
 (close
   (1 0 . |core.optimize'special-list-function?|)
   (push.iloc.0 . 0)
   (subr.gloc.of |.top-level-bound?| 1 "../stdlib/core/optimize.scm" . 274444)
   (if.false.ret)
   (push.gloc.of |core.optimize'ht-special-list-functions|)
   (push.iloc.0 . 0)
   (push.subr.gloc.of |.top-level-value| 1 "../stdlib/core/optimize.scm" . 275520)
   (ret.subr.gloc.of |.core-hashtable-contains?| "../stdlib/core/optimize.scm" . 275468))
 (set.gloc.of |core.optimize'special-list-function?|)
 (close
   (1 0 . |core.optimize'inlinable-primitive-function?|)
   (iloc.0 . 0)
   (if.not.symbol?.ret.const . #f)
   (push.iloc.0 . 0)
   (subr.gloc.of |.top-level-bound?| 1 "../stdlib/core/optimize.scm" . 280588)
   (if.false.ret)
   (push.gloc.of |core.optimize'ht-inlinable-primitive-functions|)
   (push.iloc.0 . 0)
   (push.subr.gloc.of |.top-level-value| 1 "../stdlib/core/optimize.scm" . 281671)
   (ret.subr.gloc.of |.core-hashtable-contains?| "../stdlib/core/optimize.scm" . 281612))
 (set.gloc.of |core.optimize'inlinable-primitive-function?|)
 (close
   (1 0 . |core.optimize'variable-top-level?|)
   (push.gloc.of |core.optimize'ht-variable-defined|)
   (push.iloc.0 . 0)
   (subr.gloc.of |.core-hashtable-contains?| 2 "../stdlib/core/optimize.scm" . 285707)
   (if.true.ret)
   (call
     (push.gloc.of |core.optimize'ht-variable-binding|)
     (push.iloc.0 . 0)
     (subr.gloc.of |.core-hashtable-contains?| 2 "../stdlib/core/optimize.scm" . 286741)
     (if.true.ret.const . #f)
     (push.gloc.of |core.optimize'ht-variable-formals|)
     (push.iloc.0 . 0)
     (push.subr.gloc.of |.core-hashtable-contains?| 2 "../stdlib/core/optimize.scm" . 287765)
     (ret.subr.gloc.of |.not| "../stdlib/core/optimize.scm" . 287760))
   (if.true.ret)
   (call
     (push.iloc.0 . 0)
     (apply.gloc.of |core.optimize'get-free-variables| "../stdlib/core/optimize.scm" . 288788))
   (push)
   (ret.subr.gloc.of |.symbol?| "../stdlib/core/optimize.scm" . 288779))
 (set.gloc.of |core.optimize'variable-top-level?|)
 (close
   (1 0 . |core.optimize'variable-private?|)
   (push.iloc.0 . 0)
   (subr.gloc.of |.uninterned-symbol?| 1 "../stdlib/core/optimize.scm" . 292875)
   (if.true.ret)
   (push.iloc.0 . 0)
   (subr.gloc.of |.current-library-suffix| 0)
   (push)
   (subr.gloc.of |.symbol-contains| 2 "../stdlib/core/optimize.scm" . 293904)
   (if.false.ret)
   (ret.const . #t))
 (set.gloc.of |core.optimize'variable-private?|)
 (close
   (1 0 . |core.optimize'variable-functional?|)
   (call
     (push.gloc.of |core.optimize'ht-variable-privates|)
     (push.iloc.0 . 0)
     (subr.gloc.of |.core-hashtable-contains?| 2 "../stdlib/core/optimize.scm" . 304144)
     (if.true.ret)
     (push.gloc.of |core.optimize'ht-variable-defined|)
     (push.iloc.0 . 0)
     (push.subr.gloc.of |.core-hashtable-contains?| 2 "../stdlib/core/optimize.scm" . 305173)
     (ret.subr.gloc.of |.not| "../stdlib/core/optimize.scm" . 305168))
   (if.false.ret)
   (push.gloc.of |core.optimize'ht-variable-binding|)
   (push.iloc.0 . 0)
   (push.const . #f)
   (push.subr.gloc.of |.core-hashtable-ref| 3 "../stdlib/core/optimize.scm" . 306195)
   (extend . 1)
   (iloc.0 . 0)
   (if.false.ret)
   (push.gloc.of |core.optimize'ht-lambda-node|)
   (push.iloc.0 . 0)
   (push.const . #f)
   (push.subr.gloc.of |.core-hashtable-ref| 3 "../stdlib/core/optimize.scm" . 307239)
   (const . functable)
   (ret.eq? "../stdlib/core/optimize.scm" . 307234))
 (set.gloc.of |core.optimize'variable-functional?|)
 (close
   (1 0 . |core.optimize'variable-iloc?|)
   (push.gloc.of |core.optimize'ht-variable-formals|)
   (push.iloc.0 . 0)
   (subr.gloc.of |.core-hashtable-contains?| 2 "../stdlib/core/optimize.scm" . 312334)
   (if.true.ret)
   (push.gloc.of |core.optimize'ht-variable-binding|)
   (push.iloc.0 . 0)
   (push.const . #f)
   (push.subr.gloc.of |.core-hashtable-ref| 3 "../stdlib/core/optimize.scm" . 313358)
   (extend . 1)
   (iloc.0 . 0)
   (if.false.ret)
   (push.iloc.0 . 0)
   (ret.subr.gloc.of |.symbol?| "../stdlib/core/optimize.scm" . 313358))
 (set.gloc.of |core.optimize'variable-iloc?|)
 (close
   (1 0 . |core.optimize'function?|)
   (iloc.0 . 0)
   (if.not.pair?.ret.const . #t)
   (push.car.iloc (0 . 0) "../stdlib/core/optimize.scm" . 319511)
   (extend . 1)
   (push.iloc.0 . 0)
   (push.const quote lambda)
   (subr.gloc.of |.memq| 2 "../stdlib/core/optimize.scm" . 320529)
   (if.true.ret)
   (iloc.0 . 0)
   (if.not.symbol?.ret.const . #f)
   (call
     (push.gloc.of |core.optimize'ht-variable-privates|)
     (push.iloc.0 . 0)
     (subr.gloc.of |.core-hashtable-contains?| 2 "../stdlib/core/optimize.scm" . 322586)
     (if.true.ret)
     (push.gloc.of |core.optimize'ht-variable-defined|)
     (push.iloc.0 . 0)
     (push.subr.gloc.of |.core-hashtable-contains?| 2 "../stdlib/core/optimize.scm" . 323615)
     (ret.subr.gloc.of |.not| "../stdlib/core/optimize.scm" . 323610))
   (if.false.ret)
   (call
     (call
       (push.iloc.0 . 0)
       (apply.gloc.of |core.optimize'primitive-function?| "../stdlib/core/optimize.scm" . 324634))
     (if.true.ret)
     (call
       (push.iloc.0 . 0)
       (apply.gloc.of |core.optimize'variable-functional?| "../stdlib/core/optimize.scm" . 325658))
     (if.true.ret)
     (push.iloc.0 . 0)
     (push.const begin if and or)
     (ret.subr.gloc.of |.memq| "../stdlib/core/optimize.scm" . 326682))
   (if.false.ret)
   (push.gloc.of |core.optimize'function?|)
   (push.cdr.iloc (1 . 0) "../stdlib/core/optimize.scm" . 327721)
   (apply.gloc.of |core.lists'for-all| "../stdlib/core/optimize.scm" . 327702))
 (set.gloc.of |core.optimize'function?|)
 (close
   (1 0 . |core.optimize'constant?|)
   (iloc.0 . 0)
   (if.pair?
     (call
       (iloc.0 . 0)
       (if.not.pair?.ret.const . #f)
       (cdr.iloc (0 . 0) (cdr |form`2469*|))
       (if.not.pair?.ret.const . #f)
       (cddr.iloc (0 . 0) (cddr |form`2469*|))
       (ret.null? (null? (cddr |form`2469*|))))
     (push)
     (extend . 1)
     (call
       (iloc.0 . 0)
       (if.false.ret)
       (push.car.iloc (1 . 0) (car |form`2469*|))
       (const . begin)
       (ret.eq? (eq? (car |form`2469*|) 'begin)))
     (if.true
       (push.cadr.iloc (1 . 0) (cadr |form`2469*|))
       (apply.gloc.of |core.optimize'constant?| (|core.optimize'constant?| (cadr |form`2469*|))))
     (call
       (iloc.0 . 0)
       (if.false.ret)
       (push.car.iloc (1 . 0) (car |form`2469*|))
       (const . quote)
       (ret.eq? (eq? (car |form`2469*|) 'quote)))
     (if.true.ret.const . #t)
     (push.gloc.of |core.optimize'constant?|)
     (push.iloc.1 . 0)
     (apply.gloc.of
       |core.lists'for-all|
       (|core.lists'for-all| |core.optimize'constant?| |form`2469*|)))
   (push.iloc.0 . 0)
   (subr.gloc.of |.number?| 1 "../stdlib/core/optimize.scm" . 338962)
   (if.true.ret)
   (push.iloc.0 . 0)
   (subr.gloc.of |.boolean?| 1 "../stdlib/core/optimize.scm" . 339986)
   (if.true.ret)
   (push.iloc.0 . 0)
   (subr.gloc.of |.char?| 1 "../stdlib/core/optimize.scm" . 341010)
   (if.true.ret)
   (push.iloc.0 . 0)
   (subr.gloc.of |.string?| 1 "../stdlib/core/optimize.scm" . 342034)
   (if.true.ret)
   (iloc.0 . 0)
   (if.not.symbol?.ret.const . #f)
   (call
     (call
       (push.iloc.0 . 0)
       (apply.gloc.of |core.optimize'primitive-function?| "../stdlib/core/optimize.scm" . 344091))
     (if.true.ret)
     (push.gloc.of |core.optimize'ht-variable-binding|)
     (push.iloc.0 . 0)
     (subr.gloc.of |.core-hashtable-contains?| 2 "../stdlib/core/optimize.scm" . 345120)
     (if.false.ret)
     (push.gloc.of |core.optimize'ht-variable-assigned|)
     (push.iloc.0 . 0)
     (subr.gloc.of |.core-hashtable-contains?| 2 "../stdlib/core/optimize.scm" . 346149)
     (if.true.ret.const . #f)
     (push.gloc.of |core.optimize'ht-variable-privates|)
     (push.iloc.0 . 0)
     (subr.gloc.of |.core-hashtable-contains?| 2 "../stdlib/core/optimize.scm" . 347172)
     (if.true.ret)
     (push.gloc.of |core.optimize'ht-variable-defined|)
     (push.iloc.0 . 0)
     (push.subr.gloc.of |.core-hashtable-contains?| 2 "../stdlib/core/optimize.scm" . 348201)
     (ret.subr.gloc.of |.not| "../stdlib/core/optimize.scm" . 348196))
   (if.false.ret)
   (push.gloc.of |core.optimize'ht-variable-operands-refc|)
   (push.iloc.0 . 0)
   (push.const . 0)
   (push.subr.gloc.of |.core-hashtable-ref| 3 "../stdlib/core/optimize.scm" . 349210)
   (push.const . 1)
   (ret.subr.gloc.of |.=| "../stdlib/core/optimize.scm" . 349207))
 (set.gloc.of |core.optimize'constant?|)
 (close
   (1 0 . |core.optimize'inlinable-expression?|)
   (iloc.0 . 0)
   (if.pair?
     (call
       (iloc.0 . 0)
       (if.not.pair?.ret.const . #f)
       (cdr.iloc (0 . 0) (cdr |form`2481*|))
       (if.not.pair?.ret.const . #f)
       (cddr.iloc (0 . 0) (cddr |form`2481*|))
       (ret.null? (null? (cddr |form`2481*|))))
     (push)
     (extend . 1)
     (call
       (iloc.0 . 0)
       (if.false.ret)
       (push.car.iloc (1 . 0) (car |form`2481*|))
       (const . begin)
       (ret.eq? (eq? (car |form`2481*|) 'begin)))
     (if.true
       (push.cadr.iloc (1 . 0) (cadr |form`2481*|))
       (apply.gloc.of
         |core.optimize'inlinable-expression?|
         (|core.optimize'inlinable-expression?| (cadr |form`2481*|))))
     (call
       (iloc.0 . 0)
       (if.false.ret)
       (push.car.iloc (1 . 0) (car |form`2481*|))
       (const . quote)
       (ret.eq? (eq? (car |form`2481*|) 'quote)))
     (if.true
       (cadr.iloc (1 . 0) (cadr |form`2481*|))
       (if.pair?.ret.const . #f)
       (cadr.iloc (1 . 0) (cadr |form`2481*|))
       (if.symbol?.ret.const . #t)
       (push.cadr.iloc (1 . 0) (cadr |form`2481*|))
       (subr.gloc.of |.fixnum?| 1 (|.fixnum?| (cadr |form`2481*|)))
       (if.true.ret)
       (push.cadr.iloc (1 . 0) (cadr |form`2481*|))
       (subr.gloc.of |.boolean?| 1 (|.boolean?| (cadr |form`2481*|)))
       (if.true.ret)
       (push.cadr.iloc (1 . 0) (cadr |form`2481*|))
       (subr.gloc.of |.char?| 1 (|.char?| (cadr |form`2481*|)))
       (if.true.ret)
       (push.cadr.iloc (1 . 0) (cadr |form`2481*|))
       (ret.subr.gloc.of |.string?| (|.string?| (cadr |form`2481*|))))
     (iloc.0 . 0)
     (if.false.ret)
     (push.cadr.iloc (1 . 0) (cadr |form`2481*|))
     (extend . 1)
     (call
       (push.car.iloc (2 . 0) (car |form`2481*|))
       (apply.gloc.of
         |core.optimize'inlinable-primitive-function?|
         (|core.optimize'inlinable-primitive-function?| (car |form`2481*|))))
     (if.false.ret)
     (push.iloc.0 . 0)
     (apply.gloc.of |core.optimize'variable-iloc?| (|core.optimize'variable-iloc?| |arg`2493*|)))
   (iloc.0 . 0)
   (if.symbol?.ret.const . #t)
   (push.iloc.0 . 0)
   (subr.gloc.of |.fixnum?| 1 "../stdlib/core/optimize.scm" . 365601)
   (if.true.ret)
   (push.iloc.0 . 0)
   (subr.gloc.of |.boolean?| 1 "../stdlib/core/optimize.scm" . 365616)
   (if.true.ret)
   (push.iloc.0 . 0)
   (subr.gloc.of |.char?| 1 "../stdlib/core/optimize.scm" . 365632)
   (if.true.ret)
   (push.iloc.0 . 0)
   (ret.subr.gloc.of |.string?| "../stdlib/core/optimize.scm" . 365645))
 (set.gloc.of |core.optimize'inlinable-expression?|)
 (close
   (1 0 . |core.optimize'formals->list|)
   (iloc.0 . 0)
   (if.pair?
     (push.car.iloc (0 . 0) "../stdlib/core/optimize.scm" . 370705)
     (call
       (push.cdr.iloc (0 . 0) "../stdlib/core/optimize.scm" . 370730)
       (apply.gloc.of |core.optimize'formals->list| "../stdlib/core/optimize.scm" . 370715))
     (ret.cons "../stdlib/core/optimize.scm" . 370699))
   (iloc.0 . 0)
   (if.null?.ret.const)
   (push.iloc.0 . 0)
   (ret.subr.gloc.of |.list| "../stdlib/core/optimize.scm" . 372759))
 (set.gloc.of |core.optimize'formals->list|)
 (close
   (1 0 . |core.optimize'flatten-begin|)
   (call
     (touch.gloc.of |loop`2504*|)
     (push.iloc.0 . 0)
     (push.const)
     (apply.gloc.of |loop`2504*| "../stdlib/core/optimize.scm" . 387082))
   (push)
   (push.iloc.0 . 0)
   (call (apply.gloc.of |core.optimize'annotate-hook| "../stdlib/core/optimize.scm" . 385032))
   (apply))
 (set.gloc.of |core.optimize'flatten-begin|)
 (close
   (3 0 . |core.optimize'collect-context-each|)
   (extend.enclose+
     (3 0 . loop)
     (iloc.0 . 0)
     (if.null? (ret.iloc 0 . 1))
     (push.car.iloc (0 . 0) "../stdlib/core/optimize.scm" . 402465)
     (push.iloc 2 . 1)
     (call
       (push.cdr.iloc (0 . 0) "../stdlib/core/optimize.scm" . 402487)
       (push.iloc.0 . 1)
       (push.const . #t)
       (apply.iloc+ (1 . 0) "../stdlib/core/optimize.scm" . 402481))
     (push)
     (push.iloc.0 . 2)
     (apply.gloc.of |core.optimize'collect-context| "../stdlib/core/optimize.scm" . 402448))
   (push.iloc.1 . 0)
   (push.iloc.1 . 2)
   (push.const . #f)
   (apply.iloc+ (0 . 0) (|loop`2512*| |form`2508*| |free`2508*| #f)))
 (set.gloc.of |core.optimize'collect-context-each|)
 (close
   (3 0 . |core.optimize'collect-context-seq|)
   (extend.enclose+
     (2 0 . loop)
     (iloc.0 . 0)
     (if.null? (ret.iloc 0 . 1))
     (push.car.iloc (0 . 0) "../stdlib/core/optimize.scm" . 409633)
     (push.iloc 2 . 1)
     (call
       (push.cdr.iloc (0 . 0) "../stdlib/core/optimize.scm" . 409655)
       (push.iloc.0 . 1)
       (apply.iloc+ (1 . 0) "../stdlib/core/optimize.scm" . 409649))
     (push)
     (push.cdr.iloc (0 . 0) "../stdlib/core/optimize.scm" . 409678)
     (push.subr.gloc.of |.null?| 1 "../stdlib/core/optimize.scm" . 409671)
     (apply.gloc.of |core.optimize'collect-context| "../stdlib/core/optimize.scm" . 409616))
   (push.iloc.1 . 0)
   (push.iloc.1 . 2)
   (apply.iloc+ (0 . 0) "../stdlib/core/optimize.scm" . 407561))
 (set.gloc.of |core.optimize'collect-context-seq|)
 (close
   (4 0 . |core.optimize'collect-context|)
   (iloc.0 . 0)
   (if.pair?
     (push.car.iloc (0 . 0) "../stdlib/core/optimize.scm" . 415764)
     (extend . 1)
     (push.iloc.0 . 0)
     (push.const quote define lambda let letrec*)
     (subr.gloc.of |.memq| 2 "../stdlib/core/optimize.scm" . 416785)
     (if.true
       (call
         (iloc.1 . 0)
         (if.not.pair?.ret.const . #f)
         (cdr.iloc (1 . 0) "../stdlib/core/optimize.scm" . 1102879)
         (ret.pair? "../stdlib/core/optimize.scm" . 1102879))
       (push)
       (extend . 1)
       (call
         (iloc.0 . 0)
         (if.false.ret)
         (cddr.iloc (2 . 0) "../stdlib/core/optimize.scm" . 1102879)
         (if.not.null?.ret.const . #f)
         (push.car.iloc (2 . 0) "../stdlib/core/optimize.scm" . 1102879)
         (const . quote)
         (ret.eq? "../stdlib/core/optimize.scm" . 1102879))
       (if.true (ret.iloc 2 . 2))
       (call
         (iloc.0 . 0)
         (if.false.ret)
         (cddr.iloc (2 . 0) "../stdlib/core/optimize.scm" . 1102879)
         (if.not.pair?.ret.const . #f)
         (push.iloc 2 . 0)
         (subr.gloc.of cdddr 1 "../stdlib/core/optimize.scm" . 1102879)
         (if.not.null?.ret.const . #f)
         (push.car.iloc (2 . 0) "../stdlib/core/optimize.scm" . 1102879)
         (const . define)
         (ret.eq? "../stdlib/core/optimize.scm" . 1102879))
       (if.true
         (push.iloc 2 . 0)
         (push.subr.gloc.of caddr 1 "../stdlib/core/optimize.scm" . 1102879)
         (push.cadr.iloc (2 . 0) "../stdlib/core/optimize.scm" . 1102879)
         (extend . 2)
         (push.gloc.of |core.optimize'ht-variable-defined|)
         (push.iloc.0 . 1)
         (push.const . #t)
         (subr.gloc.of |.core-hashtable-set!| 3 "../stdlib/core/optimize.scm" . 1102879)
         (call
           (call
             (push.iloc.0 . 1)
             (apply.gloc.of
               |core.optimize'variable-private?|
               "../stdlib/core/optimize.scm"
               .
               1102879))
           (if.false.ret)
           (push.gloc.of |core.optimize'ht-variable-privates|)
           (push.iloc.0 . 1)
           (push.const . #t)
           (ret.subr.gloc.of |.core-hashtable-set!| "../stdlib/core/optimize.scm" . 1102879))
         (push.gloc.of |core.optimize'ht-variable-binding|)
         (push.iloc.0 . 1)
         (call (iloc.0 . 0) (if.true.ret) (ret.const begin #f))
         (push)
         (subr.gloc.of |.core-hashtable-set!| 3 "../stdlib/core/optimize.scm" . 1102879)
         (push.iloc.0 . 0)
         (push.iloc 3 . 1)
         (push.iloc 3 . 2)
         (push.iloc 3 . 3)
         (apply.gloc.of |core.optimize'collect-context| "../stdlib/core/optimize.scm" . 1102879))
       (call
         (iloc.0 . 0)
         (if.false.ret)
         (push.car.iloc (2 . 0) "../stdlib/core/optimize.scm" . 1102879)
         (const . lambda)
         (ret.eq? "../stdlib/core/optimize.scm" . 1102879))
       (if.true
         (push.cddr.iloc (2 . 0) "../stdlib/core/optimize.scm" . 1102879)
         (extend . 1)
         (call
           (push.cadr.iloc (3 . 0) "../stdlib/core/optimize.scm" . 1102879)
           (apply.gloc.of |core.optimize'formals->list| "../stdlib/core/optimize.scm" . 1102879))
         (push)
         (extend . 1)
         (call
           (push.gloc.of |.L961|)
           (push.iloc.0 . 0)
           (apply.gloc.of |.for-each| "../stdlib/core/optimize.scm" . 1102879))
         (call
           (push.iloc.1 . 0)
           (push.iloc.0 . 0)
           (push.const)
           (apply.gloc.of
             |core.optimize'collect-context-seq|
             "../stdlib/core/optimize.scm"
             .
             1102879))
         (push)
         (extend . 1)
         (push.gloc.of |core.optimize'ht-lambda-node|)
         (push.iloc 5 . 0)
         (call
           (push.iloc.0 . 0)
           (apply.gloc.of
             |core.lists'remove-duplicate-symbols|
             "../stdlib/core/optimize.scm"
             .
             1102879))
         (push)
         (subr.gloc.of |.core-hashtable-set!| 3 "../stdlib/core/optimize.scm" . 1102879)
         (call
           (push.close
             (1 0)
             (push.iloc.0 . 0)
             (push.iloc 6 . 1)
             (push.subr.gloc.of |.memq| 2 "../stdlib/core/optimize.scm" . 1102879)
             (ret.subr.gloc.of |.not| "../stdlib/core/optimize.scm" . 1102879))
           (push.iloc.0 . 0)
           (apply.gloc.of |core.lists'filter| "../stdlib/core/optimize.scm" . 1102879))
         (push)
         (push.iloc 5 . 2)
         (ret.subr.gloc.of |.append| "../stdlib/core/optimize.scm" . 1102879))
       (call
         (iloc.0 . 0)
         (if.false.ret)
         (push.car.iloc (2 . 0) "../stdlib/core/optimize.scm" . 1102879)
         (const . let)
         (ret.eq? "../stdlib/core/optimize.scm" . 1102879))
       (if.true
         (push.cddr.iloc (2 . 0) "../stdlib/core/optimize.scm" . 1102879)
         (push.cadr.iloc (2 . 0) "../stdlib/core/optimize.scm" . 1102879)
         (extend . 2)
         (call
           (push.close
             (1 0)
             (push.gloc.of |core.optimize'ht-variable-binding|)
             (push.car.iloc (0 . 0) "../stdlib/core/optimize.scm" . 1102879)
             (call
               (cadr.iloc (0 . 0) "../stdlib/core/optimize.scm" . 1102879)
               (if.true.ret)
               (ret.const begin #f))
             (push)
             (subr.gloc.of |.core-hashtable-set!| 3 "../stdlib/core/optimize.scm" . 1102879)
             (push.gloc.of |core.optimize'ht-binding-body-common|)
             (push.car.iloc (0 . 0) "../stdlib/core/optimize.scm" . 1102879)
             (push.iloc.1 . 0)
             (ret.subr.gloc.of |.core-hashtable-set!| "../stdlib/core/optimize.scm" . 1102879))
           (push.iloc.0 . 1)
           (apply.gloc.of |.for-each| "../stdlib/core/optimize.scm" . 1102879))
         (call
           (call
             (push.gloc.of |.cadr|)
             (push.iloc.0 . 1)
             (apply.gloc.of |.map| "../stdlib/core/optimize.scm" . 1102879))
           (push)
           (push.iloc 3 . 1)
           (push.iloc 3 . 2)
           (apply.gloc.of
             |core.optimize'collect-context-each|
             "../stdlib/core/optimize.scm"
             .
             1102879))
         (push)
         (extend . 1)
         (call
           (call
             (push.gloc.of |.L978|)
             (push.iloc.0 . 0)
             (apply.gloc.of |core.lists'for-all| "../stdlib/core/optimize.scm" . 1102879))
           (if.true.ret)
           (push.gloc.of |.L929|)
           (call
             (push.gloc.of |.car|)
             (push.iloc.1 . 1)
             (apply.gloc.of |.map| "../stdlib/core/optimize.scm" . 1102879))
           (push)
           (apply.gloc.of |.for-each| "../stdlib/core/optimize.scm" . 1102879))
         (push.iloc.1 . 0)
         (call
           (push.gloc.of |.car|)
           (push.iloc.1 . 1)
           (apply.gloc.of |.map| "../stdlib/core/optimize.scm" . 1102879))
         (push)
         (push.iloc 4 . 1)
         (push.subr.gloc.of |.append| 2 "../stdlib/core/optimize.scm" . 1102879)
         (push.iloc.0 . 0)
         (apply.gloc.of
           |core.optimize'collect-context-seq|
           "../stdlib/core/optimize.scm"
           .
           1102879))
       (call
         (iloc.0 . 0)
         (if.false.ret)
         (push.car.iloc (2 . 0) "../stdlib/core/optimize.scm" . 1102879)
         (const . letrec*)
         (ret.eq? "../stdlib/core/optimize.scm" . 1102879))
       (if.true
         (push.cddr.iloc (2 . 0) "../stdlib/core/optimize.scm" . 1102879)
         (push.cadr.iloc (2 . 0) "../stdlib/core/optimize.scm" . 1102879)
         (extend . 2)
         (call
           (push.close
             (1 0)
             (push.gloc.of |core.optimize'ht-variable-letrec|)
             (push.car.iloc (0 . 0) "../stdlib/core/optimize.scm" . 1102879)
             (push.const . #t)
             (subr.gloc.of |.core-hashtable-set!| 3 "../stdlib/core/optimize.scm" . 1102879)
             (push.gloc.of |core.optimize'ht-variable-binding|)
             (push.car.iloc (0 . 0) "../stdlib/core/optimize.scm" . 1102879)
             (call
               (cadr.iloc (0 . 0) "../stdlib/core/optimize.scm" . 1102879)
               (if.true.ret)
               (ret.const begin #f))
             (push)
             (subr.gloc.of |.core-hashtable-set!| 3 "../stdlib/core/optimize.scm" . 1102879)
             (push.gloc.of |core.optimize'ht-binding-body-common|)
             (push.car.iloc (0 . 0) "../stdlib/core/optimize.scm" . 1102879)
             (push.iloc.1 . 0)
             (subr.gloc.of |.core-hashtable-set!| 3 "../stdlib/core/optimize.scm" . 1102879)
             (call
               (cadr.iloc (0 . 0) "../stdlib/core/optimize.scm" . 1102879)
               (if.not.pair?.ret.const . #f)
               (push.const . lambda)
               (push.iloc.0 . 0)
               (subr.gloc.of |.caadr| 1 "../stdlib/core/optimize.scm" . 1102879)
               (ret.eq? "../stdlib/core/optimize.scm" . 1102879))
             (if.true.ret)
             (push.gloc.of |core.optimize'ht-variable-pinned|)
             (push.car.iloc (0 . 0) "../stdlib/core/optimize.scm" . 1102879)
             (push.const . #t)
             (ret.subr.gloc.of |.core-hashtable-set!| "../stdlib/core/optimize.scm" . 1102879))
           (push.iloc.0 . 1)
           (apply.gloc.of |.for-each| "../stdlib/core/optimize.scm" . 1102879))
         (call
           (call
             (push.gloc.of |.L983|)
             (push.iloc.0 . 1)
             (apply.gloc.of |.map| "../stdlib/core/optimize.scm" . 1102879))
           (push)
           (extend . 1)
           (push.close
             (1 0)
             (push.gloc.of |core.optimize'ht-binding-body-mutual|)
             (push.car.iloc (0 . 0) "../stdlib/core/optimize.scm" . 1102879)
             (push.iloc.1 . 0)
             (ret.subr.gloc.of |.core-hashtable-set!| "../stdlib/core/optimize.scm" . 1102879))
           (push.iloc.1 . 1)
           (apply.gloc.of |.for-each| "../stdlib/core/optimize.scm" . 1102879))
         (call
           (push.gloc.of |.car|)
           (push.iloc.0 . 1)
           (apply.gloc.of |.map| "../stdlib/core/optimize.scm" . 1102879))
         (push)
         (push.iloc 3 . 1)
         (push.subr.gloc.of |.append| 2 "../stdlib/core/optimize.scm" . 1102879)
         (extend . 1)
         (call
           (call
             (push.gloc.of |.cadr|)
             (push.iloc.1 . 1)
             (apply.gloc.of |.map| "../stdlib/core/optimize.scm" . 1102879))
           (push)
           (push.iloc.0 . 0)
           (push.iloc 4 . 2)
           (apply.gloc.of
             |core.optimize'collect-context-each|
             "../stdlib/core/optimize.scm"
             .
             1102879))
         (push)
         (extend . 1)
         (call
           (call
             (push.gloc.of |.L938|)
             (push.iloc.0 . 0)
             (apply.gloc.of |core.lists'for-all| "../stdlib/core/optimize.scm" . 1102879))
           (if.true.ret)
           (push.gloc.of |.L966|)
           (call
             (push.gloc.of |.car|)
             (push.iloc 2 . 1)
             (apply.gloc.of |.map| "../stdlib/core/optimize.scm" . 1102879))
           (push)
           (apply.gloc.of |.for-each| "../stdlib/core/optimize.scm" . 1102879))
         (push.iloc 2 . 0)
         (push.iloc.1 . 0)
         (push.iloc.0 . 0)
         (apply.gloc.of
           |core.optimize'collect-context-seq|
           "../stdlib/core/optimize.scm"
           .
           1102879))
       (push.const . "coreform-optimize")
       (push.const . "internal inconsistency in ~s")
       (push.gloc.of |core.optimize'collect-context|)
       (push.subr.gloc.of |.format| 2 "../stdlib/core/optimize.scm" . 1102879)
       (push.iloc 2 . 0)
       (apply.gloc.of |.assertion-violation| "../stdlib/core/optimize.scm" . 1102879))
     (push.iloc.0 . 0)
     (const . if)
     (if.eq?
       (push.cdr.iloc (1 . 0) "../stdlib/core/optimize.scm" . 472103)
       (push.iloc.1 . 1)
       (push.iloc.1 . 2)
       (apply.gloc.of |core.optimize'collect-context-each| "../stdlib/core/optimize.scm" . 472081))
     (push.iloc.0 . 0)
     (const . set!)
     (if.eq?
       (push.gloc.of |core.optimize'ht-variable-assigned|)
       (push.cadr.iloc (1 . 0) "../stdlib/core/optimize.scm" . 474171)
       (push.const . #t)
       (subr.gloc.of |.core-hashtable-set!| 3 "../stdlib/core/optimize.scm" . 474129)
       (push.iloc.1 . 0)
       (push.iloc.1 . 1)
       (push.iloc.1 . 2)
       (apply.gloc.of |core.optimize'collect-context-each| "../stdlib/core/optimize.scm" . 475153))
     (push.iloc.0 . 0)
     (push.const begin and or)
     (subr.gloc.of |.memq| 2 "../stdlib/core/optimize.scm" . 416785)
     (if.true
       (push.cdr.iloc (1 . 0) "../stdlib/core/optimize.scm" . 477222)
       (push.iloc.1 . 1)
       (push.iloc.1 . 2)
       (apply.gloc.of |core.optimize'collect-context-seq| "../stdlib/core/optimize.scm" . 477201))
     (call
       (car.iloc (1 . 0) "../stdlib/core/optimize.scm" . 479263)
       (if.not.symbol?.ret.const . #f)
       (push.gloc.of |core.optimize'ht-variable-callsites|)
       (push.car.iloc (1 . 0) "../stdlib/core/optimize.scm" . 481323)
       (push.iloc.1 . 0)
       (push.gloc.of |core.optimize'ht-variable-callsites|)
       (push.car.iloc (1 . 0) "../stdlib/core/optimize.scm" . 482400)
       (push.const)
       (subr.gloc.of |.core-hashtable-ref| 3 "../stdlib/core/optimize.scm" . 482358)
       (push.cons)
       (ret.subr.gloc.of |.core-hashtable-set!| "../stdlib/core/optimize.scm" . 480278))
     (push.iloc.1 . 0)
     (push.iloc.1 . 1)
     (push.iloc.1 . 2)
     (apply.gloc.of |core.optimize'collect-context-each| "../stdlib/core/optimize.scm" . 483345))
   (iloc.0 . 0)
   (if.symbol?
     (call
       (iloc.0 . 3)
       (if.false.ret)
       (push.gloc.of |core.optimize'ht-variable-operands-refc|)
       (push.iloc.0 . 0)
       (push.gloc.of |core.optimize'ht-variable-operands-refc|)
       (push.iloc.0 . 0)
       (push.const . 0)
       (push.subr.gloc.of |.core-hashtable-ref| 3 "../stdlib/core/optimize.scm" . 486479)
       (push.const . 1)
       (push.subr.gloc.of |.+| 2 "../stdlib/core/optimize.scm" . 486476)
       (ret.subr.gloc.of |.core-hashtable-set!| "../stdlib/core/optimize.scm" . 486424))
     (push.gloc.of |core.optimize'ht-variable-refc|)
     (push.iloc.0 . 0)
     (push.gloc.of |core.optimize'ht-variable-refc|)
     (push.iloc.0 . 0)
     (push.const . 0)
     (push.subr.gloc.of |.core-hashtable-ref| 3 "../stdlib/core/optimize.scm" . 487484)
     (push.const . 1)
     (push.subr.gloc.of |.+| 2 "../stdlib/core/optimize.scm" . 487481)
     (subr.gloc.of |.core-hashtable-set!| 3 "../stdlib/core/optimize.scm" . 487438)
     (call
       (push.iloc.0 . 0)
       (apply.gloc.of |core.optimize'primitive-function?| "../stdlib/core/optimize.scm" . 488469))
     (if.true (ret.iloc 0 . 2))
     (push.iloc.0 . 0)
     (push.iloc.0 . 1)
     (subr.gloc.of |.memq| 2 "../stdlib/core/optimize.scm" . 489493)
     (if.true (ret.iloc 0 . 2))
     (push.iloc.0 . 0)
     (iloc.0 . 2)
     (ret.cons "../stdlib/core/optimize.scm" . 490522))
   (ret.iloc 0 . 2))
 (set.gloc.of |core.optimize'collect-context|)
 (close
   (2 0 . |core.optimize'crawl-lambda-lifting|)
   (call
     (touch.gloc.of |loop`2669*|)
     (apply.gloc.of |loop`2669*| "../stdlib/core/optimize.scm" . 625673))
   (call
     (touch.gloc.of |traverse-lambda-node`2579*|)
     (apply.gloc.of |traverse-lambda-node`2579*| "../stdlib/core/optimize.scm" . 627719))
   (touch.gloc.of |make-table`2579*|)
   (apply.gloc.of |make-table`2579*| "../stdlib/core/optimize.scm" . 628743))
 (set.gloc.of |core.optimize'crawl-lambda-lifting|)
 (close
   (1 0 . |core.optimize'crawl-beta-subst|)
   (subr.gloc.of |.make-core-hashtable| 0)
   (push)
   (extend . 1)
   (call
     (push.close
       (1 0)
       (push.gloc.of |core.optimize'ht-lambda-node|)
       (push.cdr.iloc (0 . 0) "../stdlib/core/optimize.scm" . 636985)
       (subr.gloc.of |.core-hashtable-contains?| 2 "../stdlib/core/optimize.scm" . 636944)
       (if.true.ret)
       (push.gloc.of |core.optimize'ht-variable-refc|)
       (push.car.iloc (0 . 0) "../stdlib/core/optimize.scm" . 638017)
       (push.const . #f)
       (push.subr.gloc.of |.core-hashtable-ref| 3 "../stdlib/core/optimize.scm" . 637980)
       (extend . 1)
       (call
         (iloc.0 . 0)
         (if.false.ret)
         (call
           (=n.iloc (0 . 0) 1 "../stdlib/core/optimize.scm" . 640034)
           (if.true.ret)
           (push.cdr.iloc (1 . 0) "../stdlib/core/optimize.scm" . 640068)
           (apply.gloc.of
             |core.optimize'inlinable-expression?|
             "../stdlib/core/optimize.scm"
             .
             640045))
         (if.false.ret)
         (push.gloc.of |core.optimize'ht-variable-pinned|)
         (push.car.iloc (1 . 0) "../stdlib/core/optimize.scm" . 641104)
         (subr.gloc.of |.core-hashtable-contains?| 2 "../stdlib/core/optimize.scm" . 641059)
         (if.true.ret.const . #f)
         (push.gloc.of |core.optimize'ht-binding-body-common|)
         (push.car.iloc (1 . 0) "../stdlib/core/optimize.scm" . 642121)
         (push.const . #f)
         (ret.subr.gloc.of |.core-hashtable-ref| "../stdlib/core/optimize.scm" . 642078))
       (push)
       (extend . 1)
       (iloc.0 . 0)
       (if.true
         (call
           (call
             (push.cdr.iloc (2 . 0) "../stdlib/core/optimize.scm" . 644155)
             (apply.gloc.of |core.optimize'constant?| "../stdlib/core/optimize.scm" . 644144))
           (if.true.ret)
           (cdr.iloc (2 . 0) "../stdlib/core/optimize.scm" . 645182)
           (if.not.symbol?.ret.const . #f)
           (push.gloc.of |core.optimize'ht-variable-assigned|)
           (push.cdr.iloc (2 . 0) "../stdlib/core/optimize.scm" . 646249)
           (subr.gloc.of |.core-hashtable-contains?| 2 "../stdlib/core/optimize.scm" . 646202)
           (if.true.ret.const . #f)
           (push.gloc.of |core.optimize'ht-variable-formals|)
           (push.cdr.iloc (2 . 0) "../stdlib/core/optimize.scm" . 647271)
           (subr.gloc.of |.core-hashtable-contains?| 2 "../stdlib/core/optimize.scm" . 647225)
           (if.true.ret)
           (push.gloc.of |core.optimize'ht-variable-binding|)
           (push.cdr.iloc (2 . 0) "../stdlib/core/optimize.scm" . 648300)
           (subr.gloc.of |.core-hashtable-contains?| 2 "../stdlib/core/optimize.scm" . 648254)
           (if.false.ret)
           (push.gloc.of |core.optimize'ht-variable-privates|)
           (push.cdr.iloc (2 . 0) "../stdlib/core/optimize.scm" . 649329)
           (subr.gloc.of |.core-hashtable-contains?| 2 "../stdlib/core/optimize.scm" . 649282)
           (if.true.ret)
           (push.gloc.of |core.optimize'ht-variable-defined|)
           (push.cdr.iloc (2 . 0) "../stdlib/core/optimize.scm" . 650357)
           (push.subr.gloc.of |.core-hashtable-contains?| 2 "../stdlib/core/optimize.scm" . 650311)
           (ret.subr.gloc.of |.not| "../stdlib/core/optimize.scm" . 650306))
         (push)
         (extend . 1)
         (call
           (iloc.0 . 0)
           (if.true.ret)
           (call
             (push.cdr.iloc (3 . 0) "../stdlib/core/optimize.scm" . 652351)
             (apply.gloc.of |core.optimize'function?| "../stdlib/core/optimize.scm" . 652340))
           (if.false.ret)
           (cdr.iloc (3 . 0) "../stdlib/core/optimize.scm" . 653382)
           (if.not.symbol?.ret.const . #t)
           (push.gloc.of |core.optimize'ht-variable-operands-refc|)
           (push.cdr.iloc (3 . 0) "../stdlib/core/optimize.scm" . 654442)
           (push.const . 0)
           (push.subr.gloc.of |.core-hashtable-ref| 3 "../stdlib/core/optimize.scm" . 654396)
           (push.const . 1)
           (ret.subr.gloc.of |.<=| "../stdlib/core/optimize.scm" . 654392))
         (push)
         (extend . 1)
         (call
           (iloc.1 . 0)
           (if.false.ret)
           (push.cdr.iloc (4 . 0) "../stdlib/core/optimize.scm" . 656457)
           (apply.gloc.of
             |core.optimize'inlinable-expression?|
             "../stdlib/core/optimize.scm"
             .
             656434))
         (push)
         (extend . 1)
         (call
           (push.close
             (1 0)
             (extend.enclose
               (1 0 . loop)
               (call
                 (<n.iloc (7 . 0) 1 "../stdlib/core/optimize.scm" . 661553)
                 (if.false.ret)
                 (push.const . #t)
                 (apply.iloc (2 . 0) "../stdlib/core/optimize.scm" . 661564))
               (iloc.0 . 0)
               (if.null?.ret.const)
               (push.car.iloc (0 . 0) "../stdlib/core/optimize.scm" . 663608)
               (car.iloc (8 . 0) "../stdlib/core/optimize.scm" . 663618)
               (if.eq?
                 (n+.iloc (7 . 0) -1 "../stdlib/core/optimize.scm" . 664638)
                 (set.iloc (7 . 0) "../stdlib/core/optimize.scm" . 664627)
                 (push.cdr.iloc (0 . 0) "../stdlib/core/optimize.scm" . 665657)
                 (apply.iloc (1 . 0) "../stdlib/core/optimize.scm" . 665651))
               (car.iloc (0 . 0) "../stdlib/core/optimize.scm" . 666682)
               (if.pair?
                 (push.iloc.0 . 0)
                 (push.subr.gloc.of |.caar| 1 "../stdlib/core/optimize.scm" . 667711)
                 (push.iloc.0 . 0)
                 (push.subr.gloc.of |.cdar| 1 "../stdlib/core/optimize.scm" . 667729)
                 (extend . 2)
                 (iloc.0 . 0)
                 (if.pair?
                   (call
                     (push.car.iloc (1 . 0) "../stdlib/core/optimize.scm" . 669762)
                     (apply.iloc (2 . 0) "../stdlib/core/optimize.scm" . 669756))
                   (push.cdr.iloc (1 . 0) "../stdlib/core/optimize.scm" . 670786)
                   (apply.iloc (2 . 0) "../stdlib/core/optimize.scm" . 670780))
                 (push.iloc.0 . 0)
                 (const . quote)
                 (if.eq?
                   (push.cdr.iloc (1 . 0) "../stdlib/core/optimize.scm" . 672834)
                   (apply.iloc (2 . 0) "../stdlib/core/optimize.scm" . 672828))
                 (push.iloc.0 . 0)
                 (const . lambda)
                 (if.eq?
                   (call
                     (iloc 4 . 0)
                     (if.false.ret)
                     (push.cdr.iloc (0 . 1) "../stdlib/core/optimize.scm" . 674894)
                     (apply.iloc (2 . 0) "../stdlib/core/optimize.scm" . 674888))
                   (push.cdr.iloc (1 . 0) "../stdlib/core/optimize.scm" . 675906)
                   (apply.iloc (2 . 0) "../stdlib/core/optimize.scm" . 675900))
                 (push.iloc.0 . 0)
                 (push.const let letrec*)
                 (subr.gloc.of |.memq| 2 "../stdlib/core/optimize.scm" . 676924)
                 (if.true
                   (call
                     (call
                       (push.gloc.of |.cadr|)
                       (push.car.iloc (0 . 1) "../stdlib/core/optimize.scm" . 677964)
                       (apply.gloc.of |.map| "../stdlib/core/optimize.scm" . 677954))
                     (push)
                     (apply.iloc (2 . 0) "../stdlib/core/optimize.scm" . 677948))
                   (call
                     (push.cdr.iloc (0 . 1) "../stdlib/core/optimize.scm" . 678978)
                     (apply.iloc (2 . 0) "../stdlib/core/optimize.scm" . 678972))
                   (push.cdr.iloc (1 . 0) "../stdlib/core/optimize.scm" . 680002)
                   (apply.iloc (2 . 0) "../stdlib/core/optimize.scm" . 679996))
                 (push.iloc.0 . 0)
                 (push.const begin and or)
                 (subr.gloc.of |.memq| 2 "../stdlib/core/optimize.scm" . 681020)
                 (if.true
                   (call
                     (push.iloc.0 . 1)
                     (apply.iloc (2 . 0) "../stdlib/core/optimize.scm" . 682044))
                   (push.cdr.iloc (1 . 0) "../stdlib/core/optimize.scm" . 683074)
                   (apply.iloc (2 . 0) "../stdlib/core/optimize.scm" . 683068))
                 (push.iloc.0 . 0)
                 (const . set!)
                 (if.eq?
                   (call
                     (iloc 6 . 0)
                     (if.true.ret)
                     (push.const . #f)
                     (apply.iloc (3 . 0) "../stdlib/core/optimize.scm" . 685126))
                   (call
                     (push.car.iloc (9 . 0) "../stdlib/core/optimize.scm" . 686150)
                     (car.iloc (0 . 1) "../stdlib/core/optimize.scm" . 686158)
                     (if.not.eq?.ret.const . #f)
                     (push.const . #f)
                     (apply.iloc (3 . 0) "../stdlib/core/optimize.scm" . 686170))
                   (call
                     (push.cdr.iloc (9 . 0) "../stdlib/core/optimize.scm" . 687174)
                     (car.iloc (0 . 1) "../stdlib/core/optimize.scm" . 687182)
                     (if.not.eq?.ret.const . #f)
                     (push.const . #f)
                     (apply.iloc (3 . 0) "../stdlib/core/optimize.scm" . 687194))
                   (call
                     (push.cdr.iloc (0 . 1) "../stdlib/core/optimize.scm" . 688194)
                     (apply.iloc (2 . 0) "../stdlib/core/optimize.scm" . 688188))
                   (push.cdr.iloc (1 . 0) "../stdlib/core/optimize.scm" . 689218)
                   (apply.iloc (2 . 0) "../stdlib/core/optimize.scm" . 689212))
                 (push.iloc.0 . 0)
                 (const . if)
                 (if.eq?
                   (call
                     (push.car.iloc (0 . 1) "../stdlib/core/optimize.scm" . 691272)
                     (push.subr.gloc.of |.list| 1 "../stdlib/core/optimize.scm" . 691266)
                     (apply.iloc (2 . 0) "../stdlib/core/optimize.scm" . 691260))
                   (call
                     (iloc 5 . 0)
                     (if.true.ret)
                     (push.const . #f)
                     (apply.iloc (3 . 0) "../stdlib/core/optimize.scm" . 692293))
                   (call
                     (push.cadr.iloc (0 . 1) "../stdlib/core/optimize.scm" . 693320)
                     (push.subr.gloc.of |.list| 1 "../stdlib/core/optimize.scm" . 693314)
                     (apply.iloc (2 . 0) "../stdlib/core/optimize.scm" . 693308))
                   (call
                     (cddr.iloc (0 . 1) "../stdlib/core/optimize.scm" . 694344)
                     (if.not.pair?.ret.const . #f)
                     (push.iloc.0 . 1)
                     (push.subr.gloc.of |.caddr| 1 "../stdlib/core/optimize.scm" . 694369)
                     (push.subr.gloc.of |.list| 1 "../stdlib/core/optimize.scm" . 694363)
                     (apply.iloc (2 . 0) "../stdlib/core/optimize.scm" . 694357))
                   (push.cdr.iloc (1 . 0) "../stdlib/core/optimize.scm" . 695362)
                   (apply.iloc (2 . 0) "../stdlib/core/optimize.scm" . 695356))
                 (call
                   (push.iloc.0 . 0)
                   (car.iloc (9 . 0) "../stdlib/core/optimize.scm" . 697419)
                   (if.not.eq?.ret.const . #f)
                   (n+.iloc (8 . 0) -1 "../stdlib/core/optimize.scm" . 697439)
                   (set.iloc (8 . 0) "../stdlib/core/optimize.scm" . 697428)
                   (ret.const.unspec))
                 (call
                   (push.iloc.0 . 1)
                   (apply.iloc (2 . 0) "../stdlib/core/optimize.scm" . 698428))
                 (call
                   (iloc 6 . 0)
                   (if.true.ret)
                   (call
                     (push.iloc.0 . 0)
                     (apply.gloc.of
                       |core.optimize'primitive-function?|
                       "../stdlib/core/optimize.scm"
                       .
                       700480))
                   (if.true.ret)
                   (call
                     (push.iloc.0 . 0)
                     (apply.gloc.of
                       |core.optimize'variable-functional?|
                       "../stdlib/core/optimize.scm"
                       .
                       701504))
                   (if.true.ret)
                   (call
                     (call
                       (push.iloc.0 . 0)
                       (apply.gloc.of
                         |core.optimize'special-list-function?|
                         "../stdlib/core/optimize.scm"
                         .
                         702533))
                     (if.false.ret)
                     (iloc.0 . 1)
                     (if.not.pair?.ret.const . #f)
                     (car.iloc (0 . 1) "../stdlib/core/optimize.scm" . 704590)
                     (if.not.symbol?.ret.const . #f)
                     (call
                       (push.car.iloc (0 . 1) "../stdlib/core/optimize.scm" . 705630)
                       (apply.gloc.of
                         |core.optimize'primitive-function?|
                         "../stdlib/core/optimize.scm"
                         .
                         705609))
                     (if.true.ret)
                     (push.car.iloc (0 . 1) "../stdlib/core/optimize.scm" . 706655)
                     (apply.gloc.of
                       |core.optimize'variable-functional?|
                       "../stdlib/core/optimize.scm"
                       .
                       706633))
                   (if.true.ret)
                   (push.const . #f)
                   (apply.iloc (3 . 0) "../stdlib/core/optimize.scm" . 707648))
                 (push.cdr.iloc (1 . 0) "../stdlib/core/optimize.scm" . 708674)
                 (apply.iloc (2 . 0) "../stdlib/core/optimize.scm" . 708668))
               (car.iloc (0 . 0) "../stdlib/core/optimize.scm" . 709692)
               (if.symbol?
                 (call
                   (iloc 5 . 0)
                   (if.true.ret)
                   (push.gloc.of |core.optimize'ht-variable-assigned|)
                   (push.car.iloc (0 . 0) "../stdlib/core/optimize.scm" . 711787)
                   (subr.gloc.of
                     |.core-hashtable-contains?|
                     2
                     "../stdlib/core/optimize.scm"
                     .
                     711740)
                   (if.false.ret)
                   (push.const . #f)
                   (apply.iloc (2 . 0) "../stdlib/core/optimize.scm" . 712764))
                 (push.cdr.iloc (0 . 0) "../stdlib/core/optimize.scm" . 713785)
                 (apply.iloc (1 . 0) "../stdlib/core/optimize.scm" . 713779))
               (push.cdr.iloc (0 . 0) "../stdlib/core/optimize.scm" . 715833)
               (apply.iloc (1 . 0) "../stdlib/core/optimize.scm" . 715827))
             (push.iloc 5 . 0)
             (apply.iloc (0 . 0) "../stdlib/core/optimize.scm" . 661548))
           (apply.gloc.of
             |.call/cc|
             (|.call/cc|
               (lambda (|done`2692*|)
                 (letrec* ((|loop`2696*|
                             (lambda (|lst`2697*|)
                               (and (|.<| |refc`2679*| 1) (|done`2692*| #t))
                               (if (|.null?| |lst`2697*|)
                                   '()
                                   (if (|.eq?| (|.car| |lst`2697*|) (|.car| |b`2677*|))
                                       (begin
                                         (set! |refc`2679*| (|.-| |refc`2679*| 1))
                                         (|loop`2696*| (|.cdr| |lst`2697*|)))
                                       (if (|.pair?| (|.car| |lst`2697*|))
                                           (let ((|proc`2699*| (|.caar| |lst`2697*|))
                                                 (|args`2699*| (|.cdar| |lst`2697*|)))
                                             (if (|.pair?| |proc`2699*|)
                                                 (begin
                                                   (|loop`2696*| (|.car| |lst`2697*|))
                                                   (|loop`2696*| (|.cdr| |lst`2697*|)))
                                                 (if (|.eq?| |proc`2699*| 'quote)
                                                     (|loop`2696*| (|.cdr| |lst`2697*|))
                                                     (if (|.eq?| |proc`2699*| 'lambda)
                                                         (begin
                                                           (and |inline`2689*|
                                                                (|loop`2696*|
                                                                  (|.cdr| |args`2699*|)))
                                                           (|loop`2696*| (|.cdr| |lst`2697*|)))
                                                         (if (|.memq| |proc`2699*| '(let letrec*))
                                                             (begin
                                                               (|loop`2696*|
                                                                 (|.map|
                                                                   |.cadr|
                                                                   (|.car| |args`2699*|)))
                                                               (|loop`2696*| (|.cdr| |args`2699*|))
                                                               (|loop`2696*| (|.cdr| |lst`2697*|)))
                                                             (if (|.memq|
                                                                   |proc`2699*|
                                                                   '(begin and or))
                                                                 (begin
                                                                   (|loop`2696*| |args`2699*|)
                                                                   (|loop`2696*|
                                                                     (|.cdr| |lst`2697*|)))
                                                                 (if (|.eq?| |proc`2699*| 'set!)
                                                                     (begin
                                                                       (or |const`2685*|
                                                                           (|done`2692*| #f))
                                                                       (and (|.eq?|
                                                                              (|.car| |b`2677*|)
                                                                              (|.car| |args`2699*|))
                                                                            (|done`2692*| #f))
                                                                       (and (|.eq?|
                                                                              (|.cdr| |b`2677*|)
                                                                              (|.car| |args`2699*|))
                                                                            (|done`2692*| #f))
                                                                       (|loop`2696*|
                                                                         (|.cdr| |args`2699*|))
                                                                       (|loop`2696*|
                                                                         (|.cdr| |lst`2697*|)))
                                                                     (if (|.eq?| |proc`2699*| 'if)
                                                                         (begin
                                                                           (|loop`2696*|
                                                                             (|.list|
                                                                               (|.car|
                                                                                 |args`2699*|)))
                                                                           (or |pure`2687*|
                                                                               (|done`2692*| #f))
                                                                           (|loop`2696*|
                                                                             (|.list|
                                                                               (|.cadr|
                                                                                 |args`2699*|)))
                                                                           (and (|.pair?|
                                                                                  (|.cddr|
                                                                                    |args`2699*|))
                                                                                (|loop`2696*|
                                                                                  (|.list|
                                                                                    (|.caddr|
                                                                                      |args`2699*|))))
                                                                           (|loop`2696*|
                                                                             (|.cdr| |lst`2697*|)))
                                                                         (begin
                                                                           (and (|.eq?|
                                                                                  |proc`2699*|
                                                                                  (|.car|
                                                                                    |b`2677*|))
                                                                                (set! |refc`2679*|
                                                                                      (|.-|
                                                                                        |refc`2679*|
                                                                                        1)))
                                                                           (|loop`2696*|
                                                                             |args`2699*|)
                                                                           (or |const`2685*|
                                                                               (|core.optimize'primitive-function?|
                                                                                 |proc`2699*|)
                                                                               (|core.optimize'variable-functional?|
                                                                                 |proc`2699*|)
                                                                               (and (|core.optimize'special-list-function?|
                                                                                      |proc`2699*|)
                                                                                    (|.pair?|
                                                                                      |args`2699*|)
                                                                                    (|.symbol?|
                                                                                      (|.car|
                                                                                        |args`2699*|))
                                                                                    (or (|core.optimize'primitive-function?|
                                                                                          (|.car|
                                                                                            |args`2699*|))
                                                                                        (|core.optimize'variable-functional?|
                                                                                          (|.car|
                                                                                            |args`2699*|))))
                                                                               (|done`2692*| #f))
                                                                           (|loop`2696*|
                                                                             (|.cdr|
                                                                               |lst`2697*|)))))))))))
                                           (if (|.symbol?| (|.car| |lst`2697*|))
                                               (begin
                                                 (or |const`2685*|
                                                     (and (|.core-hashtable-contains?|
                                                            |core.optimize'ht-variable-assigned|
                                                            (|.car| |lst`2697*|))
                                                          (|done`2692*| #f)))
                                                 (|loop`2696*| (|.cdr| |lst`2697*|)))
                                               (|loop`2696*| (|.cdr| |lst`2697*|)))))))))
                   (|loop`2696*| |.L892`2681*|))))))
         (push)
         (extend . 1)
         (push.iloc.0 . 0)
         (const . #t)
         (if.not.eq?.ret.const . #f)
         (push.iloc 7 . 0)
         (push.car.iloc (6 . 0) "../stdlib/core/optimize.scm" . 717887)
         (push.cdr.iloc (6 . 0) "../stdlib/core/optimize.scm" . 717895)
         (ret.subr.gloc.of |.core-hashtable-set!| "../stdlib/core/optimize.scm" . 717863))
       (ret.const.unspec))
     (push.gloc.of |core.optimize'ht-variable-binding|)
     (push.subr.gloc.of |.core-hashtable->alist| 1 "../stdlib/core/optimize.scm" . 718858)
     (apply.gloc.of
       |.for-each|
       (|.for-each|
         (lambda (|b`2677*|)
           (or (|.core-hashtable-contains?| |core.optimize'ht-lambda-node| (|.cdr| |b`2677*|))
               (let ((|refc`2679*|
                       (|.core-hashtable-ref|
                         |core.optimize'ht-variable-refc|
                         (|.car| |b`2677*|)
                         #f)))
                 (let ((|.L892`2681*|
                         (and |refc`2679*|
                              (or (|.=| |refc`2679*| 1)
                                  (|core.optimize'inlinable-expression?| (|.cdr| |b`2677*|)))
                              (|.not|
                                (|.core-hashtable-contains?|
                                  |core.optimize'ht-variable-pinned|
                                  (|.car| |b`2677*|)))
                              (|.core-hashtable-ref|
                                |core.optimize'ht-binding-body-common|
                                (|.car| |b`2677*|)
                                #f))))
                   (if |.L892`2681*|
                       (let ((|const`2685*|
                               (or (|core.optimize'constant?| (|.cdr| |b`2677*|))
                                   (and (|.symbol?| (|.cdr| |b`2677*|))
                                        (|.not|
                                          (|.core-hashtable-contains?|
                                            |core.optimize'ht-variable-assigned|
                                            (|.cdr| |b`2677*|)))
                                        (or (|.core-hashtable-contains?|
                                              |core.optimize'ht-variable-formals|
                                              (|.cdr| |b`2677*|))
                                            (and (|.core-hashtable-contains?|
                                                   |core.optimize'ht-variable-binding|
                                                   (|.cdr| |b`2677*|))
                                                 (or (|.core-hashtable-contains?|
                                                       |core.optimize'ht-variable-privates|
                                                       (|.cdr| |b`2677*|))
                                                     (|.not|
                                                       (|.core-hashtable-contains?|
                                                         |core.optimize'ht-variable-defined|
                                                         (|.cdr| |b`2677*|))))))))))
                         (let ((|pure`2687*|
                                 (or |const`2685*|
                                     (and (|core.optimize'function?| (|.cdr| |b`2677*|))
                                          (or (|.not| (|.symbol?| (|.cdr| |b`2677*|)))
                                              (|.<=|
                                                (|.core-hashtable-ref|
                                                  |core.optimize'ht-variable-operands-refc|
                                                  (|.cdr| |b`2677*|)
                                                  0)
                                                1))))))
                           (let ((|inline`2689*|
                                   (and |const`2685*|
                                        (|core.optimize'inlinable-expression?|
                                          (|.cdr| |b`2677*|)))))
                             (let ((|ans`2702*|
                                     (|.call/cc|
                                       (lambda (|done`2692*|)
                                         (letrec* ((|loop`2696*|
                                                     (lambda (|lst`2697*|)
                                                       (and (|.<| |refc`2679*| 1) (|done`2692*| #t))
                                                       (if (|.null?| |lst`2697*|)
                                                           '()
                                                           (if (|.eq?|
                                                                 (|.car| |lst`2697*|)
                                                                 (|.car| |b`2677*|))
                                                               (begin
                                                                 (set! |refc`2679*|
                                                                       (|.-| |refc`2679*| 1))
                                                                 (|loop`2696*|
                                                                   (|.cdr| |lst`2697*|)))
                                                               (if (|.pair?| (|.car| |lst`2697*|))
                                                                   (let ((|proc`2699*|
                                                                           (|.caar| |lst`2697*|))
                                                                         (|args`2699*|
                                                                           (|.cdar| |lst`2697*|)))
                                                                     (if (|.pair?| |proc`2699*|)
                                                                         (begin
                                                                           (|loop`2696*|
                                                                             (|.car| |lst`2697*|))
                                                                           (|loop`2696*|
                                                                             (|.cdr| |lst`2697*|)))
                                                                         (if (|.eq?|
                                                                               |proc`2699*|
                                                                               'quote)
                                                                             (|loop`2696*|
                                                                               (|.cdr| |lst`2697*|))
                                                                             (if (|.eq?|
                                                                                   |proc`2699*|
                                                                                   'lambda)
                                                                                 (begin
                                                                                   (and |inline`2689*|
                                                                                        (|loop`2696*|
                                                                                          (|.cdr|
                                                                                            |args`2699*|)))
                                                                                   (|loop`2696*|
                                                                                     (|.cdr|
                                                                                       |lst`2697*|)))
                                                                                 (if (|.memq|
                                                                                       |proc`2699*|
                                                                                       '(let
                                                                                          letrec*))
                                                                                     (begin
                                                                                       (|loop`2696*|
                                                                                         (|.map|
                                                                                           |.cadr|
                                                                                           (|.car|
                                                                                             |args`2699*|)))
                                                                                       (|loop`2696*|
                                                                                         (|.cdr|
                                                                                           |args`2699*|))
                                                                                       (|loop`2696*|
                                                                                         (|.cdr|
                                                                                           |lst`2697*|)))
                                                                                     (if (|.memq|
                                                                                           |proc`2699*|
                                                                                           '(begin
                                                                                              and
                                                                                              or))
                                                                                         (begin
                                                                                           (|loop`2696*|
                                                                                             |args`2699*|)
                                                                                           (|loop`2696*|
                                                                                             (|.cdr|
                                                                                               |lst`2697*|)))
                                                                                         (if (|.eq?|
                                                                                               |proc`2699*|
                                                                                               'set!)
                                                                                             (begin
                                                                                               (or |const`2685*|
                                                                                                   (|done`2692*|
                                                                                                     #f))
                                                                                               (and (|.eq?|
                                                                                                      (|.car|
                                                                                                        |b`2677*|)
                                                                                                      (|.car|
                                                                                                        |args`2699*|))
                                                                                                    (|done`2692*|
                                                                                                      #f))
                                                                                               (and (|.eq?|
                                                                                                      (|.cdr|
                                                                                                        |b`2677*|)
                                                                                                      (|.car|
                                                                                                        |args`2699*|))
                                                                                                    (|done`2692*|
                                                                                                      #f))
                                                                                               (|loop`2696*|
                                                                                                 (|.cdr|
                                                                                                   |args`2699*|))
                                                                                               (|loop`2696*|
                                                                                                 (|.cdr|
                                                                                                   |lst`2697*|)))
                                                                                             (if (|.eq?|
                                                                                                   |proc`2699*|
                                                                                                   'if)
                                                                                                 (begin
                                                                                                   (|loop`2696*|
                                                                                                     (|.list|
                                                                                                       (|.car|
                                                                                                         |args`2699*|)))
                                                                                                   (or |pure`2687*|
                                                                                                       (|done`2692*|
                                                                                                         #f))
                                                                                                   (|loop`2696*|
                                                                                                     (|.list|
                                                                                                       (|.cadr|
                                                                                                         |args`2699*|)))
                                                                                                   (and (|.pair?|
                                                                                                          (|.cddr|
                                                                                                            |args`2699*|))
                                                                                                        (|loop`2696*|
                                                                                                          (|.list|
                                                                                                            (|.caddr|
                                                                                                              |args`2699*|))))
                                                                                                   (|loop`2696*|
                                                                                                     (|.cdr|
                                                                                                       |lst`2697*|)))
                                                                                                 (begin
                                                                                                   (and (|.eq?|
                                                                                                          |proc`2699*|
                                                                                                          (|.car|
                                                                                                            |b`2677*|))
                                                                                                        (set! |refc`2679*|
                                                                                                              (|.-|
                                                                                                                |refc`2679*|
                                                                                                                1)))
                                                                                                   (|loop`2696*|
                                                                                                     |args`2699*|)
                                                                                                   (or |const`2685*|
                                                                                                       (|core.optimize'primitive-function?|
                                                                                                         |proc`2699*|)
                                                                                                       (|core.optimize'variable-functional?|
                                                                                                         |proc`2699*|)
                                                                                                       (and (|core.optimize'special-list-function?|
                                                                                                              |proc`2699*|)
                                                                                                            (|.pair?|
                                                                                                              |args`2699*|)
                                                                                                            (|.symbol?|
                                                                                                              (|.car|
                                                                                                                |args`2699*|))
                                                                                                            (or (|core.optimize'primitive-function?|
                                                                                                                  (|.car|
                                                                                                                    |args`2699*|))
                                                                                                                (|core.optimize'variable-functional?|
                                                                                                                  (|.car|
                                                                                                                    |args`2699*|))))
                                                                                                       (|done`2692*|
                                                                                                         #f))
                                                                                                   (|loop`2696*|
                                                                                                     (|.cdr|
                                                                                                       |lst`2697*|)))))))))))
                                                                   (if (|.symbol?|
                                                                         (|.car| |lst`2697*|))
                                                                       (begin
                                                                         (or |const`2685*|
                                                                             (and (|.core-hashtable-contains?|
                                                                                    |core.optimize'ht-variable-assigned|
                                                                                    (|.car|
                                                                                      |lst`2697*|))
                                                                                  (|done`2692*|
                                                                                    #f)))
                                                                         (|loop`2696*|
                                                                           (|.cdr| |lst`2697*|)))
                                                                       (|loop`2696*|
                                                                         (|.cdr|
                                                                           |lst`2697*|)))))))))
                                           (|loop`2696*| |.L892`2681*|))))))
                               (and (|.eq?| |ans`2702*| #t)
                                    (|.core-hashtable-set!|
                                      |ht`2675*|
                                      (|.car| |b`2677*|)
                                      (|.cdr| |b`2677*|)))))))
                       (|.unspecified|))))))
         (|.core-hashtable->alist| |core.optimize'ht-variable-binding|))))
   (call
     (push.close
       (1 0)
       (cdr.iloc (0 . 0) "../stdlib/core/optimize.scm" . 720931)
       (if.not.symbol?.ret.const . #f)
       (push.iloc.1 . 0)
       (push.cdr.iloc (0 . 0) "../stdlib/core/optimize.scm" . 721973)
       (ret.subr.gloc.of |.core-hashtable-delete!| "../stdlib/core/optimize.scm" . 721946))
     (push.iloc.0 . 0)
     (push.subr.gloc.of |.core-hashtable->alist| 1 "../stdlib/core/optimize.scm" . 722963)
     (apply.gloc.of |.for-each| "../stdlib/core/optimize.scm" . 719881))
   (ret.iloc 0 . 0))
 (set.gloc.of |core.optimize'crawl-beta-subst|)
 (close
   (2 0 . |core.optimize'check-stackable-each|)
   (extend.enclose+
     (1 0 . loop)
     (iloc.0 . 0)
     (if.null?.ret.const . #t)
     (call
       (push.iloc 2 . 0)
       (push.car.iloc (0 . 0) "../stdlib/core/optimize.scm" . 730151)
       (push.const . #f)
       (apply.gloc.of |core.optimize'check-stackable| "../stdlib/core/optimize.scm" . 730130))
     (if.false.ret)
     (push.cdr.iloc (0 . 0) "../stdlib/core/optimize.scm" . 731160)
     (apply.iloc+ (1 . 0) "../stdlib/core/optimize.scm" . 731154))
   (push.iloc.1 . 1)
   (apply.iloc+ (0 . 0) "../stdlib/core/optimize.scm" . 729097))
 (set.gloc.of |core.optimize'check-stackable-each|)
 (close
   (3 0 . |core.optimize'check-stackable-seq|)
   (extend.enclose+
     (1 0 . loop)
     (iloc.0 . 0)
     (if.null?.ret.const . #t)
     (call
       (push.iloc 2 . 0)
       (push.car.iloc (0 . 0) "../stdlib/core/optimize.scm" . 737319)
       (call
         (iloc 2 . 2)
         (if.false.ret)
         (cdr.iloc (0 . 0) "../stdlib/core/optimize.scm" . 737346)
         (ret.null? "../stdlib/core/optimize.scm" . 737339))
       (push)
       (apply.gloc.of |core.optimize'check-stackable| "../stdlib/core/optimize.scm" . 737298))
     (if.false.ret)
     (push.cdr.iloc (0 . 0) "../stdlib/core/optimize.scm" . 738328)
     (apply.iloc+ (1 . 0) "../stdlib/core/optimize.scm" . 738322))
   (push.iloc.1 . 1)
   (apply.iloc+ (0 . 0) "../stdlib/core/optimize.scm" . 736265))
 (set.gloc.of |core.optimize'check-stackable-seq|)
 (close
   (3 0 . |core.optimize'check-stackable|)
   (iloc.0 . 1)
   (if.pair?
     (push.car.iloc (0 . 1) "../stdlib/core/optimize.scm" . 743444)
     (extend . 1)
     (push.iloc.0 . 0)
     (const . lambda)
     (if.eq?
       (push.iloc.1 . 0)
       (push.cddr.iloc (1 . 1) "../stdlib/core/optimize.scm" . 745514)
       (push.const . #f)
       (apply.gloc.of |core.optimize'check-stackable-seq| "../stdlib/core/optimize.scm" . 745489))
     (push.iloc.0 . 0)
     (push.const begin and or)
     (subr.gloc.of |.memq| 2 "../stdlib/core/optimize.scm" . 745489)
     (if.true
       (push.iloc.1 . 0)
       (push.cdr.iloc (1 . 1) "../stdlib/core/optimize.scm" . 747562)
       (push.iloc.1 . 2)
       (apply.gloc.of |core.optimize'check-stackable-seq| "../stdlib/core/optimize.scm" . 747537))
     (push.iloc.0 . 0)
     (const . let)
     (if.eq?
       (call
         (push.close
           (1 0)
           (push.iloc 2 . 0)
           (push.cadr.iloc (0 . 0) "../stdlib/core/optimize.scm" . 749632)
           (push.const . #f)
           (apply.gloc.of |core.optimize'check-stackable| "../stdlib/core/optimize.scm" . 749611))
         (push.cadr.iloc (1 . 1) "../stdlib/core/optimize.scm" . 749646)
         (apply.gloc.of |core.lists'for-all| "../stdlib/core/optimize.scm" . 749590))
       (if.false.ret)
       (push.iloc.1 . 0)
       (push.cddr.iloc (1 . 1) "../stdlib/core/optimize.scm" . 750639)
       (push.iloc.1 . 2)
       (apply.gloc.of |core.optimize'check-stackable-seq| "../stdlib/core/optimize.scm" . 750614))
     (push.iloc.0 . 0)
     (const . letrec*)
     (if.eq?
       (iloc.1 . 2)
       (if.true
         (call
           (iloc.1 . 1)
           (if.not.pair?.ret.const . #f)
           (cdr.iloc (1 . 1) (cdr |form`2722*|))
           (if.not.pair?.ret.const . #f)
           (cadr.iloc (1 . 1) (cadr |form`2722*|))
           (if.not.pair?.ret.const . #f)
           (push.iloc.1 . 1)
           (subr.gloc.of caadr 1 (caadr |form`2722*|))
           (if.not.pair?.ret.const . #f)
           (push.iloc.1 . 1)
           (subr.gloc.of cdaadr 1 (cdaadr |form`2722*|))
           (if.not.pair?.ret.const . #f)
           (push.iloc.1 . 1)
           (push.subr.gloc.of cdaadr 1 (cdaadr |form`2722*|))
           (subr.gloc.of car 1 (car (cdaadr |form`2722*|)))
           (if.not.pair?.ret.const . #f)
           (push.iloc.1 . 1)
           (push.subr.gloc.of cdaadr 1 (cdaadr |form`2722*|))
           (subr.gloc.of cdar 1 (cdar (cdaadr |form`2722*|)))
           (if.not.pair?.ret.const . #f)
           (cddr.iloc (1 . 1) (cddr |form`2722*|))
           (if.not.pair?.ret.const . #f)
           (push.iloc.1 . 1)
           (subr.gloc.of caddr 1 (caddr |form`2722*|))
           (if.not.pair?.ret.const . #f)
           (push.iloc.1 . 1)
           (push.subr.gloc.of cdaadr 1 (cdaadr |form`2722*|))
           (subr.gloc.of cdr 1 (cdr (cdaadr |form`2722*|)))
           (if.not.null?.ret.const . #f)
           (push.iloc.1 . 1)
           (subr.gloc.of cdadr 1 (cdadr |form`2722*|))
           (if.not.null?.ret.const . #f)
           (push.iloc.1 . 1)
           (subr.gloc.of cdddr 1 (cdddr |form`2722*|))
           (if.not.null?.ret.const . #f)
           (push.iloc.1 . 1)
           (push.subr.gloc.of cdaadr 1 (cdaadr |form`2722*|))
           (push.subr.gloc.of caar 1 (caar (cdaadr |form`2722*|)))
           (const . lambda)
           (if.not.eq?.ret.const . #f)
           (push.iloc.1 . 1)
           (push.subr.gloc.of caaadr 1 (caaadr |form`2722*|))
           (push.iloc.1 . 1)
           (subr.gloc.of caaddr 1 (caaddr |form`2722*|))
           (ret.eq? (|.eq?| (caaadr |form`2722*|) (caaddr |form`2722*|))))
         (if.true
           (push.iloc.1 . 1)
           (push.subr.gloc.of cdaadr 1 (cdaadr |form`2722*|))
           (push.subr.gloc.of cddar 1 (cddar (cdaadr |form`2722*|)))
           (extend . 1)
           (call
             (push.iloc 2 . 0)
             (push.iloc 2 . 1)
             (push.subr.gloc.of cdaddr 1 (cdaddr |form`2722*|))
             (apply.gloc.of
               |core.optimize'check-stackable-each|
               (|core.optimize'check-stackable-each| |var`2722*| (cdaddr |form`2722*|))))
           (if.false.ret)
           (push.iloc 2 . 0)
           (push.iloc.0 . 0)
           (push.iloc 2 . 2)
           (apply.gloc.of
             |core.optimize'check-stackable-seq|
             (|core.optimize'check-stackable-seq| |var`2722*| |body`2734*| |tail`2722*|)))
         (call
           (push.close
             (1 0)
             (push.iloc 2 . 0)
             (push.cadr.iloc (0 . 0) (|.cadr| |b`2737*|))
             (push.const . #f)
             (apply.gloc.of
               |core.optimize'check-stackable|
               (|core.optimize'check-stackable| |var`2722*| (|.cadr| |b`2737*|) #f)))
           (push.cadr.iloc (1 . 1) (|.cadr| |form`2722*|))
           (apply.gloc.of
             |core.lists'for-all|
             (|core.lists'for-all|
               (lambda (|b`2737*|)
                 (|core.optimize'check-stackable| |var`2722*| (|.cadr| |b`2737*|) #f))
               (|.cadr| |form`2722*|))))
         (if.false.ret)
         (push.iloc.1 . 0)
         (push.cddr.iloc (1 . 1) (|.cddr| |form`2722*|))
         (push.iloc.1 . 2)
         (apply.gloc.of
           |core.optimize'check-stackable-seq|
           (|core.optimize'check-stackable-seq| |var`2722*| (|.cddr| |form`2722*|) |tail`2722*|)))
       (call
         (push.close
           (1 0)
           (push.iloc 2 . 0)
           (push.cadr.iloc (0 . 0) "../stdlib/core/optimize.scm" . 762951)
           (push.const . #f)
           (apply.gloc.of |core.optimize'check-stackable| "../stdlib/core/optimize.scm" . 762930))
         (push.cadr.iloc (1 . 1) "../stdlib/core/optimize.scm" . 762965)
         (apply.gloc.of |core.lists'for-all| "../stdlib/core/optimize.scm" . 762909))
       (if.false.ret)
       (push.iloc.1 . 0)
       (push.cddr.iloc (1 . 1) "../stdlib/core/optimize.scm" . 763958)
       (push.iloc.1 . 2)
       (apply.gloc.of |core.optimize'check-stackable-seq| "../stdlib/core/optimize.scm" . 763933))
     (push.iloc.0 . 0)
     (const . if)
     (if.eq?
       (call
         (push.iloc.1 . 0)
         (push.cadr.iloc (1 . 1) "../stdlib/core/optimize.scm" . 765995)
         (push.const . #f)
         (apply.gloc.of |core.optimize'check-stackable| "../stdlib/core/optimize.scm" . 765974))
       (if.false.ret)
       (call
         (push.iloc.1 . 0)
         (push.iloc.1 . 1)
         (push.subr.gloc.of |.caddr| 1 "../stdlib/core/optimize.scm" . 767019)
         (push.iloc.1 . 2)
         (apply.gloc.of |core.optimize'check-stackable| "../stdlib/core/optimize.scm" . 766998))
       (if.false.ret)
       (push.iloc.1 . 1)
       (subr.gloc.of |.cdddr| 1 "../stdlib/core/optimize.scm" . 768033)
       (if.null?.ret.const . #t)
       (push.iloc.1 . 0)
       (push.iloc.1 . 1)
       (push.subr.gloc.of |.cadddr| 1 "../stdlib/core/optimize.scm" . 768068)
       (push.iloc.1 . 2)
       (apply.gloc.of |core.optimize'check-stackable| "../stdlib/core/optimize.scm" . 768047))
     (push.iloc.0 . 0)
     (const . quote)
     (if.eq?.ret.const . #t)
     (car.iloc (1 . 1) "../stdlib/core/optimize.scm" . 771105)
     (if.symbol?
       (push.car.iloc (1 . 1) "../stdlib/core/optimize.scm" . 772129)
       (iloc.1 . 0)
       (if.eq?
         (iloc.1 . 2)
         (if.false.ret)
         (push.iloc.1 . 0)
         (push.cdr.iloc (1 . 1) "../stdlib/core/optimize.scm" . 773184)
         (apply.gloc.of
           |core.optimize'check-stackable-each|
           "../stdlib/core/optimize.scm"
           .
           773158))
       (push.iloc.1 . 0)
       (push.cdr.iloc (1 . 1) "../stdlib/core/optimize.scm" . 774198)
       (apply.gloc.of |core.optimize'check-stackable-each| "../stdlib/core/optimize.scm" . 774172))
     (push.iloc.1 . 0)
     (push.iloc.1 . 1)
     (apply.gloc.of |core.optimize'check-stackable-each| "../stdlib/core/optimize.scm" . 776216))
   (ret.const . #t))
 (set.gloc.of |core.optimize'check-stackable|)
 (close
   (3 0 . |core.optimize'transcribe-each|)
   (extend.enclose+
     (1 0 . loop)
     (iloc.0 . 0)
     (if.null?.ret.const)
     (call
       (push.car.iloc (0 . 0) "../stdlib/core/optimize.scm" . 784422)
       (push.iloc 2 . 1)
       (push.iloc 2 . 2)
       (apply.gloc.of |core.optimize'transcribe| "../stdlib/core/optimize.scm" . 784410))
     (push)
     (call
       (push.cdr.iloc (0 . 0) "../stdlib/core/optimize.scm" . 784455)
       (apply.iloc+ (1 . 0) "../stdlib/core/optimize.scm" . 784449))
     (push)
     (extend . 2)
     (call
       (push.iloc.0 . 0)
       (car.iloc (1 . 0) "../stdlib/core/optimize.scm" . 785443)
       (if.not.eq?.ret.const . #f)
       (push.iloc.0 . 1)
       (cdr.iloc (1 . 0) "../stdlib/core/optimize.scm" . 785462)
       (ret.eq? "../stdlib/core/optimize.scm" . 785454))
     (if.true (ret.iloc 1 . 0))
     (push.iloc.0 . 0)
     (iloc.0 . 1)
     (ret.cons "../stdlib/core/optimize.scm" . 787478))
   (push.iloc.1 . 0)
   (apply.iloc+ (0 . 0) "../stdlib/core/optimize.scm" . 782345))
 (set.gloc.of |core.optimize'transcribe-each|)
 (close
   (3 0 . |core.optimize'transcribe-binding-construct|)
   (push.cddr.iloc (0 . 0) "../stdlib/core/optimize.scm" . 797737)
   (extend . 1)
   (call
     (push.gloc.of |.car|)
     (push.cadr.iloc (1 . 0) "../stdlib/core/optimize.scm" . 797718)
     (apply.gloc.of |.map| "../stdlib/core/optimize.scm" . 798741))
   (push)
   (call
     (push.gloc.of |.cadr|)
     (push.cadr.iloc (1 . 0) "../stdlib/core/optimize.scm" . 797718)
     (apply.gloc.of |.map| "../stdlib/core/optimize.scm" . 798767))
   (push)
   (extend . 2)
   (call
     (push.car.iloc (2 . 0) "../stdlib/core/optimize.scm" . 799777)
     (const . letrec*)
     (if.eq?
       (push.close
         (1 0)
         (push.iloc 3 . 2)
         (push.iloc.0 . 0)
         (subr.gloc.of |.core-hashtable-contains?| 2 "../stdlib/core/optimize.scm" . 801831)
         (if.true.ret)
         (push.iloc 3 . 1)
         (push.iloc.0 . 0)
         (subr.gloc.of |.core-hashtable-contains?| 2 "../stdlib/core/optimize.scm" . 802855)
         (if.true.ret)
         (call
           (push.gloc.of |core.optimize'ht-variable-pinned|)
           (push.iloc.0 . 0)
           (subr.gloc.of |.core-hashtable-contains?| 2 "../stdlib/core/optimize.scm" . 803884)
           (if.false.ret)
           (ret.iloc 0 . 0))
         (if.true.ret)
         (push.gloc.of |core.optimize'ht-variable-refc|)
         (push.iloc.0 . 0)
         (subr.gloc.of |.core-hashtable-contains?| 2 "../stdlib/core/optimize.scm" . 804908)
         (if.false.ret)
         (ret.iloc 0 . 0))
       (push.iloc.0 . 0)
       (apply.gloc.of |.map| "../stdlib/core/optimize.scm" . 800796))
     (push.close
       (1 0)
       (push.iloc 3 . 2)
       (push.iloc.0 . 0)
       (subr.gloc.of |.core-hashtable-contains?| 2 "../stdlib/core/optimize.scm" . 807975)
       (if.true.ret)
       (push.iloc 3 . 1)
       (push.iloc.0 . 0)
       (subr.gloc.of |.core-hashtable-contains?| 2 "../stdlib/core/optimize.scm" . 808999)
       (if.true.ret)
       (push.gloc.of |core.optimize'ht-variable-refc|)
       (push.iloc.0 . 0)
       (subr.gloc.of |.core-hashtable-contains?| 2 "../stdlib/core/optimize.scm" . 810028)
       (if.false.ret)
       (ret.iloc 0 . 0))
     (push.iloc.0 . 0)
     (apply.gloc.of |.map| "../stdlib/core/optimize.scm" . 806940))
   (push)
   (extend . 1)
   (call
     (push.gloc.of |.symbol?|)
     (push.iloc.0 . 0)
     (apply.gloc.of |core.lists'for-all| "../stdlib/core/optimize.scm" . 812052))
   (if.true
     (call
       (push.iloc 2 . 0)
       (push.iloc 3 . 1)
       (push.iloc 3 . 2)
       (apply.gloc.of |core.optimize'transcribe-each| "../stdlib/core/optimize.scm" . 813092))
     (push)
     (extend . 1)
     (call
       (push.iloc 2 . 1)
       (push.iloc 4 . 1)
       (push.iloc 4 . 2)
       (apply.gloc.of |core.optimize'transcribe-each| "../stdlib/core/optimize.scm" . 814119))
     (push)
     (extend . 1)
     (call
       (call
         (push.gloc.of |.eq?|)
         (push.iloc 3 . 1)
         (push.iloc.0 . 0)
         (apply.gloc.of |core.lists'for-all| "../stdlib/core/optimize.scm" . 815140))
       (if.false.ret)
       (push.gloc.of |.eq?|)
       (push.iloc 4 . 0)
       (push.iloc.1 . 0)
       (apply.gloc.of |core.lists'for-all| "../stdlib/core/optimize.scm" . 815170))
     (if.true (ret.iloc 5 . 0))
     (push.car.iloc (5 . 0) "../stdlib/core/optimize.scm" . 816173)
     (call
       (push.gloc.of |.list|)
       (push.iloc 3 . 0)
       (push.iloc.0 . 0)
       (apply.gloc.of |.map| "../stdlib/core/optimize.scm" . 816185))
     (push)
     (push.iloc.1 . 0)
     (push.subr.gloc.of |.cons*| 3 "../stdlib/core/optimize.scm" . 816164)
     (extend . 1)
     (push.iloc.0 . 0)
     (iloc 6 . 0)
     (if.eq? (ret.iloc 0 . 0))
     (call
       (push.iloc.0 . 0)
       (push.iloc 6 . 0)
       (call (apply.gloc.of |core.optimize'annotate-hook| (|core.optimize'annotate-hook|)))
       (apply))
     (ret.iloc 0 . 0))
   (call
     (push.iloc 2 . 0)
     (push.iloc 3 . 1)
     (push.iloc 3 . 2)
     (apply.gloc.of |core.optimize'transcribe-each| "../stdlib/core/optimize.scm" . 818212))
   (push)
   (extend . 1)
   (push.close
     (0 0)
     (extend.enclose+
       (5 0 . loop)
       (iloc.0 . 0)
       (if.null?
         (push.iloc.0 . 3)
         (push.subr.gloc.of |.reverse| 1 "../stdlib/core/optimize.scm" . 822325)
         (push.iloc.0 . 4)
         (push.subr.gloc.of |.reverse| 1 "../stdlib/core/optimize.scm" . 823349)
         (ret.subr.gloc.of |.values| "../stdlib/core/optimize.scm" . 822317))
       (push.car.iloc (0 . 1) "../stdlib/core/optimize.scm" . 824370)
       (const . #t)
       (if.eq?
         (push.cdr.iloc (0 . 0) "../stdlib/core/optimize.scm" . 825395)
         (push.cdr.iloc (0 . 1) "../stdlib/core/optimize.scm" . 825406)
         (push.cdr.iloc (0 . 2) "../stdlib/core/optimize.scm" . 825418)
         (push.iloc.0 . 3)
         (push.iloc.0 . 4)
         (apply.iloc+ (1 . 0) "../stdlib/core/optimize.scm" . 825389))
       (push.car.iloc (0 . 1) "../stdlib/core/optimize.scm" . 828466)
       (const . #f)
       (if.eq?
         (call
           (push.car.iloc (0 . 2) "../stdlib/core/optimize.scm" . 829500)
           (apply.gloc.of |core.optimize'function?| "../stdlib/core/optimize.scm" . 829489))
         (if.true
           (push.cdr.iloc (0 . 0) "../stdlib/core/optimize.scm" . 830519)
           (push.cdr.iloc (0 . 1) "../stdlib/core/optimize.scm" . 830530)
           (push.cdr.iloc (0 . 2) "../stdlib/core/optimize.scm" . 830542)
           (push.iloc.0 . 3)
           (push.iloc.0 . 4)
           (apply.iloc+ (1 . 0) "../stdlib/core/optimize.scm" . 830513))
         (push.cdr.iloc (0 . 0) "../stdlib/core/optimize.scm" . 833591)
         (push.cdr.iloc (0 . 1) "../stdlib/core/optimize.scm" . 833602)
         (push.cdr.iloc (0 . 2) "../stdlib/core/optimize.scm" . 833614)
         (call
           (push.car.iloc (0 . 2) "../stdlib/core/optimize.scm" . 834633)
           (push.iloc 7 . 1)
           (push.iloc 7 . 2)
           (apply.gloc.of |core.optimize'transcribe| "../stdlib/core/optimize.scm" . 834621))
         (push)
         (iloc.0 . 3)
         (push.cons)
         (push.iloc.0 . 4)
         (apply.iloc+ (1 . 0) "../stdlib/core/optimize.scm" . 833585))
       (car.iloc (0 . 1) "../stdlib/core/optimize.scm" . 836662)
       (if.symbol?
         (push.cdr.iloc (0 . 0) "../stdlib/core/optimize.scm" . 837683)
         (push.cdr.iloc (0 . 1) "../stdlib/core/optimize.scm" . 837694)
         (push.cdr.iloc (0 . 2) "../stdlib/core/optimize.scm" . 837706)
         (push.iloc.0 . 3)
         (push.car.iloc (0 . 0) "../stdlib/core/optimize.scm" . 839743)
         (call
           (push.car.iloc (0 . 2) "../stdlib/core/optimize.scm" . 839766)
           (push.iloc 7 . 1)
           (push.iloc 7 . 2)
           (apply.gloc.of |core.optimize'transcribe| "../stdlib/core/optimize.scm" . 839754))
         (push)
         (push.subr.gloc.of |.list| 2 "../stdlib/core/optimize.scm" . 839737)
         (iloc.0 . 4)
         (push.cons)
         (apply.iloc+ (1 . 0) "../stdlib/core/optimize.scm" . 837677))
       (ret.const.unspec))
     (push.iloc 4 . 0)
     (push.iloc 3 . 0)
     (push.iloc 4 . 1)
     (push.const)
     (push.const)
     (apply.iloc+ (0 . 0) "../stdlib/core/optimize.scm" . 821286))
   (push.close
     (2 0)
     (iloc.0 . 0)
     (if.null?
       (push.car.iloc (5 . 0) "../stdlib/core/optimize.scm" . 841768)
       (push.iloc.0 . 1)
       (push.iloc.1 . 0)
       (push.subr.gloc.of |.cons*| 3 "../stdlib/core/optimize.scm" . 841759)
       (extend . 1)
       (push.iloc.0 . 0)
       (iloc 6 . 0)
       (if.eq? (ret.iloc 0 . 0))
       (call
         (push.iloc.0 . 0)
         (push.iloc 6 . 0)
         (call (apply.gloc.of |core.optimize'annotate-hook| (|core.optimize'annotate-hook|)))
         (apply))
       (ret.iloc 0 . 0))
     (push.car.iloc (5 . 0) "../stdlib/core/optimize.scm" . 843819)
     (const . let)
     (if.eq?
       (push.const . begin)
       (push.iloc.0 . 0)
       (push.car.iloc (5 . 0) "../stdlib/core/optimize.scm" . 844863)
       (push.iloc.0 . 1)
       (push.iloc.1 . 0)
       (push.subr.gloc.of |.cons*| 3 "../stdlib/core/optimize.scm" . 844863)
       (push.subr.gloc.of |.list| 1 "../stdlib/core/optimize.scm" . 844863)
       (subr.gloc.of |.append| 2 "../stdlib/core/optimize.scm" . 844863)
       (push.cons)
       (extend . 1)
       (push.iloc.0 . 0)
       (iloc 6 . 0)
       (if.eq? (ret.iloc 0 . 0))
       (call
         (push.iloc.0 . 0)
         (push.iloc 6 . 0)
         (call (apply.gloc.of |core.optimize'annotate-hook| (|core.optimize'annotate-hook|)))
         (apply))
       (ret.iloc 0 . 0))
     (push.car.iloc (5 . 0) "../stdlib/core/optimize.scm" . 845867)
     (const . letrec*)
     (if.eq?
       (push.car.iloc (5 . 0) "../stdlib/core/optimize.scm" . 846895)
       (push.iloc.0 . 1)
       (push.iloc.0 . 0)
       (push.iloc.1 . 0)
       (push.subr.gloc.of |.append| 2 (|.append| |motion`2775*| |new-body`2773*|))
       (push.subr.gloc.of |.cons*| 3 "../stdlib/core/optimize.scm" . 846886)
       (extend . 1)
       (push.iloc.0 . 0)
       (iloc 6 . 0)
       (if.eq? (ret.iloc 0 . 0))
       (call
         (push.iloc.0 . 0)
         (push.iloc 6 . 0)
         (call (apply.gloc.of |core.optimize'annotate-hook| (|core.optimize'annotate-hook|)))
         (apply))
       (ret.iloc 0 . 0))
     (push.const . "coreform-optimize")
     (push.const . "internal inconsistency in ~s")
     (push.gloc.of |core.optimize'transcribe-binding-construct|)
     (push.subr.gloc.of |.format| 2 "../stdlib/core/optimize.scm" . 848975)
     (push.iloc 5 . 0)
     (apply.gloc.of |.assertion-violation| "../stdlib/core/optimize.scm" . 848934))
   (apply.gloc.of
     |.call-with-values|
     (|.call-with-values|
       (lambda ()
         (letrec* ((|loop`2778*|
                     (lambda (|vars`2779*|
                               |flags`2779*|
                               |inits`2779*|
                               |motion`2779*|
                               |binding`2779*|)
                       (if (|.null?| |vars`2779*|)
                           (|.values| (|.reverse| |motion`2779*|) (|.reverse| |binding`2779*|))
                           (if (|.eq?| (|.car| |flags`2779*|) #t)
                               (|loop`2778*|
                                 (|.cdr| |vars`2779*|)
                                 (|.cdr| |flags`2779*|)
                                 (|.cdr| |inits`2779*|)
                                 |motion`2779*|
                                 |binding`2779*|)
                               (if (|.eq?| (|.car| |flags`2779*|) #f)
                                   (if (|core.optimize'function?| (|.car| |inits`2779*|))
                                       (|loop`2778*|
                                         (|.cdr| |vars`2779*|)
                                         (|.cdr| |flags`2779*|)
                                         (|.cdr| |inits`2779*|)
                                         |motion`2779*|
                                         |binding`2779*|)
                                       (|loop`2778*|
                                         (|.cdr| |vars`2779*|)
                                         (|.cdr| |flags`2779*|)
                                         (|.cdr| |inits`2779*|)
                                         (|.cons|
                                           (|core.optimize'transcribe|
                                             (|.car| |inits`2779*|)
                                             |lift`2751*|
                                             |subst`2751*|)
                                           |motion`2779*|)
                                         |binding`2779*|))
                                   (if (|.symbol?| (|.car| |flags`2779*|))
                                       (|loop`2778*|
                                         (|.cdr| |vars`2779*|)
                                         (|.cdr| |flags`2779*|)
                                         (|.cdr| |inits`2779*|)
                                         |motion`2779*|
                                         (|.cons|
                                           (|.list|
                                             (|.car| |vars`2779*|)
                                             (|core.optimize'transcribe|
                                               (|.car| |inits`2779*|)
                                               |lift`2751*|
                                               |subst`2751*|))
                                           |binding`2779*|))
                                       (|.unspecified|))))))))
           (|loop`2778*| |vars`2758*| |flags`2764*| |inits`2758*| '() '())))
       (lambda (|motion`2775*| |binding`2775*|)
         (if (|.null?| |motion`2775*|)
             (let ((|new`2783`2784*|
                     (|.cons*| (|.car| |form`2751*|) |binding`2775*| |new-body`2773*|)))
               (if (|.eq?| |new`2783`2784*| |form`2751*|)
                   |new`2783`2784*|
                   (begin
                     ((|core.optimize'annotate-hook|) |new`2783`2784*| |form`2751*|)
                     |new`2783`2784*|)))
             (if (|.eq?| (|.car| |form`2751*|) 'let)
                 (let ((|new`2786`2787*|
                         (|.cons|
                           'begin
                           (|.append|
                             |motion`2775*|
                             (|.list|
                               (|.cons*|
                                 (|.car| |form`2751*|)
                                 |binding`2775*|
                                 |new-body`2773*|))))))
                   (if (|.eq?| |new`2786`2787*| |form`2751*|)
                       |new`2786`2787*|
                       (begin
                         ((|core.optimize'annotate-hook|) |new`2786`2787*| |form`2751*|)
                         |new`2786`2787*|)))
                 (if (|.eq?| (|.car| |form`2751*|) 'letrec*)
                     (let ((|new`2789`2790*|
                             (|.cons*|
                               (|.car| |form`2751*|)
                               |binding`2775*|
                               (|.append| |motion`2775*| |new-body`2773*|))))
                       (if (|.eq?| |new`2789`2790*| |form`2751*|)
                           |new`2789`2790*|
                           (begin
                             ((|core.optimize'annotate-hook|) |new`2789`2790*| |form`2751*|)
                             |new`2789`2790*|)))
                     (|.assertion-violation|
                       "coreform-optimize"
                       (|.format|
                         "internal inconsistency in ~s"
                         |core.optimize'transcribe-binding-construct|)
                       |form`2751*|))))))))
 (set.gloc.of |core.optimize'transcribe-binding-construct|)
 (close
   (3 0 . |core.optimize'transcribe|)
   (iloc.0 . 0)
   (if.pair?
     (push.car.iloc (0 . 0) "../stdlib/core/optimize.scm" . 865300)
     (extend . 1)
     (push.iloc.0 . 0)
     (push.const let letrec*)
     (subr.gloc.of |.memq| 2 "../stdlib/core/optimize.scm" . 866321)
     (if.true
       (push.iloc.1 . 0)
       (push.iloc.1 . 1)
       (push.iloc.1 . 2)
       (apply.gloc.of
         |core.optimize'transcribe-binding-construct|
         "../stdlib/core/optimize.scm"
         .
         867345))
     (push.iloc.0 . 0)
     (push.const quote define lambda if)
     (subr.gloc.of |.memq| 2 "../stdlib/core/optimize.scm" . 866321)
     (if.true
       (call
         (iloc.1 . 0)
         (if.not.pair?.ret.const . #f)
         (cdr.iloc (1 . 0) (cdr |form`2792*|))
         (ret.pair? (pair? (cdr |form`2792*|))))
       (push)
       (extend . 1)
       (call
         (iloc.0 . 0)
         (if.false.ret)
         (cddr.iloc (2 . 0) (cddr |form`2792*|))
         (if.not.null?.ret.const . #f)
         (push.car.iloc (2 . 0) (car |form`2792*|))
         (const . quote)
         (ret.eq? (eq? (car |form`2792*|) 'quote)))
       (if.true (ret.iloc 2 . 0))
       (call
         (iloc.0 . 0)
         (if.false.ret)
         (push.car.iloc (2 . 0) (car |form`2792*|))
         (const . lambda)
         (ret.eq? (eq? (car |form`2792*|) 'lambda)))
       (if.true
         (push.cddr.iloc (2 . 0) (cddr |form`2792*|))
         (push.cadr.iloc (2 . 0) (cadr |form`2792*|))
         (extend . 2)
         (push.iloc 3 . 1)
         (push.iloc 3 . 0)
         (push.const . #f)
         (push.subr.gloc.of
           |.core-hashtable-ref|
           3
           (|.core-hashtable-ref| |lift`2792*| |form`2792*| #f))
         (extend . 1)
         (iloc.0 . 0)
         (if.true (push.iloc.0 . 0) (ret.subr.gloc.of |.values| (|.values| |.L901`2812*|)))
         (call
           (push.iloc.1 . 0)
           (push.iloc 4 . 1)
           (push.iloc 4 . 2)
           (apply.gloc.of
             |core.optimize'transcribe-each|
             (|core.optimize'transcribe-each| |e2`2810*| |lift`2792*| |subst`2792*|)))
         (push)
         (extend . 1)
         (push.iloc 2 . 0)
         (iloc.0 . 0)
         (if.eq? (ret.iloc 5 . 0))
         (call
           (push.const . lambda)
           (push.iloc 2 . 1)
           (push.iloc.0 . 0)
           (push.subr.gloc.of |.cons*| 3 (|.cons*| 'lambda |e1`2810*| |e2a`2814*|))
           (extend . 1)
           (push.iloc.0 . 0)
           (iloc 6 . 0)
           (if.eq? (ret.iloc 0 . 0))
           (call
             (push.iloc.0 . 0)
             (push.iloc 6 . 0)
             (call
               (apply.gloc.of
                 |core.optimize'annotate-closure-hook|
                 (|core.optimize'annotate-closure-hook|)))
             (apply))
           (ret.iloc 0 . 0))
         (push)
         (extend . 1)
         (push.iloc.0 . 0)
         (iloc 6 . 0)
         (if.eq? (ret.iloc 0 . 0))
         (call
           (push.iloc.0 . 0)
           (push.iloc 6 . 0)
           (call (apply.gloc.of |core.optimize'annotate-hook| (|core.optimize'annotate-hook|)))
           (apply))
         (ret.iloc 0 . 0))
       (call
         (iloc.0 . 0)
         (if.false.ret)
         (cddr.iloc (2 . 0) (cddr |form`2792*|))
         (if.not.pair?.ret.const . #f)
         (push.iloc 2 . 0)
         (subr.gloc.of caddr 1 (caddr |form`2792*|))
         (if.not.pair?.ret.const . #f)
         (push.iloc 2 . 0)
         (subr.gloc.of cdaddr 1 (cdaddr |form`2792*|))
         (if.not.pair?.ret.const . #f)
         (push.iloc 2 . 0)
         (subr.gloc.of cdddr 1 (cdddr |form`2792*|))
         (if.not.null?.ret.const . #f)
         (push.car.iloc (2 . 0) (car |form`2792*|))
         (const . define)
         (if.not.eq?.ret.const . #f)
         (push.iloc 2 . 0)
         (push.subr.gloc.of caaddr 1 (caaddr |form`2792*|))
         (const . lambda)
         (ret.eq? (eq? (caaddr |form`2792*|) 'lambda)))
       (if.true
         (push.iloc 2 . 0)
         (push.subr.gloc.of cdaddr 1 (cdaddr |form`2792*|))
         (push.subr.gloc.of cdr 1 (cdr (cdaddr |form`2792*|)))
         (push.iloc 2 . 0)
         (push.subr.gloc.of cdaddr 1 (cdaddr |form`2792*|))
         (push.subr.gloc.of car 1 (car (cdaddr |form`2792*|)))
         (push.cadr.iloc (2 . 0) (cadr |form`2792*|))
         (extend . 3)
         (call
           (push.iloc.0 . 0)
           (push.iloc 3 . 1)
           (push.iloc 3 . 2)
           (apply.gloc.of
             |core.optimize'transcribe-each|
             (|core.optimize'transcribe-each| |e3`2822*| |lift`2792*| |subst`2792*|)))
         (push)
         (extend . 1)
         (push.iloc.1 . 0)
         (iloc.0 . 0)
         (if.eq? (ret.iloc 4 . 0))
         (push.const . define)
         (push.iloc.1 . 2)
         (call
           (push.const . lambda)
           (push.iloc.1 . 1)
           (push.iloc.0 . 0)
           (push.subr.gloc.of |.cons*| 3 (|.cons*| 'lambda |e2`2822*| |e3a`2824*|))
           (push.iloc 4 . 0)
           (push.subr.gloc.of |.caddr| 1 (|.caddr| |form`2792*|))
           (extend . 2)
           (push.iloc.0 . 0)
           (iloc.0 . 1)
           (if.eq? (ret.iloc 0 . 0))
           (call
             (push.iloc.0 . 0)
             (push.iloc.0 . 1)
             (call
               (apply.gloc.of
                 |core.optimize'annotate-closure-hook|
                 (|core.optimize'annotate-closure-hook|)))
             (apply))
           (ret.iloc 0 . 0))
         (push)
         (push.subr.gloc.of
           |.list|
           3
           (|.list|
             'define
             |e1`2822*|
             (let ((|new`2826`2827*| (|.cons*| 'lambda |e2`2822*| |e3a`2824*|))
                   (|soruce`2826`2827*| (|.caddr| |form`2792*|)))
               (if (|.eq?| |new`2826`2827*| |soruce`2826`2827*|)
                   |new`2826`2827*|
                   (begin
                     ((|core.optimize'annotate-closure-hook|) |new`2826`2827*| |soruce`2826`2827*|)
                     |new`2826`2827*|)))))
         (extend . 1)
         (push.iloc.0 . 0)
         (iloc 5 . 0)
         (if.eq? (ret.iloc 0 . 0))
         (call
           (push.iloc.0 . 0)
           (push.iloc 5 . 0)
           (call (apply.gloc.of |core.optimize'annotate-hook| (|core.optimize'annotate-hook|)))
           (apply))
         (ret.iloc 0 . 0))
       (call
         (push.iloc 2 . 0)
         (push.iloc 2 . 1)
         (push.iloc 2 . 2)
         (apply.gloc.of
           |core.optimize'transcribe-each|
           (|core.optimize'transcribe-each| |form`2792*| |lift`2792*| |subst`2792*|)))
       (push)
       (extend . 1)
       (push.iloc.0 . 0)
       (iloc 3 . 0)
       (if.eq? (ret.iloc 0 . 0))
       (call
         (push.iloc.0 . 0)
         (push.iloc 3 . 0)
         (call (apply.gloc.of |core.optimize'annotate-hook| (|core.optimize'annotate-hook|)))
         (apply))
       (ret.iloc 0 . 0))
     (call
       (push.iloc.1 . 0)
       (push.iloc.1 . 1)
       (push.iloc.1 . 2)
       (apply.gloc.of |core.optimize'transcribe-each| "../stdlib/core/optimize.scm" . 887831))
     (push)
     (extend . 1)
     (push.iloc.0 . 0)
     (iloc 2 . 0)
     (if.eq? (ret.iloc 0 . 0))
     (call
       (push.iloc.0 . 0)
       (push.iloc 2 . 0)
       (call (apply.gloc.of |core.optimize'annotate-hook| (|core.optimize'annotate-hook|)))
       (apply))
     (ret.iloc 0 . 0))
   (iloc.0 . 0)
   (if.symbol?
     (push.iloc.0 . 2)
     (push.iloc.0 . 0)
     (push.const . #f)
     (subr.gloc.of |.core-hashtable-ref| 3 "../stdlib/core/optimize.scm" . 889874)
     (if.true.ret)
     (ret.iloc 0 . 0))
   (ret.iloc 0 . 0))
 (set.gloc.of |core.optimize'transcribe|)
 (close
   (1 0 . |core.optimize'self-evaluation?|)
   (push.iloc.0 . 0)
   (subr.gloc.of |.number?| 1 "../stdlib/core/optimize.scm" . 894987)
   (if.true.ret)
   (push.iloc.0 . 0)
   (subr.gloc.of |.boolean?| 1 "../stdlib/core/optimize.scm" . 894999)
   (if.true.ret)
   (push.iloc.0 . 0)
   (subr.gloc.of |.char?| 1 "../stdlib/core/optimize.scm" . 895012)
   (if.true.ret)
   (push.iloc.0 . 0)
   (subr.gloc.of |.string?| 1 "../stdlib/core/optimize.scm" . 895022)
   (if.true.ret)
   (push.iloc.0 . 0)
   (ret.subr.gloc.of |.bytevector?| "../stdlib/core/optimize.scm" . 895034))
 (set.gloc.of |core.optimize'self-evaluation?|)
 (close
   (1 0 . |core.optimize'pretty-each|)
   (touch.gloc.of |loop`2848*|)
   (push.iloc.0 . 0)
   (apply.gloc.of |loop`2848*| "../stdlib/core/optimize.scm" . 900105))
 (set.gloc.of |core.optimize'pretty-each|)
 (close
   (1 0 . |core.optimize'pretty|)
   (extend.enclose+
     (1 0 . divide)
     (push.gloc.of |core.optimize'limit-arguments|)
     (push.const . 1)
     (push.subr.gloc.of |.-| 2 "../stdlib/core/optimize.scm" . 938009)
     (extend . 1)
     (call
       (extend.enclose+
         (2 0 . loop)
         (push.iloc.0 . 1)
         (subr.gloc.of |.length| 1 "../stdlib/core/optimize.scm" . 940068)
         (>.iloc (2 . 0) "../stdlib/core/optimize.scm" . 940065)
         (if.true
           (push.iloc.0 . 1)
           (push.iloc 2 . 0)
           (push.subr.gloc.of |.list-head| 2 "../stdlib/core/optimize.scm" . 941101)
           (iloc.0 . 0)
           (push.cons)
           (push.iloc.0 . 1)
           (push.iloc 2 . 0)
           (push.subr.gloc.of |.list-tail| 2 "../stdlib/core/optimize.scm" . 942119)
           (apply.iloc+ (1 . 0) "../stdlib/core/optimize.scm" . 941089))
         (push.iloc.0 . 1)
         (iloc.0 . 0)
         (push.cons)
         (ret.subr.gloc.of |.reverse| "../stdlib/core/optimize.scm" . 943142))
       (push.const)
       (push.cdr.iloc (2 . 0) "../stdlib/core/optimize.scm" . 939059)
       (apply.iloc+ (0 . 0) "../stdlib/core/optimize.scm" . 940058))
     (push)
     (extend . 1)
     (call
       (car.iloc (2 . 0) "../stdlib/core/optimize.scm" . 944159)
       (if.not.symbol?.ret.const . #f)
       (push.car.iloc (2 . 0) "../stdlib/core/optimize.scm" . 945192)
       (subr.gloc.of |.top-level-bound?| 1 "../stdlib/core/optimize.scm" . 945174)
       (if.false.ret)
       (push.car.iloc (2 . 0) "../stdlib/core/optimize.scm" . 946220)
       (push.subr.gloc.of |.top-level-value| 1 "../stdlib/core/optimize.scm" . 946203)
       (push.const . |.list|)
       (subr.gloc.of |.top-level-value| 1 "../stdlib/core/optimize.scm" . 946232)
       (ret.eq? "../stdlib/core/optimize.scm" . 946198))
     (if.true
       (call
         (push.const . |.append|)
         (call
           (push.gloc.of |.L972|)
           (push.iloc.0 . 0)
           (apply.gloc.of |.map| "../stdlib/core/optimize.scm" . 947243))
         (push.cons)
         (apply.gloc.of |core.optimize'pretty| "../stdlib/core/optimize.scm" . 947223))
       (push)
       (extend . 1)
       (push.iloc.0 . 0)
       (iloc 5 . 0)
       (if.eq? (ret.iloc 0 . 0))
       (call
         (push.iloc.0 . 0)
         (push.iloc 5 . 0)
         (call (apply.gloc.of |core.optimize'annotate-hook| (|core.optimize'annotate-hook|)))
         (apply))
       (ret.iloc 0 . 0))
     (call
       (push.const . |.apply|)
       (push.car.iloc (2 . 0) "../stdlib/core/optimize.scm" . 948265)
       (push.const . |.append|)
       (call
         (push.gloc.of |.L960|)
         (push.iloc.0 . 0)
         (apply.gloc.of |.map| "../stdlib/core/optimize.scm" . 948287))
       (push.cons)
       (push.subr.gloc.of |.list| 3 "../stdlib/core/optimize.scm" . 948247)
       (apply.gloc.of |core.optimize'pretty| "../stdlib/core/optimize.scm" . 948247))
     (push)
     (extend . 1)
     (push.iloc.0 . 0)
     (iloc 5 . 0)
     (if.eq? (ret.iloc 0 . 0))
     (call
       (push.iloc.0 . 0)
       (push.iloc 5 . 0)
       (call (apply.gloc.of |core.optimize'annotate-hook| (|core.optimize'annotate-hook|)))
       (apply))
     (ret.iloc 0 . 0))
   (iloc.1 . 0)
   (if.pair?
     (car.iloc (1 . 0) "../stdlib/core/optimize.scm" . 951318)
     (if.pair?
       (call
         (iloc.1 . 0)
         (if.not.pair?.ret.const . #f)
         (car.iloc (1 . 0) (car |form`2854*|))
         (if.not.pair?.ret.const . #f)
         (push.iloc.1 . 0)
         (subr.gloc.of cdar 1 (cdar |form`2854*|))
         (if.not.pair?.ret.const . #f)
         (push.iloc.1 . 0)
         (push.subr.gloc.of cadar 1 (cadar |form`2854*|))
         (subr.gloc.of list? 1 (list? (cadar |form`2854*|)))
         (if.false.ret)
         (push.iloc.1 . 0)
         (push.subr.gloc.of caar 1 (caar |form`2854*|))
         (const . lambda)
         (if.not.eq?.ret.const . #f)
         (push.iloc.1 . 0)
         (push.subr.gloc.of cadar 1 (cadar |form`2854*|))
         (push.subr.gloc.of |.length| 1 (|.length| (cadar |form`2854*|)))
         (push.cdr.iloc (1 . 0) (cdr |form`2854*|))
         (push.subr.gloc.of |.length| 1 (|.length| (cdr |form`2854*|)))
         (ret.subr.gloc.of
           |.=|
           (|.=| (|.length| (cadar |form`2854*|)) (|.length| (cdr |form`2854*|)))))
       (if.true
         (push.const . let)
         (call
           (push.gloc.of |.list|)
           (push.iloc.1 . 0)
           (push.subr.gloc.of cadar 1 (cadar |form`2854*|))
           (call
             (push.cdr.iloc (1 . 0) (cdr |form`2854*|))
             (apply.gloc.of
               |core.optimize'pretty-each|
               (|core.optimize'pretty-each| (cdr |form`2854*|))))
           (push)
           (apply.gloc.of
             |.map|
             (|.map|
               |.list|
               (cadar |form`2854*|)
               (|core.optimize'pretty-each| (cdr |form`2854*|)))))
         (push)
         (call
           (call
             (push.iloc.1 . 0)
             (push.subr.gloc.of cddar 1 (cddar |form`2854*|))
             (apply.gloc.of
               |core.optimize'pretty-each|
               (|core.optimize'pretty-each| (cddar |form`2854*|))))
           (push)
           (apply.gloc.of
             |core.optimize'flatten-begin|
             (|core.optimize'flatten-begin| (|core.optimize'pretty-each| (cddar |form`2854*|)))))
         (push)
         (push.subr.gloc.of
           |.cons*|
           3
           (|.cons*|
             'let
             (|.map| |.list| (cadar |form`2854*|) (|core.optimize'pretty-each| (cdr |form`2854*|)))
             (|core.optimize'flatten-begin| (|core.optimize'pretty-each| (cddar |form`2854*|)))))
         (extend . 1)
         (push.iloc.0 . 0)
         (iloc 2 . 0)
         (if.eq? (ret.iloc 0 . 0))
         (call
           (push.iloc.0 . 0)
           (push.iloc 2 . 0)
           (call (apply.gloc.of |core.optimize'annotate-hook| (|core.optimize'annotate-hook|)))
           (apply))
         (ret.iloc 0 . 0))
       (push.iloc.1 . 0)
       (push.subr.gloc.of |.length| 1 (|.length| |form`2854*|))
       (push.gloc.of |core.optimize'limit-arguments|)
       (subr.gloc.of |.>| 2 (|.>| (|.length| |form`2854*|) |core.optimize'limit-arguments|))
       (if.true (push.iloc.1 . 0) (apply.iloc+ (0 . 0) (|divide`2855*| |form`2854*|)))
       (push.iloc.1 . 0)
       (apply.gloc.of |core.optimize'pretty-each| (|core.optimize'pretty-each| |form`2854*|)))
     (push.car.iloc (1 . 0) "../stdlib/core/optimize.scm" . 961557)
     (extend . 1)
     (push.iloc.0 . 0)
     (const . and)
     (if.eq?
       (cdr.iloc (2 . 0) "../stdlib/core/optimize.scm" . 963616)
       (if.null?.ret.const . #t)
       (cddr.iloc (2 . 0) "../stdlib/core/optimize.scm" . 964640)
       (if.null?
         (push.cadr.iloc (2 . 0) "../stdlib/core/optimize.scm" . 964659)
         (extend . 1)
         (push.iloc.0 . 0)
         (iloc 3 . 0)
         (if.eq? (ret.iloc 0 . 0))
         (call
           (push.iloc.0 . 0)
           (push.iloc 3 . 0)
           (call (apply.gloc.of |core.optimize'annotate-hook| (|core.optimize'annotate-hook|)))
           (apply))
         (ret.iloc 0 . 0))
       (call
         (push.cdr.iloc (2 . 0) "../stdlib/core/optimize.scm" . 966705)
         (apply.gloc.of |core.optimize'pretty-each| "../stdlib/core/optimize.scm" . 966692))
       (push)
       (extend . 1)
       (push.iloc.0 . 0)
       (cdr.iloc (3 . 0) "../stdlib/core/optimize.scm" . 967723)
       (if.eq?
         (call
           (touch.gloc.of |flatten-expression`2855*|)
           (push.iloc 3 . 0)
           (push.const . and)
           (apply.gloc.of |flatten-expression`2855*| "../stdlib/core/optimize.scm" . 968744))
         (push)
         (extend . 1)
         (push.iloc.0 . 0)
         (iloc 4 . 0)
         (if.eq? (ret.iloc 0 . 0))
         (call
           (push.iloc.0 . 0)
           (push.iloc 4 . 0)
           (call (apply.gloc.of |core.optimize'annotate-hook| (|core.optimize'annotate-hook|)))
           (apply))
         (ret.iloc 0 . 0))
       (call
         (touch.gloc.of |flatten-expression`2855*|)
         (push.const . and)
         (iloc.0 . 0)
         (push.cons)
         (push.const . and)
         (apply.gloc.of |flatten-expression`2855*| "../stdlib/core/optimize.scm" . 970792))
       (push)
       (extend . 1)
       (push.iloc.0 . 0)
       (iloc 4 . 0)
       (if.eq? (ret.iloc 0 . 0))
       (call
         (push.iloc.0 . 0)
         (push.iloc 4 . 0)
         (call (apply.gloc.of |core.optimize'annotate-hook| (|core.optimize'annotate-hook|)))
         (apply))
       (ret.iloc 0 . 0))
     (push.iloc.0 . 0)
     (const . or)
     (if.eq?
       (cdr.iloc (2 . 0) "../stdlib/core/optimize.scm" . 972832)
       (if.null?.ret.const . #f)
       (cddr.iloc (2 . 0) "../stdlib/core/optimize.scm" . 973856)
       (if.null?
         (push.cadr.iloc (2 . 0) "../stdlib/core/optimize.scm" . 973875)
         (extend . 1)
         (push.iloc.0 . 0)
         (iloc 3 . 0)
         (if.eq? (ret.iloc 0 . 0))
         (call
           (push.iloc.0 . 0)
           (push.iloc 3 . 0)
           (call (apply.gloc.of |core.optimize'annotate-hook| (|core.optimize'annotate-hook|)))
           (apply))
         (ret.iloc 0 . 0))
       (call
         (push.cdr.iloc (2 . 0) "../stdlib/core/optimize.scm" . 975921)
         (apply.gloc.of |core.optimize'pretty-each| "../stdlib/core/optimize.scm" . 975908))
       (push)
       (extend . 1)
       (push.iloc.0 . 0)
       (cdr.iloc (3 . 0) "../stdlib/core/optimize.scm" . 976939)
       (if.eq?
         (call
           (touch.gloc.of |flatten-expression`2855*|)
           (push.iloc 3 . 0)
           (push.const . or)
           (apply.gloc.of |flatten-expression`2855*| "../stdlib/core/optimize.scm" . 977960))
         (push)
         (extend . 1)
         (push.iloc.0 . 0)
         (iloc 4 . 0)
         (if.eq? (ret.iloc 0 . 0))
         (call
           (push.iloc.0 . 0)
           (push.iloc 4 . 0)
           (call (apply.gloc.of |core.optimize'annotate-hook| (|core.optimize'annotate-hook|)))
           (apply))
         (ret.iloc 0 . 0))
       (call
         (touch.gloc.of |flatten-expression`2855*|)
         (push.const . or)
         (iloc.0 . 0)
         (push.cons)
         (push.const . or)
         (apply.gloc.of |flatten-expression`2855*| "../stdlib/core/optimize.scm" . 980008))
       (push)
       (extend . 1)
       (push.iloc.0 . 0)
       (iloc 4 . 0)
       (if.eq? (ret.iloc 0 . 0))
       (call
         (push.iloc.0 . 0)
         (push.iloc 4 . 0)
         (call (apply.gloc.of |core.optimize'annotate-hook| (|core.optimize'annotate-hook|)))
         (apply))
       (ret.iloc 0 . 0))
     (push.iloc.0 . 0)
     (const . if)
     (if.eq?
       (push.cdr.iloc (2 . 0) (|.cdr| |form`2854*|))
       (extend . 1)
       (call
         (iloc.0 . 0)
         (if.not.pair?.ret.const . #f)
         (cdr.iloc (0 . 0) (cdr |.L906`2934`2935*|))
         (ret.pair? (pair? (cdr |.L906`2934`2935*|))))
       (push)
       (extend . 1)
       (call
         (iloc.0 . 0)
         (if.false.ret)
         (push.car.iloc (1 . 0) (car |.L906`2934`2935*|))
         (const . #t)
         (ret.eq? (eq? (car |.L906`2934`2935*|) #t)))
       (if.true
         (call
           (push.cadr.iloc (1 . 0) (cadr |.L906`2934`2935*|))
           (apply.gloc.of
             |core.optimize'pretty|
             (|core.optimize'pretty| (cadr |.L906`2934`2935*|))))
         (push)
         (extend . 1)
         (push.iloc.0 . 0)
         (iloc 5 . 0)
         (if.eq? (ret.iloc 0 . 0))
         (call
           (push.iloc.0 . 0)
           (push.iloc 5 . 0)
           (call (apply.gloc.of |core.optimize'annotate-hook| (|core.optimize'annotate-hook|)))
           (apply))
         (ret.iloc 0 . 0))
       (call
         (iloc.0 . 0)
         (if.false.ret)
         (push.car.iloc (1 . 0) (car |.L906`2934`2935*|))
         (const . #f)
         (ret.eq? (eq? (car |.L906`2934`2935*|) #f)))
       (if.true
         (push.cddr.iloc (1 . 0) (cddr |.L906`2934`2935*|))
         (extend . 1)
         (iloc.0 . 0)
         (if.null?
           (push.const |.unspecified|)
           (extend . 1)
           (push.iloc.0 . 0)
           (iloc 6 . 0)
           (if.eq? (ret.iloc 0 . 0))
           (call
             (push.iloc.0 . 0)
             (push.iloc 6 . 0)
             (call (apply.gloc.of |core.optimize'annotate-hook| (|core.optimize'annotate-hook|)))
             (apply))
           (ret.iloc 0 . 0))
         (call
           (push.car.iloc (0 . 0) (|.car| |e2`2945*|))
           (apply.gloc.of |core.optimize'pretty| (|core.optimize'pretty| (|.car| |e2`2945*|))))
         (push)
         (extend . 1)
         (push.iloc.0 . 0)
         (iloc 6 . 0)
         (if.eq? (ret.iloc 0 . 0))
         (call
           (push.iloc.0 . 0)
           (push.iloc 6 . 0)
           (call (apply.gloc.of |core.optimize'annotate-hook| (|core.optimize'annotate-hook|)))
           (apply))
         (ret.iloc 0 . 0))
       (call
         (iloc.0 . 0)
         (if.false.ret)
         (cddr.iloc (1 . 0) (cddr |.L906`2934`2935*|))
         (if.not.pair?.ret.const . #f)
         (push.iloc.1 . 0)
         (subr.gloc.of cdddr 1 (cdddr |.L906`2934`2935*|))
         (if.not.null?.ret.const . #f)
         (push.iloc.1 . 0)
         (push.subr.gloc.of caddr 1 (caddr |.L906`2934`2935*|))
         (const . #f)
         (ret.eq? (eq? (caddr |.L906`2934`2935*|) #f)))
       (if.true
         (push.cadr.iloc (1 . 0) (cadr |.L906`2934`2935*|))
         (extend . 1)
         (push.const . and)
         (call
           (push.car.iloc (2 . 0) (car |.L906`2934`2935*|))
           (apply.gloc.of |core.optimize'pretty| (|core.optimize'pretty| (car |.L906`2934`2935*|))))
         (push)
         (call
           (push.iloc.0 . 0)
           (apply.gloc.of |core.optimize'pretty| (|core.optimize'pretty| |e2`2953*|)))
         (push)
         (push.subr.gloc.of
           |.list|
           3
           (|.list|
             'and
             (|core.optimize'pretty| (car |.L906`2934`2935*|))
             (|core.optimize'pretty| |e2`2953*|)))
         (extend . 1)
         (push.iloc.0 . 0)
         (iloc 6 . 0)
         (if.eq? (ret.iloc 0 . 0))
         (call
           (push.iloc.0 . 0)
           (push.iloc 6 . 0)
           (call (apply.gloc.of |core.optimize'annotate-hook| (|core.optimize'annotate-hook|)))
           (apply))
         (ret.iloc 0 . 0))
       (call
         (iloc.1 . 0)
         (if.not.pair?.ret.const . #f)
         (car.iloc (1 . 0) (car |.L906`2934`2935*|))
         (if.not.pair?.ret.const . #f)
         (push.iloc.1 . 0)
         (subr.gloc.of cdar 1 (cdar |.L906`2934`2935*|))
         (if.not.pair?.ret.const . #f)
         (cdr.iloc (1 . 0) (cdr |.L906`2934`2935*|))
         (if.not.pair?.ret.const . #f)
         (cddr.iloc (1 . 0) (cddr |.L906`2934`2935*|))
         (if.not.pair?.ret.const . #f)
         (push.iloc.1 . 0)
         (subr.gloc.of cddar 1 (cddar |.L906`2934`2935*|))
         (if.not.null?.ret.const . #f)
         (push.iloc.1 . 0)
         (subr.gloc.of cdddr 1 (cdddr |.L906`2934`2935*|))
         (if.not.null?.ret.const . #f)
         (push.iloc.1 . 0)
         (push.subr.gloc.of caar 1 (caar |.L906`2934`2935*|))
         (const . not)
         (if.not.eq?.ret.const . #f)
         (push.const . not)
         (apply.gloc.of
           |core.optimize'primitive-function?|
           (|core.optimize'primitive-function?| 'not)))
       (if.true
         (push.iloc.1 . 0)
         (push.subr.gloc.of caddr 1 (caddr |.L906`2934`2935*|))
         (push.cadr.iloc (1 . 0) (cadr |.L906`2934`2935*|))
         (extend . 2)
         (push.const . if)
         (call
           (push.iloc 2 . 0)
           (push.subr.gloc.of cadar 1 (cadar |.L906`2934`2935*|))
           (apply.gloc.of
             |core.optimize'pretty|
             (|core.optimize'pretty| (cadar |.L906`2934`2935*|))))
         (push)
         (call
           (push.iloc.0 . 0)
           (apply.gloc.of |core.optimize'pretty| (|core.optimize'pretty| |e3`2960*|)))
         (push)
         (call
           (push.iloc.0 . 1)
           (apply.gloc.of |core.optimize'pretty| (|core.optimize'pretty| |e2`2960*|)))
         (push)
         (push.subr.gloc.of
           |.list|
           4
           (|.list|
             'if
             (|core.optimize'pretty| (cadar |.L906`2934`2935*|))
             (|core.optimize'pretty| |e3`2960*|)
             (|core.optimize'pretty| |e2`2960*|)))
         (extend . 1)
         (push.iloc.0 . 0)
         (iloc 6 . 0)
         (if.eq? (ret.iloc 0 . 0))
         (call
           (push.iloc.0 . 0)
           (push.iloc 6 . 0)
           (call (apply.gloc.of |core.optimize'annotate-hook| (|core.optimize'annotate-hook|)))
           (apply))
         (ret.iloc 0 . 0))
       (push.iloc 4 . 0)
       (apply.gloc.of |core.optimize'pretty-each| (|core.optimize'pretty-each| |form`2854*|)))
     (push.iloc.0 . 0)
     (push.const quote begin lambda let letrec*)
     (subr.gloc.of |.memq| 2 "../stdlib/core/optimize.scm" . 963602)
     (if.true
       (call
         (iloc 2 . 0)
         (if.not.pair?.ret.const . #f)
         (cdr.iloc (2 . 0) (cdr |form`2854*|))
         (ret.pair? (pair? (cdr |form`2854*|))))
       (push)
       (extend . 1)
       (call
         (iloc.0 . 0)
         (if.false.ret)
         (cddr.iloc (3 . 0) (cddr |form`2854*|))
         (if.not.null?.ret.const . #f)
         (push.car.iloc (3 . 0) (car |form`2854*|))
         (const . quote)
         (ret.eq? (eq? (car |form`2854*|) 'quote)))
       (if.true
         (call
           (push.cadr.iloc (3 . 0) (cadr |form`2854*|))
           (apply.gloc.of
             |core.optimize'self-evaluation?|
             (|core.optimize'self-evaluation?| (cadr |form`2854*|))))
         (if.true (push.iloc 3 . 0) (ret.subr.gloc.of cadr (cadr |form`2854*|)))
         (ret.iloc 3 . 0))
       (call
         (iloc 3 . 0)
         (if.not.pair?.ret.const . #f)
         (push.car.iloc (3 . 0) (car |form`2854*|))
         (const . begin)
         (ret.eq? (eq? (car |form`2854*|) 'begin)))
       (if.true
         (push.cdr.iloc (3 . 0) (cdr |form`2854*|))
         (extend . 1)
         (iloc.0 . 0)
         (if.null? (ret.iloc 4 . 0))
         (call
           (iloc.0 . 0)
           (if.not.pair?.ret.const . #f)
           (cdr.iloc (0 . 0) (|.cdr| |e1`2974*|))
           (ret.null? (|.null?| (|.cdr| |e1`2974*|))))
         (if.true (push.iloc.0 . 0) (ret.subr.gloc.of |.car| (|.car| |e1`2974*|)))
         (call
           (call
             (push.iloc.0 . 0)
             (apply.gloc.of |core.optimize'pretty-each| (|core.optimize'pretty-each| |e1`2974*|)))
           (push)
           (apply.gloc.of
             |core.optimize'flatten-begin|
             (|core.optimize'flatten-begin| (|core.optimize'pretty-each| |e1`2974*|))))
         (push)
         (extend . 1)
         (push.iloc.0 . 0)
         (iloc.1 . 0)
         (if.eq? (ret.iloc 5 . 0))
         (push.const . begin)
         (iloc.0 . 0)
         (push.cons)
         (extend . 1)
         (push.iloc.0 . 0)
         (iloc 6 . 0)
         (if.eq? (ret.iloc 0 . 0))
         (call
           (push.iloc.0 . 0)
           (push.iloc 6 . 0)
           (call (apply.gloc.of |core.optimize'annotate-hook| (|core.optimize'annotate-hook|)))
           (apply))
         (ret.iloc 0 . 0))
       (call
         (iloc.0 . 0)
         (if.false.ret)
         (push.car.iloc (3 . 0) (car |form`2854*|))
         (const . lambda)
         (ret.eq? (eq? (car |form`2854*|) 'lambda)))
       (if.true
         (push.cddr.iloc (3 . 0) (cddr |form`2854*|))
         (push.cadr.iloc (3 . 0) (cadr |form`2854*|))
         (extend . 2)
         (call
           (call
             (push.iloc.0 . 0)
             (apply.gloc.of |core.optimize'pretty-each| (|core.optimize'pretty-each| |e2`2981*|)))
           (push)
           (apply.gloc.of
             |core.optimize'flatten-begin|
             (|core.optimize'flatten-begin| (|core.optimize'pretty-each| |e2`2981*|))))
         (push)
         (extend . 1)
         (push.iloc.0 . 0)
         (iloc.1 . 0)
         (if.eq? (ret.iloc 5 . 0))
         (call
           (push.const . lambda)
           (push.iloc.1 . 1)
           (push.iloc.0 . 0)
           (push.subr.gloc.of |.cons*| 3 (|.cons*| 'lambda |e1`2981*| |e2a`2983*|))
           (extend . 1)
           (push.iloc.0 . 0)
           (iloc 6 . 0)
           (if.eq? (ret.iloc 0 . 0))
           (call
             (push.iloc.0 . 0)
             (push.iloc 6 . 0)
             (call
               (apply.gloc.of
                 |core.optimize'annotate-closure-hook|
                 (|core.optimize'annotate-closure-hook|)))
             (apply))
           (ret.iloc 0 . 0))
         (push)
         (extend . 1)
         (push.iloc.0 . 0)
         (iloc 6 . 0)
         (if.eq? (ret.iloc 0 . 0))
         (call
           (push.iloc.0 . 0)
           (push.iloc 6 . 0)
           (call (apply.gloc.of |core.optimize'annotate-hook| (|core.optimize'annotate-hook|)))
           (apply))
         (ret.iloc 0 . 0))
       (call
         (iloc.0 . 0)
         (if.false.ret)
         (push.car.iloc (3 . 0) (car |form`2854*|))
         (const . let)
         (ret.eq? (eq? (car |form`2854*|) 'let)))
       (if.true
         (push.cddr.iloc (3 . 0) (cddr |form`2854*|))
         (push.cadr.iloc (3 . 0) (cadr |form`2854*|))
         (extend . 2)
         (iloc.0 . 1)
         (if.null?
           (push.const . begin)
           (call
             (push.iloc.0 . 0)
             (apply.gloc.of
               |core.optimize'flatten-begin|
               (|core.optimize'flatten-begin| |e2`2991*|)))
           (push.cons)
           (extend . 1)
           (push.iloc.0 . 0)
           (iloc 5 . 0)
           (if.eq? (ret.iloc 0 . 0))
           (call
             (push.iloc.0 . 0)
             (push.iloc 5 . 0)
             (call (apply.gloc.of |core.optimize'annotate-hook| (|core.optimize'annotate-hook|)))
             (apply))
           (ret.iloc 0 . 0))
         (call
           (cdr.iloc (0 . 1) (|.cdr| |e1`2991*|))
           (if.not.null?.ret.const . #f)
           (cdr.iloc (0 . 0) (|.cdr| |e2`2991*|))
           (if.not.null?.ret.const . #f)
           (push.iloc.0 . 1)
           (push.subr.gloc.of |.caar| 1 (|.caar| |e1`2991*|))
           (car.iloc (0 . 0) (|.car| |e2`2991*|))
           (ret.eq? (|.eq?| (|.caar| |e1`2991*|) (|.car| |e2`2991*|))))
         (if.true
           (call
             (push.iloc.0 . 1)
             (push.subr.gloc.of |.cadar| 1 (|.cadar| |e1`2991*|))
             (apply.gloc.of |core.optimize'pretty| (|core.optimize'pretty| (|.cadar| |e1`2991*|))))
           (push)
           (extend . 1)
           (push.iloc.0 . 0)
           (iloc 5 . 0)
           (if.eq? (ret.iloc 0 . 0))
           (call
             (push.iloc.0 . 0)
             (push.iloc 5 . 0)
             (call (apply.gloc.of |core.optimize'annotate-hook| (|core.optimize'annotate-hook|)))
             (apply))
           (ret.iloc 0 . 0))
         (call
           (push.gloc.of |.cadr|)
           (push.iloc.0 . 1)
           (apply.gloc.of |.map| (|.map| |.cadr| |e1`2991*|)))
         (push)
         (extend . 1)
         (call
           (push.iloc.0 . 0)
           (apply.gloc.of |core.optimize'pretty-each| (|core.optimize'pretty-each| |e1a`2999*|)))
         (push)
         (call
           (call
             (push.iloc.1 . 0)
             (apply.gloc.of |core.optimize'pretty-each| (|core.optimize'pretty-each| |e2`2991*|)))
           (push)
           (apply.gloc.of
             |core.optimize'flatten-begin|
             (|core.optimize'flatten-begin| (|core.optimize'pretty-each| |e2`2991*|))))
         (push)
         (extend . 2)
         (call
           (push.iloc 2 . 0)
           (iloc.0 . 1)
           (if.not.eq?.ret.const . #f)
           (push.gloc.of |.eq?|)
           (push.iloc.1 . 0)
           (push.iloc.0 . 0)
           (apply.gloc.of
             |core.lists'for-all|
             (|core.lists'for-all| |.eq?| |e1a`2999*| |e1b`3001*|)))
         (if.true (ret.iloc 6 . 0))
         (push.const . let)
         (call
           (push.gloc.of |.list|)
           (call
             (push.gloc.of |.car|)
             (push.iloc 2 . 1)
             (apply.gloc.of |.map| (|.map| |.car| |e1`2991*|)))
           (push)
           (push.iloc.0 . 0)
           (apply.gloc.of |.map| (|.map| |.list| (|.map| |.car| |e1`2991*|) |e1b`3001*|)))
         (push)
         (push.iloc.0 . 1)
         (push.subr.gloc.of
           |.cons*|
           3
           (|.cons*| 'let (|.map| |.list| (|.map| |.car| |e1`2991*|) |e1b`3001*|) |e2a`3001*|))
         (extend . 1)
         (push.iloc.0 . 0)
         (iloc 7 . 0)
         (if.eq? (ret.iloc 0 . 0))
         (call
           (push.iloc.0 . 0)
           (push.iloc 7 . 0)
           (call (apply.gloc.of |core.optimize'annotate-hook| (|core.optimize'annotate-hook|)))
           (apply))
         (ret.iloc 0 . 0))
       (call
         (iloc.0 . 0)
         (if.false.ret)
         (push.car.iloc (3 . 0) (car |form`2854*|))
         (const . letrec*)
         (ret.eq? (eq? (car |form`2854*|) 'letrec*)))
       (if.true
         (push.cddr.iloc (3 . 0) (cddr |form`2854*|))
         (push.cadr.iloc (3 . 0) (cadr |form`2854*|))
         (extend . 2)
         (iloc.0 . 1)
         (if.null?
           (push.const . begin)
           (call
             (push.iloc.0 . 0)
             (apply.gloc.of
               |core.optimize'flatten-begin|
               (|core.optimize'flatten-begin| |e2`3006*|)))
           (push.cons)
           (extend . 1)
           (push.iloc.0 . 0)
           (iloc 5 . 0)
           (if.eq? (ret.iloc 0 . 0))
           (call
             (push.iloc.0 . 0)
             (push.iloc 5 . 0)
             (call (apply.gloc.of |core.optimize'annotate-hook| (|core.optimize'annotate-hook|)))
             (apply))
           (ret.iloc 0 . 0))
         (call
           (push.gloc.of |.cadr|)
           (push.iloc.0 . 1)
           (apply.gloc.of |.map| (|.map| |.cadr| |e1`3006*|)))
         (push)
         (extend . 1)
         (call
           (push.iloc.0 . 0)
           (apply.gloc.of |core.optimize'pretty-each| (|core.optimize'pretty-each| |e1a`3011*|)))
         (push)
         (call
           (call
             (push.iloc.1 . 0)
             (apply.gloc.of |core.optimize'pretty-each| (|core.optimize'pretty-each| |e2`3006*|)))
           (push)
           (apply.gloc.of
             |core.optimize'flatten-begin|
             (|core.optimize'flatten-begin| (|core.optimize'pretty-each| |e2`3006*|))))
         (push)
         (extend . 2)
         (call
           (push.iloc 2 . 0)
           (iloc.0 . 1)
           (if.not.eq?.ret.const . #f)
           (push.gloc.of |.eq?|)
           (push.iloc.1 . 0)
           (push.iloc.0 . 0)
           (apply.gloc.of
             |core.lists'for-all|
             (|core.lists'for-all| |.eq?| |e1a`3011*| |e1b`3013*|)))
         (if.true (ret.iloc 6 . 0))
         (push.const . letrec*)
         (call
           (push.gloc.of |.list|)
           (call
             (push.gloc.of |.car|)
             (push.iloc 2 . 1)
             (apply.gloc.of |.map| (|.map| |.car| |e1`3006*|)))
           (push)
           (push.iloc.0 . 0)
           (apply.gloc.of |.map| (|.map| |.list| (|.map| |.car| |e1`3006*|) |e1b`3013*|)))
         (push)
         (push.iloc.0 . 1)
         (push.subr.gloc.of
           |.cons*|
           3
           (|.cons*| 'letrec* (|.map| |.list| (|.map| |.car| |e1`3006*|) |e1b`3013*|) |e2a`3013*|))
         (extend . 1)
         (push.iloc.0 . 0)
         (iloc 7 . 0)
         (if.eq? (ret.iloc 0 . 0))
         (call
           (push.iloc.0 . 0)
           (push.iloc 7 . 0)
           (call (apply.gloc.of |core.optimize'annotate-hook| (|core.optimize'annotate-hook|)))
           (apply))
         (ret.iloc 0 . 0))
       (push.const . "coreform-optimize")
       (push.const . "internal inconsistency in ~s")
       (push.gloc.of |core.optimize'pretty|)
       (push.subr.gloc.of
         |.format|
         2
         (|.format| "internal inconsistency in ~s" |core.optimize'pretty|))
       (push.iloc 3 . 0)
       (apply.gloc.of
         |.assertion-violation|
         (|.assertion-violation|
           "coreform-optimize"
           (|.format| "internal inconsistency in ~s" |core.optimize'pretty|)
           |form`2854*|)))
     (push.iloc 2 . 0)
     (push.subr.gloc.of |.length| 1 "../stdlib/core/optimize.scm" . 1036313)
     (push.gloc.of |core.optimize'limit-arguments|)
     (subr.gloc.of |.>| 2 "../stdlib/core/optimize.scm" . 1036310)
     (if.true (push.iloc 2 . 0) (apply.iloc+ (1 . 0) "../stdlib/core/optimize.scm" . 1037334))
     (push.iloc 2 . 0)
     (apply.gloc.of |core.optimize'pretty-each| "../stdlib/core/optimize.scm" . 1038358))
   (ret.iloc 1 . 0))
 (set.gloc.of |core.optimize'pretty|)
 (close
   (1 0 . |core.optimize'process-stackable|)
   (extend.unbound . 5)
   (push.close
     (2 0 . trace-lineage-each)
     (extend.enclose+
       (1 0 . loop)
       (iloc.0 . 0)
       (if.pair?
         (call
           (push.car.iloc (0 . 0) "../stdlib/core/optimize.scm" . 1051683)
           (push.iloc 2 . 1)
           (apply.iloc (3 . 1) "../stdlib/core/optimize.scm" . 1051668))
         (push.cdr.iloc (0 . 0) "../stdlib/core/optimize.scm" . 1052698)
         (apply.iloc+ (1 . 0) "../stdlib/core/optimize.scm" . 1052692))
       (ret.const.unspec))
     (push.iloc.1 . 0)
     (apply.iloc+ (0 . 0) "../stdlib/core/optimize.scm" . 1050637))
   (push.close
     (2 0 . trace-lineage)
     (iloc.0 . 0)
     (if.not.pair?.ret.const . #f)
     (push.car.iloc (0 . 0) "../stdlib/core/optimize.scm" . 1057816)
     (extend . 1)
     (push.iloc.0 . 0)
     (const . define)
     (if.eq?
       (push.gloc.of |core.optimize'ht-lambda-node|)
       (push.iloc.1 . 0)
       (push.subr.gloc.of |.caddr| 1 "../stdlib/core/optimize.scm" . 1059909)
       (subr.gloc.of |.core-hashtable-contains?| 2 "../stdlib/core/optimize.scm" . 1059868)
       (if.true
         (push.iloc.1 . 0)
         (push.subr.gloc.of |.caddr| 1 "../stdlib/core/optimize.scm" . 1060918)
         (push.subr.gloc.of |.cddr| 1 "../stdlib/core/optimize.scm" . 1060912)
         (push.iloc.1 . 1)
         (apply.iloc (2 . 0) "../stdlib/core/optimize.scm" . 1060892))
       (push.iloc.1 . 0)
       (push.subr.gloc.of |.caddr| 1 "../stdlib/core/optimize.scm" . 1062955)
       (push.iloc.1 . 1)
       (apply.iloc (2 . 1) "../stdlib/core/optimize.scm" . 1062940))
     (push.iloc.0 . 0)
     (const . lambda)
     (if.eq?
       (push.close
         (1 0)
         (push.iloc 3 . 4)
         (push.iloc.0 . 0)
         (push.const . #t)
         (ret.subr.gloc.of |.core-hashtable-set!| "../stdlib/core/optimize.scm" . 1065003))
       (push.iloc.1 . 1)
       (apply.gloc.of |.for-each| "../stdlib/core/optimize.scm" . 1064981))
     (push.iloc.0 . 0)
     (const . let)
     (if.eq?
       (call
         (push.close
           (1 0)
           (push.cadr.iloc (0 . 0) "../stdlib/core/optimize.scm" . 1067066)
           (push.iloc 2 . 1)
           (apply.iloc (3 . 1) "../stdlib/core/optimize.scm" . 1067051))
         (push.cadr.iloc (1 . 0) "../stdlib/core/optimize.scm" . 1067086)
         (apply.gloc.of |.for-each| "../stdlib/core/optimize.scm" . 1067029))
       (push.cddr.iloc (1 . 0) "../stdlib/core/optimize.scm" . 1068073)
       (push.iloc.1 . 1)
       (apply.iloc (2 . 0) "../stdlib/core/optimize.scm" . 1068053))
     (push.iloc.0 . 0)
     (const . letrec*)
     (if.eq?
       (call
         (push.gloc.of |.values|)
         (call
           (push.gloc.of |.L968|)
           (push.cadr.iloc (1 . 0) "../stdlib/core/optimize.scm" . 1070214)
           (apply.gloc.of |.map| "../stdlib/core/optimize.scm" . 1070131))
         (push)
         (apply.gloc.of |core.lists'filter| "../stdlib/core/optimize.scm" . 1070116))
       (push)
       (extend . 1)
       (call
         (push.close
           (1 0)
           (push.gloc.of |core.optimize'ht-lambda-node|)
           (push.cadr.iloc (0 . 0) "../stdlib/core/optimize.scm" . 1072211)
           (subr.gloc.of |.core-hashtable-contains?| 2 "../stdlib/core/optimize.scm" . 1072170)
           (if.true
             (call
               (push.close
                 (1 0)
                 (push.iloc 5 . 4)
                 (push.iloc.0 . 0)
                 (push.const)
                 (push.subr.gloc.of |.core-hashtable-ref| 3 "../stdlib/core/optimize.scm" . 1074241)
                 (extend . 1)
                 (push.iloc.0 . 0)
                 (const . #t)
                 (if.eq?.ret.const . #f)
                 (push.iloc 6 . 4)
                 (push.iloc.1 . 0)
                 (push.car.iloc (2 . 0) "../stdlib/core/optimize.scm" . 1076328)
                 (iloc.0 . 0)
                 (push.cons)
                 (ret.subr.gloc.of |.core-hashtable-set!| "../stdlib/core/optimize.scm" . 1076285))
               (push.iloc 3 . 1)
               (apply.gloc.of |.for-each| "../stdlib/core/optimize.scm" . 1073194))
             (push.iloc.0 . 0)
             (push.subr.gloc.of |.cddadr| 1 "../stdlib/core/optimize.scm" . 1078334)
             (push.iloc.1 . 0)
             (push.iloc 3 . 1)
             (push.subr.gloc.of |.append| 2 "../stdlib/core/optimize.scm" . 1078345)
             (apply.iloc (4 . 0) "../stdlib/core/optimize.scm" . 1078314))
           (push.cadr.iloc (0 . 0) "../stdlib/core/optimize.scm" . 1080377)
           (push.iloc.1 . 0)
           (push.iloc 3 . 1)
           (push.subr.gloc.of |.append| 2 "../stdlib/core/optimize.scm" . 1080386)
           (apply.iloc (4 . 1) "../stdlib/core/optimize.scm" . 1080362))
         (push.cadr.iloc (2 . 0) "../stdlib/core/optimize.scm" . 1081377)
         (apply.gloc.of
           |.for-each|
           (|.for-each|
             (lambda (|b`3041*|)
               (if (|.core-hashtable-contains?| |core.optimize'ht-lambda-node| (|.cadr| |b`3041*|))
                   (begin
                     (|.for-each|
                       (lambda (|a`3043*|)
                         (let ((|lst`3045*|
                                 (|.core-hashtable-ref| |ht-descendant`3020*| |a`3043*| '())))
                           (and (|.not| (|.eq?| |lst`3045*| #t))
                                (|.core-hashtable-set!|
                                  |ht-descendant`3020*|
                                  |a`3043*|
                                  (|.cons| (|.car| |b`3041*|) |lst`3045*|)))))
                       |ancestor`3029*|)
                     (|trace-lineage-each`3020*|
                       (|.cddadr| |b`3041*|)
                       (|.append| |present`3039*| |ancestor`3029*|)))
                   (|trace-lineage`3020*|
                     (|.cadr| |b`3041*|)
                     (|.append| |present`3039*| |ancestor`3029*|))))
             (|.cadr| |form`3029*|))))
       (push.cddr.iloc (2 . 0) "../stdlib/core/optimize.scm" . 1082411)
       (push.iloc 2 . 1)
       (apply.iloc (3 . 0) "../stdlib/core/optimize.scm" . 1082391))
     (push.iloc.0 . 0)
     (const . quote)
     (if.eq?.ret.const . #f)
     (push.iloc.1 . 0)
     (push.iloc.1 . 1)
     (apply.iloc (2 . 0) "../stdlib/core/optimize.scm" . 1085461))
   (push.close
     (1 0 . contain-heap-lambda?)
     (push.iloc.1 . 4)
     (push.iloc.0 . 0)
     (push.const . #f)
     (push.subr.gloc.of |.core-hashtable-ref| 3 "../stdlib/core/optimize.scm" . 1090578)
     (extend . 1)
     (iloc.0 . 0)
     (if.false.ret)
     (push.iloc.0 . 0)
     (const . #t)
     (if.eq?.ret.const . #t)
     (call
       (push.gloc.of |.L932|)
       (push.iloc.0 . 0)
       (apply.gloc.of |core.lists'for-all| "../stdlib/core/optimize.scm" . 1093664))
     (push)
     (ret.subr.gloc.of |.not| "../stdlib/core/optimize.scm" . 1093659))
   (enclose . 3)
   (subr.gloc.of |.make-core-hashtable| 0 "../stdlib/core/optimize.scm" . 1044504)
   (set.iloc (0 . 3))
   (subr.gloc.of |.make-core-hashtable| 0 "../stdlib/core/optimize.scm" . 1045533)
   (set.iloc (0 . 4))
   (call
     (push.iloc.1 . 0)
     (push.const)
     (apply.iloc (0 . 1) "../stdlib/core/optimize.scm" . 1096711))
   (call
     (push.close
       (1 0)
       (cdr.iloc (0 . 0) "../stdlib/core/optimize.scm" . 1098785)
       (if.not.symbol?.ret.const . #f)
       (push.iloc.1 . 3)
       (push.cdr.iloc (0 . 0) "../stdlib/core/optimize.scm" . 1099830)
       (push.car.iloc (0 . 0) "../stdlib/core/optimize.scm" . 1099838)
       (ret.subr.gloc.of |.core-hashtable-set!| "../stdlib/core/optimize.scm" . 1099800))
     (push.gloc.of |core.optimize'ht-variable-binding|)
     (push.subr.gloc.of |.core-hashtable->alist| 1 "../stdlib/core/optimize.scm" . 1100817)
     (apply.gloc.of |.for-each| "../stdlib/core/optimize.scm" . 1097735))
   (call
     (push.gloc.of |.L928|)
     (push.gloc.of |core.optimize'ht-variable-binding|)
     (push.subr.gloc.of |.core-hashtable->alist| 1 "../stdlib/core/optimize.scm" . 1113119)
     (apply.gloc.of |core.lists'remp| "../stdlib/core/optimize.scm" . 1102873))
   (push)
   (extend . 1)
   (call
     (extend.enclose+
       (1 0 . loop)
       (call
         (push.close
           (1 0)
           (push.gloc.of |core.optimize'ht-variable-stackables|)
           (push.car.iloc (0 . 0) "../stdlib/core/optimize.scm" . 1117260)
           (subr.gloc.of |.core-hashtable-contains?| 2 "../stdlib/core/optimize.scm" . 1117211)
           (if.true.ret)
           (push.gloc.of |core.optimize'ht-lambda-node|)
           (push.cdr.iloc (0 . 0) "../stdlib/core/optimize.scm" . 1118282)
           (push.const)
           (push.subr.gloc.of |.core-hashtable-ref| 3 "../stdlib/core/optimize.scm" . 1118247)
           (extend . 1)
           (call
             (call
               (push.car.iloc (1 . 0) "../stdlib/core/optimize.scm" . 1120324)
               (apply.iloc (5 . 2) "../stdlib/core/optimize.scm" . 1120302))
             (if.true.ret.const . #f)
             (push.close
               (1 0)
               (push.car.iloc (2 . 0) "../stdlib/core/optimize.scm" . 1123389)
               (iloc.0 . 0)
               (if.eq?.ret.const . #t)
               (call
                 (push.iloc.0 . 0)
                 (apply.gloc.of
                   |core.optimize'primitive-function?|
                   "../stdlib/core/optimize.scm"
                   .
                   1124408))
               (if.true.ret)
               (call
                 (push.iloc.0 . 0)
                 (apply.gloc.of
                   |core.optimize'variable-top-level?|
                   "../stdlib/core/optimize.scm"
                   .
                   1125432))
               (if.true.ret)
               (push.gloc.of |core.optimize'ht-variable-stackables|)
               (push.iloc.0 . 0)
               (subr.gloc.of |.core-hashtable-contains?| 2 "../stdlib/core/optimize.scm" . 1126456)
               (if.true.ret)
               (call
                 (push.iloc.0 . 0)
                 (apply.gloc.of
                   |core.optimize'variable-iloc?|
                   "../stdlib/core/optimize.scm"
                   .
                   1127485))
               (if.false.ret)
               (call (push.iloc.0 . 0) (apply.iloc (6 . 2) "../stdlib/core/optimize.scm" . 1128514))
               (push)
               (ret.subr.gloc.of |.not| "../stdlib/core/optimize.scm" . 1128509))
             (push.iloc.0 . 0)
             (apply.gloc.of |core.lists'for-all| "../stdlib/core/optimize.scm" . 1121321))
           (if.true
             (push.gloc.of |core.optimize'ht-variable-stackables|)
             (push.car.iloc (1 . 0) "../stdlib/core/optimize.scm" . 1132624)
             (push.cdr.iloc (1 . 0) "../stdlib/core/optimize.scm" . 1132632)
             (ret.subr.gloc.of |.core-hashtable-set!| "../stdlib/core/optimize.scm" . 1132580))
           (ret.const.unspec))
         (push.iloc 2 . 0)
         (apply.gloc.of
           |.for-each|
           (|.for-each|
             (lambda (|b`3070*|)
               (or (|.core-hashtable-contains?|
                     |core.optimize'ht-variable-stackables|
                     (|.car| |b`3070*|))
                   (let ((|free`3072*|
                           (|.core-hashtable-ref|
                             |core.optimize'ht-lambda-node|
                             (|.cdr| |b`3070*|)
                             '())))
                     (if (and (|.not| (|contain-heap-lambda?`3020*| (|.car| |b`3070*|)))
                              (|core.lists'for-all|
                                (lambda (|x`3074*|)
                                  (or (|.eq?| (|.car| |b`3070*|) |x`3074*|)
                                      (|core.optimize'primitive-function?| |x`3074*|)
                                      (|core.optimize'variable-top-level?| |x`3074*|)
                                      (|.core-hashtable-contains?|
                                        |core.optimize'ht-variable-stackables|
                                        |x`3074*|)
                                      (and (|core.optimize'variable-iloc?| |x`3074*|)
                                           (|.not| (|contain-heap-lambda?`3020*| |x`3074*|)))))
                                |free`3072*|))
                         (|.core-hashtable-set!|
                           |core.optimize'ht-variable-stackables|
                           (|.car| |b`3070*|)
                           (|.cdr| |b`3070*|))
                         (|.unspecified|)))))
             |candidates`3063*|)))
       (push.gloc.of |core.optimize'ht-variable-stackables|)
       (push.subr.gloc.of |.core-hashtable-size| 1 "../stdlib/core/optimize.scm" . 1135638)
       (extend . 1)
       (iloc.1 . 0)
       (=.iloc (0 . 0) "../stdlib/core/optimize.scm" . 1136657)
       (if.true.ret)
       (push.iloc.0 . 0)
       (apply.iloc+ (2 . 0) "../stdlib/core/optimize.scm" . 1136670))
     (push.gloc.of |core.optimize'ht-variable-stackables|)
     (push.subr.gloc.of |.core-hashtable-size| 1 "../stdlib/core/optimize.scm" . 1115162)
     (apply.iloc+ (0 . 0) "../stdlib/core/optimize.scm" . 1116171))
   (push.gloc.of |.L926|)
   (call
     (push.gloc.of |.L917|)
     (push.iloc.0 . 0)
     (apply.gloc.of |core.lists'remp| "../stdlib/core/optimize.scm" . 1138715))
   (push)
   (apply.gloc.of |.for-each| "../stdlib/core/optimize.scm" . 1140757))
 (set.gloc.of |core.optimize'process-stackable|)
 (close
   (1 0 . |core.optimize'transform|)
   (touch.gloc.of |loop`3101*|)
   (call
     (push.iloc.0 . 0)
     (apply.gloc.of |core.optimize'pretty-form| "../stdlib/core/optimize.scm" . 1175576))
   (push)
   (push.const . 1)
   (apply.gloc.of |loop`3101*| "../stdlib/core/optimize.scm" . 1176585))
 (set.gloc.of |core.optimize'transform|)
 (close
   (1 0 . |core.optimize'pretty-form|)
   (touch.gloc.of |loop`3132*|)
   (push.iloc.0 . 0)
   (apply.gloc.of |loop`3132*| "../stdlib/core/optimize.scm" . 1242121))
 (set.gloc.of |core.optimize'pretty-form|)
 (call
   (push.gloc.of |.L985|)
   (apply.gloc.of |.make-parameter| "../stdlib/core/optimize.scm" . 1246233))
 (set.gloc.of |core.optimize'annotate-hook|)
 (call
   (push.gloc.of |.L993|)
   (apply.gloc.of |.make-parameter| "../stdlib/core/optimize.scm" . 1247265))
 (set.gloc.of |core.optimize'annotate-closure-hook|)
 (close
   (2 0 . |core.optimize'closure-attribute-set!|)
   (push.iloc.0 . 0)
   (push.iloc.0 . 0)
   (push.iloc.0 . 1)
   (call
     (apply.gloc.of |core.optimize'annotate-closure-hook| "../stdlib/core/optimize.scm" . 1251336))
   (apply))
 (set.gloc.of |core.optimize'closure-attribute-set!|)
 (close
   (3 0 . |core.optimize'optimize|)
   (call (apply.gloc.of |core.optimize'coreform-optimize| "../stdlib/core/optimize.scm" . 1255440))
   (push)
   (const . 0)
   (if.eq?
     (push.iloc.0 . 0)
     (apply.gloc.of |core.optimize'pretty-form| "../stdlib/core/optimize.scm" . 1256459))
   (push.const . #f)
   (push.const . #f)
   (extend . 2)
   (push.close
     (0 0)
     (call (apply.gloc.of |core.optimize'annotate-hook| "../stdlib/core/optimize.scm" . 1258509))
     (set.iloc (1 . 0) "../stdlib/core/optimize.scm" . 1258509)
     (call
       (apply.gloc.of
         |core.optimize'annotate-closure-hook|
         "../stdlib/core/optimize.scm"
         .
         1258509))
     (set.iloc (1 . 1) "../stdlib/core/optimize.scm" . 1258509)
     (call
       (push.iloc 2 . 1)
       (apply.gloc.of |core.optimize'annotate-hook| "../stdlib/core/optimize.scm" . 1258509))
     (push.iloc 2 . 2)
     (apply.gloc.of |core.optimize'annotate-closure-hook| "../stdlib/core/optimize.scm" . 1258509))
   (push.close
     (0 0)
     (call
       (push.iloc 2 . 0)
       (apply.gloc.of |core.optimize'transform| "../stdlib/core/optimize.scm" . 1258521))
     (push)
     (extend . 1)
     (call (apply.gloc.of |core.optimize'clear-context| "../stdlib/core/optimize.scm" . 1259535))
     (push.iloc.0 . 0)
     (apply.gloc.of |core.optimize'pretty-form| "../stdlib/core/optimize.scm" . 1260559))
   (push.close
     (0 0)
     (call
       (push.iloc.1 . 0)
       (apply.gloc.of |core.optimize'annotate-hook| "../stdlib/core/optimize.scm" . 1258509))
     (push.iloc.1 . 1)
     (apply.gloc.of |core.optimize'annotate-closure-hook| "../stdlib/core/optimize.scm" . 1258509))
   (apply.gloc.of |.dynamic-wind| "../stdlib/core/optimize.scm" . 1258509))
 (set.gloc.of |core.optimize'optimize|)
 (call (push.const . #t) (apply.gloc.of |.make-parameter| "../stdlib/core/optimize.scm" . 1262619))
 (set.gloc.of |core.optimize'coreform-pretty|)
 (call
   (push.const . #t)
   (push.gloc.of |.L982|)
   (apply.gloc.of |.make-parameter| "../stdlib/core/optimize.scm" . 1102879))
 (set.gloc.of |core.optimize'coreform-optimize|)
 (call
   (push.const
     (body2 unbound)
     (e1 unbound)
     (let import . |.let|)
     (e2 unbound)
     (temp unbound)
     (diagnostics import . |core.optimize'diagnostics|)
     (args unbound)
     (_ import . |._|)
     (func unbound)
     (vars unbound)
     (lambda import . |.lambda|)
     (more unbound)
     (body unbound)
     (define-inline-assistant import . |core.optimize'define-inline-assistant|)
     (... import . |....|)
     (body1 unbound)
     (define-syntax import . |.define-syntax|)
     (define-inline import . |core.optimize'define-inline|)
     (syntax-rules import . |.syntax-rules|))
   (extend . 1)
   (call
     (push.const . syntax)
     (push.const . |core.optimize'define-inline-assistant|)
     (push.const
       ...
       ()
       ("../stdlib/core/optimize.scm" . 15365)
       ((_ func () (args ...) (vars ...) . body)
        (define-syntax func (syntax-rules () ((_ args ...) (let ((vars args) ...) . body))))
        ((body . 0) (vars . 1) (args . 1) (func . 0))
        (let _ syntax-rules define-syntax))
       ((_ func (e1 e2 ...) (args ...) . more)
        (define-inline-assistant func (e2 ...) (temp args ...) . more)
        ((more . 0) (args . 1) (e2 . 1) (e1 . 0) (func . 0))
        (temp define-inline-assistant)))
     (push.iloc.0 . 0)
     (apply.gloc.of |.set-top-level-macro!| "../stdlib/core/optimize.scm" . 1102879))
   (call
     (push.const . syntax)
     (push.const . |core.optimize'define-inline|)
     (push.const
       ...
       (lambda)
       ("../stdlib/core/optimize.scm" . 25605)
       ((_ func (lambda (vars ...) body1 body2 ...))
        (define-inline-assistant func (vars ...) () (vars ...) body1 body2 ...)
        ((body2 . 1) (body1 . 0) (vars . 1) (func . 0))
        (define-inline-assistant))
       ((_ (func vars ...) body1 body2 ...)
        (define-inline-assistant func (vars ...) () (vars ...) body1 body2 ...)
        ((body2 . 1) (body1 . 0) (vars . 1) (func . 0))
        (define-inline-assistant)))
     (push.iloc.0 . 0)
     (apply.gloc.of |.set-top-level-macro!| "../stdlib/core/optimize.scm" . 1102879))
   (push.const . syntax)
   (push.const . |core.optimize'diagnostics|)
   (push.const ... () ("../stdlib/core/optimize.scm" . 32798) ((_ _) #f () ()))
   (push.iloc.0 . 0)
   (apply.gloc.of |.set-top-level-macro!| "../stdlib/core/optimize.scm" . 1102879))
 (push.const . core.optimize)
 (push.const . #f)
 (push.const (coreform-optimize import . |core.optimize'coreform-optimize|))
 (apply.gloc.of |.intern-scheme-library| "../stdlib/core/optimize.scm" . 1102879))

((call
   (push.const core intrinsics)
   (apply.gloc.of |.require-scheme-library| (|.require-scheme-library| '(core intrinsics))))
 (push.const . rnrs.base)
 (push.const 6)
 (push.const
   (define import . |.define|)
   (define-syntax import . |.define-syntax|)
   (quote import . |.quote|)
   (lambda import . |.lambda|)
   (if import . |.if|)
   (set! import . |.set!|)
   (cond import . |.cond|)
   (case import . |.case|)
   (and import . |.and|)
   (or import . |.or|)
   (let import . |.let|)
   (let* import . |.let*|)
   (letrec import . |.letrec|)
   (letrec* import . |.letrec*|)
   (let-values import . |.let-values|)
   (let*-values import . |.let*-values|)
   (begin import . |.begin|)
   (quasiquote import . |.quasiquote|)
   (unquote import . |.unquote|)
   (unquote-splicing import . |.unquote-splicing|)
   (let-syntax import . |.let-syntax|)
   (letrec-syntax import . |.letrec-syntax|)
   (syntax-rules import . |.syntax-rules|)
   (identifier-syntax import . |.identifier-syntax|)
   (assert import . |.assert|)
   (else import . |.else|)
   (=> import . |.=>|)
   (... import . |....|)
   (_ import . |._|)
   (eq? import . |.eq?|)
   (eqv? import . |.eqv?|)
   (equal? import . |.equal?|)
   (procedure? import . |.procedure?|)
   (number? import . |.number?|)
   (complex? import . |.complex?|)
   (real? import . |.real?|)
   (rational? import . |.rational?|)
   (integer? import . |.integer?|)
   (real-valued? import . |.real-valued?|)
   (rational-valued? import . |.rational-valued?|)
   (integer-valued? import . |.integer-valued?|)
   (exact? import . |.exact?|)
   (inexact? import . |.inexact?|)
   (inexact import . |.inexact|)
   (exact import . |.exact|)
   (= import . |.=|)
   (< import . |.<|)
   (> import . |.>|)
   (<= import . |.<=|)
   (>= import . |.>=|)
   (zero? import . |.zero?|)
   (positive? import . |.positive?|)
   (negative? import . |.negative?|)
   (odd? import . |.odd?|)
   (even? import . |.even?|)
   (finite? import . |.finite?|)
   (infinite? import . |.infinite?|)
   (nan? import . |.nan?|)
   (max import . |.max|)
   (min import . |.min|)
   (+ import . |.+|)
   (* import . |.*|)
   (- import . |.-|)
   (/ import . |./|)
   (abs import . |.abs|)
   (div-and-mod import . |.div-and-mod|)
   (div import . |.div|)
   (mod import . |.mod|)
   (div0-and-mod0 import . |.div0-and-mod0|)
   (div0 import . |.div0|)
   (mod0 import . |.mod0|)
   (gcd import . |.gcd|)
   (lcm import . |.lcm|)
   (numerator import . |.numerator|)
   (denominator import . |.denominator|)
   (floor import . |.floor|)
   (ceiling import . |.ceiling|)
   (truncate import . |.truncate|)
   (round import . |.round|)
   (rationalize import . |.rationalize|)
   (exp import . |.exp|)
   (log import . |.log|)
   (sin import . |.sin|)
   (cos import . |.cos|)
   (tan import . |.tan|)
   (asin import . |.asin|)
   (acos import . |.acos|)
   (atan import . |.atan|)
   (sqrt import . |.sqrt|)
   (exact-integer-sqrt import . |.exact-integer-sqrt|)
   (expt import . |.expt|)
   (make-rectangular import . |.make-rectangular|)
   (make-polar import . |.make-polar|)
   (real-part import . |.real-part|)
   (imag-part import . |.imag-part|)
   (magnitude import . |.magnitude|)
   (angle import . |.angle|)
   (number->string import . |.number->string|)
   (string->number import . |.string->number|)
   (not import . |.not|)
   (boolean? import . |.boolean?|)
   (boolean=? import . |.boolean=?|)
   (pair? import . |.pair?|)
   (cons import . |.cons|)
   (car import . |.car|)
   (cdr import . |.cdr|)
   (caar import . |.caar|)
   (cadr import . |.cadr|)
   (cdar import . |.cdar|)
   (cddr import . |.cddr|)
   (caaar import . |.caaar|)
   (caadr import . |.caadr|)
   (cadar import . |.cadar|)
   (caddr import . |.caddr|)
   (cdaar import . |.cdaar|)
   (cdadr import . |.cdadr|)
   (cddar import . |.cddar|)
   (cdddr import . |.cdddr|)
   (caaaar import . |.caaaar|)
   (caaadr import . |.caaadr|)
   (caadar import . |.caadar|)
   (caaddr import . |.caaddr|)
   (cadaar import . |.cadaar|)
   (cadadr import . |.cadadr|)
   (caddar import . |.caddar|)
   (cadddr import . |.cadddr|)
   (cdaaar import . |.cdaaar|)
   (cdaadr import . |.cdaadr|)
   (cdadar import . |.cdadar|)
   (cdaddr import . |.cdaddr|)
   (cddaar import . |.cddaar|)
   (cddadr import . |.cddadr|)
   (cdddar import . |.cdddar|)
   (cddddr import . |.cddddr|)
   (null? import . |.null?|)
   (list? import . |.list?|)
   (list import . |.list|)
   (length import . |.length|)
   (append import . |.append|)
   (reverse import . |.reverse|)
   (list-tail import . |.list-tail|)
   (list-ref import . |.list-ref|)
   (map import . |.map|)
   (for-each import . |.for-each|)
   (symbol? import . |.symbol?|)
   (symbol->string import . |.symbol->string|)
   (string->symbol import . |.string->symbol|)
   (symbol=? import . |.symbol=?|)
   (char? import . |.char?|)
   (char->integer import . |.char->integer|)
   (integer->char import . |.integer->char|)
   (char=? import . |.char=?|)
   (char<? import . |.char<?|)
   (char>? import . |.char>?|)
   (char<=? import . |.char<=?|)
   (char>=? import . |.char>=?|)
   (string? import . |.string?|)
   (make-string import . |.make-string|)
   (string import . |.string|)
   (string-length import . |.string-length|)
   (string-ref import . |.string-ref|)
   (string=? import . |.string=?|)
   (string<? import . |.string<?|)
   (string>? import . |.string>?|)
   (string<=? import . |.string<=?|)
   (string>=? import . |.string>=?|)
   (substring import . |.substring|)
   (string-append import . |.string-append|)
   (string->list import . |.string->list|)
   (list->string import . |.list->string|)
   (string-copy import . |.string-copy|)
   (string-for-each import . |.string-for-each|)
   (vector? import . |.vector?|)
   (make-vector import . |.make-vector|)
   (vector import . |.vector|)
   (vector-length import . |.vector-length|)
   (vector-ref import . |.vector-ref|)
   (vector-set! import . |.vector-set!|)
   (vector->list import . |.vector->list|)
   (list->vector import . |.list->vector|)
   (vector-fill! import . |.vector-fill!|)
   (vector-map import . |.vector-map|)
   (vector-for-each import . |.vector-for-each|)
   (error import . |.error|)
   (assertion-violation import . |.assertion-violation|)
   (apply import . |.apply|)
   (call-with-current-continuation import . |.call-with-current-continuation|)
   (call/cc import . |.call/cc|)
   (values import . |.values|)
   (call-with-values import . |.call-with-values|)
   (dynamic-wind import . |.dynamic-wind|))
 (apply.gloc.of
   |.intern-scheme-library|
   (|.intern-scheme-library|
     'rnrs.base
     '(6)
     '((define import . |.define|)
       (define-syntax import . |.define-syntax|)
       (quote import . |.quote|)
       (lambda import . |.lambda|)
       (if import . |.if|)
       (set! import . |.set!|)
       (cond import . |.cond|)
       (case import . |.case|)
       (and import . |.and|)
       (or import . |.or|)
       (let import . |.let|)
       (let* import . |.let*|)
       (letrec import . |.letrec|)
       (letrec* import . |.letrec*|)
       (let-values import . |.let-values|)
       (let*-values import . |.let*-values|)
       (begin import . |.begin|)
       (quasiquote import . |.quasiquote|)
       (unquote import . |.unquote|)
       (unquote-splicing import . |.unquote-splicing|)
       (let-syntax import . |.let-syntax|)
       (letrec-syntax import . |.letrec-syntax|)
       (syntax-rules import . |.syntax-rules|)
       (identifier-syntax import . |.identifier-syntax|)
       (assert import . |.assert|)
       (else import . |.else|)
       (=> import . |.=>|)
       (... import . |....|)
       (_ import . |._|)
       (eq? import . |.eq?|)
       (eqv? import . |.eqv?|)
       (equal? import . |.equal?|)
       (procedure? import . |.procedure?|)
       (number? import . |.number?|)
       (complex? import . |.complex?|)
       (real? import . |.real?|)
       (rational? import . |.rational?|)
       (integer? import . |.integer?|)
       (real-valued? import . |.real-valued?|)
       (rational-valued? import . |.rational-valued?|)
       (integer-valued? import . |.integer-valued?|)
       (exact? import . |.exact?|)
       (inexact? import . |.inexact?|)
       (inexact import . |.inexact|)
       (exact import . |.exact|)
       (= import . |.=|)
       (< import . |.<|)
       (> import . |.>|)
       (<= import . |.<=|)
       (>= import . |.>=|)
       (zero? import . |.zero?|)
       (positive? import . |.positive?|)
       (negative? import . |.negative?|)
       (odd? import . |.odd?|)
       (even? import . |.even?|)
       (finite? import . |.finite?|)
       (infinite? import . |.infinite?|)
       (nan? import . |.nan?|)
       (max import . |.max|)
       (min import . |.min|)
       (+ import . |.+|)
       (* import . |.*|)
       (- import . |.-|)
       (/ import . |./|)
       (abs import . |.abs|)
       (div-and-mod import . |.div-and-mod|)
       (div import . |.div|)
       (mod import . |.mod|)
       (div0-and-mod0 import . |.div0-and-mod0|)
       (div0 import . |.div0|)
       (mod0 import . |.mod0|)
       (gcd import . |.gcd|)
       (lcm import . |.lcm|)
       (numerator import . |.numerator|)
       (denominator import . |.denominator|)
       (floor import . |.floor|)
       (ceiling import . |.ceiling|)
       (truncate import . |.truncate|)
       (round import . |.round|)
       (rationalize import . |.rationalize|)
       (exp import . |.exp|)
       (log import . |.log|)
       (sin import . |.sin|)
       (cos import . |.cos|)
       (tan import . |.tan|)
       (asin import . |.asin|)
       (acos import . |.acos|)
       (atan import . |.atan|)
       (sqrt import . |.sqrt|)
       (exact-integer-sqrt import . |.exact-integer-sqrt|)
       (expt import . |.expt|)
       (make-rectangular import . |.make-rectangular|)
       (make-polar import . |.make-polar|)
       (real-part import . |.real-part|)
       (imag-part import . |.imag-part|)
       (magnitude import . |.magnitude|)
       (angle import . |.angle|)
       (number->string import . |.number->string|)
       (string->number import . |.string->number|)
       (not import . |.not|)
       (boolean? import . |.boolean?|)
       (boolean=? import . |.boolean=?|)
       (pair? import . |.pair?|)
       (cons import . |.cons|)
       (car import . |.car|)
       (cdr import . |.cdr|)
       (caar import . |.caar|)
       (cadr import . |.cadr|)
       (cdar import . |.cdar|)
       (cddr import . |.cddr|)
       (caaar import . |.caaar|)
       (caadr import . |.caadr|)
       (cadar import . |.cadar|)
       (caddr import . |.caddr|)
       (cdaar import . |.cdaar|)
       (cdadr import . |.cdadr|)
       (cddar import . |.cddar|)
       (cdddr import . |.cdddr|)
       (caaaar import . |.caaaar|)
       (caaadr import . |.caaadr|)
       (caadar import . |.caadar|)
       (caaddr import . |.caaddr|)
       (cadaar import . |.cadaar|)
       (cadadr import . |.cadadr|)
       (caddar import . |.caddar|)
       (cadddr import . |.cadddr|)
       (cdaaar import . |.cdaaar|)
       (cdaadr import . |.cdaadr|)
       (cdadar import . |.cdadar|)
       (cdaddr import . |.cdaddr|)
       (cddaar import . |.cddaar|)
       (cddadr import . |.cddadr|)
       (cdddar import . |.cdddar|)
       (cddddr import . |.cddddr|)
       (null? import . |.null?|)
       (list? import . |.list?|)
       (list import . |.list|)
       (length import . |.length|)
       (append import . |.append|)
       (reverse import . |.reverse|)
       (list-tail import . |.list-tail|)
       (list-ref import . |.list-ref|)
       (map import . |.map|)
       (for-each import . |.for-each|)
       (symbol? import . |.symbol?|)
       (symbol->string import . |.symbol->string|)
       (string->symbol import . |.string->symbol|)
       (symbol=? import . |.symbol=?|)
       (char? import . |.char?|)
       (char->integer import . |.char->integer|)
       (integer->char import . |.integer->char|)
       (char=? import . |.char=?|)
       (char<? import . |.char<?|)
       (char>? import . |.char>?|)
       (char<=? import . |.char<=?|)
       (char>=? import . |.char>=?|)
       (string? import . |.string?|)
       (make-string import . |.make-string|)
       (string import . |.string|)
       (string-length import . |.string-length|)
       (string-ref import . |.string-ref|)
       (string=? import . |.string=?|)
       (string<? import . |.string<?|)
       (string>? import . |.string>?|)
       (string<=? import . |.string<=?|)
       (string>=? import . |.string>=?|)
       (substring import . |.substring|)
       (string-append import . |.string-append|)
       (string->list import . |.string->list|)
       (list->string import . |.list->string|)
       (string-copy import . |.string-copy|)
       (string-for-each import . |.string-for-each|)
       (vector? import . |.vector?|)
       (make-vector import . |.make-vector|)
       (vector import . |.vector|)
       (vector-length import . |.vector-length|)
       (vector-ref import . |.vector-ref|)
       (vector-set! import . |.vector-set!|)
       (vector->list import . |.vector->list|)
       (list->vector import . |.list->vector|)
       (vector-fill! import . |.vector-fill!|)
       (vector-map import . |.vector-map|)
       (vector-for-each import . |.vector-for-each|)
       (error import . |.error|)
       (assertion-violation import . |.assertion-violation|)
       (apply import . |.apply|)
       (call-with-current-continuation import . |.call-with-current-continuation|)
       (call/cc import . |.call/cc|)
       (values import . |.values|)
       (call-with-values import . |.call-with-values|)
       (dynamic-wind import . |.dynamic-wind|)))))

((call
   (push.const core unicode)
   (apply.gloc.of |.require-scheme-library| (|.require-scheme-library| '(core unicode))))
 (push.const . rnrs.unicode)
 (push.const 6)
 (push.const
   (char-upcase import . |core.unicode'char-upcase|)
   (char-downcase import . |core.unicode'char-downcase|)
   (char-titlecase import . |core.unicode'char-titlecase|)
   (char-foldcase import . |core.unicode'char-foldcase|)
   (char-ci=? import . |core.unicode'char-ci=?|)
   (char-ci<? import . |core.unicode'char-ci<?|)
   (char-ci>? import . |core.unicode'char-ci>?|)
   (char-ci<=? import . |core.unicode'char-ci<=?|)
   (char-ci>=? import . |core.unicode'char-ci>=?|)
   (char-alphabetic? import . |core.unicode'char-alphabetic?|)
   (char-numeric? import . |core.unicode'char-numeric?|)
   (char-whitespace? import . |.char-whitespace?|)
   (char-upper-case? import . |core.unicode'char-upper-case?|)
   (char-lower-case? import . |core.unicode'char-lower-case?|)
   (char-title-case? import . |core.unicode'char-title-case?|)
   (char-general-category import . |core.unicode'char-general-category|)
   (string-upcase import . |core.unicode'string-upcase|)
   (string-downcase import . |core.unicode'string-downcase|)
   (string-titlecase import . |core.unicode'string-titlecase|)
   (string-foldcase import . |core.unicode'string-foldcase|)
   (string-ci=? import . |core.unicode'string-ci=?|)
   (string-ci<? import . |core.unicode'string-ci<?|)
   (string-ci>? import . |core.unicode'string-ci>?|)
   (string-ci<=? import . |core.unicode'string-ci<=?|)
   (string-ci>=? import . |core.unicode'string-ci>=?|)
   (string-normalize-nfd import . |core.unicode'string-normalize-nfd|)
   (string-normalize-nfkd import . |core.unicode'string-normalize-nfkd|)
   (string-normalize-nfc import . |core.unicode'string-normalize-nfc|)
   (string-normalize-nfkc import . |core.unicode'string-normalize-nfkc|))
 (apply.gloc.of
   |.intern-scheme-library|
   (|.intern-scheme-library|
     'rnrs.unicode
     '(6)
     '((char-upcase import . |core.unicode'char-upcase|)
       (char-downcase import . |core.unicode'char-downcase|)
       (char-titlecase import . |core.unicode'char-titlecase|)
       (char-foldcase import . |core.unicode'char-foldcase|)
       (char-ci=? import . |core.unicode'char-ci=?|)
       (char-ci<? import . |core.unicode'char-ci<?|)
       (char-ci>? import . |core.unicode'char-ci>?|)
       (char-ci<=? import . |core.unicode'char-ci<=?|)
       (char-ci>=? import . |core.unicode'char-ci>=?|)
       (char-alphabetic? import . |core.unicode'char-alphabetic?|)
       (char-numeric? import . |core.unicode'char-numeric?|)
       (char-whitespace? import . |.char-whitespace?|)
       (char-upper-case? import . |core.unicode'char-upper-case?|)
       (char-lower-case? import . |core.unicode'char-lower-case?|)
       (char-title-case? import . |core.unicode'char-title-case?|)
       (char-general-category import . |core.unicode'char-general-category|)
       (string-upcase import . |core.unicode'string-upcase|)
       (string-downcase import . |core.unicode'string-downcase|)
       (string-titlecase import . |core.unicode'string-titlecase|)
       (string-foldcase import . |core.unicode'string-foldcase|)
       (string-ci=? import . |core.unicode'string-ci=?|)
       (string-ci<? import . |core.unicode'string-ci<?|)
       (string-ci>? import . |core.unicode'string-ci>?|)
       (string-ci<=? import . |core.unicode'string-ci<=?|)
       (string-ci>=? import . |core.unicode'string-ci>=?|)
       (string-normalize-nfd import . |core.unicode'string-normalize-nfd|)
       (string-normalize-nfkd import . |core.unicode'string-normalize-nfkd|)
       (string-normalize-nfc import . |core.unicode'string-normalize-nfc|)
       (string-normalize-nfkc import . |core.unicode'string-normalize-nfkc|)))))

((call
   (push.const core bytevector-transcoders)
   (apply.gloc.of
     |.require-scheme-library|
     (|.require-scheme-library| '(core bytevector-transcoders))))
 (call
   (push.const core bytevectors)
   (apply.gloc.of |.require-scheme-library| (|.require-scheme-library| '(core bytevectors))))
 (push.const . rnrs.bytevectors)
 (push.const 6)
 (push.const
   (endianness import . |core.bytevectors'endianness|)
   (native-endianness import . |.native-endianness|)
   (bytevector? import . |.bytevector?|)
   (make-bytevector import . |.make-bytevector|)
   (bytevector-length import . |.bytevector-length|)
   (bytevector=? import . |.bytevector=?|)
   (bytevector-fill! import . |.bytevector-fill!|)
   (bytevector-copy! import . |.bytevector-copy!|)
   (bytevector-copy import . |.bytevector-copy|)
   (bytevector-u8-ref import . |.bytevector-u8-ref|)
   (bytevector-s8-ref import . |.bytevector-s8-ref|)
   (bytevector-u8-set! import . |.bytevector-u8-set!|)
   (bytevector-s8-set! import . |.bytevector-s8-set!|)
   (bytevector->u8-list import . |.bytevector->u8-list|)
   (u8-list->bytevector import . |.u8-list->bytevector|)
   (bytevector-u16-ref import . |.bytevector-u16-ref|)
   (bytevector-s16-ref import . |.bytevector-s16-ref|)
   (bytevector-u16-native-ref import . |.bytevector-u16-native-ref|)
   (bytevector-s16-native-ref import . |.bytevector-s16-native-ref|)
   (bytevector-u16-set! import . |.bytevector-u16-set!|)
   (bytevector-s16-set! import . |.bytevector-s16-set!|)
   (bytevector-u16-native-set! import . |.bytevector-u16-native-set!|)
   (bytevector-s16-native-set! import . |.bytevector-s16-native-set!|)
   (bytevector-u32-ref import . |.bytevector-u32-ref|)
   (bytevector-s32-ref import . |.bytevector-s32-ref|)
   (bytevector-u32-native-ref import . |.bytevector-u32-native-ref|)
   (bytevector-s32-native-ref import . |.bytevector-s32-native-ref|)
   (bytevector-u32-set! import . |.bytevector-u32-set!|)
   (bytevector-s32-set! import . |.bytevector-s32-set!|)
   (bytevector-u32-native-set! import . |.bytevector-u32-native-set!|)
   (bytevector-s32-native-set! import . |.bytevector-s32-native-set!|)
   (bytevector-u64-ref import . |.bytevector-u64-ref|)
   (bytevector-s64-ref import . |.bytevector-s64-ref|)
   (bytevector-u64-native-ref import . |.bytevector-u64-native-ref|)
   (bytevector-s64-native-ref import . |.bytevector-s64-native-ref|)
   (bytevector-u64-set! import . |.bytevector-u64-set!|)
   (bytevector-s64-set! import . |.bytevector-s64-set!|)
   (bytevector-u64-native-set! import . |.bytevector-u64-native-set!|)
   (bytevector-s64-native-set! import . |.bytevector-s64-native-set!|)
   (bytevector-ieee-single-ref import . |.bytevector-ieee-single-ref|)
   (bytevector-ieee-single-native-ref import . |.bytevector-ieee-single-native-ref|)
   (bytevector-ieee-single-set! import . |.bytevector-ieee-single-set!|)
   (bytevector-ieee-single-native-set! import . |.bytevector-ieee-single-native-set!|)
   (bytevector-ieee-double-ref import . |.bytevector-ieee-double-ref|)
   (bytevector-ieee-double-native-ref import . |.bytevector-ieee-double-native-ref|)
   (bytevector-ieee-double-set! import . |.bytevector-ieee-double-set!|)
   (bytevector-ieee-double-native-set! import . |.bytevector-ieee-double-native-set!|)
   (bytevector-uint-ref import . |core.bytevectors'bytevector-uint-ref|)
   (bytevector-sint-ref import . |core.bytevectors'bytevector-sint-ref|)
   (bytevector-uint-set! import . |core.bytevectors'bytevector-uint-set!|)
   (bytevector-sint-set! import . |core.bytevectors'bytevector-sint-set!|)
   (bytevector->uint-list import . |core.bytevectors'bytevector->uint-list|)
   (bytevector->sint-list import . |core.bytevectors'bytevector->sint-list|)
   (uint-list->bytevector import . |core.bytevectors'uint-list->bytevector|)
   (sint-list->bytevector import . |core.bytevectors'sint-list->bytevector|)
   (string->utf8 import . |.string->utf8|)
   (utf8->string import . |.utf8->string|)
   (string->utf16 import . |core.bytevector-transcoders'string->utf16|)
   (utf16->string import . |core.bytevector-transcoders'utf16->string|)
   (string->utf32 import . |core.bytevector-transcoders'string->utf32|)
   (utf32->string import . |core.bytevector-transcoders'utf32->string|))
 (apply.gloc.of
   |.intern-scheme-library|
   (|.intern-scheme-library|
     'rnrs.bytevectors
     '(6)
     '((endianness import . |core.bytevectors'endianness|)
       (native-endianness import . |.native-endianness|)
       (bytevector? import . |.bytevector?|)
       (make-bytevector import . |.make-bytevector|)
       (bytevector-length import . |.bytevector-length|)
       (bytevector=? import . |.bytevector=?|)
       (bytevector-fill! import . |.bytevector-fill!|)
       (bytevector-copy! import . |.bytevector-copy!|)
       (bytevector-copy import . |.bytevector-copy|)
       (bytevector-u8-ref import . |.bytevector-u8-ref|)
       (bytevector-s8-ref import . |.bytevector-s8-ref|)
       (bytevector-u8-set! import . |.bytevector-u8-set!|)
       (bytevector-s8-set! import . |.bytevector-s8-set!|)
       (bytevector->u8-list import . |.bytevector->u8-list|)
       (u8-list->bytevector import . |.u8-list->bytevector|)
       (bytevector-u16-ref import . |.bytevector-u16-ref|)
       (bytevector-s16-ref import . |.bytevector-s16-ref|)
       (bytevector-u16-native-ref import . |.bytevector-u16-native-ref|)
       (bytevector-s16-native-ref import . |.bytevector-s16-native-ref|)
       (bytevector-u16-set! import . |.bytevector-u16-set!|)
       (bytevector-s16-set! import . |.bytevector-s16-set!|)
       (bytevector-u16-native-set! import . |.bytevector-u16-native-set!|)
       (bytevector-s16-native-set! import . |.bytevector-s16-native-set!|)
       (bytevector-u32-ref import . |.bytevector-u32-ref|)
       (bytevector-s32-ref import . |.bytevector-s32-ref|)
       (bytevector-u32-native-ref import . |.bytevector-u32-native-ref|)
       (bytevector-s32-native-ref import . |.bytevector-s32-native-ref|)
       (bytevector-u32-set! import . |.bytevector-u32-set!|)
       (bytevector-s32-set! import . |.bytevector-s32-set!|)
       (bytevector-u32-native-set! import . |.bytevector-u32-native-set!|)
       (bytevector-s32-native-set! import . |.bytevector-s32-native-set!|)
       (bytevector-u64-ref import . |.bytevector-u64-ref|)
       (bytevector-s64-ref import . |.bytevector-s64-ref|)
       (bytevector-u64-native-ref import . |.bytevector-u64-native-ref|)
       (bytevector-s64-native-ref import . |.bytevector-s64-native-ref|)
       (bytevector-u64-set! import . |.bytevector-u64-set!|)
       (bytevector-s64-set! import . |.bytevector-s64-set!|)
       (bytevector-u64-native-set! import . |.bytevector-u64-native-set!|)
       (bytevector-s64-native-set! import . |.bytevector-s64-native-set!|)
       (bytevector-ieee-single-ref import . |.bytevector-ieee-single-ref|)
       (bytevector-ieee-single-native-ref import . |.bytevector-ieee-single-native-ref|)
       (bytevector-ieee-single-set! import . |.bytevector-ieee-single-set!|)
       (bytevector-ieee-single-native-set! import . |.bytevector-ieee-single-native-set!|)
       (bytevector-ieee-double-ref import . |.bytevector-ieee-double-ref|)
       (bytevector-ieee-double-native-ref import . |.bytevector-ieee-double-native-ref|)
       (bytevector-ieee-double-set! import . |.bytevector-ieee-double-set!|)
       (bytevector-ieee-double-native-set! import . |.bytevector-ieee-double-native-set!|)
       (bytevector-uint-ref import . |core.bytevectors'bytevector-uint-ref|)
       (bytevector-sint-ref import . |core.bytevectors'bytevector-sint-ref|)
       (bytevector-uint-set! import . |core.bytevectors'bytevector-uint-set!|)
       (bytevector-sint-set! import . |core.bytevectors'bytevector-sint-set!|)
       (bytevector->uint-list import . |core.bytevectors'bytevector->uint-list|)
       (bytevector->sint-list import . |core.bytevectors'bytevector->sint-list|)
       (uint-list->bytevector import . |core.bytevectors'uint-list->bytevector|)
       (sint-list->bytevector import . |core.bytevectors'sint-list->bytevector|)
       (string->utf8 import . |.string->utf8|)
       (utf8->string import . |.utf8->string|)
       (string->utf16 import . |core.bytevector-transcoders'string->utf16|)
       (utf16->string import . |core.bytevector-transcoders'utf16->string|)
       (string->utf32 import . |core.bytevector-transcoders'string->utf32|)
       (utf32->string import . |core.bytevector-transcoders'utf32->string|)))))

((call
   (push.const core lists)
   (apply.gloc.of |.require-scheme-library| (|.require-scheme-library| '(core lists))))
 (push.const . rnrs.lists)
 (push.const 6)
 (push.const
   (find import . |core.lists'find|)
   (for-all import . |core.lists'for-all|)
   (exists import . |core.lists'exists|)
   (filter import . |core.lists'filter|)
   (partition import . |core.lists'partition|)
   (fold-left import . |core.lists'fold-left|)
   (fold-right import . |core.lists'fold-right|)
   (remp import . |core.lists'remp|)
   (remove import . |core.lists'remove|)
   (remv import . |core.lists'remv|)
   (remq import . |core.lists'remq|)
   (memp import . |core.lists'memp|)
   (member import . |.member|)
   (memv import . |.memv|)
   (memq import . |.memq|)
   (assp import . |core.lists'assp|)
   (assoc import . |.assoc|)
   (assv import . |.assv|)
   (assq import . |.assq|)
   (cons* import . |.cons*|))
 (apply.gloc.of
   |.intern-scheme-library|
   (|.intern-scheme-library|
     'rnrs.lists
     '(6)
     '((find import . |core.lists'find|)
       (for-all import . |core.lists'for-all|)
       (exists import . |core.lists'exists|)
       (filter import . |core.lists'filter|)
       (partition import . |core.lists'partition|)
       (fold-left import . |core.lists'fold-left|)
       (fold-right import . |core.lists'fold-right|)
       (remp import . |core.lists'remp|)
       (remove import . |core.lists'remove|)
       (remv import . |core.lists'remv|)
       (remq import . |core.lists'remq|)
       (memp import . |core.lists'memp|)
       (member import . |.member|)
       (memv import . |.memv|)
       (memq import . |.memq|)
       (assp import . |core.lists'assp|)
       (assoc import . |.assoc|)
       (assv import . |.assv|)
       (assq import . |.assq|)
       (cons* import . |.cons*|)))))

((call
   (push.const core sorting)
   (apply.gloc.of |.require-scheme-library| (|.require-scheme-library| '(core sorting))))
 (push.const . rnrs.sorting)
 (push.const 6)
 (push.const
   (list-sort import . |core.sorting'list-sort|)
   (vector-sort import . |core.sorting'vector-sort|)
   (vector-sort! import . |core.sorting'vector-sort!|))
 (apply.gloc.of
   |.intern-scheme-library|
   (|.intern-scheme-library|
     'rnrs.sorting
     '(6)
     '((list-sort import . |core.sorting'list-sort|)
       (vector-sort import . |core.sorting'vector-sort|)
       (vector-sort! import . |core.sorting'vector-sort!|)))))

((call
   (push.const core control)
   (apply.gloc.of |.require-scheme-library| (|.require-scheme-library| '(core control))))
 (push.const . rnrs.control)
 (push.const 6)
 (push.const
   (when import . |core.control'when|)
   (unless import . |core.control'unless|)
   (do import . |.do|)
   (case-lambda import . |core.control'case-lambda|))
 (apply.gloc.of
   |.intern-scheme-library|
   (|.intern-scheme-library|
     'rnrs.control
     '(6)
     '((when import . |core.control'when|)
       (unless import . |core.control'unless|)
       (do import . |.do|)
       (case-lambda import . |core.control'case-lambda|)))))

((call
   (push.const core records)
   (apply.gloc.of |.require-scheme-library| (|.require-scheme-library| '(core records))))
 (push.const . rnrs.records.syntactic)
 (push.const 6)
 (push.const
   (define-record-type import . |core.records'define-record-type|)
   (record-type-descriptor import . |core.records'record-type-descriptor|)
   (record-constructor-descriptor import . |core.records'record-constructor-descriptor|)
   (fields import . |core.records'fields|)
   (mutable import . |core.records'mutable|)
   (immutable import . |core.records'immutable|)
   (parent import . |core.records'parent|)
   (protocol import . |core.records'protocol|)
   (sealed import . |core.records'sealed|)
   (opaque import . |core.records'opaque|)
   (nongenerative import . |core.records'nongenerative|)
   (parent-rtd import . |core.records'parent-rtd|))
 (apply.gloc.of
   |.intern-scheme-library|
   (|.intern-scheme-library|
     'rnrs.records.syntactic
     '(6)
     '((define-record-type import . |core.records'define-record-type|)
       (record-type-descriptor import . |core.records'record-type-descriptor|)
       (record-constructor-descriptor import . |core.records'record-constructor-descriptor|)
       (fields import . |core.records'fields|)
       (mutable import . |core.records'mutable|)
       (immutable import . |core.records'immutable|)
       (parent import . |core.records'parent|)
       (protocol import . |core.records'protocol|)
       (sealed import . |core.records'sealed|)
       (opaque import . |core.records'opaque|)
       (nongenerative import . |core.records'nongenerative|)
       (parent-rtd import . |core.records'parent-rtd|)))))

((call
   (push.const core records)
   (apply.gloc.of |.require-scheme-library| (|.require-scheme-library| '(core records))))
 (push.const . rnrs.records.procedural)
 (push.const 6)
 (push.const
   (make-record-type-descriptor import . |.make-record-type-descriptor|)
   (record-type-descriptor? import . |.record-type-descriptor?|)
   (make-record-constructor-descriptor import . |.make-record-constructor-descriptor|)
   (record-constructor import . |.record-constructor|)
   (record-predicate import . |.record-predicate|)
   (record-accessor import . |.record-accessor|)
   (record-mutator import . |.record-mutator|))
 (apply.gloc.of
   |.intern-scheme-library|
   (|.intern-scheme-library|
     'rnrs.records.procedural
     '(6)
     '((make-record-type-descriptor import . |.make-record-type-descriptor|)
       (record-type-descriptor? import . |.record-type-descriptor?|)
       (make-record-constructor-descriptor import . |.make-record-constructor-descriptor|)
       (record-constructor import . |.record-constructor|)
       (record-predicate import . |.record-predicate|)
       (record-accessor import . |.record-accessor|)
       (record-mutator import . |.record-mutator|)))))

((call
   (push.const core records)
   (apply.gloc.of |.require-scheme-library| (|.require-scheme-library| '(core records))))
 (push.const . rnrs.records.inspection)
 (push.const 6)
 (push.const
   (record? import . |.record?|)
   (record-rtd import . |.record-rtd|)
   (record-type-name import . |.record-type-name|)
   (record-type-parent import . |.record-type-parent|)
   (record-type-uid import . |.record-type-uid|)
   (record-type-generative? import . |.record-type-generative?|)
   (record-type-sealed? import . |.record-type-sealed?|)
   (record-type-opaque? import . |.record-type-opaque?|)
   (record-type-field-names import . |.record-type-field-names|)
   (record-field-mutable? import . |.record-field-mutable?|))
 (apply.gloc.of
   |.intern-scheme-library|
   (|.intern-scheme-library|
     'rnrs.records.inspection
     '(6)
     '((record? import . |.record?|)
       (record-rtd import . |.record-rtd|)
       (record-type-name import . |.record-type-name|)
       (record-type-parent import . |.record-type-parent|)
       (record-type-uid import . |.record-type-uid|)
       (record-type-generative? import . |.record-type-generative?|)
       (record-type-sealed? import . |.record-type-sealed?|)
       (record-type-opaque? import . |.record-type-opaque?|)
       (record-type-field-names import . |.record-type-field-names|)
       (record-field-mutable? import . |.record-field-mutable?|)))))

((call
   (push.const core exceptions)
   (apply.gloc.of |.require-scheme-library| (|.require-scheme-library| '(core exceptions))))
 (push.const . rnrs.exceptions)
 (push.const 6)
 (push.const
   (with-exception-handler import . |.with-exception-handler|)
   (guard import . |core.exceptions'guard|)
   (raise import . |.raise|)
   (raise-continuable import . |.raise-continuable|)
   (else import . |.else|)
   (=> import . |.=>|))
 (apply.gloc.of
   |.intern-scheme-library|
   (|.intern-scheme-library|
     'rnrs.exceptions
     '(6)
     '((with-exception-handler import . |.with-exception-handler|)
       (guard import . |core.exceptions'guard|)
       (raise import . |.raise|)
       (raise-continuable import . |.raise-continuable|)
       (else import . |.else|)
       (=> import . |.=>|)))))

((call
   (push.const core conditions)
   (apply.gloc.of |.require-scheme-library| (|.require-scheme-library| '(core conditions))))
 (push.const . rnrs.conditions)
 (push.const 6)
 (push.const
   (&condition import . |.&condition|)
   (condition import . |.condition|)
   (simple-conditions import . |.simple-conditions|)
   (condition? import . |.condition?|)
   (condition-predicate import . |.condition-predicate|)
   (condition-accessor import . |.condition-accessor|)
   (define-condition-type import . |core.conditions'define-condition-type|)
   (&message import . |.&message|)
   (make-message-condition import . |.make-message-condition|)
   (message-condition? import . |.message-condition?|)
   (condition-message import . |.condition-message|)
   (&warning import . |.&warning|)
   (make-warning import . |.make-warning|)
   (warning? import . |.warning?|)
   (&serious import . |.&serious|)
   (make-serious-condition import . |.make-serious-condition|)
   (serious-condition? import . |.serious-condition?|)
   (&error import . |.&error|)
   (make-error import . |.make-error|)
   (error? import . |.error?|)
   (&violation import . |.&violation|)
   (make-violation import . |.make-violation|)
   (violation? import . |.violation?|)
   (&assertion import . |.&assertion|)
   (make-assertion-violation import . |.make-assertion-violation|)
   (assertion-violation? import . |.assertion-violation?|)
   (&irritants import . |.&irritants|)
   (make-irritants-condition import . |.make-irritants-condition|)
   (irritants-condition? import . |.irritants-condition?|)
   (&who import . |.&who|)
   (make-who-condition import . |.make-who-condition|)
   (who-condition? import . |.who-condition?|)
   (condition-who import . |.condition-who|)
   (condition-irritants import . |.condition-irritants|)
   (&non-continuable import . |.&non-continuable|)
   (make-non-continuable-violation import . |.make-non-continuable-violation|)
   (non-continuable-violation? import . |.non-continuable-violation?|)
   (&implementation-restriction import . |.&implementation-restriction|)
   (make-implementation-restriction-violation import . |.make-implementation-restriction-violation|)
   (implementation-restriction-violation? import . |.implementation-restriction-violation?|)
   (&lexical import . |.&lexical|)
   (make-lexical-violation import . |.make-lexical-violation|)
   (lexical-violation? import . |.lexical-violation?|)
   (&syntax import . |.&syntax|)
   (make-syntax-violation import . |.make-syntax-violation|)
   (syntax-violation? import . |.syntax-violation?|)
   (syntax-violation-form import . |.syntax-violation-form|)
   (syntax-violation-subform import . |.syntax-violation-subform|)
   (&undefined import . |.&undefined|)
   (make-undefined-violation import . |.make-undefined-violation|)
   (undefined-violation? import . |.undefined-violation?|))
 (apply.gloc.of
   |.intern-scheme-library|
   (|.intern-scheme-library|
     'rnrs.conditions
     '(6)
     '((&condition import . |.&condition|)
       (condition import . |.condition|)
       (simple-conditions import . |.simple-conditions|)
       (condition? import . |.condition?|)
       (condition-predicate import . |.condition-predicate|)
       (condition-accessor import . |.condition-accessor|)
       (define-condition-type import . |core.conditions'define-condition-type|)
       (&message import . |.&message|)
       (make-message-condition import . |.make-message-condition|)
       (message-condition? import . |.message-condition?|)
       (condition-message import . |.condition-message|)
       (&warning import . |.&warning|)
       (make-warning import . |.make-warning|)
       (warning? import . |.warning?|)
       (&serious import . |.&serious|)
       (make-serious-condition import . |.make-serious-condition|)
       (serious-condition? import . |.serious-condition?|)
       (&error import . |.&error|)
       (make-error import . |.make-error|)
       (error? import . |.error?|)
       (&violation import . |.&violation|)
       (make-violation import . |.make-violation|)
       (violation? import . |.violation?|)
       (&assertion import . |.&assertion|)
       (make-assertion-violation import . |.make-assertion-violation|)
       (assertion-violation? import . |.assertion-violation?|)
       (&irritants import . |.&irritants|)
       (make-irritants-condition import . |.make-irritants-condition|)
       (irritants-condition? import . |.irritants-condition?|)
       (&who import . |.&who|)
       (make-who-condition import . |.make-who-condition|)
       (who-condition? import . |.who-condition?|)
       (condition-who import . |.condition-who|)
       (condition-irritants import . |.condition-irritants|)
       (&non-continuable import . |.&non-continuable|)
       (make-non-continuable-violation import . |.make-non-continuable-violation|)
       (non-continuable-violation? import . |.non-continuable-violation?|)
       (&implementation-restriction import . |.&implementation-restriction|)
       (make-implementation-restriction-violation
         import
         .
         |.make-implementation-restriction-violation|)
       (implementation-restriction-violation? import . |.implementation-restriction-violation?|)
       (&lexical import . |.&lexical|)
       (make-lexical-violation import . |.make-lexical-violation|)
       (lexical-violation? import . |.lexical-violation?|)
       (&syntax import . |.&syntax|)
       (make-syntax-violation import . |.make-syntax-violation|)
       (syntax-violation? import . |.syntax-violation?|)
       (syntax-violation-form import . |.syntax-violation-form|)
       (syntax-violation-subform import . |.syntax-violation-subform|)
       (&undefined import . |.&undefined|)
       (make-undefined-violation import . |.make-undefined-violation|)
       (undefined-violation? import . |.undefined-violation?|)))))

((call
   (push.const core io)
   (apply.gloc.of |.require-scheme-library| (|.require-scheme-library| '(core io))))
 (push.const . rnrs.io.ports)
 (push.const 6)
 (push.const
   (&i/o import . |.&i/o|)
   (make-i/o-error import . |.make-i/o-error|)
   (i/o-error? import . |.i/o-error?|)
   (&i/o-read import . |.&i/o-read|)
   (make-i/o-read-error import . |.make-i/o-read-error|)
   (i/o-read-error? import . |.i/o-read-error?|)
   (&i/o-write import . |.&i/o-write|)
   (make-i/o-write-error import . |.make-i/o-write-error|)
   (i/o-write-error? import . |.i/o-write-error?|)
   (&i/o-invalid-position import . |.&i/o-invalid-position|)
   (make-i/o-invalid-position-error import . |.make-i/o-invalid-position-error|)
   (i/o-invalid-position-error? import . |.i/o-invalid-position-error?|)
   (i/o-error-position import . |.i/o-error-position|)
   (&i/o-filename import . |.&i/o-filename|)
   (make-i/o-filename-error import . |.make-i/o-filename-error|)
   (i/o-filename-error? import . |.i/o-filename-error?|)
   (i/o-error-filename import . |.i/o-error-filename|)
   (&i/o-file-protection import . |.&i/o-file-protection|)
   (make-i/o-file-protection-error import . |.make-i/o-file-protection-error|)
   (i/o-file-protection-error? import . |.i/o-file-protection-error?|)
   (&i/o-file-is-read-only import . |.&i/o-file-is-read-only|)
   (make-i/o-file-is-read-only-error import . |.make-i/o-file-is-read-only-error|)
   (i/o-file-is-read-only-error? import . |.i/o-file-is-read-only-error?|)
   (&i/o-file-already-exists import . |.&i/o-file-already-exists|)
   (make-i/o-file-already-exists-error import . |.make-i/o-file-already-exists-error|)
   (i/o-file-already-exists-error? import . |.i/o-file-already-exists-error?|)
   (&i/o-file-does-not-exist import . |.&i/o-file-does-not-exist|)
   (make-i/o-file-does-not-exist-error import . |.make-i/o-file-does-not-exist-error|)
   (i/o-file-does-not-exist-error? import . |.i/o-file-does-not-exist-error?|)
   (&i/o-port import . |.&i/o-port|)
   (make-i/o-port-error import . |.make-i/o-port-error|)
   (i/o-port-error? import . |.i/o-port-error?|)
   (i/o-error-port import . |.i/o-error-port|)
   (&i/o-decoding import . |.&i/o-decoding|)
   (make-i/o-decoding-error import . |.make-i/o-decoding-error|)
   (i/o-decoding-error? import . |.i/o-decoding-error?|)
   (&i/o-encoding import . |.&i/o-encoding|)
   (make-i/o-encoding-error import . |.make-i/o-encoding-error|)
   (i/o-encoding-error? import . |.i/o-encoding-error?|)
   (i/o-encoding-error-char import . |.i/o-encoding-error-char|)
   (file-options import . |core.io'file-options|)
   (buffer-mode import . |core.io'buffer-mode|)
   (buffer-mode? import . |core.io'buffer-mode?|)
   (utf-8-codec import . |core.io'utf-8-codec|)
   (utf-16-codec import . |core.io'utf-16-codec|)
   (latin-1-codec import . |core.io'latin-1-codec|)
   (eol-style import . |core.io'eol-style|)
   (error-handling-mode import . |core.io'error-handling-mode|)
   (make-transcoder import . |core.io'make-transcoder|)
   (transcoder-codec import . |core.io'transcoder-codec|)
   (transcoder-eol-style import . |core.io'transcoder-eol-style|)
   (transcoder-error-handling-mode import . |core.io'transcoder-error-handling-mode|)
   (native-transcoder import . |core.io'native-transcoder|)
   (native-eol-style import . |core.io'native-eol-style|)
   (bytevector->string import . |core.io'bytevector->string|)
   (string->bytevector import . |core.io'string->bytevector|)
   (eof-object import . |.eof-object|)
   (eof-object? import . |.eof-object?|)
   (port? import . |.port?|)
   (port-transcoder import . |core.io'port-transcoder|)
   (textual-port? import . |core.io'textual-port?|)
   (binary-port? import . |core.io'binary-port?|)
   (transcoded-port import . |core.io'transcoded-port|)
   (port-has-port-position? import . |.port-has-port-position?|)
   (port-position import . |.port-position|)
   (port-has-set-port-position!? import . |.port-has-set-port-position!?|)
   (set-port-position! import . |.set-port-position!|)
   (close-port import . |.close-port|)
   (call-with-port import . |.call-with-port|)
   (input-port? import . |.input-port?|)
   (port-eof? import . |.port-eof?|)
   (open-file-input-port import . |core.io'open-file-input-port|)
   (open-bytevector-input-port import . |core.io'open-bytevector-input-port|)
   (open-string-input-port import . |core.io'open-string-input-port|)
   (standard-input-port import . |.standard-input-port|)
   (current-input-port import . |.current-input-port|)
   (get-u8 import . |.get-u8|)
   (lookahead-u8 import . |.lookahead-u8|)
   (get-bytevector-n import . |.get-bytevector-n|)
   (get-bytevector-n! import . |.get-bytevector-n!|)
   (get-bytevector-some import . |.get-bytevector-some|)
   (get-bytevector-all import . |.get-bytevector-all|)
   (get-char import . |.get-char|)
   (lookahead-char import . |.lookahead-char|)
   (get-string-n import . |.get-string-n|)
   (get-string-n! import . |.get-string-n!|)
   (get-string-all import . |.get-string-all|)
   (get-line import . |.get-line|)
   (get-datum import . |.get-datum|)
   (output-port? import . |.output-port?|)
   (flush-output-port import . |.flush-output-port|)
   (output-port-buffer-mode import . |.output-port-buffer-mode|)
   (open-file-output-port import . |core.io'open-file-output-port|)
   (open-bytevector-output-port import . |core.io'open-bytevector-output-port|)
   (call-with-bytevector-output-port import . |core.io'call-with-bytevector-output-port|)
   (open-string-output-port import . |core.io'open-string-output-port|)
   (call-with-string-output-port import . |core.io'call-with-string-output-port|)
   (standard-output-port import . |.standard-output-port|)
   (standard-error-port import . |.standard-error-port|)
   (current-output-port import . |.current-output-port|)
   (current-error-port import . |.current-error-port|)
   (put-u8 import . |.put-u8|)
   (put-bytevector import . |.put-bytevector|)
   (put-char import . |.put-char|)
   (put-string import . |.put-string|)
   (put-datum import . |.put-datum|)
   (open-file-input/output-port import . |core.io'open-file-input/output-port|)
   (make-custom-binary-input-port import . |core.io'make-custom-binary-input-port|)
   (make-custom-textual-input-port import . |core.io'make-custom-textual-input-port|)
   (make-custom-binary-output-port import . |core.io'make-custom-binary-output-port|)
   (make-custom-textual-output-port import . |core.io'make-custom-textual-output-port|)
   (make-custom-binary-input/output-port import . |core.io'make-custom-binary-input/output-port|)
   (make-custom-textual-input/output-port import . |core.io'make-custom-textual-input/output-port|))
 (apply.gloc.of
   |.intern-scheme-library|
   (|.intern-scheme-library|
     'rnrs.io.ports
     '(6)
     '((&i/o import . |.&i/o|)
       (make-i/o-error import . |.make-i/o-error|)
       (i/o-error? import . |.i/o-error?|)
       (&i/o-read import . |.&i/o-read|)
       (make-i/o-read-error import . |.make-i/o-read-error|)
       (i/o-read-error? import . |.i/o-read-error?|)
       (&i/o-write import . |.&i/o-write|)
       (make-i/o-write-error import . |.make-i/o-write-error|)
       (i/o-write-error? import . |.i/o-write-error?|)
       (&i/o-invalid-position import . |.&i/o-invalid-position|)
       (make-i/o-invalid-position-error import . |.make-i/o-invalid-position-error|)
       (i/o-invalid-position-error? import . |.i/o-invalid-position-error?|)
       (i/o-error-position import . |.i/o-error-position|)
       (&i/o-filename import . |.&i/o-filename|)
       (make-i/o-filename-error import . |.make-i/o-filename-error|)
       (i/o-filename-error? import . |.i/o-filename-error?|)
       (i/o-error-filename import . |.i/o-error-filename|)
       (&i/o-file-protection import . |.&i/o-file-protection|)
       (make-i/o-file-protection-error import . |.make-i/o-file-protection-error|)
       (i/o-file-protection-error? import . |.i/o-file-protection-error?|)
       (&i/o-file-is-read-only import . |.&i/o-file-is-read-only|)
       (make-i/o-file-is-read-only-error import . |.make-i/o-file-is-read-only-error|)
       (i/o-file-is-read-only-error? import . |.i/o-file-is-read-only-error?|)
       (&i/o-file-already-exists import . |.&i/o-file-already-exists|)
       (make-i/o-file-already-exists-error import . |.make-i/o-file-already-exists-error|)
       (i/o-file-already-exists-error? import . |.i/o-file-already-exists-error?|)
       (&i/o-file-does-not-exist import . |.&i/o-file-does-not-exist|)
       (make-i/o-file-does-not-exist-error import . |.make-i/o-file-does-not-exist-error|)
       (i/o-file-does-not-exist-error? import . |.i/o-file-does-not-exist-error?|)
       (&i/o-port import . |.&i/o-port|)
       (make-i/o-port-error import . |.make-i/o-port-error|)
       (i/o-port-error? import . |.i/o-port-error?|)
       (i/o-error-port import . |.i/o-error-port|)
       (&i/o-decoding import . |.&i/o-decoding|)
       (make-i/o-decoding-error import . |.make-i/o-decoding-error|)
       (i/o-decoding-error? import . |.i/o-decoding-error?|)
       (&i/o-encoding import . |.&i/o-encoding|)
       (make-i/o-encoding-error import . |.make-i/o-encoding-error|)
       (i/o-encoding-error? import . |.i/o-encoding-error?|)
       (i/o-encoding-error-char import . |.i/o-encoding-error-char|)
       (file-options import . |core.io'file-options|)
       (buffer-mode import . |core.io'buffer-mode|)
       (buffer-mode? import . |core.io'buffer-mode?|)
       (utf-8-codec import . |core.io'utf-8-codec|)
       (utf-16-codec import . |core.io'utf-16-codec|)
       (latin-1-codec import . |core.io'latin-1-codec|)
       (eol-style import . |core.io'eol-style|)
       (error-handling-mode import . |core.io'error-handling-mode|)
       (make-transcoder import . |core.io'make-transcoder|)
       (transcoder-codec import . |core.io'transcoder-codec|)
       (transcoder-eol-style import . |core.io'transcoder-eol-style|)
       (transcoder-error-handling-mode import . |core.io'transcoder-error-handling-mode|)
       (native-transcoder import . |core.io'native-transcoder|)
       (native-eol-style import . |core.io'native-eol-style|)
       (bytevector->string import . |core.io'bytevector->string|)
       (string->bytevector import . |core.io'string->bytevector|)
       (eof-object import . |.eof-object|)
       (eof-object? import . |.eof-object?|)
       (port? import . |.port?|)
       (port-transcoder import . |core.io'port-transcoder|)
       (textual-port? import . |core.io'textual-port?|)
       (binary-port? import . |core.io'binary-port?|)
       (transcoded-port import . |core.io'transcoded-port|)
       (port-has-port-position? import . |.port-has-port-position?|)
       (port-position import . |.port-position|)
       (port-has-set-port-position!? import . |.port-has-set-port-position!?|)
       (set-port-position! import . |.set-port-position!|)
       (close-port import . |.close-port|)
       (call-with-port import . |.call-with-port|)
       (input-port? import . |.input-port?|)
       (port-eof? import . |.port-eof?|)
       (open-file-input-port import . |core.io'open-file-input-port|)
       (open-bytevector-input-port import . |core.io'open-bytevector-input-port|)
       (open-string-input-port import . |core.io'open-string-input-port|)
       (standard-input-port import . |.standard-input-port|)
       (current-input-port import . |.current-input-port|)
       (get-u8 import . |.get-u8|)
       (lookahead-u8 import . |.lookahead-u8|)
       (get-bytevector-n import . |.get-bytevector-n|)
       (get-bytevector-n! import . |.get-bytevector-n!|)
       (get-bytevector-some import . |.get-bytevector-some|)
       (get-bytevector-all import . |.get-bytevector-all|)
       (get-char import . |.get-char|)
       (lookahead-char import . |.lookahead-char|)
       (get-string-n import . |.get-string-n|)
       (get-string-n! import . |.get-string-n!|)
       (get-string-all import . |.get-string-all|)
       (get-line import . |.get-line|)
       (get-datum import . |.get-datum|)
       (output-port? import . |.output-port?|)
       (flush-output-port import . |.flush-output-port|)
       (output-port-buffer-mode import . |.output-port-buffer-mode|)
       (open-file-output-port import . |core.io'open-file-output-port|)
       (open-bytevector-output-port import . |core.io'open-bytevector-output-port|)
       (call-with-bytevector-output-port import . |core.io'call-with-bytevector-output-port|)
       (open-string-output-port import . |core.io'open-string-output-port|)
       (call-with-string-output-port import . |core.io'call-with-string-output-port|)
       (standard-output-port import . |.standard-output-port|)
       (standard-error-port import . |.standard-error-port|)
       (current-output-port import . |.current-output-port|)
       (current-error-port import . |.current-error-port|)
       (put-u8 import . |.put-u8|)
       (put-bytevector import . |.put-bytevector|)
       (put-char import . |.put-char|)
       (put-string import . |.put-string|)
       (put-datum import . |.put-datum|)
       (open-file-input/output-port import . |core.io'open-file-input/output-port|)
       (make-custom-binary-input-port import . |core.io'make-custom-binary-input-port|)
       (make-custom-textual-input-port import . |core.io'make-custom-textual-input-port|)
       (make-custom-binary-output-port import . |core.io'make-custom-binary-output-port|)
       (make-custom-textual-output-port import . |core.io'make-custom-textual-output-port|)
       (make-custom-binary-input/output-port
         import
         .
         |core.io'make-custom-binary-input/output-port|)
       (make-custom-textual-input/output-port
         import
         .
         |core.io'make-custom-textual-input/output-port|)))))

((call
   (push.const core io)
   (apply.gloc.of |.require-scheme-library| (|.require-scheme-library| '(core io))))
 (push.const . rnrs.io.simple)
 (push.const 6)
 (push.const
   (&i/o import . |.&i/o|)
   (make-i/o-error import . |.make-i/o-error|)
   (i/o-error? import . |.i/o-error?|)
   (&i/o-read import . |.&i/o-read|)
   (make-i/o-read-error import . |.make-i/o-read-error|)
   (i/o-read-error? import . |.i/o-read-error?|)
   (&i/o-write import . |.&i/o-write|)
   (make-i/o-write-error import . |.make-i/o-write-error|)
   (i/o-write-error? import . |.i/o-write-error?|)
   (&i/o-invalid-position import . |.&i/o-invalid-position|)
   (make-i/o-invalid-position-error import . |.make-i/o-invalid-position-error|)
   (i/o-invalid-position-error? import . |.i/o-invalid-position-error?|)
   (i/o-error-position import . |.i/o-error-position|)
   (&i/o-filename import . |.&i/o-filename|)
   (make-i/o-filename-error import . |.make-i/o-filename-error|)
   (i/o-filename-error? import . |.i/o-filename-error?|)
   (i/o-error-filename import . |.i/o-error-filename|)
   (&i/o-file-protection import . |.&i/o-file-protection|)
   (make-i/o-file-protection-error import . |.make-i/o-file-protection-error|)
   (i/o-file-protection-error? import . |.i/o-file-protection-error?|)
   (&i/o-file-is-read-only import . |.&i/o-file-is-read-only|)
   (make-i/o-file-is-read-only-error import . |.make-i/o-file-is-read-only-error|)
   (i/o-file-is-read-only-error? import . |.i/o-file-is-read-only-error?|)
   (&i/o-file-already-exists import . |.&i/o-file-already-exists|)
   (make-i/o-file-already-exists-error import . |.make-i/o-file-already-exists-error|)
   (i/o-file-already-exists-error? import . |.i/o-file-already-exists-error?|)
   (&i/o-file-does-not-exist import . |.&i/o-file-does-not-exist|)
   (make-i/o-file-does-not-exist-error import . |.make-i/o-file-does-not-exist-error|)
   (i/o-file-does-not-exist-error? import . |.i/o-file-does-not-exist-error?|)
   (&i/o-port import . |.&i/o-port|)
   (make-i/o-port-error import . |.make-i/o-port-error|)
   (i/o-port-error? import . |.i/o-port-error?|)
   (i/o-error-port import . |.i/o-error-port|)
   (&i/o-decoding import . |.&i/o-decoding|)
   (make-i/o-decoding-error import . |.make-i/o-decoding-error|)
   (i/o-decoding-error? import . |.i/o-decoding-error?|)
   (&i/o-encoding import . |.&i/o-encoding|)
   (make-i/o-encoding-error import . |.make-i/o-encoding-error|)
   (i/o-encoding-error? import . |.i/o-encoding-error?|)
   (i/o-encoding-error-char import . |.i/o-encoding-error-char|)
   (current-input-port import . |.current-input-port|)
   (current-output-port import . |.current-output-port|)
   (current-error-port import . |.current-error-port|)
   (eof-object import . |.eof-object|)
   (eof-object? import . |.eof-object?|)
   (input-port? import . |.input-port?|)
   (output-port? import . |.output-port?|)
   (call-with-input-file import . |core.io'call-with-input-file|)
   (call-with-output-file import . |core.io'call-with-output-file|)
   (with-input-from-file import . |core.io'with-input-from-file|)
   (with-output-to-file import . |core.io'with-output-to-file|)
   (open-input-file import . |core.io'open-input-file|)
   (open-output-file import . |core.io'open-output-file|)
   (close-input-port import . |core.io'close-input-port|)
   (close-output-port import . |core.io'close-output-port|)
   (read-char import . |.read-char|)
   (peek-char import . |.peek-char|)
   (read import . |.read|)
   (write-char import . |.write-char|)
   (newline import . |.newline|)
   (display import . |.display|)
   (write import . |.write|))
 (apply.gloc.of
   |.intern-scheme-library|
   (|.intern-scheme-library|
     'rnrs.io.simple
     '(6)
     '((&i/o import . |.&i/o|)
       (make-i/o-error import . |.make-i/o-error|)
       (i/o-error? import . |.i/o-error?|)
       (&i/o-read import . |.&i/o-read|)
       (make-i/o-read-error import . |.make-i/o-read-error|)
       (i/o-read-error? import . |.i/o-read-error?|)
       (&i/o-write import . |.&i/o-write|)
       (make-i/o-write-error import . |.make-i/o-write-error|)
       (i/o-write-error? import . |.i/o-write-error?|)
       (&i/o-invalid-position import . |.&i/o-invalid-position|)
       (make-i/o-invalid-position-error import . |.make-i/o-invalid-position-error|)
       (i/o-invalid-position-error? import . |.i/o-invalid-position-error?|)
       (i/o-error-position import . |.i/o-error-position|)
       (&i/o-filename import . |.&i/o-filename|)
       (make-i/o-filename-error import . |.make-i/o-filename-error|)
       (i/o-filename-error? import . |.i/o-filename-error?|)
       (i/o-error-filename import . |.i/o-error-filename|)
       (&i/o-file-protection import . |.&i/o-file-protection|)
       (make-i/o-file-protection-error import . |.make-i/o-file-protection-error|)
       (i/o-file-protection-error? import . |.i/o-file-protection-error?|)
       (&i/o-file-is-read-only import . |.&i/o-file-is-read-only|)
       (make-i/o-file-is-read-only-error import . |.make-i/o-file-is-read-only-error|)
       (i/o-file-is-read-only-error? import . |.i/o-file-is-read-only-error?|)
       (&i/o-file-already-exists import . |.&i/o-file-already-exists|)
       (make-i/o-file-already-exists-error import . |.make-i/o-file-already-exists-error|)
       (i/o-file-already-exists-error? import . |.i/o-file-already-exists-error?|)
       (&i/o-file-does-not-exist import . |.&i/o-file-does-not-exist|)
       (make-i/o-file-does-not-exist-error import . |.make-i/o-file-does-not-exist-error|)
       (i/o-file-does-not-exist-error? import . |.i/o-file-does-not-exist-error?|)
       (&i/o-port import . |.&i/o-port|)
       (make-i/o-port-error import . |.make-i/o-port-error|)
       (i/o-port-error? import . |.i/o-port-error?|)
       (i/o-error-port import . |.i/o-error-port|)
       (&i/o-decoding import . |.&i/o-decoding|)
       (make-i/o-decoding-error import . |.make-i/o-decoding-error|)
       (i/o-decoding-error? import . |.i/o-decoding-error?|)
       (&i/o-encoding import . |.&i/o-encoding|)
       (make-i/o-encoding-error import . |.make-i/o-encoding-error|)
       (i/o-encoding-error? import . |.i/o-encoding-error?|)
       (i/o-encoding-error-char import . |.i/o-encoding-error-char|)
       (current-input-port import . |.current-input-port|)
       (current-output-port import . |.current-output-port|)
       (current-error-port import . |.current-error-port|)
       (eof-object import . |.eof-object|)
       (eof-object? import . |.eof-object?|)
       (input-port? import . |.input-port?|)
       (output-port? import . |.output-port?|)
       (call-with-input-file import . |core.io'call-with-input-file|)
       (call-with-output-file import . |core.io'call-with-output-file|)
       (with-input-from-file import . |core.io'with-input-from-file|)
       (with-output-to-file import . |core.io'with-output-to-file|)
       (open-input-file import . |core.io'open-input-file|)
       (open-output-file import . |core.io'open-output-file|)
       (close-input-port import . |core.io'close-input-port|)
       (close-output-port import . |core.io'close-output-port|)
       (read-char import . |.read-char|)
       (peek-char import . |.peek-char|)
       (read import . |.read|)
       (write-char import . |.write-char|)
       (newline import . |.newline|)
       (display import . |.display|)
       (write import . |.write|)))))

((call
   (push.const core files)
   (apply.gloc.of |.require-scheme-library| (|.require-scheme-library| '(core files))))
 (push.const . rnrs.files)
 (push.const 6)
 (push.const (file-exists? import . |.file-exists?|) (delete-file import . |.delete-file|))
 (apply.gloc.of
   |.intern-scheme-library|
   (|.intern-scheme-library|
     'rnrs.files
     '(6)
     '((file-exists? import . |.file-exists?|) (delete-file import . |.delete-file|)))))

((call
   (push.const core primitives)
   (apply.gloc.of |.require-scheme-library| (|.require-scheme-library| '(core primitives))))
 (push.const . rnrs.programs)
 (push.const 6)
 (push.const (command-line import . |.command-line|) (exit import . |.exit|))
 (apply.gloc.of
   |.intern-scheme-library|
   (|.intern-scheme-library|
     'rnrs.programs
     '(6)
     '((command-line import . |.command-line|) (exit import . |.exit|)))))

((call
   (push.const core arithmetic)
   (apply.gloc.of |.require-scheme-library| (|.require-scheme-library| '(core arithmetic))))
 (push.const . rnrs.arithmetic.fixnums)
 (push.const 6)
 (push.const
   (fixnum? import . |.fixnum?|)
   (fixnum-width import . |.fixnum-width|)
   (least-fixnum import . |.least-fixnum|)
   (greatest-fixnum import . |.greatest-fixnum|)
   (fx=? import . |.fx=?|)
   (fx<? import . |.fx<?|)
   (fx>? import . |.fx>?|)
   (fx<=? import . |.fx<=?|)
   (fx>=? import . |.fx>=?|)
   (fxzero? import . |.fxzero?|)
   (fxpositive? import . |.fxpositive?|)
   (fxnegative? import . |.fxnegative?|)
   (fxodd? import . |.fxodd?|)
   (fxeven? import . |.fxeven?|)
   (fxmax import . |.fxmax|)
   (fxmin import . |.fxmin|)
   (fx+ import . |.fx+|)
   (fx* import . |.fx*|)
   (fx- import . |.fx-|)
   (fxdiv import . |.fxdiv|)
   (fxmod import . |core.arithmetic'fxmod|)
   (fxdiv-and-mod import . |core.arithmetic'fxdiv-and-mod|)
   (fxdiv0 import . |.fxdiv0|)
   (fxmod0 import . |core.arithmetic'fxmod0|)
   (fxdiv0-and-mod0 import . |core.arithmetic'fxdiv0-and-mod0|)
   (fx+/carry import . |core.arithmetic'fx+/carry|)
   (fx-/carry import . |core.arithmetic'fx-/carry|)
   (fx*/carry import . |core.arithmetic'fx*/carry|)
   (fxnot import . |.fxnot|)
   (fxand import . |.fxand|)
   (fxior import . |.fxior|)
   (fxxor import . |.fxxor|)
   (fxif import . |.fxif|)
   (fxbit-count import . |.fxbit-count|)
   (fxlength import . |.fxlength|)
   (fxfirst-bit-set import . |.fxfirst-bit-set|)
   (fxbit-set? import . |.fxbit-set?|)
   (fxcopy-bit import . |.fxcopy-bit|)
   (fxbit-field import . |.fxbit-field|)
   (fxcopy-bit-field import . |.fxcopy-bit-field|)
   (fxarithmetic-shift import . |.fxarithmetic-shift|)
   (fxarithmetic-shift-left import . |.fxarithmetic-shift-left|)
   (fxarithmetic-shift-right import . |.fxarithmetic-shift-right|)
   (fxrotate-bit-field import . |core.arithmetic'fxrotate-bit-field|)
   (fxreverse-bit-field import . |core.arithmetic'fxreverse-bit-field|))
 (apply.gloc.of
   |.intern-scheme-library|
   (|.intern-scheme-library|
     'rnrs.arithmetic.fixnums
     '(6)
     '((fixnum? import . |.fixnum?|)
       (fixnum-width import . |.fixnum-width|)
       (least-fixnum import . |.least-fixnum|)
       (greatest-fixnum import . |.greatest-fixnum|)
       (fx=? import . |.fx=?|)
       (fx<? import . |.fx<?|)
       (fx>? import . |.fx>?|)
       (fx<=? import . |.fx<=?|)
       (fx>=? import . |.fx>=?|)
       (fxzero? import . |.fxzero?|)
       (fxpositive? import . |.fxpositive?|)
       (fxnegative? import . |.fxnegative?|)
       (fxodd? import . |.fxodd?|)
       (fxeven? import . |.fxeven?|)
       (fxmax import . |.fxmax|)
       (fxmin import . |.fxmin|)
       (fx+ import . |.fx+|)
       (fx* import . |.fx*|)
       (fx- import . |.fx-|)
       (fxdiv import . |.fxdiv|)
       (fxmod import . |core.arithmetic'fxmod|)
       (fxdiv-and-mod import . |core.arithmetic'fxdiv-and-mod|)
       (fxdiv0 import . |.fxdiv0|)
       (fxmod0 import . |core.arithmetic'fxmod0|)
       (fxdiv0-and-mod0 import . |core.arithmetic'fxdiv0-and-mod0|)
       (fx+/carry import . |core.arithmetic'fx+/carry|)
       (fx-/carry import . |core.arithmetic'fx-/carry|)
       (fx*/carry import . |core.arithmetic'fx*/carry|)
       (fxnot import . |.fxnot|)
       (fxand import . |.fxand|)
       (fxior import . |.fxior|)
       (fxxor import . |.fxxor|)
       (fxif import . |.fxif|)
       (fxbit-count import . |.fxbit-count|)
       (fxlength import . |.fxlength|)
       (fxfirst-bit-set import . |.fxfirst-bit-set|)
       (fxbit-set? import . |.fxbit-set?|)
       (fxcopy-bit import . |.fxcopy-bit|)
       (fxbit-field import . |.fxbit-field|)
       (fxcopy-bit-field import . |.fxcopy-bit-field|)
       (fxarithmetic-shift import . |.fxarithmetic-shift|)
       (fxarithmetic-shift-left import . |.fxarithmetic-shift-left|)
       (fxarithmetic-shift-right import . |.fxarithmetic-shift-right|)
       (fxrotate-bit-field import . |core.arithmetic'fxrotate-bit-field|)
       (fxreverse-bit-field import . |core.arithmetic'fxreverse-bit-field|)))))

((call
   (push.const core arithmetic)
   (apply.gloc.of |.require-scheme-library| (|.require-scheme-library| '(core arithmetic))))
 (push.const . rnrs.arithmetic.flonums)
 (push.const 6)
 (push.const
   (flonum? import . |.flonum?|)
   (real->flonum import . |.real->flonum|)
   (fl=? import . |.fl=?|)
   (fl<? import . |.fl<?|)
   (fl>? import . |.fl>?|)
   (fl<=? import . |.fl<=?|)
   (fl>=? import . |.fl>=?|)
   (flinteger? import . |.flinteger?|)
   (flzero? import . |.flzero?|)
   (flpositive? import . |.flpositive?|)
   (flnegative? import . |.flnegative?|)
   (flodd? import . |.flodd?|)
   (fleven? import . |.fleven?|)
   (flfinite? import . |.flfinite?|)
   (flinfinite? import . |.flinfinite?|)
   (flnan? import . |.flnan?|)
   (flmax import . |.flmax|)
   (flmin import . |.flmin|)
   (fl+ import . |.fl+|)
   (fl* import . |.fl*|)
   (fl- import . |.fl-|)
   (fl/ import . |.fl/|)
   (fldiv-and-mod import . |core.arithmetic'fldiv-and-mod|)
   (fldiv import . |.fldiv|)
   (flmod import . |core.arithmetic'flmod|)
   (fldiv0-and-mod0 import . |core.arithmetic'fldiv0-and-mod0|)
   (fldiv0 import . |.fldiv0|)
   (flmod0 import . |core.arithmetic'flmod0|)
   (flnumerator import . |.flnumerator|)
   (fldenominator import . |.fldenominator|)
   (flfloor import . |.flfloor|)
   (flceiling import . |.flceiling|)
   (fltruncate import . |.fltruncate|)
   (flround import . |.flround|)
   (flexp import . |.flexp|)
   (flexpt import . |.flexpt|)
   (fllog import . |.fllog|)
   (flsin import . |.flsin|)
   (flcos import . |.flcos|)
   (fltan import . |.fltan|)
   (flasin import . |.flasin|)
   (flacos import . |.flacos|)
   (flatan import . |.flatan|)
   (flabs import . |.flabs|)
   (flsqrt import . |.flsqrt|)
   (fixnum->flonum import . |.fixnum->flonum|)
   (&no-infinities import . |.&no-infinities|)
   (make-no-infinities-violation import . |.make-no-infinities-violation|)
   (no-infinities-violation? import . |.no-infinities-violation?|)
   (&no-nans import . |.&no-nans|)
   (make-no-nans-violation import . |.make-no-nans-violation|)
   (no-nans-violation? import . |.no-nans-violation?|))
 (apply.gloc.of
   |.intern-scheme-library|
   (|.intern-scheme-library|
     'rnrs.arithmetic.flonums
     '(6)
     '((flonum? import . |.flonum?|)
       (real->flonum import . |.real->flonum|)
       (fl=? import . |.fl=?|)
       (fl<? import . |.fl<?|)
       (fl>? import . |.fl>?|)
       (fl<=? import . |.fl<=?|)
       (fl>=? import . |.fl>=?|)
       (flinteger? import . |.flinteger?|)
       (flzero? import . |.flzero?|)
       (flpositive? import . |.flpositive?|)
       (flnegative? import . |.flnegative?|)
       (flodd? import . |.flodd?|)
       (fleven? import . |.fleven?|)
       (flfinite? import . |.flfinite?|)
       (flinfinite? import . |.flinfinite?|)
       (flnan? import . |.flnan?|)
       (flmax import . |.flmax|)
       (flmin import . |.flmin|)
       (fl+ import . |.fl+|)
       (fl* import . |.fl*|)
       (fl- import . |.fl-|)
       (fl/ import . |.fl/|)
       (fldiv-and-mod import . |core.arithmetic'fldiv-and-mod|)
       (fldiv import . |.fldiv|)
       (flmod import . |core.arithmetic'flmod|)
       (fldiv0-and-mod0 import . |core.arithmetic'fldiv0-and-mod0|)
       (fldiv0 import . |.fldiv0|)
       (flmod0 import . |core.arithmetic'flmod0|)
       (flnumerator import . |.flnumerator|)
       (fldenominator import . |.fldenominator|)
       (flfloor import . |.flfloor|)
       (flceiling import . |.flceiling|)
       (fltruncate import . |.fltruncate|)
       (flround import . |.flround|)
       (flexp import . |.flexp|)
       (flexpt import . |.flexpt|)
       (fllog import . |.fllog|)
       (flsin import . |.flsin|)
       (flcos import . |.flcos|)
       (fltan import . |.fltan|)
       (flasin import . |.flasin|)
       (flacos import . |.flacos|)
       (flatan import . |.flatan|)
       (flabs import . |.flabs|)
       (flsqrt import . |.flsqrt|)
       (fixnum->flonum import . |.fixnum->flonum|)
       (&no-infinities import . |.&no-infinities|)
       (make-no-infinities-violation import . |.make-no-infinities-violation|)
       (no-infinities-violation? import . |.no-infinities-violation?|)
       (&no-nans import . |.&no-nans|)
       (make-no-nans-violation import . |.make-no-nans-violation|)
       (no-nans-violation? import . |.no-nans-violation?|)))))

((call
   (push.const core arithmetic)
   (apply.gloc.of |.require-scheme-library| (|.require-scheme-library| '(core arithmetic))))
 (push.const . rnrs.arithmetic.bitwise)
 (push.const 6)
 (push.const
   (bitwise-not import . |.bitwise-not|)
   (bitwise-and import . |.bitwise-and|)
   (bitwise-ior import . |.bitwise-ior|)
   (bitwise-xor import . |.bitwise-xor|)
   (bitwise-if import . |core.arithmetic'bitwise-if|)
   (bitwise-bit-count import . |.bitwise-bit-count|)
   (bitwise-length import . |.bitwise-length|)
   (bitwise-first-bit-set import . |.bitwise-first-bit-set|)
   (bitwise-bit-set? import . |core.arithmetic'bitwise-bit-set?|)
   (bitwise-copy-bit import . |core.arithmetic'bitwise-copy-bit|)
   (bitwise-bit-field import . |core.arithmetic'bitwise-bit-field|)
   (bitwise-copy-bit-field import . |core.arithmetic'bitwise-copy-bit-field|)
   (bitwise-arithmetic-shift import . |.bitwise-arithmetic-shift|)
   (bitwise-arithmetic-shift-left import . |core.arithmetic'bitwise-arithmetic-shift-left|)
   (bitwise-arithmetic-shift-right import . |core.arithmetic'bitwise-arithmetic-shift-right|)
   (bitwise-rotate-bit-field import . |core.arithmetic'bitwise-rotate-bit-field|)
   (bitwise-reverse-bit-field import . |core.arithmetic'bitwise-reverse-bit-field|))
 (apply.gloc.of
   |.intern-scheme-library|
   (|.intern-scheme-library|
     'rnrs.arithmetic.bitwise
     '(6)
     '((bitwise-not import . |.bitwise-not|)
       (bitwise-and import . |.bitwise-and|)
       (bitwise-ior import . |.bitwise-ior|)
       (bitwise-xor import . |.bitwise-xor|)
       (bitwise-if import . |core.arithmetic'bitwise-if|)
       (bitwise-bit-count import . |.bitwise-bit-count|)
       (bitwise-length import . |.bitwise-length|)
       (bitwise-first-bit-set import . |.bitwise-first-bit-set|)
       (bitwise-bit-set? import . |core.arithmetic'bitwise-bit-set?|)
       (bitwise-copy-bit import . |core.arithmetic'bitwise-copy-bit|)
       (bitwise-bit-field import . |core.arithmetic'bitwise-bit-field|)
       (bitwise-copy-bit-field import . |core.arithmetic'bitwise-copy-bit-field|)
       (bitwise-arithmetic-shift import . |.bitwise-arithmetic-shift|)
       (bitwise-arithmetic-shift-left import . |core.arithmetic'bitwise-arithmetic-shift-left|)
       (bitwise-arithmetic-shift-right import . |core.arithmetic'bitwise-arithmetic-shift-right|)
       (bitwise-rotate-bit-field import . |core.arithmetic'bitwise-rotate-bit-field|)
       (bitwise-reverse-bit-field import . |core.arithmetic'bitwise-reverse-bit-field|)))))

((call
   (push.const core syntax-case)
   (apply.gloc.of |.require-scheme-library| (|.require-scheme-library| '(core syntax-case))))
 (push.const . rnrs.syntax-case)
 (push.const 6)
 (push.const
   (make-variable-transformer import . |.make-variable-transformer|)
   (syntax-case import . |.syntax-case|)
   (_ import . |._|)
   (... import . |....|)
   (syntax import . |.syntax|)
   (identifier? import . |.identifier?|)
   (bound-identifier=? import . |.bound-identifier=?|)
   (free-identifier=? import . |.free-identifier=?|)
   (syntax->datum import . |.syntax->datum|)
   (datum->syntax import . |.datum->syntax|)
   (generate-temporaries import . |.generate-temporaries|)
   (with-syntax import . |core.syntax-case'with-syntax|)
   (quasisyntax import . |core.syntax-case'quasisyntax|)
   (unsyntax import . |core.syntax-case'unsyntax|)
   (unsyntax-splicing import . |core.syntax-case'unsyntax-splicing|)
   (syntax-violation import . |.syntax-violation|))
 (apply.gloc.of
   |.intern-scheme-library|
   (|.intern-scheme-library|
     'rnrs.syntax-case
     '(6)
     '((make-variable-transformer import . |.make-variable-transformer|)
       (syntax-case import . |.syntax-case|)
       (_ import . |._|)
       (... import . |....|)
       (syntax import . |.syntax|)
       (identifier? import . |.identifier?|)
       (bound-identifier=? import . |.bound-identifier=?|)
       (free-identifier=? import . |.free-identifier=?|)
       (syntax->datum import . |.syntax->datum|)
       (datum->syntax import . |.datum->syntax|)
       (generate-temporaries import . |.generate-temporaries|)
       (with-syntax import . |core.syntax-case'with-syntax|)
       (quasisyntax import . |core.syntax-case'quasisyntax|)
       (unsyntax import . |core.syntax-case'unsyntax|)
       (unsyntax-splicing import . |core.syntax-case'unsyntax-splicing|)
       (syntax-violation import . |.syntax-violation|)))))

((call
   (push.const core hashtables)
   (apply.gloc.of |.require-scheme-library| (|.require-scheme-library| '(core hashtables))))
 (push.const . rnrs.hashtables)
 (push.const 6)
 (push.const
   (make-eq-hashtable import . |core.hashtables'make-eq-hashtable|)
   (make-eqv-hashtable import . |core.hashtables'make-eqv-hashtable|)
   (make-hashtable import . |core.hashtables'make-hashtable|)
   (hashtable? import . |.core-hashtable?|)
   (hashtable-size import . |.core-hashtable-size|)
   (hashtable-ref import . |.core-hashtable-ref|)
   (hashtable-set! import . |.core-hashtable-set!|)
   (hashtable-delete! import . |.core-hashtable-delete!|)
   (hashtable-contains? import . |.core-hashtable-contains?|)
   (hashtable-update! import . |core.hashtables'hashtable-update!|)
   (hashtable-copy import . |.core-hashtable-copy|)
   (hashtable-clear! import . |.core-hashtable-clear!|)
   (hashtable-keys import . |core.hashtables'hashtable-keys|)
   (hashtable-entries import . |core.hashtables'hashtable-entries|)
   (hashtable-equivalence-function import . |.core-hashtable-equivalence-function|)
   (hashtable-hash-function import . |.core-hashtable-hash-function|)
   (hashtable-mutable? import . |.core-hashtable-mutable?|)
   (equal-hash import . |.equal-hash|)
   (string-hash import . |.string-hash|)
   (string-ci-hash import . |core.hashtables'string-ci-hash|)
   (symbol-hash import . |.symbol-hash|))
 (apply.gloc.of
   |.intern-scheme-library|
   (|.intern-scheme-library|
     'rnrs.hashtables
     '(6)
     '((make-eq-hashtable import . |core.hashtables'make-eq-hashtable|)
       (make-eqv-hashtable import . |core.hashtables'make-eqv-hashtable|)
       (make-hashtable import . |core.hashtables'make-hashtable|)
       (hashtable? import . |.core-hashtable?|)
       (hashtable-size import . |.core-hashtable-size|)
       (hashtable-ref import . |.core-hashtable-ref|)
       (hashtable-set! import . |.core-hashtable-set!|)
       (hashtable-delete! import . |.core-hashtable-delete!|)
       (hashtable-contains? import . |.core-hashtable-contains?|)
       (hashtable-update! import . |core.hashtables'hashtable-update!|)
       (hashtable-copy import . |.core-hashtable-copy|)
       (hashtable-clear! import . |.core-hashtable-clear!|)
       (hashtable-keys import . |core.hashtables'hashtable-keys|)
       (hashtable-entries import . |core.hashtables'hashtable-entries|)
       (hashtable-equivalence-function import . |.core-hashtable-equivalence-function|)
       (hashtable-hash-function import . |.core-hashtable-hash-function|)
       (hashtable-mutable? import . |.core-hashtable-mutable?|)
       (equal-hash import . |.equal-hash|)
       (string-hash import . |.string-hash|)
       (string-ci-hash import . |core.hashtables'string-ci-hash|)
       (symbol-hash import . |.symbol-hash|)))))

((call
   (push.const core enums)
   (apply.gloc.of |.require-scheme-library| (|.require-scheme-library| '(core enums))))
 (push.const . rnrs.enums)
 (push.const 6)
 (push.const
   (make-enumeration import . |core.enums'make-enumeration|)
   (enum-set-universe import . |core.enums'enum-set-universe|)
   (enum-set-indexer import . |core.enums'enum-set-indexer|)
   (enum-set-constructor import . |core.enums'enum-set-constructor|)
   (enum-set->list import . |core.enums'enum-set->list|)
   (enum-set-member? import . |core.enums'enum-set-member?|)
   (enum-set-subset? import . |core.enums'enum-set-subset?|)
   (enum-set=? import . |core.enums'enum-set=?|)
   (enum-set-union import . |core.enums'enum-set-union|)
   (enum-set-intersection import . |core.enums'enum-set-intersection|)
   (enum-set-difference import . |core.enums'enum-set-difference|)
   (enum-set-complement import . |core.enums'enum-set-complement|)
   (enum-set-projection import . |core.enums'enum-set-projection|)
   (define-enumeration import . |core.enums'define-enumeration|))
 (apply.gloc.of
   |.intern-scheme-library|
   (|.intern-scheme-library|
     'rnrs.enums
     '(6)
     '((make-enumeration import . |core.enums'make-enumeration|)
       (enum-set-universe import . |core.enums'enum-set-universe|)
       (enum-set-indexer import . |core.enums'enum-set-indexer|)
       (enum-set-constructor import . |core.enums'enum-set-constructor|)
       (enum-set->list import . |core.enums'enum-set->list|)
       (enum-set-member? import . |core.enums'enum-set-member?|)
       (enum-set-subset? import . |core.enums'enum-set-subset?|)
       (enum-set=? import . |core.enums'enum-set=?|)
       (enum-set-union import . |core.enums'enum-set-union|)
       (enum-set-intersection import . |core.enums'enum-set-intersection|)
       (enum-set-difference import . |core.enums'enum-set-difference|)
       (enum-set-complement import . |core.enums'enum-set-complement|)
       (enum-set-projection import . |core.enums'enum-set-projection|)
       (define-enumeration import . |core.enums'define-enumeration|)))))

((call
   (push.const rnrs enums)
   (apply.gloc.of |.require-scheme-library| (|.require-scheme-library| '(rnrs enums))))
 (call
   (push.const rnrs hashtables)
   (apply.gloc.of |.require-scheme-library| (|.require-scheme-library| '(rnrs hashtables))))
 (call
   (push.const rnrs syntax-case)
   (apply.gloc.of |.require-scheme-library| (|.require-scheme-library| '(rnrs syntax-case))))
 (call
   (push.const rnrs arithmetic bitwise)
   (apply.gloc.of |.require-scheme-library| (|.require-scheme-library| '(rnrs arithmetic bitwise))))
 (call
   (push.const rnrs arithmetic flonums)
   (apply.gloc.of |.require-scheme-library| (|.require-scheme-library| '(rnrs arithmetic flonums))))
 (call
   (push.const rnrs arithmetic fixnums)
   (apply.gloc.of |.require-scheme-library| (|.require-scheme-library| '(rnrs arithmetic fixnums))))
 (call
   (push.const rnrs programs)
   (apply.gloc.of |.require-scheme-library| (|.require-scheme-library| '(rnrs programs))))
 (call
   (push.const rnrs files)
   (apply.gloc.of |.require-scheme-library| (|.require-scheme-library| '(rnrs files))))
 (call
   (push.const rnrs io simple)
   (apply.gloc.of |.require-scheme-library| (|.require-scheme-library| '(rnrs io simple))))
 (call
   (push.const rnrs io ports)
   (apply.gloc.of |.require-scheme-library| (|.require-scheme-library| '(rnrs io ports))))
 (call
   (push.const rnrs conditions)
   (apply.gloc.of |.require-scheme-library| (|.require-scheme-library| '(rnrs conditions))))
 (call
   (push.const rnrs exceptions)
   (apply.gloc.of |.require-scheme-library| (|.require-scheme-library| '(rnrs exceptions))))
 (call
   (push.const rnrs records inspection)
   (apply.gloc.of |.require-scheme-library| (|.require-scheme-library| '(rnrs records inspection))))
 (call
   (push.const rnrs records procedural)
   (apply.gloc.of |.require-scheme-library| (|.require-scheme-library| '(rnrs records procedural))))
 (call
   (push.const rnrs records syntactic)
   (apply.gloc.of |.require-scheme-library| (|.require-scheme-library| '(rnrs records syntactic))))
 (call
   (push.const rnrs control)
   (apply.gloc.of |.require-scheme-library| (|.require-scheme-library| '(rnrs control))))
 (call
   (push.const rnrs sorting)
   (apply.gloc.of |.require-scheme-library| (|.require-scheme-library| '(rnrs sorting))))
 (call
   (push.const rnrs lists)
   (apply.gloc.of |.require-scheme-library| (|.require-scheme-library| '(rnrs lists))))
 (call
   (push.const rnrs bytevectors)
   (apply.gloc.of |.require-scheme-library| (|.require-scheme-library| '(rnrs bytevectors))))
 (call
   (push.const rnrs unicode)
   (apply.gloc.of |.require-scheme-library| (|.require-scheme-library| '(rnrs unicode))))
 (call
   (push.const rnrs base)
   (apply.gloc.of |.require-scheme-library| (|.require-scheme-library| '(rnrs base))))
 (push.const . rnrs)
 (push.const 6)
 (push.const
   (define import . |.define|)
   (define-syntax import . |.define-syntax|)
   (quote import . |.quote|)
   (lambda import . |.lambda|)
   (if import . |.if|)
   (set! import . |.set!|)
   (cond import . |.cond|)
   (case import . |.case|)
   (and import . |.and|)
   (or import . |.or|)
   (let import . |.let|)
   (let* import . |.let*|)
   (letrec import . |.letrec|)
   (letrec* import . |.letrec*|)
   (let-values import . |.let-values|)
   (let*-values import . |.let*-values|)
   (begin import . |.begin|)
   (quasiquote import . |.quasiquote|)
   (unquote import . |.unquote|)
   (unquote-splicing import . |.unquote-splicing|)
   (let-syntax import . |.let-syntax|)
   (letrec-syntax import . |.letrec-syntax|)
   (syntax-rules import . |.syntax-rules|)
   (identifier-syntax import . |.identifier-syntax|)
   (assert import . |.assert|)
   (else import . |.else|)
   (=> import . |.=>|)
   (... import . |....|)
   (_ import . |._|)
   (eq? import . |.eq?|)
   (eqv? import . |.eqv?|)
   (equal? import . |.equal?|)
   (procedure? import . |.procedure?|)
   (number? import . |.number?|)
   (complex? import . |.complex?|)
   (real? import . |.real?|)
   (rational? import . |.rational?|)
   (integer? import . |.integer?|)
   (real-valued? import . |.real-valued?|)
   (rational-valued? import . |.rational-valued?|)
   (integer-valued? import . |.integer-valued?|)
   (exact? import . |.exact?|)
   (inexact? import . |.inexact?|)
   (inexact import . |.inexact|)
   (exact import . |.exact|)
   (= import . |.=|)
   (< import . |.<|)
   (> import . |.>|)
   (<= import . |.<=|)
   (>= import . |.>=|)
   (zero? import . |.zero?|)
   (positive? import . |.positive?|)
   (negative? import . |.negative?|)
   (odd? import . |.odd?|)
   (even? import . |.even?|)
   (finite? import . |.finite?|)
   (infinite? import . |.infinite?|)
   (nan? import . |.nan?|)
   (max import . |.max|)
   (min import . |.min|)
   (+ import . |.+|)
   (* import . |.*|)
   (- import . |.-|)
   (/ import . |./|)
   (abs import . |.abs|)
   (div-and-mod import . |.div-and-mod|)
   (div import . |.div|)
   (mod import . |.mod|)
   (div0-and-mod0 import . |.div0-and-mod0|)
   (div0 import . |.div0|)
   (mod0 import . |.mod0|)
   (gcd import . |.gcd|)
   (lcm import . |.lcm|)
   (numerator import . |.numerator|)
   (denominator import . |.denominator|)
   (floor import . |.floor|)
   (ceiling import . |.ceiling|)
   (truncate import . |.truncate|)
   (round import . |.round|)
   (rationalize import . |.rationalize|)
   (exp import . |.exp|)
   (log import . |.log|)
   (sin import . |.sin|)
   (cos import . |.cos|)
   (tan import . |.tan|)
   (asin import . |.asin|)
   (acos import . |.acos|)
   (atan import . |.atan|)
   (sqrt import . |.sqrt|)
   (exact-integer-sqrt import . |.exact-integer-sqrt|)
   (expt import . |.expt|)
   (make-rectangular import . |.make-rectangular|)
   (make-polar import . |.make-polar|)
   (real-part import . |.real-part|)
   (imag-part import . |.imag-part|)
   (magnitude import . |.magnitude|)
   (angle import . |.angle|)
   (number->string import . |.number->string|)
   (string->number import . |.string->number|)
   (not import . |.not|)
   (boolean? import . |.boolean?|)
   (boolean=? import . |.boolean=?|)
   (pair? import . |.pair?|)
   (cons import . |.cons|)
   (car import . |.car|)
   (cdr import . |.cdr|)
   (caar import . |.caar|)
   (cadr import . |.cadr|)
   (cdar import . |.cdar|)
   (cddr import . |.cddr|)
   (caaar import . |.caaar|)
   (caadr import . |.caadr|)
   (cadar import . |.cadar|)
   (caddr import . |.caddr|)
   (cdaar import . |.cdaar|)
   (cdadr import . |.cdadr|)
   (cddar import . |.cddar|)
   (cdddr import . |.cdddr|)
   (caaaar import . |.caaaar|)
   (caaadr import . |.caaadr|)
   (caadar import . |.caadar|)
   (caaddr import . |.caaddr|)
   (cadaar import . |.cadaar|)
   (cadadr import . |.cadadr|)
   (caddar import . |.caddar|)
   (cadddr import . |.cadddr|)
   (cdaaar import . |.cdaaar|)
   (cdaadr import . |.cdaadr|)
   (cdadar import . |.cdadar|)
   (cdaddr import . |.cdaddr|)
   (cddaar import . |.cddaar|)
   (cddadr import . |.cddadr|)
   (cdddar import . |.cdddar|)
   (cddddr import . |.cddddr|)
   (null? import . |.null?|)
   (list? import . |.list?|)
   (list import . |.list|)
   (length import . |.length|)
   (append import . |.append|)
   (reverse import . |.reverse|)
   (list-tail import . |.list-tail|)
   (list-ref import . |.list-ref|)
   (map import . |.map|)
   (for-each import . |.for-each|)
   (symbol? import . |.symbol?|)
   (symbol->string import . |.symbol->string|)
   (string->symbol import . |.string->symbol|)
   (symbol=? import . |.symbol=?|)
   (char? import . |.char?|)
   (char->integer import . |.char->integer|)
   (integer->char import . |.integer->char|)
   (char=? import . |.char=?|)
   (char<? import . |.char<?|)
   (char>? import . |.char>?|)
   (char<=? import . |.char<=?|)
   (char>=? import . |.char>=?|)
   (string? import . |.string?|)
   (make-string import . |.make-string|)
   (string import . |.string|)
   (string-length import . |.string-length|)
   (string-ref import . |.string-ref|)
   (string=? import . |.string=?|)
   (string<? import . |.string<?|)
   (string>? import . |.string>?|)
   (string<=? import . |.string<=?|)
   (string>=? import . |.string>=?|)
   (substring import . |.substring|)
   (string-append import . |.string-append|)
   (string->list import . |.string->list|)
   (list->string import . |.list->string|)
   (string-copy import . |.string-copy|)
   (string-for-each import . |.string-for-each|)
   (vector? import . |.vector?|)
   (make-vector import . |.make-vector|)
   (vector import . |.vector|)
   (vector-length import . |.vector-length|)
   (vector-ref import . |.vector-ref|)
   (vector-set! import . |.vector-set!|)
   (vector->list import . |.vector->list|)
   (list->vector import . |.list->vector|)
   (vector-fill! import . |.vector-fill!|)
   (vector-map import . |.vector-map|)
   (vector-for-each import . |.vector-for-each|)
   (error import . |.error|)
   (assertion-violation import . |.assertion-violation|)
   (apply import . |.apply|)
   (call-with-current-continuation import . |.call-with-current-continuation|)
   (call/cc import . |.call/cc|)
   (values import . |.values|)
   (call-with-values import . |.call-with-values|)
   (dynamic-wind import . |.dynamic-wind|)
   (char-upcase import . |core.unicode'char-upcase|)
   (char-downcase import . |core.unicode'char-downcase|)
   (char-titlecase import . |core.unicode'char-titlecase|)
   (char-foldcase import . |core.unicode'char-foldcase|)
   (char-ci=? import . |core.unicode'char-ci=?|)
   (char-ci<? import . |core.unicode'char-ci<?|)
   (char-ci>? import . |core.unicode'char-ci>?|)
   (char-ci<=? import . |core.unicode'char-ci<=?|)
   (char-ci>=? import . |core.unicode'char-ci>=?|)
   (char-alphabetic? import . |core.unicode'char-alphabetic?|)
   (char-numeric? import . |core.unicode'char-numeric?|)
   (char-whitespace? import . |.char-whitespace?|)
   (char-upper-case? import . |core.unicode'char-upper-case?|)
   (char-lower-case? import . |core.unicode'char-lower-case?|)
   (char-title-case? import . |core.unicode'char-title-case?|)
   (char-general-category import . |core.unicode'char-general-category|)
   (string-upcase import . |core.unicode'string-upcase|)
   (string-downcase import . |core.unicode'string-downcase|)
   (string-titlecase import . |core.unicode'string-titlecase|)
   (string-foldcase import . |core.unicode'string-foldcase|)
   (string-ci=? import . |core.unicode'string-ci=?|)
   (string-ci<? import . |core.unicode'string-ci<?|)
   (string-ci>? import . |core.unicode'string-ci>?|)
   (string-ci<=? import . |core.unicode'string-ci<=?|)
   (string-ci>=? import . |core.unicode'string-ci>=?|)
   (string-normalize-nfd import . |core.unicode'string-normalize-nfd|)
   (string-normalize-nfkd import . |core.unicode'string-normalize-nfkd|)
   (string-normalize-nfc import . |core.unicode'string-normalize-nfc|)
   (string-normalize-nfkc import . |core.unicode'string-normalize-nfkc|)
   (endianness import . |core.bytevectors'endianness|)
   (native-endianness import . |.native-endianness|)
   (bytevector? import . |.bytevector?|)
   (make-bytevector import . |.make-bytevector|)
   (bytevector-length import . |.bytevector-length|)
   (bytevector=? import . |.bytevector=?|)
   (bytevector-fill! import . |.bytevector-fill!|)
   (bytevector-copy! import . |.bytevector-copy!|)
   (bytevector-copy import . |.bytevector-copy|)
   (bytevector-u8-ref import . |.bytevector-u8-ref|)
   (bytevector-s8-ref import . |.bytevector-s8-ref|)
   (bytevector-u8-set! import . |.bytevector-u8-set!|)
   (bytevector-s8-set! import . |.bytevector-s8-set!|)
   (bytevector->u8-list import . |.bytevector->u8-list|)
   (u8-list->bytevector import . |.u8-list->bytevector|)
   (bytevector-u16-ref import . |.bytevector-u16-ref|)
   (bytevector-s16-ref import . |.bytevector-s16-ref|)
   (bytevector-u16-native-ref import . |.bytevector-u16-native-ref|)
   (bytevector-s16-native-ref import . |.bytevector-s16-native-ref|)
   (bytevector-u16-set! import . |.bytevector-u16-set!|)
   (bytevector-s16-set! import . |.bytevector-s16-set!|)
   (bytevector-u16-native-set! import . |.bytevector-u16-native-set!|)
   (bytevector-s16-native-set! import . |.bytevector-s16-native-set!|)
   (bytevector-u32-ref import . |.bytevector-u32-ref|)
   (bytevector-s32-ref import . |.bytevector-s32-ref|)
   (bytevector-u32-native-ref import . |.bytevector-u32-native-ref|)
   (bytevector-s32-native-ref import . |.bytevector-s32-native-ref|)
   (bytevector-u32-set! import . |.bytevector-u32-set!|)
   (bytevector-s32-set! import . |.bytevector-s32-set!|)
   (bytevector-u32-native-set! import . |.bytevector-u32-native-set!|)
   (bytevector-s32-native-set! import . |.bytevector-s32-native-set!|)
   (bytevector-u64-ref import . |.bytevector-u64-ref|)
   (bytevector-s64-ref import . |.bytevector-s64-ref|)
   (bytevector-u64-native-ref import . |.bytevector-u64-native-ref|)
   (bytevector-s64-native-ref import . |.bytevector-s64-native-ref|)
   (bytevector-u64-set! import . |.bytevector-u64-set!|)
   (bytevector-s64-set! import . |.bytevector-s64-set!|)
   (bytevector-u64-native-set! import . |.bytevector-u64-native-set!|)
   (bytevector-s64-native-set! import . |.bytevector-s64-native-set!|)
   (bytevector-ieee-single-ref import . |.bytevector-ieee-single-ref|)
   (bytevector-ieee-single-native-ref import . |.bytevector-ieee-single-native-ref|)
   (bytevector-ieee-single-set! import . |.bytevector-ieee-single-set!|)
   (bytevector-ieee-single-native-set! import . |.bytevector-ieee-single-native-set!|)
   (bytevector-ieee-double-ref import . |.bytevector-ieee-double-ref|)
   (bytevector-ieee-double-native-ref import . |.bytevector-ieee-double-native-ref|)
   (bytevector-ieee-double-set! import . |.bytevector-ieee-double-set!|)
   (bytevector-ieee-double-native-set! import . |.bytevector-ieee-double-native-set!|)
   (bytevector-uint-ref import . |core.bytevectors'bytevector-uint-ref|)
   (bytevector-sint-ref import . |core.bytevectors'bytevector-sint-ref|)
   (bytevector-uint-set! import . |core.bytevectors'bytevector-uint-set!|)
   (bytevector-sint-set! import . |core.bytevectors'bytevector-sint-set!|)
   (bytevector->uint-list import . |core.bytevectors'bytevector->uint-list|)
   (bytevector->sint-list import . |core.bytevectors'bytevector->sint-list|)
   (uint-list->bytevector import . |core.bytevectors'uint-list->bytevector|)
   (sint-list->bytevector import . |core.bytevectors'sint-list->bytevector|)
   (string->utf8 import . |.string->utf8|)
   (utf8->string import . |.utf8->string|)
   (string->utf16 import . |core.bytevector-transcoders'string->utf16|)
   (utf16->string import . |core.bytevector-transcoders'utf16->string|)
   (string->utf32 import . |core.bytevector-transcoders'string->utf32|)
   (utf32->string import . |core.bytevector-transcoders'utf32->string|)
   (find import . |core.lists'find|)
   (for-all import . |core.lists'for-all|)
   (exists import . |core.lists'exists|)
   (filter import . |core.lists'filter|)
   (partition import . |core.lists'partition|)
   (fold-left import . |core.lists'fold-left|)
   (fold-right import . |core.lists'fold-right|)
   (remp import . |core.lists'remp|)
   (remove import . |core.lists'remove|)
   (remv import . |core.lists'remv|)
   (remq import . |core.lists'remq|)
   (memp import . |core.lists'memp|)
   (member import . |.member|)
   (memv import . |.memv|)
   (memq import . |.memq|)
   (assp import . |core.lists'assp|)
   (assoc import . |.assoc|)
   (assv import . |.assv|)
   (assq import . |.assq|)
   (cons* import . |.cons*|)
   (list-sort import . |core.sorting'list-sort|)
   (vector-sort import . |core.sorting'vector-sort|)
   (vector-sort! import . |core.sorting'vector-sort!|)
   (when import . |core.control'when|)
   (unless import . |core.control'unless|)
   (do import . |.do|)
   (case-lambda import . |core.control'case-lambda|)
   (define-record-type import . |core.records'define-record-type|)
   (record-type-descriptor import . |core.records'record-type-descriptor|)
   (record-constructor-descriptor import . |core.records'record-constructor-descriptor|)
   (fields import . |core.records'fields|)
   (mutable import . |core.records'mutable|)
   (immutable import . |core.records'immutable|)
   (parent import . |core.records'parent|)
   (protocol import . |core.records'protocol|)
   (sealed import . |core.records'sealed|)
   (opaque import . |core.records'opaque|)
   (nongenerative import . |core.records'nongenerative|)
   (parent-rtd import . |core.records'parent-rtd|)
   (make-record-type-descriptor import . |.make-record-type-descriptor|)
   (record-type-descriptor? import . |.record-type-descriptor?|)
   (make-record-constructor-descriptor import . |.make-record-constructor-descriptor|)
   (record-constructor import . |.record-constructor|)
   (record-predicate import . |.record-predicate|)
   (record-accessor import . |.record-accessor|)
   (record-mutator import . |.record-mutator|)
   (record? import . |.record?|)
   (record-rtd import . |.record-rtd|)
   (record-type-name import . |.record-type-name|)
   (record-type-parent import . |.record-type-parent|)
   (record-type-uid import . |.record-type-uid|)
   (record-type-generative? import . |.record-type-generative?|)
   (record-type-sealed? import . |.record-type-sealed?|)
   (record-type-opaque? import . |.record-type-opaque?|)
   (record-type-field-names import . |.record-type-field-names|)
   (record-field-mutable? import . |.record-field-mutable?|)
   (with-exception-handler import . |.with-exception-handler|)
   (guard import . |core.exceptions'guard|)
   (raise import . |.raise|)
   (raise-continuable import . |.raise-continuable|)
   (&condition import . |.&condition|)
   (condition import . |.condition|)
   (simple-conditions import . |.simple-conditions|)
   (condition? import . |.condition?|)
   (condition-predicate import . |.condition-predicate|)
   (condition-accessor import . |.condition-accessor|)
   (define-condition-type import . |core.conditions'define-condition-type|)
   (&message import . |.&message|)
   (make-message-condition import . |.make-message-condition|)
   (message-condition? import . |.message-condition?|)
   (condition-message import . |.condition-message|)
   (&warning import . |.&warning|)
   (make-warning import . |.make-warning|)
   (warning? import . |.warning?|)
   (&serious import . |.&serious|)
   (make-serious-condition import . |.make-serious-condition|)
   (serious-condition? import . |.serious-condition?|)
   (&error import . |.&error|)
   (make-error import . |.make-error|)
   (error? import . |.error?|)
   (&violation import . |.&violation|)
   (make-violation import . |.make-violation|)
   (violation? import . |.violation?|)
   (&assertion import . |.&assertion|)
   (make-assertion-violation import . |.make-assertion-violation|)
   (assertion-violation? import . |.assertion-violation?|)
   (&irritants import . |.&irritants|)
   (make-irritants-condition import . |.make-irritants-condition|)
   (irritants-condition? import . |.irritants-condition?|)
   (condition-irritants import . |.condition-irritants|)
   (&who import . |.&who|)
   (make-who-condition import . |.make-who-condition|)
   (who-condition? import . |.who-condition?|)
   (condition-who import . |.condition-who|)
   (&non-continuable import . |.&non-continuable|)
   (make-non-continuable-violation import . |.make-non-continuable-violation|)
   (non-continuable-violation? import . |.non-continuable-violation?|)
   (&implementation-restriction import . |.&implementation-restriction|)
   (make-implementation-restriction-violation import . |.make-implementation-restriction-violation|)
   (implementation-restriction-violation? import . |.implementation-restriction-violation?|)
   (&lexical import . |.&lexical|)
   (make-lexical-violation import . |.make-lexical-violation|)
   (lexical-violation? import . |.lexical-violation?|)
   (&syntax import . |.&syntax|)
   (make-syntax-violation import . |.make-syntax-violation|)
   (syntax-violation? import . |.syntax-violation?|)
   (syntax-violation-form import . |.syntax-violation-form|)
   (syntax-violation-subform import . |.syntax-violation-subform|)
   (&undefined import . |.&undefined|)
   (make-undefined-violation import . |.make-undefined-violation|)
   (undefined-violation? import . |.undefined-violation?|)
   (&i/o import . |.&i/o|)
   (make-i/o-error import . |.make-i/o-error|)
   (i/o-error? import . |.i/o-error?|)
   (&i/o-read import . |.&i/o-read|)
   (make-i/o-read-error import . |.make-i/o-read-error|)
   (i/o-read-error? import . |.i/o-read-error?|)
   (&i/o-write import . |.&i/o-write|)
   (make-i/o-write-error import . |.make-i/o-write-error|)
   (i/o-write-error? import . |.i/o-write-error?|)
   (&i/o-invalid-position import . |.&i/o-invalid-position|)
   (make-i/o-invalid-position-error import . |.make-i/o-invalid-position-error|)
   (i/o-invalid-position-error? import . |.i/o-invalid-position-error?|)
   (i/o-error-position import . |.i/o-error-position|)
   (&i/o-filename import . |.&i/o-filename|)
   (make-i/o-filename-error import . |.make-i/o-filename-error|)
   (i/o-filename-error? import . |.i/o-filename-error?|)
   (i/o-error-filename import . |.i/o-error-filename|)
   (&i/o-file-protection import . |.&i/o-file-protection|)
   (make-i/o-file-protection-error import . |.make-i/o-file-protection-error|)
   (i/o-file-protection-error? import . |.i/o-file-protection-error?|)
   (&i/o-file-is-read-only import . |.&i/o-file-is-read-only|)
   (make-i/o-file-is-read-only-error import . |.make-i/o-file-is-read-only-error|)
   (i/o-file-is-read-only-error? import . |.i/o-file-is-read-only-error?|)
   (&i/o-file-already-exists import . |.&i/o-file-already-exists|)
   (make-i/o-file-already-exists-error import . |.make-i/o-file-already-exists-error|)
   (i/o-file-already-exists-error? import . |.i/o-file-already-exists-error?|)
   (&i/o-file-does-not-exist import . |.&i/o-file-does-not-exist|)
   (make-i/o-file-does-not-exist-error import . |.make-i/o-file-does-not-exist-error|)
   (i/o-file-does-not-exist-error? import . |.i/o-file-does-not-exist-error?|)
   (&i/o-port import . |.&i/o-port|)
   (make-i/o-port-error import . |.make-i/o-port-error|)
   (i/o-port-error? import . |.i/o-port-error?|)
   (i/o-error-port import . |.i/o-error-port|)
   (&i/o-decoding import . |.&i/o-decoding|)
   (make-i/o-decoding-error import . |.make-i/o-decoding-error|)
   (i/o-decoding-error? import . |.i/o-decoding-error?|)
   (&i/o-encoding import . |.&i/o-encoding|)
   (make-i/o-encoding-error import . |.make-i/o-encoding-error|)
   (i/o-encoding-error? import . |.i/o-encoding-error?|)
   (i/o-encoding-error-char import . |.i/o-encoding-error-char|)
   (file-options import . |core.io'file-options|)
   (buffer-mode import . |core.io'buffer-mode|)
   (buffer-mode? import . |core.io'buffer-mode?|)
   (utf-8-codec import . |core.io'utf-8-codec|)
   (utf-16-codec import . |core.io'utf-16-codec|)
   (latin-1-codec import . |core.io'latin-1-codec|)
   (eol-style import . |core.io'eol-style|)
   (error-handling-mode import . |core.io'error-handling-mode|)
   (make-transcoder import . |core.io'make-transcoder|)
   (transcoder-codec import . |core.io'transcoder-codec|)
   (transcoder-eol-style import . |core.io'transcoder-eol-style|)
   (transcoder-error-handling-mode import . |core.io'transcoder-error-handling-mode|)
   (native-transcoder import . |core.io'native-transcoder|)
   (native-eol-style import . |core.io'native-eol-style|)
   (bytevector->string import . |core.io'bytevector->string|)
   (string->bytevector import . |core.io'string->bytevector|)
   (eof-object import . |.eof-object|)
   (eof-object? import . |.eof-object?|)
   (port? import . |.port?|)
   (port-transcoder import . |core.io'port-transcoder|)
   (textual-port? import . |core.io'textual-port?|)
   (binary-port? import . |core.io'binary-port?|)
   (transcoded-port import . |core.io'transcoded-port|)
   (port-has-port-position? import . |.port-has-port-position?|)
   (port-position import . |.port-position|)
   (port-has-set-port-position!? import . |.port-has-set-port-position!?|)
   (set-port-position! import . |.set-port-position!|)
   (close-port import . |.close-port|)
   (call-with-port import . |.call-with-port|)
   (input-port? import . |.input-port?|)
   (port-eof? import . |.port-eof?|)
   (open-file-input-port import . |core.io'open-file-input-port|)
   (open-bytevector-input-port import . |core.io'open-bytevector-input-port|)
   (open-string-input-port import . |core.io'open-string-input-port|)
   (standard-input-port import . |.standard-input-port|)
   (current-input-port import . |.current-input-port|)
   (get-u8 import . |.get-u8|)
   (lookahead-u8 import . |.lookahead-u8|)
   (get-bytevector-n import . |.get-bytevector-n|)
   (get-bytevector-n! import . |.get-bytevector-n!|)
   (get-bytevector-some import . |.get-bytevector-some|)
   (get-bytevector-all import . |.get-bytevector-all|)
   (get-char import . |.get-char|)
   (lookahead-char import . |.lookahead-char|)
   (get-string-n import . |.get-string-n|)
   (get-string-n! import . |.get-string-n!|)
   (get-string-all import . |.get-string-all|)
   (get-line import . |.get-line|)
   (get-datum import . |.get-datum|)
   (output-port? import . |.output-port?|)
   (flush-output-port import . |.flush-output-port|)
   (output-port-buffer-mode import . |.output-port-buffer-mode|)
   (open-file-output-port import . |core.io'open-file-output-port|)
   (open-bytevector-output-port import . |core.io'open-bytevector-output-port|)
   (call-with-bytevector-output-port import . |core.io'call-with-bytevector-output-port|)
   (open-string-output-port import . |core.io'open-string-output-port|)
   (call-with-string-output-port import . |core.io'call-with-string-output-port|)
   (standard-output-port import . |.standard-output-port|)
   (standard-error-port import . |.standard-error-port|)
   (current-output-port import . |.current-output-port|)
   (current-error-port import . |.current-error-port|)
   (put-u8 import . |.put-u8|)
   (put-bytevector import . |.put-bytevector|)
   (put-char import . |.put-char|)
   (put-string import . |.put-string|)
   (put-datum import . |.put-datum|)
   (open-file-input/output-port import . |core.io'open-file-input/output-port|)
   (make-custom-binary-input-port import . |core.io'make-custom-binary-input-port|)
   (make-custom-textual-input-port import . |core.io'make-custom-textual-input-port|)
   (make-custom-binary-output-port import . |core.io'make-custom-binary-output-port|)
   (make-custom-textual-output-port import . |core.io'make-custom-textual-output-port|)
   (make-custom-binary-input/output-port import . |core.io'make-custom-binary-input/output-port|)
   (make-custom-textual-input/output-port import . |core.io'make-custom-textual-input/output-port|)
   (call-with-input-file import . |core.io'call-with-input-file|)
   (call-with-output-file import . |core.io'call-with-output-file|)
   (with-input-from-file import . |core.io'with-input-from-file|)
   (with-output-to-file import . |core.io'with-output-to-file|)
   (open-input-file import . |core.io'open-input-file|)
   (open-output-file import . |core.io'open-output-file|)
   (close-input-port import . |core.io'close-input-port|)
   (close-output-port import . |core.io'close-output-port|)
   (read-char import . |.read-char|)
   (peek-char import . |.peek-char|)
   (read import . |.read|)
   (write-char import . |.write-char|)
   (newline import . |.newline|)
   (display import . |.display|)
   (write import . |.write|)
   (file-exists? import . |.file-exists?|)
   (delete-file import . |.delete-file|)
   (make-enumeration import . |core.enums'make-enumeration|)
   (enum-set-universe import . |core.enums'enum-set-universe|)
   (enum-set-indexer import . |core.enums'enum-set-indexer|)
   (enum-set-constructor import . |core.enums'enum-set-constructor|)
   (enum-set->list import . |core.enums'enum-set->list|)
   (enum-set-member? import . |core.enums'enum-set-member?|)
   (enum-set-subset? import . |core.enums'enum-set-subset?|)
   (enum-set=? import . |core.enums'enum-set=?|)
   (enum-set-union import . |core.enums'enum-set-union|)
   (enum-set-intersection import . |core.enums'enum-set-intersection|)
   (enum-set-difference import . |core.enums'enum-set-difference|)
   (enum-set-complement import . |core.enums'enum-set-complement|)
   (enum-set-projection import . |core.enums'enum-set-projection|)
   (define-enumeration import . |core.enums'define-enumeration|)
   (command-line import . |.command-line|)
   (exit import . |.exit|)
   (fixnum? import . |.fixnum?|)
   (fixnum-width import . |.fixnum-width|)
   (least-fixnum import . |.least-fixnum|)
   (greatest-fixnum import . |.greatest-fixnum|)
   (fx=? import . |.fx=?|)
   (fx<? import . |.fx<?|)
   (fx>? import . |.fx>?|)
   (fx<=? import . |.fx<=?|)
   (fx>=? import . |.fx>=?|)
   (fxzero? import . |.fxzero?|)
   (fxpositive? import . |.fxpositive?|)
   (fxnegative? import . |.fxnegative?|)
   (fxodd? import . |.fxodd?|)
   (fxeven? import . |.fxeven?|)
   (fxmax import . |.fxmax|)
   (fxmin import . |.fxmin|)
   (fx+ import . |.fx+|)
   (fx* import . |.fx*|)
   (fx- import . |.fx-|)
   (fxdiv import . |.fxdiv|)
   (fxmod import . |core.arithmetic'fxmod|)
   (fxdiv-and-mod import . |core.arithmetic'fxdiv-and-mod|)
   (fxdiv0 import . |.fxdiv0|)
   (fxmod0 import . |core.arithmetic'fxmod0|)
   (fxdiv0-and-mod0 import . |core.arithmetic'fxdiv0-and-mod0|)
   (fx+/carry import . |core.arithmetic'fx+/carry|)
   (fx-/carry import . |core.arithmetic'fx-/carry|)
   (fx*/carry import . |core.arithmetic'fx*/carry|)
   (fxnot import . |.fxnot|)
   (fxand import . |.fxand|)
   (fxior import . |.fxior|)
   (fxxor import . |.fxxor|)
   (fxif import . |.fxif|)
   (fxbit-count import . |.fxbit-count|)
   (fxlength import . |.fxlength|)
   (fxfirst-bit-set import . |.fxfirst-bit-set|)
   (fxbit-set? import . |.fxbit-set?|)
   (fxcopy-bit import . |.fxcopy-bit|)
   (fxbit-field import . |.fxbit-field|)
   (fxcopy-bit-field import . |.fxcopy-bit-field|)
   (fxarithmetic-shift import . |.fxarithmetic-shift|)
   (fxarithmetic-shift-left import . |.fxarithmetic-shift-left|)
   (fxarithmetic-shift-right import . |.fxarithmetic-shift-right|)
   (fxrotate-bit-field import . |core.arithmetic'fxrotate-bit-field|)
   (fxreverse-bit-field import . |core.arithmetic'fxreverse-bit-field|)
   (flonum? import . |.flonum?|)
   (real->flonum import . |.real->flonum|)
   (fl=? import . |.fl=?|)
   (fl<? import . |.fl<?|)
   (fl>? import . |.fl>?|)
   (fl<=? import . |.fl<=?|)
   (fl>=? import . |.fl>=?|)
   (flinteger? import . |.flinteger?|)
   (flzero? import . |.flzero?|)
   (flpositive? import . |.flpositive?|)
   (flnegative? import . |.flnegative?|)
   (flodd? import . |.flodd?|)
   (fleven? import . |.fleven?|)
   (flfinite? import . |.flfinite?|)
   (flinfinite? import . |.flinfinite?|)
   (flnan? import . |.flnan?|)
   (flmax import . |.flmax|)
   (flmin import . |.flmin|)
   (fl+ import . |.fl+|)
   (fl* import . |.fl*|)
   (fl- import . |.fl-|)
   (fl/ import . |.fl/|)
   (fldiv-and-mod import . |core.arithmetic'fldiv-and-mod|)
   (fldiv import . |.fldiv|)
   (flmod import . |core.arithmetic'flmod|)
   (fldiv0-and-mod0 import . |core.arithmetic'fldiv0-and-mod0|)
   (fldiv0 import . |.fldiv0|)
   (flmod0 import . |core.arithmetic'flmod0|)
   (flnumerator import . |.flnumerator|)
   (fldenominator import . |.fldenominator|)
   (flfloor import . |.flfloor|)
   (flceiling import . |.flceiling|)
   (fltruncate import . |.fltruncate|)
   (flround import . |.flround|)
   (flabs import . |.flabs|)
   (flexpt import . |.flexpt|)
   (flsqrt import . |.flsqrt|)
   (flexp import . |.flexp|)
   (fllog import . |.fllog|)
   (flsin import . |.flsin|)
   (flcos import . |.flcos|)
   (fltan import . |.fltan|)
   (flasin import . |.flasin|)
   (flacos import . |.flacos|)
   (flatan import . |.flatan|)
   (fixnum->flonum import . |.fixnum->flonum|)
   (&no-infinities import . |.&no-infinities|)
   (make-no-infinities-violation import . |.make-no-infinities-violation|)
   (no-infinities-violation? import . |.no-infinities-violation?|)
   (&no-nans import . |.&no-nans|)
   (make-no-nans-violation import . |.make-no-nans-violation|)
   (no-nans-violation? import . |.no-nans-violation?|)
   (bitwise-not import . |.bitwise-not|)
   (bitwise-and import . |.bitwise-and|)
   (bitwise-ior import . |.bitwise-ior|)
   (bitwise-xor import . |.bitwise-xor|)
   (bitwise-if import . |core.arithmetic'bitwise-if|)
   (bitwise-bit-count import . |.bitwise-bit-count|)
   (bitwise-length import . |.bitwise-length|)
   (bitwise-first-bit-set import . |.bitwise-first-bit-set|)
   (bitwise-bit-set? import . |core.arithmetic'bitwise-bit-set?|)
   (bitwise-copy-bit import . |core.arithmetic'bitwise-copy-bit|)
   (bitwise-bit-field import . |core.arithmetic'bitwise-bit-field|)
   (bitwise-copy-bit-field import . |core.arithmetic'bitwise-copy-bit-field|)
   (bitwise-arithmetic-shift import . |.bitwise-arithmetic-shift|)
   (bitwise-arithmetic-shift-left import . |core.arithmetic'bitwise-arithmetic-shift-left|)
   (bitwise-arithmetic-shift-right import . |core.arithmetic'bitwise-arithmetic-shift-right|)
   (bitwise-rotate-bit-field import . |core.arithmetic'bitwise-rotate-bit-field|)
   (bitwise-reverse-bit-field import . |core.arithmetic'bitwise-reverse-bit-field|)
   (syntax-case import . |.syntax-case|)
   (syntax import . |.syntax|)
   (with-syntax import . |core.syntax-case'with-syntax|)
   (make-variable-transformer import . |.make-variable-transformer|)
   (identifier? import . |.identifier?|)
   (bound-identifier=? import . |.bound-identifier=?|)
   (free-identifier=? import . |.free-identifier=?|)
   (datum->syntax import . |.datum->syntax|)
   (syntax->datum import . |.syntax->datum|)
   (generate-temporaries import . |.generate-temporaries|)
   (quasisyntax import . |core.syntax-case'quasisyntax|)
   (unsyntax import . |core.syntax-case'unsyntax|)
   (unsyntax-splicing import . |core.syntax-case'unsyntax-splicing|)
   (syntax-violation import . |.syntax-violation|)
   (make-eq-hashtable import . |core.hashtables'make-eq-hashtable|)
   (make-eqv-hashtable import . |core.hashtables'make-eqv-hashtable|)
   (make-hashtable import . |core.hashtables'make-hashtable|)
   (hashtable? import . |.core-hashtable?|)
   (hashtable-size import . |.core-hashtable-size|)
   (hashtable-ref import . |.core-hashtable-ref|)
   (hashtable-set! import . |.core-hashtable-set!|)
   (hashtable-delete! import . |.core-hashtable-delete!|)
   (hashtable-contains? import . |.core-hashtable-contains?|)
   (hashtable-update! import . |core.hashtables'hashtable-update!|)
   (hashtable-copy import . |.core-hashtable-copy|)
   (hashtable-clear! import . |.core-hashtable-clear!|)
   (hashtable-keys import . |core.hashtables'hashtable-keys|)
   (hashtable-entries import . |core.hashtables'hashtable-entries|)
   (hashtable-equivalence-function import . |.core-hashtable-equivalence-function|)
   (hashtable-hash-function import . |.core-hashtable-hash-function|)
   (hashtable-mutable? import . |.core-hashtable-mutable?|)
   (equal-hash import . |.equal-hash|)
   (string-hash import . |.string-hash|)
   (string-ci-hash import . |core.hashtables'string-ci-hash|)
   (symbol-hash import . |.symbol-hash|))
 (apply.gloc.of
   |.intern-scheme-library|
   (|.intern-scheme-library|
     'rnrs
     '(6)
     '((define import . |.define|)
       (define-syntax import . |.define-syntax|)
       (quote import . |.quote|)
       (lambda import . |.lambda|)
       (if import . |.if|)
       (set! import . |.set!|)
       (cond import . |.cond|)
       (case import . |.case|)
       (and import . |.and|)
       (or import . |.or|)
       (let import . |.let|)
       (let* import . |.let*|)
       (letrec import . |.letrec|)
       (letrec* import . |.letrec*|)
       (let-values import . |.let-values|)
       (let*-values import . |.let*-values|)
       (begin import . |.begin|)
       (quasiquote import . |.quasiquote|)
       (unquote import . |.unquote|)
       (unquote-splicing import . |.unquote-splicing|)
       (let-syntax import . |.let-syntax|)
       (letrec-syntax import . |.letrec-syntax|)
       (syntax-rules import . |.syntax-rules|)
       (identifier-syntax import . |.identifier-syntax|)
       (assert import . |.assert|)
       (else import . |.else|)
       (=> import . |.=>|)
       (... import . |....|)
       (_ import . |._|)
       (eq? import . |.eq?|)
       (eqv? import . |.eqv?|)
       (equal? import . |.equal?|)
       (procedure? import . |.procedure?|)
       (number? import . |.number?|)
       (complex? import . |.complex?|)
       (real? import . |.real?|)
       (rational? import . |.rational?|)
       (integer? import . |.integer?|)
       (real-valued? import . |.real-valued?|)
       (rational-valued? import . |.rational-valued?|)
       (integer-valued? import . |.integer-valued?|)
       (exact? import . |.exact?|)
       (inexact? import . |.inexact?|)
       (inexact import . |.inexact|)
       (exact import . |.exact|)
       (= import . |.=|)
       (< import . |.<|)
       (> import . |.>|)
       (<= import . |.<=|)
       (>= import . |.>=|)
       (zero? import . |.zero?|)
       (positive? import . |.positive?|)
       (negative? import . |.negative?|)
       (odd? import . |.odd?|)
       (even? import . |.even?|)
       (finite? import . |.finite?|)
       (infinite? import . |.infinite?|)
       (nan? import . |.nan?|)
       (max import . |.max|)
       (min import . |.min|)
       (+ import . |.+|)
       (* import . |.*|)
       (- import . |.-|)
       (/ import . |./|)
       (abs import . |.abs|)
       (div-and-mod import . |.div-and-mod|)
       (div import . |.div|)
       (mod import . |.mod|)
       (div0-and-mod0 import . |.div0-and-mod0|)
       (div0 import . |.div0|)
       (mod0 import . |.mod0|)
       (gcd import . |.gcd|)
       (lcm import . |.lcm|)
       (numerator import . |.numerator|)
       (denominator import . |.denominator|)
       (floor import . |.floor|)
       (ceiling import . |.ceiling|)
       (truncate import . |.truncate|)
       (round import . |.round|)
       (rationalize import . |.rationalize|)
       (exp import . |.exp|)
       (log import . |.log|)
       (sin import . |.sin|)
       (cos import . |.cos|)
       (tan import . |.tan|)
       (asin import . |.asin|)
       (acos import . |.acos|)
       (atan import . |.atan|)
       (sqrt import . |.sqrt|)
       (exact-integer-sqrt import . |.exact-integer-sqrt|)
       (expt import . |.expt|)
       (make-rectangular import . |.make-rectangular|)
       (make-polar import . |.make-polar|)
       (real-part import . |.real-part|)
       (imag-part import . |.imag-part|)
       (magnitude import . |.magnitude|)
       (angle import . |.angle|)
       (number->string import . |.number->string|)
       (string->number import . |.string->number|)
       (not import . |.not|)
       (boolean? import . |.boolean?|)
       (boolean=? import . |.boolean=?|)
       (pair? import . |.pair?|)
       (cons import . |.cons|)
       (car import . |.car|)
       (cdr import . |.cdr|)
       (caar import . |.caar|)
       (cadr import . |.cadr|)
       (cdar import . |.cdar|)
       (cddr import . |.cddr|)
       (caaar import . |.caaar|)
       (caadr import . |.caadr|)
       (cadar import . |.cadar|)
       (caddr import . |.caddr|)
       (cdaar import . |.cdaar|)
       (cdadr import . |.cdadr|)
       (cddar import . |.cddar|)
       (cdddr import . |.cdddr|)
       (caaaar import . |.caaaar|)
       (caaadr import . |.caaadr|)
       (caadar import . |.caadar|)
       (caaddr import . |.caaddr|)
       (cadaar import . |.cadaar|)
       (cadadr import . |.cadadr|)
       (caddar import . |.caddar|)
       (cadddr import . |.cadddr|)
       (cdaaar import . |.cdaaar|)
       (cdaadr import . |.cdaadr|)
       (cdadar import . |.cdadar|)
       (cdaddr import . |.cdaddr|)
       (cddaar import . |.cddaar|)
       (cddadr import . |.cddadr|)
       (cdddar import . |.cdddar|)
       (cddddr import . |.cddddr|)
       (null? import . |.null?|)
       (list? import . |.list?|)
       (list import . |.list|)
       (length import . |.length|)
       (append import . |.append|)
       (reverse import . |.reverse|)
       (list-tail import . |.list-tail|)
       (list-ref import . |.list-ref|)
       (map import . |.map|)
       (for-each import . |.for-each|)
       (symbol? import . |.symbol?|)
       (symbol->string import . |.symbol->string|)
       (string->symbol import . |.string->symbol|)
       (symbol=? import . |.symbol=?|)
       (char? import . |.char?|)
       (char->integer import . |.char->integer|)
       (integer->char import . |.integer->char|)
       (char=? import . |.char=?|)
       (char<? import . |.char<?|)
       (char>? import . |.char>?|)
       (char<=? import . |.char<=?|)
       (char>=? import . |.char>=?|)
       (string? import . |.string?|)
       (make-string import . |.make-string|)
       (string import . |.string|)
       (string-length import . |.string-length|)
       (string-ref import . |.string-ref|)
       (string=? import . |.string=?|)
       (string<? import . |.string<?|)
       (string>? import . |.string>?|)
       (string<=? import . |.string<=?|)
       (string>=? import . |.string>=?|)
       (substring import . |.substring|)
       (string-append import . |.string-append|)
       (string->list import . |.string->list|)
       (list->string import . |.list->string|)
       (string-copy import . |.string-copy|)
       (string-for-each import . |.string-for-each|)
       (vector? import . |.vector?|)
       (make-vector import . |.make-vector|)
       (vector import . |.vector|)
       (vector-length import . |.vector-length|)
       (vector-ref import . |.vector-ref|)
       (vector-set! import . |.vector-set!|)
       (vector->list import . |.vector->list|)
       (list->vector import . |.list->vector|)
       (vector-fill! import . |.vector-fill!|)
       (vector-map import . |.vector-map|)
       (vector-for-each import . |.vector-for-each|)
       (error import . |.error|)
       (assertion-violation import . |.assertion-violation|)
       (apply import . |.apply|)
       (call-with-current-continuation import . |.call-with-current-continuation|)
       (call/cc import . |.call/cc|)
       (values import . |.values|)
       (call-with-values import . |.call-with-values|)
       (dynamic-wind import . |.dynamic-wind|)
       (char-upcase import . |core.unicode'char-upcase|)
       (char-downcase import . |core.unicode'char-downcase|)
       (char-titlecase import . |core.unicode'char-titlecase|)
       (char-foldcase import . |core.unicode'char-foldcase|)
       (char-ci=? import . |core.unicode'char-ci=?|)
       (char-ci<? import . |core.unicode'char-ci<?|)
       (char-ci>? import . |core.unicode'char-ci>?|)
       (char-ci<=? import . |core.unicode'char-ci<=?|)
       (char-ci>=? import . |core.unicode'char-ci>=?|)
       (char-alphabetic? import . |core.unicode'char-alphabetic?|)
       (char-numeric? import . |core.unicode'char-numeric?|)
       (char-whitespace? import . |.char-whitespace?|)
       (char-upper-case? import . |core.unicode'char-upper-case?|)
       (char-lower-case? import . |core.unicode'char-lower-case?|)
       (char-title-case? import . |core.unicode'char-title-case?|)
       (char-general-category import . |core.unicode'char-general-category|)
       (string-upcase import . |core.unicode'string-upcase|)
       (string-downcase import . |core.unicode'string-downcase|)
       (string-titlecase import . |core.unicode'string-titlecase|)
       (string-foldcase import . |core.unicode'string-foldcase|)
       (string-ci=? import . |core.unicode'string-ci=?|)
       (string-ci<? import . |core.unicode'string-ci<?|)
       (string-ci>? import . |core.unicode'string-ci>?|)
       (string-ci<=? import . |core.unicode'string-ci<=?|)
       (string-ci>=? import . |core.unicode'string-ci>=?|)
       (string-normalize-nfd import . |core.unicode'string-normalize-nfd|)
       (string-normalize-nfkd import . |core.unicode'string-normalize-nfkd|)
       (string-normalize-nfc import . |core.unicode'string-normalize-nfc|)
       (string-normalize-nfkc import . |core.unicode'string-normalize-nfkc|)
       (endianness import . |core.bytevectors'endianness|)
       (native-endianness import . |.native-endianness|)
       (bytevector? import . |.bytevector?|)
       (make-bytevector import . |.make-bytevector|)
       (bytevector-length import . |.bytevector-length|)
       (bytevector=? import . |.bytevector=?|)
       (bytevector-fill! import . |.bytevector-fill!|)
       (bytevector-copy! import . |.bytevector-copy!|)
       (bytevector-copy import . |.bytevector-copy|)
       (bytevector-u8-ref import . |.bytevector-u8-ref|)
       (bytevector-s8-ref import . |.bytevector-s8-ref|)
       (bytevector-u8-set! import . |.bytevector-u8-set!|)
       (bytevector-s8-set! import . |.bytevector-s8-set!|)
       (bytevector->u8-list import . |.bytevector->u8-list|)
       (u8-list->bytevector import . |.u8-list->bytevector|)
       (bytevector-u16-ref import . |.bytevector-u16-ref|)
       (bytevector-s16-ref import . |.bytevector-s16-ref|)
       (bytevector-u16-native-ref import . |.bytevector-u16-native-ref|)
       (bytevector-s16-native-ref import . |.bytevector-s16-native-ref|)
       (bytevector-u16-set! import . |.bytevector-u16-set!|)
       (bytevector-s16-set! import . |.bytevector-s16-set!|)
       (bytevector-u16-native-set! import . |.bytevector-u16-native-set!|)
       (bytevector-s16-native-set! import . |.bytevector-s16-native-set!|)
       (bytevector-u32-ref import . |.bytevector-u32-ref|)
       (bytevector-s32-ref import . |.bytevector-s32-ref|)
       (bytevector-u32-native-ref import . |.bytevector-u32-native-ref|)
       (bytevector-s32-native-ref import . |.bytevector-s32-native-ref|)
       (bytevector-u32-set! import . |.bytevector-u32-set!|)
       (bytevector-s32-set! import . |.bytevector-s32-set!|)
       (bytevector-u32-native-set! import . |.bytevector-u32-native-set!|)
       (bytevector-s32-native-set! import . |.bytevector-s32-native-set!|)
       (bytevector-u64-ref import . |.bytevector-u64-ref|)
       (bytevector-s64-ref import . |.bytevector-s64-ref|)
       (bytevector-u64-native-ref import . |.bytevector-u64-native-ref|)
       (bytevector-s64-native-ref import . |.bytevector-s64-native-ref|)
       (bytevector-u64-set! import . |.bytevector-u64-set!|)
       (bytevector-s64-set! import . |.bytevector-s64-set!|)
       (bytevector-u64-native-set! import . |.bytevector-u64-native-set!|)
       (bytevector-s64-native-set! import . |.bytevector-s64-native-set!|)
       (bytevector-ieee-single-ref import . |.bytevector-ieee-single-ref|)
       (bytevector-ieee-single-native-ref import . |.bytevector-ieee-single-native-ref|)
       (bytevector-ieee-single-set! import . |.bytevector-ieee-single-set!|)
       (bytevector-ieee-single-native-set! import . |.bytevector-ieee-single-native-set!|)
       (bytevector-ieee-double-ref import . |.bytevector-ieee-double-ref|)
       (bytevector-ieee-double-native-ref import . |.bytevector-ieee-double-native-ref|)
       (bytevector-ieee-double-set! import . |.bytevector-ieee-double-set!|)
       (bytevector-ieee-double-native-set! import . |.bytevector-ieee-double-native-set!|)
       (bytevector-uint-ref import . |core.bytevectors'bytevector-uint-ref|)
       (bytevector-sint-ref import . |core.bytevectors'bytevector-sint-ref|)
       (bytevector-uint-set! import . |core.bytevectors'bytevector-uint-set!|)
       (bytevector-sint-set! import . |core.bytevectors'bytevector-sint-set!|)
       (bytevector->uint-list import . |core.bytevectors'bytevector->uint-list|)
       (bytevector->sint-list import . |core.bytevectors'bytevector->sint-list|)
       (uint-list->bytevector import . |core.bytevectors'uint-list->bytevector|)
       (sint-list->bytevector import . |core.bytevectors'sint-list->bytevector|)
       (string->utf8 import . |.string->utf8|)
       (utf8->string import . |.utf8->string|)
       (string->utf16 import . |core.bytevector-transcoders'string->utf16|)
       (utf16->string import . |core.bytevector-transcoders'utf16->string|)
       (string->utf32 import . |core.bytevector-transcoders'string->utf32|)
       (utf32->string import . |core.bytevector-transcoders'utf32->string|)
       (find import . |core.lists'find|)
       (for-all import . |core.lists'for-all|)
       (exists import . |core.lists'exists|)
       (filter import . |core.lists'filter|)
       (partition import . |core.lists'partition|)
       (fold-left import . |core.lists'fold-left|)
       (fold-right import . |core.lists'fold-right|)
       (remp import . |core.lists'remp|)
       (remove import . |core.lists'remove|)
       (remv import . |core.lists'remv|)
       (remq import . |core.lists'remq|)
       (memp import . |core.lists'memp|)
       (member import . |.member|)
       (memv import . |.memv|)
       (memq import . |.memq|)
       (assp import . |core.lists'assp|)
       (assoc import . |.assoc|)
       (assv import . |.assv|)
       (assq import . |.assq|)
       (cons* import . |.cons*|)
       (list-sort import . |core.sorting'list-sort|)
       (vector-sort import . |core.sorting'vector-sort|)
       (vector-sort! import . |core.sorting'vector-sort!|)
       (when import . |core.control'when|)
       (unless import . |core.control'unless|)
       (do import . |.do|)
       (case-lambda import . |core.control'case-lambda|)
       (define-record-type import . |core.records'define-record-type|)
       (record-type-descriptor import . |core.records'record-type-descriptor|)
       (record-constructor-descriptor import . |core.records'record-constructor-descriptor|)
       (fields import . |core.records'fields|)
       (mutable import . |core.records'mutable|)
       (immutable import . |core.records'immutable|)
       (parent import . |core.records'parent|)
       (protocol import . |core.records'protocol|)
       (sealed import . |core.records'sealed|)
       (opaque import . |core.records'opaque|)
       (nongenerative import . |core.records'nongenerative|)
       (parent-rtd import . |core.records'parent-rtd|)
       (make-record-type-descriptor import . |.make-record-type-descriptor|)
       (record-type-descriptor? import . |.record-type-descriptor?|)
       (make-record-constructor-descriptor import . |.make-record-constructor-descriptor|)
       (record-constructor import . |.record-constructor|)
       (record-predicate import . |.record-predicate|)
       (record-accessor import . |.record-accessor|)
       (record-mutator import . |.record-mutator|)
       (record? import . |.record?|)
       (record-rtd import . |.record-rtd|)
       (record-type-name import . |.record-type-name|)
       (record-type-parent import . |.record-type-parent|)
       (record-type-uid import . |.record-type-uid|)
       (record-type-generative? import . |.record-type-generative?|)
       (record-type-sealed? import . |.record-type-sealed?|)
       (record-type-opaque? import . |.record-type-opaque?|)
       (record-type-field-names import . |.record-type-field-names|)
       (record-field-mutable? import . |.record-field-mutable?|)
       (with-exception-handler import . |.with-exception-handler|)
       (guard import . |core.exceptions'guard|)
       (raise import . |.raise|)
       (raise-continuable import . |.raise-continuable|)
       (&condition import . |.&condition|)
       (condition import . |.condition|)
       (simple-conditions import . |.simple-conditions|)
       (condition? import . |.condition?|)
       (condition-predicate import . |.condition-predicate|)
       (condition-accessor import . |.condition-accessor|)
       (define-condition-type import . |core.conditions'define-condition-type|)
       (&message import . |.&message|)
       (make-message-condition import . |.make-message-condition|)
       (message-condition? import . |.message-condition?|)
       (condition-message import . |.condition-message|)
       (&warning import . |.&warning|)
       (make-warning import . |.make-warning|)
       (warning? import . |.warning?|)
       (&serious import . |.&serious|)
       (make-serious-condition import . |.make-serious-condition|)
       (serious-condition? import . |.serious-condition?|)
       (&error import . |.&error|)
       (make-error import . |.make-error|)
       (error? import . |.error?|)
       (&violation import . |.&violation|)
       (make-violation import . |.make-violation|)
       (violation? import . |.violation?|)
       (&assertion import . |.&assertion|)
       (make-assertion-violation import . |.make-assertion-violation|)
       (assertion-violation? import . |.assertion-violation?|)
       (&irritants import . |.&irritants|)
       (make-irritants-condition import . |.make-irritants-condition|)
       (irritants-condition? import . |.irritants-condition?|)
       (condition-irritants import . |.condition-irritants|)
       (&who import . |.&who|)
       (make-who-condition import . |.make-who-condition|)
       (who-condition? import . |.who-condition?|)
       (condition-who import . |.condition-who|)
       (&non-continuable import . |.&non-continuable|)
       (make-non-continuable-violation import . |.make-non-continuable-violation|)
       (non-continuable-violation? import . |.non-continuable-violation?|)
       (&implementation-restriction import . |.&implementation-restriction|)
       (make-implementation-restriction-violation
         import
         .
         |.make-implementation-restriction-violation|)
       (implementation-restriction-violation? import . |.implementation-restriction-violation?|)
       (&lexical import . |.&lexical|)
       (make-lexical-violation import . |.make-lexical-violation|)
       (lexical-violation? import . |.lexical-violation?|)
       (&syntax import . |.&syntax|)
       (make-syntax-violation import . |.make-syntax-violation|)
       (syntax-violation? import . |.syntax-violation?|)
       (syntax-violation-form import . |.syntax-violation-form|)
       (syntax-violation-subform import . |.syntax-violation-subform|)
       (&undefined import . |.&undefined|)
       (make-undefined-violation import . |.make-undefined-violation|)
       (undefined-violation? import . |.undefined-violation?|)
       (&i/o import . |.&i/o|)
       (make-i/o-error import . |.make-i/o-error|)
       (i/o-error? import . |.i/o-error?|)
       (&i/o-read import . |.&i/o-read|)
       (make-i/o-read-error import . |.make-i/o-read-error|)
       (i/o-read-error? import . |.i/o-read-error?|)
       (&i/o-write import . |.&i/o-write|)
       (make-i/o-write-error import . |.make-i/o-write-error|)
       (i/o-write-error? import . |.i/o-write-error?|)
       (&i/o-invalid-position import . |.&i/o-invalid-position|)
       (make-i/o-invalid-position-error import . |.make-i/o-invalid-position-error|)
       (i/o-invalid-position-error? import . |.i/o-invalid-position-error?|)
       (i/o-error-position import . |.i/o-error-position|)
       (&i/o-filename import . |.&i/o-filename|)
       (make-i/o-filename-error import . |.make-i/o-filename-error|)
       (i/o-filename-error? import . |.i/o-filename-error?|)
       (i/o-error-filename import . |.i/o-error-filename|)
       (&i/o-file-protection import . |.&i/o-file-protection|)
       (make-i/o-file-protection-error import . |.make-i/o-file-protection-error|)
       (i/o-file-protection-error? import . |.i/o-file-protection-error?|)
       (&i/o-file-is-read-only import . |.&i/o-file-is-read-only|)
       (make-i/o-file-is-read-only-error import . |.make-i/o-file-is-read-only-error|)
       (i/o-file-is-read-only-error? import . |.i/o-file-is-read-only-error?|)
       (&i/o-file-already-exists import . |.&i/o-file-already-exists|)
       (make-i/o-file-already-exists-error import . |.make-i/o-file-already-exists-error|)
       (i/o-file-already-exists-error? import . |.i/o-file-already-exists-error?|)
       (&i/o-file-does-not-exist import . |.&i/o-file-does-not-exist|)
       (make-i/o-file-does-not-exist-error import . |.make-i/o-file-does-not-exist-error|)
       (i/o-file-does-not-exist-error? import . |.i/o-file-does-not-exist-error?|)
       (&i/o-port import . |.&i/o-port|)
       (make-i/o-port-error import . |.make-i/o-port-error|)
       (i/o-port-error? import . |.i/o-port-error?|)
       (i/o-error-port import . |.i/o-error-port|)
       (&i/o-decoding import . |.&i/o-decoding|)
       (make-i/o-decoding-error import . |.make-i/o-decoding-error|)
       (i/o-decoding-error? import . |.i/o-decoding-error?|)
       (&i/o-encoding import . |.&i/o-encoding|)
       (make-i/o-encoding-error import . |.make-i/o-encoding-error|)
       (i/o-encoding-error? import . |.i/o-encoding-error?|)
       (i/o-encoding-error-char import . |.i/o-encoding-error-char|)
       (file-options import . |core.io'file-options|)
       (buffer-mode import . |core.io'buffer-mode|)
       (buffer-mode? import . |core.io'buffer-mode?|)
       (utf-8-codec import . |core.io'utf-8-codec|)
       (utf-16-codec import . |core.io'utf-16-codec|)
       (latin-1-codec import . |core.io'latin-1-codec|)
       (eol-style import . |core.io'eol-style|)
       (error-handling-mode import . |core.io'error-handling-mode|)
       (make-transcoder import . |core.io'make-transcoder|)
       (transcoder-codec import . |core.io'transcoder-codec|)
       (transcoder-eol-style import . |core.io'transcoder-eol-style|)
       (transcoder-error-handling-mode import . |core.io'transcoder-error-handling-mode|)
       (native-transcoder import . |core.io'native-transcoder|)
       (native-eol-style import . |core.io'native-eol-style|)
       (bytevector->string import . |core.io'bytevector->string|)
       (string->bytevector import . |core.io'string->bytevector|)
       (eof-object import . |.eof-object|)
       (eof-object? import . |.eof-object?|)
       (port? import . |.port?|)
       (port-transcoder import . |core.io'port-transcoder|)
       (textual-port? import . |core.io'textual-port?|)
       (binary-port? import . |core.io'binary-port?|)
       (transcoded-port import . |core.io'transcoded-port|)
       (port-has-port-position? import . |.port-has-port-position?|)
       (port-position import . |.port-position|)
       (port-has-set-port-position!? import . |.port-has-set-port-position!?|)
       (set-port-position! import . |.set-port-position!|)
       (close-port import . |.close-port|)
       (call-with-port import . |.call-with-port|)
       (input-port? import . |.input-port?|)
       (port-eof? import . |.port-eof?|)
       (open-file-input-port import . |core.io'open-file-input-port|)
       (open-bytevector-input-port import . |core.io'open-bytevector-input-port|)
       (open-string-input-port import . |core.io'open-string-input-port|)
       (standard-input-port import . |.standard-input-port|)
       (current-input-port import . |.current-input-port|)
       (get-u8 import . |.get-u8|)
       (lookahead-u8 import . |.lookahead-u8|)
       (get-bytevector-n import . |.get-bytevector-n|)
       (get-bytevector-n! import . |.get-bytevector-n!|)
       (get-bytevector-some import . |.get-bytevector-some|)
       (get-bytevector-all import . |.get-bytevector-all|)
       (get-char import . |.get-char|)
       (lookahead-char import . |.lookahead-char|)
       (get-string-n import . |.get-string-n|)
       (get-string-n! import . |.get-string-n!|)
       (get-string-all import . |.get-string-all|)
       (get-line import . |.get-line|)
       (get-datum import . |.get-datum|)
       (output-port? import . |.output-port?|)
       (flush-output-port import . |.flush-output-port|)
       (output-port-buffer-mode import . |.output-port-buffer-mode|)
       (open-file-output-port import . |core.io'open-file-output-port|)
       (open-bytevector-output-port import . |core.io'open-bytevector-output-port|)
       (call-with-bytevector-output-port import . |core.io'call-with-bytevector-output-port|)
       (open-string-output-port import . |core.io'open-string-output-port|)
       (call-with-string-output-port import . |core.io'call-with-string-output-port|)
       (standard-output-port import . |.standard-output-port|)
       (standard-error-port import . |.standard-error-port|)
       (current-output-port import . |.current-output-port|)
       (current-error-port import . |.current-error-port|)
       (put-u8 import . |.put-u8|)
       (put-bytevector import . |.put-bytevector|)
       (put-char import . |.put-char|)
       (put-string import . |.put-string|)
       (put-datum import . |.put-datum|)
       (open-file-input/output-port import . |core.io'open-file-input/output-port|)
       (make-custom-binary-input-port import . |core.io'make-custom-binary-input-port|)
       (make-custom-textual-input-port import . |core.io'make-custom-textual-input-port|)
       (make-custom-binary-output-port import . |core.io'make-custom-binary-output-port|)
       (make-custom-textual-output-port import . |core.io'make-custom-textual-output-port|)
       (make-custom-binary-input/output-port
         import
         .
         |core.io'make-custom-binary-input/output-port|)
       (make-custom-textual-input/output-port
         import
         .
         |core.io'make-custom-textual-input/output-port|)
       (call-with-input-file import . |core.io'call-with-input-file|)
       (call-with-output-file import . |core.io'call-with-output-file|)
       (with-input-from-file import . |core.io'with-input-from-file|)
       (with-output-to-file import . |core.io'with-output-to-file|)
       (open-input-file import . |core.io'open-input-file|)
       (open-output-file import . |core.io'open-output-file|)
       (close-input-port import . |core.io'close-input-port|)
       (close-output-port import . |core.io'close-output-port|)
       (read-char import . |.read-char|)
       (peek-char import . |.peek-char|)
       (read import . |.read|)
       (write-char import . |.write-char|)
       (newline import . |.newline|)
       (display import . |.display|)
       (write import . |.write|)
       (file-exists? import . |.file-exists?|)
       (delete-file import . |.delete-file|)
       (make-enumeration import . |core.enums'make-enumeration|)
       (enum-set-universe import . |core.enums'enum-set-universe|)
       (enum-set-indexer import . |core.enums'enum-set-indexer|)
       (enum-set-constructor import . |core.enums'enum-set-constructor|)
       (enum-set->list import . |core.enums'enum-set->list|)
       (enum-set-member? import . |core.enums'enum-set-member?|)
       (enum-set-subset? import . |core.enums'enum-set-subset?|)
       (enum-set=? import . |core.enums'enum-set=?|)
       (enum-set-union import . |core.enums'enum-set-union|)
       (enum-set-intersection import . |core.enums'enum-set-intersection|)
       (enum-set-difference import . |core.enums'enum-set-difference|)
       (enum-set-complement import . |core.enums'enum-set-complement|)
       (enum-set-projection import . |core.enums'enum-set-projection|)
       (define-enumeration import . |core.enums'define-enumeration|)
       (command-line import . |.command-line|)
       (exit import . |.exit|)
       (fixnum? import . |.fixnum?|)
       (fixnum-width import . |.fixnum-width|)
       (least-fixnum import . |.least-fixnum|)
       (greatest-fixnum import . |.greatest-fixnum|)
       (fx=? import . |.fx=?|)
       (fx<? import . |.fx<?|)
       (fx>? import . |.fx>?|)
       (fx<=? import . |.fx<=?|)
       (fx>=? import . |.fx>=?|)
       (fxzero? import . |.fxzero?|)
       (fxpositive? import . |.fxpositive?|)
       (fxnegative? import . |.fxnegative?|)
       (fxodd? import . |.fxodd?|)
       (fxeven? import . |.fxeven?|)
       (fxmax import . |.fxmax|)
       (fxmin import . |.fxmin|)
       (fx+ import . |.fx+|)
       (fx* import . |.fx*|)
       (fx- import . |.fx-|)
       (fxdiv import . |.fxdiv|)
       (fxmod import . |core.arithmetic'fxmod|)
       (fxdiv-and-mod import . |core.arithmetic'fxdiv-and-mod|)
       (fxdiv0 import . |.fxdiv0|)
       (fxmod0 import . |core.arithmetic'fxmod0|)
       (fxdiv0-and-mod0 import . |core.arithmetic'fxdiv0-and-mod0|)
       (fx+/carry import . |core.arithmetic'fx+/carry|)
       (fx-/carry import . |core.arithmetic'fx-/carry|)
       (fx*/carry import . |core.arithmetic'fx*/carry|)
       (fxnot import . |.fxnot|)
       (fxand import . |.fxand|)
       (fxior import . |.fxior|)
       (fxxor import . |.fxxor|)
       (fxif import . |.fxif|)
       (fxbit-count import . |.fxbit-count|)
       (fxlength import . |.fxlength|)
       (fxfirst-bit-set import . |.fxfirst-bit-set|)
       (fxbit-set? import . |.fxbit-set?|)
       (fxcopy-bit import . |.fxcopy-bit|)
       (fxbit-field import . |.fxbit-field|)
       (fxcopy-bit-field import . |.fxcopy-bit-field|)
       (fxarithmetic-shift import . |.fxarithmetic-shift|)
       (fxarithmetic-shift-left import . |.fxarithmetic-shift-left|)
       (fxarithmetic-shift-right import . |.fxarithmetic-shift-right|)
       (fxrotate-bit-field import . |core.arithmetic'fxrotate-bit-field|)
       (fxreverse-bit-field import . |core.arithmetic'fxreverse-bit-field|)
       (flonum? import . |.flonum?|)
       (real->flonum import . |.real->flonum|)
       (fl=? import . |.fl=?|)
       (fl<? import . |.fl<?|)
       (fl>? import . |.fl>?|)
       (fl<=? import . |.fl<=?|)
       (fl>=? import . |.fl>=?|)
       (flinteger? import . |.flinteger?|)
       (flzero? import . |.flzero?|)
       (flpositive? import . |.flpositive?|)
       (flnegative? import . |.flnegative?|)
       (flodd? import . |.flodd?|)
       (fleven? import . |.fleven?|)
       (flfinite? import . |.flfinite?|)
       (flinfinite? import . |.flinfinite?|)
       (flnan? import . |.flnan?|)
       (flmax import . |.flmax|)
       (flmin import . |.flmin|)
       (fl+ import . |.fl+|)
       (fl* import . |.fl*|)
       (fl- import . |.fl-|)
       (fl/ import . |.fl/|)
       (fldiv-and-mod import . |core.arithmetic'fldiv-and-mod|)
       (fldiv import . |.fldiv|)
       (flmod import . |core.arithmetic'flmod|)
       (fldiv0-and-mod0 import . |core.arithmetic'fldiv0-and-mod0|)
       (fldiv0 import . |.fldiv0|)
       (flmod0 import . |core.arithmetic'flmod0|)
       (flnumerator import . |.flnumerator|)
       (fldenominator import . |.fldenominator|)
       (flfloor import . |.flfloor|)
       (flceiling import . |.flceiling|)
       (fltruncate import . |.fltruncate|)
       (flround import . |.flround|)
       (flabs import . |.flabs|)
       (flexpt import . |.flexpt|)
       (flsqrt import . |.flsqrt|)
       (flexp import . |.flexp|)
       (fllog import . |.fllog|)
       (flsin import . |.flsin|)
       (flcos import . |.flcos|)
       (fltan import . |.fltan|)
       (flasin import . |.flasin|)
       (flacos import . |.flacos|)
       (flatan import . |.flatan|)
       (fixnum->flonum import . |.fixnum->flonum|)
       (&no-infinities import . |.&no-infinities|)
       (make-no-infinities-violation import . |.make-no-infinities-violation|)
       (no-infinities-violation? import . |.no-infinities-violation?|)
       (&no-nans import . |.&no-nans|)
       (make-no-nans-violation import . |.make-no-nans-violation|)
       (no-nans-violation? import . |.no-nans-violation?|)
       (bitwise-not import . |.bitwise-not|)
       (bitwise-and import . |.bitwise-and|)
       (bitwise-ior import . |.bitwise-ior|)
       (bitwise-xor import . |.bitwise-xor|)
       (bitwise-if import . |core.arithmetic'bitwise-if|)
       (bitwise-bit-count import . |.bitwise-bit-count|)
       (bitwise-length import . |.bitwise-length|)
       (bitwise-first-bit-set import . |.bitwise-first-bit-set|)
       (bitwise-bit-set? import . |core.arithmetic'bitwise-bit-set?|)
       (bitwise-copy-bit import . |core.arithmetic'bitwise-copy-bit|)
       (bitwise-bit-field import . |core.arithmetic'bitwise-bit-field|)
       (bitwise-copy-bit-field import . |core.arithmetic'bitwise-copy-bit-field|)
       (bitwise-arithmetic-shift import . |.bitwise-arithmetic-shift|)
       (bitwise-arithmetic-shift-left import . |core.arithmetic'bitwise-arithmetic-shift-left|)
       (bitwise-arithmetic-shift-right import . |core.arithmetic'bitwise-arithmetic-shift-right|)
       (bitwise-rotate-bit-field import . |core.arithmetic'bitwise-rotate-bit-field|)
       (bitwise-reverse-bit-field import . |core.arithmetic'bitwise-reverse-bit-field|)
       (syntax-case import . |.syntax-case|)
       (syntax import . |.syntax|)
       (with-syntax import . |core.syntax-case'with-syntax|)
       (make-variable-transformer import . |.make-variable-transformer|)
       (identifier? import . |.identifier?|)
       (bound-identifier=? import . |.bound-identifier=?|)
       (free-identifier=? import . |.free-identifier=?|)
       (datum->syntax import . |.datum->syntax|)
       (syntax->datum import . |.syntax->datum|)
       (generate-temporaries import . |.generate-temporaries|)
       (quasisyntax import . |core.syntax-case'quasisyntax|)
       (unsyntax import . |core.syntax-case'unsyntax|)
       (unsyntax-splicing import . |core.syntax-case'unsyntax-splicing|)
       (syntax-violation import . |.syntax-violation|)
       (make-eq-hashtable import . |core.hashtables'make-eq-hashtable|)
       (make-eqv-hashtable import . |core.hashtables'make-eqv-hashtable|)
       (make-hashtable import . |core.hashtables'make-hashtable|)
       (hashtable? import . |.core-hashtable?|)
       (hashtable-size import . |.core-hashtable-size|)
       (hashtable-ref import . |.core-hashtable-ref|)
       (hashtable-set! import . |.core-hashtable-set!|)
       (hashtable-delete! import . |.core-hashtable-delete!|)
       (hashtable-contains? import . |.core-hashtable-contains?|)
       (hashtable-update! import . |core.hashtables'hashtable-update!|)
       (hashtable-copy import . |.core-hashtable-copy|)
       (hashtable-clear! import . |.core-hashtable-clear!|)
       (hashtable-keys import . |core.hashtables'hashtable-keys|)
       (hashtable-entries import . |core.hashtables'hashtable-entries|)
       (hashtable-equivalence-function import . |.core-hashtable-equivalence-function|)
       (hashtable-hash-function import . |.core-hashtable-hash-function|)
       (hashtable-mutable? import . |.core-hashtable-mutable?|)
       (equal-hash import . |.equal-hash|)
       (string-hash import . |.string-hash|)
       (string-ci-hash import . |core.hashtables'string-ci-hash|)
       (symbol-hash import . |.symbol-hash|)))))

((call
   (push.const rnrs)
   (apply.gloc.of |.require-scheme-library| (|.require-scheme-library| '(rnrs))))
 (call
   (push.const core enums)
   (apply.gloc.of |.require-scheme-library| (|.require-scheme-library| '(core enums))))
 (call
   (push.const core struct)
   (apply.gloc.of |.require-scheme-library| (|.require-scheme-library| '(core struct))))
 (call
   (push.const core hashtables)
   (apply.gloc.of |.require-scheme-library| (|.require-scheme-library| '(core hashtables))))
 (call
   (push.const core unicode)
   (apply.gloc.of |.require-scheme-library| (|.require-scheme-library| '(core unicode))))
 (call
   (push.const core bytevector-transcoders)
   (apply.gloc.of
     |.require-scheme-library|
     (|.require-scheme-library| '(core bytevector-transcoders))))
 (call
   (push.const core conditions)
   (apply.gloc.of |.require-scheme-library| (|.require-scheme-library| '(core conditions))))
 (call
   (push.const core records)
   (apply.gloc.of |.require-scheme-library| (|.require-scheme-library| '(core records))))
 (call
   (push.const core destructuring)
   (apply.gloc.of |.require-scheme-library| (|.require-scheme-library| '(core destructuring))))
 (call
   (push.const core lists)
   (apply.gloc.of |.require-scheme-library| (|.require-scheme-library| '(core lists))))
 (call
   (push.const core optargs)
   (apply.gloc.of |.require-scheme-library| (|.require-scheme-library| '(core optargs))))
 (call
   (push.const core control)
   (apply.gloc.of |.require-scheme-library| (|.require-scheme-library| '(core control))))
 (call
   (push.const core r5rs)
   (apply.gloc.of |.require-scheme-library| (|.require-scheme-library| '(core r5rs))))
 (call
   (push.const core syntax-case)
   (apply.gloc.of |.require-scheme-library| (|.require-scheme-library| '(core syntax-case))))
 (call
   (push.const core bytevectors)
   (apply.gloc.of |.require-scheme-library| (|.require-scheme-library| '(core bytevectors))))
 (call
   (push.const core sorting)
   (apply.gloc.of |.require-scheme-library| (|.require-scheme-library| '(core sorting))))
 (call
   (push.const core arithmetic)
   (apply.gloc.of |.require-scheme-library| (|.require-scheme-library| '(core arithmetic))))
 (call
   (push.const core exceptions)
   (apply.gloc.of |.require-scheme-library| (|.require-scheme-library| '(core exceptions))))
 (call
   (push.const core files)
   (apply.gloc.of |.require-scheme-library| (|.require-scheme-library| '(core files))))
 (call
   (push.const core io)
   (apply.gloc.of |.require-scheme-library| (|.require-scheme-library| '(core io))))
 (call
   (push.const core parameters)
   (apply.gloc.of |.require-scheme-library| (|.require-scheme-library| '(core parameters))))
 (call
   (push.const core optimize)
   (apply.gloc.of |.require-scheme-library| (|.require-scheme-library| '(core optimize))))
 (call
   (push.const core primitives)
   (apply.gloc.of |.require-scheme-library| (|.require-scheme-library| '(core primitives))))
 (push.const . core)
 (push.const . #f)
 (push.const
   (&assertion import . |.&assertion|)
   (&condition import . |.&condition|)
   (&error import . |.&error|)
   (&i/o import . |.&i/o|)
   (&i/o-decoding import . |.&i/o-decoding|)
   (&i/o-encoding import . |.&i/o-encoding|)
   (&i/o-file-already-exists import . |.&i/o-file-already-exists|)
   (&i/o-file-does-not-exist import . |.&i/o-file-does-not-exist|)
   (&i/o-file-is-read-only import . |.&i/o-file-is-read-only|)
   (&i/o-file-protection import . |.&i/o-file-protection|)
   (&i/o-filename import . |.&i/o-filename|)
   (&i/o-invalid-position import . |.&i/o-invalid-position|)
   (&i/o-port import . |.&i/o-port|)
   (&i/o-read import . |.&i/o-read|)
   (&i/o-write import . |.&i/o-write|)
   (&implementation-restriction import . |.&implementation-restriction|)
   (&irritants import . |.&irritants|)
   (&lexical import . |.&lexical|)
   (&message import . |.&message|)
   (&no-infinities import . |.&no-infinities|)
   (&no-nans import . |.&no-nans|)
   (&non-continuable import . |.&non-continuable|)
   (&serious import . |.&serious|)
   (&syntax import . |.&syntax|)
   (&undefined import . |.&undefined|)
   (&violation import . |.&violation|)
   (&warning import . |.&warning|)
   (&who import . |.&who|)
   (* import . |.*|)
   (+ import . |.+|)
   (- import . |.-|)
   (... import . |....|)
   (/ import . |./|)
   (< import . |.<|)
   (<= import . |.<=|)
   (= import . |.=|)
   (=> import . |.=>|)
   (> import . |.>|)
   (>= import . |.>=|)
   (_ import . |._|)
   (abs import . |.abs|)
   (acos import . |.acos|)
   (add-library-path import . |.add-library-path|)
   (add-load-path import . |.add-load-path|)
   (and import . |.and|)
   (angle import . |.angle|)
   (append import . |.append|)
   (apply import . |.apply|)
   (architecture-feature import . |.architecture-feature|)
   (asin import . |.asin|)
   (assert import . |.assert|)
   (assertion-violation import . |.assertion-violation|)
   (assertion-violation? import . |.assertion-violation?|)
   (assoc import . |.assoc|)
   (assp import . |core.lists'assp|)
   (assq import . |.assq|)
   (assv import . |.assv|)
   (atan import . |.atan|)
   (auto-compile-cache import . |.auto-compile-cache|)
   (auto-compile-verbose import . |.auto-compile-verbose|)
   (backtrace import . |.backtrace|)
   (backtrace-line-length import . |.backtrace-line-length|)
   (begin import . |.begin|)
   (binary-port? import . |core.io'binary-port?|)
   (bitwise-and import . |.bitwise-and|)
   (bitwise-arithmetic-shift import . |.bitwise-arithmetic-shift|)
   (bitwise-arithmetic-shift-left import . |core.arithmetic'bitwise-arithmetic-shift-left|)
   (bitwise-arithmetic-shift-right import . |core.arithmetic'bitwise-arithmetic-shift-right|)
   (bitwise-bit-count import . |.bitwise-bit-count|)
   (bitwise-bit-field import . |core.arithmetic'bitwise-bit-field|)
   (bitwise-bit-set? import . |core.arithmetic'bitwise-bit-set?|)
   (bitwise-copy-bit import . |core.arithmetic'bitwise-copy-bit|)
   (bitwise-copy-bit-field import . |core.arithmetic'bitwise-copy-bit-field|)
   (bitwise-first-bit-set import . |.bitwise-first-bit-set|)
   (bitwise-if import . |core.arithmetic'bitwise-if|)
   (bitwise-ior import . |.bitwise-ior|)
   (bitwise-length import . |.bitwise-length|)
   (bitwise-not import . |.bitwise-not|)
   (bitwise-reverse-bit-field import . |core.arithmetic'bitwise-reverse-bit-field|)
   (bitwise-rotate-bit-field import . |core.arithmetic'bitwise-rotate-bit-field|)
   (bitwise-xor import . |.bitwise-xor|)
   (boolean=? import . |.boolean=?|)
   (boolean? import . |.boolean?|)
   (bound-identifier=? import . |.bound-identifier=?|)
   (break import . |core.lists'break|)
   (buffer-mode import . |core.io'buffer-mode|)
   (buffer-mode? import . |core.io'buffer-mode?|)
   (bytevector->sint-list import . |core.bytevectors'bytevector->sint-list|)
   (bytevector->string import . |core.io'bytevector->string|)
   (bytevector->u8-list import . |.bytevector->u8-list|)
   (bytevector->uint-list import . |core.bytevectors'bytevector->uint-list|)
   (bytevector-c-double-ref import . |.bytevector-c-double-ref|)
   (bytevector-c-double-set! import . |.bytevector-c-double-set!|)
   (bytevector-c-float-ref import . |.bytevector-c-float-ref|)
   (bytevector-c-float-set! import . |.bytevector-c-float-set!|)
   (bytevector-c-int-ref import . |.bytevector-c-int-ref|)
   (bytevector-c-int-set! import . |.bytevector-c-int-set!|)
   (bytevector-c-int16-ref import . |.bytevector-c-int16-ref|)
   (bytevector-c-int16-set! import . |.bytevector-c-int16-set!|)
   (bytevector-c-int32-ref import . |.bytevector-c-int32-ref|)
   (bytevector-c-int32-set! import . |.bytevector-c-int32-set!|)
   (bytevector-c-int64-ref import . |.bytevector-c-int64-ref|)
   (bytevector-c-int64-set! import . |.bytevector-c-int64-set!|)
   (bytevector-c-int8-ref import . |.bytevector-c-int8-ref|)
   (bytevector-c-int8-set! import . |.bytevector-c-int8-set!|)
   (bytevector-c-long-long-ref import . |.bytevector-c-long-long-ref|)
   (bytevector-c-long-long-set! import . |.bytevector-c-long-long-set!|)
   (bytevector-c-long-ref import . |.bytevector-c-long-ref|)
   (bytevector-c-long-set! import . |.bytevector-c-long-set!|)
   (bytevector-c-short-ref import . |.bytevector-c-short-ref|)
   (bytevector-c-short-set! import . |.bytevector-c-short-set!|)
   (bytevector-c-strlen import . |.bytevector-c-strlen|)
   (bytevector-c-uint16-ref import . |.bytevector-c-uint16-ref|)
   (bytevector-c-uint32-ref import . |.bytevector-c-uint32-ref|)
   (bytevector-c-uint64-ref import . |.bytevector-c-uint64-ref|)
   (bytevector-c-uint8-ref import . |.bytevector-c-uint8-ref|)
   (bytevector-c-unsigned-int-ref import . |.bytevector-c-unsigned-int-ref|)
   (bytevector-c-unsigned-long-long-ref import . |.bytevector-c-unsigned-long-long-ref|)
   (bytevector-c-unsigned-long-ref import . |.bytevector-c-unsigned-long-ref|)
   (bytevector-c-unsigned-short-ref import . |.bytevector-c-unsigned-short-ref|)
   (bytevector-c-void*-ref import . |.bytevector-c-void*-ref|)
   (bytevector-c-void*-set! import . |.bytevector-c-void*-set!|)
   (bytevector-copy import . |.bytevector-copy|)
   (bytevector-copy! import . |.bytevector-copy!|)
   (bytevector-fill! import . |.bytevector-fill!|)
   (bytevector-ieee-double-native-ref import . |.bytevector-ieee-double-native-ref|)
   (bytevector-ieee-double-native-set! import . |.bytevector-ieee-double-native-set!|)
   (bytevector-ieee-double-ref import . |.bytevector-ieee-double-ref|)
   (bytevector-ieee-double-set! import . |.bytevector-ieee-double-set!|)
   (bytevector-ieee-single-native-ref import . |.bytevector-ieee-single-native-ref|)
   (bytevector-ieee-single-native-set! import . |.bytevector-ieee-single-native-set!|)
   (bytevector-ieee-single-ref import . |.bytevector-ieee-single-ref|)
   (bytevector-ieee-single-set! import . |.bytevector-ieee-single-set!|)
   (bytevector-length import . |.bytevector-length|)
   (bytevector-mapping? import . |.bytevector-mapping?|)
   (bytevector-s16-native-ref import . |.bytevector-s16-native-ref|)
   (bytevector-s16-native-set! import . |.bytevector-s16-native-set!|)
   (bytevector-s16-ref import . |.bytevector-s16-ref|)
   (bytevector-s16-set! import . |.bytevector-s16-set!|)
   (bytevector-s32-native-ref import . |.bytevector-s32-native-ref|)
   (bytevector-s32-native-set! import . |.bytevector-s32-native-set!|)
   (bytevector-s32-ref import . |.bytevector-s32-ref|)
   (bytevector-s32-set! import . |.bytevector-s32-set!|)
   (bytevector-s64-native-ref import . |.bytevector-s64-native-ref|)
   (bytevector-s64-native-set! import . |.bytevector-s64-native-set!|)
   (bytevector-s64-ref import . |.bytevector-s64-ref|)
   (bytevector-s64-set! import . |.bytevector-s64-set!|)
   (bytevector-s8-ref import . |.bytevector-s8-ref|)
   (bytevector-s8-set! import . |.bytevector-s8-set!|)
   (bytevector-sint-ref import . |core.bytevectors'bytevector-sint-ref|)
   (bytevector-sint-set! import . |core.bytevectors'bytevector-sint-set!|)
   (bytevector-u16-native-ref import . |.bytevector-u16-native-ref|)
   (bytevector-u16-native-set! import . |.bytevector-u16-native-set!|)
   (bytevector-u16-ref import . |.bytevector-u16-ref|)
   (bytevector-u16-set! import . |.bytevector-u16-set!|)
   (bytevector-u32-native-ref import . |.bytevector-u32-native-ref|)
   (bytevector-u32-native-set! import . |.bytevector-u32-native-set!|)
   (bytevector-u32-ref import . |.bytevector-u32-ref|)
   (bytevector-u32-set! import . |.bytevector-u32-set!|)
   (bytevector-u64-native-ref import . |.bytevector-u64-native-ref|)
   (bytevector-u64-native-set! import . |.bytevector-u64-native-set!|)
   (bytevector-u64-ref import . |.bytevector-u64-ref|)
   (bytevector-u64-set! import . |.bytevector-u64-set!|)
   (bytevector-u8-ref import . |.bytevector-u8-ref|)
   (bytevector-u8-set! import . |.bytevector-u8-set!|)
   (bytevector-uint-ref import . |core.bytevectors'bytevector-uint-ref|)
   (bytevector-uint-set! import . |core.bytevectors'bytevector-uint-set!|)
   (bytevector=? import . |.bytevector=?|)
   (bytevector? import . |.bytevector?|)
   (caaaar import . |.caaaar|)
   (caaadr import . |.caaadr|)
   (caaar import . |.caaar|)
   (caadar import . |.caadar|)
   (caaddr import . |.caaddr|)
   (caadr import . |.caadr|)
   (caar import . |.caar|)
   (cadaar import . |.cadaar|)
   (cadadr import . |.cadadr|)
   (cadar import . |.cadar|)
   (caddar import . |.caddar|)
   (cadddr import . |.cadddr|)
   (caddr import . |.caddr|)
   (cadr import . |.cadr|)
   (call-with-bytevector-output-port import . |core.io'call-with-bytevector-output-port|)
   (call-with-current-continuation import . |.call-with-current-continuation|)
   (call-with-input-file import . |core.io'call-with-input-file|)
   (call-with-output-file import . |core.io'call-with-output-file|)
   (call-with-port import . |.call-with-port|)
   (call-with-string-output-port import . |core.io'call-with-string-output-port|)
   (call-with-values import . |.call-with-values|)
   (call/cc import . |.call/cc|)
   (car import . |.car|)
   (case import . |.case|)
   (case-lambda import . |core.control'case-lambda|)
   (cdaaar import . |.cdaaar|)
   (cdaadr import . |.cdaadr|)
   (cdaar import . |.cdaar|)
   (cdadar import . |.cdadar|)
   (cdaddr import . |.cdaddr|)
   (cdadr import . |.cdadr|)
   (cdar import . |.cdar|)
   (cddaar import . |.cddaar|)
   (cddadr import . |.cddadr|)
   (cddar import . |.cddar|)
   (cdddar import . |.cdddar|)
   (cddddr import . |.cddddr|)
   (cdddr import . |.cdddr|)
   (cddr import . |.cddr|)
   (cdr import . |.cdr|)
   (ceiling import . |.ceiling|)
   (change-file-mode import . |.change-file-mode|)
   (char->integer import . |.char->integer|)
   (char-alphabetic? import . |core.unicode'char-alphabetic?|)
   (char-ci<=? import . |core.unicode'char-ci<=?|)
   (char-ci<? import . |core.unicode'char-ci<?|)
   (char-ci=? import . |core.unicode'char-ci=?|)
   (char-ci>=? import . |core.unicode'char-ci>=?|)
   (char-ci>? import . |core.unicode'char-ci>?|)
   (char-downcase import . |core.unicode'char-downcase|)
   (char-foldcase import . |core.unicode'char-foldcase|)
   (char-general-category import . |core.unicode'char-general-category|)
   (char-lower-case? import . |core.unicode'char-lower-case?|)
   (char-numeric? import . |core.unicode'char-numeric?|)
   (char-title-case? import . |core.unicode'char-title-case?|)
   (char-titlecase import . |core.unicode'char-titlecase|)
   (char-upcase import . |core.unicode'char-upcase|)
   (char-upper-case? import . |core.unicode'char-upper-case?|)
   (char-whitespace? import . |.char-whitespace?|)
   (char<=? import . |.char<=?|)
   (char<? import . |.char<?|)
   (char=? import . |.char=?|)
   (char>=? import . |.char>=?|)
   (char>? import . |.char>?|)
   (char? import . |.char?|)
   (circular-list? import . |.circular-list?|)
   (close-input-port import . |core.io'close-input-port|)
   (close-output-port import . |core.io'close-output-port|)
   (close-port import . |.close-port|)
   (closure-code import . |.closure-code|)
   (cmwc-random-real import . |.cmwc-random-real|)
   (cmwc-random-u32 import . |.cmwc-random-u32|)
   (collect import . |.collect|)
   (collect-notify import . |.collect-notify|)
   (collect-stack-notify import . |.collect-stack-notify|)
   (collect-trip-bytes import . |.collect-trip-bytes|)
   (command-line import . |.command-line|)
   (command-line-shift import . |.command-line-shift|)
   (compile import . |.compile|)
   (compile-coreform import . |.compile-coreform|)
   (complex? import . |.complex?|)
   (cond import . |.cond|)
   (condition import . |.condition|)
   (condition-accessor import . |.condition-accessor|)
   (condition-irritants import . |.condition-irritants|)
   (condition-message import . |.condition-message|)
   (condition-predicate import . |.condition-predicate|)
   (condition-who import . |.condition-who|)
   (condition? import . |.condition?|)
   (cons import . |.cons|)
   (cons* import . |.cons*|)
   (continuation-to-exit import . |.continuation-to-exit|)
   (copy-environment-macros! import . |.copy-environment-macros!|)
   (copy-environment-variables! import . |.copy-environment-variables!|)
   (core-eval import . |.core-eval|)
   (core-hashtable->alist import . |.core-hashtable->alist|)
   (core-hashtable-clear! import . |.core-hashtable-clear!|)
   (core-hashtable-contains? import . |.core-hashtable-contains?|)
   (core-hashtable-copy import . |.core-hashtable-copy|)
   (core-hashtable-delete! import . |.core-hashtable-delete!|)
   (core-hashtable-equivalence-function import . |.core-hashtable-equivalence-function|)
   (core-hashtable-hash-function import . |.core-hashtable-hash-function|)
   (core-hashtable-mutable? import . |.core-hashtable-mutable?|)
   (core-hashtable-ref import . |.core-hashtable-ref|)
   (core-hashtable-set! import . |.core-hashtable-set!|)
   (core-hashtable-size import . |.core-hashtable-size|)
   (core-hashtable? import . |.core-hashtable?|)
   (core-read import . |.core-read|)
   (coreform-optimize import . |core.optimize'coreform-optimize|)
   (cos import . |.cos|)
   (count-pair import . |.count-pair|)
   (create-directory import . |.create-directory|)
   (create-hard-link import . |.create-hard-link|)
   (create-symbolic-link import . |.create-symbolic-link|)
   (current-after-expansion-hook import . |.current-after-expansion-hook|)
   (current-directory import . |.current-directory|)
   (current-dynamic-environment import . |.current-dynamic-environment|)
   (current-environment import . |.current-environment|)
   (current-error-port import . |.current-error-port|)
   (current-exception-printer import . |.current-exception-printer|)
   (current-input-port import . |.current-input-port|)
   (current-library-infix import . |.current-library-infix|)
   (current-library-suffix import . |.current-library-suffix|)
   (current-macro-environment import . |.current-macro-environment|)
   (current-output-port import . |.current-output-port|)
   (current-primitive-prefix import . |.current-primitive-prefix|)
   (current-rename-delimiter import . |.current-rename-delimiter|)
   (current-source-comments import . |.current-source-comments|)
   (current-variable-environment import . |.current-variable-environment|)
   (cyclic-object? import . |.cyclic-object?|)
   (datum import . |core.syntax-case'datum|)
   (datum->syntax import . |.datum->syntax|)
   (decode-flonum import . |.decode-flonum|)
   (decode-microsecond import . |.decode-microsecond|)
   (define import . |.define|)
   (define-condition-type import . |core.conditions'define-condition-type|)
   (define-enumeration import . |core.enums'define-enumeration|)
   (define-library import . |.define-library|)
   (define-macro import . |core.syntax-case'define-macro|)
   (define-record-type import . |core.records'define-record-type|)
   (define-struct import . |core.struct'define-struct|)
   (define-syntax import . |.define-syntax|)
   (delay import . |core.r5rs'delay|)
   (delete-file import . |.delete-file|)
   (denominator import . |.denominator|)
   (destructuring-bind import . |core.destructuring'destructuring-bind|)
   (destructuring-match import . |core.destructuring'destructuring-match|)
   (directory-list import . |.directory-list|)
   (display import . |.display|)
   (display-backtrace import . |.display-backtrace|)
   (display-heap-statistics import . |.display-heap-statistics|)
   (display-object-statistics import . |.display-object-statistics|)
   (display-thread-status import . |.display-thread-status|)
   (div import . |.div|)
   (div-and-mod import . |.div-and-mod|)
   (div0 import . |.div0|)
   (div0-and-mod0 import . |.div0-and-mod0|)
   (do import . |.do|)
   (drop import . |core.lists'drop|)
   (drop-last-cdr import . |.drop-last-cdr|)
   (drop-last-n-pair import . |.drop-last-n-pair|)
   (drop-last-pair import . |.drop-last-pair|)
   (dynamic-wind import . |.dynamic-wind|)
   (else import . |.else|)
   (encode-microsecond import . |.encode-microsecond|)
   (endianness import . |core.bytevectors'endianness|)
   (enum-set->list import . |core.enums'enum-set->list|)
   (enum-set-complement import . |core.enums'enum-set-complement|)
   (enum-set-constructor import . |core.enums'enum-set-constructor|)
   (enum-set-difference import . |core.enums'enum-set-difference|)
   (enum-set-indexer import . |core.enums'enum-set-indexer|)
   (enum-set-intersection import . |core.enums'enum-set-intersection|)
   (enum-set-member? import . |core.enums'enum-set-member?|)
   (enum-set-projection import . |core.enums'enum-set-projection|)
   (enum-set-subset? import . |core.enums'enum-set-subset?|)
   (enum-set-union import . |core.enums'enum-set-union|)
   (enum-set-universe import . |core.enums'enum-set-universe|)
   (enum-set=? import . |core.enums'enum-set=?|)
   (enum-set? import . |core.enums'enum-set?|)
   (environment import . |.environment|)
   (eof-object import . |.eof-object|)
   (eof-object? import . |.eof-object?|)
   (eol-style import . |core.io'eol-style|)
   (eq? import . |.eq?|)
   (equal-hash import . |.equal-hash|)
   (equal? import . |.equal?|)
   (eqv? import . |.eqv?|)
   (error import . |.error|)
   (error-handling-mode import . |core.io'error-handling-mode|)
   (error? import . |.error?|)
   (eval import . |.eval|)
   (even? import . |.even?|)
   (exact import . |.exact|)
   (exact->inexact import . |.inexact|)
   (exact-integer-sqrt import . |.exact-integer-sqrt|)
   (exact? import . |.exact?|)
   (exists import . |core.lists'exists|)
   (exit import . |.exit|)
   (exp import . |.exp|)
   (expansion-backtrace import . |.expansion-backtrace|)
   (expt import . |.expt|)
   (extract-accumulated-bytevector import . |.extract-accumulated-bytevector|)
   (extract-accumulated-string import . |.extract-accumulated-string|)
   (feature-identifies import . |.feature-identifies|)
   (fields import . |core.records'fields|)
   (file-directory? import . |.file-directory?|)
   (file-executable? import . |.file-executable?|)
   (file-exists? import . |.file-exists?|)
   (file-options import . |core.io'file-options|)
   (file-readable? import . |.file-readable?|)
   (file-regular? import . |.file-regular?|)
   (file-size-in-bytes import . |.file-size-in-bytes|)
   (file-stat-atime import . |.file-stat-atime|)
   (file-stat-ctime import . |.file-stat-ctime|)
   (file-stat-mtime import . |.file-stat-mtime|)
   (file-symbolic-link? import . |.file-symbolic-link?|)
   (file-writable? import . |.file-writable?|)
   (filter import . |core.lists'filter|)
   (find import . |core.lists'find|)
   (finite? import . |.finite?|)
   (fixnum->flonum import . |.fixnum->flonum|)
   (fixnum-width import . |.fixnum-width|)
   (fixnum? import . |.fixnum?|)
   (fl* import . |.fl*|)
   (fl+ import . |.fl+|)
   (fl- import . |.fl-|)
   (fl/ import . |.fl/|)
   (fl<=? import . |.fl<=?|)
   (fl<? import . |.fl<?|)
   (fl=? import . |.fl=?|)
   (fl>=? import . |.fl>=?|)
   (fl>? import . |.fl>?|)
   (flabs import . |.flabs|)
   (flacos import . |.flacos|)
   (flasin import . |.flasin|)
   (flatan import . |.flatan|)
   (flceiling import . |.flceiling|)
   (flcos import . |.flcos|)
   (fldenominator import . |.fldenominator|)
   (fldiv import . |.fldiv|)
   (fldiv-and-mod import . |core.arithmetic'fldiv-and-mod|)
   (fldiv0 import . |.fldiv0|)
   (fldiv0-and-mod0 import . |core.arithmetic'fldiv0-and-mod0|)
   (fleven? import . |.fleven?|)
   (flexp import . |.flexp|)
   (flexpt import . |.flexpt|)
   (flfinite? import . |.flfinite?|)
   (flfloor import . |.flfloor|)
   (flinfinite? import . |.flinfinite?|)
   (flinteger? import . |.flinteger?|)
   (fllog import . |.fllog|)
   (flmax import . |.flmax|)
   (flmin import . |.flmin|)
   (flmod import . |core.arithmetic'flmod|)
   (flmod0 import . |core.arithmetic'flmod0|)
   (flnan? import . |.flnan?|)
   (flnegative? import . |.flnegative?|)
   (flnumerator import . |.flnumerator|)
   (flodd? import . |.flodd?|)
   (flonum? import . |.flonum?|)
   (floor import . |.floor|)
   (flpositive? import . |.flpositive?|)
   (flround import . |.flround|)
   (flsin import . |.flsin|)
   (flsqrt import . |.flsqrt|)
   (fltan import . |.fltan|)
   (fltruncate import . |.fltruncate|)
   (flush-output-port import . |.flush-output-port|)
   (flzero? import . |.flzero?|)
   (fold-left import . |core.lists'fold-left|)
   (fold-right import . |core.lists'fold-right|)
   (for-all import . |core.lists'for-all|)
   (for-each import . |.for-each|)
   (force import . |core.r5rs'force|)
   (format import . |.format|)
   (free-identifier=? import . |.free-identifier=?|)
   (fulfill-feature-requirements? import . |.fulfill-feature-requirements?|)
   (fx* import . |.fx*|)
   (fx*/carry import . |core.arithmetic'fx*/carry|)
   (fx+ import . |.fx+|)
   (fx+/carry import . |core.arithmetic'fx+/carry|)
   (fx- import . |.fx-|)
   (fx-/carry import . |core.arithmetic'fx-/carry|)
   (fx<=? import . |.fx<=?|)
   (fx<? import . |.fx<?|)
   (fx=? import . |.fx=?|)
   (fx>=? import . |.fx>=?|)
   (fx>? import . |.fx>?|)
   (fxand import . |.fxand|)
   (fxarithmetic-shift import . |.fxarithmetic-shift|)
   (fxarithmetic-shift-left import . |.fxarithmetic-shift-left|)
   (fxarithmetic-shift-right import . |.fxarithmetic-shift-right|)
   (fxbit-count import . |.fxbit-count|)
   (fxbit-field import . |.fxbit-field|)
   (fxbit-set? import . |.fxbit-set?|)
   (fxcopy-bit import . |.fxcopy-bit|)
   (fxcopy-bit-field import . |.fxcopy-bit-field|)
   (fxdiv import . |.fxdiv|)
   (fxdiv-and-mod import . |core.arithmetic'fxdiv-and-mod|)
   (fxdiv0 import . |.fxdiv0|)
   (fxdiv0-and-mod0 import . |core.arithmetic'fxdiv0-and-mod0|)
   (fxeven? import . |.fxeven?|)
   (fxfirst-bit-set import . |.fxfirst-bit-set|)
   (fxif import . |.fxif|)
   (fxior import . |.fxior|)
   (fxlength import . |.fxlength|)
   (fxmax import . |.fxmax|)
   (fxmin import . |.fxmin|)
   (fxmod import . |core.arithmetic'fxmod|)
   (fxmod0 import . |core.arithmetic'fxmod0|)
   (fxnegative? import . |.fxnegative?|)
   (fxnot import . |.fxnot|)
   (fxodd? import . |.fxodd?|)
   (fxpositive? import . |.fxpositive?|)
   (fxreverse-bit-field import . |core.arithmetic'fxreverse-bit-field|)
   (fxrotate-bit-field import . |core.arithmetic'fxrotate-bit-field|)
   (fxxor import . |.fxxor|)
   (fxzero? import . |.fxzero?|)
   (gcd import . |.gcd|)
   (generate-temporaries import . |.generate-temporaries|)
   (generate-temporary-symbol import . |.generate-temporary-symbol|)
   (gensym import . |.gensym|)
   (get-accumulated-bytevector import . |.get-accumulated-bytevector|)
   (get-accumulated-string import . |.get-accumulated-string|)
   (get-bytevector-all import . |.get-bytevector-all|)
   (get-bytevector-n import . |.get-bytevector-n|)
   (get-bytevector-n! import . |.get-bytevector-n!|)
   (get-bytevector-some import . |.get-bytevector-some|)
   (get-char import . |.get-char|)
   (get-datum import . |.get-datum|)
   (get-line import . |.get-line|)
   (get-string-all import . |.get-string-all|)
   (get-string-n import . |.get-string-n|)
   (get-string-n! import . |.get-string-n!|)
   (get-u8 import . |.get-u8|)
   (getenv import . |.getenv|)
   (gethostname import . |.gethostname|)
   (greatest-fixnum import . |.greatest-fixnum|)
   (guard import . |core.exceptions'guard|)
   (hashtable->alist import . |.core-hashtable->alist|)
   (hashtable-clear! import . |.core-hashtable-clear!|)
   (hashtable-contains? import . |.core-hashtable-contains?|)
   (hashtable-copy import . |.core-hashtable-copy|)
   (hashtable-delete! import . |.core-hashtable-delete!|)
   (hashtable-entries import . |core.hashtables'hashtable-entries|)
   (hashtable-equivalence-function import . |.core-hashtable-equivalence-function|)
   (hashtable-hash-function import . |.core-hashtable-hash-function|)
   (hashtable-keys import . |core.hashtables'hashtable-keys|)
   (hashtable-mutable? import . |.core-hashtable-mutable?|)
   (hashtable-ref import . |.core-hashtable-ref|)
   (hashtable-set! import . |.core-hashtable-set!|)
   (hashtable-size import . |.core-hashtable-size|)
   (hashtable-update! import . |core.hashtables'hashtable-update!|)
   (hashtable? import . |.core-hashtable?|)
   (home-directory import . |.home-directory|)
   (i/o-decoding-error? import . |.i/o-decoding-error?|)
   (i/o-encoding-error-char import . |.i/o-encoding-error-char|)
   (i/o-encoding-error? import . |.i/o-encoding-error?|)
   (i/o-error-filename import . |.i/o-error-filename|)
   (i/o-error-port import . |.i/o-error-port|)
   (i/o-error-position import . |.i/o-error-position|)
   (i/o-error? import . |.i/o-error?|)
   (i/o-file-already-exists-error? import . |.i/o-file-already-exists-error?|)
   (i/o-file-does-not-exist-error? import . |.i/o-file-does-not-exist-error?|)
   (i/o-file-is-read-only-error? import . |.i/o-file-is-read-only-error?|)
   (i/o-file-protection-error? import . |.i/o-file-protection-error?|)
   (i/o-filename-error? import . |.i/o-filename-error?|)
   (i/o-invalid-position-error? import . |.i/o-invalid-position-error?|)
   (i/o-port-error? import . |.i/o-port-error?|)
   (i/o-read-error? import . |.i/o-read-error?|)
   (i/o-write-error? import . |.i/o-write-error?|)
   (identifier-syntax import . |.identifier-syntax|)
   (identifier? import . |.identifier?|)
   (if import . |.if|)
   (imag-part import . |.imag-part|)
   (immutable import . |core.records'immutable|)
   (implementation-restriction-violation? import . |.implementation-restriction-violation?|)
   (include import . |.include|)
   (include-ci import . |.include-ci|)
   (inexact import . |.inexact|)
   (inexact->exact import . |.exact|)
   (inexact? import . |.inexact?|)
   (infinite? import . |.infinite?|)
   (input-port? import . |.input-port?|)
   (integer->char import . |.integer->char|)
   (integer-valued? import . |.integer-valued?|)
   (integer? import . |.integer?|)
   (interaction-environment import . |.interaction-environment|)
   (iota import . |core.lists'iota|)
   (irritants-condition? import . |.irritants-condition?|)
   (lambda import . |.lambda|)
   (last-cdr import . |.last-cdr|)
   (last-n-pair import . |.last-n-pair|)
   (last-pair import . |.last-pair|)
   (latin-1-codec import . |core.io'latin-1-codec|)
   (lcm import . |.lcm|)
   (least-fixnum import . |.least-fixnum|)
   (length import . |.length|)
   (let import . |.let|)
   (let* import . |.let*|)
   (let*-values import . |.let*-values|)
   (let-optionals import . |core.optargs'let-optionals|)
   (let-syntax import . |.let-syntax|)
   (let-values import . |.let-values|)
   (letrec import . |.letrec|)
   (letrec* import . |.letrec*|)
   (letrec-syntax import . |.letrec-syntax|)
   (lexical-violation? import . |.lexical-violation?|)
   (library import . |.library|)
   (library-extensions import . |.library-extensions|)
   (list import . |.list|)
   (list->string import . |.list->string|)
   (list->vector import . |.list->vector|)
   (list-copy import . |.list-copy|)
   (list-head import . |.list-head|)
   (list-of-unique-symbols? import . |core.lists'list-of-unique-symbols?|)
   (list-ref import . |.list-ref|)
   (list-sort import . |core.sorting'list-sort|)
   (list-tail import . |.list-tail|)
   (list-transpose import . |.list-transpose|)
   (list-transpose* import . |.list-transpose*|)
   (list-transpose+ import . |.list-transpose+|)
   (list? import . |.list?|)
   (load import . |.load|)
   (local-heap-object? import . |.local-heap-object?|)
   (log import . |.log|)
   (lookahead-char import . |.lookahead-char|)
   (lookahead-u8 import . |.lookahead-u8|)
   (lookup-process-environment import . |.lookup-process-environment|)
   (macro-expand import . |.macro-expand|)
   (magnitude import . |.magnitude|)
   (make-assertion-violation import . |.make-assertion-violation|)
   (make-bytevector import . |.make-bytevector|)
   (make-bytevector-mapping import . |.make-bytevector-mapping|)
   (make-cmwc-random-state import . |.make-cmwc-random-state|)
   (make-core-hashtable import . |.make-core-hashtable|)
   (make-custom-binary-input-port import . |core.io'make-custom-binary-input-port|)
   (make-custom-binary-input/output-port import . |core.io'make-custom-binary-input/output-port|)
   (make-custom-binary-output-port import . |core.io'make-custom-binary-output-port|)
   (make-custom-textual-input-port import . |core.io'make-custom-textual-input-port|)
   (make-custom-textual-input/output-port import . |core.io'make-custom-textual-input/output-port|)
   (make-custom-textual-output-port import . |core.io'make-custom-textual-output-port|)
   (make-enumeration import . |core.enums'make-enumeration|)
   (make-environment import . |.make-environment|)
   (make-eq-hashtable import . |core.hashtables'make-eq-hashtable|)
   (make-eqv-hashtable import . |core.hashtables'make-eqv-hashtable|)
   (make-error import . |.make-error|)
   (make-hashtable import . |core.hashtables'make-hashtable|)
   (make-i/o-decoding-error import . |.make-i/o-decoding-error|)
   (make-i/o-encoding-error import . |.make-i/o-encoding-error|)
   (make-i/o-error import . |.make-i/o-error|)
   (make-i/o-file-already-exists-error import . |.make-i/o-file-already-exists-error|)
   (make-i/o-file-does-not-exist-error import . |.make-i/o-file-does-not-exist-error|)
   (make-i/o-file-is-read-only-error import . |.make-i/o-file-is-read-only-error|)
   (make-i/o-file-protection-error import . |.make-i/o-file-protection-error|)
   (make-i/o-filename-error import . |.make-i/o-filename-error|)
   (make-i/o-invalid-position-error import . |.make-i/o-invalid-position-error|)
   (make-i/o-port-error import . |.make-i/o-port-error|)
   (make-i/o-read-error import . |.make-i/o-read-error|)
   (make-i/o-write-error import . |.make-i/o-write-error|)
   (make-implementation-restriction-violation import . |.make-implementation-restriction-violation|)
   (make-irritants-condition import . |.make-irritants-condition|)
   (make-lexical-violation import . |.make-lexical-violation|)
   (make-list import . |core.lists'make-list|)
   (make-message-condition import . |.make-message-condition|)
   (make-no-infinities-violation import . |.make-no-infinities-violation|)
   (make-no-nans-violation import . |.make-no-nans-violation|)
   (make-non-continuable-violation import . |.make-non-continuable-violation|)
   (make-parameter import . |.make-parameter|)
   (make-polar import . |.make-polar|)
   (make-record-constructor-descriptor import . |.make-record-constructor-descriptor|)
   (make-record-type import . |.make-record-type|)
   (make-record-type-descriptor import . |.make-record-type-descriptor|)
   (make-rectangular import . |.make-rectangular|)
   (make-serious-condition import . |.make-serious-condition|)
   (make-shared-bag import . |.make-shared-bag|)
   (make-shared-core-hashtable import . |.make-shared-core-hashtable|)
   (make-shared-queue import . |.make-shared-queue|)
   (make-socket import . |.make-socket|)
   (make-string import . |.make-string|)
   (make-string-hashtable import . |core.hashtables'make-string-hashtable|)
   (make-string-input-port import . |.make-string-input-port|)
   (make-string-output-port import . |.make-string-output-port|)
   (make-syntax-violation import . |.make-syntax-violation|)
   (make-temporary-file-port import . |.make-temporary-file-port|)
   (make-transcoded-port import . |.make-transcoded-port|)
   (make-transcoder import . |core.io'make-transcoder|)
   (make-tuple import . |.make-tuple|)
   (make-undefined-violation import . |.make-undefined-violation|)
   (make-uuid import . |.make-uuid|)
   (make-variable-transformer import . |.make-variable-transformer|)
   (make-vector import . |.make-vector|)
   (make-violation import . |.make-violation|)
   (make-warning import . |.make-warning|)
   (make-weak-core-hashtable import . |.make-weak-core-hashtable|)
   (make-weak-hashtable import . |.make-weak-shared-core-hashtable|)
   (make-weak-mapping import . |.make-weak-mapping|)
   (make-weak-shared-core-hashtable import . |.make-weak-shared-core-hashtable|)
   (make-who-condition import . |.make-who-condition|)
   (map import . |.map|)
   (max import . |.max|)
   (member import . |.member|)
   (memp import . |core.lists'memp|)
   (memq import . |.memq|)
   (memv import . |.memv|)
   (message-condition? import . |.message-condition?|)
   (microsecond import . |.microsecond|)
   (microsecond->string import . |.microsecond->string|)
   (microsecond->utc import . |.microsecond->utc|)
   (min import . |.min|)
   (mod import . |.mod|)
   (mod0 import . |.mod0|)
   (modulo import . |.modulo|)
   (mutable import . |core.records'mutable|)
   (nan? import . |.nan?|)
   (native-endianness import . |.native-endianness|)
   (native-eol-style import . |core.io'native-eol-style|)
   (native-transcoder import . |core.io'native-transcoder|)
   (native-transcoder-descriptor import . |.native-transcoder-descriptor|)
   (negative? import . |.negative?|)
   (newline import . |.newline|)
   (no-infinities-violation? import . |.no-infinities-violation?|)
   (no-nans-violation? import . |.no-nans-violation?|)
   (non-continuable-violation? import . |.non-continuable-violation?|)
   (nonblock-byte-ready? import . |.nonblock-byte-ready?|)
   (nongenerative import . |core.records'nongenerative|)
   (not import . |.not|)
   (null? import . |.null?|)
   (number->string import . |.number->string|)
   (number? import . |.number?|)
   (numerator import . |.numerator|)
   (odd? import . |.odd?|)
   (on-primordial-thread? import . |.on-primordial-thread?|)
   (opaque import . |core.records'opaque|)
   (open-builtin-data-input-port import . |.open-builtin-data-input-port|)
   (open-bytevector-input-port import . |core.io'open-bytevector-input-port|)
   (open-bytevector-output-port import . |core.io'open-bytevector-output-port|)
   (open-file-input-port import . |core.io'open-file-input-port|)
   (open-file-input/output-port import . |core.io'open-file-input/output-port|)
   (open-file-output-port import . |core.io'open-file-output-port|)
   (open-input-file import . |core.io'open-input-file|)
   (open-output-file import . |core.io'open-output-file|)
   (open-port import . |.open-port|)
   (open-string-input-port import . |core.io'open-string-input-port|)
   (open-string-output-port import . |core.io'open-string-output-port|)
   (open-temporary-file-port import . |core.io'open-temporary-file-port|)
   (or import . |.or|)
   (output-port-buffer-mode import . |.output-port-buffer-mode|)
   (output-port? import . |.output-port?|)
   (pair? import . |.pair?|)
   (parameterize import . |core.parameters'parameterize|)
   (parent import . |core.records'parent|)
   (parent-rtd import . |core.records'parent-rtd|)
   (partition import . |core.lists'partition|)
   (peek-char import . |.peek-char|)
   (port-closed? import . |.port-closed?|)
   (port-device-subtype import . |.port-device-subtype|)
   (port-eof? import . |.port-eof?|)
   (port-has-port-position? import . |.port-has-port-position?|)
   (port-has-set-port-position!? import . |.port-has-set-port-position!?|)
   (port-position import . |.port-position|)
   (port-transcoder import . |core.io'port-transcoder|)
   (port-transcoder-descriptor import . |.port-transcoder-descriptor|)
   (port? import . |.port?|)
   (positive? import . |.positive?|)
   (pretty-print import . |.pretty-print|)
   (pretty-print-initial-indent import . |.pretty-print-initial-indent|)
   (pretty-print-line-length import . |.pretty-print-line-length|)
   (pretty-print-maximum-lines import . |.pretty-print-maximum-lines|)
   (pretty-print-unwrap-syntax import . |.pretty-print-unwrap-syntax|)
   (procedure? import . |.procedure?|)
   (process import . |.process|)
   (process-environment->alist import . |.process-environment->alist|)
   (process-shell-command import . |.process-shell-command|)
   (process-spawn import . |.process-spawn|)
   (process-wait import . |.process-wait|)
   (protocol import . |core.records'protocol|)
   (put-byte import . |.put-byte|)
   (put-bytevector import . |.put-bytevector|)
   (put-char import . |.put-char|)
   (put-datum import . |.put-datum|)
   (put-string import . |.put-string|)
   (put-u8 import . |.put-u8|)
   (quasiquote import . |.quasiquote|)
   (quasisyntax import . |core.syntax-case'quasisyntax|)
   (quote import . |.quote|)
   (quotient import . |.quotient|)
   (raise import . |.raise|)
   (raise-continuable import . |.raise-continuable|)
   (rational-valued? import . |.rational-valued?|)
   (rational? import . |.rational?|)
   (rationalize import . |.rationalize|)
   (read import . |.read|)
   (read-char import . |.read-char|)
   (read-with-shared-structure import . |.read-with-shared-structure|)
   (real->flonum import . |.real->flonum|)
   (real-part import . |.real-part|)
   (real-valued? import . |.real-valued?|)
   (real? import . |.real?|)
   (record-accessor import . |.record-accessor|)
   (record-constructor import . |.record-constructor|)
   (record-constructor-descriptor import . |core.records'record-constructor-descriptor|)
   (record-field-mutable? import . |.record-field-mutable?|)
   (record-mutator import . |.record-mutator|)
   (record-predicate import . |.record-predicate|)
   (record-print-nesting-limit import . |.record-print-nesting-limit|)
   (record-rtd import . |.record-rtd|)
   (record-type-descriptor import . |core.records'record-type-descriptor|)
   (record-type-descriptor? import . |.record-type-descriptor?|)
   (record-type-field-names import . |.record-type-field-names|)
   (record-type-generative? import . |.record-type-generative?|)
   (record-type-name import . |.record-type-name|)
   (record-type-opaque? import . |.record-type-opaque?|)
   (record-type-parent import . |.record-type-parent|)
   (record-type-rcd import . |.record-type-rcd|)
   (record-type-rtd import . |.record-type-rtd|)
   (record-type-sealed? import . |.record-type-sealed?|)
   (record-type-uid import . |.record-type-uid|)
   (record-type? import . |.record-type?|)
   (record? import . |.record?|)
   (remainder import . |.remainder|)
   (remove import . |core.lists'remove|)
   (remove-duplicate-symbols import . |core.lists'remove-duplicate-symbols|)
   (remp import . |core.lists'remp|)
   (remq import . |core.lists'remq|)
   (remv import . |core.lists'remv|)
   (rename-file import . |.rename-file|)
   (restricted-print-line-length import . |.restricted-print-line-length|)
   (reverse import . |.reverse|)
   (round import . |.round|)
   (scheme-error import . |.scheme-error|)
   (scheme-library-exports import . |.scheme-library-exports|)
   (scheme-library-paths import . |.scheme-library-paths|)
   (scheme-load-paths import . |.scheme-load-paths|)
   (scheme-load-verbose import . |.scheme-load-verbose|)
   (sealed import . |core.records'sealed|)
   (serializable? import . |.serializable?|)
   (serious-condition? import . |.serious-condition?|)
   (set! import . |.set!|)
   (set-car! import . |.set-car!|)
   (set-cdr! import . |.set-cdr!|)
   (set-current-error-port! import . |.set-current-error-port!|)
   (set-current-input-port! import . |.set-current-input-port!|)
   (set-current-output-port! import . |.set-current-output-port!|)
   (set-port-position! import . |.set-port-position!|)
   (set-top-level-value! import . |.set-top-level-value!|)
   (shared-bag-get! import . |.shared-bag-get!|)
   (shared-bag-put! import . |.shared-bag-put!|)
   (shared-bag? import . |.shared-bag?|)
   (shared-queue-pop! import . |.shared-queue-pop!|)
   (shared-queue-push! import . |.shared-queue-push!|)
   (shared-queue-shutdown import . |.shared-queue-shutdown|)
   (shared-queue? import . |.shared-queue?|)
   (shutdown-object? import . |.shutdown-object?|)
   (shutdown-output-port import . |.shutdown-output-port|)
   (simple-conditions import . |.simple-conditions|)
   (sin import . |.sin|)
   (sint-list->bytevector import . |core.bytevectors'sint-list->bytevector|)
   (socket->port import . |.socket->port|)
   (socket-accept import . |.socket-accept|)
   (socket-close import . |.socket-close|)
   (socket-port import . |.socket-port|)
   (socket-recv import . |.socket-recv|)
   (socket-send import . |.socket-send|)
   (socket-shutdown import . |.socket-shutdown|)
   (socket? import . |.socket?|)
   (spawn import . |.spawn|)
   (spawn-heap-limit import . |.spawn-heap-limit|)
   (spawn-timeout import . |.spawn-timeout|)
   (sqrt import . |.sqrt|)
   (standard-error-port import . |.standard-error-port|)
   (standard-input-port import . |.standard-input-port|)
   (standard-output-port import . |.standard-output-port|)
   (string import . |.string|)
   (string->bytevector import . |core.io'string->bytevector|)
   (string->list import . |.string->list|)
   (string->number import . |.string->number|)
   (string->symbol import . |.string->symbol|)
   (string->uninterned-symbol import . |.string->uninterned-symbol|)
   (string->utf16 import . |core.bytevector-transcoders'string->utf16|)
   (string->utf32 import . |core.bytevector-transcoders'string->utf32|)
   (string->utf8 import . |.string->utf8|)
   (string->utf8/nul import . |.string->utf8/nul|)
   (string-append import . |.string-append|)
   (string-ci-hash import . |core.hashtables'string-ci-hash|)
   (string-ci<=? import . |core.unicode'string-ci<=?|)
   (string-ci<? import . |core.unicode'string-ci<?|)
   (string-ci=? import . |core.unicode'string-ci=?|)
   (string-ci>=? import . |core.unicode'string-ci>=?|)
   (string-ci>? import . |core.unicode'string-ci>?|)
   (string-contains import . |.string-contains|)
   (string-copy import . |.string-copy|)
   (string-downcase import . |core.unicode'string-downcase|)
   (string-fill! import . |.string-fill!|)
   (string-foldcase import . |core.unicode'string-foldcase|)
   (string-for-each import . |.string-for-each|)
   (string-hash import . |.string-hash|)
   (string-length import . |.string-length|)
   (string-normalize-nfc import . |core.unicode'string-normalize-nfc|)
   (string-normalize-nfd import . |core.unicode'string-normalize-nfd|)
   (string-normalize-nfkc import . |core.unicode'string-normalize-nfkc|)
   (string-normalize-nfkd import . |core.unicode'string-normalize-nfkd|)
   (string-ref import . |.string-ref|)
   (string-set! import . |.string-set!|)
   (string-titlecase import . |core.unicode'string-titlecase|)
   (string-upcase import . |core.unicode'string-upcase|)
   (string<=? import . |.string<=?|)
   (string<? import . |.string<?|)
   (string=? import . |.string=?|)
   (string>=? import . |.string>=?|)
   (string>? import . |.string>?|)
   (string? import . |.string?|)
   (subr? import . |.subr?|)
   (substring import . |.substring|)
   (symbol->string import . |.symbol->string|)
   (symbol-contains import . |.symbol-contains|)
   (symbol-hash import . |.symbol-hash|)
   (symbol=? import . |.symbol=?|)
   (symbol? import . |.symbol?|)
   (syntax import . |.syntax|)
   (syntax->datum import . |.syntax->datum|)
   (syntax-case import . |.syntax-case|)
   (syntax-rules import . |.syntax-rules|)
   (syntax-violation import . |.syntax-violation|)
   (syntax-violation-form import . |.syntax-violation-form|)
   (syntax-violation-subform import . |.syntax-violation-subform|)
   (syntax-violation? import . |.syntax-violation?|)
   (system import . |.system|)
   (system-environment import . |.system-environment|)
   (system-extension-path import . |.system-extension-path|)
   (system-share-path import . |.system-share-path|)
   (take import . |core.lists'take|)
   (tan import . |.tan|)
   (textual-port? import . |core.io'textual-port?|)
   (time-usage import . |.time-usage|)
   (timeout-object? import . |.timeout-object?|)
   (top-level-bound? import . |.top-level-bound?|)
   (top-level-value import . |.top-level-value|)
   (transcoded-port import . |core.io'transcoded-port|)
   (transcoder-codec import . |core.io'transcoder-codec|)
   (transcoder-eol-style import . |core.io'transcoder-eol-style|)
   (transcoder-error-handling-mode import . |core.io'transcoder-error-handling-mode|)
   (truncate import . |.truncate|)
   (tuple import . |.tuple|)
   (tuple->list import . |.tuple->list|)
   (tuple-index import . |.tuple-index|)
   (tuple-length import . |.tuple-length|)
   (tuple-ref import . |.tuple-ref|)
   (tuple-set! import . |.tuple-set!|)
   (tuple? import . |.tuple?|)
   (u8-list->bytevector import . |.u8-list->bytevector|)
   (uint-list->bytevector import . |core.bytevectors'uint-list->bytevector|)
   (undefined-violation? import . |.undefined-violation?|)
   (uninterned-symbol-prefix import . |.uninterned-symbol-prefix|)
   (uninterned-symbol-suffix import . |.uninterned-symbol-suffix|)
   (uninterned-symbol? import . |.uninterned-symbol?|)
   (unless import . |core.control'unless|)
   (unquote import . |.unquote|)
   (unquote-splicing import . |.unquote-splicing|)
   (unspecified import . |.unspecified|)
   (unspecified? import . |.unspecified?|)
   (unsyntax import . |core.syntax-case'unsyntax|)
   (unsyntax-splicing import . |core.syntax-case'unsyntax-splicing|)
   (usleep import . |.usleep|)
   (utf-16-codec import . |core.io'utf-16-codec|)
   (utf-8-codec import . |core.io'utf-8-codec|)
   (utf16->string import . |core.bytevector-transcoders'utf16->string|)
   (utf32->string import . |core.bytevector-transcoders'utf32->string|)
   (utf8->string import . |.utf8->string|)
   (values import . |.values|)
   (vector import . |.vector|)
   (vector->list import . |.vector->list|)
   (vector-copy import . |.vector-copy|)
   (vector-fill! import . |.vector-fill!|)
   (vector-for-each import . |.vector-for-each|)
   (vector-length import . |.vector-length|)
   (vector-map import . |.vector-map|)
   (vector-ref import . |.vector-ref|)
   (vector-set! import . |.vector-set!|)
   (vector-sort import . |core.sorting'vector-sort|)
   (vector-sort! import . |core.sorting'vector-sort!|)
   (vector? import . |.vector?|)
   (violation? import . |.violation?|)
   (warning-level import . |.warning-level|)
   (warning? import . |.warning?|)
   (weak-core-hashtable? import . |.weak-core-hashtable?|)
   (weak-hashtable? import . |.weak-core-hashtable?|)
   (weak-mapping-key import . |.weak-mapping-key|)
   (weak-mapping-value import . |.weak-mapping-value|)
   (weak-mapping? import . |.weak-mapping?|)
   (when import . |core.control'when|)
   (who-condition? import . |.who-condition?|)
   (with-exception-handler import . |.with-exception-handler|)
   (with-input-from-file import . |core.io'with-input-from-file|)
   (with-output-to-file import . |core.io'with-output-to-file|)
   (with-syntax import . |core.syntax-case'with-syntax|)
   (write import . |.write|)
   (write-char import . |.write-char|)
   (write-with-shared-structure import . |.write-with-shared-structure|)
   (zero? import . |.zero?|))
 (apply.gloc.of
   |.intern-scheme-library|
   (|.intern-scheme-library|
     'core
     #f
     '((&assertion import . |.&assertion|)
       (&condition import . |.&condition|)
       (&error import . |.&error|)
       (&i/o import . |.&i/o|)
       (&i/o-decoding import . |.&i/o-decoding|)
       (&i/o-encoding import . |.&i/o-encoding|)
       (&i/o-file-already-exists import . |.&i/o-file-already-exists|)
       (&i/o-file-does-not-exist import . |.&i/o-file-does-not-exist|)
       (&i/o-file-is-read-only import . |.&i/o-file-is-read-only|)
       (&i/o-file-protection import . |.&i/o-file-protection|)
       (&i/o-filename import . |.&i/o-filename|)
       (&i/o-invalid-position import . |.&i/o-invalid-position|)
       (&i/o-port import . |.&i/o-port|)
       (&i/o-read import . |.&i/o-read|)
       (&i/o-write import . |.&i/o-write|)
       (&implementation-restriction import . |.&implementation-restriction|)
       (&irritants import . |.&irritants|)
       (&lexical import . |.&lexical|)
       (&message import . |.&message|)
       (&no-infinities import . |.&no-infinities|)
       (&no-nans import . |.&no-nans|)
       (&non-continuable import . |.&non-continuable|)
       (&serious import . |.&serious|)
       (&syntax import . |.&syntax|)
       (&undefined import . |.&undefined|)
       (&violation import . |.&violation|)
       (&warning import . |.&warning|)
       (&who import . |.&who|)
       (* import . |.*|)
       (+ import . |.+|)
       (- import . |.-|)
       (... import . |....|)
       (/ import . |./|)
       (< import . |.<|)
       (<= import . |.<=|)
       (= import . |.=|)
       (=> import . |.=>|)
       (> import . |.>|)
       (>= import . |.>=|)
       (_ import . |._|)
       (abs import . |.abs|)
       (acos import . |.acos|)
       (add-library-path import . |.add-library-path|)
       (add-load-path import . |.add-load-path|)
       (and import . |.and|)
       (angle import . |.angle|)
       (append import . |.append|)
       (apply import . |.apply|)
       (architecture-feature import . |.architecture-feature|)
       (asin import . |.asin|)
       (assert import . |.assert|)
       (assertion-violation import . |.assertion-violation|)
       (assertion-violation? import . |.assertion-violation?|)
       (assoc import . |.assoc|)
       (assp import . |core.lists'assp|)
       (assq import . |.assq|)
       (assv import . |.assv|)
       (atan import . |.atan|)
       (auto-compile-cache import . |.auto-compile-cache|)
       (auto-compile-verbose import . |.auto-compile-verbose|)
       (backtrace import . |.backtrace|)
       (backtrace-line-length import . |.backtrace-line-length|)
       (begin import . |.begin|)
       (binary-port? import . |core.io'binary-port?|)
       (bitwise-and import . |.bitwise-and|)
       (bitwise-arithmetic-shift import . |.bitwise-arithmetic-shift|)
       (bitwise-arithmetic-shift-left import . |core.arithmetic'bitwise-arithmetic-shift-left|)
       (bitwise-arithmetic-shift-right import . |core.arithmetic'bitwise-arithmetic-shift-right|)
       (bitwise-bit-count import . |.bitwise-bit-count|)
       (bitwise-bit-field import . |core.arithmetic'bitwise-bit-field|)
       (bitwise-bit-set? import . |core.arithmetic'bitwise-bit-set?|)
       (bitwise-copy-bit import . |core.arithmetic'bitwise-copy-bit|)
       (bitwise-copy-bit-field import . |core.arithmetic'bitwise-copy-bit-field|)
       (bitwise-first-bit-set import . |.bitwise-first-bit-set|)
       (bitwise-if import . |core.arithmetic'bitwise-if|)
       (bitwise-ior import . |.bitwise-ior|)
       (bitwise-length import . |.bitwise-length|)
       (bitwise-not import . |.bitwise-not|)
       (bitwise-reverse-bit-field import . |core.arithmetic'bitwise-reverse-bit-field|)
       (bitwise-rotate-bit-field import . |core.arithmetic'bitwise-rotate-bit-field|)
       (bitwise-xor import . |.bitwise-xor|)
       (boolean=? import . |.boolean=?|)
       (boolean? import . |.boolean?|)
       (bound-identifier=? import . |.bound-identifier=?|)
       (break import . |core.lists'break|)
       (buffer-mode import . |core.io'buffer-mode|)
       (buffer-mode? import . |core.io'buffer-mode?|)
       (bytevector->sint-list import . |core.bytevectors'bytevector->sint-list|)
       (bytevector->string import . |core.io'bytevector->string|)
       (bytevector->u8-list import . |.bytevector->u8-list|)
       (bytevector->uint-list import . |core.bytevectors'bytevector->uint-list|)
       (bytevector-c-double-ref import . |.bytevector-c-double-ref|)
       (bytevector-c-double-set! import . |.bytevector-c-double-set!|)
       (bytevector-c-float-ref import . |.bytevector-c-float-ref|)
       (bytevector-c-float-set! import . |.bytevector-c-float-set!|)
       (bytevector-c-int-ref import . |.bytevector-c-int-ref|)
       (bytevector-c-int-set! import . |.bytevector-c-int-set!|)
       (bytevector-c-int16-ref import . |.bytevector-c-int16-ref|)
       (bytevector-c-int16-set! import . |.bytevector-c-int16-set!|)
       (bytevector-c-int32-ref import . |.bytevector-c-int32-ref|)
       (bytevector-c-int32-set! import . |.bytevector-c-int32-set!|)
       (bytevector-c-int64-ref import . |.bytevector-c-int64-ref|)
       (bytevector-c-int64-set! import . |.bytevector-c-int64-set!|)
       (bytevector-c-int8-ref import . |.bytevector-c-int8-ref|)
       (bytevector-c-int8-set! import . |.bytevector-c-int8-set!|)
       (bytevector-c-long-long-ref import . |.bytevector-c-long-long-ref|)
       (bytevector-c-long-long-set! import . |.bytevector-c-long-long-set!|)
       (bytevector-c-long-ref import . |.bytevector-c-long-ref|)
       (bytevector-c-long-set! import . |.bytevector-c-long-set!|)
       (bytevector-c-short-ref import . |.bytevector-c-short-ref|)
       (bytevector-c-short-set! import . |.bytevector-c-short-set!|)
       (bytevector-c-strlen import . |.bytevector-c-strlen|)
       (bytevector-c-uint16-ref import . |.bytevector-c-uint16-ref|)
       (bytevector-c-uint32-ref import . |.bytevector-c-uint32-ref|)
       (bytevector-c-uint64-ref import . |.bytevector-c-uint64-ref|)
       (bytevector-c-uint8-ref import . |.bytevector-c-uint8-ref|)
       (bytevector-c-unsigned-int-ref import . |.bytevector-c-unsigned-int-ref|)
       (bytevector-c-unsigned-long-long-ref import . |.bytevector-c-unsigned-long-long-ref|)
       (bytevector-c-unsigned-long-ref import . |.bytevector-c-unsigned-long-ref|)
       (bytevector-c-unsigned-short-ref import . |.bytevector-c-unsigned-short-ref|)
       (bytevector-c-void*-ref import . |.bytevector-c-void*-ref|)
       (bytevector-c-void*-set! import . |.bytevector-c-void*-set!|)
       (bytevector-copy import . |.bytevector-copy|)
       (bytevector-copy! import . |.bytevector-copy!|)
       (bytevector-fill! import . |.bytevector-fill!|)
       (bytevector-ieee-double-native-ref import . |.bytevector-ieee-double-native-ref|)
       (bytevector-ieee-double-native-set! import . |.bytevector-ieee-double-native-set!|)
       (bytevector-ieee-double-ref import . |.bytevector-ieee-double-ref|)
       (bytevector-ieee-double-set! import . |.bytevector-ieee-double-set!|)
       (bytevector-ieee-single-native-ref import . |.bytevector-ieee-single-native-ref|)
       (bytevector-ieee-single-native-set! import . |.bytevector-ieee-single-native-set!|)
       (bytevector-ieee-single-ref import . |.bytevector-ieee-single-ref|)
       (bytevector-ieee-single-set! import . |.bytevector-ieee-single-set!|)
       (bytevector-length import . |.bytevector-length|)
       (bytevector-mapping? import . |.bytevector-mapping?|)
       (bytevector-s16-native-ref import . |.bytevector-s16-native-ref|)
       (bytevector-s16-native-set! import . |.bytevector-s16-native-set!|)
       (bytevector-s16-ref import . |.bytevector-s16-ref|)
       (bytevector-s16-set! import . |.bytevector-s16-set!|)
       (bytevector-s32-native-ref import . |.bytevector-s32-native-ref|)
       (bytevector-s32-native-set! import . |.bytevector-s32-native-set!|)
       (bytevector-s32-ref import . |.bytevector-s32-ref|)
       (bytevector-s32-set! import . |.bytevector-s32-set!|)
       (bytevector-s64-native-ref import . |.bytevector-s64-native-ref|)
       (bytevector-s64-native-set! import . |.bytevector-s64-native-set!|)
       (bytevector-s64-ref import . |.bytevector-s64-ref|)
       (bytevector-s64-set! import . |.bytevector-s64-set!|)
       (bytevector-s8-ref import . |.bytevector-s8-ref|)
       (bytevector-s8-set! import . |.bytevector-s8-set!|)
       (bytevector-sint-ref import . |core.bytevectors'bytevector-sint-ref|)
       (bytevector-sint-set! import . |core.bytevectors'bytevector-sint-set!|)
       (bytevector-u16-native-ref import . |.bytevector-u16-native-ref|)
       (bytevector-u16-native-set! import . |.bytevector-u16-native-set!|)
       (bytevector-u16-ref import . |.bytevector-u16-ref|)
       (bytevector-u16-set! import . |.bytevector-u16-set!|)
       (bytevector-u32-native-ref import . |.bytevector-u32-native-ref|)
       (bytevector-u32-native-set! import . |.bytevector-u32-native-set!|)
       (bytevector-u32-ref import . |.bytevector-u32-ref|)
       (bytevector-u32-set! import . |.bytevector-u32-set!|)
       (bytevector-u64-native-ref import . |.bytevector-u64-native-ref|)
       (bytevector-u64-native-set! import . |.bytevector-u64-native-set!|)
       (bytevector-u64-ref import . |.bytevector-u64-ref|)
       (bytevector-u64-set! import . |.bytevector-u64-set!|)
       (bytevector-u8-ref import . |.bytevector-u8-ref|)
       (bytevector-u8-set! import . |.bytevector-u8-set!|)
       (bytevector-uint-ref import . |core.bytevectors'bytevector-uint-ref|)
       (bytevector-uint-set! import . |core.bytevectors'bytevector-uint-set!|)
       (bytevector=? import . |.bytevector=?|)
       (bytevector? import . |.bytevector?|)
       (caaaar import . |.caaaar|)
       (caaadr import . |.caaadr|)
       (caaar import . |.caaar|)
       (caadar import . |.caadar|)
       (caaddr import . |.caaddr|)
       (caadr import . |.caadr|)
       (caar import . |.caar|)
       (cadaar import . |.cadaar|)
       (cadadr import . |.cadadr|)
       (cadar import . |.cadar|)
       (caddar import . |.caddar|)
       (cadddr import . |.cadddr|)
       (caddr import . |.caddr|)
       (cadr import . |.cadr|)
       (call-with-bytevector-output-port import . |core.io'call-with-bytevector-output-port|)
       (call-with-current-continuation import . |.call-with-current-continuation|)
       (call-with-input-file import . |core.io'call-with-input-file|)
       (call-with-output-file import . |core.io'call-with-output-file|)
       (call-with-port import . |.call-with-port|)
       (call-with-string-output-port import . |core.io'call-with-string-output-port|)
       (call-with-values import . |.call-with-values|)
       (call/cc import . |.call/cc|)
       (car import . |.car|)
       (case import . |.case|)
       (case-lambda import . |core.control'case-lambda|)
       (cdaaar import . |.cdaaar|)
       (cdaadr import . |.cdaadr|)
       (cdaar import . |.cdaar|)
       (cdadar import . |.cdadar|)
       (cdaddr import . |.cdaddr|)
       (cdadr import . |.cdadr|)
       (cdar import . |.cdar|)
       (cddaar import . |.cddaar|)
       (cddadr import . |.cddadr|)
       (cddar import . |.cddar|)
       (cdddar import . |.cdddar|)
       (cddddr import . |.cddddr|)
       (cdddr import . |.cdddr|)
       (cddr import . |.cddr|)
       (cdr import . |.cdr|)
       (ceiling import . |.ceiling|)
       (change-file-mode import . |.change-file-mode|)
       (char->integer import . |.char->integer|)
       (char-alphabetic? import . |core.unicode'char-alphabetic?|)
       (char-ci<=? import . |core.unicode'char-ci<=?|)
       (char-ci<? import . |core.unicode'char-ci<?|)
       (char-ci=? import . |core.unicode'char-ci=?|)
       (char-ci>=? import . |core.unicode'char-ci>=?|)
       (char-ci>? import . |core.unicode'char-ci>?|)
       (char-downcase import . |core.unicode'char-downcase|)
       (char-foldcase import . |core.unicode'char-foldcase|)
       (char-general-category import . |core.unicode'char-general-category|)
       (char-lower-case? import . |core.unicode'char-lower-case?|)
       (char-numeric? import . |core.unicode'char-numeric?|)
       (char-title-case? import . |core.unicode'char-title-case?|)
       (char-titlecase import . |core.unicode'char-titlecase|)
       (char-upcase import . |core.unicode'char-upcase|)
       (char-upper-case? import . |core.unicode'char-upper-case?|)
       (char-whitespace? import . |.char-whitespace?|)
       (char<=? import . |.char<=?|)
       (char<? import . |.char<?|)
       (char=? import . |.char=?|)
       (char>=? import . |.char>=?|)
       (char>? import . |.char>?|)
       (char? import . |.char?|)
       (circular-list? import . |.circular-list?|)
       (close-input-port import . |core.io'close-input-port|)
       (close-output-port import . |core.io'close-output-port|)
       (close-port import . |.close-port|)
       (closure-code import . |.closure-code|)
       (cmwc-random-real import . |.cmwc-random-real|)
       (cmwc-random-u32 import . |.cmwc-random-u32|)
       (collect import . |.collect|)
       (collect-notify import . |.collect-notify|)
       (collect-stack-notify import . |.collect-stack-notify|)
       (collect-trip-bytes import . |.collect-trip-bytes|)
       (command-line import . |.command-line|)
       (command-line-shift import . |.command-line-shift|)
       (compile import . |.compile|)
       (compile-coreform import . |.compile-coreform|)
       (complex? import . |.complex?|)
       (cond import . |.cond|)
       (condition import . |.condition|)
       (condition-accessor import . |.condition-accessor|)
       (condition-irritants import . |.condition-irritants|)
       (condition-message import . |.condition-message|)
       (condition-predicate import . |.condition-predicate|)
       (condition-who import . |.condition-who|)
       (condition? import . |.condition?|)
       (cons import . |.cons|)
       (cons* import . |.cons*|)
       (continuation-to-exit import . |.continuation-to-exit|)
       (copy-environment-macros! import . |.copy-environment-macros!|)
       (copy-environment-variables! import . |.copy-environment-variables!|)
       (core-eval import . |.core-eval|)
       (core-hashtable->alist import . |.core-hashtable->alist|)
       (core-hashtable-clear! import . |.core-hashtable-clear!|)
       (core-hashtable-contains? import . |.core-hashtable-contains?|)
       (core-hashtable-copy import . |.core-hashtable-copy|)
       (core-hashtable-delete! import . |.core-hashtable-delete!|)
       (core-hashtable-equivalence-function import . |.core-hashtable-equivalence-function|)
       (core-hashtable-hash-function import . |.core-hashtable-hash-function|)
       (core-hashtable-mutable? import . |.core-hashtable-mutable?|)
       (core-hashtable-ref import . |.core-hashtable-ref|)
       (core-hashtable-set! import . |.core-hashtable-set!|)
       (core-hashtable-size import . |.core-hashtable-size|)
       (core-hashtable? import . |.core-hashtable?|)
       (core-read import . |.core-read|)
       (coreform-optimize import . |core.optimize'coreform-optimize|)
       (cos import . |.cos|)
       (count-pair import . |.count-pair|)
       (create-directory import . |.create-directory|)
       (create-hard-link import . |.create-hard-link|)
       (create-symbolic-link import . |.create-symbolic-link|)
       (current-after-expansion-hook import . |.current-after-expansion-hook|)
       (current-directory import . |.current-directory|)
       (current-dynamic-environment import . |.current-dynamic-environment|)
       (current-environment import . |.current-environment|)
       (current-error-port import . |.current-error-port|)
       (current-exception-printer import . |.current-exception-printer|)
       (current-input-port import . |.current-input-port|)
       (current-library-infix import . |.current-library-infix|)
       (current-library-suffix import . |.current-library-suffix|)
       (current-macro-environment import . |.current-macro-environment|)
       (current-output-port import . |.current-output-port|)
       (current-primitive-prefix import . |.current-primitive-prefix|)
       (current-rename-delimiter import . |.current-rename-delimiter|)
       (current-source-comments import . |.current-source-comments|)
       (current-variable-environment import . |.current-variable-environment|)
       (cyclic-object? import . |.cyclic-object?|)
       (datum import . |core.syntax-case'datum|)
       (datum->syntax import . |.datum->syntax|)
       (decode-flonum import . |.decode-flonum|)
       (decode-microsecond import . |.decode-microsecond|)
       (define import . |.define|)
       (define-condition-type import . |core.conditions'define-condition-type|)
       (define-enumeration import . |core.enums'define-enumeration|)
       (define-library import . |.define-library|)
       (define-macro import . |core.syntax-case'define-macro|)
       (define-record-type import . |core.records'define-record-type|)
       (define-struct import . |core.struct'define-struct|)
       (define-syntax import . |.define-syntax|)
       (delay import . |core.r5rs'delay|)
       (delete-file import . |.delete-file|)
       (denominator import . |.denominator|)
       (destructuring-bind import . |core.destructuring'destructuring-bind|)
       (destructuring-match import . |core.destructuring'destructuring-match|)
       (directory-list import . |.directory-list|)
       (display import . |.display|)
       (display-backtrace import . |.display-backtrace|)
       (display-heap-statistics import . |.display-heap-statistics|)
       (display-object-statistics import . |.display-object-statistics|)
       (display-thread-status import . |.display-thread-status|)
       (div import . |.div|)
       (div-and-mod import . |.div-and-mod|)
       (div0 import . |.div0|)
       (div0-and-mod0 import . |.div0-and-mod0|)
       (do import . |.do|)
       (drop import . |core.lists'drop|)
       (drop-last-cdr import . |.drop-last-cdr|)
       (drop-last-n-pair import . |.drop-last-n-pair|)
       (drop-last-pair import . |.drop-last-pair|)
       (dynamic-wind import . |.dynamic-wind|)
       (else import . |.else|)
       (encode-microsecond import . |.encode-microsecond|)
       (endianness import . |core.bytevectors'endianness|)
       (enum-set->list import . |core.enums'enum-set->list|)
       (enum-set-complement import . |core.enums'enum-set-complement|)
       (enum-set-constructor import . |core.enums'enum-set-constructor|)
       (enum-set-difference import . |core.enums'enum-set-difference|)
       (enum-set-indexer import . |core.enums'enum-set-indexer|)
       (enum-set-intersection import . |core.enums'enum-set-intersection|)
       (enum-set-member? import . |core.enums'enum-set-member?|)
       (enum-set-projection import . |core.enums'enum-set-projection|)
       (enum-set-subset? import . |core.enums'enum-set-subset?|)
       (enum-set-union import . |core.enums'enum-set-union|)
       (enum-set-universe import . |core.enums'enum-set-universe|)
       (enum-set=? import . |core.enums'enum-set=?|)
       (enum-set? import . |core.enums'enum-set?|)
       (environment import . |.environment|)
       (eof-object import . |.eof-object|)
       (eof-object? import . |.eof-object?|)
       (eol-style import . |core.io'eol-style|)
       (eq? import . |.eq?|)
       (equal-hash import . |.equal-hash|)
       (equal? import . |.equal?|)
       (eqv? import . |.eqv?|)
       (error import . |.error|)
       (error-handling-mode import . |core.io'error-handling-mode|)
       (error? import . |.error?|)
       (eval import . |.eval|)
       (even? import . |.even?|)
       (exact import . |.exact|)
       (exact->inexact import . |.inexact|)
       (exact-integer-sqrt import . |.exact-integer-sqrt|)
       (exact? import . |.exact?|)
       (exists import . |core.lists'exists|)
       (exit import . |.exit|)
       (exp import . |.exp|)
       (expansion-backtrace import . |.expansion-backtrace|)
       (expt import . |.expt|)
       (extract-accumulated-bytevector import . |.extract-accumulated-bytevector|)
       (extract-accumulated-string import . |.extract-accumulated-string|)
       (feature-identifies import . |.feature-identifies|)
       (fields import . |core.records'fields|)
       (file-directory? import . |.file-directory?|)
       (file-executable? import . |.file-executable?|)
       (file-exists? import . |.file-exists?|)
       (file-options import . |core.io'file-options|)
       (file-readable? import . |.file-readable?|)
       (file-regular? import . |.file-regular?|)
       (file-size-in-bytes import . |.file-size-in-bytes|)
       (file-stat-atime import . |.file-stat-atime|)
       (file-stat-ctime import . |.file-stat-ctime|)
       (file-stat-mtime import . |.file-stat-mtime|)
       (file-symbolic-link? import . |.file-symbolic-link?|)
       (file-writable? import . |.file-writable?|)
       (filter import . |core.lists'filter|)
       (find import . |core.lists'find|)
       (finite? import . |.finite?|)
       (fixnum->flonum import . |.fixnum->flonum|)
       (fixnum-width import . |.fixnum-width|)
       (fixnum? import . |.fixnum?|)
       (fl* import . |.fl*|)
       (fl+ import . |.fl+|)
       (fl- import . |.fl-|)
       (fl/ import . |.fl/|)
       (fl<=? import . |.fl<=?|)
       (fl<? import . |.fl<?|)
       (fl=? import . |.fl=?|)
       (fl>=? import . |.fl>=?|)
       (fl>? import . |.fl>?|)
       (flabs import . |.flabs|)
       (flacos import . |.flacos|)
       (flasin import . |.flasin|)
       (flatan import . |.flatan|)
       (flceiling import . |.flceiling|)
       (flcos import . |.flcos|)
       (fldenominator import . |.fldenominator|)
       (fldiv import . |.fldiv|)
       (fldiv-and-mod import . |core.arithmetic'fldiv-and-mod|)
       (fldiv0 import . |.fldiv0|)
       (fldiv0-and-mod0 import . |core.arithmetic'fldiv0-and-mod0|)
       (fleven? import . |.fleven?|)
       (flexp import . |.flexp|)
       (flexpt import . |.flexpt|)
       (flfinite? import . |.flfinite?|)
       (flfloor import . |.flfloor|)
       (flinfinite? import . |.flinfinite?|)
       (flinteger? import . |.flinteger?|)
       (fllog import . |.fllog|)
       (flmax import . |.flmax|)
       (flmin import . |.flmin|)
       (flmod import . |core.arithmetic'flmod|)
       (flmod0 import . |core.arithmetic'flmod0|)
       (flnan? import . |.flnan?|)
       (flnegative? import . |.flnegative?|)
       (flnumerator import . |.flnumerator|)
       (flodd? import . |.flodd?|)
       (flonum? import . |.flonum?|)
       (floor import . |.floor|)
       (flpositive? import . |.flpositive?|)
       (flround import . |.flround|)
       (flsin import . |.flsin|)
       (flsqrt import . |.flsqrt|)
       (fltan import . |.fltan|)
       (fltruncate import . |.fltruncate|)
       (flush-output-port import . |.flush-output-port|)
       (flzero? import . |.flzero?|)
       (fold-left import . |core.lists'fold-left|)
       (fold-right import . |core.lists'fold-right|)
       (for-all import . |core.lists'for-all|)
       (for-each import . |.for-each|)
       (force import . |core.r5rs'force|)
       (format import . |.format|)
       (free-identifier=? import . |.free-identifier=?|)
       (fulfill-feature-requirements? import . |.fulfill-feature-requirements?|)
       (fx* import . |.fx*|)
       (fx*/carry import . |core.arithmetic'fx*/carry|)
       (fx+ import . |.fx+|)
       (fx+/carry import . |core.arithmetic'fx+/carry|)
       (fx- import . |.fx-|)
       (fx-/carry import . |core.arithmetic'fx-/carry|)
       (fx<=? import . |.fx<=?|)
       (fx<? import . |.fx<?|)
       (fx=? import . |.fx=?|)
       (fx>=? import . |.fx>=?|)
       (fx>? import . |.fx>?|)
       (fxand import . |.fxand|)
       (fxarithmetic-shift import . |.fxarithmetic-shift|)
       (fxarithmetic-shift-left import . |.fxarithmetic-shift-left|)
       (fxarithmetic-shift-right import . |.fxarithmetic-shift-right|)
       (fxbit-count import . |.fxbit-count|)
       (fxbit-field import . |.fxbit-field|)
       (fxbit-set? import . |.fxbit-set?|)
       (fxcopy-bit import . |.fxcopy-bit|)
       (fxcopy-bit-field import . |.fxcopy-bit-field|)
       (fxdiv import . |.fxdiv|)
       (fxdiv-and-mod import . |core.arithmetic'fxdiv-and-mod|)
       (fxdiv0 import . |.fxdiv0|)
       (fxdiv0-and-mod0 import . |core.arithmetic'fxdiv0-and-mod0|)
       (fxeven? import . |.fxeven?|)
       (fxfirst-bit-set import . |.fxfirst-bit-set|)
       (fxif import . |.fxif|)
       (fxior import . |.fxior|)
       (fxlength import . |.fxlength|)
       (fxmax import . |.fxmax|)
       (fxmin import . |.fxmin|)
       (fxmod import . |core.arithmetic'fxmod|)
       (fxmod0 import . |core.arithmetic'fxmod0|)
       (fxnegative? import . |.fxnegative?|)
       (fxnot import . |.fxnot|)
       (fxodd? import . |.fxodd?|)
       (fxpositive? import . |.fxpositive?|)
       (fxreverse-bit-field import . |core.arithmetic'fxreverse-bit-field|)
       (fxrotate-bit-field import . |core.arithmetic'fxrotate-bit-field|)
       (fxxor import . |.fxxor|)
       (fxzero? import . |.fxzero?|)
       (gcd import . |.gcd|)
       (generate-temporaries import . |.generate-temporaries|)
       (generate-temporary-symbol import . |.generate-temporary-symbol|)
       (gensym import . |.gensym|)
       (get-accumulated-bytevector import . |.get-accumulated-bytevector|)
       (get-accumulated-string import . |.get-accumulated-string|)
       (get-bytevector-all import . |.get-bytevector-all|)
       (get-bytevector-n import . |.get-bytevector-n|)
       (get-bytevector-n! import . |.get-bytevector-n!|)
       (get-bytevector-some import . |.get-bytevector-some|)
       (get-char import . |.get-char|)
       (get-datum import . |.get-datum|)
       (get-line import . |.get-line|)
       (get-string-all import . |.get-string-all|)
       (get-string-n import . |.get-string-n|)
       (get-string-n! import . |.get-string-n!|)
       (get-u8 import . |.get-u8|)
       (getenv import . |.getenv|)
       (gethostname import . |.gethostname|)
       (greatest-fixnum import . |.greatest-fixnum|)
       (guard import . |core.exceptions'guard|)
       (hashtable->alist import . |.core-hashtable->alist|)
       (hashtable-clear! import . |.core-hashtable-clear!|)
       (hashtable-contains? import . |.core-hashtable-contains?|)
       (hashtable-copy import . |.core-hashtable-copy|)
       (hashtable-delete! import . |.core-hashtable-delete!|)
       (hashtable-entries import . |core.hashtables'hashtable-entries|)
       (hashtable-equivalence-function import . |.core-hashtable-equivalence-function|)
       (hashtable-hash-function import . |.core-hashtable-hash-function|)
       (hashtable-keys import . |core.hashtables'hashtable-keys|)
       (hashtable-mutable? import . |.core-hashtable-mutable?|)
       (hashtable-ref import . |.core-hashtable-ref|)
       (hashtable-set! import . |.core-hashtable-set!|)
       (hashtable-size import . |.core-hashtable-size|)
       (hashtable-update! import . |core.hashtables'hashtable-update!|)
       (hashtable? import . |.core-hashtable?|)
       (home-directory import . |.home-directory|)
       (i/o-decoding-error? import . |.i/o-decoding-error?|)
       (i/o-encoding-error-char import . |.i/o-encoding-error-char|)
       (i/o-encoding-error? import . |.i/o-encoding-error?|)
       (i/o-error-filename import . |.i/o-error-filename|)
       (i/o-error-port import . |.i/o-error-port|)
       (i/o-error-position import . |.i/o-error-position|)
       (i/o-error? import . |.i/o-error?|)
       (i/o-file-already-exists-error? import . |.i/o-file-already-exists-error?|)
       (i/o-file-does-not-exist-error? import . |.i/o-file-does-not-exist-error?|)
       (i/o-file-is-read-only-error? import . |.i/o-file-is-read-only-error?|)
       (i/o-file-protection-error? import . |.i/o-file-protection-error?|)
       (i/o-filename-error? import . |.i/o-filename-error?|)
       (i/o-invalid-position-error? import . |.i/o-invalid-position-error?|)
       (i/o-port-error? import . |.i/o-port-error?|)
       (i/o-read-error? import . |.i/o-read-error?|)
       (i/o-write-error? import . |.i/o-write-error?|)
       (identifier-syntax import . |.identifier-syntax|)
       (identifier? import . |.identifier?|)
       (if import . |.if|)
       (imag-part import . |.imag-part|)
       (immutable import . |core.records'immutable|)
       (implementation-restriction-violation? import . |.implementation-restriction-violation?|)
       (include import . |.include|)
       (include-ci import . |.include-ci|)
       (inexact import . |.inexact|)
       (inexact->exact import . |.exact|)
       (inexact? import . |.inexact?|)
       (infinite? import . |.infinite?|)
       (input-port? import . |.input-port?|)
       (integer->char import . |.integer->char|)
       (integer-valued? import . |.integer-valued?|)
       (integer? import . |.integer?|)
       (interaction-environment import . |.interaction-environment|)
       (iota import . |core.lists'iota|)
       (irritants-condition? import . |.irritants-condition?|)
       (lambda import . |.lambda|)
       (last-cdr import . |.last-cdr|)
       (last-n-pair import . |.last-n-pair|)
       (last-pair import . |.last-pair|)
       (latin-1-codec import . |core.io'latin-1-codec|)
       (lcm import . |.lcm|)
       (least-fixnum import . |.least-fixnum|)
       (length import . |.length|)
       (let import . |.let|)
       (let* import . |.let*|)
       (let*-values import . |.let*-values|)
       (let-optionals import . |core.optargs'let-optionals|)
       (let-syntax import . |.let-syntax|)
       (let-values import . |.let-values|)
       (letrec import . |.letrec|)
       (letrec* import . |.letrec*|)
       (letrec-syntax import . |.letrec-syntax|)
       (lexical-violation? import . |.lexical-violation?|)
       (library import . |.library|)
       (library-extensions import . |.library-extensions|)
       (list import . |.list|)
       (list->string import . |.list->string|)
       (list->vector import . |.list->vector|)
       (list-copy import . |.list-copy|)
       (list-head import . |.list-head|)
       (list-of-unique-symbols? import . |core.lists'list-of-unique-symbols?|)
       (list-ref import . |.list-ref|)
       (list-sort import . |core.sorting'list-sort|)
       (list-tail import . |.list-tail|)
       (list-transpose import . |.list-transpose|)
       (list-transpose* import . |.list-transpose*|)
       (list-transpose+ import . |.list-transpose+|)
       (list? import . |.list?|)
       (load import . |.load|)
       (local-heap-object? import . |.local-heap-object?|)
       (log import . |.log|)
       (lookahead-char import . |.lookahead-char|)
       (lookahead-u8 import . |.lookahead-u8|)
       (lookup-process-environment import . |.lookup-process-environment|)
       (macro-expand import . |.macro-expand|)
       (magnitude import . |.magnitude|)
       (make-assertion-violation import . |.make-assertion-violation|)
       (make-bytevector import . |.make-bytevector|)
       (make-bytevector-mapping import . |.make-bytevector-mapping|)
       (make-cmwc-random-state import . |.make-cmwc-random-state|)
       (make-core-hashtable import . |.make-core-hashtable|)
       (make-custom-binary-input-port import . |core.io'make-custom-binary-input-port|)
       (make-custom-binary-input/output-port
         import
         .
         |core.io'make-custom-binary-input/output-port|)
       (make-custom-binary-output-port import . |core.io'make-custom-binary-output-port|)
       (make-custom-textual-input-port import . |core.io'make-custom-textual-input-port|)
       (make-custom-textual-input/output-port
         import
         .
         |core.io'make-custom-textual-input/output-port|)
       (make-custom-textual-output-port import . |core.io'make-custom-textual-output-port|)
       (make-enumeration import . |core.enums'make-enumeration|)
       (make-environment import . |.make-environment|)
       (make-eq-hashtable import . |core.hashtables'make-eq-hashtable|)
       (make-eqv-hashtable import . |core.hashtables'make-eqv-hashtable|)
       (make-error import . |.make-error|)
       (make-hashtable import . |core.hashtables'make-hashtable|)
       (make-i/o-decoding-error import . |.make-i/o-decoding-error|)
       (make-i/o-encoding-error import . |.make-i/o-encoding-error|)
       (make-i/o-error import . |.make-i/o-error|)
       (make-i/o-file-already-exists-error import . |.make-i/o-file-already-exists-error|)
       (make-i/o-file-does-not-exist-error import . |.make-i/o-file-does-not-exist-error|)
       (make-i/o-file-is-read-only-error import . |.make-i/o-file-is-read-only-error|)
       (make-i/o-file-protection-error import . |.make-i/o-file-protection-error|)
       (make-i/o-filename-error import . |.make-i/o-filename-error|)
       (make-i/o-invalid-position-error import . |.make-i/o-invalid-position-error|)
       (make-i/o-port-error import . |.make-i/o-port-error|)
       (make-i/o-read-error import . |.make-i/o-read-error|)
       (make-i/o-write-error import . |.make-i/o-write-error|)
       (make-implementation-restriction-violation
         import
         .
         |.make-implementation-restriction-violation|)
       (make-irritants-condition import . |.make-irritants-condition|)
       (make-lexical-violation import . |.make-lexical-violation|)
       (make-list import . |core.lists'make-list|)
       (make-message-condition import . |.make-message-condition|)
       (make-no-infinities-violation import . |.make-no-infinities-violation|)
       (make-no-nans-violation import . |.make-no-nans-violation|)
       (make-non-continuable-violation import . |.make-non-continuable-violation|)
       (make-parameter import . |.make-parameter|)
       (make-polar import . |.make-polar|)
       (make-record-constructor-descriptor import . |.make-record-constructor-descriptor|)
       (make-record-type import . |.make-record-type|)
       (make-record-type-descriptor import . |.make-record-type-descriptor|)
       (make-rectangular import . |.make-rectangular|)
       (make-serious-condition import . |.make-serious-condition|)
       (make-shared-bag import . |.make-shared-bag|)
       (make-shared-core-hashtable import . |.make-shared-core-hashtable|)
       (make-shared-queue import . |.make-shared-queue|)
       (make-socket import . |.make-socket|)
       (make-string import . |.make-string|)
       (make-string-hashtable import . |core.hashtables'make-string-hashtable|)
       (make-string-input-port import . |.make-string-input-port|)
       (make-string-output-port import . |.make-string-output-port|)
       (make-syntax-violation import . |.make-syntax-violation|)
       (make-temporary-file-port import . |.make-temporary-file-port|)
       (make-transcoded-port import . |.make-transcoded-port|)
       (make-transcoder import . |core.io'make-transcoder|)
       (make-tuple import . |.make-tuple|)
       (make-undefined-violation import . |.make-undefined-violation|)
       (make-uuid import . |.make-uuid|)
       (make-variable-transformer import . |.make-variable-transformer|)
       (make-vector import . |.make-vector|)
       (make-violation import . |.make-violation|)
       (make-warning import . |.make-warning|)
       (make-weak-core-hashtable import . |.make-weak-core-hashtable|)
       (make-weak-hashtable import . |.make-weak-shared-core-hashtable|)
       (make-weak-mapping import . |.make-weak-mapping|)
       (make-weak-shared-core-hashtable import . |.make-weak-shared-core-hashtable|)
       (make-who-condition import . |.make-who-condition|)
       (map import . |.map|)
       (max import . |.max|)
       (member import . |.member|)
       (memp import . |core.lists'memp|)
       (memq import . |.memq|)
       (memv import . |.memv|)
       (message-condition? import . |.message-condition?|)
       (microsecond import . |.microsecond|)
       (microsecond->string import . |.microsecond->string|)
       (microsecond->utc import . |.microsecond->utc|)
       (min import . |.min|)
       (mod import . |.mod|)
       (mod0 import . |.mod0|)
       (modulo import . |.modulo|)
       (mutable import . |core.records'mutable|)
       (nan? import . |.nan?|)
       (native-endianness import . |.native-endianness|)
       (native-eol-style import . |core.io'native-eol-style|)
       (native-transcoder import . |core.io'native-transcoder|)
       (native-transcoder-descriptor import . |.native-transcoder-descriptor|)
       (negative? import . |.negative?|)
       (newline import . |.newline|)
       (no-infinities-violation? import . |.no-infinities-violation?|)
       (no-nans-violation? import . |.no-nans-violation?|)
       (non-continuable-violation? import . |.non-continuable-violation?|)
       (nonblock-byte-ready? import . |.nonblock-byte-ready?|)
       (nongenerative import . |core.records'nongenerative|)
       (not import . |.not|)
       (null? import . |.null?|)
       (number->string import . |.number->string|)
       (number? import . |.number?|)
       (numerator import . |.numerator|)
       (odd? import . |.odd?|)
       (on-primordial-thread? import . |.on-primordial-thread?|)
       (opaque import . |core.records'opaque|)
       (open-builtin-data-input-port import . |.open-builtin-data-input-port|)
       (open-bytevector-input-port import . |core.io'open-bytevector-input-port|)
       (open-bytevector-output-port import . |core.io'open-bytevector-output-port|)
       (open-file-input-port import . |core.io'open-file-input-port|)
       (open-file-input/output-port import . |core.io'open-file-input/output-port|)
       (open-file-output-port import . |core.io'open-file-output-port|)
       (open-input-file import . |core.io'open-input-file|)
       (open-output-file import . |core.io'open-output-file|)
       (open-port import . |.open-port|)
       (open-string-input-port import . |core.io'open-string-input-port|)
       (open-string-output-port import . |core.io'open-string-output-port|)
       (open-temporary-file-port import . |core.io'open-temporary-file-port|)
       (or import . |.or|)
       (output-port-buffer-mode import . |.output-port-buffer-mode|)
       (output-port? import . |.output-port?|)
       (pair? import . |.pair?|)
       (parameterize import . |core.parameters'parameterize|)
       (parent import . |core.records'parent|)
       (parent-rtd import . |core.records'parent-rtd|)
       (partition import . |core.lists'partition|)
       (peek-char import . |.peek-char|)
       (port-closed? import . |.port-closed?|)
       (port-device-subtype import . |.port-device-subtype|)
       (port-eof? import . |.port-eof?|)
       (port-has-port-position? import . |.port-has-port-position?|)
       (port-has-set-port-position!? import . |.port-has-set-port-position!?|)
       (port-position import . |.port-position|)
       (port-transcoder import . |core.io'port-transcoder|)
       (port-transcoder-descriptor import . |.port-transcoder-descriptor|)
       (port? import . |.port?|)
       (positive? import . |.positive?|)
       (pretty-print import . |.pretty-print|)
       (pretty-print-initial-indent import . |.pretty-print-initial-indent|)
       (pretty-print-line-length import . |.pretty-print-line-length|)
       (pretty-print-maximum-lines import . |.pretty-print-maximum-lines|)
       (pretty-print-unwrap-syntax import . |.pretty-print-unwrap-syntax|)
       (procedure? import . |.procedure?|)
       (process import . |.process|)
       (process-environment->alist import . |.process-environment->alist|)
       (process-shell-command import . |.process-shell-command|)
       (process-spawn import . |.process-spawn|)
       (process-wait import . |.process-wait|)
       (protocol import . |core.records'protocol|)
       (put-byte import . |.put-byte|)
       (put-bytevector import . |.put-bytevector|)
       (put-char import . |.put-char|)
       (put-datum import . |.put-datum|)
       (put-string import . |.put-string|)
       (put-u8 import . |.put-u8|)
       (quasiquote import . |.quasiquote|)
       (quasisyntax import . |core.syntax-case'quasisyntax|)
       (quote import . |.quote|)
       (quotient import . |.quotient|)
       (raise import . |.raise|)
       (raise-continuable import . |.raise-continuable|)
       (rational-valued? import . |.rational-valued?|)
       (rational? import . |.rational?|)
       (rationalize import . |.rationalize|)
       (read import . |.read|)
       (read-char import . |.read-char|)
       (read-with-shared-structure import . |.read-with-shared-structure|)
       (real->flonum import . |.real->flonum|)
       (real-part import . |.real-part|)
       (real-valued? import . |.real-valued?|)
       (real? import . |.real?|)
       (record-accessor import . |.record-accessor|)
       (record-constructor import . |.record-constructor|)
       (record-constructor-descriptor import . |core.records'record-constructor-descriptor|)
       (record-field-mutable? import . |.record-field-mutable?|)
       (record-mutator import . |.record-mutator|)
       (record-predicate import . |.record-predicate|)
       (record-print-nesting-limit import . |.record-print-nesting-limit|)
       (record-rtd import . |.record-rtd|)
       (record-type-descriptor import . |core.records'record-type-descriptor|)
       (record-type-descriptor? import . |.record-type-descriptor?|)
       (record-type-field-names import . |.record-type-field-names|)
       (record-type-generative? import . |.record-type-generative?|)
       (record-type-name import . |.record-type-name|)
       (record-type-opaque? import . |.record-type-opaque?|)
       (record-type-parent import . |.record-type-parent|)
       (record-type-rcd import . |.record-type-rcd|)
       (record-type-rtd import . |.record-type-rtd|)
       (record-type-sealed? import . |.record-type-sealed?|)
       (record-type-uid import . |.record-type-uid|)
       (record-type? import . |.record-type?|)
       (record? import . |.record?|)
       (remainder import . |.remainder|)
       (remove import . |core.lists'remove|)
       (remove-duplicate-symbols import . |core.lists'remove-duplicate-symbols|)
       (remp import . |core.lists'remp|)
       (remq import . |core.lists'remq|)
       (remv import . |core.lists'remv|)
       (rename-file import . |.rename-file|)
       (restricted-print-line-length import . |.restricted-print-line-length|)
       (reverse import . |.reverse|)
       (round import . |.round|)
       (scheme-error import . |.scheme-error|)
       (scheme-library-exports import . |.scheme-library-exports|)
       (scheme-library-paths import . |.scheme-library-paths|)
       (scheme-load-paths import . |.scheme-load-paths|)
       (scheme-load-verbose import . |.scheme-load-verbose|)
       (sealed import . |core.records'sealed|)
       (serializable? import . |.serializable?|)
       (serious-condition? import . |.serious-condition?|)
       (set! import . |.set!|)
       (set-car! import . |.set-car!|)
       (set-cdr! import . |.set-cdr!|)
       (set-current-error-port! import . |.set-current-error-port!|)
       (set-current-input-port! import . |.set-current-input-port!|)
       (set-current-output-port! import . |.set-current-output-port!|)
       (set-port-position! import . |.set-port-position!|)
       (set-top-level-value! import . |.set-top-level-value!|)
       (shared-bag-get! import . |.shared-bag-get!|)
       (shared-bag-put! import . |.shared-bag-put!|)
       (shared-bag? import . |.shared-bag?|)
       (shared-queue-pop! import . |.shared-queue-pop!|)
       (shared-queue-push! import . |.shared-queue-push!|)
       (shared-queue-shutdown import . |.shared-queue-shutdown|)
       (shared-queue? import . |.shared-queue?|)
       (shutdown-object? import . |.shutdown-object?|)
       (shutdown-output-port import . |.shutdown-output-port|)
       (simple-conditions import . |.simple-conditions|)
       (sin import . |.sin|)
       (sint-list->bytevector import . |core.bytevectors'sint-list->bytevector|)
       (socket->port import . |.socket->port|)
       (socket-accept import . |.socket-accept|)
       (socket-close import . |.socket-close|)
       (socket-port import . |.socket-port|)
       (socket-recv import . |.socket-recv|)
       (socket-send import . |.socket-send|)
       (socket-shutdown import . |.socket-shutdown|)
       (socket? import . |.socket?|)
       (spawn import . |.spawn|)
       (spawn-heap-limit import . |.spawn-heap-limit|)
       (spawn-timeout import . |.spawn-timeout|)
       (sqrt import . |.sqrt|)
       (standard-error-port import . |.standard-error-port|)
       (standard-input-port import . |.standard-input-port|)
       (standard-output-port import . |.standard-output-port|)
       (string import . |.string|)
       (string->bytevector import . |core.io'string->bytevector|)
       (string->list import . |.string->list|)
       (string->number import . |.string->number|)
       (string->symbol import . |.string->symbol|)
       (string->uninterned-symbol import . |.string->uninterned-symbol|)
       (string->utf16 import . |core.bytevector-transcoders'string->utf16|)
       (string->utf32 import . |core.bytevector-transcoders'string->utf32|)
       (string->utf8 import . |.string->utf8|)
       (string->utf8/nul import . |.string->utf8/nul|)
       (string-append import . |.string-append|)
       (string-ci-hash import . |core.hashtables'string-ci-hash|)
       (string-ci<=? import . |core.unicode'string-ci<=?|)
       (string-ci<? import . |core.unicode'string-ci<?|)
       (string-ci=? import . |core.unicode'string-ci=?|)
       (string-ci>=? import . |core.unicode'string-ci>=?|)
       (string-ci>? import . |core.unicode'string-ci>?|)
       (string-contains import . |.string-contains|)
       (string-copy import . |.string-copy|)
       (string-downcase import . |core.unicode'string-downcase|)
       (string-fill! import . |.string-fill!|)
       (string-foldcase import . |core.unicode'string-foldcase|)
       (string-for-each import . |.string-for-each|)
       (string-hash import . |.string-hash|)
       (string-length import . |.string-length|)
       (string-normalize-nfc import . |core.unicode'string-normalize-nfc|)
       (string-normalize-nfd import . |core.unicode'string-normalize-nfd|)
       (string-normalize-nfkc import . |core.unicode'string-normalize-nfkc|)
       (string-normalize-nfkd import . |core.unicode'string-normalize-nfkd|)
       (string-ref import . |.string-ref|)
       (string-set! import . |.string-set!|)
       (string-titlecase import . |core.unicode'string-titlecase|)
       (string-upcase import . |core.unicode'string-upcase|)
       (string<=? import . |.string<=?|)
       (string<? import . |.string<?|)
       (string=? import . |.string=?|)
       (string>=? import . |.string>=?|)
       (string>? import . |.string>?|)
       (string? import . |.string?|)
       (subr? import . |.subr?|)
       (substring import . |.substring|)
       (symbol->string import . |.symbol->string|)
       (symbol-contains import . |.symbol-contains|)
       (symbol-hash import . |.symbol-hash|)
       (symbol=? import . |.symbol=?|)
       (symbol? import . |.symbol?|)
       (syntax import . |.syntax|)
       (syntax->datum import . |.syntax->datum|)
       (syntax-case import . |.syntax-case|)
       (syntax-rules import . |.syntax-rules|)
       (syntax-violation import . |.syntax-violation|)
       (syntax-violation-form import . |.syntax-violation-form|)
       (syntax-violation-subform import . |.syntax-violation-subform|)
       (syntax-violation? import . |.syntax-violation?|)
       (system import . |.system|)
       (system-environment import . |.system-environment|)
       (system-extension-path import . |.system-extension-path|)
       (system-share-path import . |.system-share-path|)
       (take import . |core.lists'take|)
       (tan import . |.tan|)
       (textual-port? import . |core.io'textual-port?|)
       (time-usage import . |.time-usage|)
       (timeout-object? import . |.timeout-object?|)
       (top-level-bound? import . |.top-level-bound?|)
       (top-level-value import . |.top-level-value|)
       (transcoded-port import . |core.io'transcoded-port|)
       (transcoder-codec import . |core.io'transcoder-codec|)
       (transcoder-eol-style import . |core.io'transcoder-eol-style|)
       (transcoder-error-handling-mode import . |core.io'transcoder-error-handling-mode|)
       (truncate import . |.truncate|)
       (tuple import . |.tuple|)
       (tuple->list import . |.tuple->list|)
       (tuple-index import . |.tuple-index|)
       (tuple-length import . |.tuple-length|)
       (tuple-ref import . |.tuple-ref|)
       (tuple-set! import . |.tuple-set!|)
       (tuple? import . |.tuple?|)
       (u8-list->bytevector import . |.u8-list->bytevector|)
       (uint-list->bytevector import . |core.bytevectors'uint-list->bytevector|)
       (undefined-violation? import . |.undefined-violation?|)
       (uninterned-symbol-prefix import . |.uninterned-symbol-prefix|)
       (uninterned-symbol-suffix import . |.uninterned-symbol-suffix|)
       (uninterned-symbol? import . |.uninterned-symbol?|)
       (unless import . |core.control'unless|)
       (unquote import . |.unquote|)
       (unquote-splicing import . |.unquote-splicing|)
       (unspecified import . |.unspecified|)
       (unspecified? import . |.unspecified?|)
       (unsyntax import . |core.syntax-case'unsyntax|)
       (unsyntax-splicing import . |core.syntax-case'unsyntax-splicing|)
       (usleep import . |.usleep|)
       (utf-16-codec import . |core.io'utf-16-codec|)
       (utf-8-codec import . |core.io'utf-8-codec|)
       (utf16->string import . |core.bytevector-transcoders'utf16->string|)
       (utf32->string import . |core.bytevector-transcoders'utf32->string|)
       (utf8->string import . |.utf8->string|)
       (values import . |.values|)
       (vector import . |.vector|)
       (vector->list import . |.vector->list|)
       (vector-copy import . |.vector-copy|)
       (vector-fill! import . |.vector-fill!|)
       (vector-for-each import . |.vector-for-each|)
       (vector-length import . |.vector-length|)
       (vector-map import . |.vector-map|)
       (vector-ref import . |.vector-ref|)
       (vector-set! import . |.vector-set!|)
       (vector-sort import . |core.sorting'vector-sort|)
       (vector-sort! import . |core.sorting'vector-sort!|)
       (vector? import . |.vector?|)
       (violation? import . |.violation?|)
       (warning-level import . |.warning-level|)
       (warning? import . |.warning?|)
       (weak-core-hashtable? import . |.weak-core-hashtable?|)
       (weak-hashtable? import . |.weak-core-hashtable?|)
       (weak-mapping-key import . |.weak-mapping-key|)
       (weak-mapping-value import . |.weak-mapping-value|)
       (weak-mapping? import . |.weak-mapping?|)
       (when import . |core.control'when|)
       (who-condition? import . |.who-condition?|)
       (with-exception-handler import . |.with-exception-handler|)
       (with-input-from-file import . |core.io'with-input-from-file|)
       (with-output-to-file import . |core.io'with-output-to-file|)
       (with-syntax import . |core.syntax-case'with-syntax|)
       (write import . |.write|)
       (write-char import . |.write-char|)
       (write-with-shared-structure import . |.write-with-shared-structure|)
       (zero? import . |.zero?|)))))

