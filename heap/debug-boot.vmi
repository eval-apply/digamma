((push.const . |.list?|)
 (push.gloc.of list?)
 (subr.gloc.of set-top-level-value! 2 "./boot/first-load.scm" . 7171)
 (push.const . |.null?|)
 (push.gloc.of null?)
 (subr.gloc.of set-top-level-value! 2 "./boot/first-load.scm" . 8195)
 (push.const . |.pair?|)
 (push.gloc.of pair?)
 (subr.gloc.of set-top-level-value! 2 "./boot/first-load.scm" . 9219)
 (push.const . |.car|)
 (push.gloc.of car)
 (subr.gloc.of set-top-level-value! 2 "./boot/first-load.scm" . 10243)
 (push.const . |.cdr|)
 (push.gloc.of cdr)
 (subr.gloc.of set-top-level-value! 2 "./boot/first-load.scm" . 11267)
 (push.const . |.caar|)
 (push.gloc.of caar)
 (subr.gloc.of set-top-level-value! 2 "./boot/first-load.scm" . 12291)
 (push.const . |.cadr|)
 (push.gloc.of cadr)
 (subr.gloc.of set-top-level-value! 2 "./boot/first-load.scm" . 13315)
 (push.const . |.cdar|)
 (push.gloc.of cdar)
 (subr.gloc.of set-top-level-value! 2 "./boot/first-load.scm" . 14339)
 (push.const . |.cddr|)
 (push.gloc.of cddr)
 (subr.gloc.of set-top-level-value! 2 "./boot/first-load.scm" . 15363)
 (push.const . |.caaar|)
 (push.gloc.of caaar)
 (subr.gloc.of set-top-level-value! 2 "./boot/first-load.scm" . 16387)
 (push.const . |.caadr|)
 (push.gloc.of caadr)
 (subr.gloc.of set-top-level-value! 2 "./boot/first-load.scm" . 17411)
 (push.const . |.cadar|)
 (push.gloc.of cadar)
 (subr.gloc.of set-top-level-value! 2 "./boot/first-load.scm" . 18435)
 (push.const . |.caddr|)
 (push.gloc.of caddr)
 (subr.gloc.of set-top-level-value! 2 "./boot/first-load.scm" . 19459)
 (push.const . |.cdaar|)
 (push.gloc.of cdaar)
 (subr.gloc.of set-top-level-value! 2 "./boot/first-load.scm" . 20483)
 (push.const . |.cdadr|)
 (push.gloc.of cdadr)
 (subr.gloc.of set-top-level-value! 2 "./boot/first-load.scm" . 21507)
 (push.const . |.cddar|)
 (push.gloc.of cddar)
 (subr.gloc.of set-top-level-value! 2 "./boot/first-load.scm" . 22531)
 (push.const . |.cdddr|)
 (push.gloc.of cdddr)
 (subr.gloc.of set-top-level-value! 2 "./boot/first-load.scm" . 23555)
 (push.const . |.cdddar|)
 (push.gloc.of cdddar)
 (subr.gloc.of set-top-level-value! 2 "./boot/first-load.scm" . 24579)
 (push.const . |.caddar|)
 (push.gloc.of caddar)
 (subr.gloc.of set-top-level-value! 2 "./boot/first-load.scm" . 25603)
 (push.const . |.cddadr|)
 (push.gloc.of cddadr)
 (subr.gloc.of set-top-level-value! 2 "./boot/first-load.scm" . 26627)
 (push.const . |.cadadr|)
 (push.gloc.of cadadr)
 (subr.gloc.of set-top-level-value! 2 "./boot/first-load.scm" . 27651)
 (push.const . |.caaadr|)
 (push.gloc.of caaadr)
 (subr.gloc.of set-top-level-value! 2 "./boot/first-load.scm" . 28675)
 (push.const . |.cddddr|)
 (push.gloc.of cddddr)
 (subr.gloc.of set-top-level-value! 2 "./boot/first-load.scm" . 29699)
 (push.const . |.cadddr|)
 (push.gloc.of cadddr)
 (subr.gloc.of set-top-level-value! 2 "./boot/first-load.scm" . 30723)
 (push.const . |.cdaadr|)
 (push.gloc.of cdaadr)
 (subr.gloc.of set-top-level-value! 2 "./boot/first-load.scm" . 31747)
 (push.const . |.cdaddr|)
 (push.gloc.of cdaddr)
 (subr.gloc.of set-top-level-value! 2 "./boot/first-load.scm" . 32771)
 (push.const . |.caaddr|)
 (push.gloc.of caaddr)
 (subr.gloc.of set-top-level-value! 2 "./boot/first-load.scm" . 33795)
 (push.const . |.list|)
 (push.gloc.of list)
 (subr.gloc.of set-top-level-value! 2 "./boot/first-load.scm" . 34819)
 (push.const . |.cons*|)
 (push.gloc.of cons*)
 (subr.gloc.of set-top-level-value! 2 "./boot/first-load.scm" . 35843)
 (push.const . |.memq|)
 (push.gloc.of memq)
 (subr.gloc.of set-top-level-value! 2 "./boot/first-load.scm" . 36867)
 (push.const . |.append|)
 (push.gloc.of append)
 (subr.gloc.of set-top-level-value! 2 "./boot/first-load.scm" . 37891)
 (push.const . |.apply|)
 (push.gloc.of apply)
 (ret.subr.gloc.of set-top-level-value! "./boot/first-load.scm" . 38915))

;
((close
   (0 1 . max)
   (iloc.0 . 0)
   (if.null?
     (push.const . max)
     (push.const . "required at least 1, but 0 argument given")
     (apply.gloc.of assertion-violation "./boot/r6rs-aux.scm" . 8204))
   (push.car.iloc (0 . 0) "./boot/r6rs-aux.scm" . 9242)
   (subr.gloc.of real-valued? 1 "./boot/r6rs-aux.scm" . 9228)
   (if.true
     (extend.enclose+
       (3 0 . loop)
       (iloc.0 . 2)
       (if.null?
         (iloc.0 . 1)
         (if.true (push.iloc.0 . 0) (ret.subr.gloc.of inexact "./boot/r6rs-aux.scm" . 12316))
         (ret.iloc 0 . 0))
       (push.car.iloc (0 . 2) "./boot/r6rs-aux.scm" . 13347)
       (subr.gloc.of real-valued? 1 "./boot/r6rs-aux.scm" . 13333)
       (if.true
         (call
           (car.iloc (0 . 2) "./boot/r6rs-aux.scm" . 14370)
           (>.iloc (0 . 0) "./boot/r6rs-aux.scm" . 14367)
           (if.true (push.iloc.0 . 2) (ret.subr.gloc.of car "./boot/r6rs-aux.scm" . 14387))
           (ret.iloc 0 . 0))
         (push)
         (call
           (iloc.0 . 1)
           (if.true.ret)
           (push.car.iloc (0 . 2) "./boot/r6rs-aux.scm" . 15404)
           (ret.subr.gloc.of inexact? "./boot/r6rs-aux.scm" . 15394))
         (push)
         (push.cdr.iloc (0 . 2) "./boot/r6rs-aux.scm" . 16411)
         (apply.iloc+ (1 . 0) "./boot/r6rs-aux.scm" . 14357))
       (push.const . max)
       (push.const . "expected real, but got ~s")
       (push.car.iloc (0 . 2) "./boot/r6rs-aux.scm" . 18515)
       (push.subr.gloc.of format 2 "./boot/r6rs-aux.scm" . 18479)
       (push.iloc 2 . 0)
       (apply.gloc.of assertion-violation "./boot/r6rs-aux.scm" . 18453))
     (push.car.iloc (1 . 0) "./boot/r6rs-aux.scm" . 10270)
     (push.car.iloc (1 . 0) "./boot/r6rs-aux.scm" . 10296)
     (push.subr.gloc.of inexact? 1 "./boot/r6rs-aux.scm" . 10286)
     (push.cdr.iloc (1 . 0) "./boot/r6rs-aux.scm" . 10314)
     (apply.iloc+ (0 . 0) "./boot/r6rs-aux.scm" . 11278))
   (push.const . max)
   (push.const . "expected real, but got ~s")
   (push.car.iloc (0 . 0) "./boot/r6rs-aux.scm" . 20554)
   (push.subr.gloc.of format 2 "./boot/r6rs-aux.scm" . 20518)
   (push.iloc.0 . 0)
   (apply.gloc.of assertion-violation "./boot/r6rs-aux.scm" . 20492))
 (set.gloc.of max)
 (ret.const.unspec))
((close
   (0 1 . min)
   (iloc.0 . 0)
   (if.null?
     (push.const . min)
     (push.const . "required at least 1, but 0 argument given")
     (apply.gloc.of assertion-violation "./boot/r6rs-aux.scm" . 25612))
   (push.car.iloc (0 . 0) "./boot/r6rs-aux.scm" . 26650)
   (subr.gloc.of real-valued? 1 "./boot/r6rs-aux.scm" . 26636)
   (if.true
     (extend.enclose+
       (3 0 . loop)
       (iloc.0 . 2)
       (if.null?
         (iloc.0 . 1)
         (if.true (push.iloc.0 . 0) (ret.subr.gloc.of inexact "./boot/r6rs-aux.scm" . 29724))
         (ret.iloc 0 . 0))
       (push.car.iloc (0 . 2) "./boot/r6rs-aux.scm" . 30755)
       (subr.gloc.of real-valued? 1 "./boot/r6rs-aux.scm" . 30741)
       (if.true
         (call
           (car.iloc (0 . 2) "./boot/r6rs-aux.scm" . 31778)
           (<.iloc (0 . 0) "./boot/r6rs-aux.scm" . 31775)
           (if.true (push.iloc.0 . 2) (ret.subr.gloc.of car "./boot/r6rs-aux.scm" . 31795))
           (ret.iloc 0 . 0))
         (push)
         (call
           (iloc.0 . 1)
           (if.true.ret)
           (push.car.iloc (0 . 2) "./boot/r6rs-aux.scm" . 32812)
           (ret.subr.gloc.of inexact? "./boot/r6rs-aux.scm" . 32802))
         (push)
         (push.cdr.iloc (0 . 2) "./boot/r6rs-aux.scm" . 33819)
         (apply.iloc+ (1 . 0) "./boot/r6rs-aux.scm" . 31765))
       (push.const . min)
       (push.const . "expected real, but got ~s")
       (push.car.iloc (0 . 2) "./boot/r6rs-aux.scm" . 35923)
       (push.subr.gloc.of format 2 "./boot/r6rs-aux.scm" . 35887)
       (push.iloc 2 . 0)
       (apply.gloc.of assertion-violation "./boot/r6rs-aux.scm" . 35861))
     (push.car.iloc (1 . 0) "./boot/r6rs-aux.scm" . 27678)
     (push.car.iloc (1 . 0) "./boot/r6rs-aux.scm" . 27704)
     (push.subr.gloc.of inexact? 1 "./boot/r6rs-aux.scm" . 27694)
     (push.cdr.iloc (1 . 0) "./boot/r6rs-aux.scm" . 27722)
     (apply.iloc+ (0 . 0) "./boot/r6rs-aux.scm" . 28686))
   (push.const . min)
   (push.const . "expected real, but got ~s")
   (push.car.iloc (0 . 0) "./boot/r6rs-aux.scm" . 37962)
   (push.subr.gloc.of format 2 "./boot/r6rs-aux.scm" . 37926)
   (push.iloc.0 . 0)
   (apply.gloc.of assertion-violation "./boot/r6rs-aux.scm" . 37900))
 (set.gloc.of min)
 (ret.const.unspec))
((close
   (2 0 . gcd2)
   (=n.iloc (0 . 1) 0 "./boot/r6rs-aux.scm" . 41993)
   (if.true
     (call
       (push.iloc.0 . 1)
       (subr.gloc.of inexact? 1 "./boot/r6rs-aux.scm" . 43026)
       (if.true (push.iloc.0 . 0) (ret.subr.gloc.of inexact "./boot/r6rs-aux.scm" . 43039))
       (ret.iloc 0 . 0))
     (push)
     (ret.subr.gloc.of abs "./boot/r6rs-aux.scm" . 43017))
   (touch.gloc.of gcd2)
   (push.iloc.0 . 1)
   (push.iloc.0 . 0)
   (push.iloc.0 . 1)
   (push.subr.gloc.of remainder 2 "./boot/r6rs-aux.scm" . 44049)
   (apply.gloc.of gcd2 "./boot/r6rs-aux.scm" . 44041))
 (set.gloc.of gcd2)
 (ret.const.unspec))
((close
   (1 0 . loop)
   (push.iloc.0 . 0)
   (push.subr.gloc.of length 1 "./boot/r6rs-aux.scm" . 53261)
   (extend . 1)
   (push.iloc.0 . 0)
   (const . 2)
   (if.eq?
     (touch.gloc.of gcd2)
     (push.car.iloc (1 . 0) "./boot/r6rs-aux.scm" . 54292)
     (push.cadr.iloc (1 . 0) "./boot/r6rs-aux.scm" . 54302)
     (apply.gloc.of gcd2 "./boot/r6rs-aux.scm" . 54286))
   (push.iloc.0 . 0)
   (const . 1)
   (if.eq?
     (push.car.iloc (1 . 0) "./boot/r6rs-aux.scm" . 55315)
     (ret.subr.gloc.of abs "./boot/r6rs-aux.scm" . 55310))
   (push.iloc.0 . 0)
   (const . 0)
   (if.eq?.ret.const . 0)
   (touch.gloc.of |loop`50*|)
   (call
     (touch.gloc.of gcd2)
     (push.car.iloc (1 . 0) "./boot/r6rs-aux.scm" . 57377)
     (push.cadr.iloc (1 . 0) "./boot/r6rs-aux.scm" . 57387)
     (apply.gloc.of gcd2 "./boot/r6rs-aux.scm" . 57371))
   (push)
   (cddr.iloc (1 . 0) "./boot/r6rs-aux.scm" . 57399)
   (push.cons)
   (apply.gloc.of |loop`50*| "./boot/r6rs-aux.scm" . 57359))
 (set.gloc.of |loop`50*|)
 (close
   (0 1 . gcd)
   (call
     (push.close
       (1 0)
       (push.iloc.0 . 0)
       (subr.gloc.of integer-valued? 1 "./boot/r6rs-aux.scm" . 49173)
       (if.true.ret)
       (push.const . gcd)
       (push.const . "expected integer, but got ~s")
       (push.iloc.0 . 0)
       (push.subr.gloc.of format 2 "./boot/r6rs-aux.scm" . 50223)
       (push.iloc.1 . 0)
       (apply.gloc.of assertion-violation "./boot/r6rs-aux.scm" . 50197))
     (push.iloc.0 . 0)
     (apply.gloc.of for-each "./boot/r6rs-aux.scm" . 48133))
   (touch.gloc.of |loop`50*|)
   (push.iloc.0 . 0)
   (apply.gloc.of |loop`50*| "./boot/r6rs-aux.scm" . 53255))
 (set.gloc.of gcd)
 (ret.const.unspec))
((close
   (1 0 . loop)
   (push.iloc.0 . 0)
   (push.subr.gloc.of length 1 "./boot/r6rs-aux.scm" . 73741)
   (extend . 1)
   (push.iloc.0 . 0)
   (const . 2)
   (if.eq?
     (touch.gloc.of |lcm2`57*|)
     (push.car.iloc (1 . 0) "./boot/r6rs-aux.scm" . 74772)
     (push.cadr.iloc (1 . 0) "./boot/r6rs-aux.scm" . 74782)
     (apply.gloc.of |lcm2`57*| "./boot/r6rs-aux.scm" . 74766))
   (push.iloc.0 . 0)
   (const . 1)
   (if.eq?
     (push.car.iloc (1 . 0) "./boot/r6rs-aux.scm" . 75795)
     (ret.subr.gloc.of abs "./boot/r6rs-aux.scm" . 75790))
   (push.iloc.0 . 0)
   (const . 0)
   (if.eq?.ret.const . 1)
   (touch.gloc.of |loop`64*|)
   (call
     (touch.gloc.of |lcm2`57*|)
     (push.car.iloc (1 . 0) "./boot/r6rs-aux.scm" . 77857)
     (push.cadr.iloc (1 . 0) "./boot/r6rs-aux.scm" . 77867)
     (apply.gloc.of |lcm2`57*| "./boot/r6rs-aux.scm" . 77851))
   (push)
   (cddr.iloc (1 . 0) "./boot/r6rs-aux.scm" . 77879)
   (push.cons)
   (apply.gloc.of |loop`64*| "./boot/r6rs-aux.scm" . 77839))
 (set.gloc.of |loop`64*|)
 (close
   (2 0 . lcm2)
   (call
     (=n.iloc (0 . 0) 0 "./boot/r6rs-aux.scm" . 64529)
     (if.true.ret)
     (push.iloc.0 . 1)
     (push.const . 0)
     (ret.subr.gloc.of = "./boot/r6rs-aux.scm" . 64537))
   (if.true
     (call
       (push.iloc.0 . 0)
       (subr.gloc.of exact? 1 "./boot/r6rs-aux.scm" . 65558)
       (if.false.ret)
       (push.iloc.0 . 1)
       (ret.subr.gloc.of exact? "./boot/r6rs-aux.scm" . 65569))
     (if.true.ret.const . 0)
     (ret.const . 0.0))
   (push.iloc.0 . 0)
   (call
     (touch.gloc.of gcd2)
     (push.iloc.0 . 0)
     (push.iloc.0 . 1)
     (apply.gloc.of gcd2 "./boot/r6rs-aux.scm" . 66593))
   (push)
   (push.subr.gloc.of quotient 2 "./boot/r6rs-aux.scm" . 66581)
   (push.iloc.0 . 1)
   (push.subr.gloc.of * 2 "./boot/r6rs-aux.scm" . 66578)
   (ret.subr.gloc.of abs "./boot/r6rs-aux.scm" . 66573))
 (set.gloc.of |lcm2`57*|)
 (close
   (0 1 . lcm)
   (call
     (push.close
       (1 0)
       (push.iloc.0 . 0)
       (subr.gloc.of integer-valued? 1 "./boot/r6rs-aux.scm" . 69653)
       (if.true.ret)
       (push.const . lcm)
       (push.const . "expected integer, but got ~s")
       (push.iloc.0 . 0)
       (push.subr.gloc.of format 2 "./boot/r6rs-aux.scm" . 70703)
       (push.iloc.1 . 0)
       (apply.gloc.of assertion-violation "./boot/r6rs-aux.scm" . 70677))
     (push.iloc.0 . 0)
     (apply.gloc.of for-each "./boot/r6rs-aux.scm" . 68613))
   (touch.gloc.of |loop`64*|)
   (push.iloc.0 . 0)
   (apply.gloc.of |loop`64*| "./boot/r6rs-aux.scm" . 73735))
 (set.gloc.of lcm)
 (ret.const.unspec))
((close
   (2 0 . loop)
   (iloc.0 . 0)
   (=.iloc (0 . 1) "./boot/r6rs-aux.scm" . 93207)
   (if.true (ret.iloc 0 . 0))
   (push.iloc.0 . 0)
   (push.subr.gloc.of ceiling 1 "./boot/r6rs-aux.scm" . 95264)
   (extend . 1)
   (iloc.0 . 0)
   (<.iloc (1 . 1) "./boot/r6rs-aux.scm" . 96288)
   (if.true (ret.iloc 0 . 0))
   (push.n+.iloc (0 . 0) -1 "./boot/r6rs-aux.scm" . 98345)
   (extend . 1)
   (push.iloc.0 . 0)
   (push.const . 1)
   (call
     (touch.gloc.of |loop`76*|)
     (push.const . 1)
     (push.iloc 2 . 1)
     (push.iloc.0 . 0)
     (push.subr.gloc.of - 2 "./boot/r6rs-aux.scm" . 99383)
     (push.subr.gloc.of / 2 "./boot/r6rs-aux.scm" . 99378)
     (push.const . 1)
     (push.iloc 2 . 0)
     (push.iloc.0 . 0)
     (push.subr.gloc.of - 2 "./boot/r6rs-aux.scm" . 99399)
     (push.subr.gloc.of / 2 "./boot/r6rs-aux.scm" . 99394)
     (apply.gloc.of |loop`76*| "./boot/r6rs-aux.scm" . 99372))
   (push)
   (push.subr.gloc.of / 2 "./boot/r6rs-aux.scm" . 99367)
   (ret.subr.gloc.of + "./boot/r6rs-aux.scm" . 99362))
 (set.gloc.of |loop`76*|)
 (close
   (2 0 . rationalize)
   (push.iloc.0 . 0)
   (subr.gloc.of real? 1 "./boot/r6rs-aux.scm" . 81929)
   (if.false.call
     (push.const . rationalize)
     (push.const . "expected real, but got ~s as argument 1")
     (push.iloc.0 . 0)
     (push.subr.gloc.of format 2 "./boot/r6rs-aux.scm" . 81973)
     (push.iloc.0 . 0)
     (push.iloc.0 . 1)
     (push.subr.gloc.of list 2 "./boot/r6rs-aux.scm" . 82026)
     (apply.gloc.of assertion-violation "./boot/r6rs-aux.scm" . 81939))
   (push.iloc.0 . 1)
   (subr.gloc.of real? 1 "./boot/r6rs-aux.scm" . 82953)
   (if.false.call
     (push.const . rationalize)
     (push.const . "expected real, but got ~s as argument 2")
     (push.iloc.0 . 1)
     (push.subr.gloc.of format 2 "./boot/r6rs-aux.scm" . 82997)
     (push.iloc.0 . 0)
     (push.iloc.0 . 1)
     (push.subr.gloc.of list 2 "./boot/r6rs-aux.scm" . 83050)
     (apply.gloc.of assertion-violation "./boot/r6rs-aux.scm" . 82963))
   (push.iloc.0 . 1)
   (subr.gloc.of infinite? 1 "./boot/r6rs-aux.scm" . 83980)
   (if.true
     (push.iloc.0 . 0)
     (subr.gloc.of infinite? 1 "./boot/r6rs-aux.scm" . 85008)
     (if.true.ret.const . +nan.0)
     (ret.const . 0.0))
   (=n.iloc (0 . 0) 0 "./boot/r6rs-aux.scm" . 86028)
   (if.true (ret.iloc 0 . 0))
   (iloc.0 . 0)
   (=.iloc (0 . 1) "./boot/r6rs-aux.scm" . 87052)
   (if.true (push.iloc.0 . 0) (push.iloc.0 . 1) (ret.subr.gloc.of - "./boot/r6rs-aux.scm" . 87060))
   (push.iloc.0 . 0)
   (subr.gloc.of negative? 1 "./boot/r6rs-aux.scm" . 88076)
   (if.true
     (call
       (push.iloc.0 . 0)
       (push.subr.gloc.of - 1 "./boot/r6rs-aux.scm" . 89116)
       (push.iloc.0 . 1)
       (apply.gloc.of rationalize "./boot/r6rs-aux.scm" . 89103))
     (push)
     (ret.subr.gloc.of - "./boot/r6rs-aux.scm" . 89100))
   (push.iloc.0 . 1)
   (push.subr.gloc.of abs 1 "./boot/r6rs-aux.scm" . 91157)
   (extend . 1)
   (touch.gloc.of |loop`76*|)
   (push.iloc.1 . 0)
   (push.iloc.0 . 0)
   (push.subr.gloc.of - 2 "./boot/r6rs-aux.scm" . 92193)
   (push.iloc.1 . 0)
   (push.iloc.0 . 0)
   (push.subr.gloc.of + 2 "./boot/r6rs-aux.scm" . 92207)
   (apply.gloc.of |loop`76*| "./boot/r6rs-aux.scm" . 93200))
 (set.gloc.of rationalize)
 (ret.const.unspec))
((close
   (1 0 . string->list)
   (push.iloc.0 . 0)
   (push.subr.gloc.of make-string-input-port 1 "./boot/r6rs-aux.scm" . 103441)
   (extend . 1)
   (extend.enclose+
     (1 0 . loop)
     (push.iloc 2 . 0)
     (push.subr.gloc.of get-char 1 "./boot/r6rs-aux.scm" . 105491)
     (extend . 1)
     (push.iloc.0 . 0)
     (subr.gloc.of eof-object? 1 "./boot/r6rs-aux.scm" . 106511)
     (if.true (push.iloc.1 . 0) (ret.subr.gloc.of reverse "./boot/r6rs-aux.scm" . 107535))
     (push.iloc.0 . 0)
     (iloc.1 . 0)
     (push.cons)
     (apply.iloc+ (2 . 0) "./boot/r6rs-aux.scm" . 108559))
   (push.const)
   (apply.iloc+ (0 . 0) "./boot/r6rs-aux.scm" . 105481))
 (set.gloc.of string->list)
 (ret.const.unspec))
((close
   (2 0 . map-1)
   (iloc.0 . 1)
   (if.null?.ret.const)
   (call
     (push.car.iloc (0 . 1) "./boot/r6rs-aux.scm" . 117788)
     (apply.iloc (0 . 0) "./boot/r6rs-aux.scm" . 117782))
   (push)
   (call
     (touch.gloc.of |map-1`97*|)
     (push.iloc.0 . 0)
     (push.cdr.iloc (0 . 1) "./boot/r6rs-aux.scm" . 118818)
     (apply.gloc.of |map-1`97*| "./boot/r6rs-aux.scm" . 118806))
   (ret.cons "./boot/r6rs-aux.scm" . 117776))
 (set.gloc.of |map-1`97*|)
 (close
   (2 0 . map-n)
   (iloc.0 . 1)
   (if.null?.ret.const)
   (call
     (push.iloc.0 . 0)
     (push.car.iloc (0 . 1) "./boot/r6rs-aux.scm" . 124962)
     (apply.gloc.of apply "./boot/r6rs-aux.scm" . 124950))
   (push)
   (call
     (touch.gloc.of |map-n`97*|)
     (push.iloc.0 . 0)
     (push.cdr.iloc (0 . 1) "./boot/r6rs-aux.scm" . 125986)
     (apply.gloc.of |map-n`97*| "./boot/r6rs-aux.scm" . 125974))
   (ret.cons "./boot/r6rs-aux.scm" . 124944))
 (set.gloc.of |map-n`97*|)
 (close
   (2 1 . map)
   (iloc.0 . 2)
   (if.null?
     (push.iloc.0 . 1)
     (subr.gloc.of list? 1 "./boot/r6rs-aux.scm" . 129037)
     (if.true
       (touch.gloc.of |map-1`97*|)
       (push.iloc.0 . 0)
       (push.iloc.0 . 1)
       (apply.gloc.of |map-1`97*| "./boot/r6rs-aux.scm" . 130061))
     (push.const . map)
     (call
       (touch.gloc.of wrong-type-argument-message)
       (push.const . "proper list")
       (push.iloc.0 . 1)
       (push.const . 2)
       (apply.gloc.of wrong-type-argument-message "./boot/r6rs-aux.scm" . 131111))
     (push)
     (push.iloc.0 . 0)
     (push.iloc.0 . 1)
     (push.iloc.0 . 2)
     (push.subr.gloc.of cons* 3 "./boot/r6rs-aux.scm" . 131162)
     (apply.gloc.of assertion-violation "./boot/r6rs-aux.scm" . 131085))
   (call
     (push.gloc.of list-transpose+)
     (push.iloc.0 . 1)
     (push.iloc.0 . 2)
     (apply.gloc.of apply "./boot/r6rs-aux.scm" . 132112))
   (push)
   (extend . 1)
   (iloc.0 . 0)
   (if.true
     (touch.gloc.of |map-n`97*|)
     (push.iloc.1 . 0)
     (push.iloc.0 . 0)
     (apply.gloc.of |map-n`97*| "./boot/r6rs-aux.scm" . 133153))
   (push.const . map)
   (push.const . "expected same length proper lists")
   (push.iloc.1 . 0)
   (push.iloc.1 . 1)
   (push.iloc.1 . 2)
   (push.subr.gloc.of cons* 3 "./boot/r6rs-aux.scm" . 135246)
   (apply.gloc.of assertion-violation "./boot/r6rs-aux.scm" . 135184))
 (set.gloc.of map)
 (ret.const.unspec))
((close
   (2 0 . for-each-1)
   (iloc.0 . 1)
   (if.null? (ret.const.unspec))
   (call
     (push.car.iloc (0 . 1) "./boot/r6rs-aux.scm" . 143398)
     (apply.iloc (0 . 0) "./boot/r6rs-aux.scm" . 143392))
   (touch.gloc.of |for-each-1`107*|)
   (push.iloc.0 . 0)
   (push.cdr.iloc (0 . 1) "./boot/r6rs-aux.scm" . 144433)
   (apply.gloc.of |for-each-1`107*| "./boot/r6rs-aux.scm" . 144416))
 (set.gloc.of |for-each-1`107*|)
 (close
   (2 0 . for-each-n)
   (iloc.0 . 1)
   (if.null? (ret.const.unspec))
   (call
     (push.iloc.0 . 0)
     (push.car.iloc (0 . 1) "./boot/r6rs-aux.scm" . 148525)
     (apply.gloc.of apply "./boot/r6rs-aux.scm" . 148513))
   (touch.gloc.of |for-each-n`107*|)
   (push.iloc.0 . 0)
   (push.cdr.iloc (0 . 1) "./boot/r6rs-aux.scm" . 149554)
   (apply.gloc.of |for-each-n`107*| "./boot/r6rs-aux.scm" . 149537))
 (set.gloc.of |for-each-n`107*|)
 (close
   (2 1 . for-each)
   (iloc.0 . 2)
   (if.null?
     (push.iloc.0 . 1)
     (subr.gloc.of list? 1 "./boot/r6rs-aux.scm" . 151565)
     (if.true
       (touch.gloc.of |for-each-1`107*|)
       (push.iloc.0 . 0)
       (push.iloc.0 . 1)
       (apply.gloc.of |for-each-1`107*| "./boot/r6rs-aux.scm" . 152589))
     (push.const . for-each)
     (call
       (touch.gloc.of wrong-type-argument-message)
       (push.const . "proper list")
       (push.iloc.0 . 1)
       (push.const . 2)
       (apply.gloc.of wrong-type-argument-message "./boot/r6rs-aux.scm" . 153644))
     (push)
     (push.iloc.0 . 0)
     (push.iloc.0 . 1)
     (push.iloc.0 . 2)
     (push.subr.gloc.of cons* 3 "./boot/r6rs-aux.scm" . 153695)
     (apply.gloc.of assertion-violation "./boot/r6rs-aux.scm" . 153613))
   (call
     (push.gloc.of list-transpose+)
     (push.iloc.0 . 1)
     (push.iloc.0 . 2)
     (apply.gloc.of apply "./boot/r6rs-aux.scm" . 154640))
   (push)
   (extend . 1)
   (iloc.0 . 0)
   (if.true
     (touch.gloc.of |for-each-n`107*|)
     (push.iloc.1 . 0)
     (push.iloc.0 . 0)
     (apply.gloc.of |for-each-n`107*| "./boot/r6rs-aux.scm" . 155681))
   (push.const . for-each)
   (push.const . "expected same length proper lists")
   (push.iloc.1 . 0)
   (push.iloc.1 . 1)
   (push.iloc.1 . 2)
   (push.subr.gloc.of cons* 3 "./boot/r6rs-aux.scm" . 157779)
   (apply.gloc.of assertion-violation "./boot/r6rs-aux.scm" . 157712))
 (set.gloc.of for-each)
 (ret.const.unspec))
((close
   (2 1 . vector-map)
   (call
     (push.gloc.of map)
     (push.iloc.0 . 0)
     (push.iloc.0 . 1)
     (push.subr.gloc.of vector->list 1 "./boot/r6rs-aux.scm" . 162838)
     (call
       (push.gloc.of vector->list)
       (push.iloc.0 . 2)
       (apply.gloc.of map "./boot/r6rs-aux.scm" . 163853))
     (push)
     (apply.gloc.of apply "./boot/r6rs-aux.scm" . 162822))
   (push)
   (ret.subr.gloc.of list->vector "./boot/r6rs-aux.scm" . 161797))
 (set.gloc.of vector-map)
 (ret.const.unspec))
((close
   (2 1 . vector-for-each)
   (push.gloc.of for-each)
   (push.iloc.0 . 0)
   (push.iloc.0 . 1)
   (push.subr.gloc.of vector->list 1 "./boot/r6rs-aux.scm" . 167962)
   (call
     (push.gloc.of vector->list)
     (push.iloc.0 . 2)
     (apply.gloc.of map "./boot/r6rs-aux.scm" . 168972))
   (push)
   (apply.gloc.of apply "./boot/r6rs-aux.scm" . 167941))
 (set.gloc.of vector-for-each)
 (ret.const.unspec))
((close
   (2 1 . string-for-each)
   (push.gloc.of for-each)
   (push.iloc.0 . 0)
   (call (push.iloc.0 . 1) (apply.gloc.of string->list "./boot/r6rs-aux.scm" . 173082))
   (push)
   (call
     (push.gloc.of string->list)
     (push.iloc.0 . 2)
     (apply.gloc.of map "./boot/r6rs-aux.scm" . 174092))
   (push)
   (apply.gloc.of apply "./boot/r6rs-aux.scm" . 173061))
 (set.gloc.of string-for-each)
 (ret.const.unspec))
((close
   (2 0 . call-with-values)
   (touch.gloc.of apply-values)
   (push.iloc.0 . 1)
   (call (apply.iloc (0 . 0) "./boot/r6rs-aux.scm" . 178204))
   (push)
   (apply.gloc.of apply-values "./boot/r6rs-aux.scm" . 178181))
 (set.gloc.of call-with-values)
 (ret.const.unspec))
((close
   (2 0 . call-with-port)
   (push.close (0 0) (push.iloc.1 . 0) (apply.iloc (1 . 1) "./boot/r6rs-aux.scm" . 183313))
   (push.close
     (0 1)
     (push.iloc.1 . 0)
     (subr.gloc.of close-port 1 "./boot/r6rs-aux.scm" . 185352)
     (push.gloc.of values)
     (push.iloc.0 . 0)
     (apply.gloc.of apply "./boot/r6rs-aux.scm" . 186376))
   (apply.gloc.of call-with-values "./boot/r6rs-aux.scm" . 182277))
 (set.gloc.of call-with-port)
 (ret.const.unspec))
((close
   (2 0 . mod)
   (push.iloc.0 . 0)
   (push.iloc.0 . 0)
   (push.iloc.0 . 1)
   (push.subr.gloc.of div 2 "./boot/r6rs-aux.scm" . 190477)
   (push.iloc.0 . 1)
   (push.subr.gloc.of * 2 "./boot/r6rs-aux.scm" . 190474)
   (ret.subr.gloc.of - "./boot/r6rs-aux.scm" . 190469))
 (set.gloc.of mod)
 (ret.const.unspec))
((close
   (2 0 . div-and-mod)
   (push.iloc.0 . 0)
   (push.iloc.0 . 1)
   (push.subr.gloc.of div 2 "./boot/r6rs-aux.scm" . 194574)
   (extend . 1)
   (push.iloc.0 . 0)
   (push.iloc.1 . 0)
   (push.iloc.0 . 0)
   (push.iloc.1 . 1)
   (push.subr.gloc.of * 2 "./boot/r6rs-aux.scm" . 195606)
   (push.subr.gloc.of - 2 "./boot/r6rs-aux.scm" . 195601)
   (ret.subr.gloc.of values "./boot/r6rs-aux.scm" . 195591))
 (set.gloc.of div-and-mod)
 (ret.const.unspec))
((close
   (2 0 . mod0)
   (push.iloc.0 . 0)
   (push.iloc.0 . 0)
   (push.iloc.0 . 1)
   (push.subr.gloc.of div0 2 "./boot/r6rs-aux.scm" . 199693)
   (push.iloc.0 . 1)
   (push.subr.gloc.of * 2 "./boot/r6rs-aux.scm" . 199690)
   (ret.subr.gloc.of - "./boot/r6rs-aux.scm" . 199685))
 (set.gloc.of mod0)
 (ret.const.unspec))
((close
   (2 0 . div0-and-mod0)
   (push.iloc.0 . 0)
   (push.iloc.0 . 1)
   (push.subr.gloc.of div0 2 "./boot/r6rs-aux.scm" . 203791)
   (extend . 1)
   (push.iloc.0 . 0)
   (push.iloc.1 . 0)
   (push.iloc.0 . 0)
   (push.iloc.1 . 1)
   (push.subr.gloc.of * 2 "./boot/r6rs-aux.scm" . 204823)
   (push.subr.gloc.of - 2 "./boot/r6rs-aux.scm" . 204818)
   (ret.subr.gloc.of values "./boot/r6rs-aux.scm" . 204807))
 (set.gloc.of div0-and-mod0)
 (ret.const.unspec))

;
((close
   (1 0 . top-level-unbound?)
   (push.iloc.0 . 0)
   (push.subr.gloc.of top-level-bound? 1 "./boot/common.scm" . 7178)
   (ret.subr.gloc.of not "./boot/common.scm" . 7173))
 (set.gloc.of top-level-unbound?)
 (ret.const.unspec))
((close
   (3 0 . acons)
   (push.iloc.0 . 0)
   (iloc.0 . 1)
   (push.cons)
   (iloc.0 . 2)
   (ret.cons "./boot/common.scm" . 11269))
 (set.gloc.of acons)
 (ret.const.unspec))
((close
   (2 0 . loop)
   (iloc.0 . 0)
   (if.pair?
     (touch.gloc.of |loop`150*|)
     (push.cdr.iloc (0 . 0) "./boot/common.scm" . 16413)
     (push.n+.iloc (0 . 1) 1 "./boot/common.scm" . 16423)
     (apply.gloc.of |loop`150*| "./boot/common.scm" . 16407))
   (ret.iloc 0 . 1))
 (set.gloc.of |loop`150*|)
 (close
   (1 0 . count-pair)
   (touch.gloc.of |loop`150*|)
   (push.iloc.0 . 0)
   (push.const . 0)
   (apply.gloc.of |loop`150*| "./boot/common.scm" . 16391))
 (set.gloc.of count-pair)
 (ret.const.unspec))
((close
   (2 0 . every1)
   (iloc.0 . 1)
   (if.null?.ret.const . #t)
   (extend.enclose+
     (2 0 . loop)
     (call (push.iloc.0 . 0) (apply.iloc (2 . 0) "./boot/common.scm" . 22544))
     (if.false.ret)
     (iloc.0 . 1)
     (if.null?.ret.const . #t)
     (push.car.iloc (0 . 1) "./boot/common.scm" . 24602)
     (push.cdr.iloc (0 . 1) "./boot/common.scm" . 24613)
     (apply.iloc+ (1 . 0) "./boot/common.scm" . 24596))
   (push.car.iloc (1 . 1) "./boot/common.scm" . 21530)
   (push.cdr.iloc (1 . 1) "./boot/common.scm" . 21547)
   (apply.iloc+ (0 . 0) "./boot/common.scm" . 22539))
 (set.gloc.of every1)
 (ret.const.unspec))
((close
   (3 0 . every2)
   (iloc.0 . 1)
   (if.null?.ret.const . #t)
   (iloc.0 . 2)
   (if.null?.ret.const . #t)
   (extend.enclose+
     (4 0 . loop)
     (call (push.iloc.0 . 0) (push.iloc.0 . 2) (apply.iloc (2 . 0) "./boot/common.scm" . 31760))
     (if.false.ret)
     (iloc.0 . 1)
     (if.null?.ret.const . #t)
     (iloc.0 . 3)
     (if.null?.ret.const . #t)
     (push.car.iloc (0 . 1) "./boot/common.scm" . 34842)
     (push.cdr.iloc (0 . 1) "./boot/common.scm" . 34854)
     (push.car.iloc (0 . 3) "./boot/common.scm" . 34866)
     (push.cdr.iloc (0 . 3) "./boot/common.scm" . 34878)
     (apply.iloc+ (1 . 0) "./boot/common.scm" . 34836))
   (push.car.iloc (1 . 1) "./boot/common.scm" . 30747)
   (push.cdr.iloc (1 . 1) "./boot/common.scm" . 30766)
   (push.car.iloc (1 . 2) "./boot/common.scm" . 30785)
   (push.cdr.iloc (1 . 2) "./boot/common.scm" . 30804)
   (apply.iloc+ (0 . 0) "./boot/common.scm" . 31755))
 (set.gloc.of every2)
 (ret.const.unspec))
((close
   (2 0 . any1)
   (iloc.0 . 1)
   (if.null?.ret.const . #f)
   (call
     (push.car.iloc (0 . 1) "./boot/common.scm" . 39956)
     (apply.iloc (0 . 0) "./boot/common.scm" . 39950))
   (if.true.ret)
   (touch.gloc.of any1)
   (push.iloc.0 . 0)
   (push.cdr.iloc (0 . 1) "./boot/common.scm" . 39978)
   (apply.gloc.of any1 "./boot/common.scm" . 39967))
 (set.gloc.of any1)
 (ret.const.unspec))
((close
   (3 0 . any2)
   (iloc.0 . 1)
   (if.null?.ret.const . #f)
   (iloc.0 . 2)
   (if.null?.ret.const . #f)
   (call
     (push.car.iloc (0 . 1) "./boot/common.scm" . 46100)
     (push.car.iloc (0 . 2) "./boot/common.scm" . 46111)
     (apply.iloc (0 . 0) "./boot/common.scm" . 46094))
   (if.true.ret)
   (touch.gloc.of any2)
   (push.iloc.0 . 0)
   (push.cdr.iloc (0 . 1) "./boot/common.scm" . 47129)
   (push.cdr.iloc (0 . 2) "./boot/common.scm" . 47140)
   (apply.gloc.of any2 "./boot/common.scm" . 47118))
 (set.gloc.of any2)
 (ret.const.unspec))
((close
   (2 0 . filter)
   (extend.enclose+
     (1 0 . loop)
     (iloc.0 . 0)
     (if.null?.ret.const)
     (call
       (push.car.iloc (0 . 0) "./boot/common.scm" . 53268)
       (apply.iloc (2 . 0) "./boot/common.scm" . 53262))
     (if.true
       (push.car.iloc (0 . 0) "./boot/common.scm" . 53285)
       (call
         (push.cdr.iloc (0 . 0) "./boot/common.scm" . 53301)
         (apply.iloc+ (1 . 0) "./boot/common.scm" . 53295))
       (ret.cons "./boot/common.scm" . 53279))
     (push.cdr.iloc (0 . 0) "./boot/common.scm" . 54297)
     (apply.iloc+ (1 . 0) "./boot/common.scm" . 54291))
   (push.iloc.1 . 1)
   (apply.iloc+ (0 . 0) "./boot/common.scm" . 52231))
 (set.gloc.of filter)
 (ret.const.unspec))
((close
   (2 0 . partition)
   (extend.enclose+
     (3 0 . loop)
     (iloc.0 . 0)
     (if.null?
       (push.iloc.0 . 1)
       (push.subr.gloc.of reverse 1 "./boot/common.scm" . 59426)
       (push.iloc.0 . 2)
       (push.subr.gloc.of reverse 1 "./boot/common.scm" . 59441)
       (ret.subr.gloc.of values "./boot/common.scm" . 59418))
     (call
       (push.car.iloc (0 . 0) "./boot/common.scm" . 60436)
       (apply.iloc (2 . 0) "./boot/common.scm" . 60430))
     (if.true
       (push.cdr.iloc (0 . 0) "./boot/common.scm" . 60453)
       (push.car.iloc (0 . 0) "./boot/common.scm" . 60469)
       (iloc.0 . 1)
       (push.cons)
       (push.iloc.0 . 2)
       (apply.iloc+ (1 . 0) "./boot/common.scm" . 60447))
     (push.cdr.iloc (0 . 0) "./boot/common.scm" . 61465)
     (push.iloc.0 . 1)
     (push.car.iloc (0 . 0) "./boot/common.scm" . 61486)
     (iloc.0 . 2)
     (push.cons)
     (apply.iloc+ (1 . 0) "./boot/common.scm" . 61459))
   (push.iloc.1 . 1)
   (push.const)
   (push.const)
   (apply.iloc+ (0 . 0) "./boot/common.scm" . 59399))
 (set.gloc.of partition)
 (ret.const.unspec))
((close
   (2 0 . loop)
   (iloc.0 . 0)
   (if.pair?
     (touch.gloc.of |loop`194*|)
     (push.cdr.iloc (0 . 0) "./boot/common.scm" . 67601)
     (push.n+.iloc (0 . 1) 1 "./boot/common.scm" . 67611)
     (apply.gloc.of |loop`194*| "./boot/common.scm" . 67595))
   (call (iloc.0 . 0) (if.not.null?.ret.const . #f) (ret.iloc 0 . 1))
   (if.true.ret)
   (ret.const . -1))
 (set.gloc.of |loop`194*|)
 (close
   (1 0 . safe-length)
   (touch.gloc.of |loop`194*|)
   (push.iloc.0 . 0)
   (push.const . 0)
   (apply.gloc.of |loop`194*| "./boot/common.scm" . 66567))
 (set.gloc.of safe-length)
 (ret.const.unspec))
((close
   (2 0 . split-at)
   (push.iloc.0 . 0)
   (push.iloc.0 . 1)
   (push.subr.gloc.of list-head 2 "./boot/common.scm" . 72717)
   (push.iloc.0 . 0)
   (push.iloc.0 . 1)
   (push.subr.gloc.of list-tail 2 "./boot/common.scm" . 72735)
   (ret.subr.gloc.of values "./boot/common.scm" . 72709))
 (set.gloc.of split-at)
 (ret.const.unspec))
((close
   (1 0 . loop)
   (iloc.0 . 0)
   (if.not.pair?.ret.const . #f)
   (car.iloc (0 . 0) "./boot/common.scm" . 79912)
   (if.not.symbol?.ret.const . #t)
   (push.car.iloc (0 . 0) "./boot/common.scm" . 80928)
   (push.cdr.iloc (0 . 0) "./boot/common.scm" . 80938)
   (subr.gloc.of memq 2 "./boot/common.scm" . 80922)
   (if.true.ret)
   (touch.gloc.of |loop`204*|)
   (push.cdr.iloc (0 . 0) "./boot/common.scm" . 81952)
   (apply.gloc.of |loop`204*| "./boot/common.scm" . 81946))
 (set.gloc.of |loop`204*|)
 (close
   (1 0 . unique-id-list?)
   (push.iloc.0 . 0)
   (subr.gloc.of list? 1 "./boot/common.scm" . 76810)
   (if.false.ret)
   (call
     (touch.gloc.of |loop`204*|)
     (push.iloc.0 . 0)
     (apply.gloc.of |loop`204*| "./boot/common.scm" . 78865))
   (push)
   (ret.subr.gloc.of not (not (|loop`204*| |lst`200*|))))
 (set.gloc.of unique-id-list?)
 (ret.const.unspec))
((close
   (1 0 . loop)
   (iloc.0 . 0)
   (if.not.pair?.ret.const . #f)
   (push.car.iloc (0 . 0) "./boot/common.scm" . 89115)
   (push.cdr.iloc (0 . 0) "./boot/common.scm" . 89125)
   (subr.gloc.of memq 2 "./boot/common.scm" . 89109)
   (if.true (push.iloc.0 . 0) (ret.subr.gloc.of car "./boot/common.scm" . 90133))
   (touch.gloc.of |loop`212*|)
   (push.cdr.iloc (0 . 0) "./boot/common.scm" . 91163)
   (apply.gloc.of |loop`212*| "./boot/common.scm" . 91157))
 (set.gloc.of |loop`212*|)
 (close
   (1 0 . find-duplicates)
   (push.iloc.0 . 0)
   (subr.gloc.of list? 1 "./boot/common.scm" . 86026)
   (if.false.ret)
   (touch.gloc.of |loop`212*|)
   (push.iloc.0 . 0)
   (apply.gloc.of |loop`212*| "./boot/common.scm" . 88076))
 (set.gloc.of find-duplicates)
 (ret.const.unspec))
((close
   (2 0 . split->list)
   (push.iloc.0 . 0)
   (push.subr.gloc.of make-string-input-port 1 "./boot/common.scm" . 98323)
   (subr.gloc.of make-string-output-port 0)
   (push)
   (extend . 2)
   (extend.enclose+
     (1 0 . loop1)
     (extend.enclose+
       (1 0 . loop2)
       (push.iloc.0 . 0)
       (subr.gloc.of eof-object? 1 "./boot/common.scm" . 102422)
       (if.true
         (push.iloc 4 . 1)
         (push.subr.gloc.of extract-accumulated-string 1 "./boot/common.scm" . 103455)
         (extend . 1)
         (push.iloc.0 . 0)
         (push.const . "")
         (subr.gloc.of string=? 2 "./boot/common.scm" . 104476)
         (if.true (push.iloc 3 . 0) (ret.subr.gloc.of reverse "./boot/common.scm" . 105500))
         (push.iloc.0 . 0)
         (iloc 3 . 0)
         (push.cons)
         (ret.subr.gloc.of reverse "./boot/common.scm" . 106524))
       (call (push.iloc.0 . 0) (apply.iloc (5 . 1) "./boot/common.scm" . 107542))
       (if.true
         (push.iloc 4 . 1)
         (push.subr.gloc.of extract-accumulated-string 1 "./boot/common.scm" . 108579)
         (iloc 2 . 0)
         (push.cons)
         (apply.iloc+ (3 . 0) "./boot/common.scm" . 108566))
       (push.iloc 4 . 1)
       (push.iloc.0 . 0)
       (subr.gloc.of put-char 2 "./boot/common.scm" . 110614)
       (push.iloc 4 . 0)
       (push.subr.gloc.of get-char 1 "./boot/common.scm" . 111645)
       (apply.iloc+ (1 . 0) "./boot/common.scm" . 111638))
     (push.iloc 3 . 0)
     (push.subr.gloc.of get-char 1 "./boot/common.scm" . 101404)
     (apply.iloc+ (0 . 0) "./boot/common.scm" . 102415))
   (push.const)
   (apply.iloc+ (0 . 0) "./boot/common.scm" . 101389))
 (set.gloc.of |split->list`217*|)
 (close
   (2 0 . string-split)
   (push.iloc.0 . 1)
   (subr.gloc.of char? 1 "./boot/common.scm" . 113676)
   (if.true
     (touch.gloc.of |split->list`217*|)
     (push.iloc.0 . 0)
     (push.close
       (1 0)
       (push.iloc.0 . 0)
       (push.iloc.1 . 1)
       (ret.subr.gloc.of char=? "./boot/common.scm" . 114729))
     (apply.gloc.of |split->list`217*| "./boot/common.scm" . 114700))
   (push.iloc.0 . 1)
   (subr.gloc.of string? 1 "./boot/common.scm" . 115724)
   (if.true
     (call (push.iloc.0 . 1) (apply.gloc.of string->list "./boot/common.scm" . 116759))
     (push)
     (extend . 1)
     (touch.gloc.of |split->list`217*|)
     (push.iloc.1 . 0)
     (push.close
       (1 0)
       (touch.gloc.of any1)
       (push.close
         (1 0)
         (push.iloc.1 . 0)
         (push.iloc.0 . 0)
         (ret.subr.gloc.of char=? "./boot/common.scm" . 117821))
       (push.iloc.1 . 0)
       (apply.gloc.of any1 "./boot/common.scm" . 117803))
     (apply.gloc.of |split->list`217*| "./boot/common.scm" . 117774))
   (push.iloc.0 . 1)
   (subr.gloc.of procedure? 1 "./boot/common.scm" . 118796)
   (if.true
     (touch.gloc.of |split->list`217*|)
     (push.iloc.0 . 0)
     (push.iloc.0 . 1)
     (apply.gloc.of |split->list`217*| "./boot/common.scm" . 119820))
   (ret.const.unspec))
 (set.gloc.of string-split)
 (ret.const.unspec))
((close
   (2 1 . wrong-type-argument-message)
   (iloc.0 . 2)
   (if.null?
     (push.const . "expected ~a, but got ~a")
     (push.iloc.0 . 0)
     (push.iloc.0 . 1)
     (ret.subr.gloc.of format "./boot/common.scm" . 124937))
   (push.const . "expected ~a, but got ~a, as argument ~a")
   (push.iloc.0 . 0)
   (push.iloc.0 . 1)
   (push.car.iloc (0 . 2) "./boot/common.scm" . 126022)
   (ret.subr.gloc.of format "./boot/common.scm" . 125961))
 (set.gloc.of wrong-type-argument-message)
 (ret.const.unspec))

;
((close
   (1 1 . make-parameter)
   (call
     (iloc.0 . 1)
     (if.null?
       (touch.gloc.of parameter-proc-0)
       (subr.gloc.of gensym 0)
       (push)
       (apply.gloc.of parameter-proc-0 "./boot/parameter.scm" . 8218))
     (touch.gloc.of parameter-proc-1)
     (subr.gloc.of gensym 0)
     (push)
     (push.car.iloc (0 . 1) "./boot/parameter.scm" . 9269)
     (apply.gloc.of parameter-proc-1 "./boot/parameter.scm" . 9242))
   (push)
   (extend . 1)
   (call (push.iloc.1 . 0) (apply.iloc (0 . 0) "./boot/parameter.scm" . 10254))
   (ret.iloc 0 . 0))
 (set.gloc.of make-parameter)
 (ret.const.unspec))
((close
   (1 0 . parameter-proc-0)
   (ret.close
     (0 1)
     (iloc.0 . 0)
     (if.null?
       (subr.gloc.of current-dynamic-environment 0)
       (push)
       (push.iloc.1 . 0)
       (push.const . #f)
       (ret.subr.gloc.of core-hashtable-ref "./boot/parameter.scm" . 16395))
     (subr.gloc.of current-dynamic-environment 0)
     (push)
     (push.iloc.1 . 0)
     (push.car.iloc (0 . 0) "./boot/parameter.scm" . 17474)
     (ret.subr.gloc.of core-hashtable-set! "./boot/parameter.scm" . 17419)))
 (set.gloc.of parameter-proc-0)
 (ret.const.unspec))
((close
   (2 0 . parameter-proc-1)
   (ret.close
     (0 1)
     (iloc.0 . 0)
     (if.null?
       (subr.gloc.of current-dynamic-environment 0)
       (push)
       (push.iloc.1 . 0)
       (push.const . #f)
       (ret.subr.gloc.of core-hashtable-ref "./boot/parameter.scm" . 23563))
     (subr.gloc.of current-dynamic-environment 0)
     (push)
     (push.iloc.1 . 0)
     (call
       (push.car.iloc (0 . 0) "./boot/parameter.scm" . 24648)
       (apply.iloc (1 . 1) "./boot/parameter.scm" . 24642))
     (push)
     (ret.subr.gloc.of core-hashtable-set! "./boot/parameter.scm" . 24587)))
 (set.gloc.of parameter-proc-1)
 (ret.const.unspec))

;
((call (push.const . 5) (apply.gloc.of make-parameter "./boot/macro/initial.scm" . 5149))
 (set.gloc.of expansion-backtrace)
 (ret.const.unspec))
((call (push.const) (apply.gloc.of make-parameter "./boot/macro/initial.scm" . 6175))
 (set.gloc.of expansion-trace-stack)
 (ret.const.unspec))
((call (push.const . 0) (apply.gloc.of make-parameter "./boot/macro/initial.scm" . 7199))
 (set.gloc.of expansion-trace-level)
 (ret.const.unspec))
((call (push.const . #f) (apply.gloc.of make-parameter "./boot/macro/initial.scm" . 8231))
 (set.gloc.of current-immutable-identifiers)
 (ret.const.unspec))
((call (push.const) (apply.gloc.of make-parameter "./boot/macro/initial.scm" . 9255))
 (set.gloc.of current-expansion-environment)
 (ret.const.unspec))
((call (push.const) (apply.gloc.of make-parameter "./boot/macro/initial.scm" . 10281))
 (set.gloc.of current-transformer-environment)
 (ret.const.unspec))
((call (push.const . #f) (apply.gloc.of make-parameter "./boot/macro/initial.scm" . 11302))
 (set.gloc.of current-template-environment)
 (ret.const.unspec))
((call (push.const) (apply.gloc.of make-parameter "./boot/macro/initial.scm" . 12320))
 (set.gloc.of current-expansion-mode)
 (ret.const.unspec))
((call (push.const . #f) (apply.gloc.of make-parameter "./boot/macro/initial.scm" . 13346))
 (set.gloc.of current-macro-expression)
 (ret.const.unspec))
((call (push.const . #f) (apply.gloc.of make-parameter "./boot/macro/initial.scm" . 14369))
 (set.gloc.of unexpect-top-level-form)
 (ret.const.unspec))
((close (3 0) (ret.iloc 0 . 0))
 (set.gloc.of |.L105|)
 (call (push.gloc.of |.L105|) (apply.gloc.of make-parameter "./boot/macro/initial.scm" . 15398))
 (set.gloc.of current-after-expansion-hook)
 (ret.const.unspec))
((call (push.const . 0) (apply.gloc.of make-parameter "./boot/macro/initial.scm" . 16417))
 (set.gloc.of current-temporary-count)
 (ret.const.unspec))
((call (push.const . 0) (apply.gloc.of make-parameter "./boot/macro/initial.scm" . 17438))
 (set.gloc.of current-rename-count)
 (ret.const.unspec))
((call (push.const . #f) (apply.gloc.of make-parameter "./boot/macro/initial.scm" . 18461))
 (set.gloc.of current-temporaries)
 (ret.const.unspec))
((call (push.const . #f) (apply.gloc.of make-parameter "./boot/macro/initial.scm" . 19490))
 (set.gloc.of current-closure-comments)
 (ret.const.unspec))
((call (push.const . #f) (apply.gloc.of make-parameter "./boot/macro/initial.scm" . 20516))
 (set.gloc.of current-top-level-exterior)
 (ret.const.unspec))
((call
   (subr.gloc.of make-core-hashtable 0)
   (push)
   (apply.gloc.of make-parameter "./boot/macro/initial.scm" . 21539))
 (set.gloc.of current-top-level-renames)
 (ret.const.unspec))
((close
   (4 0)
   (call
     (push.iloc.0 . 1)
     (subr.gloc.of top-level-bound? 1 "./boot/macro/initial.scm" . 25610)
     (if.false.ret)
     (push.iloc.0 . 1)
     (push.const.undef)
     (ret.subr.gloc.of set-top-level-value! "./boot/macro/initial.scm" . 25637))
   (subr.gloc.of current-macro-environment 0)
   (push)
   (push.iloc.0 . 1)
   (call
     (push.iloc.0 . 0)
     (const . syntax)
     (if.eq?
       (touch.gloc.of make-macro)
       (push.iloc.0 . 2)
       (push.iloc.0 . 3)
       (apply.gloc.of make-macro "./boot/macro/initial.scm" . 30749))
     (push.iloc.0 . 0)
     (const . variable)
     (if.eq?
       (push.iloc.0 . 2)
       (subr.gloc.of procedure? 1 "./boot/macro/initial.scm" . 32804)
       (if.true
         (touch.gloc.of make-macro-variable)
         (push.iloc.0 . 2)
         (push.iloc.0 . 3)
         (apply.gloc.of make-macro-variable "./boot/macro/initial.scm" . 33828))
       (call
         (touch.gloc.of variable-transformer-token?)
         (push.iloc.0 . 2)
         (apply.gloc.of variable-transformer-token? "./boot/macro/initial.scm" . 34852))
       (if.true
         (touch.gloc.of make-macro-variable)
         (push.iloc.0 . 2)
         (push.const . 1)
         (push.subr.gloc.of tuple-ref 2 "./boot/macro/initial.scm" . 35897)
         (push.iloc.0 . 3)
         (apply.gloc.of make-macro-variable "./boot/macro/initial.scm" . 35876))
       (push.const . "internal error: .set-top-level-macro! ~s")
       (push.iloc.0 . 0)
       (push.iloc.0 . 1)
       (push.iloc.0 . 2)
       (push.subr.gloc.of list 3 "./boot/macro/initial.scm" . 37981)
       (apply.gloc.of scheme-error "./boot/macro/initial.scm" . 37924))
     (push.const . "internal error: .set-top-level-macro! ~s")
     (push.iloc.0 . 0)
     (push.iloc.0 . 1)
     (push.iloc.0 . 2)
     (push.subr.gloc.of list 3 "./boot/macro/initial.scm" . 40022)
     (apply.gloc.of scheme-error "./boot/macro/initial.scm" . 39965))
   (push)
   (ret.subr.gloc.of
     core-hashtable-set!
     (core-hashtable-set!
       (current-macro-environment)
       |keyword`260*|
       (if (|.eq?| |type`260*| 'syntax)
           (make-macro |spec`260*| |env`260*|)
           (if (|.eq?| |type`260*| 'variable)
               (if (procedure? |spec`260*|)
                   (make-macro-variable |spec`260*| |env`260*|)
                   (if (variable-transformer-token? |spec`260*|)
                       (make-macro-variable (tuple-ref |spec`260*| 1) |env`260*|)
                       (scheme-error
                         "internal error: .set-top-level-macro! ~s"
                         (list |type`260*| |keyword`260*| |spec`260*|))))
               (scheme-error
                 "internal error: .set-top-level-macro! ~s"
                 (list |type`260*| |keyword`260*| |spec`260*|)))))))
 (set.gloc.of |.L108|)
 (push.const . |.set-top-level-macro!|)
 (push.gloc.of |.L108|)
 (ret.subr.gloc.of set-top-level-value! "./boot/macro/initial.scm" . 24579))
((close
   (1 0 . core-primitive-name?)
   (push.iloc.0 . 0)
   (const . ...)
   (if.eq?.ret.const . #f)
   (push.iloc.0 . 0)
   (push.subr.gloc.of symbol->string 1 "./boot/macro/initial.scm" . 46109)
   (push.const . 0)
   (push.subr.gloc.of string-ref 2 "./boot/macro/initial.scm" . 46097)
   (subr.gloc.of current-primitive-prefix 0 "./boot/macro/initial.scm" . 46131)
   (ret.eq? "./boot/macro/initial.scm" . 46092))
 (set.gloc.of core-primitive-name?)
 (ret.const.unspec))
((close
   (1 0 . core-primitive-name)
   (call
     (touch.gloc.of core-primitive-name?)
     (push.iloc.0 . 0)
     (apply.gloc.of core-primitive-name? "./boot/macro/initial.scm" . 50188))
   (if.true (ret.iloc 0 . 0))
   (push.const . "~a~a")
   (subr.gloc.of current-primitive-prefix 0)
   (push)
   (push.iloc.0 . 0)
   (push.subr.gloc.of format 3 "./boot/macro/initial.scm" . 52252)
   (ret.subr.gloc.of string->symbol "./boot/macro/initial.scm" . 52236))
 (set.gloc.of core-primitive-name)
 (ret.const.unspec))
((close
   (2 0 . generate-global-id)
   (push.const . "~a~a~a")
   (push.iloc.0 . 0)
   (subr.gloc.of current-library-suffix 0)
   (push)
   (push.iloc.0 . 1)
   (push.subr.gloc.of format 4 "./boot/macro/initial.scm" . 56341)
   (ret.subr.gloc.of string->symbol "./boot/macro/initial.scm" . 56325))
 (set.gloc.of generate-global-id)
 (ret.const.unspec))
((close
   (2 0 . make-temporary-symbol)
   (call
     (touch.gloc.of current-temporaries)
     (apply.gloc.of current-temporaries "./boot/macro/initial.scm" . 60434))
   (push)
   (extend . 1)
   (push.iloc.0 . 0)
   (push.iloc.1 . 0)
   (push.const . #f)
   (subr.gloc.of core-hashtable-ref 3 "./boot/macro/initial.scm" . 61451)
   (if.true.ret)
   (push.iloc.1 . 0)
   (push.iloc.1 . 1)
   (push.subr.gloc.of string->uninterned-symbol 2 "./boot/macro/initial.scm" . 62486)
   (extend . 1)
   (push.iloc.1 . 0)
   (push.iloc 2 . 0)
   (push.iloc.0 . 0)
   (subr.gloc.of core-hashtable-set! 3 "./boot/macro/initial.scm" . 63501)
   (ret.iloc 0 . 0))
 (set.gloc.of make-temporary-symbol)
 (ret.const.unspec))
((close
   (0 0 . generate-temporary-symbol)
   (call
     (touch.gloc.of current-temporary-count)
     (apply.gloc.of current-temporary-count "./boot/macro/initial.scm" . 68626))
   (push)
   (extend . 1)
   (call
     (touch.gloc.of current-temporary-count)
     (push.n+.iloc (0 . 0) 1 "./boot/macro/initial.scm" . 69664)
     (apply.gloc.of current-temporary-count "./boot/macro/initial.scm" . 69639))
   (push.const . ".L~a")
   (push.iloc.0 . 0)
   (push.subr.gloc.of format 2 "./boot/macro/initial.scm" . 70675)
   (extend . 1)
   (touch.gloc.of make-temporary-symbol)
   (push.iloc.0 . 0)
   (push.iloc.0 . 0)
   (push.subr.gloc.of string-length 1 "./boot/macro/initial.scm" . 71717)
   (apply.gloc.of make-temporary-symbol "./boot/macro/initial.scm" . 71689))
 (set.gloc.of generate-temporary-symbol)
 (ret.const.unspec))
((close
   (1 0 . generate-local-macro-symbol)
   (call
     (touch.gloc.of current-temporary-count)
     (apply.gloc.of current-temporary-count "./boot/macro/initial.scm" . 75794))
   (push)
   (extend . 1)
   (call
     (touch.gloc.of current-temporary-count)
     (push.n+.iloc (0 . 0) 1 "./boot/macro/initial.scm" . 76832)
     (apply.gloc.of current-temporary-count "./boot/macro/initial.scm" . 76807))
   (touch.gloc.of make-temporary-symbol)
   (push.const . ".MACRO~a.~a")
   (push.iloc.0 . 0)
   (push.iloc.1 . 0)
   (push.subr.gloc.of format 3 "./boot/macro/initial.scm" . 77854)
   (push.const . 6)
   (apply.gloc.of make-temporary-symbol "./boot/macro/initial.scm" . 77831))
 (set.gloc.of generate-local-macro-symbol)
 (ret.const.unspec))
((close
   (1 0 . local-macro-symbol?)
   (push.iloc.0 . 0)
   (subr.gloc.of uninterned-symbol? 1 "./boot/macro/initial.scm" . 81930)
   (if.false.ret)
   (push.iloc.0 . 0)
   (push.subr.gloc.of uninterned-symbol-prefix 1 "./boot/macro/initial.scm" . 81964)
   (push.const . ".MACRO")
   (ret.subr.gloc.of string=? "./boot/macro/initial.scm" . 81954))
 (set.gloc.of local-macro-symbol?)
 (ret.const.unspec))
((close
   (2 0 . rename-id)
   (push.iloc.0 . 0)
   (subr.gloc.of uninterned-symbol? 1 "./boot/macro/initial.scm" . 86025)
   (if.true
     (touch.gloc.of make-temporary-symbol)
     (push.const . "~a~a~a")
     (push.iloc.0 . 0)
     (subr.gloc.of current-rename-delimiter 0)
     (push)
     (push.iloc.0 . 1)
     (push.subr.gloc.of format 4 "./boot/macro/initial.scm" . 87072)
     (push.iloc.0 . 0)
     (push.subr.gloc.of uninterned-symbol-prefix 1 "./boot/macro/initial.scm" . 87141)
     (push.subr.gloc.of string-length 1 "./boot/macro/initial.scm" . 87126)
     (apply.gloc.of make-temporary-symbol "./boot/macro/initial.scm" . 87049))
   (touch.gloc.of make-temporary-symbol)
   (push.const . "~a~a~a")
   (push.iloc.0 . 0)
   (subr.gloc.of current-rename-delimiter 0)
   (push)
   (push.iloc.0 . 1)
   (push.subr.gloc.of format 4 "./boot/macro/initial.scm" . 88096)
   (push.iloc.0 . 0)
   (push.subr.gloc.of symbol->string 1 "./boot/macro/initial.scm" . 88165)
   (push.subr.gloc.of string-length 1 "./boot/macro/initial.scm" . 88150)
   (apply.gloc.of make-temporary-symbol "./boot/macro/initial.scm" . 88073))
 (set.gloc.of rename-id)
 (ret.const.unspec))
((close
   (1 0 . renamed-id?)
   (push.iloc.0 . 0)
   (subr.gloc.of uninterned-symbol? 1 "./boot/macro/initial.scm" . 92170)
   (if.false.ret)
   (push.iloc.0 . 0)
   (push.subr.gloc.of uninterned-symbol-suffix 1 "./boot/macro/initial.scm" . 93211)
   (subr.gloc.of current-rename-delimiter 0)
   (push)
   (ret.subr.gloc.of string-contains "./boot/macro/initial.scm" . 93194))
 (set.gloc.of renamed-id?)
 (ret.const.unspec))
((close
   (2 0 . rename-variable-id)
   (push.iloc.0 . 0)
   (subr.gloc.of uninterned-symbol? 1 "./boot/macro/initial.scm" . 97289)
   (if.true
     (touch.gloc.of make-temporary-symbol)
     (push.const . "~a~a~a*")
     (push.iloc.0 . 0)
     (subr.gloc.of current-rename-delimiter 0)
     (push)
     (push.iloc.0 . 1)
     (push.subr.gloc.of format 4 "./boot/macro/initial.scm" . 98336)
     (push.iloc.0 . 0)
     (push.subr.gloc.of uninterned-symbol-prefix 1 "./boot/macro/initial.scm" . 98406)
     (push.subr.gloc.of string-length 1 "./boot/macro/initial.scm" . 98391)
     (apply.gloc.of make-temporary-symbol "./boot/macro/initial.scm" . 98313))
   (touch.gloc.of make-temporary-symbol)
   (push.const . "~a~a~a*")
   (push.iloc.0 . 0)
   (subr.gloc.of current-rename-delimiter 0)
   (push)
   (push.iloc.0 . 1)
   (push.subr.gloc.of format 4 "./boot/macro/initial.scm" . 99360)
   (push.iloc.0 . 0)
   (push.subr.gloc.of symbol->string 1 "./boot/macro/initial.scm" . 99430)
   (push.subr.gloc.of string-length 1 "./boot/macro/initial.scm" . 99415)
   (apply.gloc.of make-temporary-symbol "./boot/macro/initial.scm" . 99337))
 (set.gloc.of rename-variable-id)
 (ret.const.unspec))
((close
   (1 0 . renamed-variable-id?)
   (push.iloc.0 . 0)
   (subr.gloc.of uninterned-symbol? 1 "./boot/macro/initial.scm" . 103434)
   (if.false.ret)
   (push.iloc.0 . 0)
   (push.subr.gloc.of uninterned-symbol-suffix 1 "./boot/macro/initial.scm" . 104475)
   (subr.gloc.of current-rename-delimiter 0)
   (push)
   (subr.gloc.of string-contains 2 "./boot/macro/initial.scm" . 104458)
   (if.false.ret)
   (push.iloc.0 . 0)
   (push.subr.gloc.of uninterned-symbol-suffix 1 "./boot/macro/initial.scm" . 105499)
   (push.const . #\*)
   (ret.subr.gloc.of string-contains "./boot/macro/initial.scm" . 105482))
 (set.gloc.of renamed-variable-id?)
 (ret.const.unspec))
((close
   (2 0 . compose-id)
   (push.iloc.0 . 0)
   (subr.gloc.of uninterned-symbol? 1 "./boot/macro/initial.scm" . 109577)
   (if.true
     (touch.gloc.of make-temporary-symbol)
     (push.const . "~a~a")
     (push.iloc.0 . 0)
     (push.iloc.0 . 1)
     (push.subr.gloc.of format 3 "./boot/macro/initial.scm" . 110624)
     (push.iloc.0 . 0)
     (push.subr.gloc.of uninterned-symbol-prefix 1 "./boot/macro/initial.scm" . 110665)
     (push.subr.gloc.of string-length 1 "./boot/macro/initial.scm" . 110650)
     (apply.gloc.of make-temporary-symbol "./boot/macro/initial.scm" . 110601))
   (touch.gloc.of make-temporary-symbol)
   (push.const . "~a~a")
   (push.iloc.0 . 0)
   (push.iloc.0 . 1)
   (push.subr.gloc.of format 3 "./boot/macro/initial.scm" . 111648)
   (push.iloc.0 . 0)
   (push.subr.gloc.of symbol->string 1 "./boot/macro/initial.scm" . 111689)
   (push.subr.gloc.of string-length 1 "./boot/macro/initial.scm" . 111674)
   (apply.gloc.of make-temporary-symbol "./boot/macro/initial.scm" . 111625))
 (set.gloc.of compose-id)
 (ret.const.unspec))
((close
   (1 0 . original-id)
   (call
     (touch.gloc.of renamed-id?)
     (push.iloc.0 . 0)
     (apply.gloc.of renamed-id? "./boot/macro/initial.scm" . 115721))
   (if.true
     (push.iloc.0 . 0)
     (push.subr.gloc.of uninterned-symbol-prefix 1 "./boot/macro/initial.scm" . 115754)
     (ret.subr.gloc.of string->symbol "./boot/macro/initial.scm" . 115738))
   (ret.iloc 0 . 0))
 (set.gloc.of original-id)
 (ret.const.unspec))
((close
   (1 0 . loop)
   (iloc.0 . 0)
   (if.pair?
     (call
       (touch.gloc.of |loop`304*|)
       (push.car.iloc (0 . 0) "./boot/macro/initial.scm" . 123937)
       (apply.gloc.of |loop`304*| "./boot/macro/initial.scm" . 123931))
     (push)
     (call
       (touch.gloc.of |loop`304*|)
       (push.cdr.iloc (0 . 0) "./boot/macro/initial.scm" . 123958)
       (apply.gloc.of |loop`304*| "./boot/macro/initial.scm" . 123952))
     (push)
     (extend . 2)
     (call
       (push.iloc.0 . 0)
       (car.iloc (1 . 0) "./boot/macro/initial.scm" . 124964)
       (if.not.eq?.ret.const . #f)
       (push.iloc.0 . 1)
       (cdr.iloc (1 . 0) "./boot/macro/initial.scm" . 124982)
       (ret.eq? "./boot/macro/initial.scm" . 124975))
     (if.true (ret.iloc 1 . 0))
     (push.iloc.0 . 0)
     (iloc.0 . 1)
     (ret.cons "./boot/macro/initial.scm" . 124998))
   (iloc.0 . 0)
   (if.symbol?
     (touch.gloc.of original-id)
     (push.iloc.0 . 0)
     (apply.gloc.of original-id "./boot/macro/initial.scm" . 126994))
   (push.iloc.0 . 0)
   (subr.gloc.of vector? 1 "./boot/macro/initial.scm" . 128018)
   (if.true
     (call
       (push.gloc.of |loop`304*|)
       (push.iloc.0 . 0)
       (push.subr.gloc.of vector->list 1 "./boot/macro/initial.scm" . 129066)
       (apply.gloc.of map "./boot/macro/initial.scm" . 129056))
     (push)
     (ret.subr.gloc.of list->vector "./boot/macro/initial.scm" . 129042))
   (ret.iloc 0 . 0))
 (set.gloc.of |loop`304*|)
 (close
   (1 0 . strip-rename-suffix)
   (push.iloc.0 . 0)
   (subr.gloc.of cyclic-object? 1 "./boot/macro/initial.scm" . 119817)
   (if.true (ret.iloc 0 . 0))
   (touch.gloc.of |loop`304*|)
   (push.iloc.0 . 0)
   (apply.gloc.of |loop`304*| "./boot/macro/initial.scm" . 122891))
 (set.gloc.of strip-rename-suffix)
 (ret.const.unspec))
((close
   (1 0 . retrieve-rename-suffix)
   (call
     (touch.gloc.of renamed-id?)
     (push.iloc.0 . 0)
     (apply.gloc.of renamed-id? "./boot/macro/initial.scm" . 134156))
   (if.true
     (push.iloc.0 . 0)
     (ret.subr.gloc.of uninterned-symbol-suffix "./boot/macro/initial.scm" . 134173))
   (ret.const . ""))
 (set.gloc.of retrieve-rename-suffix)
 (ret.const.unspec))
((close
   (0 0 . fresh-rename-count)
   (call
     (touch.gloc.of current-rename-count)
     (call
       (touch.gloc.of current-rename-count)
       (apply.gloc.of current-rename-count "./boot/macro/initial.scm" . 139294))
     (push)
     (push.const . 1)
     (push.subr.gloc.of + 2 "./boot/macro/initial.scm" . 139291)
     (apply.gloc.of current-rename-count "./boot/macro/initial.scm" . 139269))
   (touch.gloc.of current-rename-count)
   (apply.gloc.of current-rename-count "./boot/macro/initial.scm" . 140293))
 (set.gloc.of fresh-rename-count)
 (ret.const.unspec))
((close
   (2 0 . set-closure-comment!)
   (call
     (touch.gloc.of current-closure-comments)
     (apply.gloc.of current-closure-comments "./boot/macro/initial.scm" . 144394))
   (if.false.ret)
   (call
     (touch.gloc.of current-closure-comments)
     (apply.gloc.of current-closure-comments "./boot/macro/initial.scm" . 145439))
   (push)
   (push.iloc.0 . 0)
   (push.const . heap)
   (iloc.0 . 1)
   (push.cons)
   (ret.subr.gloc.of core-hashtable-set! "./boot/macro/initial.scm" . 145418))
 (set.gloc.of set-closure-comment!)
 (ret.const.unspec))
((close
   (2 1 . annotate-closure)
   (call
     (touch.gloc.of current-closure-comments)
     (apply.gloc.of current-closure-comments "./boot/macro/initial.scm" . 149514))
   (if.false.ret)
   (call
     (touch.gloc.of current-closure-comments)
     (apply.gloc.of current-closure-comments "./boot/macro/initial.scm" . 150565))
   (push)
   (push.iloc.0 . 1)
   (push.const . #f)
   (push.subr.gloc.of core-hashtable-ref 3 "./boot/macro/initial.scm" . 150545)
   (extend . 1)
   (iloc.0 . 0)
   (if.true
     (iloc.1 . 2)
     (if.null?
       (call
         (touch.gloc.of current-closure-comments)
         (apply.gloc.of current-closure-comments "./boot/macro/initial.scm" . 153647))
       (push)
       (push.iloc.1 . 0)
       (push.iloc.0 . 0)
       (ret.subr.gloc.of core-hashtable-set! "./boot/macro/initial.scm" . 153626))
     (call
       (touch.gloc.of current-closure-comments)
       (apply.gloc.of current-closure-comments "./boot/macro/initial.scm" . 154671))
     (push)
     (push.iloc.1 . 0)
     (push.car.iloc (1 . 2) "./boot/macro/initial.scm" . 154709)
     (cdr.iloc (0 . 0) "./boot/macro/initial.scm" . 154720)
     (push.cons)
     (ret.subr.gloc.of core-hashtable-set! "./boot/macro/initial.scm" . 154650))
   (ret.const.unspec))
 (set.gloc.of annotate-closure)
 (ret.const.unspec))
((close
   (1 0 . annotated?)
   (subr.gloc.of current-source-comments 0 "./boot/macro/initial.scm" . 158730)
   (if.false.ret)
   (subr.gloc.of current-source-comments 0)
   (push)
   (push.iloc.0 . 0)
   (push.const . #f)
   (subr.gloc.of core-hashtable-ref 3 "./boot/macro/initial.scm" . 159754)
   (if.false.ret)
   (ret.const . #t))
 (set.gloc.of annotated?)
 (ret.const.unspec))
((close
   (1 0 . get-annotation)
   (iloc.0 . 0)
   (if.not.pair?.ret.const . #f)
   (subr.gloc.of current-source-comments 0 "./boot/macro/initial.scm" . 165898)
   (if.false.ret)
   (subr.gloc.of current-source-comments 0)
   (push)
   (push.iloc.0 . 0)
   (push.const . #f)
   (ret.subr.gloc.of core-hashtable-ref "./boot/macro/initial.scm" . 166922))
 (set.gloc.of get-annotation)
 (ret.const.unspec))
((close
   (2 0 . put-annotation)
   (call
     (iloc.0 . 0)
     (if.not.pair?.ret.const . #f)
     (subr.gloc.of current-source-comments 0 "./boot/macro/initial.scm" . 172042)
     (if.false.ret)
     (subr.gloc.of current-source-comments 0)
     (push)
     (push.iloc.0 . 0)
     (push.iloc.0 . 1)
     (ret.subr.gloc.of core-hashtable-set! "./boot/macro/initial.scm" . 173066))
   (ret.iloc 0 . 0))
 (set.gloc.of put-annotation)
 (ret.const.unspec))
((close
   (2 0 . annotate)
   (call
     (subr.gloc.of current-source-comments 0)
     (push)
     (extend . 1)
     (extend.unbound . 2)
     (push.close+
       (2 0 . put-note!)
       (iloc.0 . 1)
       (if.false.ret)
       (extend.enclose
         (1 0 . loop)
         (push.iloc.0 . 0)
         (subr.gloc.of list? 1 "./boot/macro/initial.scm" . 184343)
         (if.false.ret)
         (push.iloc 4 . 0)
         (push.iloc.0 . 0)
         (push.const . #f)
         (subr.gloc.of core-hashtable-ref 3 "./boot/macro/initial.scm" . 185371)
         (if.true.ret)
         (push.iloc 4 . 0)
         (push.iloc.0 . 0)
         (push.iloc 2 . 1)
         (subr.gloc.of core-hashtable-set! 3 "./boot/macro/initial.scm" . 187421)
         (push.iloc.1 . 0)
         (push.iloc.0 . 0)
         (apply.gloc.of for-each "./boot/macro/initial.scm" . 188445))
       (push.iloc.1 . 0)
       (apply.iloc (0 . 0) "./boot/macro/initial.scm" . 184338))
     (push.close
       (1 0 . get-note)
       (extend.enclose
         (1 0 . loop)
         (iloc.0 . 0)
         (if.not.pair?.ret.const . #f)
         (push.iloc 4 . 0)
         (push.iloc.0 . 0)
         (push.const . #f)
         (subr.gloc.of core-hashtable-ref 3 "./boot/macro/initial.scm" . 194582)
         (if.true.ret)
         (call
           (push.car.iloc (0 . 0) "./boot/macro/initial.scm" . 195612)
           (apply.iloc (1 . 0) "./boot/macro/initial.scm" . 195606))
         (if.true.ret)
         (push.cdr.iloc (0 . 0) "./boot/macro/initial.scm" . 196636)
         (apply.iloc (1 . 0) "./boot/macro/initial.scm" . 196630))
       (push.iloc.1 . 0)
       (apply.iloc (0 . 0) "./boot/macro/initial.scm" . 193549))
     (enclose . 2)
     (iloc.1 . 0)
     (if.false.ret)
     (iloc 2 . 0)
     (if.not.pair?.ret.const . #f)
     (iloc 2 . 1)
     (if.not.pair?.ret.const . #f)
     (push.iloc 2 . 0)
     (iloc 2 . 1)
     (if.eq?.ret.const . #f)
     (push.iloc.1 . 0)
     (push.iloc 2 . 1)
     (push.const . #f)
     (push.subr.gloc.of core-hashtable-ref 3 "./boot/macro/initial.scm" . 202771)
     (extend . 1)
     (iloc.0 . 0)
     (if.true
       (push.iloc 2 . 0)
       (push.iloc 3 . 0)
       (push.iloc.0 . 0)
       (ret.subr.gloc.of core-hashtable-set! "./boot/macro/initial.scm" . 203810))
     (call (push.iloc 3 . 1) (apply.iloc (1 . 1) "./boot/macro/initial.scm" . 204819))
     (push)
     (extend . 1)
     (iloc.0 . 0)
     (if.true
       (push.iloc 4 . 0)
       (push.iloc.0 . 0)
       (apply.iloc+ (2 . 0) "./boot/macro/initial.scm" . 205858))
     (ret.const.unspec))
   (ret.iloc 0 . 0))
 (set.gloc.of annotate)
 (ret.const.unspec))
((close
   (2 0 . annotate-macro!)
   (call
     (subr.gloc.of current-source-comments 0 "./boot/macro/initial.scm" . 210954)
     (if.false.ret)
     (touch.gloc.of annotate)
     (call
       (call
         (touch.gloc.of wrapped-syntax-object?)
         (push.iloc.0 . 0)
         (apply.gloc.of wrapped-syntax-object? "./boot/macro/initial.scm" . 211992))
       (if.true
         (touch.gloc.of syntax-object-expr)
         (push.iloc.0 . 0)
         (apply.gloc.of syntax-object-expr "./boot/macro/initial.scm" . 212022))
       (ret.iloc 0 . 0))
     (push)
     (call
       (call
         (touch.gloc.of wrapped-syntax-object?)
         (push.iloc.0 . 1)
         (apply.gloc.of wrapped-syntax-object? "./boot/macro/initial.scm" . 213016))
       (if.true
         (touch.gloc.of syntax-object-expr)
         (push.iloc.0 . 1)
         (apply.gloc.of syntax-object-expr "./boot/macro/initial.scm" . 213048))
       (ret.iloc 0 . 1))
     (push)
     (apply.gloc.of annotate "./boot/macro/initial.scm" . 211978))
   (ret.const.unspec))
 (set.gloc.of annotate-macro!)
 (ret.const.unspec))
((close
   (2 0 . loop)
   (iloc.0 . 0)
   (if.pair?
     (<=n.iloc (0 . 1) 0 "./boot/macro/initial.scm" . 221199)
     (if.true (push.const . ...) (ret.subr.gloc.of list "./boot/macro/initial.scm" . 221208))
     (push.car.iloc (0 . 0) "./boot/macro/initial.scm" . 222234)
     (call
       (touch.gloc.of |loop`362*|)
       (push.cdr.iloc (0 . 0) "./boot/macro/initial.scm" . 222250)
       (push.n+.iloc (0 . 1) -1 "./boot/macro/initial.scm" . 222260)
       (apply.gloc.of |loop`362*| "./boot/macro/initial.scm" . 222244))
     (ret.cons "./boot/macro/initial.scm" . 222228))
   (ret.iloc 0 . 0))
 (set.gloc.of |loop`362*|)
 (close
   (2 0 . abbreviated-take)
   (touch.gloc.of annotate)
   (call
     (touch.gloc.of |loop`362*|)
     (push.iloc.0 . 0)
     (push.iloc.0 . 1)
     (apply.gloc.of |loop`362*| "./boot/macro/initial.scm" . 220168))
   (push)
   (push.iloc.0 . 0)
   (apply.gloc.of annotate (annotate (|loop`362*| |form`358*| |n`358*|) |form`358*|)))
 (set.gloc.of abbreviated-take)
 (ret.const.unspec))
((close
   (3 0 . abbreviated-take-form)
   (touch.gloc.of annotate)
   (call
     (extend.enclose+
       (3 0 . loop)
       (iloc.0 . 0)
       (if.pair?
         (call
           (<=n.iloc (0 . 1) 0 "./boot/macro/initial.scm" . 230419)
           (if.true.ret)
           (push.iloc.0 . 2)
           (push.const . 0)
           (ret.subr.gloc.of <= "./boot/macro/initial.scm" . 230429))
         (if.true (push.const . ...) (ret.subr.gloc.of list "./boot/macro/initial.scm" . 230440))
         (call
           (push.car.iloc (0 . 0) "./boot/macro/initial.scm" . 231456)
           (push.n+.iloc (0 . 1) -1 "./boot/macro/initial.scm" . 231466)
           (push.iloc.0 . 2)
           (apply.iloc+ (1 . 0) "./boot/macro/initial.scm" . 231450))
         (push)
         (call
           (push.cdr.iloc (0 . 0) "./boot/macro/initial.scm" . 231485)
           (push.iloc 2 . 1)
           (push.n+.iloc (0 . 2) -1 "./boot/macro/initial.scm" . 231500)
           (apply.iloc+ (1 . 0) "./boot/macro/initial.scm" . 231479))
         (ret.cons "./boot/macro/initial.scm" . 231444))
       (ret.iloc 0 . 0))
     (push.iloc.1 . 0)
     (push.iloc.1 . 1)
     (push.iloc.1 . 2)
     (apply.iloc+ (0 . 0) "./boot/macro/initial.scm" . 229384))
   (push)
   (push.iloc.0 . 0)
   (apply.gloc.of
     annotate
     (annotate
       (letrec* ((|loop`370*|
                   (lambda (|lst`371*| |na`371*| |nd`371*|)
                     (if (pair? |lst`371*|)
                         (if (or (<= |na`371*| 0) (<= |nd`371*| 0))
                             (list '...)
                             (cons (|loop`370*| (car |lst`371*|) (- |na`371*| 1) |nd`371*|)
                                   (|loop`370*| (cdr |lst`371*|) |ncar`366*| (- |nd`371*| 1))))
                         |lst`371*|))))
         (|loop`370*| |form`366*| |ncar`366*| |ncdr`366*|))
       |form`366*|)))
 (set.gloc.of abbreviated-take-form)
 (ret.const.unspec))

;
((close
   (1 0 . formals->list)
   (iloc.0 . 0)
   (if.null?.ret.const)
   (iloc.0 . 0)
   (if.pair?
     (push.car.iloc (0 . 0) "./boot/macro/expand.scm" . 9234)
     (call
       (touch.gloc.of formals->list)
       (push.cdr.iloc (0 . 0) "./boot/macro/expand.scm" . 9259)
       (apply.gloc.of formals->list "./boot/macro/expand.scm" . 9244))
     (ret.cons "./boot/macro/expand.scm" . 9228))
   (push.iloc.0 . 0)
   (ret.subr.gloc.of list "./boot/macro/expand.scm" . 11276))
 (set.gloc.of formals->list)
 (ret.const.unspec))
((close
   (2 0 . collect-lambda-formals)
   (call
     (touch.gloc.of formals->list)
     (push.iloc.0 . 0)
     (apply.gloc.of formals->list "./boot/macro/expand.scm" . 15377))
   (push)
   (extend . 1)
   (call
     (call
       (touch.gloc.of every1)
       (push.gloc.of symbol?)
       (push.iloc.0 . 0)
       (apply.gloc.of every1 "./boot/macro/expand.scm" . 16395))
     (if.true.ret)
     (push.car.iloc (1 . 1) "./boot/macro/expand.scm" . 17437)
     (push.const . "malformed formals")
     (push.iloc.1 . 1)
     (push.iloc.1 . 0)
     (apply.gloc.of syntax-violation "./boot/macro/expand.scm" . 17419))
   (call
     (call
       (touch.gloc.of unique-id-list?)
       (push.iloc.0 . 0)
       (apply.gloc.of unique-id-list? "./boot/macro/expand.scm" . 18443))
     (if.true.ret)
     (push.car.iloc (1 . 1) "./boot/macro/expand.scm" . 19485)
     (push.const . "duplicate formals")
     (push.iloc.1 . 1)
     (push.iloc.1 . 0)
     (apply.gloc.of syntax-violation "./boot/macro/expand.scm" . 19467))
   (ret.iloc 0 . 0))
 (set.gloc.of collect-lambda-formals)
 (ret.const.unspec))
((close
   (2 0 . rename-lambda-formals)
   (iloc.0 . 0)
   (if.null?.ret.const)
   (iloc.0 . 0)
   (if.pair?
     (push.car.iloc (0 . 0) "./boot/macro/expand.scm" . 26653)
     (push.iloc.0 . 1)
     (push.subr.gloc.of assq 2 "./boot/macro/expand.scm" . 26647)
     (push.subr.gloc.of cdr 1 "./boot/macro/expand.scm" . 26642)
     (call
       (touch.gloc.of rename-lambda-formals)
       (push.cdr.iloc (0 . 0) "./boot/macro/expand.scm" . 27689)
       (push.iloc.0 . 1)
       (apply.gloc.of rename-lambda-formals "./boot/macro/expand.scm" . 27666))
     (ret.cons "./boot/macro/expand.scm" . 26636))
   (push.iloc.0 . 0)
   (push.iloc.0 . 1)
   (push.subr.gloc.of assq 2 "./boot/macro/expand.scm" . 29713)
   (ret.subr.gloc.of cdr "./boot/macro/expand.scm" . 29708))
 (set.gloc.of rename-lambda-formals)
 (ret.const.unspec))
((close
   (3 0 . annotate-bindings)
   (push.close
     (2 0)
     (iloc.0 . 1)
     (if.not.pair?.ret.const . #f)
     (call
       (touch.gloc.of denote-lambda?)
       (push.iloc.1 . 2)
       (push.car.iloc (0 . 1) "./boot/macro/expand.scm" . 35882)
       (apply.gloc.of denote-lambda? "./boot/macro/expand.scm" . 35862))
     (if.false.ret)
     (touch.gloc.of set-closure-comment!)
     (push.iloc.0 . 1)
     (call
       (touch.gloc.of original-id)
       (push.iloc.0 . 0)
       (apply.gloc.of original-id "./boot/macro/expand.scm" . 36913))
     (push)
     (apply.gloc.of set-closure-comment! "./boot/macro/expand.scm" . 36886))
   (push.iloc.0 . 0)
   (push.iloc.0 . 1)
   (apply.gloc.of for-each "./boot/macro/expand.scm" . 33797))
 (set.gloc.of annotate-bindings)
 (ret.const.unspec))
((close
   (2 0 . check-let*-bindings)
   (call
     (push.iloc.0 . 1)
     (subr.gloc.of list? 1 "./boot/macro/expand.scm" . 41993)
     (if.true.ret)
     (push.car.iloc (0 . 0) "./boot/macro/expand.scm" . 43035)
     (push.const . "malformed bindings")
     (push.iloc.0 . 0)
     (push.iloc.0 . 1)
     (apply.gloc.of syntax-violation "./boot/macro/expand.scm" . 43017))
   (push.close
     (1 0)
     (call
       (call
         (touch.gloc.of safe-length)
         (push.iloc.0 . 0)
         (apply.gloc.of safe-length "./boot/macro/expand.scm" . 45085))
       (push)
       (push.const . 2)
       (subr.gloc.of = 2 "./boot/macro/expand.scm" . 45082)
       (if.false.ret)
       (push.car.iloc (0 . 0) "./boot/macro/expand.scm" . 45119)
       (ret.subr.gloc.of symbol? "./boot/macro/expand.scm" . 45110))
     (if.true.ret)
     (push.car.iloc (1 . 0) "./boot/macro/expand.scm" . 46119)
     (push.const . "expected each binding consist of symbol and expression")
     (push.iloc.1 . 0)
     (push.iloc.0 . 0)
     (apply.gloc.of syntax-violation "./boot/macro/expand.scm" . 46101))
   (push.iloc.0 . 1)
   (apply.gloc.of for-each "./boot/macro/expand.scm" . 44037))
 (set.gloc.of check-let*-bindings)
 (ret.const.unspec))
((close
   (2 0 . check-let-bindings)
   (call
     (push.iloc.0 . 1)
     (subr.gloc.of list? 1 "./boot/macro/expand.scm" . 51209)
     (if.true.ret)
     (push.car.iloc (0 . 0) "./boot/macro/expand.scm" . 52251)
     (push.const . "malformed bindings")
     (push.iloc.0 . 0)
     (push.iloc.0 . 1)
     (apply.gloc.of syntax-violation "./boot/macro/expand.scm" . 52233))
   (call
     (touch.gloc.of unique-id-list?)
     (call
       (push.close
         (1 0)
         (call
           (call
             (touch.gloc.of safe-length)
             (push.iloc.0 . 0)
             (apply.gloc.of safe-length "./boot/macro/expand.scm" . 55325))
           (push)
           (push.const . 2)
           (subr.gloc.of = 2 "./boot/macro/expand.scm" . 55322)
           (if.false.ret)
           (car.iloc (0 . 0) "./boot/macro/expand.scm" . 55359)
           (if.not.symbol?.ret.const . #f)
           (push.iloc.0 . 0)
           (ret.subr.gloc.of car "./boot/macro/expand.scm" . 55374))
         (if.true.ret)
         (push.car.iloc (1 . 0) "./boot/macro/expand.scm" . 56359)
         (push.const . "expected each binding consist of symbol and expression")
         (push.iloc.1 . 0)
         (push.iloc.0 . 0)
         (apply.gloc.of syntax-violation "./boot/macro/expand.scm" . 56341))
       (push.iloc.0 . 1)
       (apply.gloc.of map "./boot/macro/expand.scm" . 54282))
     (push)
     (apply.gloc.of unique-id-list? "./boot/macro/expand.scm" . 53257))
   (if.true.ret)
   (push.car.iloc (0 . 0) "./boot/macro/expand.scm" . 58395)
   (push.const . "duplicate bindings")
   (push.iloc.0 . 0)
   (apply.gloc.of syntax-violation "./boot/macro/expand.scm" . 58377))
 (set.gloc.of check-let-bindings)
 (ret.const.unspec))
((close
   (1 0 . collect-ids)
   (touch.gloc.of |filter-unique-ids`395*|)
   (call
     (touch.gloc.of |loop`408*|)
     (push.iloc.0 . 0)
     (apply.gloc.of |loop`408*| "./boot/macro/expand.scm" . 78860))
   (push)
   (apply.gloc.of |filter-unique-ids`395*| (|filter-unique-ids`395*| (|loop`408*| |lst`404*|))))
 (set.gloc.of |collect-ids`395*|)
 (close
   (1 0 . loop)
   (iloc.0 . 0)
   (if.symbol? (ret.iloc 0 . 0))
   (call
     (iloc.0 . 0)
     (if.not.pair?.ret.const . #f)
     (push.car.iloc (0 . 0) "./boot/macro/expand.scm" . 80930)
     (push.const . quote)
     (push.subr.gloc.of eq? 2 "./boot/macro/expand.scm" . 80925)
     (ret.subr.gloc.of not "./boot/macro/expand.scm" . 80920))
   (if.true
     (push.gloc.of |loop`408*|)
     (push.iloc.0 . 0)
     (apply.gloc.of map "./boot/macro/expand.scm" . 81939))
   (ret.const))
 (set.gloc.of |loop`408*|)
 (close
   (1 0 . filter-unique-ids)
   (touch.gloc.of |loop`400*|)
   (push.iloc.0 . 0)
   (push.const)
   (apply.gloc.of |loop`400*| "./boot/macro/expand.scm" . 66571))
 (set.gloc.of |filter-unique-ids`395*|)
 (close
   (2 0 . loop)
   (iloc.0 . 0)
   (if.pair?
     (touch.gloc.of |loop`400*|)
     (push.cdr.iloc (0 . 0) "./boot/macro/expand.scm" . 67608)
     (call
       (touch.gloc.of |loop`400*|)
       (push.car.iloc (0 . 0) "./boot/macro/expand.scm" . 68638)
       (push.iloc.0 . 1)
       (apply.gloc.of |loop`400*| "./boot/macro/expand.scm" . 68632))
     (push)
     (apply.gloc.of |loop`400*| "./boot/macro/expand.scm" . 67602))
   (iloc.0 . 0)
   (if.symbol?
     (push.iloc.0 . 0)
     (push.iloc.0 . 1)
     (subr.gloc.of memq 2 "./boot/macro/expand.scm" . 70681)
     (if.true (ret.iloc 0 . 1))
     (push.iloc.0 . 0)
     (iloc.0 . 1)
     (ret.cons "./boot/macro/expand.scm" . 71710))
   (ret.iloc 0 . 1))
 (set.gloc.of |loop`400*|)
 (close
   (2 0 . check-internal-def-contract-violation)
   (call
     (touch.gloc.of |collect-ids`395*|)
     (push.iloc.0 . 1)
     (apply.gloc.of |collect-ids`395*| "./boot/macro/expand.scm" . 85008))
   (push)
   (extend . 1)
   (touch.gloc.of any1)
   (push.close
     (1 0)
     (push.iloc.0 . 0)
     (push.iloc.1 . 0)
     (subr.gloc.of memq 2 "./boot/macro/expand.scm" . 86047)
     (if.false.ret)
     (ret.iloc 0 . 0))
   (push.iloc.1 . 0)
   (apply.gloc.of any1 "./boot/macro/expand.scm" . 86023))
 (set.gloc.of check-internal-def-contract-violation)
 (ret.const.unspec))
((close
   (1 0 . filter-unique-ids)
   (touch.gloc.of |loop`422*|)
   (push.iloc.0 . 0)
   (push.const)
   (apply.gloc.of |loop`422*| "./boot/macro/expand.scm" . 94219))
 (set.gloc.of |filter-unique-ids`417*|)
 (close
   (1 0 . loop)
   (iloc.0 . 0)
   (if.symbol? (ret.iloc 0 . 0))
   (call
     (iloc.0 . 0)
     (if.not.pair?.ret.const . #f)
     (push.car.iloc (0 . 0) "./boot/macro/expand.scm" . 108579)
     (push.const lambda quote)
     (push.subr.gloc.of memq 2 "./boot/macro/expand.scm" . 108573)
     (ret.subr.gloc.of not "./boot/macro/expand.scm" . 108568))
   (if.true
     (push.gloc.of |loop`430*|)
     (push.iloc.0 . 0)
     (apply.gloc.of map "./boot/macro/expand.scm" . 109587))
   (ret.const))
 (set.gloc.of |loop`430*|)
 (close
   (2 0 . loop)
   (iloc.0 . 0)
   (if.pair?
     (touch.gloc.of |loop`422*|)
     (push.cdr.iloc (0 . 0) "./boot/macro/expand.scm" . 95256)
     (call
       (touch.gloc.of |loop`422*|)
       (push.car.iloc (0 . 0) "./boot/macro/expand.scm" . 96286)
       (push.iloc.0 . 1)
       (apply.gloc.of |loop`422*| "./boot/macro/expand.scm" . 96280))
     (push)
     (apply.gloc.of |loop`422*| "./boot/macro/expand.scm" . 95250))
   (iloc.0 . 0)
   (if.symbol?
     (push.iloc.0 . 0)
     (push.iloc.0 . 1)
     (subr.gloc.of memq 2 "./boot/macro/expand.scm" . 98329)
     (if.true (ret.iloc 0 . 1))
     (push.iloc.0 . 0)
     (iloc.0 . 1)
     (ret.cons "./boot/macro/expand.scm" . 99358))
   (ret.iloc 0 . 1))
 (set.gloc.of |loop`422*|)
 (close
   (1 0 . collect-ids)
   (touch.gloc.of |filter-unique-ids`417*|)
   (call
     (touch.gloc.of |loop`430*|)
     (push.iloc.0 . 0)
     (apply.gloc.of |loop`430*| "./boot/macro/expand.scm" . 106508))
   (push)
   (apply.gloc.of |filter-unique-ids`417*| (|filter-unique-ids`417*| (|loop`430*| |lst`426*|))))
 (set.gloc.of |collect-ids`417*|)
 (close
   (2 0 . check-rec-contract-violation)
   (call
     (touch.gloc.of |collect-ids`417*|)
     (push.iloc.0 . 1)
     (apply.gloc.of |collect-ids`417*| "./boot/macro/expand.scm" . 112656))
   (push)
   (extend . 1)
   (extend.enclose+
     (2 0 . loop)
     (iloc.0 . 0)
     (if.pair?
       (push.car.iloc (0 . 0) "./boot/macro/expand.scm" . 115735)
       (push.iloc 2 . 0)
       (subr.gloc.of memq 2 "./boot/macro/expand.scm" . 115729)
       (if.true
         (push.cdr.iloc (0 . 0) "./boot/macro/expand.scm" . 116759)
         (push.car.iloc (0 . 0) "./boot/macro/expand.scm" . 116776)
         (iloc.0 . 1)
         (push.cons)
         (apply.iloc+ (1 . 0) "./boot/macro/expand.scm" . 116753))
       (push.cdr.iloc (0 . 0) "./boot/macro/expand.scm" . 117783)
       (push.iloc.0 . 1)
       (apply.iloc+ (1 . 0) "./boot/macro/expand.scm" . 117777))
     (iloc.0 . 1)
     (if.not.pair?.ret.const . #f)
     (push.iloc.0 . 1)
     (ret.subr.gloc.of reverse "./boot/macro/expand.scm" . 118814))
   (push.iloc 2 . 0)
   (push.const)
   (apply.iloc+ (0 . 0) "./boot/macro/expand.scm" . 114697))
 (set.gloc.of check-rec-contract-violation)
 (ret.const.unspec))
((close
   (3 0 . loop)
   (iloc.0 . 0)
   (if.pair?
     (call
       (touch.gloc.of check-rec-contract-violation)
       (push.iloc.0 . 0)
       (push.car.iloc (0 . 1) "./boot/macro/expand.scm" . 124978)
       (apply.gloc.of check-rec-contract-violation "./boot/macro/expand.scm" . 124943))
     (if.true
       (touch.gloc.of |loop`446*|)
       (push.cdr.iloc (0 . 0) "./boot/macro/expand.scm" . 125973)
       (push.cdr.iloc (0 . 1) "./boot/macro/expand.scm" . 125984)
       (push.car.iloc (0 . 0) "./boot/macro/expand.scm" . 126002)
       (iloc.0 . 2)
       (push.cons)
       (apply.gloc.of |loop`446*| "./boot/macro/expand.scm" . 125967))
     (touch.gloc.of |loop`446*|)
     (push.cdr.iloc (0 . 0) "./boot/macro/expand.scm" . 126997)
     (push.cdr.iloc (0 . 1) "./boot/macro/expand.scm" . 127008)
     (push.iloc.0 . 2)
     (apply.gloc.of |loop`446*| "./boot/macro/expand.scm" . 126991))
   (iloc.0 . 2)
   (if.not.pair?.ret.const . #f)
   (push.iloc.0 . 2)
   (ret.subr.gloc.of reverse "./boot/macro/expand.scm" . 128028))
 (set.gloc.of |loop`446*|)
 (close
   (2 0 . check-rec*-contract-violation)
   (touch.gloc.of |loop`446*|)
   (push.iloc.0 . 0)
   (push.iloc.0 . 1)
   (push.const)
   (apply.gloc.of |loop`446*| "./boot/macro/expand.scm" . 123911))
 (set.gloc.of check-rec*-contract-violation)
 (ret.const.unspec))
((close
   (2 0)
   (push.iloc.0 . 0)
   (push.iloc.0 . 1)
   (ret.subr.gloc.of append "./boot/macro/expand.scm" . 139271))
 (set.gloc.of |.L201|)
 (close
   (2 0 . rewrite-letrec*-bindings)
   (push.close
     (0 0)
     (push.close
       (1 0)
       (cadr.iloc (0 . 0) "./boot/macro/expand.scm" . 134187)
       (if.pair?
         (call
           (touch.gloc.of denote-quote?)
           (push.iloc 2 . 1)
           (push.iloc.0 . 0)
           (push.subr.gloc.of caadr 1 "./boot/macro/expand.scm" . 135227)
           (apply.gloc.of denote-quote? "./boot/macro/expand.scm" . 135208))
         (if.true.ret)
         (touch.gloc.of denote-lambda?)
         (push.iloc 2 . 1)
         (push.iloc.0 . 0)
         (push.subr.gloc.of caadr 1 "./boot/macro/expand.scm" . 136252)
         (apply.gloc.of denote-lambda? "./boot/macro/expand.scm" . 136232))
       (push.cadr.iloc (0 . 0) "./boot/macro/expand.scm" . 137266)
       (push.subr.gloc.of symbol? 1 "./boot/macro/expand.scm" . 137257)
       (ret.subr.gloc.of not "./boot/macro/expand.scm" . 137252))
     (push.iloc.1 . 0)
     (apply.gloc.of partition "./boot/macro/expand.scm" . 133139))
   (push.gloc.of |.L201|)
   (apply.gloc.of |.call-with-values| "./boot/macro/expand.scm" . 133139))
 (set.gloc.of rewrite-letrec*-bindings)
 (ret.const.unspec))
((close
   (2 0 . flatten-begin)
   (extend.enclose+
     (1 0 . concatenate?)
     (car.iloc (0 . 0) "./boot/macro/expand.scm" . 146453)
     (if.not.pair?.ret.const . #f)
     (touch.gloc.of denote-begin?)
     (push.iloc 2 . 1)
     (push.iloc.0 . 0)
     (push.subr.gloc.of caar 1 "./boot/macro/expand.scm" . 147489)
     (apply.gloc.of denote-begin? "./boot/macro/expand.scm" . 147470))
   (touch.gloc.of annotate)
   (call
     (extend.enclose+
       (2 0 . loop)
       (iloc.0 . 0)
       (if.null? (ret.iloc 0 . 1))
       (call (push.iloc.0 . 0) (apply.iloc+ (2 . 0) "./boot/macro/expand.scm" . 152591))
       (if.true
         (push.iloc.0 . 0)
         (push.subr.gloc.of cdar 1 "./boot/macro/expand.scm" . 153621)
         (call
           (push.cdr.iloc (0 . 0) "./boot/macro/expand.scm" . 154651)
           (push.iloc.0 . 1)
           (apply.iloc+ (1 . 0) "./boot/macro/expand.scm" . 154645))
         (push)
         (apply.iloc+ (1 . 0) "./boot/macro/expand.scm" . 153615))
       (iloc.0 . 1)
       (if.null? (ret.iloc 0 . 0))
       (push.iloc.0 . 0)
       (push.iloc.0 . 1)
       (ret.subr.gloc.of append "./boot/macro/expand.scm" . 158742))
     (push.iloc 2 . 0)
     (push.const)
     (apply.iloc+ (0 . 0) "./boot/macro/expand.scm" . 151560))
   (push)
   (push.iloc.1 . 0)
   (apply.gloc.of
     annotate
     (annotate
       (letrec* ((|loop`462*|
                   (lambda (|lst`463*| |ans`463*|)
                     (if (null? |lst`463*|)
                         |ans`463*|
                         (if (|concatenate?`457*| |lst`463*|)
                             (|loop`462*|
                               (cdar |lst`463*|)
                               (|loop`462*| (cdr |lst`463*|) |ans`463*|))
                             (if (null? |ans`463*|) |lst`463*| (append |lst`463*| |ans`463*|)))))))
         (|loop`462*| |form`456*| '()))
       |form`456*|)))
 (set.gloc.of flatten-begin)
 (ret.const.unspec))
((close
   (2 0 . flatten-top-level-begin)
   (extend.enclose+
     (1 0 . concatenate?)
     (car.iloc (0 . 0) "./boot/macro/expand.scm" . 166933)
     (if.not.pair?.ret.const . #f)
     (touch.gloc.of denote-begin?)
     (push.iloc 2 . 1)
     (push.iloc.0 . 0)
     (push.subr.gloc.of caar 1 "./boot/macro/expand.scm" . 167969)
     (apply.gloc.of denote-begin? "./boot/macro/expand.scm" . 167950))
   (touch.gloc.of annotate)
   (call
     (extend.enclose+
       (2 0 . loop)
       (iloc.0 . 0)
       (if.null? (ret.iloc 0 . 1))
       (call (push.iloc.0 . 0) (apply.iloc+ (2 . 0) "./boot/macro/expand.scm" . 173071))
       (if.true
         (push.iloc.0 . 0)
         (push.subr.gloc.of cdar 1 "./boot/macro/expand.scm" . 174101)
         (call
           (push.cdr.iloc (0 . 0) "./boot/macro/expand.scm" . 175131)
           (push.iloc.0 . 1)
           (apply.iloc+ (1 . 0) "./boot/macro/expand.scm" . 175125))
         (push)
         (apply.iloc+ (1 . 0) "./boot/macro/expand.scm" . 174095))
       (push.car.iloc (0 . 0) "./boot/macro/expand.scm" . 177173)
       (call
         (push.cdr.iloc (0 . 0) "./boot/macro/expand.scm" . 178203)
         (push.iloc.0 . 1)
         (apply.iloc+ (1 . 0) "./boot/macro/expand.scm" . 178197))
       (ret.cons "./boot/macro/expand.scm" . 177167))
     (push.iloc 2 . 0)
     (push.const)
     (apply.iloc+ (0 . 0) "./boot/macro/expand.scm" . 172040))
   (push)
   (push.iloc.1 . 0)
   (apply.gloc.of
     annotate
     (annotate
       (letrec* ((|loop`472*|
                   (lambda (|lst`473*| |ans`473*|)
                     (if (null? |lst`473*|)
                         |ans`473*|
                         (if (|concatenate?`467*| |lst`473*|)
                             (|loop`472*|
                               (cdar |lst`473*|)
                               (|loop`472*| (cdr |lst`473*|) |ans`473*|))
                             (cons (car |lst`473*|) (|loop`472*| (cdr |lst`473*|) |ans`473*|)))))))
         (|loop`472*| |form`466*| '()))
       |form`466*|)))
 (set.gloc.of flatten-top-level-begin)
 (ret.const.unspec))
((close
   (3 0 . compile-macro)
   (extend.unbound . 2)
   (push.close+
     (2 0 . compile-transformer)
     (call
       (touch.gloc.of expand-form)
       (push.iloc.0 . 0)
       (call
         (touch.gloc.of extend-env)
         (push.const |.vars| . |.vars|)
         (call
           (subr.gloc.of make-core-hashtable 0)
           (push)
           (call
             (touch.gloc.of make-out-of-context)
             (push.const . #f)
             (apply.gloc.of make-out-of-context "./boot/macro/expand.scm" . 187447))
           (push)
           (extend . 2)
           (call
             (push.close
               (1 0)
               (car.iloc (0 . 0) "./boot/macro/expand.scm" . 189484)
               (if.not.symbol?.ret.const . #f)
               (call
                 (touch.gloc.of renamed-id?)
                 (push.cdr.iloc (0 . 0) "./boot/macro/expand.scm" . 190512)
                 (apply.gloc.of renamed-id? "./boot/macro/expand.scm" . 190499))
               (if.false.ret)
               (push.iloc.1 . 0)
               (push.car.iloc (0 . 0) "./boot/macro/expand.scm" . 191550)
               (push.const . #f)
               (subr.gloc.of core-hashtable-ref 3 "./boot/macro/expand.scm" . 191527)
               (if.true.ret)
               (push.iloc.1 . 0)
               (push.car.iloc (0 . 0) "./boot/macro/expand.scm" . 192575)
               (push.iloc.1 . 1)
               (ret.subr.gloc.of core-hashtable-set! "./boot/macro/expand.scm" . 192551))
             (push.iloc.1 . 1)
             (apply.gloc.of for-each "./boot/macro/expand.scm" . 188434))
           (push.iloc.0 . 0)
           (ret.subr.gloc.of core-hashtable->alist "./boot/macro/expand.scm" . 194578))
         (push.cons)
         (push.iloc.0 . 1)
         (apply.gloc.of extend-env "./boot/macro/expand.scm" . 195632))
       (push)
       (apply.gloc.of expand-form "./boot/macro/expand.scm" . 195607))
     (push)
     (extend . 1)
     (call
       (touch.gloc.of interpret-coreform)
       (push.const . |.transformer-thunk|)
       (push.iloc.0 . 0)
       (push.subr.gloc.of |.list| 2 "./boot/macro/expand.scm" . 196633)
       (apply.gloc.of interpret-coreform "./boot/macro/expand.scm" . 196633))
     (push)
     (extend . 1)
     (push.iloc.0 . 0)
     (subr.gloc.of procedure? 1 "./boot/macro/expand.scm" . 197654)
     (if.true
       (push.iloc.0 . 0)
       (push.iloc.1 . 0)
       (ret.subr.gloc.of values "./boot/macro/expand.scm" . 197672))
     (call
       (touch.gloc.of variable-transformer-token?)
       (push.iloc.0 . 0)
       (apply.gloc.of variable-transformer-token? "./boot/macro/expand.scm" . 198678))
     (if.true
       (call
         (touch.gloc.of make-macro-variable)
         (push.iloc.0 . 0)
         (push.const . 1)
         (push.subr.gloc.of tuple-ref 2 "./boot/macro/expand.scm" . 199731)
         (push.iloc 2 . 1)
         (apply.gloc.of make-macro-variable "./boot/macro/expand.scm" . 199710))
       (push)
       (push.iloc.1 . 0)
       (ret.subr.gloc.of values "./boot/macro/expand.scm" . 199702))
     (push.car.iloc (4 . 0) "./boot/macro/expand.scm" . 201768)
     (push.const . "invalid transformer expression")
     (push.iloc 4 . 0)
     (push.iloc 2 . 0)
     (apply.gloc.of syntax-violation "./boot/macro/expand.scm" . 201750))
   (push.close
     (1 0 . syntax-rules?)
     (touch.gloc.of denote-syntax-rules?)
     (push.iloc 2 . 2)
     (push.iloc.0 . 0)
     (apply.gloc.of denote-syntax-rules? "./boot/macro/expand.scm" . 205833))
   (enclose . 2)
   (call
     (iloc.1 . 1)
     (if.not.pair?.ret.const . #f)
     (cdr.iloc (1 . 1) "./boot/macro/expand.scm" . 207877)
     (if.not.null?.ret.const . #f)
     (push.car.iloc (1 . 1) "./boot/macro/expand.scm" . 207877)
     (apply.iloc (0 . 1) "./boot/macro/expand.scm" . 207877))
   (if.true
     (push.const . syntax-rules)
     (push.const . "expected literals and rules")
     (push.iloc.1 . 1)
     (apply.gloc.of syntax-violation "./boot/macro/expand.scm" . 207877))
   (call
     (iloc.1 . 1)
     (if.not.pair?.ret.const . #f)
     (cdr.iloc (1 . 1) "./boot/macro/expand.scm" . 207877)
     (if.not.pair?.ret.const . #f)
     (push.cddr.iloc (1 . 1) "./boot/macro/expand.scm" . 207877)
     (subr.gloc.of list? 1 "./boot/macro/expand.scm" . 207877)
     (if.false.ret)
     (push.car.iloc (1 . 1) "./boot/macro/expand.scm" . 207877)
     (apply.iloc (0 . 1) "./boot/macro/expand.scm" . 207877))
   (if.true
     (push.cddr.iloc (1 . 1) "./boot/macro/expand.scm" . 207877)
     (push.cadr.iloc (1 . 1) "./boot/macro/expand.scm" . 207877)
     (extend . 2)
     (call
       (call
         (push.iloc.0 . 1)
         (subr.gloc.of list? 1 "./boot/macro/expand.scm" . 207877)
         (if.false.ret)
         (touch.gloc.of every1)
         (push.gloc.of symbol?)
         (push.iloc.0 . 1)
         (apply.gloc.of every1 "./boot/macro/expand.scm" . 207877))
       (if.true.ret)
       (push.const . syntax-rules)
       (push.const . "invalid literals")
       (push.iloc 2 . 1)
       (push.iloc.0 . 1)
       (apply.gloc.of syntax-violation "./boot/macro/expand.scm" . 207877))
     (call
       (call
         (touch.gloc.of unique-id-list?)
         (push.iloc.0 . 1)
         (apply.gloc.of unique-id-list? "./boot/macro/expand.scm" . 207877))
       (if.true.ret)
       (push.const . syntax-rules)
       (push.const . "duplicate literals")
       (push.iloc 2 . 1)
       (push.iloc.0 . 1)
       (apply.gloc.of syntax-violation "./boot/macro/expand.scm" . 207877))
     (call
       (push.const . _)
       (push.iloc.0 . 1)
       (subr.gloc.of memq 2 "./boot/macro/expand.scm" . 207877)
       (if.false.ret)
       (push.const . syntax-rules)
       (push.const . "_ in literals")
       (push.iloc 2 . 1)
       (push.iloc.0 . 1)
       (apply.gloc.of syntax-violation "./boot/macro/expand.scm" . 207877))
     (call
       (push.const . ...)
       (push.iloc.0 . 1)
       (subr.gloc.of memq 2 "./boot/macro/expand.scm" . 207877)
       (if.false.ret)
       (push.const . syntax-rules)
       (push.const . "... in literals")
       (push.iloc 2 . 1)
       (push.iloc.0 . 1)
       (apply.gloc.of syntax-violation "./boot/macro/expand.scm" . 207877))
     (call
       (push.close
         (1 0)
         (call
           (iloc.0 . 0)
           (if.not.pair?.ret.const . #f)
           (car.iloc (0 . 0) "./boot/macro/expand.scm" . 207877)
           (if.not.pair?.ret.const . #f)
           (cdr.iloc (0 . 0) "./boot/macro/expand.scm" . 207877)
           (if.not.pair?.ret.const . #f)
           (cddr.iloc (0 . 0) "./boot/macro/expand.scm" . 207877)
           (ret.null? "./boot/macro/expand.scm" . 207877))
         (push)
         (extend . 1)
         (call
           (iloc.0 . 0)
           (if.false.ret)
           (push.iloc.1 . 0)
           (push.subr.gloc.of caar 1 "./boot/macro/expand.scm" . 207877)
           (ret.subr.gloc.of symbol? "./boot/macro/expand.scm" . 207877))
         (if.true.ret.const . #t)
         (iloc.0 . 0)
         (if.true
           (push.const . syntax-rules)
           (push.const . "expected identifer for first subform of pattern")
           (push.iloc 4 . 1)
           (push.iloc.1 . 0)
           (apply.gloc.of syntax-violation "./boot/macro/expand.scm" . 207877))
         (call
           (iloc.1 . 0)
           (if.not.pair?.ret.const . #f)
           (cdr.iloc (1 . 0) "./boot/macro/expand.scm" . 207877)
           (if.not.pair?.ret.const . #f)
           (cddr.iloc (1 . 0) "./boot/macro/expand.scm" . 207877)
           (ret.null? "./boot/macro/expand.scm" . 207877))
         (if.true
           (push.const . syntax-rules)
           (push.const . "expected list for pattern")
           (push.iloc 4 . 1)
           (push.iloc.1 . 0)
           (apply.gloc.of syntax-violation "./boot/macro/expand.scm" . 207877))
         (push.const . syntax-rules)
         (push.const . "expected (pattern template) for each rule")
         (push.iloc 4 . 1)
         (push.iloc.1 . 0)
         (apply.gloc.of syntax-violation "./boot/macro/expand.scm" . 207877))
       (push.iloc.0 . 0)
       (apply.gloc.of
         for-each
         (for-each (lambda (|clause`499*|)
                     (let ((|.L213`501`504*|
                             (and (pair? |clause`499*|)
                                  (pair? (car |clause`499*|))
                                  (pair? (cdr |clause`499*|))
                                  (null? (cddr |clause`499*|)))))
                       (if (and |.L213`501`504*| (symbol? (caar |clause`499*|)))
                           #t
                           (if |.L213`501`504*|
                               (syntax-violation
                                 'syntax-rules
                                 "expected identifer for first subform of pattern"
                                 |transformer`476*|
                                 |clause`499*|)
                               (if (and (pair? |clause`499*|)
                                        (pair? (cdr |clause`499*|))
                                        (null? (cddr |clause`499*|)))
                                   (syntax-violation
                                     'syntax-rules
                                     "expected list for pattern"
                                     |transformer`476*|
                                     |clause`499*|)
                                   (syntax-violation
                                     'syntax-rules
                                     "expected (pattern template) for each rule"
                                     |transformer`476*|
                                     |clause`499*|))))))
                   |clauses`497*|)))
     (touch.gloc.of compile-syntax-rules)
     (push.iloc 2 . 1)
     (push.iloc.0 . 1)
     (push.iloc.0 . 0)
     (push.iloc 2 . 2)
     (apply.gloc.of compile-syntax-rules "./boot/macro/expand.scm" . 207877))
   (push.iloc.1 . 1)
   (push.iloc.1 . 2)
   (apply.iloc+ (0 . 0) "./boot/macro/expand.scm" . 207877))
 (set.gloc.of compile-macro)
 (ret.const.unspec))
((close
   (2 0)
   (push.iloc.0 . 0)
   (call
     (touch.gloc.of generate-local-macro-symbol)
     (push.iloc.0 . 1)
     (apply.gloc.of generate-local-macro-symbol "./boot/macro/expand.scm" . 245815))
   (ret.cons "./boot/macro/expand.scm" . 245803))
 (set.gloc.of |.L217|)
 (close
   (3 0 . expand-let-syntax-bindings)
   (call
     (push.gloc.of car)
     (push.iloc.0 . 1)
     (apply.gloc.of map "./boot/macro/expand.scm" . 237585))
   (push)
   (extend . 1)
   (touch.gloc.of extend-env)
   (call
     (call
       (push.close
         (1 0)
         (push.close
           (0 0)
           (touch.gloc.of compile-macro)
           (push.iloc 3 . 0)
           (push.iloc.1 . 0)
           (push.iloc 3 . 2)
           (apply.gloc.of compile-macro "./boot/macro/expand.scm" . 241718))
         (push.close
           (1 1)
           (call
             (touch.gloc.of macro-variable?)
             (push.iloc.0 . 0)
             (apply.gloc.of macro-variable? "./boot/macro/expand.scm" . 242726))
           (if.true (ret.iloc 0 . 0))
           (touch.gloc.of make-macro)
           (push.iloc.0 . 0)
           (push.iloc 3 . 2)
           (apply.gloc.of make-macro "./boot/macro/expand.scm" . 243755))
         (apply.gloc.of
           |.call-with-values|
           (|.call-with-values|
             (lambda () (compile-macro |form`512*| |spec`516*| |env`512*|))
             (lambda (|code`518*| . |_`518*|)
               (if (macro-variable? |code`518*|)
                   |code`518*|
                   (make-macro |code`518*| |env`512*|))))))
       (call
         (push.gloc.of cadr)
         (push.iloc.1 . 1)
         (apply.gloc.of map "./boot/macro/expand.scm" . 238610))
       (push)
       (apply.gloc.of map "./boot/macro/expand.scm" . 240667))
     (push)
     (extend . 1)
     (call
       (push.gloc.of |.L217|)
       (push.iloc.0 . 0)
       (push.iloc.1 . 0)
       (apply.gloc.of map "./boot/macro/expand.scm" . 245778))
     (push)
     (call
       (push.gloc.of cons)
       (push.iloc.1 . 0)
       (push.iloc.0 . 0)
       (apply.gloc.of map "./boot/macro/expand.scm" . 246802))
     (push)
     (ret.subr.gloc.of append "./boot/macro/expand.scm" . 245770))
   (push)
   (push.iloc.1 . 2)
   (apply.gloc.of extend-env "./boot/macro/expand.scm" . 240648))
 (set.gloc.of expand-let-syntax-bindings)
 (ret.const.unspec))
((close
   (2 0)
   (push.iloc.0 . 0)
   (call
     (touch.gloc.of generate-local-macro-symbol)
     (push.iloc.0 . 1)
     (apply.gloc.of generate-local-macro-symbol "./boot/macro/expand.scm" . 261202))
   (ret.cons "./boot/macro/expand.scm" . 261182))
 (set.gloc.of |.L221|)
 (close
   (3 0 . expand-letrec-syntax-bindings)
   (extend.enclose
     (1 0 . undefined-macro)
     (push.car.iloc (2 . 0) "./boot/macro/expand.scm" . 255003)
     (push.const . "attempt to reference uninitialized syntactic keyword")
     (push.iloc 2 . 0)
     (push.iloc.0 . 0)
     (apply.gloc.of syntax-violation "./boot/macro/expand.scm" . 254985))
   (call
     (push.gloc.of car)
     (push.iloc.1 . 1)
     (apply.gloc.of map "./boot/macro/expand.scm" . 257041))
   (push)
   (call
     (push.gloc.of cadr)
     (push.iloc.1 . 1)
     (apply.gloc.of map "./boot/macro/expand.scm" . 258066))
   (push)
   (extend . 2)
   (call
     (push.close
       (1 0)
       (touch.gloc.of make-macro)
       (push.iloc 2 . 0)
       (push.const)
       (apply.gloc.of make-macro "./boot/macro/expand.scm" . 259121))
     (push.iloc.0 . 1)
     (apply.gloc.of map "./boot/macro/expand.scm" . 259101))
   (push)
   (extend . 1)
   (call
     (touch.gloc.of extend-env)
     (call
       (push.gloc.of |.L221|)
       (push.iloc.0 . 0)
       (push.iloc.1 . 0)
       (apply.gloc.of map "./boot/macro/expand.scm" . 261149))
     (push)
     (call
       (push.gloc.of cons)
       (push.iloc.1 . 0)
       (push.iloc.0 . 0)
       (apply.gloc.of map "./boot/macro/expand.scm" . 262173))
     (push)
     (push.subr.gloc.of append 2 "./boot/macro/expand.scm" . 261141)
     (push.iloc 3 . 2)
     (apply.gloc.of extend-env "./boot/macro/expand.scm" . 260116))
   (push)
   (extend . 1)
   (call
     (push.close
       (2 0)
       (call
         (touch.gloc.of env-lookup)
         (push.iloc.1 . 0)
         (push.iloc.0 . 0)
         (apply.gloc.of env-lookup "./boot/macro/expand.scm" . 269365))
       (push)
       (push.cdr.iloc (0 . 1) "./boot/macro/expand.scm" . 269386)
       (ret.subr.gloc.of set-cdr! "./boot/macro/expand.scm" . 269355))
     (push.iloc 2 . 0)
     (call
       (push.close
         (1 0)
         (push.close
           (0 0)
           (touch.gloc.of compile-macro)
           (push.iloc 6 . 0)
           (push.iloc.1 . 0)
           (push.iloc 2 . 0)
           (apply.gloc.of compile-macro "./boot/macro/expand.scm" . 265273))
         (push.close
           (1 1)
           (call
             (touch.gloc.of macro-variable?)
             (push.iloc.0 . 0)
             (apply.gloc.of macro-variable? "./boot/macro/expand.scm" . 266281))
           (if.true (ret.iloc 0 . 0))
           (touch.gloc.of make-macro)
           (push.iloc.0 . 0)
           (push.iloc 2 . 0)
           (apply.gloc.of make-macro "./boot/macro/expand.scm" . 267310))
         (apply.gloc.of
           |.call-with-values|
           (|.call-with-values|
             (lambda () (compile-macro |form`524*| |spec`538*| |env`536*|))
             (lambda (|code`540*| . |_`540*|)
               (if (macro-variable? |code`540*|)
                   |code`540*|
                   (make-macro |code`540*| |env`536*|))))))
       (push.iloc 2 . 1)
       (apply.gloc.of
         map
         (map (lambda (|spec`538*|)
                (|.call-with-values|
                  (lambda () (compile-macro |form`524*| |spec`538*| |env`536*|))
                  (lambda (|code`540*| . |_`540*|)
                    (if (macro-variable? |code`540*|)
                        |code`540*|
                        (make-macro |code`540*| |env`536*|)))))
              |specs`528*|)))
     (push)
     (apply.gloc.of for-each "./boot/macro/expand.scm" . 269325))
   (ret.iloc 0 . 0))
 (set.gloc.of expand-letrec-syntax-bindings)
 (ret.const.unspec))
((close
   (3 0 . expand-macro-use)
   (call
     (touch.gloc.of fresh-rename-count)
     (apply.gloc.of fresh-rename-count "./boot/macro/expand.scm" . 275461))
   (call
     (touch.gloc.of current-macro-expression)
     (push.iloc.0 . 0)
     (apply.gloc.of current-macro-expression "./boot/macro/expand.scm" . 276485))
   (push.const . #f)
   (push.const . #f)
   (push.cddr.iloc (0 . 2) "./boot/macro/expand.scm" . 277593)
   (extend . 3)
   (push.close
     (0 0)
     (call
       (touch.gloc.of current-expansion-environment)
       (apply.gloc.of current-expansion-environment "./boot/macro/expand.scm" . 278535))
     (set.iloc (1 . 0) "./boot/macro/expand.scm" . 278535)
     (call
       (touch.gloc.of current-transformer-environment)
       (apply.gloc.of current-transformer-environment "./boot/macro/expand.scm" . 278535))
     (set.iloc (1 . 1) "./boot/macro/expand.scm" . 278535)
     (call
       (touch.gloc.of current-expansion-environment)
       (push.iloc 2 . 1)
       (apply.gloc.of current-expansion-environment "./boot/macro/expand.scm" . 278535))
     (touch.gloc.of current-transformer-environment)
     (push.iloc.1 . 2)
     (apply.gloc.of current-transformer-environment "./boot/macro/expand.scm" . 278535))
   (push.close
     (0 0)
     (push.cadr.iloc (2 . 2) "./boot/macro/expand.scm" . 278551)
     (subr.gloc.of procedure? 1 "./boot/macro/expand.scm" . 278539)
     (if.true
       (call
         (touch.gloc.of wrap-transformer-input)
         (push.iloc 2 . 0)
         (apply.gloc.of wrap-transformer-input "./boot/macro/expand.scm" . 279576))
       (push)
       (cadr.iloc (2 . 2) "./boot/macro/expand.scm" . 279564)
       (apply))
     (touch.gloc.of transcribe-syntax-rules)
     (push.iloc 2 . 0)
     (push.cadr.iloc (2 . 2) "./boot/macro/expand.scm" . 280617)
     (apply.gloc.of transcribe-syntax-rules "./boot/macro/expand.scm" . 280587))
   (push.close
     (0 0)
     (call
       (touch.gloc.of current-expansion-environment)
       (push.iloc.1 . 0)
       (apply.gloc.of current-expansion-environment "./boot/macro/expand.scm" . 278535))
     (touch.gloc.of current-transformer-environment)
     (push.iloc.1 . 1)
     (apply.gloc.of current-transformer-environment "./boot/macro/expand.scm" . 278535))
   (apply.gloc.of |.dynamic-wind| "./boot/macro/expand.scm" . 278535))
 (set.gloc.of expand-macro-use)
 (ret.const.unspec))
((close
   (2 0 . rewrite-let-syntax)
   (call
     (iloc.0 . 0)
     (if.not.pair?.ret.const . #f)
     (cdr.iloc (0 . 0) "./boot/macro/expand.scm" . 287753)
     (if.not.pair?.ret.const . #f)
     (push.cddr.iloc (0 . 0) "./boot/macro/expand.scm" . 287753)
     (ret.subr.gloc.of list? "./boot/macro/expand.scm" . 287753))
   (if.true
     (push.cddr.iloc (0 . 0) "./boot/macro/expand.scm" . 287753)
     (push.cadr.iloc (0 . 0) "./boot/macro/expand.scm" . 287753)
     (extend . 2)
     (call
       (touch.gloc.of check-let-bindings)
       (push.iloc.1 . 0)
       (push.iloc.0 . 1)
       (apply.gloc.of check-let-bindings "./boot/macro/expand.scm" . 287753))
     (call
       (touch.gloc.of fresh-rename-count)
       (apply.gloc.of fresh-rename-count "./boot/macro/expand.scm" . 287753))
     (push.const . |.BEGIN|)
     (iloc.0 . 0)
     (push.cons)
     (call
       (touch.gloc.of expand-let-syntax-bindings)
       (push.iloc.1 . 0)
       (push.iloc.0 . 1)
       (push.iloc.1 . 1)
       (apply.gloc.of expand-let-syntax-bindings "./boot/macro/expand.scm" . 287753))
     (push)
     (ret.subr.gloc.of values "./boot/macro/expand.scm" . 287753))
   (push.car.iloc (0 . 0) "./boot/macro/expand.scm" . 287753)
   (push.const . "missing clause")
   (push.iloc.0 . 0)
   (apply.gloc.of syntax-violation "./boot/macro/expand.scm" . 287753))
 (set.gloc.of |rewrite-let-syntax`561*|)
 (close
   (2 0 . rewrite-letrec-syntax)
   (call
     (iloc.0 . 0)
     (if.not.pair?.ret.const . #f)
     (cdr.iloc (0 . 0) "./boot/macro/expand.scm" . 299017)
     (if.not.pair?.ret.const . #f)
     (push.cddr.iloc (0 . 0) "./boot/macro/expand.scm" . 299017)
     (ret.subr.gloc.of list? "./boot/macro/expand.scm" . 299017))
   (if.true
     (push.cddr.iloc (0 . 0) "./boot/macro/expand.scm" . 299017)
     (push.cadr.iloc (0 . 0) "./boot/macro/expand.scm" . 299017)
     (extend . 2)
     (call
       (touch.gloc.of check-let-bindings)
       (push.iloc.1 . 0)
       (push.iloc.0 . 1)
       (apply.gloc.of check-let-bindings "./boot/macro/expand.scm" . 299017))
     (call
       (touch.gloc.of fresh-rename-count)
       (apply.gloc.of fresh-rename-count "./boot/macro/expand.scm" . 299017))
     (push.const . |.BEGIN|)
     (iloc.0 . 0)
     (push.cons)
     (call
       (touch.gloc.of expand-letrec-syntax-bindings)
       (push.iloc.1 . 0)
       (push.iloc.0 . 1)
       (push.iloc.1 . 1)
       (apply.gloc.of expand-letrec-syntax-bindings "./boot/macro/expand.scm" . 299017))
     (push)
     (ret.subr.gloc.of values "./boot/macro/expand.scm" . 299017))
   (push.car.iloc (0 . 0) "./boot/macro/expand.scm" . 299017)
   (push.const . "missing clause")
   (push.iloc.0 . 0)
   (apply.gloc.of syntax-violation "./boot/macro/expand.scm" . 299017))
 (set.gloc.of |rewrite-letrec-syntax`561*|)
 (close
   (2 0 . expand-initial-forms)
   (call
     (iloc.0 . 0)
     (if.not.pair?.ret.const . #f)
     (push.car.iloc (0 . 0) "./boot/macro/expand.scm" . 308263)
     (ret.subr.gloc.of symbol? "./boot/macro/expand.scm" . 308254))
   (if.true
     (call
       (touch.gloc.of env-lookup)
       (push.iloc.0 . 1)
       (push.car.iloc (0 . 0) "./boot/macro/expand.scm" . 309288)
       (apply.gloc.of env-lookup "./boot/macro/expand.scm" . 309272))
     (push)
     (extend . 1)
     (push.iloc.0 . 0)
     (gloc.of denote-let-syntax)
     (if.eq?
       (touch.gloc.of |rewrite-let-syntax`561*|)
       (push.iloc.1 . 0)
       (push.iloc.1 . 1)
       (apply.gloc.of |rewrite-let-syntax`561*| "./boot/macro/expand.scm" . 311317))
     (push.iloc.0 . 0)
     (gloc.of denote-letrec-syntax)
     (if.eq?
       (touch.gloc.of |rewrite-letrec-syntax`561*|)
       (push.iloc.1 . 0)
       (push.iloc.1 . 1)
       (apply.gloc.of |rewrite-letrec-syntax`561*| "./boot/macro/expand.scm" . 313365))
     (call
       (touch.gloc.of macro?)
       (push.iloc.0 . 0)
       (apply.gloc.of macro? "./boot/macro/expand.scm" . 314389))
     (if.true
       (push.close
         (0 0)
         (call
           (touch.gloc.of expansion-trace-level)
           (apply.gloc.of expansion-trace-level "./boot/macro/expand.scm" . 317474))
         (push)
         (call (apply.gloc.of expansion-backtrace "./boot/macro/expand.scm" . 317498))
         (push)
         (subr.gloc.of < 2 "./boot/macro/expand.scm" . 317471)
         (if.true
           (call
             (touch.gloc.of expansion-trace-stack)
             (push.iloc 2 . 0)
             (call
               (touch.gloc.of expansion-trace-stack)
               (apply.gloc.of expansion-trace-stack "./boot/macro/expand.scm" . 319555))
             (push.cons)
             (apply.gloc.of expansion-trace-stack "./boot/macro/expand.scm" . 319521))
           (call
             (touch.gloc.of expansion-trace-level)
             (push.const . 1)
             (call
               (touch.gloc.of expansion-trace-level)
               (apply.gloc.of expansion-trace-level "./boot/macro/expand.scm" . 320573))
             (push)
             (push.subr.gloc.of + 2 "./boot/macro/expand.scm" . 320568)
             (apply.gloc.of expansion-trace-level "./boot/macro/expand.scm" . 320545))
           (touch.gloc.of expand-macro-use)
           (push.iloc 2 . 0)
           (push.iloc 2 . 1)
           (push.iloc.1 . 0)
           (apply.gloc.of expand-macro-use "./boot/macro/expand.scm" . 321569))
         (touch.gloc.of expand-macro-use)
         (push.iloc 2 . 0)
         (push.iloc 2 . 1)
         (push.iloc.1 . 0)
         (apply.gloc.of expand-macro-use "./boot/macro/expand.scm" . 322591))
       (push.close
         (2 0)
         (call
           (touch.gloc.of annotate-macro!)
           (push.iloc.0 . 0)
           (push.iloc 2 . 0)
           (apply.gloc.of annotate-macro! "./boot/macro/expand.scm" . 323607))
         (push.iloc.0 . 0)
         (call
           (touch.gloc.of extend-env)
           (push.iloc.0 . 1)
           (push.iloc 2 . 1)
           (apply.gloc.of extend-env "./boot/macro/expand.scm" . 324644))
         (push)
         (ret.subr.gloc.of values "./boot/macro/expand.scm" . 324631))
       (apply.gloc.of
         |.call-with-values|
         (|.call-with-values|
           (lambda ()
             (if (< (expansion-trace-level) (expansion-backtrace))
                 (begin
                   (expansion-trace-stack (cons |form`560*| (expansion-trace-stack)))
                   (expansion-trace-level (+ 1 (expansion-trace-level)))
                   (expand-macro-use |form`560*| |env`560*| |deno`580*|))
                 (expand-macro-use |form`560*| |env`560*| |deno`580*|)))
           (lambda (|expr`582*| |renames`582*|)
             (annotate-macro! |expr`582*| |form`560*|)
             (values |expr`582*| (extend-env |renames`582*| |env`560*|))))))
     (push.iloc.1 . 0)
     (push.iloc.1 . 1)
     (ret.subr.gloc.of values "./boot/macro/expand.scm" . 326677))
   (push.iloc.0 . 0)
   (push.iloc.0 . 1)
   (ret.subr.gloc.of values "./boot/macro/expand.scm" . 328716))
 (set.gloc.of expand-initial-forms)
 (ret.const.unspec))
((close
   (3 0 . expand-body)
   (extend.unbound . 6)
   (push.const)
   (push.const)
   (push.const)
   (push.close
     (2 0 . extend-env!)
     (call
       (touch.gloc.of extend-env)
       (push.iloc.0 . 0)
       (iloc.0 . 1)
       (push.cons)
       (push.subr.gloc.of list 1 "./boot/macro/expand.scm" . 339999)
       (push.iloc 2 . 2)
       (apply.gloc.of extend-env "./boot/macro/expand.scm" . 339987))
     (set.iloc (2 . 2) "./boot/macro/expand.scm" . 339977)
     (call
       (call
         (touch.gloc.of macro?)
         (push.iloc.0 . 1)
         (apply.gloc.of macro? "./boot/macro/expand.scm" . 341006))
       (if.false.ret)
       (call
         (touch.gloc.of acons)
         (push.iloc.0 . 0)
         (push.iloc.0 . 1)
         (push.iloc.1 . 0)
         (apply.gloc.of acons "./boot/macro/expand.scm" . 343073))
       (set.iloc (1 . 0) "./boot/macro/expand.scm" . 343056)
       (call
         (touch.gloc.of extend-env)
         (push.iloc.0 . 1)
         (call
           (touch.gloc.of generate-local-macro-symbol)
           (push.iloc.0 . 0)
           (apply.gloc.of generate-local-macro-symbol "./boot/macro/expand.scm" . 344121))
         (push.cons)
         (push.subr.gloc.of list 1 "./boot/macro/expand.scm" . 344102)
         (push.iloc 2 . 2)
         (apply.gloc.of extend-env "./boot/macro/expand.scm" . 344090))
       (set.iloc (2 . 2) "./boot/macro/expand.scm" . 344080)
       (ret.const.unspec))
     (push.close
       (1 0)
       (push.cddr.iloc (0 . 0) "./boot/macro/expand.scm" . 345129)
       (push.iloc 3 . 2)
       (ret.subr.gloc.of set-cdr! "./boot/macro/expand.scm" . 345119))
     (push.iloc.1 . 0)
     (apply.gloc.of for-each "./boot/macro/expand.scm" . 345097))
   (push.close
     (1 0 . internal-definition?)
     (iloc.0 . 0)
     (if.not.pair?.ret.const . #f)
     (car.iloc (0 . 0) "./boot/macro/expand.scm" . 350229)
     (if.not.pair?.ret.const . #f)
     (push.iloc.0 . 0)
     (subr.gloc.of caar 1 "./boot/macro/expand.scm" . 351255)
     (if.not.symbol?.ret.const . #f)
     (call
       (touch.gloc.of env-lookup)
       (push.iloc 2 . 2)
       (push.iloc.0 . 0)
       (push.subr.gloc.of caar 1 "./boot/macro/expand.scm" . 352298)
       (apply.gloc.of env-lookup "./boot/macro/expand.scm" . 352282))
     (push)
     (extend . 1)
     (call
       (touch.gloc.of macro?)
       (push.iloc.0 . 0)
       (apply.gloc.of macro? "./boot/macro/expand.scm" . 353300))
     (if.true.ret)
     (push.gloc.of denote-define)
     (iloc.0 . 0)
     (if.eq?.ret.const . #t)
     (push.gloc.of denote-define-syntax)
     (iloc.0 . 0)
     (if.eq?.ret.const . #t)
     (push.gloc.of denote-let-syntax)
     (iloc.0 . 0)
     (if.eq?.ret.const . #t)
     (push.gloc.of denote-letrec-syntax)
     (iloc.0 . 0)
     (ret.eq? "./boot/macro/expand.scm" . 357396))
   (push.close
     (3 0 . rewrite-body)
     (iloc.0 . 0)
     (if.null?.ret.const)
     (iloc.0 . 1)
     (if.null?
       (touch.gloc.of annotate)
       (call
         (touch.gloc.of expand-each)
         (push.iloc.0 . 0)
         (push.iloc 2 . 2)
         (apply.gloc.of expand-each "./boot/macro/expand.scm" . 363546))
       (push)
       (push.iloc 2 . 1)
       (apply.gloc.of annotate "./boot/macro/expand.scm" . 363536))
     (call
       (call
         (touch.gloc.of unique-id-list?)
         (call
           (push.gloc.of car)
           (push.iloc.0 . 2)
           (apply.gloc.of map "./boot/macro/expand.scm" . 365605))
         (push)
         (apply.gloc.of unique-id-list? "./boot/macro/expand.scm" . 365588))
       (if.true.ret)
       (call
         (touch.gloc.of find-duplicates)
         (call
           (push.gloc.of car)
           (push.iloc.0 . 2)
           (apply.gloc.of map "./boot/macro/expand.scm" . 366639))
         (push)
         (apply.gloc.of find-duplicates "./boot/macro/expand.scm" . 366622))
       (push)
       (extend . 1)
       (push.const . define)
       (push.const . "duplicate definitions")
       (call
         (push.iloc.0 . 0)
         (push.iloc.1 . 1)
         (push.subr.gloc.of assq 2 "./boot/macro/expand.scm" . 369713)
         (extend . 1)
         (touch.gloc.of annotate)
         (push.const . define)
         (iloc.0 . 0)
         (push.cons)
         (push.iloc.0 . 0)
         (apply.gloc.of annotate "./boot/macro/expand.scm" . 369730))
       (push)
       (call
         (push.iloc.0 . 0)
         (push.iloc.1 . 1)
         (push.subr.gloc.of reverse 1 "./boot/macro/expand.scm" . 370746)
         (push.subr.gloc.of assq 2 "./boot/macro/expand.scm" . 370737)
         (extend . 1)
         (touch.gloc.of annotate)
         (push.const . define)
         (iloc.0 . 0)
         (push.cons)
         (push.iloc.0 . 0)
         (apply.gloc.of annotate "./boot/macro/expand.scm" . 370764))
       (push)
       (apply.gloc.of syntax-violation "./boot/macro/expand.scm" . 367638))
     (call
       (push.close
         (1 0)
         (push.car.iloc (0 . 0) "./boot/macro/expand.scm" . 371769)
         (push.iloc.1 . 2)
         (push.subr.gloc.of assq 2 "./boot/macro/expand.scm" . 371763)
         (ret.subr.gloc.of cdr "./boot/macro/expand.scm" . 371758))
       (push.iloc.0 . 1)
       (apply.gloc.of map "./boot/macro/expand.scm" . 371739))
     (push)
     (call
       (push.close
         (1 0)
         (touch.gloc.of expand-form)
         (push.cadr.iloc (0 . 0) "./boot/macro/expand.scm" . 372795)
         (push.iloc 3 . 2)
         (apply.gloc.of expand-form "./boot/macro/expand.scm" . 372782))
       (push.iloc.0 . 1)
       (apply.gloc.of map "./boot/macro/expand.scm" . 372763))
     (push)
     (extend . 2)
     (call
       (touch.gloc.of check-rec*-contract-violation)
       (push.iloc.0 . 0)
       (push.iloc.0 . 1)
       (apply.gloc.of check-rec*-contract-violation "./boot/macro/expand.scm" . 373785))
     (push)
     (extend . 1)
     (iloc.0 . 0)
     (if.true
       (call
         (touch.gloc.of any1)
         (push.close
           (1 0)
           (push.cdr.iloc (0 . 0) "./boot/macro/expand.scm" . 375876)
           (car.iloc (1 . 0) "./boot/macro/expand.scm" . 375884)
           (if.not.eq?.ret.const . #f)
           (push.iloc.0 . 0)
           (ret.subr.gloc.of car "./boot/macro/expand.scm" . 375895))
         (push.iloc 2 . 2)
         (apply.gloc.of any1 "./boot/macro/expand.scm" . 375848))
       (push)
       (extend . 1)
       (call
         (touch.gloc.of current-macro-expression)
         (push.iloc 5 . 0)
         (apply.gloc.of current-macro-expression "./boot/macro/expand.scm" . 376864))
       (push.const . define)
       (push.const . "attempt to reference uninitialized variable ~u")
       (push.iloc.0 . 0)
       (push.subr.gloc.of format 2 "./boot/macro/expand.scm" . 378930)
       (call
         (touch.gloc.of any1)
         (push.close
           (1 0)
           (call
             (touch.gloc.of check-rec-contract-violation)
             (push.iloc.1 . 0)
             (push.subr.gloc.of list 1 "./boot/macro/expand.scm" . 381021)
             (push.cdr.iloc (0 . 0) "./boot/macro/expand.scm" . 381031)
             (apply.gloc.of check-rec-contract-violation "./boot/macro/expand.scm" . 380991))
           (if.false.ret)
           (touch.gloc.of annotate)
           (push.const . define)
           (iloc.0 . 0)
           (push.cons)
           (push.iloc.0 . 0)
           (apply.gloc.of annotate "./boot/macro/expand.scm" . 382015))
         (push.iloc 3 . 1)
         (apply.gloc.of any1 "./boot/macro/expand.scm" . 379954))
       (push)
       (apply.gloc.of syntax-violation "./boot/macro/expand.scm" . 377888))
     (call
       (touch.gloc.of check-internal-def-contract-violation)
       (call
         (push.gloc.of car)
         (push.iloc 2 . 1)
         (apply.gloc.of map "./boot/macro/expand.scm" . 384064))
       (push)
       (push.iloc 3 . 1)
       (apply.gloc.of check-internal-def-contract-violation "./boot/macro/expand.scm" . 384025))
     (push)
     (extend . 1)
     (iloc.0 . 0)
     (if.true
       (call
         (touch.gloc.of current-macro-expression)
         (push.iloc 5 . 0)
         (apply.gloc.of current-macro-expression "./boot/macro/expand.scm" . 386078))
       (push.const . define)
       (push.const
         .
         "identifier ~u already used to determine the meaning of undeferred portions of definition")
       (push.iloc.0 . 0)
       (push.subr.gloc.of format 2 "./boot/macro/expand.scm" . 388144)
       (call
         (push.iloc.0 . 0)
         (push.iloc 3 . 1)
         (push.subr.gloc.of assq 2 "./boot/macro/expand.scm" . 389175)
         (extend . 1)
         (iloc.0 . 0)
         (if.false.ret)
         (touch.gloc.of annotate)
         (push.const . define)
         (iloc.0 . 0)
         (push.cons)
         (push.iloc.0 . 0)
         (apply.gloc.of annotate "./boot/macro/expand.scm" . 389205))
       (push)
       (apply.gloc.of
         syntax-violation
         (syntax-violation
           'define
           (format
             "identifier ~u already used to determine the meaning of undeferred portions of definition"
             |.L235`618*|)
           (let ((|.L236`622*| (assq |.L235`618*| |defs`594*|)))
             (and |.L236`622*| (annotate (|.cons| 'define |.L236`622*|) |.L236`622*|))))))
     (call
       (touch.gloc.of annotate-bindings)
       (push.iloc 2 . 0)
       (push.iloc 2 . 1)
       (push.iloc 5 . 2)
       (apply.gloc.of annotate-bindings "./boot/macro/expand.scm" . 392217))
     (touch.gloc.of annotate)
     (push.const . letrec*)
     (call
       (touch.gloc.of rewrite-letrec*-bindings)
       (call
         (push.gloc.of list)
         (push.iloc 2 . 0)
         (push.iloc 2 . 1)
         (apply.gloc.of map "./boot/macro/expand.scm" . 394304))
       (push)
       (push.iloc 5 . 2)
       (apply.gloc.of rewrite-letrec*-bindings "./boot/macro/expand.scm" . 394278))
     (push)
     (call
       (touch.gloc.of expand-each)
       (push.iloc 3 . 0)
       (push.iloc 5 . 2)
       (apply.gloc.of expand-each "./boot/macro/expand.scm" . 394330))
     (push)
     (push.subr.gloc.of |.cons*| 3 "./boot/macro/expand.scm" . 394278)
     (push.subr.gloc.of |.list| 1 "./boot/macro/expand.scm" . 393241)
     (push.iloc 5 . 1)
     (apply.gloc.of annotate "./boot/macro/expand.scm" . 393241))
   (enclose . 6)
   (call
     (touch.gloc.of fresh-rename-count)
     (apply.gloc.of fresh-rename-count "./boot/macro/expand.scm" . 397331))
   (push)
   (extend . 1)
   (extend.enclose
     (3 0 . loop)
     (iloc.0 . 0)
     (if.null?.ret.const)
     (call
       (car.iloc (0 . 0) "./boot/macro/expand.scm" . 400412)
       (if.not.pair?.ret.const . #f)
       (push.iloc.0 . 0)
       (push.subr.gloc.of caar 1 "./boot/macro/expand.scm" . 400433)
       (ret.subr.gloc.of symbol? "./boot/macro/expand.scm" . 400424))
     (if.true
       (push.iloc.0 . 0)
       (push.subr.gloc.of caar 1 "./boot/macro/expand.scm" . 401448)
       (push.iloc 3 . 2)
       (subr.gloc.of cons 2 "./boot/macro/expand.scm" . 401442)
       (set.iloc (3 . 2) "./boot/macro/expand.scm" . 401424)
       (call
         (touch.gloc.of env-lookup)
         (push.iloc 4 . 2)
         (push.iloc.0 . 0)
         (push.subr.gloc.of caar 1 "./boot/macro/expand.scm" . 402476)
         (apply.gloc.of env-lookup "./boot/macro/expand.scm" . 402460))
       (push)
       (extend . 1)
       (push.gloc.of denote-begin)
       (iloc.0 . 0)
       (if.eq?
         (call
           (touch.gloc.of flatten-begin)
           (push.iloc.1 . 0)
           (push.iloc 5 . 2)
           (apply.gloc.of flatten-begin "./boot/macro/expand.scm" . 404511))
         (push)
         (push.iloc.1 . 1)
         (push.iloc.1 . 2)
         (apply.iloc (2 . 0) "./boot/macro/expand.scm" . 404505))
       (push.gloc.of denote-define-syntax)
       (iloc.0 . 0)
       (if.eq?
         (call
           (iloc.1 . 0)
           (if.not.pair?.ret.const . #f)
           (car.iloc (1 . 0) (car |body`631*|))
           (if.not.pair?.ret.const . #f)
           (push.iloc.1 . 0)
           (subr.gloc.of cdar 1 (cdar |body`631*|))
           (if.not.pair?.ret.const . #f)
           (push.iloc.1 . 0)
           (subr.gloc.of cddar 1 (cddar |body`631*|))
           (if.not.pair?.ret.const . #f)
           (push.iloc.1 . 0)
           (subr.gloc.of cdddar 1 (cdddar |body`631*|))
           (if.not.null?.ret.const . #f)
           (push.cdr.iloc (1 . 0) (cdr |body`631*|))
           (ret.subr.gloc.of list? (list? (cdr |body`631*|))))
         (push)
         (extend . 1)
         (call
           (iloc.0 . 0)
           (if.false.ret)
           (push.iloc 2 . 0)
           (push.subr.gloc.of cadar 1 (cadar |body`631*|))
           (ret.subr.gloc.of symbol? (symbol? (cadar |body`631*|))))
         (if.true
           (push.cdr.iloc (2 . 0) (cdr |body`631*|))
           (push.iloc 2 . 0)
           (push.subr.gloc.of caddar 1 (caddar |body`631*|))
           (push.iloc 2 . 0)
           (push.subr.gloc.of cadar 1 (cadar |body`631*|))
           (extend . 3)
           (call
             (push.close
               (0 0)
               (touch.gloc.of compile-macro)
               (push.car.iloc (4 . 0) (car |body`631*|))
               (push.iloc.1 . 1)
               (push.iloc 8 . 2)
               (apply.gloc.of
                 compile-macro
                 (compile-macro (car |body`631*|) |clause`641*| |env`584*|)))
             (push.close
               (1 1)
               (call
                 (iloc.0 . 1)
                 (if.not.pair?.ret.const . #f)
                 (push.car.iloc (0 . 1) (car |expr`643*|))
                 (push.iloc 7 . 1)
                 (subr.gloc.of cons 2 (cons (car |expr`643*|) |macro-exprs`585*|))
                 (set.iloc
                   (7 . 1)
                   (set! |macro-exprs`585*| (cons (car |expr`643*|) |macro-exprs`585*|)))
                 (ret.const.unspec))
               (call
                 (touch.gloc.of macro-variable?)
                 (push.iloc.0 . 0)
                 (apply.gloc.of macro-variable? (macro-variable? |code`643*|)))
               (if.true
                 (push.iloc.1 . 2)
                 (push.iloc.0 . 0)
                 (apply.iloc (7 . 3) (|extend-env!`585*| |name`641*| |code`643*|)))
               (push.iloc.1 . 2)
               (call
                 (touch.gloc.of make-macro)
                 (push.iloc.0 . 0)
                 (push.iloc 8 . 2)
                 (apply.gloc.of make-macro (make-macro |code`643*| |env`584*|)))
               (push)
               (apply.iloc
                 (7 . 3)
                 (|extend-env!`585*| |name`641*| (make-macro |code`643*| |env`584*|))))
             (apply.gloc.of
               |.call-with-values|
               (|.call-with-values|
                 (lambda () (compile-macro (car |body`631*|) |clause`641*| |env`584*|))
                 (lambda (|code`643*| . |expr`643*|)
                   (and (pair? |expr`643*|)
                        (set! |macro-exprs`585*| (cons (car |expr`643*|) |macro-exprs`585*|)))
                   (if (macro-variable? |code`643*|)
                       (|extend-env!`585*| |name`641*| |code`643*|)
                       (|extend-env!`585*| |name`641*| (make-macro |code`643*| |env`584*|)))))))
           (push.iloc.0 . 0)
           (push.iloc 3 . 1)
           (call
             (touch.gloc.of acons)
             (push.iloc.0 . 2)
             (push.const . #f)
             (push.iloc 3 . 2)
             (apply.gloc.of acons (acons |name`641*| #f |renames`631*|)))
           (push)
           (apply.iloc
             (4 . 0)
             (|loop`630*| |more`641*| |defs`631*| (acons |name`641*| #f |renames`631*|))))
         (iloc.0 . 0)
         (if.true
           (push.iloc 2 . 0)
           (push.subr.gloc.of caar 1 (caar |body`631*|))
           (push.const . "expected symbol for first clause")
           (push.car.iloc (2 . 0) (car |body`631*|))
           (apply.gloc.of
             syntax-violation
             (syntax-violation
               (caar |body`631*|)
               "expected symbol for first clause"
               (car |body`631*|))))
         (push.iloc 2 . 0)
         (push.subr.gloc.of caar 1 (caar |body`631*|))
         (push.const . "expected symbol and transformer expression")
         (push.car.iloc (2 . 0) (car |body`631*|))
         (apply.gloc.of
           syntax-violation
           (syntax-violation
             (caar |body`631*|)
             "expected symbol and transformer expression"
             (car |body`631*|))))
       (push.gloc.of denote-define)
       (iloc.0 . 0)
       (if.eq?
         (call
           (touch.gloc.of annotate)
           (call
             (touch.gloc.of desugar-define)
             (push.car.iloc (1 . 0) "./boot/macro/expand.scm" . 421955)
             (apply.gloc.of desugar-define "./boot/macro/expand.scm" . 421939))
           (push)
           (push.subr.gloc.of cdr 1 "./boot/macro/expand.scm" . 421934)
           (push.car.iloc (1 . 0) "./boot/macro/expand.scm" . 421968)
           (apply.gloc.of annotate "./boot/macro/expand.scm" . 421924))
         (push)
         (extend . 1)
         (push.car.iloc (0 . 0) "./boot/macro/expand.scm" . 422950)
         (call
           (touch.gloc.of rename-variable-id)
           (push.car.iloc (0 . 0) "./boot/macro/expand.scm" . 422986)
           (push.iloc 4 . 0)
           (apply.gloc.of rename-variable-id "./boot/macro/expand.scm" . 422966))
         (push)
         (extend . 2)
         (call
           (push.iloc.0 . 0)
           (push.iloc 6 . 2)
           (subr.gloc.of memq 2 "./boot/macro/expand.scm" . 423972)
           (if.true
             (call
               (touch.gloc.of current-macro-expression)
               (push.iloc 7 . 0)
               (apply.gloc.of current-macro-expression "./boot/macro/expand.scm" . 426025))
             (push.const . define)
             (push.const
               .
               "identifier ~u already used to determine the meaning of undeferred portions of definition")
             (push.iloc.0 . 0)
             (push.subr.gloc.of format 2 "./boot/macro/expand.scm" . 428091)
             (push.car.iloc (3 . 0) "./boot/macro/expand.scm" . 429115)
             (apply.gloc.of syntax-violation "./boot/macro/expand.scm" . 427049))
           (ret.const.unspec))
         (call
           (push.iloc.0 . 0)
           (push.iloc.0 . 1)
           (apply.iloc (6 . 3) "./boot/macro/expand.scm" . 430109))
         (push.cdr.iloc (3 . 0) "./boot/macro/expand.scm" . 431139)
         (push.iloc.1 . 0)
         (iloc 3 . 1)
         (push.cons)
         (call
           (touch.gloc.of acons)
           (push.iloc.0 . 0)
           (push.iloc.0 . 1)
           (push.iloc 3 . 2)
           (apply.gloc.of acons "./boot/macro/expand.scm" . 431166))
         (push)
         (apply.iloc (4 . 0) "./boot/macro/expand.scm" . 431133))
       (call
         (call
           (touch.gloc.of macro?)
           (push.iloc.0 . 0)
           (apply.gloc.of macro? "./boot/macro/expand.scm" . 432157))
         (if.true.ret)
         (push.gloc.of denote-let-syntax)
         (iloc.0 . 0)
         (if.eq?.ret.const . #t)
         (push.gloc.of denote-letrec-syntax)
         (iloc.0 . 0)
         (ret.eq? "./boot/macro/expand.scm" . 434205))
       (if.true
         (push.close
           (0 0)
           (touch.gloc.of expand-initial-forms)
           (push.car.iloc (2 . 0) "./boot/macro/expand.scm" . 435272)
           (push.iloc 6 . 2)
           (apply.gloc.of expand-initial-forms "./boot/macro/expand.scm" . 435250))
         (push.close
           (2 0)
           (iloc.0 . 1)
           (set.iloc (6 . 2) "./boot/macro/expand.scm" . 436251)
           (call
             (touch.gloc.of flatten-begin)
             (push.iloc.0 . 0)
             (push.subr.gloc.of list 1 "./boot/macro/expand.scm" . 437307)
             (push.iloc 6 . 2)
             (apply.gloc.of flatten-begin "./boot/macro/expand.scm" . 437292))
           (push)
           (extend . 1)
           (iloc.0 . 0)
           (if.null?
             (push.cdr.iloc (3 . 0) "./boot/macro/expand.scm" . 439338)
             (push.iloc 3 . 1)
             (push.iloc 3 . 2)
             (apply.iloc (4 . 0) "./boot/macro/expand.scm" . 439332))
           (call (push.iloc.0 . 0) (apply.iloc (6 . 4) "./boot/macro/expand.scm" . 440356))
           (if.true
             (push.iloc.0 . 0)
             (push.cdr.iloc (3 . 0) "./boot/macro/expand.scm" . 441404)
             (push.subr.gloc.of append 2 "./boot/macro/expand.scm" . 441386)
             (push.iloc 3 . 1)
             (push.iloc 3 . 2)
             (apply.iloc (4 . 0) "./boot/macro/expand.scm" . 441380))
           (push.iloc.0 . 0)
           (push.cdr.iloc (3 . 0) "./boot/macro/expand.scm" . 443460)
           (push.subr.gloc.of append 2 "./boot/macro/expand.scm" . 443442)
           (push.iloc 3 . 1)
           (push.subr.gloc.of reverse 1 "./boot/macro/expand.scm" . 443472)
           (push.iloc 3 . 2)
           (apply.iloc (6 . 5) "./boot/macro/expand.scm" . 443428))
         (apply.gloc.of |.call-with-values| "./boot/macro/expand.scm" . 420889))
       (push.iloc.1 . 0)
       (push.iloc.1 . 1)
       (push.subr.gloc.of reverse 1 "./boot/macro/expand.scm" . 445484)
       (push.iloc.1 . 2)
       (apply.iloc (4 . 5) "./boot/macro/expand.scm" . 445465))
     (push.iloc.0 . 0)
     (push.iloc.0 . 1)
     (push.subr.gloc.of reverse 1 "./boot/macro/expand.scm" . 447523)
     (push.iloc.0 . 2)
     (apply.iloc (3 . 5) "./boot/macro/expand.scm" . 447504))
   (call
     (touch.gloc.of flatten-begin)
     (push.iloc 3 . 1)
     (push.iloc 3 . 2)
     (apply.gloc.of flatten-begin "./boot/macro/expand.scm" . 398360))
   (push)
   (push.const)
   (push.const)
   (apply.iloc (0 . 0) "./boot/macro/expand.scm" . 399369))
 (set.gloc.of expand-body)
 (ret.const.unspec))
((close
   (2 0 . expand-each)
   (call
     (touch.gloc.of current-macro-expression)
     (apply.gloc.of current-macro-expression "./boot/macro/expand.scm" . 451601))
   (push)
   (extend . 1)
   (touch.gloc.of annotate)
   (call
     (push.close
       (1 0)
       (call
         (touch.gloc.of current-macro-expression)
         (push.iloc.1 . 0)
         (apply.gloc.of current-macro-expression "./boot/macro/expand.scm" . 453656))
       (touch.gloc.of expand-form)
       (push.iloc.0 . 0)
       (push.iloc 2 . 1)
       (apply.gloc.of expand-form "./boot/macro/expand.scm" . 454680))
     (push.iloc.1 . 0)
     (apply.gloc.of map "./boot/macro/expand.scm" . 452625))
   (push)
   (push.iloc.1 . 0)
   (apply.gloc.of annotate "./boot/macro/expand.scm" . 452615))
 (set.gloc.of expand-each)
 (ret.const.unspec))
((close
   (2 0 . expand-form)
   (iloc.0 . 0)
   (if.symbol?
     (call
       (touch.gloc.of env-lookup)
       (push.iloc.0 . 1)
       (push.iloc.0 . 0)
       (apply.gloc.of env-lookup "./boot/macro/expand.scm" . 461848))
     (push)
     (extend . 1)
     (iloc.0 . 0)
     (if.symbol? (ret.iloc 0 . 0))
     (call
       (touch.gloc.of macro?)
       (push.iloc.0 . 0)
       (apply.gloc.of macro? "./boot/macro/expand.scm" . 463893))
     (if.true
       (push.close
         (0 0)
         (call
           (touch.gloc.of expansion-trace-level)
           (apply.gloc.of expansion-trace-level "./boot/macro/expand.scm" . 466978))
         (push)
         (call (apply.gloc.of expansion-backtrace "./boot/macro/expand.scm" . 467002))
         (push)
         (subr.gloc.of < 2 "./boot/macro/expand.scm" . 466975)
         (if.true
           (push.const . #f)
           (push.const . #f)
           (call
             (touch.gloc.of current-macro-expression)
             (apply.gloc.of current-macro-expression "./boot/macro/expand.scm" . 468043))
           (push)
           (call
             (touch.gloc.of expansion-trace-stack)
             (apply.gloc.of expansion-trace-stack "./boot/macro/expand.scm" . 468070))
           (push.cons)
           (push.const . 1)
           (call
             (touch.gloc.of expansion-trace-level)
             (apply.gloc.of expansion-trace-level "./boot/macro/expand.scm" . 469066))
           (push)
           (push.subr.gloc.of + 2 "./boot/macro/expand.scm" . 469061)
           (extend . 4)
           (push.close
             (0 0)
             (call
               (touch.gloc.of expansion-trace-stack)
               (apply.gloc.of expansion-trace-stack "./boot/macro/expand.scm" . 470049))
             (set.iloc (1 . 0) "./boot/macro/expand.scm" . 470049)
             (call
               (touch.gloc.of expansion-trace-level)
               (apply.gloc.of expansion-trace-level "./boot/macro/expand.scm" . 470049))
             (set.iloc (1 . 1) "./boot/macro/expand.scm" . 470049)
             (call
               (touch.gloc.of expansion-trace-stack)
               (push.iloc.1 . 2)
               (apply.gloc.of expansion-trace-stack "./boot/macro/expand.scm" . 470049))
             (touch.gloc.of expansion-trace-level)
             (push.iloc.1 . 3)
             (apply.gloc.of expansion-trace-level "./boot/macro/expand.scm" . 470049))
           (push.close
             (0 0)
             (touch.gloc.of expand-macro-use)
             (push.iloc 4 . 0)
             (push.iloc 4 . 1)
             (push.iloc 3 . 0)
             (apply.gloc.of expand-macro-use "./boot/macro/expand.scm" . 470049))
           (push.close
             (0 0)
             (call
               (touch.gloc.of expansion-trace-stack)
               (push.iloc.1 . 0)
               (apply.gloc.of expansion-trace-stack "./boot/macro/expand.scm" . 470049))
             (touch.gloc.of expansion-trace-level)
             (push.iloc.1 . 1)
             (apply.gloc.of expansion-trace-level "./boot/macro/expand.scm" . 470049))
           (apply.gloc.of |.dynamic-wind| "./boot/macro/expand.scm" . 470049))
         (touch.gloc.of expand-macro-use)
         (push.iloc 2 . 0)
         (push.iloc 2 . 1)
         (push.iloc.1 . 0)
         (apply.gloc.of expand-macro-use "./boot/macro/expand.scm" . 471071))
       (push.close
         (2 0)
         (call
           (touch.gloc.of annotate-macro!)
           (push.iloc.0 . 0)
           (push.iloc 2 . 0)
           (apply.gloc.of annotate-macro! "./boot/macro/expand.scm" . 472087))
         (touch.gloc.of expand-form)
         (push.iloc.0 . 0)
         (call
           (touch.gloc.of extend-env)
           (push.iloc.0 . 1)
           (push.iloc 2 . 1)
           (apply.gloc.of extend-env "./boot/macro/expand.scm" . 473129))
         (push)
         (apply.gloc.of expand-form "./boot/macro/expand.scm" . 473111))
       (apply.gloc.of
         |.call-with-values|
         (|.call-with-values|
           (lambda ()
             (if (< (expansion-trace-level) (expansion-backtrace))
                 (let ((|tmp1`672`675*| #f)
                       (|tmp1`673`675*| #f)
                       (|tmp2`672`675*| (cons (current-macro-expression) (expansion-trace-stack)))
                       (|tmp2`673`675*| (+ 1 (expansion-trace-level))))
                   (|.dynamic-wind|
                     (lambda ()
                       (set! |tmp1`672`675*| (expansion-trace-stack))
                       (set! |tmp1`673`675*| (expansion-trace-level))
                       (expansion-trace-stack |tmp2`672`675*|)
                       (expansion-trace-level |tmp2`673`675*|))
                     (lambda () (expand-macro-use |form`666*| |env`666*| |deno`668*|))
                     (lambda ()
                       (expansion-trace-stack |tmp1`672`675*|)
                       (expansion-trace-level |tmp1`673`675*|))))
                 (expand-macro-use |form`666*| |env`666*| |deno`668*|)))
           (lambda (|expr`670*| |renames`670*|)
             (annotate-macro! |expr`670*| |form`666*|)
             (expand-form |expr`670*| (extend-env |renames`670*| |env`666*|))))))
     (call
       (touch.gloc.of unbound?)
       (push.iloc.0 . 0)
       (apply.gloc.of unbound? "./boot/macro/expand.scm" . 474133))
     (if.true
       (touch.gloc.of undefined/syntax-violation)
       (push.const . #f)
       (push.const . "attempt to reference unbound identifier ~u")
       (push.iloc.1 . 0)
       (push.subr.gloc.of format 2 "./boot/macro/expand.scm" . 476209)
       (call
         (touch.gloc.of current-macro-expression)
         (apply.gloc.of current-macro-expression "./boot/macro/expand.scm" . 477233))
       (push)
       (apply.gloc.of undefined/syntax-violation "./boot/macro/expand.scm" . 475157))
     (call
       (touch.gloc.of out-of-context?)
       (push.iloc.0 . 0)
       (apply.gloc.of out-of-context? "./boot/macro/expand.scm" . 478229))
     (if.true
       (cdr.iloc (0 . 0) "./boot/macro/expand.scm" . 479257)
       (if.true
         (push.const . #f)
         (push.const . "identifer ~u out of context")
         (push.iloc.1 . 0)
         (push.subr.gloc.of format 2 "./boot/macro/expand.scm" . 481323)
         (call
           (touch.gloc.of current-macro-expression)
           (apply.gloc.of current-macro-expression "./boot/macro/expand.scm" . 482347))
         (push)
         (call
           (touch.gloc.of annotate)
           (push.const . syntax)
           (push.cdr.iloc (0 . 0) "./boot/macro/expand.scm" . 483395)
           (push.subr.gloc.of list 2 "./boot/macro/expand.scm" . 483381)
           (push.cdr.iloc (0 . 0) "./boot/macro/expand.scm" . 483407)
           (apply.gloc.of annotate "./boot/macro/expand.scm" . 483371))
         (push)
         (apply.gloc.of syntax-violation "./boot/macro/expand.scm" . 480281))
       (push.const . #f)
       (push.const . "identifer ~u out of context")
       (push.iloc.1 . 0)
       (push.subr.gloc.of format 2 "./boot/macro/expand.scm" . 485419)
       (call
         (touch.gloc.of current-macro-expression)
         (apply.gloc.of current-macro-expression "./boot/macro/expand.scm" . 486443))
       (push)
       (apply.gloc.of syntax-violation "./boot/macro/expand.scm" . 484377))
     (call
       (touch.gloc.of special?)
       (push.iloc.0 . 0)
       (apply.gloc.of special? "./boot/macro/expand.scm" . 487445))
     (if.true
       (push.cdr.iloc (0 . 0) "./boot/macro/expand.scm" . 488481)
       (gloc.of unexpected-unquote)
       (if.eq?
         (push.iloc.1 . 0)
         (push.const . "unquote appear outside of quasiquote")
         (call
           (touch.gloc.of current-macro-expression)
           (apply.gloc.of current-macro-expression "./boot/macro/expand.scm" . 489562))
         (push)
         (apply.gloc.of syntax-violation "./boot/macro/expand.scm" . 489500))
       (push.cdr.iloc (0 . 0) "./boot/macro/expand.scm" . 490529)
       (gloc.of unexpected-unquote-splicing)
       (if.eq?
         (push.iloc.1 . 0)
         (push.const . "unquote-splicing appear outside of quasiquote")
         (call
           (touch.gloc.of current-macro-expression)
           (apply.gloc.of current-macro-expression "./boot/macro/expand.scm" . 491619))
         (push)
         (apply.gloc.of syntax-violation "./boot/macro/expand.scm" . 491548))
       (push.cdr.iloc (0 . 0) "./boot/macro/expand.scm" . 492577)
       (gloc.of unexpected-syntax)
       (if.eq?
         (push.iloc.1 . 0)
         (push.const . "misplaced syntactic keyword")
         (call
           (touch.gloc.of current-macro-expression)
           (apply.gloc.of current-macro-expression "./boot/macro/expand.scm" . 493649))
         (push)
         (apply.gloc.of syntax-violation "./boot/macro/expand.scm" . 493596))
       (push.cdr.iloc (0 . 0) "./boot/macro/expand.scm" . 494625)
       (gloc.of unexpected-auxiliary-syntax)
       (if.eq?
         (push.iloc.1 . 0)
         (push.const . "misplaced auxiliary syntactic keyword")
         (call
           (touch.gloc.of current-macro-expression)
           (apply.gloc.of current-macro-expression "./boot/macro/expand.scm" . 495707))
         (push)
         (apply.gloc.of syntax-violation "./boot/macro/expand.scm" . 495644))
       (push.iloc.1 . 0)
       (push.const . "misplaced syntactic keyword")
       (call
         (touch.gloc.of current-macro-expression)
         (apply.gloc.of current-macro-expression "./boot/macro/expand.scm" . 497745))
       (push)
       (apply.gloc.of syntax-violation "./boot/macro/expand.scm" . 497692))
     (call
       (touch.gloc.of pattern-variable?)
       (push.iloc.0 . 0)
       (apply.gloc.of pattern-variable? "./boot/macro/expand.scm" . 498709))
     (if.true
       (push.const . #f)
       (push.const . "misplaced pattern variable ~u")
       (push.iloc.1 . 0)
       (push.subr.gloc.of format 2 "./boot/macro/expand.scm" . 499754)
       (call
         (touch.gloc.of current-macro-expression)
         (apply.gloc.of current-macro-expression "./boot/macro/expand.scm" . 499800))
       (push)
       (apply.gloc.of syntax-violation "./boot/macro/expand.scm" . 499733))
     (ret.iloc 1 . 0))
   (iloc.0 . 0)
   (if.null?
     (push.const . #f)
     (push.const . "invalid expression")
     (push.iloc.0 . 0)
     (apply.gloc.of syntax-violation "./boot/macro/expand.scm" . 502796))
   (iloc.0 . 0)
   (if.pair?
     (call
       (touch.gloc.of current-macro-expression)
       (push.iloc.0 . 0)
       (apply.gloc.of current-macro-expression "./boot/macro/expand.scm" . 504844))
     (car.iloc (0 . 0) "./boot/macro/expand.scm" . 505884)
     (if.symbol?
       (call
         (touch.gloc.of env-lookup)
         (push.iloc.0 . 1)
         (push.car.iloc (0 . 0) "./boot/macro/expand.scm" . 506927)
         (apply.gloc.of env-lookup "./boot/macro/expand.scm" . 506911))
       (push)
       (extend . 1)
       (call
         (touch.gloc.of macro?)
         (push.iloc.0 . 0)
         (apply.gloc.of macro? "./boot/macro/expand.scm" . 507932))
       (if.true
         (push.close
           (0 0)
           (touch.gloc.of expand-macro-use)
           (push.iloc 2 . 0)
           (push.iloc 2 . 1)
           (push.iloc.1 . 0)
           (apply.gloc.of expand-macro-use "./boot/macro/expand.scm" . 508985))
         (push.close
           (2 0)
           (call
             (touch.gloc.of annotate-macro!)
             (push.iloc.0 . 0)
             (push.iloc 2 . 0)
             (apply.gloc.of annotate-macro! "./boot/macro/expand.scm" . 509982))
           (call
             (touch.gloc.of expansion-trace-level)
             (apply.gloc.of expansion-trace-level "./boot/macro/expand.scm" . 511013))
           (push)
           (call (apply.gloc.of expansion-backtrace "./boot/macro/expand.scm" . 511037))
           (push)
           (subr.gloc.of < 2 "./boot/macro/expand.scm" . 511010)
           (if.true
             (push.const . #f)
             (push.const . #f)
             (push.iloc 2 . 0)
             (call
               (touch.gloc.of expansion-trace-stack)
               (apply.gloc.of expansion-trace-stack "./boot/macro/expand.scm" . 513097))
             (push.cons)
             (push.const . 1)
             (call
               (touch.gloc.of expansion-trace-level)
               (apply.gloc.of expansion-trace-level "./boot/macro/expand.scm" . 514115))
             (push)
             (push.subr.gloc.of + 2 "./boot/macro/expand.scm" . 514110)
             (extend . 4)
             (push.close
               (0 0)
               (call
                 (touch.gloc.of expansion-trace-stack)
                 (apply.gloc.of expansion-trace-stack "./boot/macro/expand.scm" . 515108))
               (set.iloc (1 . 0) "./boot/macro/expand.scm" . 515108)
               (call
                 (touch.gloc.of expansion-trace-level)
                 (apply.gloc.of expansion-trace-level "./boot/macro/expand.scm" . 515108))
               (set.iloc (1 . 1) "./boot/macro/expand.scm" . 515108)
               (call
                 (touch.gloc.of expansion-trace-stack)
                 (push.iloc.1 . 2)
                 (apply.gloc.of expansion-trace-stack "./boot/macro/expand.scm" . 515108))
               (touch.gloc.of expansion-trace-level)
               (push.iloc.1 . 3)
               (apply.gloc.of expansion-trace-level "./boot/macro/expand.scm" . 515108))
             (push.close
               (0 0)
               (touch.gloc.of expand-form)
               (push.iloc 2 . 0)
               (call
                 (touch.gloc.of extend-env)
                 (push.iloc 2 . 1)
                 (push.iloc 4 . 1)
                 (apply.gloc.of extend-env "./boot/macro/expand.scm" . 515126))
               (push)
               (apply.gloc.of expand-form "./boot/macro/expand.scm" . 515108))
             (push.close
               (0 0)
               (call
                 (touch.gloc.of expansion-trace-stack)
                 (push.iloc.1 . 0)
                 (apply.gloc.of expansion-trace-stack "./boot/macro/expand.scm" . 515108))
               (touch.gloc.of expansion-trace-level)
               (push.iloc.1 . 1)
               (apply.gloc.of expansion-trace-level "./boot/macro/expand.scm" . 515108))
             (apply.gloc.of |.dynamic-wind| "./boot/macro/expand.scm" . 515108))
           (touch.gloc.of expand-form)
           (push.iloc.0 . 0)
           (call
             (touch.gloc.of extend-env)
             (push.iloc.0 . 1)
             (push.iloc 2 . 1)
             (apply.gloc.of extend-env "./boot/macro/expand.scm" . 516148))
           (push)
           (apply.gloc.of expand-form "./boot/macro/expand.scm" . 516130))
         (apply.gloc.of |.call-with-values| "./boot/macro/expand.scm" . 507932))
       (call
         (touch.gloc.of special?)
         (push.iloc.0 . 0)
         (apply.gloc.of special? "./boot/macro/expand.scm" . 517148))
       (if.true
         (call
           (push.iloc.1 . 0)
           (subr.gloc.of list? 1 "./boot/macro/expand.scm" . 518176)
           (if.true.ret)
           (push.const . #f)
           (push.const . "expression is not a proper list")
           (push.iloc.1 . 0)
           (apply.gloc.of syntax-violation "./boot/macro/expand.scm" . 518189))
         (call
           (call
             (touch.gloc.of unexpect-top-level-form)
             (apply.gloc.of unexpect-top-level-form "./boot/macro/expand.scm" . 519204))
           (if.true.ret)
           (push.gloc.of denote-begin)
           (iloc.0 . 0)
           (if.eq?.ret.const . #t)
           (push.gloc.of denote-define)
           (iloc.0 . 0)
           (if.eq?.ret.const . #t)
           (push.gloc.of denote-import)
           (iloc.0 . 0)
           (if.eq?.ret.const . #t)
           (push.gloc.of denote-define-syntax)
           (iloc.0 . 0)
           (if.eq?.ret.const . #t)
           (push.gloc.of denote-let-syntax)
           (iloc.0 . 0)
           (if.eq?.ret.const . #t)
           (push.gloc.of denote-letrec-syntax)
           (iloc.0 . 0)
           (ret.eq? "./boot/macro/expand.scm" . 525348))
         (if.true
           (push.iloc.1 . 0)
           (push.iloc.1 . 1)
           (cdr.iloc (0 . 0) "./boot/macro/expand.scm" . 526369)
           (apply))
         (push.const . #f)
         (extend . 1)
         (push.close
           (0 0)
           (call
             (touch.gloc.of unexpect-top-level-form)
             (apply.gloc.of unexpect-top-level-form "./boot/macro/expand.scm" . 528418))
           (set.iloc (1 . 0) "./boot/macro/expand.scm" . 528418)
           (touch.gloc.of unexpect-top-level-form)
           (push.const . #t)
           (apply.gloc.of unexpect-top-level-form "./boot/macro/expand.scm" . 528418))
         (push.close
           (0 0)
           (push.iloc 3 . 0)
           (push.iloc 3 . 1)
           (cdr.iloc (2 . 0) "./boot/macro/expand.scm" . 528419)
           (apply))
         (push.close
           (0 0)
           (touch.gloc.of unexpect-top-level-form)
           (push.iloc.1 . 0)
           (apply.gloc.of unexpect-top-level-form "./boot/macro/expand.scm" . 528418))
         (apply.gloc.of |.dynamic-wind| "./boot/macro/expand.scm" . 528418))
       (call
         (push.iloc.1 . 0)
         (subr.gloc.of list? 1 "./boot/macro/expand.scm" . 530464)
         (if.true.ret)
         (push.const . #f)
         (push.const . "expression is not a proper list")
         (push.iloc.1 . 0)
         (apply.gloc.of syntax-violation "./boot/macro/expand.scm" . 530477))
       (call
         (touch.gloc.of unexpect-top-level-form)
         (apply.gloc.of unexpect-top-level-form "./boot/macro/expand.scm" . 531488))
       (if.true
         (touch.gloc.of expand-each)
         (push.iloc.1 . 0)
         (push.iloc.1 . 1)
         (apply.gloc.of expand-each "./boot/macro/expand.scm" . 532512))
       (push.const . #f)
       (extend . 1)
       (push.close
         (0 0)
         (call
           (touch.gloc.of unexpect-top-level-form)
           (apply.gloc.of unexpect-top-level-form "./boot/macro/expand.scm" . 534562))
         (set.iloc (1 . 0) "./boot/macro/expand.scm" . 534562)
         (touch.gloc.of unexpect-top-level-form)
         (push.const . #t)
         (apply.gloc.of unexpect-top-level-form "./boot/macro/expand.scm" . 534562))
       (push.close
         (0 0)
         (touch.gloc.of expand-each)
         (push.iloc 3 . 0)
         (push.iloc 3 . 1)
         (apply.gloc.of expand-each "./boot/macro/expand.scm" . 534562))
       (push.close
         (0 0)
         (touch.gloc.of unexpect-top-level-form)
         (push.iloc.1 . 0)
         (apply.gloc.of unexpect-top-level-form "./boot/macro/expand.scm" . 534562))
       (apply.gloc.of |.dynamic-wind| "./boot/macro/expand.scm" . 534562))
     (call
       (push.iloc.0 . 0)
       (subr.gloc.of list? 1 "./boot/macro/expand.scm" . 536599)
       (if.true.ret)
       (push.const . #f)
       (push.const . "expression is not a proper list")
       (push.iloc.0 . 0)
       (apply.gloc.of syntax-violation "./boot/macro/expand.scm" . 536612))
     (call
       (touch.gloc.of unexpect-top-level-form)
       (apply.gloc.of unexpect-top-level-form "./boot/macro/expand.scm" . 537623))
     (if.true
       (touch.gloc.of expand-each)
       (push.iloc.0 . 0)
       (push.iloc.0 . 1)
       (apply.gloc.of expand-each "./boot/macro/expand.scm" . 538647))
     (push.const . #f)
     (extend . 1)
     (push.close
       (0 0)
       (call
         (touch.gloc.of unexpect-top-level-form)
         (apply.gloc.of unexpect-top-level-form "./boot/macro/expand.scm" . 540697))
       (set.iloc (1 . 0) "./boot/macro/expand.scm" . 540697)
       (touch.gloc.of unexpect-top-level-form)
       (push.const . #t)
       (apply.gloc.of unexpect-top-level-form "./boot/macro/expand.scm" . 540697))
     (push.close
       (0 0)
       (touch.gloc.of expand-each)
       (push.iloc 2 . 0)
       (push.iloc 2 . 1)
       (apply.gloc.of expand-each "./boot/macro/expand.scm" . 540697))
     (push.close
       (0 0)
       (touch.gloc.of unexpect-top-level-form)
       (push.iloc.1 . 0)
       (apply.gloc.of unexpect-top-level-form "./boot/macro/expand.scm" . 540697))
     (apply.gloc.of |.dynamic-wind| "./boot/macro/expand.scm" . 540697))
   (call
     (push.iloc.0 . 0)
     (subr.gloc.of boolean? 1 "./boot/macro/expand.scm" . 541712)
     (if.true.ret)
     (push.iloc.0 . 0)
     (subr.gloc.of number? 1 "./boot/macro/expand.scm" . 541728)
     (if.true.ret)
     (push.iloc.0 . 0)
     (subr.gloc.of char? 1 "./boot/macro/expand.scm" . 541743)
     (if.true.ret)
     (push.iloc.0 . 0)
     (subr.gloc.of string? 1 "./boot/macro/expand.scm" . 541756)
     (if.true.ret)
     (push.iloc.0 . 0)
     (ret.subr.gloc.of bytevector? "./boot/macro/expand.scm" . 541771))
   (if.true (ret.iloc 0 . 0))
   (push.const . #f)
   (push.const . "invalid expression")
   (push.iloc.0 . 0)
   (apply.gloc.of syntax-violation "./boot/macro/expand.scm" . 543756))
 (set.gloc.of expand-form)
 (ret.const.unspec))
((close
   (1 1 . macro-expand)
   (push.const . #f)
   (push.const . #f)
   (push.const . #f)
   (push.const . #f)
   (push.const . #f)
   (push.const . #f)
   (push.const)
   (extend . 7)
   (push.close
     (0 0)
     (call
       (touch.gloc.of current-expansion-mode)
       (apply.gloc.of current-expansion-mode "./boot/macro/expand.scm" . 553991))
     (set.iloc (1 . 0) "./boot/macro/expand.scm" . 553991)
     (call
       (touch.gloc.of current-macro-expression)
       (apply.gloc.of current-macro-expression "./boot/macro/expand.scm" . 553991))
     (set.iloc (1 . 1) "./boot/macro/expand.scm" . 553991)
     (call
       (touch.gloc.of current-top-level-exterior)
       (apply.gloc.of current-top-level-exterior "./boot/macro/expand.scm" . 553991))
     (set.iloc (1 . 2) "./boot/macro/expand.scm" . 553991)
     (call
       (touch.gloc.of unexpect-top-level-form)
       (apply.gloc.of unexpect-top-level-form "./boot/macro/expand.scm" . 553991))
     (set.iloc (1 . 3) "./boot/macro/expand.scm" . 553991)
     (call
       (touch.gloc.of expansion-trace-level)
       (apply.gloc.of expansion-trace-level "./boot/macro/expand.scm" . 553991))
     (set.iloc (1 . 4) "./boot/macro/expand.scm" . 553991)
     (call
       (touch.gloc.of expansion-trace-stack)
       (apply.gloc.of expansion-trace-stack "./boot/macro/expand.scm" . 553991))
     (set.iloc (1 . 5) "./boot/macro/expand.scm" . 553991)
     (call
       (touch.gloc.of current-expansion-mode)
       (push.iloc 2 . 1)
       (apply.gloc.of current-expansion-mode "./boot/macro/expand.scm" . 553991))
     (call
       (touch.gloc.of current-macro-expression)
       (push.const . #f)
       (apply.gloc.of current-macro-expression (current-macro-expression #f)))
     (call
       (touch.gloc.of current-top-level-exterior)
       (push.const . #f)
       (apply.gloc.of current-top-level-exterior (current-top-level-exterior #f)))
     (call
       (touch.gloc.of unexpect-top-level-form)
       (push.const . #f)
       (apply.gloc.of unexpect-top-level-form (unexpect-top-level-form #f)))
     (call
       (touch.gloc.of expansion-trace-level)
       (push.const . 0)
       (apply.gloc.of expansion-trace-level "./boot/macro/expand.scm" . 553991))
     (touch.gloc.of expansion-trace-stack)
     (push.iloc.1 . 6)
     (apply.gloc.of expansion-trace-stack "./boot/macro/expand.scm" . 553991))
   (push.close
     (0 0)
     (call
       (call
         (touch.gloc.of denote-begin?)
         (push.const)
         (push.const . begin)
         (apply.gloc.of denote-begin? "./boot/macro/expand.scm" . 554007))
       (if.true
         (touch.gloc.of flatten-top-level-begin)
         (push.const . begin)
         (push.iloc 2 . 0)
         (push.subr.gloc.of |.list| 2 "./boot/macro/expand.scm" . 555031)
         (push.gloc.of private-primitives-environment)
         (apply.gloc.of flatten-top-level-begin "./boot/macro/expand.scm" . 555031))
       (ret.iloc 2 . 0))
     (push)
     (extend . 1)
     (cdr.iloc (0 . 0) "./boot/macro/expand.scm" . 557076)
     (if.null? (ret.const.unspec))
     (call
       (touch.gloc.of expand-form)
       (push.iloc.0 . 0)
       (push.gloc.of private-primitives-environment)
       (apply.gloc.of expand-form "./boot/macro/expand.scm" . 559149))
     (push)
     (push.gloc.of annotate)
     (push.gloc.of annotate-closure)
     (call (apply.gloc.of current-after-expansion-hook "./boot/macro/expand.scm" . 559118))
     (apply))
   (push.close
     (0 0)
     (call
       (touch.gloc.of current-expansion-mode)
       (push.iloc.1 . 0)
       (apply.gloc.of current-expansion-mode "./boot/macro/expand.scm" . 553991))
     (call
       (touch.gloc.of current-macro-expression)
       (push.iloc.1 . 1)
       (apply.gloc.of current-macro-expression "./boot/macro/expand.scm" . 553991))
     (call
       (touch.gloc.of current-top-level-exterior)
       (push.iloc.1 . 2)
       (apply.gloc.of current-top-level-exterior "./boot/macro/expand.scm" . 553991))
     (call
       (touch.gloc.of unexpect-top-level-form)
       (push.iloc.1 . 3)
       (apply.gloc.of unexpect-top-level-form "./boot/macro/expand.scm" . 553991))
     (call
       (touch.gloc.of expansion-trace-level)
       (push.iloc.1 . 4)
       (apply.gloc.of expansion-trace-level "./boot/macro/expand.scm" . 553991))
     (touch.gloc.of expansion-trace-stack)
     (push.iloc.1 . 5)
     (apply.gloc.of expansion-trace-stack "./boot/macro/expand.scm" . 553991))
   (apply.gloc.of
     |.dynamic-wind|
     (|.dynamic-wind|
       (lambda ()
         (set! |tmp1`736`743*| (current-expansion-mode))
         (set! |tmp1`737`743*| (current-macro-expression))
         (set! |tmp1`738`743*| (current-top-level-exterior))
         (set! |tmp1`739`743*| (unexpect-top-level-form))
         (set! |tmp1`740`743*| (expansion-trace-level))
         (set! |tmp1`741`743*| (expansion-trace-stack))
         (current-expansion-mode |mode`733*|)
         (current-macro-expression #f)
         (current-top-level-exterior #f)
         (unexpect-top-level-form #f)
         (expansion-trace-level 0)
         (expansion-trace-stack |tmp2`741`743*|))
       (lambda ()
         (let ((|form`749*|
                 (if (denote-begin? '() 'begin)
                     (flatten-top-level-begin
                       (|.list| 'begin |form`733*|)
                       private-primitives-environment)
                     |form`733*|)))
           (if (null? (cdr |form`749*|))
               (unspecified)
               ((current-after-expansion-hook)
                (expand-form |form`749*| private-primitives-environment)
                annotate
                annotate-closure))))
       (lambda ()
         (current-expansion-mode |tmp1`736`743*|)
         (current-macro-expression |tmp1`737`743*|)
         (current-top-level-exterior |tmp1`738`743*|)
         (unexpect-top-level-form |tmp1`739`743*|)
         (expansion-trace-level |tmp1`740`743*|)
         (expansion-trace-stack |tmp1`741`743*|)))))
 (set.gloc.of macro-expand)
 (ret.const.unspec))

;
((close
   (2 0 . expand-lambda)
   (call
     (touch.gloc.of safe-length)
     (push.iloc.0 . 0)
     (apply.gloc.of safe-length "./boot/macro/base.scm" . 7183))
   (push)
   (push.const . 2)
   (subr.gloc.of > 2 "./boot/macro/base.scm" . 7180)
   (if.true
     (call
       (touch.gloc.of collect-lambda-formals)
       (push.cadr.iloc (0 . 0) "./boot/macro/base.scm" . 8240)
       (push.iloc.0 . 0)
       (apply.gloc.of collect-lambda-formals "./boot/macro/base.scm" . 8216))
     (push)
     (extend . 1)
     (call
       (touch.gloc.of fresh-rename-count)
       (apply.gloc.of fresh-rename-count "./boot/macro/base.scm" . 9245))
     (push)
     (extend . 1)
     (call
       (push.gloc.of cons)
       (push.iloc.1 . 0)
       (call
         (push.close
           (1 0)
           (touch.gloc.of rename-variable-id)
           (push.iloc.0 . 0)
           (push.iloc.1 . 0)
           (apply.gloc.of rename-variable-id "./boot/macro/base.scm" . 10303))
         (push.iloc.1 . 0)
         (apply.gloc.of map "./boot/macro/base.scm" . 10285))
       (push)
       (apply.gloc.of map "./boot/macro/base.scm" . 10270))
     (push)
     (extend . 1)
     (call
       (touch.gloc.of expand-body)
       (push.iloc 3 . 0)
       (push.cddr.iloc (3 . 0) "./boot/macro/base.scm" . 11309)
       (call
         (touch.gloc.of extend-env)
         (push.iloc.0 . 0)
         (push.iloc 3 . 1)
         (apply.gloc.of extend-env "./boot/macro/base.scm" . 11321))
       (push)
       (apply.gloc.of expand-body "./boot/macro/base.scm" . 11291))
     (push)
     (extend . 1)
     (iloc.0 . 0)
     (if.null?
       (push.const . lambda)
       (push.const . "empty body")
       (push.iloc 4 . 0)
       (apply.gloc.of syntax-violation "./boot/macro/base.scm" . 13332))
     (touch.gloc.of annotate)
     (push.const . lambda)
     (call
       (touch.gloc.of rename-lambda-formals)
       (push.cadr.iloc (4 . 0) "./boot/macro/base.scm" . 14399)
       (push.iloc.1 . 0)
       (apply.gloc.of rename-lambda-formals "./boot/macro/base.scm" . 14376))
     (push)
     (push.iloc.0 . 0)
     (push.subr.gloc.of |.cons*| 3 "./boot/macro/base.scm" . 14356)
     (push.iloc 4 . 0)
     (apply.gloc.of annotate "./boot/macro/base.scm" . 14356))
   (push.const . lambda)
   (push.const . "expected formals and body")
   (push.iloc.0 . 0)
   (apply.gloc.of syntax-violation "./boot/macro/base.scm" . 16396))
 (set.gloc.of expand-lambda)
 (ret.const.unspec))
((close
   (2 0 . expand-quote)
   (call
     (touch.gloc.of safe-length)
     (push.iloc.0 . 0)
     (apply.gloc.of safe-length "./boot/macro/base.scm" . 20492))
   (push)
   (push.const . 2)
   (subr.gloc.of = 2 "./boot/macro/base.scm" . 20489)
   (if.true
     (touch.gloc.of annotate)
     (push.const . quote)
     (call
       (touch.gloc.of strip-rename-suffix)
       (push.cadr.iloc (0 . 0) "./boot/macro/base.scm" . 21553)
       (apply.gloc.of strip-rename-suffix "./boot/macro/base.scm" . 21532))
     (push)
     (push.subr.gloc.of |.list| 2 "./boot/macro/base.scm" . 21513)
     (push.iloc.0 . 0)
     (apply.gloc.of annotate "./boot/macro/base.scm" . 21513))
   (push.const . quote)
   (push.const . "expected single datum")
   (push.iloc.0 . 0)
   (apply.gloc.of syntax-violation "./boot/macro/base.scm" . 22537))
 (set.gloc.of expand-quote)
 (ret.const.unspec))
((close
   (2 0 . expand-begin)
   (call
     (call
       (touch.gloc.of unexpect-top-level-form)
       (apply.gloc.of unexpect-top-level-form "./boot/macro/base.scm" . 26634))
     (if.false.ret)
     (cdr.iloc (0 . 0) "./boot/macro/base.scm" . 27669)
     (if.pair?.ret.const . #t)
     (push.const . begin)
     (push.const . "misplaced empty begin")
     (push.iloc.0 . 0)
     (apply.gloc.of syntax-violation "./boot/macro/base.scm" . 28686))
   (touch.gloc.of annotate)
   (push.const . begin)
   (call
     (touch.gloc.of flatten-begin)
     (call
       (touch.gloc.of expand-each)
       (push.cdr.iloc (0 . 0) "./boot/macro/base.scm" . 29749)
       (push.iloc.0 . 1)
       (apply.gloc.of expand-each "./boot/macro/base.scm" . 29736))
     (push)
     (push.iloc.0 . 1)
     (apply.gloc.of flatten-begin "./boot/macro/base.scm" . 29721))
   (push.cons)
   (push.iloc.0 . 0)
   (apply.gloc.of annotate "./boot/macro/base.scm" . 29701))
 (set.gloc.of expand-begin)
 (ret.const.unspec))
((close
   (2 0 . expand-if)
   (touch.gloc.of annotate)
   (call
     (call
       (iloc.0 . 0)
       (if.not.pair?.ret.const . #f)
       (cdr.iloc (0 . 0) (cdr |form`770*|))
       (if.not.pair?.ret.const . #f)
       (cddr.iloc (0 . 0) (cddr |form`770*|))
       (ret.pair? (pair? (cddr |form`770*|))))
     (push)
     (extend . 1)
     (call
       (iloc.0 . 0)
       (if.false.ret)
       (push.iloc.1 . 0)
       (subr.gloc.of cdddr 1 (cdddr |form`770*|))
       (ret.null? (null? (cdddr |form`770*|))))
     (if.true
       (push.iloc.1 . 0)
       (push.subr.gloc.of caddr 1 (caddr |form`770*|))
       (extend . 1)
       (push.const . if)
       (call
         (touch.gloc.of expand-form)
         (push.cadr.iloc (2 . 0) (cadr |form`770*|))
         (push.iloc 2 . 1)
         (apply.gloc.of expand-form (expand-form (cadr |form`770*|) |env`770*|)))
       (push)
       (call
         (touch.gloc.of expand-form)
         (push.iloc.0 . 0)
         (push.iloc 2 . 1)
         (apply.gloc.of expand-form (expand-form |expr`778*| |env`770*|)))
       (push)
       (ret.subr.gloc.of
         |.list|
         (|.list|
           'if
           (expand-form (cadr |form`770*|) |env`770*|)
           (expand-form |expr`778*| |env`770*|))))
     (call
       (iloc.0 . 0)
       (if.false.ret)
       (push.iloc.1 . 0)
       (subr.gloc.of cdddr 1 (cdddr |form`770*|))
       (if.not.pair?.ret.const . #f)
       (push.iloc.1 . 0)
       (subr.gloc.of cddddr 1 (cddddr |form`770*|))
       (ret.null? (null? (cddddr |form`770*|))))
     (if.true
       (push.iloc.1 . 0)
       (push.subr.gloc.of cadddr 1 (cadddr |form`770*|))
       (push.iloc.1 . 0)
       (push.subr.gloc.of caddr 1 (caddr |form`770*|))
       (extend . 2)
       (push.const . if)
       (call
         (touch.gloc.of expand-form)
         (push.cadr.iloc (2 . 0) (cadr |form`770*|))
         (push.iloc 2 . 1)
         (apply.gloc.of expand-form (expand-form (cadr |form`770*|) |env`770*|)))
       (push)
       (call
         (touch.gloc.of expand-form)
         (push.iloc.0 . 1)
         (push.iloc 2 . 1)
         (apply.gloc.of expand-form (expand-form |expr1`780*| |env`770*|)))
       (push)
       (call
         (touch.gloc.of expand-form)
         (push.iloc.0 . 0)
         (push.iloc 2 . 1)
         (apply.gloc.of expand-form (expand-form |expr2`780*| |env`770*|)))
       (push)
       (ret.subr.gloc.of
         |.list|
         (|.list|
           'if
           (expand-form (cadr |form`770*|) |env`770*|)
           (expand-form |expr1`780*| |env`770*|)
           (expand-form |expr2`780*| |env`770*|))))
     (push.const . if)
     (push.const . "expected 2 or 3 expressions")
     (push.iloc.1 . 0)
     (apply.gloc.of
       syntax-violation
       (syntax-violation 'if "expected 2 or 3 expressions" |form`770*|)))
   (push)
   (push.iloc.0 . 0)
   (apply.gloc.of
     annotate
     (annotate
       (let ((|.L257`772`775*|
               (and (pair? |form`770*|) (pair? (cdr |form`770*|)) (pair? (cddr |form`770*|)))))
         (if (and |.L257`772`775*| (null? (cdddr |form`770*|)))
             (let ((|expr`778*| (caddr |form`770*|)))
               (|.list|
                 'if
                 (expand-form (cadr |form`770*|) |env`770*|)
                 (expand-form |expr`778*| |env`770*|)))
             (if (and |.L257`772`775*| (pair? (cdddr |form`770*|)) (null? (cddddr |form`770*|)))
                 (let ((|expr2`780*| (cadddr |form`770*|)) (|expr1`780*| (caddr |form`770*|)))
                   (|.list|
                     'if
                     (expand-form (cadr |form`770*|) |env`770*|)
                     (expand-form |expr1`780*| |env`770*|)
                     (expand-form |expr2`780*| |env`770*|)))
                 (syntax-violation 'if "expected 2 or 3 expressions" |form`770*|))))
       |form`770*|)))
 (set.gloc.of expand-if)
 (ret.const.unspec))
((close
   (2 0 . expand-set!)
   (call
     (iloc.0 . 0)
     (if.not.pair?.ret.const . #f)
     (cdr.iloc (0 . 0) "./boot/macro/base.scm" . 48133)
     (if.not.pair?.ret.const . #f)
     (cddr.iloc (0 . 0) "./boot/macro/base.scm" . 48133)
     (if.not.pair?.ret.const . #f)
     (push.iloc.0 . 0)
     (subr.gloc.of cdddr 1 "./boot/macro/base.scm" . 48133)
     (if.not.null?.ret.const . #f)
     (push.cadr.iloc (0 . 0) "./boot/macro/base.scm" . 48133)
     (ret.subr.gloc.of symbol? "./boot/macro/base.scm" . 48133))
   (if.true
     (push.iloc.0 . 0)
     (push.subr.gloc.of caddr 1 "./boot/macro/base.scm" . 48133)
     (push.cadr.iloc (0 . 0) "./boot/macro/base.scm" . 48133)
     (extend . 2)
     (call
       (touch.gloc.of env-lookup)
       (push.iloc.1 . 1)
       (push.iloc.0 . 1)
       (apply.gloc.of env-lookup "./boot/macro/base.scm" . 48133))
     (push)
     (extend . 1)
     (call
       (touch.gloc.of macro-variable?)
       (push.iloc.0 . 0)
       (apply.gloc.of macro-variable? "./boot/macro/base.scm" . 48133))
     (if.true
       (push.close
         (0 0)
         (touch.gloc.of expand-macro-use)
         (push.iloc 3 . 0)
         (push.iloc 3 . 1)
         (push.iloc.1 . 0)
         (apply.gloc.of expand-macro-use "./boot/macro/base.scm" . 48133))
       (push.close
         (2 0)
         (call
           (touch.gloc.of annotate-macro!)
           (push.iloc.0 . 0)
           (push.iloc 3 . 0)
           (apply.gloc.of annotate-macro! "./boot/macro/base.scm" . 48133))
         (touch.gloc.of expand-form)
         (push.iloc.0 . 0)
         (call
           (touch.gloc.of extend-env)
           (push.iloc.0 . 1)
           (push.iloc 3 . 1)
           (apply.gloc.of extend-env "./boot/macro/base.scm" . 48133))
         (push)
         (apply.gloc.of expand-form "./boot/macro/base.scm" . 48133))
       (apply.gloc.of |.call-with-values| "./boot/macro/base.scm" . 48133))
     (call
       (call
         (touch.gloc.of special?)
         (push.iloc.0 . 0)
         (apply.gloc.of special? "./boot/macro/base.scm" . 48133))
       (if.true.ret)
       (touch.gloc.of macro?)
       (push.iloc.0 . 0)
       (apply.gloc.of macro? "./boot/macro/base.scm" . 48133))
     (if.true
       (push.const . set!)
       (push.const . "misplaced syntactic keyword as variable")
       (push.iloc 2 . 0)
       (apply.gloc.of syntax-violation "./boot/macro/base.scm" . 48133))
     (call
       (touch.gloc.of expand-form)
       (push.iloc.1 . 1)
       (push.iloc 2 . 1)
       (apply.gloc.of expand-form "./boot/macro/base.scm" . 48133))
     (push)
     (extend . 1)
     (call
       (push.gloc.of immutable-primitives)
       (push.iloc.0 . 0)
       (subr.gloc.of core-hashtable-contains? 2 "./boot/macro/base.scm" . 48133)
       (if.false.ret)
       (push.const . set!)
       (push.const . "attempt to modify immutable variable")
       (push.iloc 3 . 0)
       (apply.gloc.of syntax-violation "./boot/macro/base.scm" . 48133))
     (call
       (call
         (touch.gloc.of current-immutable-identifiers)
         (apply.gloc.of current-immutable-identifiers "./boot/macro/base.scm" . 48133))
       (if.false.ret)
       (call
         (touch.gloc.of renamed-id?)
         (push.iloc.0 . 0)
         (apply.gloc.of renamed-id? "./boot/macro/base.scm" . 48133))
       (if.true.ret.const . #f)
       (call
         (touch.gloc.of current-immutable-identifiers)
         (apply.gloc.of current-immutable-identifiers "./boot/macro/base.scm" . 48133))
       (push)
       (push.iloc 2 . 1)
       (push.const . #f)
       (subr.gloc.of core-hashtable-ref 3 "./boot/macro/base.scm" . 48133)
       (if.false.ret)
       (push.const . set!)
       (push.const . "attempt to modify immutable variable")
       (push.iloc 3 . 0)
       (apply.gloc.of syntax-violation "./boot/macro/base.scm" . 48133))
     (call
       (touch.gloc.of expand-form)
       (push.iloc 2 . 0)
       (push.iloc 3 . 1)
       (apply.gloc.of expand-form "./boot/macro/base.scm" . 48133))
     (push)
     (extend . 1)
     (call
       (iloc.0 . 0)
       (if.not.pair?.ret.const . #f)
       (call
         (touch.gloc.of denote-lambda?)
         (push.iloc 4 . 1)
         (push.car.iloc (0 . 0) "./boot/macro/base.scm" . 48133)
         (apply.gloc.of denote-lambda? "./boot/macro/base.scm" . 48133))
       (if.false.ret)
       (touch.gloc.of set-closure-comment!)
       (push.iloc.0 . 0)
       (call
         (touch.gloc.of original-id)
         (push.iloc.1 . 0)
         (apply.gloc.of original-id "./boot/macro/base.scm" . 48133))
       (push)
       (apply.gloc.of set-closure-comment! "./boot/macro/base.scm" . 48133))
     (touch.gloc.of annotate)
     (push.const . set!)
     (push.iloc.1 . 0)
     (push.iloc.0 . 0)
     (push.subr.gloc.of |.list| 3 "./boot/macro/base.scm" . 48133)
     (push.iloc 4 . 0)
     (apply.gloc.of annotate "./boot/macro/base.scm" . 48133))
   (push.const . set!)
   (push.const . "expected variable and single expression")
   (push.iloc.0 . 0)
   (apply.gloc.of syntax-violation "./boot/macro/base.scm" . 48133))
 (set.gloc.of expand-set!)
 (ret.const.unspec))
((close
   (2 0 . expand-let-syntax)
   (call
     (iloc.0 . 0)
     (if.not.pair?.ret.const . #f)
     (cdr.iloc (0 . 0) "./boot/macro/base.scm" . 75781)
     (if.not.pair?.ret.const . #f)
     (push.cddr.iloc (0 . 0) "./boot/macro/base.scm" . 75781)
     (ret.subr.gloc.of list? "./boot/macro/base.scm" . 75781))
   (if.true
     (push.cddr.iloc (0 . 0) "./boot/macro/base.scm" . 75781)
     (push.cadr.iloc (0 . 0) "./boot/macro/base.scm" . 75781)
     (extend . 2)
     (call
       (touch.gloc.of check-let-bindings)
       (push.iloc.1 . 0)
       (push.iloc.0 . 1)
       (apply.gloc.of check-let-bindings "./boot/macro/base.scm" . 75781))
     (call
       (touch.gloc.of fresh-rename-count)
       (apply.gloc.of fresh-rename-count "./boot/macro/base.scm" . 75781))
     (touch.gloc.of expand-form)
     (push.const . |.BEGIN|)
     (iloc.0 . 0)
     (push.cons)
     (call
       (touch.gloc.of expand-let-syntax-bindings)
       (push.iloc.1 . 0)
       (push.iloc.0 . 1)
       (push.iloc.1 . 1)
       (apply.gloc.of expand-let-syntax-bindings "./boot/macro/base.scm" . 75781))
     (push)
     (apply.gloc.of expand-form "./boot/macro/base.scm" . 75781))
   (push.car.iloc (0 . 0) "./boot/macro/base.scm" . 75781)
   (push.const . "expected bindings and body")
   (push.iloc.0 . 0)
   (apply.gloc.of syntax-violation "./boot/macro/base.scm" . 75781))
 (set.gloc.of expand-let-syntax)
 (ret.const.unspec))
((close
   (2 0 . expand-letrec-syntax)
   (call
     (iloc.0 . 0)
     (if.not.pair?.ret.const . #f)
     (cdr.iloc (0 . 0) "./boot/macro/base.scm" . 87045)
     (if.not.pair?.ret.const . #f)
     (push.cddr.iloc (0 . 0) "./boot/macro/base.scm" . 87045)
     (ret.subr.gloc.of list? "./boot/macro/base.scm" . 87045))
   (if.true
     (push.cddr.iloc (0 . 0) "./boot/macro/base.scm" . 87045)
     (push.cadr.iloc (0 . 0) "./boot/macro/base.scm" . 87045)
     (extend . 2)
     (call
       (touch.gloc.of check-let-bindings)
       (push.iloc.1 . 0)
       (push.iloc.0 . 1)
       (apply.gloc.of check-let-bindings "./boot/macro/base.scm" . 87045))
     (call
       (touch.gloc.of fresh-rename-count)
       (apply.gloc.of fresh-rename-count "./boot/macro/base.scm" . 87045))
     (touch.gloc.of expand-form)
     (push.const . |.BEGIN|)
     (iloc.0 . 0)
     (push.cons)
     (call
       (touch.gloc.of expand-letrec-syntax-bindings)
       (push.iloc.1 . 0)
       (push.iloc.0 . 1)
       (push.iloc.1 . 1)
       (apply.gloc.of expand-letrec-syntax-bindings "./boot/macro/base.scm" . 87045))
     (push)
     (apply.gloc.of expand-form "./boot/macro/base.scm" . 87045))
   (push.car.iloc (0 . 0) "./boot/macro/base.scm" . 87045)
   (push.const . "expected bindings and body")
   (push.iloc.0 . 0)
   (apply.gloc.of syntax-violation "./boot/macro/base.scm" . 87045))
 (set.gloc.of expand-letrec-syntax)
 (ret.const.unspec))
((close
   (2 0 . expand-define-syntax)
   (call
     (call
       (touch.gloc.of unexpect-top-level-form)
       (apply.gloc.of unexpect-top-level-form "./boot/macro/base.scm" . 98314))
     (if.false.ret)
     (push.car.iloc (0 . 0) "./boot/macro/base.scm" . 99356)
     (push.const . "misplaced definition")
     (push.iloc.0 . 0)
     (apply.gloc.of syntax-violation "./boot/macro/base.scm" . 99338))
   (call
     (iloc.0 . 0)
     (if.not.pair?.ret.const . #f)
     (cdr.iloc (0 . 0) (cdr |form`818*|))
     (if.not.pair?.ret.const . #f)
     (cddr.iloc (0 . 0) (cddr |form`818*|))
     (if.not.pair?.ret.const . #f)
     (push.iloc.0 . 0)
     (subr.gloc.of cdddr 1 (cdddr |form`818*|))
     (if.not.null?.ret.const . #f)
     (push.cadr.iloc (0 . 0) (cadr |form`818*|))
     (ret.subr.gloc.of symbol? (symbol? (cadr |form`818*|))))
   (if.true
     (push.iloc.0 . 0)
     (push.subr.gloc.of caddr 1 (caddr |form`818*|))
     (push.cadr.iloc (0 . 0) (cadr |form`818*|))
     (extend . 2)
     (call
       (push.const . #f)
       (extend . 1)
       (push.close
         (0 0)
         (call
           (touch.gloc.of unexpect-top-level-form)
           (apply.gloc.of unexpect-top-level-form (unexpect-top-level-form)))
         (set.iloc (1 . 0) (set! |tmp1`827`829*| (unexpect-top-level-form)))
         (touch.gloc.of unexpect-top-level-form)
         (push.const . #t)
         (apply.gloc.of unexpect-top-level-form (unexpect-top-level-form #t)))
       (push.close
         (0 0)
         (call
           (touch.gloc.of env-delete!)
           (push.iloc 3 . 1)
           (push.iloc 2 . 1)
           (apply.gloc.of env-delete! (env-delete! |env`818*| |name`824*|)))
         (push.close
           (0 0)
           (touch.gloc.of compile-macro)
           (push.iloc 4 . 0)
           (push.iloc 3 . 0)
           (push.iloc 4 . 1)
           (apply.gloc.of compile-macro (compile-macro |form`818*| |body`824*| |env`818*|)))
         (push.close
           (1 1)
           (call
             (touch.gloc.of macro-variable?)
             (push.iloc.0 . 0)
             (apply.gloc.of macro-variable? (macro-variable? |code`835*|)))
           (if.true
             (push.const . variable)
             (push.iloc 3 . 1)
             (push.cadr.iloc (0 . 0) (cadr |code`835*|))
             (push.iloc 4 . 1)
             (apply.gloc.of
               |.set-top-level-macro!|
               (|.set-top-level-macro!| 'variable |name`824*| (cadr |code`835*|) |env`818*|)))
           (push.const . syntax)
           (push.iloc 3 . 1)
           (push.iloc.0 . 0)
           (push.iloc 4 . 1)
           (apply.gloc.of
             |.set-top-level-macro!|
             (|.set-top-level-macro!| 'syntax |name`824*| |code`835*| |env`818*|)))
         (apply.gloc.of
           |.call-with-values|
           (|.call-with-values|
             (lambda () (compile-macro |form`818*| |body`824*| |env`818*|))
             (lambda (|code`835*| . |expr`835*|)
               (if (macro-variable? |code`835*|)
                   (|.set-top-level-macro!| 'variable |name`824*| (cadr |code`835*|) |env`818*|)
                   (|.set-top-level-macro!| 'syntax |name`824*| |code`835*| |env`818*|))))))
       (push.close
         (0 0)
         (touch.gloc.of unexpect-top-level-form)
         (push.iloc.1 . 0)
         (apply.gloc.of unexpect-top-level-form (unexpect-top-level-form |tmp1`827`829*|)))
       (apply.gloc.of
         |.dynamic-wind|
         (|.dynamic-wind|
           (lambda () (set! |tmp1`827`829*| (unexpect-top-level-form)) (unexpect-top-level-form #t))
           (lambda ()
             (env-delete! |env`818*| |name`824*|)
             (|.call-with-values|
               (lambda () (compile-macro |form`818*| |body`824*| |env`818*|))
               (lambda (|code`835*| . |expr`835*|)
                 (if (macro-variable? |code`835*|)
                     (|.set-top-level-macro!| 'variable |name`824*| (cadr |code`835*|) |env`818*|)
                     (|.set-top-level-macro!| 'syntax |name`824*| |code`835*| |env`818*|)))))
           (lambda () (unexpect-top-level-form |tmp1`827`829*|)))))
     (ret.const begin))
   (push.car.iloc (0 . 0) (car |form`818*|))
   (push.const . "expected symbol and single expression")
   (push.iloc.0 . 0)
   (apply.gloc.of
     syntax-violation
     (syntax-violation (car |form`818*|) "expected symbol and single expression" |form`818*|)))
 (set.gloc.of expand-define-syntax)
 (ret.const.unspec))
((close
   (1 0 . immutable?)
   (push.gloc.of immutable-primitives)
   (push.iloc.0 . 0)
   (subr.gloc.of core-hashtable-contains? 2 "./boot/macro/base.scm" . 118797)
   (if.true.ret)
   (push.iloc.0 . 0)
   (push.const
     library
     define
     define-syntax
     quote
     lambda
     if
     set!
     cond
     case
     and
     or
     let
     let*
     letrec
     letrec*
     let-values
     let*-values
     begin
     quasiquote
     unquote
     unquote-splicing
     let-syntax
     letrec-syntax
     syntax-rules
     identifier-syntax
     assert
     else
     =>
     ...
     _)
   (ret.subr.gloc.of memq "./boot/macro/base.scm" . 119821))
 (set.gloc.of |immutable?`841*|)
 (close
   (2 0 . expand-define)
   (extend.enclose+
     (1 0 . let?)
     (touch.gloc.of denote-let?)
     (push.iloc 2 . 1)
     (push.iloc.0 . 0)
     (apply.gloc.of denote-let? "./boot/macro/base.scm" . 130057))
   (call
     (call
       (touch.gloc.of unexpect-top-level-form)
       (apply.gloc.of unexpect-top-level-form "./boot/macro/base.scm" . 132106))
     (if.false.ret)
     (push.car.iloc (1 . 0) "./boot/macro/base.scm" . 133148)
     (push.const . "misplaced definition")
     (push.iloc.1 . 0)
     (apply.gloc.of syntax-violation "./boot/macro/base.scm" . 133130))
   (call
     (touch.gloc.of desugar-define)
     (push.iloc.1 . 0)
     (apply.gloc.of desugar-define (desugar-define |form`840*|)))
   (push)
   (extend . 1)
   (iloc.0 . 0)
   (if.not.pair?.ret.const . #f)
   (cdr.iloc (0 . 0) (cdr |.L274`846`847*|))
   (if.not.pair?.ret.const . #f)
   (cddr.iloc (0 . 0) (cddr |.L274`846`847*|))
   (if.not.pair?.ret.const . #f)
   (push.iloc.0 . 0)
   (subr.gloc.of cdddr 1 (cdddr |.L274`846`847*|))
   (if.not.null?.ret.const . #f)
   (push.iloc.0 . 0)
   (push.subr.gloc.of caddr 1 (caddr |.L274`846`847*|))
   (push.cadr.iloc (0 . 0) (cadr |.L274`846`847*|))
   (extend . 2)
   (call
     (call
       (touch.gloc.of |immutable?`841*|)
       (push.iloc.0 . 1)
       (apply.gloc.of |immutable?`841*| (|immutable?`841*| |name`850*|)))
     (if.false.ret)
     (push.car.iloc (3 . 0) (car |form`840*|))
     (push.const . "attempt to modify immutable binding")
     (push.iloc 3 . 0)
     (apply.gloc.of
       syntax-violation
       (syntax-violation (car |form`840*|) "attempt to modify immutable binding" |form`840*|)))
   (call
     (push.const . #f)
     (push.const . #f)
     (extend . 2)
     (push.close
       (0 0)
       (call
         (touch.gloc.of unexpect-top-level-form)
         (apply.gloc.of unexpect-top-level-form (unexpect-top-level-form)))
       (set.iloc (1 . 0) (set! |tmp1`853`856*| (unexpect-top-level-form)))
       (call
         (touch.gloc.of current-top-level-exterior)
         (apply.gloc.of current-top-level-exterior (current-top-level-exterior)))
       (set.iloc (1 . 1) (set! |tmp1`854`856*| (current-top-level-exterior)))
       (call
         (touch.gloc.of unexpect-top-level-form)
         (push.const . #t)
         (apply.gloc.of unexpect-top-level-form (unexpect-top-level-form #t)))
       (touch.gloc.of current-top-level-exterior)
       (push.iloc 2 . 1)
       (apply.gloc.of current-top-level-exterior (current-top-level-exterior |name`850*|)))
     (push.close
       (0 0)
       (call
         (touch.gloc.of env-delete!)
         (push.iloc 5 . 1)
         (push.iloc 2 . 1)
         (apply.gloc.of env-delete! (env-delete! |env`840*| |name`850*|)))
       (touch.gloc.of expand-form)
       (push.iloc 2 . 0)
       (push.iloc 5 . 1)
       (apply.gloc.of expand-form (expand-form |body`850*| |env`840*|)))
     (push.close
       (0 0)
       (call
         (touch.gloc.of unexpect-top-level-form)
         (push.iloc.1 . 0)
         (apply.gloc.of unexpect-top-level-form (unexpect-top-level-form |tmp1`853`856*|)))
       (touch.gloc.of current-top-level-exterior)
       (push.iloc.1 . 1)
       (apply.gloc.of current-top-level-exterior (current-top-level-exterior |tmp1`854`856*|)))
     (apply.gloc.of
       |.dynamic-wind|
       (|.dynamic-wind|
         (lambda ()
           (set! |tmp1`853`856*| (unexpect-top-level-form))
           (set! |tmp1`854`856*| (current-top-level-exterior))
           (unexpect-top-level-form #t)
           (current-top-level-exterior |name`850*|))
         (lambda () (env-delete! |env`840*| |name`850*|) (expand-form |body`850*| |env`840*|))
         (lambda ()
           (unexpect-top-level-form |tmp1`853`856*|)
           (current-top-level-exterior |tmp1`854`856*|)))))
   (push)
   (extend . 1)
   (call
     (call
       (iloc.0 . 0)
       (if.not.pair?.ret.const . #f)
       (cdr.iloc (0 . 0) (cdr |body`864*|))
       (if.not.pair?.ret.const . #f)
       (cddr.iloc (0 . 0) (cddr |body`864*|))
       (if.not.pair?.ret.const . #f)
       (push.iloc.0 . 0)
       (subr.gloc.of cdddr 1 (cdddr |body`864*|))
       (if.not.null?.ret.const . #f)
       (push.car.iloc (0 . 0) (car |body`864*|))
       (apply.iloc+ (3 . 0) (|let?`841*| (car |body`864*|))))
     (if.true
       (touch.gloc.of set-closure-comment!)
       (push.iloc.0 . 0)
       (push.subr.gloc.of caddr 1 (caddr |body`864*|))
       (call
         (touch.gloc.of original-id)
         (push.iloc.1 . 1)
         (apply.gloc.of original-id (original-id |name`850*|)))
       (push)
       (apply.gloc.of
         set-closure-comment!
         (set-closure-comment! (caddr |body`864*|) (original-id |name`850*|))))
     (touch.gloc.of set-closure-comment!)
     (push.iloc.0 . 0)
     (call
       (touch.gloc.of original-id)
       (push.iloc.1 . 1)
       (apply.gloc.of original-id (original-id |name`850*|)))
     (push)
     (apply.gloc.of
       set-closure-comment!
       (set-closure-comment! |body`864*| (original-id |name`850*|))))
   (subr.gloc.of current-macro-environment 0)
   (push)
   (push.iloc.1 . 1)
   (subr.gloc.of
     core-hashtable-delete!
     2
     (core-hashtable-delete! (current-macro-environment) |name`850*|))
   (touch.gloc.of annotate)
   (push.const . define)
   (push.iloc.1 . 1)
   (push.iloc.0 . 0)
   (push.subr.gloc.of |.list| 3 (|.list| 'define |name`850*| |body`864*|))
   (push.iloc 4 . 0)
   (apply.gloc.of annotate (annotate (|.list| 'define |name`850*| |body`864*|) |form`840*|)))
 (set.gloc.of expand-define)
 (ret.const.unspec))

;
((close
   (3 0 . warning-contract-violation)
   (push.close
     (1 0)
     (touch.gloc.of display-warning)
     (push.const . "warning: binding construct may attempt to reference uninitialized variable ~u")
     (push.iloc.0 . 0)
     (push.subr.gloc.of format 2 "./boot/macro/derived.scm" . 10249)
     (push.iloc.1 . 0)
     (call
       (touch.gloc.of any1)
       (push.close
         (1 0)
         (call
           (touch.gloc.of check-rec-contract-violation)
           (push.iloc.1 . 0)
           (push.subr.gloc.of list 1 "./boot/macro/derived.scm" . 12350)
           (push.iloc.0 . 0)
           (apply.gloc.of check-rec-contract-violation "./boot/macro/derived.scm" . 12320))
         (if.false.ret)
         (ret.iloc 0 . 0))
       (push.iloc.1 . 1)
       (apply.gloc.of any1 "./boot/macro/derived.scm" . 12297))
     (push)
     (apply.gloc.of display-warning "./boot/macro/derived.scm" . 9224))
   (push.iloc.0 . 2)
   (apply.gloc.of for-each "./boot/macro/derived.scm" . 7173))
 (set.gloc.of warning-contract-violation)
 (ret.const.unspec))
((close
   (2 0 . expand-let)
   (call
     (iloc.0 . 0)
     (if.not.pair?.ret.const . #f)
     (cdr.iloc (0 . 0) "./boot/macro/derived.scm" . 17413)
     (ret.pair? "./boot/macro/derived.scm" . 17413))
   (push)
   (extend . 1)
   (call
     (iloc.0 . 0)
     (if.false.ret)
     (cddr.iloc (1 . 0) "./boot/macro/derived.scm" . 17413)
     (if.not.pair?.ret.const . #f)
     (push.iloc.1 . 0)
     (push.subr.gloc.of cdddr 1 "./boot/macro/derived.scm" . 17413)
     (subr.gloc.of list? 1 "./boot/macro/derived.scm" . 17413)
     (if.false.ret)
     (cadr.iloc (1 . 0) "./boot/macro/derived.scm" . 17413)
     (if.not.symbol?.ret.const . #f)
     (push.iloc.1 . 0)
     (push.subr.gloc.of caddr 1 "./boot/macro/derived.scm" . 17413)
     (ret.subr.gloc.of list? "./boot/macro/derived.scm" . 17413))
   (if.true
     (push.iloc.1 . 0)
     (push.subr.gloc.of cdddr 1 "./boot/macro/derived.scm" . 17413)
     (push.iloc.1 . 0)
     (push.subr.gloc.of caddr 1 "./boot/macro/derived.scm" . 17413)
     (push.cadr.iloc (1 . 0) "./boot/macro/derived.scm" . 17413)
     (extend . 3)
     (call
       (touch.gloc.of check-let-bindings)
       (push.iloc 2 . 0)
       (push.iloc.0 . 1)
       (apply.gloc.of check-let-bindings "./boot/macro/derived.scm" . 17413))
     (touch.gloc.of expand-form)
     (call
       (touch.gloc.of annotate)
       (push.const . |.LET|)
       (push.iloc.0 . 1)
       (push.const . |.LETREC*|)
       (push.iloc.0 . 2)
       (push.const . |.LAMBDA|)
       (call
         (push.gloc.of car)
         (push.iloc.0 . 1)
         (apply.gloc.of map "./boot/macro/derived.scm" . 17413))
       (push)
       (push.iloc.0 . 0)
       (push.subr.gloc.of |.cons*| 3 "./boot/macro/derived.scm" . 17413)
       (push.subr.gloc.of |.list| 2 "./boot/macro/derived.scm" . 17413)
       (push.subr.gloc.of |.list| 1 "./boot/macro/derived.scm" . 17413)
       (push.iloc.0 . 2)
       (call
         (push.gloc.of car)
         (push.iloc.0 . 1)
         (apply.gloc.of map "./boot/macro/derived.scm" . 17413))
       (push.cons)
       (push.subr.gloc.of |.list| 3 "./boot/macro/derived.scm" . 17413)
       (push.subr.gloc.of |.list| 3 "./boot/macro/derived.scm" . 17413)
       (push.iloc 2 . 0)
       (apply.gloc.of annotate "./boot/macro/derived.scm" . 17413))
     (push)
     (push.iloc 2 . 1)
     (apply.gloc.of expand-form "./boot/macro/derived.scm" . 17413))
   (call
     (iloc.0 . 0)
     (if.false.ret)
     (cadr.iloc (1 . 0) "./boot/macro/derived.scm" . 17413)
     (if.not.null?.ret.const . #f)
     (push.cddr.iloc (1 . 0) "./boot/macro/derived.scm" . 17413)
     (ret.subr.gloc.of list? "./boot/macro/derived.scm" . 17413))
   (if.true
     (call
       (touch.gloc.of expand-body)
       (push.iloc.1 . 0)
       (push.cddr.iloc (1 . 0) "./boot/macro/derived.scm" . 17413)
       (push.iloc.1 . 1)
       (apply.gloc.of expand-body "./boot/macro/derived.scm" . 17413))
     (push)
     (extend . 1)
     (iloc.0 . 0)
     (if.null?
       (push.car.iloc (2 . 0) "./boot/macro/derived.scm" . 17413)
       (push.const . "empty body")
       (push.iloc 2 . 0)
       (apply.gloc.of syntax-violation "./boot/macro/derived.scm" . 17413))
     (touch.gloc.of annotate)
     (push.const . let)
     (push.const)
     (push.iloc.0 . 0)
     (push.subr.gloc.of |.cons*| 3 "./boot/macro/derived.scm" . 17413)
     (push.iloc 2 . 0)
     (apply.gloc.of annotate "./boot/macro/derived.scm" . 17413))
   (call
     (iloc.0 . 0)
     (if.false.ret)
     (push.cddr.iloc (1 . 0) "./boot/macro/derived.scm" . 17413)
     (ret.subr.gloc.of list? "./boot/macro/derived.scm" . 17413))
   (if.true
     (push.cadr.iloc (1 . 0) "./boot/macro/derived.scm" . 17413)
     (extend . 1)
     (call
       (touch.gloc.of check-let-bindings)
       (push.iloc 2 . 0)
       (push.iloc.0 . 0)
       (apply.gloc.of check-let-bindings "./boot/macro/derived.scm" . 17413))
     (call
       (push.gloc.of car)
       (push.iloc.0 . 0)
       (apply.gloc.of map "./boot/macro/derived.scm" . 17413))
     (push)
     (call
       (push.close
         (1 0)
         (touch.gloc.of expand-form)
         (push.cadr.iloc (0 . 0) "./boot/macro/derived.scm" . 17413)
         (push.iloc 3 . 1)
         (apply.gloc.of expand-form "./boot/macro/derived.scm" . 17413))
       (push.iloc.0 . 0)
       (apply.gloc.of map "./boot/macro/derived.scm" . 17413))
     (push)
     (call
       (touch.gloc.of fresh-rename-count)
       (apply.gloc.of fresh-rename-count "./boot/macro/derived.scm" . 17413))
     (push)
     (extend . 3)
     (call
       (push.close
         (1 0)
         (touch.gloc.of rename-variable-id)
         (push.iloc.0 . 0)
         (push.iloc.1 . 2)
         (apply.gloc.of rename-variable-id "./boot/macro/derived.scm" . 17413))
       (push.iloc.0 . 0)
       (apply.gloc.of map "./boot/macro/derived.scm" . 17413))
     (push)
     (extend . 1)
     (call
       (touch.gloc.of expand-body)
       (push.iloc 4 . 0)
       (push.cddr.iloc (4 . 0) "./boot/macro/derived.scm" . 17413)
       (call
         (touch.gloc.of extend-env)
         (call
           (push.gloc.of cons)
           (push.iloc.1 . 0)
           (push.iloc.0 . 0)
           (apply.gloc.of map "./boot/macro/derived.scm" . 17413))
         (push)
         (push.iloc 4 . 1)
         (apply.gloc.of extend-env "./boot/macro/derived.scm" . 17413))
       (push)
       (apply.gloc.of expand-body "./boot/macro/derived.scm" . 17413))
     (push)
     (extend . 1)
     (iloc.0 . 0)
     (if.null?
       (push.car.iloc (5 . 0) "./boot/macro/derived.scm" . 17413)
       (push.const . "empty body")
       (push.iloc 5 . 0)
       (apply.gloc.of syntax-violation "./boot/macro/derived.scm" . 17413))
     (call
       (touch.gloc.of annotate-bindings)
       (push.iloc 2 . 0)
       (push.iloc 2 . 1)
       (push.iloc 5 . 1)
       (apply.gloc.of annotate-bindings "./boot/macro/derived.scm" . 17413))
     (touch.gloc.of annotate)
     (push.const . let)
     (call
       (push.gloc.of list)
       (push.iloc.1 . 0)
       (push.iloc 2 . 1)
       (apply.gloc.of map "./boot/macro/derived.scm" . 17413))
     (push)
     (push.iloc.0 . 0)
     (push.subr.gloc.of |.cons*| 3 "./boot/macro/derived.scm" . 17413)
     (push.iloc 5 . 0)
     (apply.gloc.of annotate "./boot/macro/derived.scm" . 17413))
   (push.car.iloc (1 . 0) "./boot/macro/derived.scm" . 17413)
   (push.const . "expected bindings and body")
   (push.iloc.1 . 0)
   (apply.gloc.of syntax-violation "./boot/macro/derived.scm" . 17413))
 (set.gloc.of expand-let)
 (ret.const.unspec))
((close
   (2 0)
   (push.const . set!)
   (push.iloc.0 . 0)
   (push.iloc.0 . 1)
   (ret.subr.gloc.of |.list| "./boot/macro/derived.scm" . 49155))
 (set.gloc.of |.L292|)
 (close
   (1 0)
   (push.iloc.0 . 0)
   (push.const . |.&UNDEF|)
   (ret.subr.gloc.of list "./boot/macro/derived.scm" . 49155))
 (set.gloc.of |.L293|)
 (close
   (2 0 . expand-letrec*)
   (call
     (iloc.0 . 0)
     (if.not.pair?.ret.const . #f)
     (cdr.iloc (0 . 0) "./boot/macro/derived.scm" . 49155)
     (ret.pair? "./boot/macro/derived.scm" . 49155))
   (push)
   (extend . 1)
   (call
     (iloc.0 . 0)
     (if.false.ret)
     (cadr.iloc (1 . 0) "./boot/macro/derived.scm" . 49155)
     (if.not.null?.ret.const . #f)
     (push.cddr.iloc (1 . 0) "./boot/macro/derived.scm" . 49155)
     (ret.subr.gloc.of list? "./boot/macro/derived.scm" . 49155))
   (if.true
     (call
       (touch.gloc.of expand-body)
       (push.iloc.1 . 0)
       (push.cddr.iloc (1 . 0) "./boot/macro/derived.scm" . 49155)
       (push.iloc.1 . 1)
       (apply.gloc.of expand-body "./boot/macro/derived.scm" . 49155))
     (push)
     (extend . 1)
     (iloc.0 . 0)
     (if.null?
       (push.car.iloc (2 . 0) "./boot/macro/derived.scm" . 49155)
       (push.const . "empty body")
       (push.iloc 2 . 0)
       (apply.gloc.of syntax-violation "./boot/macro/derived.scm" . 49155))
     (touch.gloc.of annotate)
     (push.const . let)
     (push.const)
     (push.iloc.0 . 0)
     (push.subr.gloc.of |.cons*| 3 "./boot/macro/derived.scm" . 49155)
     (push.iloc 2 . 0)
     (apply.gloc.of annotate "./boot/macro/derived.scm" . 49155))
   (iloc.0 . 0)
   (if.false.ret)
   (push.cddr.iloc (1 . 0) "./boot/macro/derived.scm" . 49155)
   (subr.gloc.of list? 1 "./boot/macro/derived.scm" . 49155)
   (if.false.ret)
   (push.cadr.iloc (1 . 0) "./boot/macro/derived.scm" . 49155)
   (extend . 1)
   (call
     (touch.gloc.of check-let-bindings)
     (push.iloc 2 . 0)
     (push.iloc.0 . 0)
     (apply.gloc.of check-let-bindings "./boot/macro/derived.scm" . 49155))
   (call
     (push.gloc.of car)
     (push.iloc.0 . 0)
     (apply.gloc.of map "./boot/macro/derived.scm" . 49155))
   (push)
   (call
     (touch.gloc.of fresh-rename-count)
     (apply.gloc.of fresh-rename-count "./boot/macro/derived.scm" . 49155))
   (push)
   (extend . 2)
   (call
     (push.close
       (1 0)
       (touch.gloc.of rename-variable-id)
       (push.iloc.0 . 0)
       (push.iloc.1 . 1)
       (apply.gloc.of rename-variable-id "./boot/macro/derived.scm" . 49155))
     (push.iloc.0 . 0)
     (apply.gloc.of map "./boot/macro/derived.scm" . 49155))
   (push)
   (extend . 1)
   (call
     (touch.gloc.of extend-env)
     (call
       (push.gloc.of cons)
       (push.iloc.1 . 0)
       (push.iloc.0 . 0)
       (apply.gloc.of map "./boot/macro/derived.scm" . 49155))
     (push)
     (push.iloc 4 . 1)
     (apply.gloc.of extend-env "./boot/macro/derived.scm" . 49155))
   (push)
   (extend . 1)
   (call
     (push.close
       (1 0)
       (touch.gloc.of expand-form)
       (push.cadr.iloc (0 . 0) "./boot/macro/derived.scm" . 49155)
       (push.iloc.1 . 0)
       (apply.gloc.of expand-form "./boot/macro/derived.scm" . 49155))
     (push.iloc 3 . 0)
     (apply.gloc.of map "./boot/macro/derived.scm" . 49155))
   (push)
   (call
     (touch.gloc.of expand-body)
     (push.iloc 5 . 0)
     (push.cddr.iloc (5 . 0) "./boot/macro/derived.scm" . 49155)
     (push.iloc.0 . 0)
     (apply.gloc.of expand-body "./boot/macro/derived.scm" . 49155))
   (push)
   (extend . 2)
   (call
     (touch.gloc.of annotate-bindings)
     (push.iloc 3 . 0)
     (push.iloc.0 . 0)
     (push.iloc.1 . 0)
     (apply.gloc.of annotate-bindings "./boot/macro/derived.scm" . 49155))
   (iloc.0 . 1)
   (if.null?
     (push.car.iloc (6 . 0) "./boot/macro/derived.scm" . 49155)
     (push.const . "empty body")
     (push.iloc 6 . 0)
     (apply.gloc.of syntax-violation "./boot/macro/derived.scm" . 49155))
   (call
     (touch.gloc.of check-rec*-contract-violation)
     (push.iloc 2 . 0)
     (push.iloc.0 . 0)
     (apply.gloc.of check-rec*-contract-violation "./boot/macro/derived.scm" . 49155))
   (push)
   (extend . 1)
   (iloc.0 . 0)
   (if.true
     (call
       (subr.gloc.of warning-level 0 "./boot/macro/derived.scm" . 49155)
       (if.false.ret)
       (touch.gloc.of warning-contract-violation)
       (push.iloc 7 . 0)
       (push.iloc.1 . 0)
       (push.iloc.0 . 0)
       (apply.gloc.of warning-contract-violation "./boot/macro/derived.scm" . 49155))
     (touch.gloc.of annotate)
     (push.const . let)
     (call
       (push.gloc.of |.L293|)
       (push.iloc 3 . 0)
       (apply.gloc.of map "./boot/macro/derived.scm" . 49155))
     (push)
     (call
       (push.gloc.of |.L292|)
       (push.iloc 3 . 0)
       (push.iloc.1 . 0)
       (apply.gloc.of map "./boot/macro/derived.scm" . 49155))
     (push)
     (push.const . let)
     (push.const)
     (push.iloc.1 . 1)
     (push.subr.gloc.of |.cons*| 3 "./boot/macro/derived.scm" . 49155)
     (push.subr.gloc.of |.list| 1 "./boot/macro/derived.scm" . 49155)
     (push.subr.gloc.of |.append| 2 "./boot/macro/derived.scm" . 49155)
     (push.subr.gloc.of |.cons*| 3 "./boot/macro/derived.scm" . 49155)
     (push.iloc 7 . 0)
     (apply.gloc.of annotate "./boot/macro/derived.scm" . 49155))
   (touch.gloc.of annotate)
   (push.const . letrec*)
   (call
     (touch.gloc.of rewrite-letrec*-bindings)
     (call
       (push.gloc.of list)
       (push.iloc 3 . 0)
       (push.iloc.1 . 0)
       (apply.gloc.of map "./boot/macro/derived.scm" . 49155))
     (push)
     (push.iloc 2 . 0)
     (apply.gloc.of rewrite-letrec*-bindings "./boot/macro/derived.scm" . 49155))
   (push)
   (push.iloc.1 . 1)
   (push.subr.gloc.of |.cons*| 3 "./boot/macro/derived.scm" . 49155)
   (push.iloc 7 . 0)
   (apply.gloc.of annotate "./boot/macro/derived.scm" . 49155))
 (set.gloc.of expand-letrec*)
 (ret.const.unspec))
((close
   (2 0)
   (push.const . set!)
   (push.iloc.0 . 0)
   (push.iloc.0 . 1)
   (ret.subr.gloc.of |.list| "./boot/macro/derived.scm" . 77827))
 (set.gloc.of |.L303|)
 (close
   (1 0)
   (push.iloc.0 . 0)
   (push.const . |.&UNDEF|)
   (ret.subr.gloc.of list "./boot/macro/derived.scm" . 77827))
 (set.gloc.of |.L302|)
 (close
   (2 0 . expand-letrec)
   (call
     (iloc.0 . 0)
     (if.not.pair?.ret.const . #f)
     (cdr.iloc (0 . 0) "./boot/macro/derived.scm" . 77827)
     (ret.pair? "./boot/macro/derived.scm" . 77827))
   (push)
   (extend . 1)
   (call
     (iloc.0 . 0)
     (if.false.ret)
     (cadr.iloc (1 . 0) "./boot/macro/derived.scm" . 77827)
     (if.not.null?.ret.const . #f)
     (push.cddr.iloc (1 . 0) "./boot/macro/derived.scm" . 77827)
     (ret.subr.gloc.of list? "./boot/macro/derived.scm" . 77827))
   (if.true
     (touch.gloc.of expand-form)
     (call
       (touch.gloc.of annotate)
       (push.const . |.LET|)
       (push.const)
       (push.cddr.iloc (1 . 0) "./boot/macro/derived.scm" . 77827)
       (push.subr.gloc.of |.cons*| 3 "./boot/macro/derived.scm" . 77827)
       (push.iloc.1 . 0)
       (apply.gloc.of annotate "./boot/macro/derived.scm" . 77827))
     (push)
     (push.iloc.1 . 1)
     (apply.gloc.of expand-form "./boot/macro/derived.scm" . 77827))
   (call
     (iloc.0 . 0)
     (if.false.ret)
     (cadr.iloc (1 . 0) "./boot/macro/derived.scm" . 77827)
     (if.not.pair?.ret.const . #f)
     (push.iloc.1 . 0)
     (subr.gloc.of caadr 1 "./boot/macro/derived.scm" . 77827)
     (if.not.pair?.ret.const . #f)
     (push.iloc.1 . 0)
     (subr.gloc.of cdaadr 1 "./boot/macro/derived.scm" . 77827)
     (if.not.pair?.ret.const . #f)
     (push.iloc.1 . 0)
     (push.subr.gloc.of cdaadr 1 "./boot/macro/derived.scm" . 77827)
     (subr.gloc.of cdr 1 "./boot/macro/derived.scm" . 77827)
     (if.not.null?.ret.const . #f)
     (push.iloc.1 . 0)
     (subr.gloc.of cdadr 1 "./boot/macro/derived.scm" . 77827)
     (if.not.null?.ret.const . #f)
     (push.cddr.iloc (1 . 0) "./boot/macro/derived.scm" . 77827)
     (ret.subr.gloc.of list? "./boot/macro/derived.scm" . 77827))
   (if.true
     (touch.gloc.of expand-form)
     (call
       (touch.gloc.of annotate)
       (push.const . |.LETREC*|)
       (push.iloc.1 . 0)
       (push.subr.gloc.of caaadr 1 "./boot/macro/derived.scm" . 77827)
       (push.iloc.1 . 0)
       (push.subr.gloc.of cdaadr 1 "./boot/macro/derived.scm" . 77827)
       (push.subr.gloc.of car 1 "./boot/macro/derived.scm" . 77827)
       (push.subr.gloc.of |.list| 2 "./boot/macro/derived.scm" . 77827)
       (push.subr.gloc.of |.list| 1 "./boot/macro/derived.scm" . 77827)
       (push.cddr.iloc (1 . 0) "./boot/macro/derived.scm" . 77827)
       (push.subr.gloc.of |.cons*| 3 "./boot/macro/derived.scm" . 77827)
       (push.iloc.1 . 0)
       (apply.gloc.of annotate "./boot/macro/derived.scm" . 77827))
     (push)
     (push.iloc.1 . 1)
     (apply.gloc.of expand-form "./boot/macro/derived.scm" . 77827))
   (iloc.0 . 0)
   (if.false.ret)
   (push.cddr.iloc (1 . 0) "./boot/macro/derived.scm" . 77827)
   (subr.gloc.of list? 1 "./boot/macro/derived.scm" . 77827)
   (if.false.ret)
   (push.cadr.iloc (1 . 0) "./boot/macro/derived.scm" . 77827)
   (extend . 1)
   (call
     (touch.gloc.of check-let-bindings)
     (push.iloc 2 . 0)
     (push.iloc.0 . 0)
     (apply.gloc.of check-let-bindings "./boot/macro/derived.scm" . 77827))
   (call
     (push.gloc.of car)
     (push.iloc.0 . 0)
     (apply.gloc.of map "./boot/macro/derived.scm" . 77827))
   (push)
   (call
     (touch.gloc.of fresh-rename-count)
     (apply.gloc.of fresh-rename-count "./boot/macro/derived.scm" . 77827))
   (push)
   (extend . 2)
   (call
     (push.close
       (1 0)
       (touch.gloc.of rename-variable-id)
       (push.iloc.0 . 0)
       (push.iloc.1 . 1)
       (apply.gloc.of rename-variable-id "./boot/macro/derived.scm" . 77827))
     (push.iloc.0 . 0)
     (apply.gloc.of map "./boot/macro/derived.scm" . 77827))
   (push)
   (extend . 1)
   (call
     (touch.gloc.of extend-env)
     (call
       (push.gloc.of cons)
       (push.iloc.1 . 0)
       (push.iloc.0 . 0)
       (apply.gloc.of map "./boot/macro/derived.scm" . 77827))
     (push)
     (push.iloc 4 . 1)
     (apply.gloc.of extend-env "./boot/macro/derived.scm" . 77827))
   (push)
   (extend . 1)
   (call
     (push.close
       (1 0)
       (touch.gloc.of expand-form)
       (push.cadr.iloc (0 . 0) "./boot/macro/derived.scm" . 77827)
       (push.iloc.1 . 0)
       (apply.gloc.of expand-form "./boot/macro/derived.scm" . 77827))
     (push.iloc 3 . 0)
     (apply.gloc.of map "./boot/macro/derived.scm" . 77827))
   (push)
   (call
     (touch.gloc.of expand-body)
     (push.iloc 5 . 0)
     (push.cddr.iloc (5 . 0) "./boot/macro/derived.scm" . 77827)
     (push.iloc.0 . 0)
     (apply.gloc.of expand-body "./boot/macro/derived.scm" . 77827))
   (push)
   (extend . 2)
   (call
     (touch.gloc.of annotate-bindings)
     (push.iloc 3 . 0)
     (push.iloc.0 . 0)
     (push.iloc.1 . 0)
     (apply.gloc.of annotate-bindings "./boot/macro/derived.scm" . 77827))
   (call
     (iloc.0 . 1)
     (if.null?
       (push.car.iloc (6 . 0) "./boot/macro/derived.scm" . 77827)
       (push.const . "empty body")
       (push.iloc 6 . 0)
       (apply.gloc.of syntax-violation "./boot/macro/derived.scm" . 77827))
     (call
       (touch.gloc.of check-rec-contract-violation)
       (push.iloc 2 . 0)
       (push.iloc.0 . 0)
       (apply.gloc.of check-rec-contract-violation "./boot/macro/derived.scm" . 77827))
     (push)
     (extend . 1)
     (iloc.0 . 0)
     (if.true
       (subr.gloc.of warning-level 0 "./boot/macro/derived.scm" . 77827)
       (if.false.ret)
       (touch.gloc.of warning-contract-violation)
       (push.iloc 7 . 0)
       (push.iloc.1 . 0)
       (push.iloc.0 . 0)
       (apply.gloc.of warning-contract-violation "./boot/macro/derived.scm" . 77827))
     (ret.const.unspec))
   (call
     (touch.gloc.of every1)
     (push.close
       (1 0)
       (iloc.0 . 0)
       (if.pair?
         (touch.gloc.of denote-lambda?)
         (push.iloc 2 . 0)
         (push.car.iloc (0 . 0) "./boot/macro/derived.scm" . 77827)
         (apply.gloc.of denote-lambda? "./boot/macro/derived.scm" . 77827))
       (push.iloc.0 . 0)
       (push.subr.gloc.of symbol? 1 "./boot/macro/derived.scm" . 77827)
       (ret.subr.gloc.of not "./boot/macro/derived.scm" . 77827))
     (push.iloc.0 . 0)
     (apply.gloc.of every1 "./boot/macro/derived.scm" . 77827))
   (if.true
     (touch.gloc.of annotate)
     (push.const . letrec*)
     (call
       (touch.gloc.of rewrite-letrec*-bindings)
       (call
         (push.gloc.of list)
         (push.iloc 2 . 0)
         (push.iloc.0 . 0)
         (apply.gloc.of map "./boot/macro/derived.scm" . 77827))
       (push)
       (push.iloc.1 . 0)
       (apply.gloc.of rewrite-letrec*-bindings "./boot/macro/derived.scm" . 77827))
     (push)
     (push.iloc.0 . 1)
     (push.subr.gloc.of |.cons*| 3 "./boot/macro/derived.scm" . 77827)
     (push.iloc 6 . 0)
     (apply.gloc.of annotate "./boot/macro/derived.scm" . 77827))
   (call
     (push.close
       (1 0)
       (touch.gloc.of rename-id)
       (call (apply.gloc.of generate-temporary-symbol "./boot/macro/derived.scm" . 77827))
       (push)
       (push.iloc 4 . 1)
       (apply.gloc.of rename-id "./boot/macro/derived.scm" . 77827))
     (push.iloc 4 . 0)
     (apply.gloc.of map "./boot/macro/derived.scm" . 77827))
   (push)
   (extend . 1)
   (push.const . let)
   (call
     (push.gloc.of |.L302|)
     (push.iloc 3 . 0)
     (apply.gloc.of map "./boot/macro/derived.scm" . 77827))
   (push)
   (push.const . let)
   (call
     (push.gloc.of list)
     (push.iloc.0 . 0)
     (push.iloc.1 . 0)
     (apply.gloc.of map "./boot/macro/derived.scm" . 77827))
   (push)
   (call
     (push.gloc.of |.L303|)
     (push.iloc 3 . 0)
     (push.iloc.0 . 0)
     (apply.gloc.of map "./boot/macro/derived.scm" . 77827))
   (push)
   (push.iloc.1 . 1)
   (push.subr.gloc.of |.append| 2 "./boot/macro/derived.scm" . 77827)
   (push.subr.gloc.of |.cons*| 3 "./boot/macro/derived.scm" . 77827)
   (ret.subr.gloc.of |.list| "./boot/macro/derived.scm" . 77827))
 (set.gloc.of expand-letrec)
 (ret.const.unspec))
((close
   (2 0 . expand-let*)
   (call
     (touch.gloc.of safe-length)
     (push.iloc.0 . 0)
     (apply.gloc.of safe-length "./boot/macro/derived.scm" . 106508))
   (push)
   (push.const . 2)
   (subr.gloc.of > 2 "./boot/macro/derived.scm" . 106505)
   (if.true
     (push.cadr.iloc (0 . 0) "./boot/macro/derived.scm" . 107545)
     (extend . 1)
     (call
       (touch.gloc.of check-let*-bindings)
       (push.iloc.1 . 0)
       (push.iloc.0 . 0)
       (apply.gloc.of check-let*-bindings "./boot/macro/derived.scm" . 108555))
     (touch.gloc.of expand-form)
     (call
       (touch.gloc.of annotate)
       (call
         (extend.enclose+
           (1 0 . loop)
           (iloc.0 . 0)
           (if.null?
             (push.const . |.LET|)
             (push.const)
             (push.cddr.iloc (3 . 0) "./boot/macro/derived.scm" . 113695)
             (ret.subr.gloc.of |.cons*| "./boot/macro/derived.scm" . 112655))
           (push.const . |.LET|)
           (push.car.iloc (0 . 0) "./boot/macro/derived.scm" . 114716)
           (push.subr.gloc.of |.list| 1 "./boot/macro/derived.scm" . 114716)
           (call
             (push.cdr.iloc (0 . 0) "./boot/macro/derived.scm" . 114734)
             (apply.iloc+ (1 . 0) "./boot/macro/derived.scm" . 114728))
           (push)
           (ret.subr.gloc.of |.list| "./boot/macro/derived.scm" . 112655))
         (push.iloc.1 . 0)
         (apply.iloc+ (0 . 0) "./boot/macro/derived.scm" . 112655))
       (push)
       (push.iloc.1 . 0)
       (apply.gloc.of
         annotate
         (annotate
           (letrec* ((|loop`989*|
                       (lambda (|lst`990*|)
                         (if (null? |lst`990*|)
                             (|.cons*| '|.LET| '() (cddr |form`983*|))
                             (|.list|
                               '|.LET|
                               (|.list| (car |lst`990*|))
                               (|loop`989*| (cdr |lst`990*|)))))))
             (|loop`989*| |bindings`985*|))
           |form`983*|)))
     (push)
     (push.iloc.1 . 1)
     (apply.gloc.of
       expand-form
       (expand-form
         (annotate
           (letrec* ((|loop`989*|
                       (lambda (|lst`990*|)
                         (if (null? |lst`990*|)
                             (|.cons*| '|.LET| '() (cddr |form`983*|))
                             (|.list|
                               '|.LET|
                               (|.list| (car |lst`990*|))
                               (|loop`989*| (cdr |lst`990*|)))))))
             (|loop`989*| |bindings`985*|))
           |form`983*|)
         |env`983*|)))
   (push.car.iloc (0 . 0) "./boot/macro/derived.scm" . 117787)
   (push.const . "expected bindings and body")
   (push.iloc.0 . 0)
   (apply.gloc.of syntax-violation "./boot/macro/derived.scm" . 117769))
 (set.gloc.of expand-let*)
 (ret.const.unspec))
((close
   (2 0 . expand-let-values)
   (call
     (iloc.0 . 0)
     (if.not.pair?.ret.const . #f)
     (cdr.iloc (0 . 0) "./boot/macro/derived.scm" . 121861)
     (if.not.pair?.ret.const . #f)
     (push.cddr.iloc (0 . 0) "./boot/macro/derived.scm" . 121861)
     (ret.subr.gloc.of list? "./boot/macro/derived.scm" . 121861))
   (if.true
     (push.cddr.iloc (0 . 0) "./boot/macro/derived.scm" . 121861)
     (push.cadr.iloc (0 . 0) "./boot/macro/derived.scm" . 121861)
     (extend . 2)
     (call
       (push.iloc.0 . 1)
       (subr.gloc.of list? 1 "./boot/macro/derived.scm" . 121861)
       (if.true.ret)
       (push.car.iloc (1 . 0) "./boot/macro/derived.scm" . 121861)
       (push.const . "malformed bindings")
       (push.iloc.1 . 0)
       (apply.gloc.of syntax-violation "./boot/macro/derived.scm" . 121861))
     (call
       (iloc.0 . 0)
       (if.not.null?.ret.const . #f)
       (push.car.iloc (1 . 0) "./boot/macro/derived.scm" . 121861)
       (push.const . "expected bindings and body")
       (push.iloc.1 . 0)
       (apply.gloc.of syntax-violation "./boot/macro/derived.scm" . 121861))
     (call
       (call
         (touch.gloc.of unique-id-list?)
         (call
           (push.gloc.of append)
           (call
             (push.close
               (1 0)
               (call
                 (iloc.0 . 0)
                 (if.not.pair?.ret.const . #f)
                 (cdr.iloc (0 . 0) "./boot/macro/derived.scm" . 121861)
                 (if.not.pair?.ret.const . #f)
                 (cddr.iloc (0 . 0) "./boot/macro/derived.scm" . 121861)
                 (ret.null? "./boot/macro/derived.scm" . 121861))
               (if.true
                 (touch.gloc.of collect-lambda-formals)
                 (push.car.iloc (0 . 0) "./boot/macro/derived.scm" . 121861)
                 (push.iloc 2 . 0)
                 (apply.gloc.of collect-lambda-formals "./boot/macro/derived.scm" . 121861))
               (push.car.iloc (2 . 0) "./boot/macro/derived.scm" . 121861)
               (push.const . "expected each binding consist of formals and expression")
               (push.iloc 2 . 0)
               (apply.gloc.of syntax-violation "./boot/macro/derived.scm" . 121861))
             (push.iloc.0 . 1)
             (apply.gloc.of
               map
               (map (lambda (|binding`1001*|)
                      (if (and (pair? |binding`1001*|)
                               (pair? (cdr |binding`1001*|))
                               (null? (cddr |binding`1001*|)))
                          (collect-lambda-formals (car |binding`1001*|) |form`993*|)
                          (syntax-violation
                            (car |form`993*|)
                            "expected each binding consist of formals and expression"
                            |form`993*|)))
                    |bindings`999*|)))
           (push)
           (apply.gloc.of
             apply
             (apply
               append
               (map (lambda (|binding`1001*|)
                      (if (and (pair? |binding`1001*|)
                               (pair? (cdr |binding`1001*|))
                               (null? (cddr |binding`1001*|)))
                          (collect-lambda-formals (car |binding`1001*|) |form`993*|)
                          (syntax-violation
                            (car |form`993*|)
                            "expected each binding consist of formals and expression"
                            |form`993*|)))
                    |bindings`999*|))))
         (push)
         (apply.gloc.of
           unique-id-list?
           (unique-id-list?
             (apply
               append
               (map (lambda (|binding`1001*|)
                      (if (and (pair? |binding`1001*|)
                               (pair? (cdr |binding`1001*|))
                               (null? (cddr |binding`1001*|)))
                          (collect-lambda-formals (car |binding`1001*|) |form`993*|)
                          (syntax-violation
                            (car |form`993*|)
                            "expected each binding consist of formals and expression"
                            |form`993*|)))
                    |bindings`999*|)))))
       (if.true.ret)
       (push.car.iloc (1 . 0) "./boot/macro/derived.scm" . 121861)
       (push.const . "duplicate formals")
       (push.iloc.1 . 0)
       (apply.gloc.of syntax-violation "./boot/macro/derived.scm" . 121861))
     (touch.gloc.of annotate)
     (call
       (extend.enclose
         (2 0 . loop)
         (iloc.0 . 0)
         (if.null?
           (touch.gloc.of expand-form)
           (push.const . |.LET|)
           (push.const)
           (push.iloc 2 . 0)
           (push.subr.gloc.of |.cons*| 3 "./boot/macro/derived.scm" . 121861)
           (push.iloc.0 . 1)
           (apply.gloc.of expand-form "./boot/macro/derived.scm" . 121861))
         (call
           (car.iloc (0 . 0) "./boot/macro/derived.scm" . 121861)
           (if.not.pair?.ret.const . #f)
           (push.car.iloc (0 . 0) "./boot/macro/derived.scm" . 121861)
           (subr.gloc.of cdr 1 "./boot/macro/derived.scm" . 121861)
           (if.not.pair?.ret.const . #f)
           (push.car.iloc (0 . 0) "./boot/macro/derived.scm" . 121861)
           (subr.gloc.of cddr 1 "./boot/macro/derived.scm" . 121861)
           (ret.null? "./boot/macro/derived.scm" . 121861))
         (if.true
           (push.car.iloc (0 . 0) "./boot/macro/derived.scm" . 121861)
           (push.subr.gloc.of cadr 1 "./boot/macro/derived.scm" . 121861)
           (push.car.iloc (0 . 0) "./boot/macro/derived.scm" . 121861)
           (push.subr.gloc.of car 1 "./boot/macro/derived.scm" . 121861)
           (extend . 2)
           (call
             (touch.gloc.of collect-lambda-formals)
             (push.iloc.0 . 1)
             (push.iloc 4 . 0)
             (apply.gloc.of collect-lambda-formals "./boot/macro/derived.scm" . 121861))
           (push)
           (extend . 1)
           (call
             (touch.gloc.of fresh-rename-count)
             (apply.gloc.of fresh-rename-count "./boot/macro/derived.scm" . 121861))
           (push)
           (extend . 1)
           (call
             (push.gloc.of cons)
             (push.iloc.1 . 0)
             (call
               (push.close
                 (1 0)
                 (touch.gloc.of rename-variable-id)
                 (push.iloc.0 . 0)
                 (push.iloc.1 . 0)
                 (apply.gloc.of rename-variable-id "./boot/macro/derived.scm" . 121861))
               (push.iloc.1 . 0)
               (apply.gloc.of map "./boot/macro/derived.scm" . 121861))
             (push)
             (apply.gloc.of map "./boot/macro/derived.scm" . 121861))
           (push)
           (extend . 1)
           (push.const . |.call-with-values|)
           (push.const . lambda)
           (push.const)
           (call
             (touch.gloc.of expand-form)
             (push.iloc 3 . 0)
             (push.iloc 7 . 1)
             (apply.gloc.of expand-form "./boot/macro/derived.scm" . 121861))
           (push)
           (push.subr.gloc.of |.list| 3 "./boot/macro/derived.scm" . 121861)
           (push.const . lambda)
           (call
             (touch.gloc.of rename-lambda-formals)
             (push.iloc 3 . 1)
             (push.iloc.0 . 0)
             (apply.gloc.of rename-lambda-formals "./boot/macro/derived.scm" . 121861))
           (push)
           (call
             (push.cdr.iloc (4 . 0) "./boot/macro/derived.scm" . 121861)
             (call
               (touch.gloc.of extend-env)
               (push.iloc.0 . 0)
               (push.iloc 4 . 1)
               (apply.gloc.of extend-env "./boot/macro/derived.scm" . 121861))
             (push)
             (apply.iloc (5 . 0) "./boot/macro/derived.scm" . 121861))
           (push)
           (push.subr.gloc.of |.list| 3 "./boot/macro/derived.scm" . 121861)
           (ret.subr.gloc.of |.list| "./boot/macro/derived.scm" . 121861))
         (push.const . "internal error: let-values: ~m")
         (push.iloc 3 . 0)
         (apply.gloc.of scheme-error "./boot/macro/derived.scm" . 121861))
       (push.iloc.1 . 1)
       (push.iloc 2 . 1)
       (apply.iloc (0 . 0) "./boot/macro/derived.scm" . 121861))
     (push)
     (push.iloc.1 . 0)
     (apply.gloc.of
       annotate
       (annotate
         (letrec* ((|loop`1014*|
                     (lambda (|lst`1015*| |env`1015*|)
                       (if (null? |lst`1015*|)
                           (expand-form (|.cons*| '|.LET| '() |body`999*|) |env`1015*|)
                           (if (and (pair? (car |lst`1015*|))
                                    (pair? (cdr (car |lst`1015*|)))
                                    (null? (cddr (car |lst`1015*|))))
                               (let ((|init`1021*| (cadr (car |lst`1015*|)))
                                     (|formals`1021*| (car (car |lst`1015*|))))
                                 (let ((|vars`1023*|
                                         (collect-lambda-formals |formals`1021*| |form`993*|)))
                                   (let ((|suffix`1025*| (fresh-rename-count)))
                                     (let ((|renames`1029*|
                                             (map cons
                                                  |vars`1023*|
                                                  (map (lambda (|id`1027*|)
                                                         (rename-variable-id
                                                           |id`1027*|
                                                           |suffix`1025*|))
                                                       |vars`1023*|))))
                                       (|.list|
                                         '|.call-with-values|
                                         (|.list| 'lambda '() (expand-form |init`1021*| |env`993*|))
                                         (|.list|
                                           'lambda
                                           (rename-lambda-formals |formals`1021*| |renames`1029*|)
                                           (|loop`1014*|
                                             (cdr |lst`1015*|)
                                             (extend-env |renames`1029*| |env`1015*|))))))))
                               (scheme-error "internal error: let-values: ~m" |form`993*|))))))
           (|loop`1014*| |bindings`999*| |env`993*|))
         |form`993*|)))
   (push.car.iloc (0 . 0) "./boot/macro/derived.scm" . 121861)
   (push.const . "expected bindings and body")
   (push.iloc.0 . 0)
   (apply.gloc.of syntax-violation "./boot/macro/derived.scm" . 121861))
 (set.gloc.of expand-let-values)
 (ret.const.unspec))
((close
   (2 0 . expand-do)
   (call
     (iloc.0 . 0)
     (if.not.pair?.ret.const . #f)
     (cdr.iloc (0 . 0) "./boot/macro/derived.scm" . 163845)
     (if.not.pair?.ret.const . #f)
     (cddr.iloc (0 . 0) "./boot/macro/derived.scm" . 163845)
     (if.not.pair?.ret.const . #f)
     (push.iloc.0 . 0)
     (subr.gloc.of caddr 1 "./boot/macro/derived.scm" . 163845)
     (if.not.pair?.ret.const . #f)
     (push.iloc.0 . 0)
     (push.subr.gloc.of cdaddr 1 "./boot/macro/derived.scm" . 163845)
     (subr.gloc.of list? 1 "./boot/macro/derived.scm" . 163845)
     (if.false.ret)
     (push.iloc.0 . 0)
     (push.subr.gloc.of cdddr 1 "./boot/macro/derived.scm" . 163845)
     (ret.subr.gloc.of list? "./boot/macro/derived.scm" . 163845))
   (if.true
     (push.iloc.0 . 0)
     (push.subr.gloc.of cdddr 1 "./boot/macro/derived.scm" . 163845)
     (push.iloc.0 . 0)
     (push.subr.gloc.of cdaddr 1 "./boot/macro/derived.scm" . 163845)
     (push.iloc.0 . 0)
     (push.subr.gloc.of caaddr 1 "./boot/macro/derived.scm" . 163845)
     (push.cadr.iloc (0 . 0) "./boot/macro/derived.scm" . 163845)
     (extend . 4)
     (call
       (push.iloc.0 . 3)
       (subr.gloc.of list? 1 "./boot/macro/derived.scm" . 163845)
       (if.true.ret)
       (push.car.iloc (1 . 0) "./boot/macro/derived.scm" . 163845)
       (push.const . "malformed (variable init update)")
       (push.iloc.1 . 0)
       (push.iloc.0 . 3)
       (apply.gloc.of syntax-violation "./boot/macro/derived.scm" . 163845))
     (call (apply.gloc.of generate-temporary-symbol "./boot/macro/derived.scm" . 163845))
     (push)
     (call
       (push.close
         (1 0)
         (call
           (iloc.0 . 0)
           (if.not.pair?.ret.const . #f)
           (cdr.iloc (0 . 0) "./boot/macro/derived.scm" . 163845)
           (ret.pair? "./boot/macro/derived.scm" . 163845))
         (push)
         (extend . 1)
         (call
           (iloc.0 . 0)
           (if.false.ret)
           (cddr.iloc (1 . 0) "./boot/macro/derived.scm" . 163845)
           (ret.null? "./boot/macro/derived.scm" . 163845))
         (if.true (push.iloc.1 . 0) (ret.subr.gloc.of car "./boot/macro/derived.scm" . 163845))
         (call
           (iloc.0 . 0)
           (if.false.ret)
           (cddr.iloc (1 . 0) "./boot/macro/derived.scm" . 163845)
           (if.not.pair?.ret.const . #f)
           (push.iloc.1 . 0)
           (subr.gloc.of cdddr 1 "./boot/macro/derived.scm" . 163845)
           (ret.null? "./boot/macro/derived.scm" . 163845))
         (if.true (push.iloc.1 . 0) (ret.subr.gloc.of caddr "./boot/macro/derived.scm" . 163845))
         (push.car.iloc (3 . 0) "./boot/macro/derived.scm" . 163845)
         (push.const . "malformed (variable init update)")
         (push.iloc 3 . 0)
         (push.iloc.1 . 0)
         (apply.gloc.of syntax-violation "./boot/macro/derived.scm" . 163845))
       (push.iloc.0 . 3)
       (apply.gloc.of
         map
         (map (lambda (|clause`1052*|)
                (let ((|.L318`1054`1057*|
                        (and (pair? |clause`1052*|) (pair? (cdr |clause`1052*|)))))
                  (if (and |.L318`1054`1057*| (null? (cddr |clause`1052*|)))
                      (car |clause`1052*|)
                      (if (and |.L318`1054`1057*|
                               (pair? (cddr |clause`1052*|))
                               (null? (cdddr |clause`1052*|)))
                          (caddr |clause`1052*|)
                          (syntax-violation
                            (car |form`1035*|)
                            "malformed (variable init update)"
                            |form`1035*|
                            |clause`1052*|)))))
              |clauses`1041*|)))
     (push)
     (extend . 2)
     (touch.gloc.of expand-form)
     (call
       (touch.gloc.of annotate)
       (push.const . |.LET|)
       (push.iloc.0 . 0)
       (call
         (push.close
           (1 0)
           (call
             (iloc.0 . 0)
             (if.not.pair?.ret.const . #f)
             (cdr.iloc (0 . 0) "./boot/macro/derived.scm" . 163845)
             (if.not.pair?.ret.const . #f)
             (push.car.iloc (0 . 0) "./boot/macro/derived.scm" . 163845)
             (ret.subr.gloc.of symbol? "./boot/macro/derived.scm" . 163845))
           (if.true
             (push.car.iloc (0 . 0) "./boot/macro/derived.scm" . 163845)
             (push.cadr.iloc (0 . 0) "./boot/macro/derived.scm" . 163845)
             (ret.subr.gloc.of list "./boot/macro/derived.scm" . 163845))
           (push.car.iloc (3 . 0) "./boot/macro/derived.scm" . 163845)
           (push.const . "malformed (variable init update)")
           (push.iloc 3 . 0)
           (push.iloc.0 . 0)
           (apply.gloc.of syntax-violation "./boot/macro/derived.scm" . 163845))
         (push.iloc.1 . 3)
         (apply.gloc.of
           map
           (map (lambda (|clause`1043*|)
                  (if (and (pair? |clause`1043*|)
                           (pair? (cdr |clause`1043*|))
                           (symbol? (car |clause`1043*|)))
                      (list (car |clause`1043*|) (cadr |clause`1043*|))
                      (syntax-violation
                        (car |form`1035*|)
                        "malformed (variable init update)"
                        |form`1035*|
                        |clause`1043*|)))
                |clauses`1041*|)))
       (push)
       (push.const . |.IF|)
       (push.iloc.1 . 2)
       (call
         (iloc.1 . 1)
         (if.null? (ret.const |.UNSPECIFIED|))
         (push.const . |.BEGIN|)
         (iloc.1 . 1)
         (ret.cons "./boot/macro/derived.scm" . 163845))
       (push)
       (push.const . |.BEGIN|)
       (push.iloc.1 . 0)
       (push.iloc.0 . 0)
       (iloc.0 . 1)
       (push.cons)
       (push.subr.gloc.of |.list| 1 "./boot/macro/derived.scm" . 163845)
       (subr.gloc.of |.append| 2 "./boot/macro/derived.scm" . 163845)
       (push.cons)
       (push.subr.gloc.of |.list| 4 "./boot/macro/derived.scm" . 163845)
       (push.subr.gloc.of
         |.list|
         4
         (|.list|
           '|.LET|
           |temp`1065*|
           (map (lambda (|clause`1043*|)
                  (if (and (pair? |clause`1043*|)
                           (pair? (cdr |clause`1043*|))
                           (symbol? (car |clause`1043*|)))
                      (list (car |clause`1043*|) (cadr |clause`1043*|))
                      (syntax-violation
                        (car |form`1035*|)
                        "malformed (variable init update)"
                        |form`1035*|
                        |clause`1043*|)))
                |clauses`1041*|)
           (|.list|
             '|.IF|
             |test`1041*|
             (if (null? |expr`1041*|) '(|.UNSPECIFIED|) (|.cons| '|.BEGIN| |expr`1041*|))
             (|.cons|
               '|.BEGIN|
               (|.append| |body`1041*| (|.list| (|.cons| |temp`1065*| |updates`1065*|)))))))
       (push.iloc 2 . 0)
       (apply.gloc.of
         annotate
         (annotate
           (|.list|
             '|.LET|
             |temp`1065*|
             (map (lambda (|clause`1043*|)
                    (if (and (pair? |clause`1043*|)
                             (pair? (cdr |clause`1043*|))
                             (symbol? (car |clause`1043*|)))
                        (list (car |clause`1043*|) (cadr |clause`1043*|))
                        (syntax-violation
                          (car |form`1035*|)
                          "malformed (variable init update)"
                          |form`1035*|
                          |clause`1043*|)))
                  |clauses`1041*|)
             (|.list|
               '|.IF|
               |test`1041*|
               (if (null? |expr`1041*|) '(|.UNSPECIFIED|) (|.cons| '|.BEGIN| |expr`1041*|))
               (|.cons|
                 '|.BEGIN|
                 (|.append| |body`1041*| (|.list| (|.cons| |temp`1065*| |updates`1065*|))))))
           |form`1035*|)))
     (push)
     (push.iloc 2 . 1)
     (apply.gloc.of
       expand-form
       (expand-form
         (annotate
           (|.list|
             '|.LET|
             |temp`1065*|
             (map (lambda (|clause`1043*|)
                    (if (and (pair? |clause`1043*|)
                             (pair? (cdr |clause`1043*|))
                             (symbol? (car |clause`1043*|)))
                        (list (car |clause`1043*|) (cadr |clause`1043*|))
                        (syntax-violation
                          (car |form`1035*|)
                          "malformed (variable init update)"
                          |form`1035*|
                          |clause`1043*|)))
                  |clauses`1041*|)
             (|.list|
               '|.IF|
               |test`1041*|
               (if (null? |expr`1041*|) '(|.UNSPECIFIED|) (|.cons| '|.BEGIN| |expr`1041*|))
               (|.cons|
                 '|.BEGIN|
                 (|.append| |body`1041*| (|.list| (|.cons| |temp`1065*| |updates`1065*|))))))
           |form`1035*|)
         |env`1035*|)))
   (push.car.iloc (0 . 0) "./boot/macro/derived.scm" . 163845)
   (push.const . "expected (variable init update), test, and command")
   (push.iloc.0 . 0)
   (apply.gloc.of syntax-violation "./boot/macro/derived.scm" . 163845))
 (set.gloc.of expand-do)
 (ret.const.unspec))
((close
   (2 0 . expand-let*-values)
   (call
     (iloc.0 . 0)
     (if.not.pair?.ret.const . #f)
     (cdr.iloc (0 . 0) "./boot/macro/derived.scm" . 196613)
     (if.not.pair?.ret.const . #f)
     (push.cddr.iloc (0 . 0) "./boot/macro/derived.scm" . 196613)
     (ret.subr.gloc.of list? "./boot/macro/derived.scm" . 196613))
   (if.true
     (push.cddr.iloc (0 . 0) "./boot/macro/derived.scm" . 196613)
     (push.cadr.iloc (0 . 0) "./boot/macro/derived.scm" . 196613)
     (extend . 2)
     (call
       (push.iloc.0 . 1)
       (subr.gloc.of list? 1 "./boot/macro/derived.scm" . 196613)
       (if.true.ret)
       (push.car.iloc (1 . 0) "./boot/macro/derived.scm" . 196613)
       (push.const . "malformed bindings")
       (push.iloc.1 . 0)
       (apply.gloc.of syntax-violation "./boot/macro/derived.scm" . 196613))
     (call
       (iloc.0 . 0)
       (if.not.null?.ret.const . #f)
       (push.car.iloc (1 . 0) "./boot/macro/derived.scm" . 196613)
       (push.const . "missing body")
       (push.iloc.1 . 0)
       (apply.gloc.of syntax-violation "./boot/macro/derived.scm" . 196613))
     (touch.gloc.of expand-form)
     (call
       (touch.gloc.of annotate)
       (call
         (extend.enclose
           (1 0 . loop)
           (iloc.0 . 0)
           (if.null?
             (push.const . |.LET|)
             (push.const)
             (push.iloc 2 . 0)
             (ret.subr.gloc.of |.cons*| "./boot/macro/derived.scm" . 196613))
           (call
             (car.iloc (0 . 0) "./boot/macro/derived.scm" . 196613)
             (if.not.pair?.ret.const . #f)
             (push.car.iloc (0 . 0) "./boot/macro/derived.scm" . 196613)
             (subr.gloc.of cdr 1 "./boot/macro/derived.scm" . 196613)
             (if.not.pair?.ret.const . #f)
             (push.car.iloc (0 . 0) "./boot/macro/derived.scm" . 196613)
             (subr.gloc.of cddr 1 "./boot/macro/derived.scm" . 196613)
             (ret.null? "./boot/macro/derived.scm" . 196613))
           (if.true
             (push.const . |.CALL-WITH-VALUES|)
             (push.const . |.LAMBDA|)
             (push.const)
             (push.car.iloc (0 . 0) "./boot/macro/derived.scm" . 196613)
             (push.subr.gloc.of cadr 1 "./boot/macro/derived.scm" . 196613)
             (push.subr.gloc.of |.list| 3 "./boot/macro/derived.scm" . 196613)
             (push.const . |.LAMBDA|)
             (push.car.iloc (0 . 0) "./boot/macro/derived.scm" . 196613)
             (push.subr.gloc.of car 1 "./boot/macro/derived.scm" . 196613)
             (call
               (push.cdr.iloc (0 . 0) "./boot/macro/derived.scm" . 196613)
               (apply.iloc (1 . 0) "./boot/macro/derived.scm" . 196613))
             (push)
             (push.subr.gloc.of |.list| 3 "./boot/macro/derived.scm" . 196613)
             (ret.subr.gloc.of |.list| "./boot/macro/derived.scm" . 196613))
           (push.car.iloc (3 . 0) "./boot/macro/derived.scm" . 196613)
           (push.const . "expected each binding consist of formals and expression")
           (push.iloc 3 . 0)
           (push.car.iloc (0 . 0) "./boot/macro/derived.scm" . 196613)
           (apply.gloc.of syntax-violation "./boot/macro/derived.scm" . 196613))
         (push.iloc.1 . 1)
         (apply.iloc (0 . 0) "./boot/macro/derived.scm" . 196613))
       (push)
       (push.iloc.1 . 0)
       (apply.gloc.of
         annotate
         (annotate
           (letrec* ((|loop`1078*|
                       (lambda (|lst`1079*|)
                         (if (null? |lst`1079*|)
                             (|.cons*| '|.LET| '() |body`1074*|)
                             (if (and (pair? (car |lst`1079*|))
                                      (pair? (cdr (car |lst`1079*|)))
                                      (null? (cddr (car |lst`1079*|))))
                                 (|.list|
                                   '|.CALL-WITH-VALUES|
                                   (|.list| '|.LAMBDA| '() (cadr (car |lst`1079*|)))
                                   (|.list|
                                     '|.LAMBDA|
                                     (car (car |lst`1079*|))
                                     (|loop`1078*| (cdr |lst`1079*|))))
                                 (syntax-violation
                                   (car |form`1068*|)
                                   "expected each binding consist of formals and expression"
                                   |form`1068*|
                                   (car |lst`1079*|)))))))
             (|loop`1078*| |bindings`1074*|))
           |form`1068*|)))
     (push)
     (push.iloc.1 . 1)
     (apply.gloc.of
       expand-form
       (expand-form
         (annotate
           (letrec* ((|loop`1078*|
                       (lambda (|lst`1079*|)
                         (if (null? |lst`1079*|)
                             (|.cons*| '|.LET| '() |body`1074*|)
                             (if (and (pair? (car |lst`1079*|))
                                      (pair? (cdr (car |lst`1079*|)))
                                      (null? (cddr (car |lst`1079*|))))
                                 (|.list|
                                   '|.CALL-WITH-VALUES|
                                   (|.list| '|.LAMBDA| '() (cadr (car |lst`1079*|)))
                                   (|.list|
                                     '|.LAMBDA|
                                     (car (car |lst`1079*|))
                                     (|loop`1078*| (cdr |lst`1079*|))))
                                 (syntax-violation
                                   (car |form`1068*|)
                                   "expected each binding consist of formals and expression"
                                   |form`1068*|
                                   (car |lst`1079*|)))))))
             (|loop`1078*| |bindings`1074*|))
           |form`1068*|)
         |env`1068*|)))
   (push.car.iloc (0 . 0) "./boot/macro/derived.scm" . 196613)
   (push.const . "expected bindings and body")
   (push.iloc.0 . 0)
   (apply.gloc.of syntax-violation "./boot/macro/derived.scm" . 196613))
 (set.gloc.of expand-let*-values)
 (ret.const.unspec))
((close
   (2 0 . expand-cond)
   (extend.unbound . 3)
   (push.close+
     (1 0 . else?)
     (touch.gloc.of denote-else?)
     (push.iloc 2 . 1)
     (push.iloc.0 . 0)
     (apply.gloc.of denote-else? "./boot/macro/derived.scm" . 225312))
   (push.close+
     (1 0 . =>?)
     (touch.gloc.of denote-=>?)
     (push.iloc 2 . 1)
     (push.iloc.0 . 0)
     (apply.gloc.of denote-=>? "./boot/macro/derived.scm" . 226334))
   (push.close+
     (1 0 . lambda?)
     (touch.gloc.of denote-lambda?)
     (push.iloc 2 . 1)
     (push.iloc.0 . 0)
     (apply.gloc.of denote-lambda? "./boot/macro/derived.scm" . 227362))
   (enclose . 3)
   (call
     (touch.gloc.of safe-length)
     (push.iloc.1 . 0)
     (apply.gloc.of safe-length "./boot/macro/derived.scm" . 229391))
   (push)
   (push.const . 1)
   (subr.gloc.of > 2 "./boot/macro/derived.scm" . 229388)
   (if.true
     (touch.gloc.of expand-form)
     (call
       (touch.gloc.of annotate)
       (call
         (extend.enclose+
           (1 0 . loop)
           (iloc.0 . 0)
           (if.null?.ret.const |.UNSPECIFIED|)
           (push.car.iloc (0 . 0) "./boot/macro/derived.scm" . 235554)
           (extend . 1)
           (call
             (iloc.0 . 0)
             (if.not.pair?.ret.const . #f)
             (cdr.iloc (0 . 0) "./boot/macro/derived.scm" . 236566)
             (if.not.pair?.ret.const . #f)
             (cddr.iloc (0 . 0) "./boot/macro/derived.scm" . 236566)
             (ret.pair? "./boot/macro/derived.scm" . 236566))
           (push)
           (extend . 1)
           (call
             (iloc.1 . 0)
             (if.not.pair?.ret.const . #f)
             (call
               (push.car.iloc (1 . 0) "./boot/macro/derived.scm" . 236566)
               (apply.iloc+ (4 . 0) "./boot/macro/derived.scm" . 236566))
             (if.false.ret)
             (cdr.iloc (1 . 0) "./boot/macro/derived.scm" . 236566)
             (ret.pair? "./boot/macro/derived.scm" . 236566))
           (if.true
             (cdr.iloc (2 . 0) "./boot/macro/derived.scm" . 236566)
             (if.null?
               (push.const . |.BEGIN|)
               (cdr.iloc (1 . 0) "./boot/macro/derived.scm" . 236566)
               (ret.cons "./boot/macro/derived.scm" . 236566))
             (push.car.iloc (5 . 0) "./boot/macro/derived.scm" . 236566)
             (push.const . "misplaced else")
             (push.iloc 5 . 0)
             (push.iloc.1 . 0)
             (apply.gloc.of syntax-violation "./boot/macro/derived.scm" . 236566))
           (call
             (iloc.0 . 0)
             (if.false.ret)
             (push.iloc.1 . 0)
             (subr.gloc.of caddr 1 "./boot/macro/derived.scm" . 236566)
             (if.not.pair?.ret.const . #f)
             (push.iloc.1 . 0)
             (subr.gloc.of cdaddr 1 "./boot/macro/derived.scm" . 236566)
             (if.not.pair?.ret.const . #f)
             (push.iloc.1 . 0)
             (push.subr.gloc.of cdaddr 1 "./boot/macro/derived.scm" . 236566)
             (subr.gloc.of car 1 "./boot/macro/derived.scm" . 236566)
             (if.not.pair?.ret.const . #f)
             (push.iloc.1 . 0)
             (push.subr.gloc.of cdaddr 1 "./boot/macro/derived.scm" . 236566)
             (subr.gloc.of cdar 1 "./boot/macro/derived.scm" . 236566)
             (if.not.null?.ret.const . #f)
             (push.iloc.1 . 0)
             (subr.gloc.of cdddr 1 "./boot/macro/derived.scm" . 236566)
             (if.not.null?.ret.const . #f)
             (push.iloc.1 . 0)
             (push.subr.gloc.of cdaddr 1 "./boot/macro/derived.scm" . 236566)
             (push.subr.gloc.of cdr 1 "./boot/macro/derived.scm" . 236566)
             (subr.gloc.of list? 1 "./boot/macro/derived.scm" . 236566)
             (if.false.ret)
             (call
               (push.cadr.iloc (1 . 0) "./boot/macro/derived.scm" . 236566)
               (apply.iloc+ (4 . 1) "./boot/macro/derived.scm" . 236566))
             (if.false.ret)
             (push.iloc.1 . 0)
             (push.subr.gloc.of caaddr 1 "./boot/macro/derived.scm" . 236566)
             (apply.iloc+ (4 . 2) "./boot/macro/derived.scm" . 236566))
           (if.true
             (push.iloc.1 . 0)
             (push.subr.gloc.of cdaddr 1 "./boot/macro/derived.scm" . 236566)
             (push.subr.gloc.of cdr 1 "./boot/macro/derived.scm" . 236566)
             (push.iloc.1 . 0)
             (push.subr.gloc.of cdaddr 1 "./boot/macro/derived.scm" . 236566)
             (push.subr.gloc.of caar 1 "./boot/macro/derived.scm" . 236566)
             (push.car.iloc (1 . 0) "./boot/macro/derived.scm" . 236566)
             (extend . 3)
             (call (apply.gloc.of generate-temporary-symbol "./boot/macro/derived.scm" . 236566))
             (push)
             (extend . 1)
             (push.const . |.LET|)
             (push.iloc.0 . 0)
             (push.iloc.1 . 2)
             (push.subr.gloc.of |.list| 2 "./boot/macro/derived.scm" . 236566)
             (push.subr.gloc.of |.list| 1 "./boot/macro/derived.scm" . 236566)
             (push.const . |.IF|)
             (push.iloc.0 . 0)
             (push.const . |.LET|)
             (push.iloc.1 . 1)
             (push.iloc.0 . 0)
             (push.subr.gloc.of |.list| 2 "./boot/macro/derived.scm" . 236566)
             (push.subr.gloc.of |.list| 1 "./boot/macro/derived.scm" . 236566)
             (push.iloc.1 . 0)
             (push.subr.gloc.of |.cons*| 3 "./boot/macro/derived.scm" . 236566)
             (call
               (push.cdr.iloc (4 . 0) "./boot/macro/derived.scm" . 236566)
               (apply.iloc+ (5 . 0) "./boot/macro/derived.scm" . 236566))
             (push)
             (push.subr.gloc.of |.list| 4 "./boot/macro/derived.scm" . 236566)
             (ret.subr.gloc.of |.list| "./boot/macro/derived.scm" . 236566))
           (call
             (iloc.0 . 0)
             (if.false.ret)
             (push.iloc.1 . 0)
             (subr.gloc.of cdddr 1 "./boot/macro/derived.scm" . 236566)
             (if.not.null?.ret.const . #f)
             (push.cadr.iloc (1 . 0) "./boot/macro/derived.scm" . 236566)
             (apply.iloc+ (4 . 1) "./boot/macro/derived.scm" . 236566))
           (if.true
             (push.iloc.1 . 0)
             (push.subr.gloc.of caddr 1 "./boot/macro/derived.scm" . 236566)
             (push.car.iloc (1 . 0) "./boot/macro/derived.scm" . 236566)
             (extend . 2)
             (call (apply.gloc.of generate-temporary-symbol "./boot/macro/derived.scm" . 236566))
             (push)
             (extend . 1)
             (push.const . |.LET|)
             (push.iloc.0 . 0)
             (push.iloc.1 . 1)
             (push.subr.gloc.of |.list| 2 "./boot/macro/derived.scm" . 236566)
             (push.subr.gloc.of |.list| 1 "./boot/macro/derived.scm" . 236566)
             (push.const . |.IF|)
             (push.iloc.0 . 0)
             (push.iloc.1 . 0)
             (push.iloc.0 . 0)
             (push.subr.gloc.of |.list| 2 "./boot/macro/derived.scm" . 236566)
             (call
               (push.cdr.iloc (4 . 0) "./boot/macro/derived.scm" . 236566)
               (apply.iloc+ (5 . 0) "./boot/macro/derived.scm" . 236566))
             (push)
             (push.subr.gloc.of |.list| 4 "./boot/macro/derived.scm" . 236566)
             (ret.subr.gloc.of |.list| "./boot/macro/derived.scm" . 236566))
           (call
             (iloc.1 . 0)
             (if.not.pair?.ret.const . #f)
             (cdr.iloc (1 . 0) "./boot/macro/derived.scm" . 236566)
             (ret.null? "./boot/macro/derived.scm" . 236566))
           (if.true
             (push.const . |.OR|)
             (push.car.iloc (1 . 0) "./boot/macro/derived.scm" . 236566)
             (call
               (push.cdr.iloc (2 . 0) "./boot/macro/derived.scm" . 236566)
               (apply.iloc+ (3 . 0) "./boot/macro/derived.scm" . 236566))
             (push)
             (ret.subr.gloc.of |.list| "./boot/macro/derived.scm" . 236566))
           (call
             (iloc.1 . 0)
             (if.not.pair?.ret.const . #f)
             (push.cdr.iloc (1 . 0) "./boot/macro/derived.scm" . 236566)
             (ret.subr.gloc.of list? "./boot/macro/derived.scm" . 236566))
           (if.true
             (push.const . |.IF|)
             (push.car.iloc (1 . 0) "./boot/macro/derived.scm" . 236566)
             (push.const . |.BEGIN|)
             (cdr.iloc (1 . 0) "./boot/macro/derived.scm" . 236566)
             (push.cons)
             (call
               (push.cdr.iloc (2 . 0) "./boot/macro/derived.scm" . 236566)
               (apply.iloc+ (3 . 0) "./boot/macro/derived.scm" . 236566))
             (push)
             (ret.subr.gloc.of |.list| "./boot/macro/derived.scm" . 236566))
           (push.car.iloc (5 . 0) "./boot/macro/derived.scm" . 236566)
           (push.const . "malformed cond clause")
           (push.iloc 5 . 0)
           (push.iloc.1 . 0)
           (apply.gloc.of syntax-violation "./boot/macro/derived.scm" . 236566))
         (push.cdr.iloc (2 . 0) "./boot/macro/derived.scm" . 232478)
         (apply.iloc+ (0 . 0) "./boot/macro/derived.scm" . 233488))
       (push)
       (push.iloc.1 . 0)
       (apply.gloc.of
         annotate
         (annotate
           (letrec* ((|loop`1100*|
                       (lambda (|lst`1101*|)
                         (if (null? |lst`1101*|)
                             '(|.UNSPECIFIED|)
                             (let ((|clause`1103*| (car |lst`1101*|)))
                               (let ((|.L330`1105`1108*|
                                       (and (pair? |clause`1103*|)
                                            (pair? (cdr |clause`1103*|))
                                            (pair? (cddr |clause`1103*|)))))
                                 (if (and (pair? |clause`1103*|)
                                          (|else?`1091*| (car |clause`1103*|))
                                          (pair? (cdr |clause`1103*|)))
                                     (if (null? (cdr |lst`1101*|))
                                         (|.cons| '|.BEGIN| (cdr |clause`1103*|))
                                         (syntax-violation
                                           (car |form`1090*|)
                                           "misplaced else"
                                           |form`1090*|
                                           |clause`1103*|))
                                     (if (and |.L330`1105`1108*|
                                              (pair? (caddr |clause`1103*|))
                                              (pair? (cdaddr |clause`1103*|))
                                              (pair? (car (cdaddr |clause`1103*|)))
                                              (null? (cdar (cdaddr |clause`1103*|)))
                                              (null? (cdddr |clause`1103*|))
                                              (list? (cdr (cdaddr |clause`1103*|)))
                                              (|=>?`1091*| (cadr |clause`1103*|))
                                              (|lambda?`1091*| (caaddr |clause`1103*|)))
                                         (let ((|expr`1113*| (cdr (cdaddr |clause`1103*|)))
                                               (|a`1113*| (caar (cdaddr |clause`1103*|)))
                                               (|test`1113*| (car |clause`1103*|)))
                                           (let ((|temp`1115*| (generate-temporary-symbol)))
                                             (|.list|
                                               '|.LET|
                                               (|.list| (|.list| |temp`1115*| |test`1113*|))
                                               (|.list|
                                                 '|.IF|
                                                 |temp`1115*|
                                                 (|.cons*|
                                                   '|.LET|
                                                   (|.list| (|.list| |a`1113*| |temp`1115*|))
                                                   |expr`1113*|)
                                                 (|loop`1100*| (cdr |lst`1101*|))))))
                                         (if (and |.L330`1105`1108*|
                                                  (null? (cdddr |clause`1103*|))
                                                  (|=>?`1091*| (cadr |clause`1103*|)))
                                             (let ((|result`1117*| (caddr |clause`1103*|))
                                                   (|test`1117*| (car |clause`1103*|)))
                                               (let ((|temp`1119*| (generate-temporary-symbol)))
                                                 (|.list|
                                                   '|.LET|
                                                   (|.list| (|.list| |temp`1119*| |test`1117*|))
                                                   (|.list|
                                                     '|.IF|
                                                     |temp`1119*|
                                                     (|.list| |result`1117*| |temp`1119*|)
                                                     (|loop`1100*| (cdr |lst`1101*|))))))
                                             (if (and (pair? |clause`1103*|)
                                                      (null? (cdr |clause`1103*|)))
                                                 (|.list|
                                                   '|.OR|
                                                   (car |clause`1103*|)
                                                   (|loop`1100*| (cdr |lst`1101*|)))
                                                 (if (and (pair? |clause`1103*|)
                                                          (list? (cdr |clause`1103*|)))
                                                     (|.list|
                                                       '|.IF|
                                                       (car |clause`1103*|)
                                                       (|.cons| '|.BEGIN| (cdr |clause`1103*|))
                                                       (|loop`1100*| (cdr |lst`1101*|)))
                                                     (syntax-violation
                                                       (car |form`1090*|)
                                                       "malformed cond clause"
                                                       |form`1090*|
                                                       |clause`1103*|))))))))))))
             (|loop`1100*| (cdr |form`1090*|)))
           |form`1090*|)))
     (push)
     (push.iloc.1 . 1)
     (apply.gloc.of
       expand-form
       (expand-form
         (annotate
           (letrec* ((|loop`1100*|
                       (lambda (|lst`1101*|)
                         (if (null? |lst`1101*|)
                             '(|.UNSPECIFIED|)
                             (let ((|clause`1103*| (car |lst`1101*|)))
                               (let ((|.L330`1105`1108*|
                                       (and (pair? |clause`1103*|)
                                            (pair? (cdr |clause`1103*|))
                                            (pair? (cddr |clause`1103*|)))))
                                 (if (and (pair? |clause`1103*|)
                                          (|else?`1091*| (car |clause`1103*|))
                                          (pair? (cdr |clause`1103*|)))
                                     (if (null? (cdr |lst`1101*|))
                                         (|.cons| '|.BEGIN| (cdr |clause`1103*|))
                                         (syntax-violation
                                           (car |form`1090*|)
                                           "misplaced else"
                                           |form`1090*|
                                           |clause`1103*|))
                                     (if (and |.L330`1105`1108*|
                                              (pair? (caddr |clause`1103*|))
                                              (pair? (cdaddr |clause`1103*|))
                                              (pair? (car (cdaddr |clause`1103*|)))
                                              (null? (cdar (cdaddr |clause`1103*|)))
                                              (null? (cdddr |clause`1103*|))
                                              (list? (cdr (cdaddr |clause`1103*|)))
                                              (|=>?`1091*| (cadr |clause`1103*|))
                                              (|lambda?`1091*| (caaddr |clause`1103*|)))
                                         (let ((|expr`1113*| (cdr (cdaddr |clause`1103*|)))
                                               (|a`1113*| (caar (cdaddr |clause`1103*|)))
                                               (|test`1113*| (car |clause`1103*|)))
                                           (let ((|temp`1115*| (generate-temporary-symbol)))
                                             (|.list|
                                               '|.LET|
                                               (|.list| (|.list| |temp`1115*| |test`1113*|))
                                               (|.list|
                                                 '|.IF|
                                                 |temp`1115*|
                                                 (|.cons*|
                                                   '|.LET|
                                                   (|.list| (|.list| |a`1113*| |temp`1115*|))
                                                   |expr`1113*|)
                                                 (|loop`1100*| (cdr |lst`1101*|))))))
                                         (if (and |.L330`1105`1108*|
                                                  (null? (cdddr |clause`1103*|))
                                                  (|=>?`1091*| (cadr |clause`1103*|)))
                                             (let ((|result`1117*| (caddr |clause`1103*|))
                                                   (|test`1117*| (car |clause`1103*|)))
                                               (let ((|temp`1119*| (generate-temporary-symbol)))
                                                 (|.list|
                                                   '|.LET|
                                                   (|.list| (|.list| |temp`1119*| |test`1117*|))
                                                   (|.list|
                                                     '|.IF|
                                                     |temp`1119*|
                                                     (|.list| |result`1117*| |temp`1119*|)
                                                     (|loop`1100*| (cdr |lst`1101*|))))))
                                             (if (and (pair? |clause`1103*|)
                                                      (null? (cdr |clause`1103*|)))
                                                 (|.list|
                                                   '|.OR|
                                                   (car |clause`1103*|)
                                                   (|loop`1100*| (cdr |lst`1101*|)))
                                                 (if (and (pair? |clause`1103*|)
                                                          (list? (cdr |clause`1103*|)))
                                                     (|.list|
                                                       '|.IF|
                                                       (car |clause`1103*|)
                                                       (|.cons| '|.BEGIN| (cdr |clause`1103*|))
                                                       (|loop`1100*| (cdr |lst`1101*|)))
                                                     (syntax-violation
                                                       (car |form`1090*|)
                                                       "malformed cond clause"
                                                       |form`1090*|
                                                       |clause`1103*|))))))))))))
             (|loop`1100*| (cdr |form`1090*|)))
           |form`1090*|)
         |env`1090*|)))
   (push.car.iloc (1 . 0) "./boot/macro/derived.scm" . 265246)
   (push.const . "expected cond clause")
   (push.iloc.1 . 0)
   (apply.gloc.of syntax-violation "./boot/macro/derived.scm" . 265228))
 (set.gloc.of expand-cond)
 (ret.const.unspec))
((close
   (2 0 . maplist)
   (iloc.0 . 1)
   (if.null?.ret.const)
   (call (push.iloc.0 . 1) (apply.iloc (0 . 0) "./boot/macro/derived.scm" . 275483))
   (push)
   (call
     (touch.gloc.of |maplist`1128*|)
     (push.iloc.0 . 0)
     (push.cdr.iloc (0 . 1) "./boot/macro/derived.scm" . 275508)
     (apply.gloc.of |maplist`1128*| "./boot/macro/derived.scm" . 275494))
   (ret.cons "./boot/macro/derived.scm" . 275477))
 (set.gloc.of |maplist`1128*|)
 (close
   (2 0 . expand-case)
   (extend.enclose+
     (1 0 . else?)
     (touch.gloc.of denote-else?)
     (push.iloc 2 . 1)
     (push.iloc.0 . 0)
     (apply.gloc.of denote-else? "./boot/macro/derived.scm" . 270368))
   (call
     (iloc.1 . 0)
     (if.not.pair?.ret.const . #f)
     (cdr.iloc (1 . 0) "./boot/macro/derived.scm" . 295992)
     (if.not.pair?.ret.const . #f)
     (cddr.iloc (1 . 0) "./boot/macro/derived.scm" . 295992)
     (ret.pair? "./boot/macro/derived.scm" . 295992))
   (if.true
     (push.cddr.iloc (1 . 0) "./boot/macro/derived.scm" . 295992)
     (push.cadr.iloc (1 . 0) "./boot/macro/derived.scm" . 295992)
     (extend . 2)
     (call (apply.gloc.of generate-temporary-symbol "./boot/macro/derived.scm" . 295992))
     (push)
     (extend . 1)
     (touch.gloc.of expand-form)
     (call
       (touch.gloc.of annotate)
       (push.const . |.LET|)
       (push.iloc.0 . 0)
       (push.iloc.1 . 1)
       (push.subr.gloc.of |.list| 2 "./boot/macro/derived.scm" . 295992)
       (push.subr.gloc.of |.list| 1 "./boot/macro/derived.scm" . 295992)
       (push.const . |.COND|)
       (call
         (touch.gloc.of |maplist`1128*|)
         (push.close
           (1 0)
           (push.gloc.of pair?)
           (extend . 1)
           (call
             (iloc.1 . 0)
             (if.not.pair?.ret.const . #f)
             (car.iloc (1 . 0) "./boot/macro/derived.scm" . 295992)
             (ret.pair? "./boot/macro/derived.scm" . 295992))
           (push)
           (extend . 1)
           (call
             (iloc.0 . 0)
             (if.false.ret)
             (push.cdr.iloc (2 . 0) "./boot/macro/derived.scm" . 295992)
             (ret.subr.gloc.of list? "./boot/macro/derived.scm" . 295992))
           (push)
           (extend . 1)
           (call
             (iloc.0 . 0)
             (if.false.ret)
             (call
               (push.iloc 3 . 0)
               (push.subr.gloc.of caar 1 "./boot/macro/derived.scm" . 295992)
               (apply.iloc+ (6 . 0) "./boot/macro/derived.scm" . 295992))
             (if.false.ret)
             (push.iloc 3 . 0)
             (push.subr.gloc.of cdar 1 "./boot/macro/derived.scm" . 295992)
             (apply.iloc (2 . 0) "./boot/macro/derived.scm" . 295992))
           (if.true
             (cdr.iloc (3 . 0) "./boot/macro/derived.scm" . 295992)
             (if.null?
               (push.const . |.ELSE|)
               (push.iloc 3 . 0)
               (subr.gloc.of cdar 1 "./boot/macro/derived.scm" . 295992)
               (ret.cons "./boot/macro/derived.scm" . 295992))
             (push.car.iloc (7 . 0) "./boot/macro/derived.scm" . 295992)
             (push.const . "misplaced else")
             (push.iloc 7 . 0)
             (push.car.iloc (3 . 0) "./boot/macro/derived.scm" . 295992)
             (apply.gloc.of syntax-violation "./boot/macro/derived.scm" . 295992))
           (call
             (iloc.1 . 0)
             (if.false.ret)
             (push.iloc 3 . 0)
             (subr.gloc.of caar 1 "./boot/macro/derived.scm" . 295992)
             (if.not.pair?.ret.const . #f)
             (push.iloc 3 . 0)
             (subr.gloc.of cdaar 1 "./boot/macro/derived.scm" . 295992)
             (if.not.null?.ret.const . #f)
             (push.cdr.iloc (3 . 0) "./boot/macro/derived.scm" . 295992)
             (subr.gloc.of list? 1 "./boot/macro/derived.scm" . 295992)
             (if.false.ret)
             (push.iloc 3 . 0)
             (push.subr.gloc.of cdar 1 "./boot/macro/derived.scm" . 295992)
             (apply.iloc (2 . 0) "./boot/macro/derived.scm" . 295992))
           (if.true
             (push.iloc 3 . 0)
             (push.subr.gloc.of cdar 1 "./boot/macro/derived.scm" . 295992)
             (push.iloc 3 . 0)
             (push.subr.gloc.of caaar 1 "./boot/macro/derived.scm" . 295992)
             (extend . 2)
             (call
               (iloc.0 . 1)
               (if.symbol?.ret.const . #t)
               (push.iloc.0 . 1)
               (subr.gloc.of fixnum? 1 "./boot/macro/derived.scm" . 295992)
               (if.true.ret)
               (push.iloc.0 . 1)
               (subr.gloc.of char? 1 "./boot/macro/derived.scm" . 295992)
               (if.true.ret)
               (push.iloc.0 . 1)
               (subr.gloc.of boolean? 1 "./boot/macro/derived.scm" . 295992)
               (if.true.ret)
               (iloc.0 . 1)
               (ret.null? "./boot/macro/derived.scm" . 295992))
             (if.true
               (push.const . |.EQ?|)
               (push.iloc 5 . 0)
               (push.const . quote)
               (push.iloc.0 . 1)
               (push.subr.gloc.of |.list| 2 (|.list| 'quote |datum`1153*|))
               (push.subr.gloc.of
                 |.list|
                 3
                 (|.list| '|.EQ?| |temp`1139*| (|.list| 'quote |datum`1153*|)))
               (iloc.0 . 0)
               (ret.cons "./boot/macro/derived.scm" . 295992))
             (push.const . |.EQV?|)
             (push.iloc 5 . 0)
             (push.const . quote)
             (push.iloc.0 . 1)
             (push.subr.gloc.of |.list| 2 (|.list| 'quote |datum`1153*|))
             (push.subr.gloc.of
               |.list|
               3
               (|.list| '|.EQV?| |temp`1139*| (|.list| 'quote |datum`1153*|)))
             (iloc.0 . 0)
             (ret.cons "./boot/macro/derived.scm" . 295992))
           (call
             (iloc.0 . 0)
             (if.false.ret)
             (push.iloc 3 . 0)
             (push.subr.gloc.of caar 1 "./boot/macro/derived.scm" . 295992)
             (subr.gloc.of list? 1 "./boot/macro/derived.scm" . 295992)
             (if.false.ret)
             (push.iloc 3 . 0)
             (push.subr.gloc.of cdar 1 "./boot/macro/derived.scm" . 295992)
             (apply.iloc (2 . 0) "./boot/macro/derived.scm" . 295992))
           (if.true
             (push.iloc 3 . 0)
             (push.subr.gloc.of cdar 1 "./boot/macro/derived.scm" . 295992)
             (push.iloc 3 . 0)
             (push.subr.gloc.of caar 1 "./boot/macro/derived.scm" . 295992)
             (extend . 2)
             (iloc.0 . 1)
             (if.null?.ret.const #f)
             (call
               (touch.gloc.of every1)
               (push.close
                 (1 0)
                 (iloc.0 . 0)
                 (if.symbol?.ret.const . #t)
                 (push.iloc.0 . 0)
                 (subr.gloc.of fixnum? 1 "./boot/macro/derived.scm" . 295992)
                 (if.true.ret)
                 (push.iloc.0 . 0)
                 (subr.gloc.of char? 1 "./boot/macro/derived.scm" . 295992)
                 (if.true.ret)
                 (push.iloc.0 . 0)
                 (subr.gloc.of boolean? 1 "./boot/macro/derived.scm" . 295992)
                 (if.true.ret)
                 (iloc.1 . 1)
                 (ret.null? "./boot/macro/derived.scm" . 295992))
               (push.iloc.0 . 1)
               (apply.gloc.of every1 "./boot/macro/derived.scm" . 295992))
             (if.true
               (push.const . |.MEMQ|)
               (push.iloc 5 . 0)
               (push.const . quote)
               (push.iloc.0 . 1)
               (push.subr.gloc.of |.list| 2 (|.list| 'quote |datum`1155*|))
               (push.subr.gloc.of
                 |.list|
                 3
                 (|.list| '|.MEMQ| |temp`1139*| (|.list| 'quote |datum`1155*|)))
               (iloc.0 . 0)
               (ret.cons "./boot/macro/derived.scm" . 295992))
             (push.const . |.MEMV|)
             (push.iloc 5 . 0)
             (push.const . quote)
             (push.iloc.0 . 1)
             (push.subr.gloc.of |.list| 2 (|.list| 'quote |datum`1155*|))
             (push.subr.gloc.of
               |.list|
               3
               (|.list| '|.MEMV| |temp`1139*| (|.list| 'quote |datum`1155*|)))
             (iloc.0 . 0)
             (ret.cons "./boot/macro/derived.scm" . 295992))
           (push.car.iloc (7 . 0) "./boot/macro/derived.scm" . 295992)
           (push.const . "malformed case clause")
           (push.iloc 7 . 0)
           (push.car.iloc (3 . 0) "./boot/macro/derived.scm" . 295992)
           (apply.gloc.of syntax-violation "./boot/macro/derived.scm" . 295992))
         (push.iloc.1 . 0)
         (apply.gloc.of
           |maplist`1128*|
           (|maplist`1128*|
             (lambda (|lst`1141*|)
               (let ((|.L337`1143`1144*| pair?))
                 (let ((|.L339`1143`1146*| (and (pair? |lst`1141*|) (pair? (car |lst`1141*|)))))
                   (let ((|.L340`1143`1148*| (and |.L339`1143`1146*| (list? (cdr |lst`1141*|)))))
                     (if (and |.L340`1143`1148*|
                              (|else?`1128*| (caar |lst`1141*|))
                              (|.L337`1143`1144*| (cdar |lst`1141*|)))
                         (if (null? (cdr |lst`1141*|))
                             (|.cons| '|.ELSE| (cdar |lst`1141*|))
                             (syntax-violation
                               (car |form`1127*|)
                               "misplaced else"
                               |form`1127*|
                               (car |lst`1141*|)))
                         (if (and |.L339`1143`1146*|
                                  (pair? (caar |lst`1141*|))
                                  (null? (cdaar |lst`1141*|))
                                  (list? (cdr |lst`1141*|))
                                  (|.L337`1143`1144*| (cdar |lst`1141*|)))
                             (let ((|expr`1153*| (cdar |lst`1141*|))
                                   (|datum`1153*| (caaar |lst`1141*|)))
                               (if (or (symbol? |datum`1153*|)
                                       (fixnum? |datum`1153*|)
                                       (char? |datum`1153*|)
                                       (boolean? |datum`1153*|)
                                       (null? |datum`1153*|))
                                   (|.cons|
                                     (|.list| '|.EQ?| |temp`1139*| (|.list| 'quote |datum`1153*|))
                                     |expr`1153*|)
                                   (|.cons|
                                     (|.list| '|.EQV?| |temp`1139*| (|.list| 'quote |datum`1153*|))
                                     |expr`1153*|)))
                             (if (and |.L340`1143`1148*|
                                      (list? (caar |lst`1141*|))
                                      (|.L337`1143`1144*| (cdar |lst`1141*|)))
                                 (let ((|expr`1155*| (cdar |lst`1141*|))
                                       (|datum`1155*| (caar |lst`1141*|)))
                                   (if (null? |datum`1155*|)
                                       '(#f)
                                       (if (every1
                                             (lambda (|e`1157*|)
                                               (or (symbol? |e`1157*|)
                                                   (fixnum? |e`1157*|)
                                                   (char? |e`1157*|)
                                                   (boolean? |e`1157*|)
                                                   (null? |datum`1155*|)))
                                             |datum`1155*|)
                                           (|.cons|
                                             (|.list|
                                               '|.MEMQ|
                                               |temp`1139*|
                                               (|.list| 'quote |datum`1155*|))
                                             |expr`1155*|)
                                           (|.cons|
                                             (|.list|
                                               '|.MEMV|
                                               |temp`1139*|
                                               (|.list| 'quote |datum`1155*|))
                                             |expr`1155*|))))
                                 (syntax-violation
                                   (car |form`1127*|)
                                   "malformed case clause"
                                   |form`1127*|
                                   (car |lst`1141*|)))))))))
             |clauses`1137*|)))
       (push.cons)
       (push.subr.gloc.of
         |.list|
         3
         (|.list|
           '|.LET|
           (|.list| (|.list| |temp`1139*| |key`1137*|))
           (|.cons|
             '|.COND|
             (|maplist`1128*|
               (lambda (|lst`1141*|)
                 (let ((|.L337`1143`1144*| pair?))
                   (let ((|.L339`1143`1146*| (and (pair? |lst`1141*|) (pair? (car |lst`1141*|)))))
                     (let ((|.L340`1143`1148*| (and |.L339`1143`1146*| (list? (cdr |lst`1141*|)))))
                       (if (and |.L340`1143`1148*|
                                (|else?`1128*| (caar |lst`1141*|))
                                (|.L337`1143`1144*| (cdar |lst`1141*|)))
                           (if (null? (cdr |lst`1141*|))
                               (|.cons| '|.ELSE| (cdar |lst`1141*|))
                               (syntax-violation
                                 (car |form`1127*|)
                                 "misplaced else"
                                 |form`1127*|
                                 (car |lst`1141*|)))
                           (if (and |.L339`1143`1146*|
                                    (pair? (caar |lst`1141*|))
                                    (null? (cdaar |lst`1141*|))
                                    (list? (cdr |lst`1141*|))
                                    (|.L337`1143`1144*| (cdar |lst`1141*|)))
                               (let ((|expr`1153*| (cdar |lst`1141*|))
                                     (|datum`1153*| (caaar |lst`1141*|)))
                                 (if (or (symbol? |datum`1153*|)
                                         (fixnum? |datum`1153*|)
                                         (char? |datum`1153*|)
                                         (boolean? |datum`1153*|)
                                         (null? |datum`1153*|))
                                     (|.cons|
                                       (|.list| '|.EQ?| |temp`1139*| (|.list| 'quote |datum`1153*|))
                                       |expr`1153*|)
                                     (|.cons|
                                       (|.list|
                                         '|.EQV?|
                                         |temp`1139*|
                                         (|.list| 'quote |datum`1153*|))
                                       |expr`1153*|)))
                               (if (and |.L340`1143`1148*|
                                        (list? (caar |lst`1141*|))
                                        (|.L337`1143`1144*| (cdar |lst`1141*|)))
                                   (let ((|expr`1155*| (cdar |lst`1141*|))
                                         (|datum`1155*| (caar |lst`1141*|)))
                                     (if (null? |datum`1155*|)
                                         '(#f)
                                         (if (every1
                                               (lambda (|e`1157*|)
                                                 (or (symbol? |e`1157*|)
                                                     (fixnum? |e`1157*|)
                                                     (char? |e`1157*|)
                                                     (boolean? |e`1157*|)
                                                     (null? |datum`1155*|)))
                                               |datum`1155*|)
                                             (|.cons|
                                               (|.list|
                                                 '|.MEMQ|
                                                 |temp`1139*|
                                                 (|.list| 'quote |datum`1155*|))
                                               |expr`1155*|)
                                             (|.cons|
                                               (|.list|
                                                 '|.MEMV|
                                                 |temp`1139*|
                                                 (|.list| 'quote |datum`1155*|))
                                               |expr`1155*|))))
                                   (syntax-violation
                                     (car |form`1127*|)
                                     "malformed case clause"
                                     |form`1127*|
                                     (car |lst`1141*|)))))))))
               |clauses`1137*|))))
       (push.iloc 3 . 0)
       (apply.gloc.of
         annotate
         (annotate
           (|.list|
             '|.LET|
             (|.list| (|.list| |temp`1139*| |key`1137*|))
             (|.cons|
               '|.COND|
               (|maplist`1128*|
                 (lambda (|lst`1141*|)
                   (let ((|.L337`1143`1144*| pair?))
                     (let ((|.L339`1143`1146*| (and (pair? |lst`1141*|) (pair? (car |lst`1141*|)))))
                       (let ((|.L340`1143`1148*|
                               (and |.L339`1143`1146*| (list? (cdr |lst`1141*|)))))
                         (if (and |.L340`1143`1148*|
                                  (|else?`1128*| (caar |lst`1141*|))
                                  (|.L337`1143`1144*| (cdar |lst`1141*|)))
                             (if (null? (cdr |lst`1141*|))
                                 (|.cons| '|.ELSE| (cdar |lst`1141*|))
                                 (syntax-violation
                                   (car |form`1127*|)
                                   "misplaced else"
                                   |form`1127*|
                                   (car |lst`1141*|)))
                             (if (and |.L339`1143`1146*|
                                      (pair? (caar |lst`1141*|))
                                      (null? (cdaar |lst`1141*|))
                                      (list? (cdr |lst`1141*|))
                                      (|.L337`1143`1144*| (cdar |lst`1141*|)))
                                 (let ((|expr`1153*| (cdar |lst`1141*|))
                                       (|datum`1153*| (caaar |lst`1141*|)))
                                   (if (or (symbol? |datum`1153*|)
                                           (fixnum? |datum`1153*|)
                                           (char? |datum`1153*|)
                                           (boolean? |datum`1153*|)
                                           (null? |datum`1153*|))
                                       (|.cons|
                                         (|.list|
                                           '|.EQ?|
                                           |temp`1139*|
                                           (|.list| 'quote |datum`1153*|))
                                         |expr`1153*|)
                                       (|.cons|
                                         (|.list|
                                           '|.EQV?|
                                           |temp`1139*|
                                           (|.list| 'quote |datum`1153*|))
                                         |expr`1153*|)))
                                 (if (and |.L340`1143`1148*|
                                          (list? (caar |lst`1141*|))
                                          (|.L337`1143`1144*| (cdar |lst`1141*|)))
                                     (let ((|expr`1155*| (cdar |lst`1141*|))
                                           (|datum`1155*| (caar |lst`1141*|)))
                                       (if (null? |datum`1155*|)
                                           '(#f)
                                           (if (every1
                                                 (lambda (|e`1157*|)
                                                   (or (symbol? |e`1157*|)
                                                       (fixnum? |e`1157*|)
                                                       (char? |e`1157*|)
                                                       (boolean? |e`1157*|)
                                                       (null? |datum`1155*|)))
                                                 |datum`1155*|)
                                               (|.cons|
                                                 (|.list|
                                                   '|.MEMQ|
                                                   |temp`1139*|
                                                   (|.list| 'quote |datum`1155*|))
                                                 |expr`1155*|)
                                               (|.cons|
                                                 (|.list|
                                                   '|.MEMV|
                                                   |temp`1139*|
                                                   (|.list| 'quote |datum`1155*|))
                                                 |expr`1155*|))))
                                     (syntax-violation
                                       (car |form`1127*|)
                                       "malformed case clause"
                                       |form`1127*|
                                       (car |lst`1141*|)))))))))
                 |clauses`1137*|)))
           |form`1127*|)))
     (push)
     (push.iloc 3 . 1)
     (apply.gloc.of
       expand-form
       (expand-form
         (annotate
           (|.list|
             '|.LET|
             (|.list| (|.list| |temp`1139*| |key`1137*|))
             (|.cons|
               '|.COND|
               (|maplist`1128*|
                 (lambda (|lst`1141*|)
                   (let ((|.L337`1143`1144*| pair?))
                     (let ((|.L339`1143`1146*| (and (pair? |lst`1141*|) (pair? (car |lst`1141*|)))))
                       (let ((|.L340`1143`1148*|
                               (and |.L339`1143`1146*| (list? (cdr |lst`1141*|)))))
                         (if (and |.L340`1143`1148*|
                                  (|else?`1128*| (caar |lst`1141*|))
                                  (|.L337`1143`1144*| (cdar |lst`1141*|)))
                             (if (null? (cdr |lst`1141*|))
                                 (|.cons| '|.ELSE| (cdar |lst`1141*|))
                                 (syntax-violation
                                   (car |form`1127*|)
                                   "misplaced else"
                                   |form`1127*|
                                   (car |lst`1141*|)))
                             (if (and |.L339`1143`1146*|
                                      (pair? (caar |lst`1141*|))
                                      (null? (cdaar |lst`1141*|))
                                      (list? (cdr |lst`1141*|))
                                      (|.L337`1143`1144*| (cdar |lst`1141*|)))
                                 (let ((|expr`1153*| (cdar |lst`1141*|))
                                       (|datum`1153*| (caaar |lst`1141*|)))
                                   (if (or (symbol? |datum`1153*|)
                                           (fixnum? |datum`1153*|)
                                           (char? |datum`1153*|)
                                           (boolean? |datum`1153*|)
                                           (null? |datum`1153*|))
                                       (|.cons|
                                         (|.list|
                                           '|.EQ?|
                                           |temp`1139*|
                                           (|.list| 'quote |datum`1153*|))
                                         |expr`1153*|)
                                       (|.cons|
                                         (|.list|
                                           '|.EQV?|
                                           |temp`1139*|
                                           (|.list| 'quote |datum`1153*|))
                                         |expr`1153*|)))
                                 (if (and |.L340`1143`1148*|
                                          (list? (caar |lst`1141*|))
                                          (|.L337`1143`1144*| (cdar |lst`1141*|)))
                                     (let ((|expr`1155*| (cdar |lst`1141*|))
                                           (|datum`1155*| (caar |lst`1141*|)))
                                       (if (null? |datum`1155*|)
                                           '(#f)
                                           (if (every1
                                                 (lambda (|e`1157*|)
                                                   (or (symbol? |e`1157*|)
                                                       (fixnum? |e`1157*|)
                                                       (char? |e`1157*|)
                                                       (boolean? |e`1157*|)
                                                       (null? |datum`1155*|)))
                                                 |datum`1155*|)
                                               (|.cons|
                                                 (|.list|
                                                   '|.MEMQ|
                                                   |temp`1139*|
                                                   (|.list| 'quote |datum`1155*|))
                                                 |expr`1155*|)
                                               (|.cons|
                                                 (|.list|
                                                   '|.MEMV|
                                                   |temp`1139*|
                                                   (|.list| 'quote |datum`1155*|))
                                                 |expr`1155*|))))
                                     (syntax-violation
                                       (car |form`1127*|)
                                       "malformed case clause"
                                       |form`1127*|
                                       (car |lst`1141*|)))))))))
                 |clauses`1137*|)))
           |form`1127*|)
         |env`1127*|)))
   (push.car.iloc (1 . 0) "./boot/macro/derived.scm" . 295992)
   (push.const . "expected case clause")
   (push.iloc.1 . 0)
   (apply.gloc.of syntax-violation "./boot/macro/derived.scm" . 295992))
 (set.gloc.of expand-case)
 (ret.const.unspec))
((close
   (2 0 . expand-and)
   (touch.gloc.of annotate)
   (push.const . and)
   (call
     (touch.gloc.of expand-each)
     (push.cdr.iloc (0 . 0) "./boot/macro/derived.scm" . 310308)
     (push.iloc.0 . 1)
     (apply.gloc.of expand-each "./boot/macro/derived.scm" . 310295))
   (push.cons)
   (push.iloc.0 . 0)
   (apply.gloc.of annotate "./boot/macro/derived.scm" . 310277))
 (set.gloc.of expand-and)
 (ret.const.unspec))
((close
   (2 0 . expand-or)
   (touch.gloc.of annotate)
   (push.const . or)
   (call
     (touch.gloc.of expand-each)
     (push.cdr.iloc (0 . 0) "./boot/macro/derived.scm" . 314403)
     (push.iloc.0 . 1)
     (apply.gloc.of expand-each "./boot/macro/derived.scm" . 314390))
   (push.cons)
   (push.iloc.0 . 0)
   (apply.gloc.of annotate "./boot/macro/derived.scm" . 314373))
 (set.gloc.of expand-or)
 (ret.const.unspec))
((close
   (1 0 . desugar-define)
   (call
     (iloc.0 . 0)
     (if.not.pair?.ret.const . #f)
     (cdr.iloc (0 . 0) "./boot/macro/derived.scm" . 335885)
     (ret.pair? "./boot/macro/derived.scm" . 335885))
   (push)
   (extend . 1)
   (call
     (iloc.0 . 0)
     (if.false.ret)
     (cadr.iloc (1 . 0) "./boot/macro/derived.scm" . 335885)
     (ret.pair? "./boot/macro/derived.scm" . 335885))
   (push)
   (extend . 1)
   (call
     (iloc.1 . 0)
     (if.false.ret)
     (cddr.iloc (2 . 0) "./boot/macro/derived.scm" . 335885)
     (if.not.pair?.ret.const . #f)
     (push.iloc 2 . 0)
     (subr.gloc.of cdddr 1 "./boot/macro/derived.scm" . 335885)
     (if.not.null?.ret.const . #f)
     (push.cadr.iloc (2 . 0) "./boot/macro/derived.scm" . 335885)
     (ret.subr.gloc.of symbol? "./boot/macro/derived.scm" . 335885))
   (if.true (ret.iloc 2 . 0))
   (call
     (iloc.1 . 0)
     (if.false.ret)
     (cddr.iloc (2 . 0) "./boot/macro/derived.scm" . 335885)
     (if.not.null?.ret.const . #f)
     (push.cadr.iloc (2 . 0) "./boot/macro/derived.scm" . 335885)
     (ret.subr.gloc.of symbol? "./boot/macro/derived.scm" . 335885))
   (if.true
     (touch.gloc.of annotate)
     (push.const . define)
     (push.cadr.iloc (2 . 0) "./boot/macro/derived.scm" . 335885)
     (push.const (|.UNSPECIFIED|))
     (push.subr.gloc.of |.cons*| 3 "./boot/macro/derived.scm" . 335885)
     (push.iloc 2 . 0)
     (apply.gloc.of annotate "./boot/macro/derived.scm" . 335885))
   (call
     (iloc.0 . 0)
     (if.false.ret)
     (cddr.iloc (2 . 0) "./boot/macro/derived.scm" . 335885)
     (if.not.null?.ret.const . #f)
     (push.iloc 2 . 0)
     (push.subr.gloc.of caadr 1 "./boot/macro/derived.scm" . 335885)
     (ret.subr.gloc.of symbol? "./boot/macro/derived.scm" . 335885))
   (if.true
     (push.iloc 2 . 0)
     (push.subr.gloc.of cdadr 1 "./boot/macro/derived.scm" . 335885)
     (push.iloc 2 . 0)
     (push.subr.gloc.of caadr 1 "./boot/macro/derived.scm" . 335885)
     (extend . 2)
     (call
       (touch.gloc.of collect-lambda-formals)
       (call
         (touch.gloc.of annotate)
         (push.iloc.0 . 0)
         (push.iloc 3 . 0)
         (apply.gloc.of annotate "./boot/macro/derived.scm" . 335885))
       (push)
       (push.iloc 3 . 0)
       (apply.gloc.of collect-lambda-formals "./boot/macro/derived.scm" . 335885))
     (touch.gloc.of annotate)
     (push.const . define)
     (push.iloc.0 . 1)
     (push.const . |.LAMBDA|)
     (push.iloc.0 . 0)
     (push.const (|.UNSPECIFIED|))
     (push.subr.gloc.of |.cons*| 3 (|.cons*| '|.LAMBDA| |formals`1178*| '((|.UNSPECIFIED|))))
     (push.subr.gloc.of |.list| 3 "./boot/macro/derived.scm" . 335885)
     (push.iloc 3 . 0)
     (apply.gloc.of annotate "./boot/macro/derived.scm" . 335885))
   (call
     (iloc.0 . 0)
     (if.false.ret)
     (push.iloc 2 . 0)
     (subr.gloc.of caadr 1 "./boot/macro/derived.scm" . 335885)
     (if.not.symbol?.ret.const . #f)
     (cddr.iloc (2 . 0) "./boot/macro/derived.scm" . 335885)
     (ret.pair? "./boot/macro/derived.scm" . 335885))
   (if.true
     (push.cddr.iloc (2 . 0) "./boot/macro/derived.scm" . 335885)
     (push.iloc 2 . 0)
     (push.subr.gloc.of cdadr 1 "./boot/macro/derived.scm" . 335885)
     (push.iloc 2 . 0)
     (push.subr.gloc.of caadr 1 "./boot/macro/derived.scm" . 335885)
     (extend . 3)
     (call
       (touch.gloc.of collect-lambda-formals)
       (call
         (touch.gloc.of annotate)
         (push.iloc.0 . 1)
         (push.iloc 3 . 0)
         (apply.gloc.of annotate "./boot/macro/derived.scm" . 335885))
       (push)
       (push.iloc 3 . 0)
       (apply.gloc.of collect-lambda-formals "./boot/macro/derived.scm" . 335885))
     (touch.gloc.of annotate)
     (push.const . define)
     (push.iloc.0 . 2)
     (push.const . |.LAMBDA|)
     (push.iloc.0 . 1)
     (push.iloc.0 . 0)
     (push.subr.gloc.of |.cons*| 3 (|.cons*| '|.LAMBDA| |formals`1180*| |body`1180*|))
     (push.subr.gloc.of |.list| 3 "./boot/macro/derived.scm" . 335885)
     (push.iloc 3 . 0)
     (apply.gloc.of annotate "./boot/macro/derived.scm" . 335885))
   (iloc.0 . 0)
   (if.true
     (push.car.iloc (2 . 0) "./boot/macro/derived.scm" . 335885)
     (push.const . "invalid syntax")
     (push.iloc 2 . 0)
     (push.iloc 2 . 0)
     (push.subr.gloc.of caadr 1 "./boot/macro/derived.scm" . 335885)
     (apply.gloc.of syntax-violation "./boot/macro/derived.scm" . 335885))
   (push.iloc 2 . 0)
   (push.subr.gloc.of length 1 "./boot/macro/derived.scm" . 335885)
   (push.const . 1)
   (push.subr.gloc.of - 2 "./boot/macro/derived.scm" . 335885)
   (extend . 1)
   (push.iloc.0 . 0)
   (const . 0)
   (if.eq?
     (push.car.iloc (3 . 0) "./boot/macro/derived.scm" . 335885)
     (push.const . "expected 1 or 2, but no clause given")
     (push.iloc 3 . 0)
     (apply.gloc.of syntax-violation "./boot/macro/derived.scm" . 335885))
   (push.iloc.0 . 0)
   (push.const 1 2)
   (subr.gloc.of |.memq| 2 "./boot/macro/derived.scm" . 335885)
   (if.true
     (push.car.iloc (3 . 0) "./boot/macro/derived.scm" . 335885)
     (push.const . "expected symbol for first clause")
     (push.iloc 3 . 0)
     (apply.gloc.of syntax-violation "./boot/macro/derived.scm" . 335885))
   (push.car.iloc (3 . 0) "./boot/macro/derived.scm" . 335885)
   (push.const . "expected 1 or 2, but ~a clauses given")
   (push.iloc.0 . 0)
   (push.subr.gloc.of format 2 "./boot/macro/derived.scm" . 335885)
   (push.iloc 3 . 0)
   (apply.gloc.of syntax-violation "./boot/macro/derived.scm" . 335885))
 (set.gloc.of desugar-define)
 (ret.const.unspec))
((close
   (2 0 . expand-identifier-syntax)
   (extend.enclose+
     (1 0 . set!?)
     (touch.gloc.of denote-set!?)
     (push.iloc 2 . 1)
     (push.iloc.0 . 0)
     (apply.gloc.of denote-set!? "./boot/macro/derived.scm" . 343072))
   (call
     (iloc.1 . 0)
     (if.not.pair?.ret.const . #f)
     (cdr.iloc (1 . 0) "./boot/macro/derived.scm" . 345093)
     (ret.pair? "./boot/macro/derived.scm" . 345093))
   (push)
   (extend . 1)
   (call
     (iloc.0 . 0)
     (if.false.ret)
     (cddr.iloc (2 . 0) "./boot/macro/derived.scm" . 345093)
     (ret.null? "./boot/macro/derived.scm" . 345093))
   (if.true
     (touch.gloc.of expand-form)
     (call
       (touch.gloc.of annotate)
       (push.const . |.LAMBDA|)
       (push.const x)
       (push.const . |.SYNTAX-CASE|)
       (push.const . x)
       (push.const)
       (push.const . id)
       (push.const |.IDENTIFIER?| (|.SYNTAX| id))
       (push.const . |.SYNTAX|)
       (push.cadr.iloc (2 . 0) "./boot/macro/derived.scm" . 345093)
       (push.subr.gloc.of |.list| 2 "./boot/macro/derived.scm" . 345093)
       (push.subr.gloc.of |.list| 3 "./boot/macro/derived.scm" . 345093)
       (push.const _ x ...)
       (push.const . |.SYNTAX|)
       (push.cadr.iloc (2 . 0) "./boot/macro/derived.scm" . 345093)
       (const x ...)
       (push.cons)
       (push.subr.gloc.of |.list| 2 "./boot/macro/derived.scm" . 345093)
       (push.subr.gloc.of |.list| 2 "./boot/macro/derived.scm" . 345093)
       (push.subr.gloc.of |.list| 5 "./boot/macro/derived.scm" . 345093)
       (push.subr.gloc.of |.list| 3 "./boot/macro/derived.scm" . 345093)
       (push.iloc 2 . 0)
       (apply.gloc.of annotate "./boot/macro/derived.scm" . 345093))
     (push)
     (push.iloc 2 . 1)
     (apply.gloc.of expand-form "./boot/macro/derived.scm" . 345093))
   (iloc.0 . 0)
   (if.false.ret)
   (cadr.iloc (2 . 0) "./boot/macro/derived.scm" . 345093)
   (if.not.pair?.ret.const . #f)
   (push.iloc 2 . 0)
   (subr.gloc.of cdadr 1 "./boot/macro/derived.scm" . 345093)
   (if.not.pair?.ret.const . #f)
   (cddr.iloc (2 . 0) "./boot/macro/derived.scm" . 345093)
   (if.not.pair?.ret.const . #f)
   (push.iloc 2 . 0)
   (subr.gloc.of caddr 1 "./boot/macro/derived.scm" . 345093)
   (if.not.pair?.ret.const . #f)
   (push.iloc 2 . 0)
   (subr.gloc.of caaddr 1 "./boot/macro/derived.scm" . 345093)
   (if.not.pair?.ret.const . #f)
   (push.iloc 2 . 0)
   (push.subr.gloc.of caaddr 1 "./boot/macro/derived.scm" . 345093)
   (subr.gloc.of cdr 1 "./boot/macro/derived.scm" . 345093)
   (if.not.pair?.ret.const . #f)
   (push.iloc 2 . 0)
   (push.subr.gloc.of caaddr 1 "./boot/macro/derived.scm" . 345093)
   (subr.gloc.of cddr 1 "./boot/macro/derived.scm" . 345093)
   (if.not.pair?.ret.const . #f)
   (push.iloc 2 . 0)
   (subr.gloc.of cdaddr 1 "./boot/macro/derived.scm" . 345093)
   (if.not.pair?.ret.const . #f)
   (push.iloc 2 . 0)
   (subr.gloc.of cddadr 1 "./boot/macro/derived.scm" . 345093)
   (if.not.null?.ret.const . #f)
   (push.iloc 2 . 0)
   (push.subr.gloc.of caaddr 1 "./boot/macro/derived.scm" . 345093)
   (subr.gloc.of cdddr 1 "./boot/macro/derived.scm" . 345093)
   (if.not.null?.ret.const . #f)
   (push.iloc 2 . 0)
   (push.subr.gloc.of cdaddr 1 "./boot/macro/derived.scm" . 345093)
   (subr.gloc.of cdr 1 "./boot/macro/derived.scm" . 345093)
   (if.not.null?.ret.const . #f)
   (push.iloc 2 . 0)
   (subr.gloc.of cdddr 1 "./boot/macro/derived.scm" . 345093)
   (if.not.null?.ret.const . #f)
   (call
     (push.iloc 2 . 0)
     (push.subr.gloc.of caaddr 1 "./boot/macro/derived.scm" . 345093)
     (push.subr.gloc.of car 1 "./boot/macro/derived.scm" . 345093)
     (apply.iloc+ (1 . 0) "./boot/macro/derived.scm" . 345093))
   (if.false.ret)
   (push.iloc 2 . 0)
   (push.subr.gloc.of cadadr 1 "./boot/macro/derived.scm" . 345093)
   (push.iloc 2 . 0)
   (push.subr.gloc.of caadr 1 "./boot/macro/derived.scm" . 345093)
   (extend . 2)
   (touch.gloc.of expand-form)
   (call
     (touch.gloc.of annotate)
     (push.const . |.MAKE-VARIABLE-TRANSFORMER|)
     (push.const . |.LAMBDA|)
     (push.const x)
     (push.const . |.SYNTAX-CASE|)
     (push.const . x)
     (push.const set!)
     (push.const . set!)
     (push.iloc 3 . 0)
     (push.subr.gloc.of caaddr 1 "./boot/macro/derived.scm" . 345093)
     (push.subr.gloc.of cadr 1 "./boot/macro/derived.scm" . 345093)
     (push.iloc 3 . 0)
     (push.subr.gloc.of caaddr 1 "./boot/macro/derived.scm" . 345093)
     (push.subr.gloc.of caddr 1 "./boot/macro/derived.scm" . 345093)
     (push.subr.gloc.of |.list| 3 "./boot/macro/derived.scm" . 345093)
     (push.const . |.SYNTAX|)
     (push.iloc 3 . 0)
     (push.subr.gloc.of cdaddr 1 "./boot/macro/derived.scm" . 345093)
     (push.subr.gloc.of car 1 "./boot/macro/derived.scm" . 345093)
     (push.subr.gloc.of |.list| 2 "./boot/macro/derived.scm" . 345093)
     (push.subr.gloc.of |.list| 2 "./boot/macro/derived.scm" . 345093)
     (push.iloc.0 . 1)
     (const x ...)
     (push.cons)
     (push.const . |.SYNTAX|)
     (push.iloc.0 . 0)
     (const x ...)
     (push.cons)
     (push.subr.gloc.of |.list| 2 "./boot/macro/derived.scm" . 345093)
     (push.subr.gloc.of |.list| 2 "./boot/macro/derived.scm" . 345093)
     (push.iloc.0 . 1)
     (push.const |.IDENTIFIER?| (|.SYNTAX| id))
     (push.const . |.SYNTAX|)
     (push.iloc.0 . 0)
     (push.subr.gloc.of |.list| 2 "./boot/macro/derived.scm" . 345093)
     (push.subr.gloc.of |.list| 3 "./boot/macro/derived.scm" . 345093)
     (push.subr.gloc.of |.list| 6 "./boot/macro/derived.scm" . 345093)
     (push.subr.gloc.of |.list| 3 "./boot/macro/derived.scm" . 345093)
     (push.subr.gloc.of |.list| 2 "./boot/macro/derived.scm" . 345093)
     (push.iloc 3 . 0)
     (apply.gloc.of annotate "./boot/macro/derived.scm" . 345093))
   (push)
   (push.iloc 3 . 1)
   (apply.gloc.of expand-form "./boot/macro/derived.scm" . 345093))
 (set.gloc.of expand-identifier-syntax)
 (ret.const.unspec))
((close
   (2 0 . expand-assert)
   (call
     (iloc.0 . 0)
     (if.not.pair?.ret.const . #f)
     (cdr.iloc (0 . 0) "./boot/macro/derived.scm" . 369669)
     (if.not.pair?.ret.const . #f)
     (cddr.iloc (0 . 0) "./boot/macro/derived.scm" . 369669)
     (ret.null? "./boot/macro/derived.scm" . 369669))
   (if.true
     (push.cadr.iloc (0 . 0) "./boot/macro/derived.scm" . 369669)
     (extend . 1)
     (touch.gloc.of expand-form)
     (call
       (touch.gloc.of annotate)
       (push.const . |.OR|)
       (push.iloc.0 . 0)
       (push.const . assertion-violation)
       (push.const . quote)
       (call
         (touch.gloc.of current-top-level-exterior)
         (apply.gloc.of current-top-level-exterior "./boot/macro/derived.scm" . 369669))
       (push)
       (push.subr.gloc.of |.list| 2 "./boot/macro/derived.scm" . 369669)
       (push.const . "assertion failed in expression ~u")
       (push.iloc.0 . 0)
       (push.subr.gloc.of format 2 "./boot/macro/derived.scm" . 369669)
       (push.subr.gloc.of |.list| 3 "./boot/macro/derived.scm" . 369669)
       (push.subr.gloc.of |.list| 3 "./boot/macro/derived.scm" . 369669)
       (push.iloc.1 . 0)
       (apply.gloc.of annotate "./boot/macro/derived.scm" . 369669))
     (push)
     (push.iloc.1 . 1)
     (apply.gloc.of expand-form "./boot/macro/derived.scm" . 369669))
   (push.car.iloc (0 . 0) "./boot/macro/derived.scm" . 369669)
   (push.const . "expected single expression")
   (push.iloc.0 . 0)
   (apply.gloc.of syntax-violation "./boot/macro/derived.scm" . 369669))
 (set.gloc.of expand-assert)
 (ret.const.unspec))

;
((close
   (2 0 . expand-quasiquote)
   (extend.unbound . 12)
   (push.close+
     (1 0 . unquote?)
     (touch.gloc.of denote-unquote?)
     (push.iloc 2 . 1)
     (push.iloc.0 . 0)
     (apply.gloc.of denote-unquote? "./boot/macro/quasi.scm" . 8228))
   (push.close+
     (1 0 . quasiquote?)
     (touch.gloc.of denote-quasiquote?)
     (push.iloc 2 . 1)
     (push.iloc.0 . 0)
     (apply.gloc.of denote-quasiquote? "./boot/macro/quasi.scm" . 9255))
   (push.close+
     (1 0 . unquote-splicing?)
     (touch.gloc.of denote-unquote-splicing?)
     (push.iloc 2 . 1)
     (push.iloc.0 . 0)
     (apply.gloc.of denote-unquote-splicing? "./boot/macro/quasi.scm" . 10285))
   (push.close+
     (1 0 . quoted?)
     (iloc.0 . 0)
     (if.not.pair?.ret.const . #f)
     (cdr.iloc (0 . 0) "./boot/macro/quasi.scm" . 15381)
     (if.not.pair?.ret.const . #f)
     (cddr.iloc (0 . 0) "./boot/macro/quasi.scm" . 16405)
     (if.not.null?.ret.const . #f)
     (touch.gloc.of denote-quote?)
     (push.iloc 2 . 1)
     (push.car.iloc (0 . 0) "./boot/macro/quasi.scm" . 17441)
     (apply.gloc.of denote-quote? "./boot/macro/quasi.scm" . 17422))
   (push.close+
     (1 0 . constant?)
     (push.iloc.0 . 0)
     (subr.gloc.of boolean? 1 "./boot/macro/quasi.scm" . 21517)
     (if.true.ret)
     (push.iloc.0 . 0)
     (subr.gloc.of number? 1 "./boot/macro/quasi.scm" . 22541)
     (if.true.ret)
     (push.iloc.0 . 0)
     (subr.gloc.of char? 1 "./boot/macro/quasi.scm" . 23565)
     (if.true.ret)
     (push.iloc.0 . 0)
     (subr.gloc.of string? 1 "./boot/macro/quasi.scm" . 24589)
     (if.true.ret)
     (push.iloc.0 . 0)
     (subr.gloc.of bytevector? 1 "./boot/macro/quasi.scm" . 25613)
     (if.true.ret)
     (push.iloc.0 . 0)
     (apply.iloc+ (1 . 3) "./boot/macro/quasi.scm" . 26637))
   (push.close+
     (1 0 . constant-value)
     (call (push.iloc.0 . 0) (apply.iloc+ (1 . 3) "./boot/macro/quasi.scm" . 30736))
     (if.true (push.iloc.0 . 0) (ret.subr.gloc.of cadr "./boot/macro/quasi.scm" . 30748))
     (ret.iloc 0 . 0))
   (push.close+
     (1 0 . null-constant?)
     (call (push.iloc.0 . 0) (apply.iloc+ (1 . 3) "./boot/macro/quasi.scm" . 35854))
     (if.false.ret)
     (cadr.iloc (0 . 0) "./boot/macro/quasi.scm" . 36885)
     (ret.null? "./boot/macro/quasi.scm" . 36878))
   (push.close+
     (2 0 . emit-append)
     (iloc.0 . 0)
     (if.null? (ret.iloc 0 . 1))
     (call (push.iloc.0 . 1) (apply.iloc+ (1 . 6) "./boot/macro/quasi.scm" . 42000))
     (if.true
       (push.iloc.0 . 0)
       (push.subr.gloc.of length 1 "./boot/macro/quasi.scm" . 43031)
       (push.const . 1)
       (subr.gloc.of = 2 "./boot/macro/quasi.scm" . 43028)
       (if.true (push.iloc.0 . 0) (ret.subr.gloc.of car "./boot/macro/quasi.scm" . 43048))
       (push.const . |.APPEND|)
       (iloc.0 . 0)
       (ret.cons "./boot/macro/quasi.scm" . 43024))
     (push.const . |.APPEND|)
     (push.iloc.0 . 0)
     (push.iloc.0 . 1)
     (push.subr.gloc.of |.list| 1 (|.list| |tail`1228*|))
     (subr.gloc.of |.append| 2 (|.append| |body`1228*| (|.list| |tail`1228*|)))
     (ret.cons "./boot/macro/quasi.scm" . 44047))
   (push.close+
     (2 0 . emit-cons*)
     (push.iloc.0 . 0)
     (push.subr.gloc.of length 1 "./boot/macro/quasi.scm" . 49168)
     (push.const . 1)
     (subr.gloc.of = 2 "./boot/macro/quasi.scm" . 49165)
     (if.true
       (push.car.iloc (0 . 0) "./boot/macro/quasi.scm" . 50200)
       (push.iloc.0 . 1)
       (apply.iloc+ (1 . 9) "./boot/macro/quasi.scm" . 50189))
     (iloc.0 . 0)
     (if.null? (ret.iloc 0 . 1))
     (call (push.iloc.0 . 1) (apply.iloc+ (1 . 6) "./boot/macro/quasi.scm" . 52244))
     (if.true (push.const . |.LIST|) (iloc.0 . 0) (ret.cons "./boot/macro/quasi.scm" . 52243))
     (call
       (iloc.0 . 1)
       (if.not.pair?.ret.const . #f)
       (push.car.iloc (0 . 1) "./boot/macro/quasi.scm" . 54315)
       (const . |.LIST|)
       (ret.eq? "./boot/macro/quasi.scm" . 54310))
     (if.true
       (push.const . |.LIST|)
       (push.iloc.0 . 0)
       (push.cdr.iloc (0 . 1) "./boot/macro/quasi.scm" . 55333)
       (subr.gloc.of |.append| 2 "./boot/macro/quasi.scm" . 55333)
       (ret.cons "./boot/macro/quasi.scm" . 54291))
     (call
       (iloc.0 . 1)
       (if.not.pair?.ret.const . #f)
       (push.car.iloc (0 . 1) "./boot/macro/quasi.scm" . 56367)
       (const . |.CONS|)
       (if.eq?.ret.const . #t)
       (push.car.iloc (0 . 1) "./boot/macro/quasi.scm" . 56391)
       (const . |.CONS*|)
       (ret.eq? "./boot/macro/quasi.scm" . 56386))
     (if.true
       (push.const . |.CONS*|)
       (push.iloc.0 . 0)
       (push.cdr.iloc (0 . 1) "./boot/macro/quasi.scm" . 57382)
       (subr.gloc.of |.append| 2 "./boot/macro/quasi.scm" . 57382)
       (ret.cons "./boot/macro/quasi.scm" . 56339))
     (push.const . |.CONS*|)
     (push.iloc.0 . 0)
     (push.iloc.0 . 1)
     (push.subr.gloc.of |.list| 1 (|.list| |tail`1230*|))
     (subr.gloc.of |.append| 2 (|.append| |body`1230*| (|.list| |tail`1230*|)))
     (ret.cons "./boot/macro/quasi.scm" . 58387))
   (push.close+
     (2 0 . emit-cons)
     (call
       (call (push.iloc.0 . 0) (apply.iloc+ (1 . 4) "./boot/macro/quasi.scm" . 63506))
       (if.false.ret)
       (push.iloc.0 . 1)
       (apply.iloc+ (1 . 4) "./boot/macro/quasi.scm" . 63523))
     (if.true
       (push.const . |.QUOTE|)
       (call (push.iloc.0 . 0) (apply.iloc+ (1 . 5) "./boot/macro/quasi.scm" . 64545))
       (push)
       (call (push.iloc.0 . 1) (apply.iloc+ (1 . 5) "./boot/macro/quasi.scm" . 64567))
       (push.cons)
       (ret.subr.gloc.of list "./boot/macro/quasi.scm" . 64525))
     (call (push.iloc.0 . 1) (apply.iloc+ (1 . 6) "./boot/macro/quasi.scm" . 65556))
     (if.true
       (push.const . |.LIST|)
       (push.iloc.0 . 0)
       (ret.subr.gloc.of |.list| "./boot/macro/quasi.scm" . 65555))
     (call
       (iloc.0 . 1)
       (if.not.pair?.ret.const . #f)
       (push.car.iloc (0 . 1) "./boot/macro/quasi.scm" . 67627)
       (const . |.LIST|)
       (ret.eq? "./boot/macro/quasi.scm" . 67622))
     (if.true
       (push.const . |.LIST|)
       (push.iloc.0 . 0)
       (push.cdr.iloc (0 . 1) "./boot/macro/quasi.scm" . 68644)
       (ret.subr.gloc.of |.cons*| "./boot/macro/quasi.scm" . 67603))
     (call
       (iloc.0 . 1)
       (if.not.pair?.ret.const . #f)
       (push.car.iloc (0 . 1) "./boot/macro/quasi.scm" . 69679)
       (const . |.CONS|)
       (if.eq?.ret.const . #t)
       (push.car.iloc (0 . 1) "./boot/macro/quasi.scm" . 69703)
       (const . |.CONS*|)
       (ret.eq? "./boot/macro/quasi.scm" . 69698))
     (if.true
       (push.const . |.CONS*|)
       (push.iloc.0 . 0)
       (push.cdr.iloc (0 . 1) "./boot/macro/quasi.scm" . 70693)
       (ret.subr.gloc.of |.cons*| "./boot/macro/quasi.scm" . 69651))
     (push.const . |.CONS|)
     (push.iloc.0 . 0)
     (push.iloc.0 . 1)
     (ret.subr.gloc.of |.list| "./boot/macro/quasi.scm" . 71699))
   (push.close
     (2 0 . expand-vector)
     (call
       (push.iloc.0 . 0)
       (push.subr.gloc.of vector->list 1 "./boot/macro/quasi.scm" . 76828)
       (push.iloc.0 . 1)
       (apply.iloc (1 . 11) "./boot/macro/quasi.scm" . 76820))
     (push)
     (extend . 1)
     (call (push.iloc.0 . 0) (apply.iloc+ (2 . 6) "./boot/macro/quasi.scm" . 77842))
     (if.true.ret.const |.QUOTE| #())
     (call (push.iloc.0 . 0) (apply.iloc+ (2 . 4) "./boot/macro/quasi.scm" . 79890))
     (if.true
       (push.const . |.QUOTE|)
       (call (push.iloc.0 . 0) (apply.iloc+ (2 . 5) "./boot/macro/quasi.scm" . 80938))
       (push)
       (push.subr.gloc.of list->vector 1 "./boot/macro/quasi.scm" . 80924)
       (ret.subr.gloc.of |.list| "./boot/macro/quasi.scm" . 79889))
     (call
       (iloc.0 . 0)
       (if.not.pair?.ret.const . #f)
       (push.car.iloc (0 . 0) "./boot/macro/quasi.scm" . 81960)
       (const . |.LIST|)
       (ret.eq? "./boot/macro/quasi.scm" . 81955))
     (if.true
       (push.const . |.VECTOR|)
       (cdr.iloc (0 . 0) "./boot/macro/quasi.scm" . 82974)
       (ret.cons "./boot/macro/quasi.scm" . 81937))
     (push.const . |.LIST->VECTOR|)
     (push.iloc.0 . 0)
     (ret.subr.gloc.of |.list| "./boot/macro/quasi.scm" . 83985))
   (push.close
     (2 0 . expand)
     (iloc.0 . 0)
     (if.pair?
       (=n.iloc (0 . 1) 0 "./boot/macro/quasi.scm" . 90132)
       (if.true
         (call
           (iloc.0 . 0)
           (if.not.pair?.ret.const . #f)
           (car.iloc (0 . 0) (car |expr`1238*|))
           (if.not.pair?.ret.const . #f)
           (push.iloc.0 . 0)
           (push.subr.gloc.of cdar 1 (cdar |expr`1238*|))
           (ret.subr.gloc.of list? (list? (cdar |expr`1238*|))))
         (push)
         (extend . 1)
         (call
           (iloc.0 . 0)
           (if.false.ret)
           (push.iloc.1 . 0)
           (push.subr.gloc.of caar 1 (caar |expr`1238*|))
           (apply.iloc+ (2 . 0) (|unquote?`1213*| (caar |expr`1238*|))))
         (if.true
           (push.iloc.1 . 0)
           (push.subr.gloc.of cdar 1 (cdar |expr`1238*|))
           (call
             (push.cdr.iloc (1 . 0) (cdr |expr`1238*|))
             (push.const . 0)
             (apply.iloc (2 . 11) (|expand`1213*| (cdr |expr`1238*|) 0)))
           (push)
           (apply.iloc+
             (2 . 8)
             (|emit-cons*`1213*| (cdar |expr`1238*|) (|expand`1213*| (cdr |expr`1238*|) 0))))
         (call
           (iloc.0 . 0)
           (if.false.ret)
           (push.iloc.1 . 0)
           (push.subr.gloc.of caar 1 (caar |expr`1238*|))
           (apply.iloc+ (2 . 2) (|unquote-splicing?`1213*| (caar |expr`1238*|))))
         (if.true
           (push.iloc.1 . 0)
           (push.subr.gloc.of cdar 1 (cdar |expr`1238*|))
           (call
             (push.cdr.iloc (1 . 0) (cdr |expr`1238*|))
             (push.const . 0)
             (apply.iloc (2 . 11) (|expand`1213*| (cdr |expr`1238*|) 0)))
           (push)
           (apply.iloc+
             (2 . 7)
             (|emit-append`1213*| (cdar |expr`1238*|) (|expand`1213*| (cdr |expr`1238*|) 0))))
         (call
           (iloc.1 . 0)
           (if.not.pair?.ret.const . #f)
           (push.cdr.iloc (1 . 0) (cdr |expr`1238*|))
           (subr.gloc.of list? 1 (list? (cdr |expr`1238*|)))
           (if.false.ret)
           (push.car.iloc (1 . 0) (car |expr`1238*|))
           (apply.iloc+ (2 . 1) (|quasiquote?`1213*| (car |expr`1238*|))))
         (if.true
           (call
             (push.car.iloc (1 . 0) (car |expr`1238*|))
             (push.const . 1)
             (apply.iloc (2 . 11) (|expand`1213*| (car |expr`1238*|) 1)))
           (push)
           (call
             (push.cdr.iloc (1 . 0) (cdr |expr`1238*|))
             (push.const . 1)
             (apply.iloc (2 . 11) (|expand`1213*| (cdr |expr`1238*|) 1)))
           (push)
           (apply.iloc+
             (2 . 9)
             (|emit-cons`1213*|
               (|expand`1213*| (car |expr`1238*|) 1)
               (|expand`1213*| (cdr |expr`1238*|) 1))))
         (call
           (iloc.1 . 0)
           (if.not.pair?.ret.const . #f)
           (cdr.iloc (1 . 0) (cdr |expr`1238*|))
           (if.not.pair?.ret.const . #f)
           (cddr.iloc (1 . 0) (cddr |expr`1238*|))
           (if.not.null?.ret.const . #f)
           (push.car.iloc (1 . 0) (car |expr`1238*|))
           (apply.iloc+ (2 . 0) (|unquote?`1213*| (car |expr`1238*|))))
         (if.true (push.iloc.1 . 0) (ret.subr.gloc.of cadr (cadr |expr`1238*|)))
         (call
           (iloc.1 . 0)
           (if.not.pair?.ret.const . #f)
           (push.car.iloc (1 . 0) (car |expr`1238*|))
           (apply.iloc+ (2 . 0) (|unquote?`1213*| (car |expr`1238*|))))
         (if.true
           (push.const . quasiquote)
           (push.const . "unquote appear in bad context")
           (push.iloc 3 . 0)
           (push.iloc.1 . 0)
           (apply.gloc.of
             syntax-violation
             (syntax-violation
               'quasiquote
               "unquote appear in bad context"
               |form`1212*|
               |expr`1238*|)))
         (call
           (iloc.1 . 0)
           (if.not.pair?.ret.const . #f)
           (push.car.iloc (1 . 0) (car |expr`1238*|))
           (apply.iloc+ (2 . 1) (|quasiquote?`1213*| (car |expr`1238*|))))
         (if.true
           (push.const . quasiquote)
           (push.const . "nested quasiquote appear in bad context")
           (push.iloc 3 . 0)
           (push.iloc.1 . 0)
           (apply.gloc.of
             syntax-violation
             (syntax-violation
               'quasiquote
               "nested quasiquote appear in bad context"
               |form`1212*|
               |expr`1238*|)))
         (call
           (iloc.1 . 0)
           (if.not.pair?.ret.const . #f)
           (push.car.iloc (1 . 0) (car |expr`1238*|))
           (apply.iloc+ (2 . 2) (|unquote-splicing?`1213*| (car |expr`1238*|))))
         (if.true
           (push.const . quasiquote)
           (push.const . "unquote-splicing appear in bad context")
           (push.iloc 3 . 0)
           (push.iloc.1 . 0)
           (apply.gloc.of
             syntax-violation
             (syntax-violation
               'quasiquote
               "unquote-splicing appear in bad context"
               |form`1212*|
               |expr`1238*|)))
         (call
           (push.car.iloc (1 . 0) (car |expr`1238*|))
           (push.const . 0)
           (apply.iloc (2 . 11) (|expand`1213*| (car |expr`1238*|) 0)))
         (push)
         (call
           (push.cdr.iloc (1 . 0) (cdr |expr`1238*|))
           (push.const . 0)
           (apply.iloc (2 . 11) (|expand`1213*| (cdr |expr`1238*|) 0)))
         (push)
         (apply.iloc+
           (2 . 9)
           (|emit-cons`1213*|
             (|expand`1213*| (car |expr`1238*|) 0)
             (|expand`1213*| (cdr |expr`1238*|) 0))))
       (push.car.iloc (0 . 0) "./boot/macro/quasi.scm" . 108575)
       (extend . 1)
       (call
         (call
           (touch.gloc.of denote-unquote?)
           (push.iloc 3 . 1)
           (push.iloc.0 . 0)
           (apply.gloc.of denote-unquote? "./boot/macro/quasi.scm" . 109601))
         (if.true.ret)
         (touch.gloc.of denote-unquote-splicing?)
         (push.iloc 3 . 1)
         (push.iloc.0 . 0)
         (apply.gloc.of denote-unquote-splicing? "./boot/macro/quasi.scm" . 109627))
       (if.true
         (push.const . |.QUOTE|)
         (push.iloc.0 . 0)
         (push.subr.gloc.of |.list| 2 "./boot/macro/quasi.scm" . 110621)
         (call
           (push.cdr.iloc (1 . 0) "./boot/macro/quasi.scm" . 111664)
           (push.n+.iloc (1 . 1) -1 "./boot/macro/quasi.scm" . 111675)
           (apply.iloc (2 . 11) "./boot/macro/quasi.scm" . 111656))
         (push)
         (apply.iloc+ (2 . 9) "./boot/macro/quasi.scm" . 110621))
       (call
         (touch.gloc.of denote-quasiquote?)
         (push.iloc 3 . 1)
         (push.iloc.0 . 0)
         (apply.gloc.of denote-quasiquote? "./boot/macro/quasi.scm" . 112669))
       (if.true
         (push.const . |.QUOTE|)
         (push.iloc.0 . 0)
         (push.subr.gloc.of |.list| 2 "./boot/macro/quasi.scm" . 113693)
         (call
           (push.cdr.iloc (1 . 0) "./boot/macro/quasi.scm" . 114736)
           (push.n+.iloc (1 . 1) 1 "./boot/macro/quasi.scm" . 114747)
           (apply.iloc (2 . 11) "./boot/macro/quasi.scm" . 114728))
         (push)
         (apply.iloc+ (2 . 9) "./boot/macro/quasi.scm" . 113693))
       (call
         (push.car.iloc (1 . 0) "./boot/macro/quasi.scm" . 116784)
         (push.iloc.1 . 1)
         (apply.iloc (2 . 11) "./boot/macro/quasi.scm" . 116776))
       (push)
       (call
         (push.cdr.iloc (1 . 0) "./boot/macro/quasi.scm" . 117808)
         (push.iloc.1 . 1)
         (apply.iloc (2 . 11) "./boot/macro/quasi.scm" . 117800))
       (push)
       (apply.iloc+ (2 . 9) "./boot/macro/quasi.scm" . 116765))
     (push.iloc.0 . 0)
     (subr.gloc.of vector? 1 "./boot/macro/quasi.scm" . 118800)
     (if.true
       (push.iloc.0 . 0)
       (push.iloc.0 . 1)
       (apply.iloc (1 . 10) "./boot/macro/quasi.scm" . 119824))
     (iloc.0 . 0)
     (if.symbol?
       (push.const . |.QUOTE|)
       (push.iloc.0 . 0)
       (ret.subr.gloc.of |.list| "./boot/macro/quasi.scm" . 120847))
     (iloc.0 . 0)
     (if.null?.ret.const |.QUOTE| ())
     (ret.iloc 0 . 0))
   (enclose . 12)
   (touch.gloc.of expand-form)
   (call
     (touch.gloc.of annotate)
     (call
       (push.cadr.iloc (1 . 0) "./boot/macro/quasi.scm" . 127012)
       (push.const . 0)
       (apply.iloc (0 . 11) "./boot/macro/quasi.scm" . 127004))
     (push)
     (push.iloc.1 . 0)
     (apply.gloc.of annotate "./boot/macro/quasi.scm" . 126994))
   (push)
   (push.iloc.1 . 1)
   (apply.gloc.of expand-form "./boot/macro/quasi.scm" . 126981))
 (set.gloc.of expand-quasiquote)
 (ret.const.unspec))

;
((close
   (1 0 . ellipsis-pair?)
   (iloc.0 . 0)
   (if.not.pair?.ret.const . #f)
   (cdr.iloc (0 . 0) "./boot/macro/synpat.scm" . 8209)
   (if.not.pair?.ret.const . #f)
   (push.cadr.iloc (0 . 0) "./boot/macro/synpat.scm" . 9231)
   (const . ...)
   (ret.eq? "./boot/macro/synpat.scm" . 9226))
 (set.gloc.of ellipsis-pair?)
 (ret.const.unspec))
((close
   (1 0 . ellipsis-splicing-pair?)
   (iloc.0 . 0)
   (if.not.pair?.ret.const . #f)
   (cdr.iloc (0 . 0) "./boot/macro/synpat.scm" . 14353)
   (if.not.pair?.ret.const . #f)
   (push.cadr.iloc (0 . 0) "./boot/macro/synpat.scm" . 15375)
   (const . ...)
   (if.not.eq?.ret.const . #f)
   (cddr.iloc (0 . 0) "./boot/macro/synpat.scm" . 16401)
   (if.not.pair?.ret.const . #f)
   (push.iloc.0 . 0)
   (push.subr.gloc.of caddr 1 "./boot/macro/synpat.scm" . 17423)
   (const . ...)
   (ret.eq? "./boot/macro/synpat.scm" . 17418))
 (set.gloc.of ellipsis-splicing-pair?)
 (ret.const.unspec))
((close
   (1 0 . ellipsis-quote?)
   (iloc.0 . 0)
   (if.not.pair?.ret.const . #f)
   (push.car.iloc (0 . 0) "./boot/macro/synpat.scm" . 22543)
   (const . ...)
   (if.not.eq?.ret.const . #f)
   (cdr.iloc (0 . 0) "./boot/macro/synpat.scm" . 23569)
   (if.not.pair?.ret.const . #f)
   (cddr.iloc (0 . 0) "./boot/macro/synpat.scm" . 24593)
   (ret.null? "./boot/macro/synpat.scm" . 24586))
 (set.gloc.of ellipsis-quote?)
 (ret.const.unspec))
((close
   (2 0 . loop)
   (iloc.0 . 0)
   (if.pair?
     (touch.gloc.of |loop`1269*|)
     (push.cdr.iloc (0 . 0) "./boot/macro/synpat.scm" . 30740)
     (call
       (touch.gloc.of |loop`1269*|)
       (push.car.iloc (0 . 0) "./boot/macro/synpat.scm" . 31770)
       (push.iloc.0 . 1)
       (apply.gloc.of |loop`1269*| "./boot/macro/synpat.scm" . 31764))
     (push)
     (apply.gloc.of |loop`1269*| "./boot/macro/synpat.scm" . 30734))
   (push.iloc.0 . 0)
   (const . ...)
   (if.eq? (ret.iloc 0 . 1))
   (iloc.0 . 0)
   (if.symbol?
     (push.iloc.0 . 0)
     (push.iloc.0 . 1)
     (subr.gloc.of memq 2 "./boot/macro/synpat.scm" . 34834)
     (if.true (ret.iloc 0 . 1))
     (push.iloc.0 . 0)
     (iloc.0 . 1)
     (ret.cons "./boot/macro/synpat.scm" . 34853))
   (push.iloc.0 . 0)
   (subr.gloc.of vector? 1 "./boot/macro/synpat.scm" . 35854)
   (if.true
     (touch.gloc.of |loop`1269*|)
     (push.iloc.0 . 0)
     (push.subr.gloc.of vector->list 1 "./boot/macro/synpat.scm" . 36884)
     (push.iloc.0 . 1)
     (apply.gloc.of |loop`1269*| "./boot/macro/synpat.scm" . 36878))
   (ret.iloc 0 . 1))
 (set.gloc.of |loop`1269*|)
 (close
   (1 0 . collect-unique-ids)
   (touch.gloc.of |loop`1269*|)
   (push.iloc.0 . 0)
   (push.const)
   (apply.gloc.of |loop`1269*| "./boot/macro/synpat.scm" . 29703))
 (set.gloc.of collect-unique-ids)
 (ret.const.unspec))
((close
   (4 0 . collect-vars-ranks)
   (push.iloc.0 . 0)
   (const . _)
   (if.eq? (ret.iloc 0 . 3))
   (iloc.0 . 0)
   (if.symbol?
     (push.iloc.0 . 0)
     (push.iloc.0 . 1)
     (subr.gloc.of memq 2 "./boot/macro/synpat.scm" . 44048)
     (if.true (ret.iloc 0 . 3))
     (touch.gloc.of acons)
     (push.iloc.0 . 0)
     (push.iloc.0 . 2)
     (push.iloc.0 . 3)
     (apply.gloc.of acons "./boot/macro/synpat.scm" . 46096))
   (call
     (touch.gloc.of ellipsis-pair?)
     (push.iloc.0 . 0)
     (apply.gloc.of ellipsis-pair? "./boot/macro/synpat.scm" . 47116))
   (if.true
     (touch.gloc.of collect-vars-ranks)
     (push.cddr.iloc (0 . 0) "./boot/macro/synpat.scm" . 48160)
     (push.iloc.0 . 1)
     (push.iloc.0 . 2)
     (call
       (car.iloc (0 . 0) "./boot/macro/synpat.scm" . 49197)
       (if.symbol?
         (touch.gloc.of acons)
         (push.car.iloc (0 . 0) "./boot/macro/synpat.scm" . 50219)
         (push.n+.iloc (0 . 2) 1 "./boot/macro/synpat.scm" . 50229)
         (push.iloc.0 . 3)
         (apply.gloc.of acons "./boot/macro/synpat.scm" . 50212))
       (touch.gloc.of collect-vars-ranks)
       (push.car.iloc (0 . 0) "./boot/macro/synpat.scm" . 51256)
       (push.iloc.0 . 1)
       (push.n+.iloc (0 . 2) 1 "./boot/macro/synpat.scm" . 51272)
       (push.iloc.0 . 3)
       (apply.gloc.of collect-vars-ranks "./boot/macro/synpat.scm" . 51236))
     (push)
     (apply.gloc.of collect-vars-ranks "./boot/macro/synpat.scm" . 48140))
   (iloc.0 . 0)
   (if.pair?
     (touch.gloc.of collect-vars-ranks)
     (push.cdr.iloc (0 . 0) "./boot/macro/synpat.scm" . 53280)
     (push.iloc.0 . 1)
     (push.iloc.0 . 2)
     (call
       (touch.gloc.of collect-vars-ranks)
       (push.car.iloc (0 . 0) "./boot/macro/synpat.scm" . 54324)
       (push.iloc.0 . 1)
       (push.iloc.0 . 2)
       (push.iloc.0 . 3)
       (apply.gloc.of collect-vars-ranks "./boot/macro/synpat.scm" . 54304))
     (push)
     (apply.gloc.of collect-vars-ranks "./boot/macro/synpat.scm" . 53260))
   (push.iloc.0 . 0)
   (subr.gloc.of vector? 1 "./boot/macro/synpat.scm" . 55308)
   (if.true
     (touch.gloc.of collect-vars-ranks)
     (push.iloc.0 . 0)
     (push.subr.gloc.of vector->list 1 "./boot/macro/synpat.scm" . 56352)
     (push.iloc.0 . 1)
     (push.iloc.0 . 2)
     (push.iloc.0 . 3)
     (apply.gloc.of collect-vars-ranks "./boot/macro/synpat.scm" . 56332))
   (ret.iloc 0 . 3))
 (set.gloc.of collect-vars-ranks)
 (ret.const.unspec))
((close
   (2 0 . check-duplicate-variable)
   (extend.enclose+
     (2 0 . loop)
     (iloc.0 . 0)
     (if.pair?
       (push.cdr.iloc (0 . 0) "./boot/macro/synpat.scm" . 66584)
       (call
         (push.car.iloc (0 . 0) "./boot/macro/synpat.scm" . 67614)
         (push.iloc.0 . 1)
         (apply.iloc+ (1 . 0) "./boot/macro/synpat.scm" . 67608))
       (push)
       (apply.iloc+ (1 . 0) "./boot/macro/synpat.scm" . 66578))
     (push.iloc.0 . 0)
     (const . ...)
     (if.eq? (ret.iloc 0 . 1))
     (push.iloc.0 . 0)
     (const . _)
     (if.eq? (ret.iloc 0 . 1))
     (iloc.0 . 0)
     (if.symbol?
       (push.iloc.0 . 0)
       (push.iloc 2 . 1)
       (subr.gloc.of memq 2 "./boot/macro/synpat.scm" . 71702)
       (if.true (ret.iloc 0 . 1))
       (push.iloc.0 . 0)
       (push.iloc.0 . 1)
       (subr.gloc.of memq 2 "./boot/macro/synpat.scm" . 73754)
       (if.true
         (push.const . "syntax pattern")
         (push.const . "duplicate pattern variables")
         (push.iloc 2 . 0)
         (push.iloc.0 . 0)
         (apply.gloc.of syntax-violation "./boot/macro/synpat.scm" . 74778))
       (push.iloc.0 . 0)
       (iloc.0 . 1)
       (ret.cons "./boot/macro/synpat.scm" . 75802))
     (push.iloc.0 . 0)
     (subr.gloc.of vector? 1 "./boot/macro/synpat.scm" . 76818)
     (if.true
       (push.iloc.0 . 0)
       (push.subr.gloc.of vector->list 1 "./boot/macro/synpat.scm" . 77848)
       (push.iloc.0 . 1)
       (apply.iloc+ (1 . 0) "./boot/macro/synpat.scm" . 77842))
     (ret.iloc 0 . 1))
   (push.iloc.1 . 0)
   (push.const)
   (apply.iloc+ (0 . 0) "./boot/macro/synpat.scm" . 65547))
 (set.gloc.of |check-duplicate-variable`1276*|)
 (close
   (2 0 . check-misplaced-ellipsis)
   (extend.enclose+
     (1 0 . loop)
     (push.iloc.0 . 0)
     (const . ...)
     (if.eq?
       (push.const . "syntax pattern")
       (push.const . "improper use of ellipsis")
       (push.iloc 2 . 0)
       (apply.gloc.of syntax-violation "./boot/macro/synpat.scm" . 85010))
     (call
       (touch.gloc.of ellipsis-pair?)
       (push.iloc.0 . 0)
       (apply.gloc.of ellipsis-pair? "./boot/macro/synpat.scm" . 86034))
     (if.true
       (call
         (car.iloc (0 . 0) "./boot/macro/synpat.scm" . 87072)
         (if.not.symbol?.ret.const . #f)
         (push.car.iloc (0 . 0) "./boot/macro/synpat.scm" . 88093)
         (push.iloc 2 . 1)
         (subr.gloc.of memq 2 "./boot/macro/synpat.scm" . 88087)
         (if.false.ret)
         (push.const . "syntax pattern")
         (push.const . "ellipsis following literal")
         (push.iloc 2 . 0)
         (push.iloc.0 . 0)
         (apply.gloc.of syntax-violation "./boot/macro/synpat.scm" . 89111))
       (extend.enclose+
         (1 0 . loop)
         (iloc.0 . 0)
         (if.not.pair?.ret.const . #f)
         (push.car.iloc (0 . 0) "./boot/macro/synpat.scm" . 92194)
         (const . ...)
         (if.eq?
           (push.const . "syntax pattern")
           (push.const . "ambiguous use of ellipsis")
           (push.iloc 4 . 0)
           (apply.gloc.of syntax-violation "./boot/macro/synpat.scm" . 93213))
         (push.cdr.iloc (0 . 0) "./boot/macro/synpat.scm" . 94243)
         (apply.iloc+ (1 . 0) "./boot/macro/synpat.scm" . 94237))
       (push.cddr.iloc (1 . 0) "./boot/macro/synpat.scm" . 90146)
       (apply.iloc+ (0 . 0) "./boot/macro/synpat.scm" . 91156))
     (iloc.0 . 0)
     (if.pair?
       (call
         (push.car.iloc (0 . 0) "./boot/macro/synpat.scm" . 96284)
         (apply.iloc+ (1 . 0) "./boot/macro/synpat.scm" . 96278))
       (if.true.ret)
       (push.cdr.iloc (0 . 0) "./boot/macro/synpat.scm" . 96301)
       (apply.iloc+ (1 . 0) "./boot/macro/synpat.scm" . 96295))
     (push.iloc.0 . 0)
     (subr.gloc.of vector? 1 "./boot/macro/synpat.scm" . 97298)
     (if.false.ret)
     (push.iloc.0 . 0)
     (push.subr.gloc.of vector->list 1 "./boot/macro/synpat.scm" . 98328)
     (apply.iloc+ (1 . 0) "./boot/macro/synpat.scm" . 98322))
   (push.iloc.1 . 0)
   (apply.iloc+ (0 . 0) "./boot/macro/synpat.scm" . 83979))
 (set.gloc.of |check-misplaced-ellipsis`1276*|)
 (close
   (2 0 . check-pattern)
   (call
     (touch.gloc.of |check-misplaced-ellipsis`1276*|)
     (push.iloc.0 . 0)
     (push.iloc.0 . 1)
     (apply.gloc.of |check-misplaced-ellipsis`1276*| "./boot/macro/synpat.scm" . 101381))
   (touch.gloc.of |check-duplicate-variable`1276*|)
   (push.iloc.0 . 0)
   (push.iloc.0 . 1)
   (apply.gloc.of |check-duplicate-variable`1276*| "./boot/macro/synpat.scm" . 102405))
 (set.gloc.of check-pattern)
 (ret.const.unspec))
((close
   (3 0 . match-ellipsis?)
   (iloc.0 . 0)
   (if.null?.ret.const . #t)
   (iloc.0 . 0)
   (if.not.pair?.ret.const . #f)
   (call
     (touch.gloc.of match-pattern?)
     (push.car.iloc (0 . 0) "./boot/macro/synpat.scm" . 108574)
     (push.car.iloc (0 . 1) "./boot/macro/synpat.scm" . 108585)
     (push.iloc.0 . 2)
     (apply.gloc.of match-pattern? "./boot/macro/synpat.scm" . 108558))
   (if.false.ret)
   (touch.gloc.of match-ellipsis?)
   (push.cdr.iloc (0 . 0) "./boot/macro/synpat.scm" . 109599)
   (push.iloc.0 . 1)
   (push.iloc.0 . 2)
   (apply.gloc.of match-ellipsis? "./boot/macro/synpat.scm" . 109582))
 (set.gloc.of match-ellipsis?)
 (ret.const.unspec))
((close
   (4 0 . match-ellipsis-n?)
   (=n.iloc (0 . 2) 0 "./boot/macro/synpat.scm" . 113673)
   (if.true.ret)
   (iloc.0 . 0)
   (if.not.pair?.ret.const . #f)
   (call
     (touch.gloc.of match-pattern?)
     (push.car.iloc (0 . 0) "./boot/macro/synpat.scm" . 115742)
     (push.car.iloc (0 . 1) "./boot/macro/synpat.scm" . 115753)
     (push.iloc.0 . 3)
     (apply.gloc.of match-pattern? "./boot/macro/synpat.scm" . 115726))
   (if.false.ret)
   (touch.gloc.of match-ellipsis-n?)
   (push.cdr.iloc (0 . 0) "./boot/macro/synpat.scm" . 116769)
   (push.iloc.0 . 1)
   (push.n+.iloc (0 . 2) -1 "./boot/macro/synpat.scm" . 116784)
   (push.iloc.0 . 3)
   (apply.gloc.of match-ellipsis-n? "./boot/macro/synpat.scm" . 116750))
 (set.gloc.of match-ellipsis-n?)
 (ret.const.unspec))
((close
   (3 0 . match-pattern?)
   (push.iloc.0 . 1)
   (const . _)
   (if.eq?.ret.const . #t)
   (iloc.0 . 1)
   (if.symbol?
     (push.iloc.0 . 1)
     (push.iloc.0 . 2)
     (subr.gloc.of memq 2 "./boot/macro/synpat.scm" . 122899)
     (if.true
       (call
         (iloc.0 . 0)
         (if.symbol?.ret.const . #t)
         (push.iloc.0 . 0)
         (apply.gloc.of identifier? "./boot/macro/synpat.scm" . 124956))
       (if.false.ret)
       (touch.gloc.of free-id=?)
       (push.iloc.0 . 1)
       (push.iloc.0 . 0)
       (apply.gloc.of free-id=? "./boot/macro/synpat.scm" . 125976))
     (ret.const . #t))
   (call
     (touch.gloc.of ellipsis-pair?)
     (push.iloc.0 . 1)
     (apply.gloc.of ellipsis-pair? "./boot/macro/synpat.scm" . 128012))
   (if.true
     (call
       (cddr.iloc (0 . 1) "./boot/macro/synpat.scm" . 129052)
       (if.not.null?.ret.const . #f)
       (push.iloc.0 . 0)
       (ret.subr.gloc.of list? "./boot/macro/synpat.scm" . 129064))
     (if.true
       (car.iloc (0 . 1) "./boot/macro/synpat.scm" . 130077)
       (if.symbol?.ret.const . #t)
       (touch.gloc.of match-ellipsis?)
       (push.iloc.0 . 0)
       (push.iloc.0 . 1)
       (push.iloc.0 . 2)
       (apply.gloc.of match-ellipsis? "./boot/macro/synpat.scm" . 131092))
     (call
       (touch.gloc.of count-pair)
       (push.iloc.0 . 0)
       (apply.gloc.of count-pair "./boot/macro/synpat.scm" . 132124))
     (push)
     (call
       (touch.gloc.of count-pair)
       (push.cddr.iloc (0 . 1) "./boot/macro/synpat.scm" . 132154)
       (apply.gloc.of count-pair "./boot/macro/synpat.scm" . 132142))
     (push)
     (push.subr.gloc.of - 2 "./boot/macro/synpat.scm" . 132121)
     (extend . 1)
     (=n.iloc (0 . 0) 0 "./boot/macro/synpat.scm" . 133142)
     (if.true
       (touch.gloc.of match-pattern?)
       (push.iloc.1 . 0)
       (push.cddr.iloc (1 . 1) "./boot/macro/synpat.scm" . 134187)
       (push.iloc.1 . 2)
       (apply.gloc.of match-pattern? "./boot/macro/synpat.scm" . 134166))
     (>n.iloc (0 . 0) 0 "./boot/macro/synpat.scm" . 135195)
     (if.false.ret)
     (call
       (touch.gloc.of match-ellipsis-n?)
       (push.iloc.1 . 0)
       (push.iloc.1 . 1)
       (push.iloc.0 . 0)
       (push.iloc.1 . 2)
       (apply.gloc.of match-ellipsis-n? "./boot/macro/synpat.scm" . 136219))
     (if.false.ret)
     (touch.gloc.of match-pattern?)
     (push.iloc.1 . 0)
     (push.iloc.0 . 0)
     (push.subr.gloc.of list-tail 2 "./boot/macro/synpat.scm" . 137259)
     (push.cddr.iloc (1 . 1) "./boot/macro/synpat.scm" . 137278)
     (push.iloc.1 . 2)
     (apply.gloc.of match-pattern? "./boot/macro/synpat.scm" . 137243))
   (iloc.0 . 1)
   (if.pair?
     (iloc.0 . 0)
     (if.not.pair?.ret.const . #f)
     (call
       (touch.gloc.of match-pattern?)
       (push.car.iloc (0 . 0) "./boot/macro/synpat.scm" . 140321)
       (push.car.iloc (0 . 1) "./boot/macro/synpat.scm" . 140332)
       (push.iloc.0 . 2)
       (apply.gloc.of match-pattern? "./boot/macro/synpat.scm" . 140305))
     (if.false.ret)
     (touch.gloc.of match-pattern?)
     (push.cdr.iloc (0 . 0) "./boot/macro/synpat.scm" . 141345)
     (push.cdr.iloc (0 . 1) "./boot/macro/synpat.scm" . 141356)
     (push.iloc.0 . 2)
     (apply.gloc.of match-pattern? "./boot/macro/synpat.scm" . 141329))
   (push.iloc.0 . 1)
   (subr.gloc.of vector? 1 "./boot/macro/synpat.scm" . 142348)
   (if.true
     (push.iloc.0 . 0)
     (subr.gloc.of vector? 1 "./boot/macro/synpat.scm" . 143377)
     (if.false.ret)
     (touch.gloc.of match-pattern?)
     (push.iloc.0 . 0)
     (push.subr.gloc.of vector->list 1 "./boot/macro/synpat.scm" . 144417)
     (push.iloc.0 . 1)
     (push.subr.gloc.of vector->list 1 "./boot/macro/synpat.scm" . 144437)
     (push.iloc.0 . 2)
     (apply.gloc.of match-pattern? "./boot/macro/synpat.scm" . 144401))
   (push.iloc.0 . 1)
   (push.iloc.0 . 0)
   (ret.subr.gloc.of equal? "./boot/macro/synpat.scm" . 145425))
 (set.gloc.of match-pattern?)
 (ret.const.unspec))
((close
   (2 0 . union-vars)
   (iloc.0 . 1)
   (if.null? (ret.iloc 0 . 0))
   (touch.gloc.of union-vars)
   (call
     (touch.gloc.of bind-var!)
     (push.iloc.0 . 1)
     (push.subr.gloc.of caar 1 "./boot/macro/synpat.scm" . 151584)
     (push.iloc.0 . 1)
     (push.subr.gloc.of cdar 1 "./boot/macro/synpat.scm" . 151606)
     (push.subr.gloc.of reverse 1 "./boot/macro/synpat.scm" . 151597)
     (push.iloc.0 . 0)
     (apply.gloc.of bind-var! "./boot/macro/synpat.scm" . 151573))
   (push)
   (push.cdr.iloc (0 . 1) "./boot/macro/synpat.scm" . 152597)
   (apply.gloc.of union-vars "./boot/macro/synpat.scm" . 151561))
 (set.gloc.of union-vars)
 (ret.const.unspec))
((close
   (3 0 . bind-var!)
   (push.iloc.0 . 0)
   (const . _)
   (if.eq? (ret.iloc 0 . 2))
   (push.iloc.0 . 0)
   (push.iloc.0 . 2)
   (push.subr.gloc.of assq 2 "./boot/macro/synpat.scm" . 158744)
   (extend . 1)
   (iloc.0 . 0)
   (if.true
     (push.iloc.0 . 0)
     (push.iloc.1 . 1)
     (cdr.iloc (0 . 0) "./boot/macro/synpat.scm" . 160819)
     (push.cons)
     (subr.gloc.of set-cdr! 2 "./boot/macro/synpat.scm" . 160793)
     (ret.iloc 1 . 2))
   (touch.gloc.of acons)
   (push.iloc.1 . 0)
   (push.iloc.1 . 1)
   (push.subr.gloc.of list 1 "./boot/macro/synpat.scm" . 161821)
   (push.iloc.1 . 2)
   (apply.gloc.of acons "./boot/macro/synpat.scm" . 161810))
 (set.gloc.of bind-var!)
 (ret.const.unspec))
((close
   (3 0 . bind-null-ellipsis)
   (extend.enclose+
     (2 0 . loop)
     (iloc.0 . 0)
     (if.null? (ret.iloc 0 . 1))
     (push.cdr.iloc (0 . 0) "./boot/macro/synpat.scm" . 168977)
     (call
       (push.car.iloc (0 . 0) "./boot/macro/synpat.scm" . 170011)
       (push.iloc 2 . 1)
       (subr.gloc.of memq 2 "./boot/macro/synpat.scm" . 170005)
       (if.true (ret.iloc 0 . 1))
       (touch.gloc.of bind-var!)
       (push.car.iloc (0 . 0) "./boot/macro/synpat.scm" . 172064)
       (push.const)
       (push.iloc.0 . 1)
       (apply.gloc.of bind-var! "./boot/macro/synpat.scm" . 172053))
     (push)
     (apply.iloc+ (1 . 0) "./boot/macro/synpat.scm" . 168971))
   (call
     (touch.gloc.of collect-unique-ids)
     (push.car.iloc (1 . 0) "./boot/macro/synpat.scm" . 165929)
     (apply.gloc.of collect-unique-ids "./boot/macro/synpat.scm" . 165909))
   (push)
   (push.iloc.1 . 2)
   (apply.iloc+ (0 . 0) "./boot/macro/synpat.scm" . 166919))
 (set.gloc.of bind-null-ellipsis)
 (ret.const.unspec))
((close
   (5 0 . bind-ellipsis)
   (iloc.0 . 0)
   (if.null?
     (iloc.0 . 4)
     (if.null?
       (touch.gloc.of bind-null-ellipsis)
       (push.iloc.0 . 1)
       (push.iloc.0 . 2)
       (push.iloc.0 . 3)
       (apply.gloc.of bind-null-ellipsis "./boot/macro/synpat.scm" . 178189))
     (touch.gloc.of union-vars)
     (push.iloc.0 . 3)
     (push.iloc.0 . 4)
     (apply.gloc.of union-vars "./boot/macro/synpat.scm" . 179213))
   (touch.gloc.of bind-ellipsis)
   (push.cdr.iloc (0 . 0) "./boot/macro/synpat.scm" . 180248)
   (push.iloc.0 . 1)
   (push.iloc.0 . 2)
   (push.iloc.0 . 3)
   (call
     (touch.gloc.of bind-pattern)
     (push.car.iloc (0 . 0) "./boot/macro/synpat.scm" . 181286)
     (push.car.iloc (0 . 1) "./boot/macro/synpat.scm" . 181297)
     (push.iloc.0 . 2)
     (push.iloc.0 . 4)
     (apply.gloc.of bind-pattern "./boot/macro/synpat.scm" . 181272))
   (push)
   (apply.gloc.of bind-ellipsis "./boot/macro/synpat.scm" . 180233))
 (set.gloc.of bind-ellipsis)
 (ret.const.unspec))
((close
   (6 0 . bind-ellipsis-n)
   (=n.iloc (0 . 3) 0 "./boot/macro/synpat.scm" . 185353)
   (if.true
     (iloc.0 . 5)
     (if.null?
       (touch.gloc.of bind-null-ellipsis)
       (push.iloc.0 . 1)
       (push.iloc.0 . 2)
       (push.iloc.0 . 4)
       (apply.gloc.of bind-null-ellipsis "./boot/macro/synpat.scm" . 187405))
     (touch.gloc.of union-vars)
     (push.iloc.0 . 4)
     (push.iloc.0 . 5)
     (apply.gloc.of union-vars "./boot/macro/synpat.scm" . 188429))
   (touch.gloc.of bind-ellipsis-n)
   (push.cdr.iloc (0 . 0) "./boot/macro/synpat.scm" . 189466)
   (push.iloc.0 . 1)
   (push.iloc.0 . 2)
   (push.n+.iloc (0 . 3) -1 "./boot/macro/synpat.scm" . 189487)
   (push.iloc.0 . 4)
   (call
     (touch.gloc.of bind-pattern)
     (push.car.iloc (0 . 0) "./boot/macro/synpat.scm" . 190504)
     (push.car.iloc (0 . 1) "./boot/macro/synpat.scm" . 190515)
     (push.iloc.0 . 2)
     (push.iloc.0 . 5)
     (apply.gloc.of bind-pattern "./boot/macro/synpat.scm" . 190490))
   (push)
   (apply.gloc.of bind-ellipsis-n "./boot/macro/synpat.scm" . 189449))
 (set.gloc.of bind-ellipsis-n)
 (ret.const.unspec))
((close
   (4 0 . bind-pattern)
   (iloc.0 . 1)
   (if.symbol?
     (push.iloc.0 . 1)
     (push.iloc.0 . 2)
     (subr.gloc.of memq 2 "./boot/macro/synpat.scm" . 195600)
     (if.true (ret.iloc 0 . 3))
     (touch.gloc.of bind-var!)
     (push.iloc.0 . 1)
     (push.iloc.0 . 0)
     (push.iloc.0 . 3)
     (apply.gloc.of bind-var! "./boot/macro/synpat.scm" . 197648))
   (call
     (touch.gloc.of ellipsis-pair?)
     (push.iloc.0 . 1)
     (apply.gloc.of ellipsis-pair? "./boot/macro/synpat.scm" . 198668))
   (if.true
     (call
       (cddr.iloc (0 . 1) "./boot/macro/synpat.scm" . 199708)
       (if.not.null?.ret.const . #f)
       (push.iloc.0 . 0)
       (ret.subr.gloc.of list? "./boot/macro/synpat.scm" . 199720))
     (if.true
       (car.iloc (0 . 1) "./boot/macro/synpat.scm" . 200733)
       (if.symbol?
         (touch.gloc.of bind-var!)
         (push.car.iloc (0 . 1) "./boot/macro/synpat.scm" . 201759)
         (push.iloc.0 . 0)
         (push.iloc.0 . 3)
         (apply.gloc.of bind-var! "./boot/macro/synpat.scm" . 201748))
       (touch.gloc.of bind-ellipsis)
       (push.iloc.0 . 0)
       (push.iloc.0 . 1)
       (push.iloc.0 . 2)
       (push.iloc.0 . 3)
       (push.const)
       (apply.gloc.of bind-ellipsis "./boot/macro/synpat.scm" . 202772))
     (call
       (touch.gloc.of count-pair)
       (push.iloc.0 . 0)
       (apply.gloc.of count-pair "./boot/macro/synpat.scm" . 203804))
     (push)
     (call
       (touch.gloc.of count-pair)
       (push.cddr.iloc (0 . 1) "./boot/macro/synpat.scm" . 203834)
       (apply.gloc.of count-pair "./boot/macro/synpat.scm" . 203822))
     (push)
     (push.subr.gloc.of - 2 "./boot/macro/synpat.scm" . 203801)
     (extend . 1)
     (touch.gloc.of bind-pattern)
     (push.iloc.1 . 0)
     (push.iloc.0 . 0)
     (push.subr.gloc.of list-tail 2 "./boot/macro/synpat.scm" . 204832)
     (push.cddr.iloc (1 . 1) "./boot/macro/synpat.scm" . 204851)
     (push.iloc.1 . 2)
     (call
       (call
         (=n.iloc (0 . 0) 0 "./boot/macro/synpat.scm" . 205865)
         (if.false.ret)
         (push.car.iloc (1 . 1) "./boot/macro/synpat.scm" . 205882)
         (ret.subr.gloc.of symbol? "./boot/macro/synpat.scm" . 205873))
       (if.true
         (touch.gloc.of bind-var!)
         (push.car.iloc (1 . 1) "./boot/macro/synpat.scm" . 206895)
         (push.const)
         (push.iloc.1 . 3)
         (apply.gloc.of bind-var! "./boot/macro/synpat.scm" . 206884))
       (touch.gloc.of bind-ellipsis-n)
       (push.iloc.1 . 0)
       (push.iloc.1 . 1)
       (push.iloc.1 . 2)
       (push.iloc.0 . 0)
       (push.iloc.1 . 3)
       (push.const)
       (apply.gloc.of bind-ellipsis-n "./boot/macro/synpat.scm" . 207908))
     (push)
     (apply.gloc.of bind-pattern "./boot/macro/synpat.scm" . 204818))
   (iloc.0 . 1)
   (if.pair?
     (touch.gloc.of bind-pattern)
     (push.cdr.iloc (0 . 0) "./boot/macro/synpat.scm" . 209946)
     (push.cdr.iloc (0 . 1) "./boot/macro/synpat.scm" . 209957)
     (push.iloc.0 . 2)
     (call
       (touch.gloc.of bind-pattern)
       (push.car.iloc (0 . 0) "./boot/macro/synpat.scm" . 210984)
       (push.car.iloc (0 . 1) "./boot/macro/synpat.scm" . 210995)
       (push.iloc.0 . 2)
       (push.iloc.0 . 3)
       (apply.gloc.of bind-pattern "./boot/macro/synpat.scm" . 210970))
     (push)
     (apply.gloc.of bind-pattern "./boot/macro/synpat.scm" . 209932))
   (push.iloc.0 . 1)
   (subr.gloc.of vector? 1 "./boot/macro/synpat.scm" . 211980)
   (if.true
     (touch.gloc.of bind-pattern)
     (push.iloc.0 . 0)
     (push.subr.gloc.of vector->list 1 "./boot/macro/synpat.scm" . 213018)
     (push.iloc.0 . 1)
     (push.subr.gloc.of vector->list 1 "./boot/macro/synpat.scm" . 213038)
     (push.iloc.0 . 2)
     (push.iloc.0 . 3)
     (apply.gloc.of bind-pattern "./boot/macro/synpat.scm" . 213004))
   (ret.iloc 0 . 3))
 (set.gloc.of bind-pattern)
 (ret.const.unspec))

;
((close
   (2 0 . collect-rename-ids)
   (extend.enclose+
     (1 0 . loop)
     (iloc.0 . 0)
     (if.null?.ret.const)
     (push.car.iloc (0 . 0) "./boot/macro/syntmp.scm" . 11287)
     (push.iloc 2 . 1)
     (subr.gloc.of assq 2 "./boot/macro/syntmp.scm" . 11281)
     (if.true
       (push.cdr.iloc (0 . 0) "./boot/macro/syntmp.scm" . 12311)
       (apply.iloc+ (1 . 0) "./boot/macro/syntmp.scm" . 12305))
     (push.car.iloc (0 . 0) "./boot/macro/syntmp.scm" . 13335)
     (call
       (push.cdr.iloc (0 . 0) "./boot/macro/syntmp.scm" . 13351)
       (apply.iloc+ (1 . 0) "./boot/macro/syntmp.scm" . 13345))
     (ret.cons "./boot/macro/syntmp.scm" . 13329))
   (call
     (touch.gloc.of collect-unique-ids)
     (push.iloc.1 . 0)
     (apply.gloc.of collect-unique-ids "./boot/macro/syntmp.scm" . 7184))
   (push)
   (apply.iloc+ (0 . 0) "./boot/macro/syntmp.scm" . 9225))
 (set.gloc.of collect-rename-ids)
 (ret.const.unspec))
((close
   (1 0 . parse-ellipsis-splicing)
   (extend.enclose+
     (2 0 . loop)
     (call
       (iloc.0 . 1)
       (if.not.pair?.ret.const . #f)
       (push.car.iloc (0 . 1) "./boot/macro/syntmp.scm" . 18469)
       (const . ...)
       (ret.eq? "./boot/macro/syntmp.scm" . 18464))
     (if.true
       (push.n+.iloc (0 . 0) 1 "./boot/macro/syntmp.scm" . 19476)
       (push.cdr.iloc (0 . 1) "./boot/macro/syntmp.scm" . 19486)
       (apply.iloc+ (1 . 0) "./boot/macro/syntmp.scm" . 19470))
     (push.iloc 2 . 0)
     (push.iloc.0 . 0)
     (push.subr.gloc.of list-head 2 "./boot/macro/syntmp.scm" . 21526)
     (push.iloc.0 . 1)
     (push.iloc.0 . 0)
     (ret.subr.gloc.of values "./boot/macro/syntmp.scm" . 21518))
   (push.const . 2)
   (push.iloc.1 . 0)
   (push.subr.gloc.of cdddr 1 "./boot/macro/syntmp.scm" . 17438)
   (apply.iloc+ (0 . 0) "./boot/macro/syntmp.scm" . 18439))
 (set.gloc.of parse-ellipsis-splicing)
 (ret.const.unspec))
((close
   (2 0 . check-template)
   (extend.unbound . 2)
   (push.close
     (2 0 . control-patvar-exists?)
     (extend.enclose
       (2 0 . loop)
       (iloc.0 . 0)
       (if.symbol?
         (call
           (touch.gloc.of rank-of)
           (push.iloc.0 . 0)
           (push.iloc 4 . 1)
           (apply.gloc.of rank-of "./boot/macro/syntmp.scm" . 30742))
         (push)
         (push.iloc.0 . 1)
         (ret.subr.gloc.of >= "./boot/macro/syntmp.scm" . 30738))
       (call
         (touch.gloc.of ellipsis-quote?)
         (push.iloc.0 . 0)
         (apply.gloc.of ellipsis-quote? "./boot/macro/syntmp.scm" . 31762))
       (if.true
         (touch.gloc.of any1)
         (push.close
           (1 0)
           (call
             (touch.gloc.of rank-of)
             (push.iloc.0 . 0)
             (push.iloc 5 . 1)
             (apply.gloc.of rank-of "./boot/macro/syntmp.scm" . 32809))
           (push)
           (push.iloc.1 . 1)
           (ret.subr.gloc.of >= "./boot/macro/syntmp.scm" . 32805))
         (call
           (touch.gloc.of collect-unique-ids)
           (push.iloc.0 . 0)
           (apply.gloc.of collect-unique-ids "./boot/macro/syntmp.scm" . 32836))
         (push)
         (apply.gloc.of any1 "./boot/macro/syntmp.scm" . 32786))
       (call
         (touch.gloc.of ellipsis-splicing-pair?)
         (push.iloc.0 . 0)
         (apply.gloc.of ellipsis-splicing-pair? "./boot/macro/syntmp.scm" . 33810))
       (if.true
         (push.close
           (0 0)
           (touch.gloc.of parse-ellipsis-splicing)
           (push.iloc.1 . 0)
           (apply.gloc.of parse-ellipsis-splicing "./boot/macro/syntmp.scm" . 34864))
         (push.close
           (3 0)
           (call
             (push.iloc.0 . 0)
             (push.n+.iloc (1 . 1) 1 "./boot/macro/syntmp.scm" . 35875)
             (apply.iloc (2 . 0) "./boot/macro/syntmp.scm" . 35864))
           (if.true.ret)
           (call
             (push.iloc.0 . 0)
             (push.const . 1)
             (apply.iloc (2 . 0) "./boot/macro/syntmp.scm" . 36893))
           (if.false.ret)
           (push.iloc.0 . 1)
           (push.iloc.1 . 1)
           (apply.iloc (2 . 0) "./boot/macro/syntmp.scm" . 37917))
         (apply.gloc.of
           |.call-with-values|
           (|.call-with-values|
             (lambda () (parse-ellipsis-splicing |lst`1354*|))
             (lambda (|body`1358*| |tail`1358*| |len`1358*|)
               (or (|loop`1353*| |body`1358*| (+ |depth`1354*| 1))
                   (and (|loop`1353*| |body`1358*| 1)
                        (|loop`1353*| |tail`1358*| |depth`1354*|)))))))
       (call
         (touch.gloc.of ellipsis-pair?)
         (push.iloc.0 . 0)
         (apply.gloc.of ellipsis-pair? "./boot/macro/syntmp.scm" . 38930))
       (if.true
         (call
           (push.car.iloc (0 . 0) "./boot/macro/syntmp.scm" . 39964)
           (push.n+.iloc (0 . 1) 1 "./boot/macro/syntmp.scm" . 39974)
           (apply.iloc (1 . 0) "./boot/macro/syntmp.scm" . 39958))
         (if.true.ret)
         (call
           (push.car.iloc (0 . 0) "./boot/macro/syntmp.scm" . 40993)
           (push.const . 1)
           (apply.iloc (1 . 0) "./boot/macro/syntmp.scm" . 40987))
         (if.false.ret)
         (push.cddr.iloc (0 . 0) "./boot/macro/syntmp.scm" . 42017)
         (push.iloc.0 . 1)
         (apply.iloc (1 . 0) "./boot/macro/syntmp.scm" . 42011))
       (iloc.0 . 0)
       (if.pair?
         (call
           (push.car.iloc (0 . 0) "./boot/macro/syntmp.scm" . 44060)
           (push.iloc.0 . 1)
           (apply.iloc (1 . 0) "./boot/macro/syntmp.scm" . 44054))
         (if.true.ret)
         (push.cdr.iloc (0 . 0) "./boot/macro/syntmp.scm" . 45084)
         (push.iloc.0 . 1)
         (apply.iloc (1 . 0) "./boot/macro/syntmp.scm" . 45078))
       (push.iloc.0 . 0)
       (subr.gloc.of vector? 1 "./boot/macro/syntmp.scm" . 46098)
       (if.false.ret)
       (push.iloc.0 . 0)
       (push.subr.gloc.of vector->list 1 "./boot/macro/syntmp.scm" . 47128)
       (push.iloc.0 . 1)
       (apply.iloc (1 . 0) "./boot/macro/syntmp.scm" . 47122))
     (push.iloc.1 . 0)
     (push.iloc.1 . 1)
     (apply.iloc (0 . 0) "./boot/macro/syntmp.scm" . 29707))
   (push.close+
     (2 0 . check-escaped)
     (extend.enclose+
       (1 0 . loop)
       (iloc.0 . 0)
       (if.symbol?
         (push.const . 0)
         (call
           (touch.gloc.of rank-of)
           (push.iloc.0 . 0)
           (push.iloc 4 . 1)
           (apply.gloc.of rank-of "./boot/macro/syntmp.scm" . 54300))
         (push)
         (push.iloc 2 . 1)
         (subr.gloc.of < 3 "./boot/macro/syntmp.scm" . 54295)
         (if.false.ret)
         (push.const . "syntax template")
         (push.const . "too few ellipsis following subtemplate")
         (push.iloc 4 . 0)
         (push.iloc.0 . 0)
         (apply.gloc.of syntax-violation "./boot/macro/syntmp.scm" . 55319))
       (iloc.0 . 0)
       (if.pair?
         (call
           (push.car.iloc (0 . 0) "./boot/macro/syntmp.scm" . 57368)
           (apply.iloc+ (1 . 0) "./boot/macro/syntmp.scm" . 57362))
         (push.cdr.iloc (0 . 0) "./boot/macro/syntmp.scm" . 58392)
         (apply.iloc+ (1 . 0) "./boot/macro/syntmp.scm" . 58386))
       (push.iloc.0 . 0)
       (subr.gloc.of vector? 1 "./boot/macro/syntmp.scm" . 59410)
       (if.true
         (push.iloc.0 . 0)
         (push.subr.gloc.of vector->list 1 "./boot/macro/syntmp.scm" . 60440)
         (apply.iloc+ (1 . 0) "./boot/macro/syntmp.scm" . 60434))
       (ret.const.unspec))
     (push.iloc.1 . 0)
     (apply.iloc+ (0 . 0) "./boot/macro/syntmp.scm" . 53259))
   (enclose . 2)
   (call
     (call
       (touch.gloc.of safe-length)
       (push.iloc.1 . 0)
       (apply.gloc.of safe-length "./boot/macro/syntmp.scm" . 62481))
     (push)
     (push.const . 2)
     (subr.gloc.of = 2 "./boot/macro/syntmp.scm" . 62478)
     (if.false.ret)
     (push.car.iloc (1 . 0) "./boot/macro/syntmp.scm" . 62508)
     (const . ...)
     (ret.eq? "./boot/macro/syntmp.scm" . 62503))
   (if.true
     (push.cadr.iloc (1 . 0) "./boot/macro/syntmp.scm" . 63512)
     (push.const . 0)
     (apply.iloc+ (0 . 1) "./boot/macro/syntmp.scm" . 63497))
   (extend.enclose
     (2 0 . loop)
     (iloc.0 . 0)
     (if.symbol?
       (call
         (push.iloc.0 . 0)
         (const . ...)
         (if.not.eq?.ret.const . #f)
         (push.const . "syntax template")
         (push.const . "misplaced ellipsis")
         (push.iloc 3 . 0)
         (apply.gloc.of syntax-violation "./boot/macro/syntmp.scm" . 67607))
       (call
         (touch.gloc.of rank-of)
         (push.iloc.0 . 0)
         (push.iloc 3 . 1)
         (apply.gloc.of rank-of "./boot/macro/syntmp.scm" . 68634))
       (>.iloc (0 . 1) "./boot/macro/syntmp.scm" . 68631)
       (if.false.ret)
       (push.const . "syntax template")
       (push.const . "too few ellipsis following subtemplate")
       (push.iloc 3 . 0)
       (push.iloc.0 . 0)
       (apply.gloc.of syntax-violation "./boot/macro/syntmp.scm" . 69655))
     (call
       (touch.gloc.of ellipsis-quote?)
       (push.iloc.0 . 0)
       (apply.gloc.of ellipsis-quote? "./boot/macro/syntmp.scm" . 70674))
     (if.true
       (push.cadr.iloc (0 . 0) "./boot/macro/syntmp.scm" . 71713)
       (push.iloc.0 . 1)
       (apply.iloc+ (2 . 1) "./boot/macro/syntmp.scm" . 71698))
     (call
       (touch.gloc.of ellipsis-splicing-pair?)
       (push.iloc.0 . 0)
       (apply.gloc.of ellipsis-splicing-pair? "./boot/macro/syntmp.scm" . 72722))
     (if.true
       (push.close
         (0 0)
         (touch.gloc.of parse-ellipsis-splicing)
         (push.iloc.1 . 0)
         (apply.gloc.of parse-ellipsis-splicing "./boot/macro/syntmp.scm" . 73776))
       (push.close
         (3 0)
         (call
           (=n.iloc (1 . 1) 0 "./boot/macro/syntmp.scm" . 74777)
           (if.false.ret)
           (call
             (push.car.iloc (1 . 0) "./boot/macro/syntmp.scm" . 75829)
             (push.iloc.0 . 2)
             (apply.iloc (3 . 0) "./boot/macro/syntmp.scm" . 75805))
           (if.true.ret)
           (push.const . "syntax template")
           (push.const . "missing pattern variable that used in same level as in pattern")
           (push.iloc 4 . 0)
           (push.iloc.1 . 0)
           (apply.gloc.of syntax-violation "./boot/macro/syntmp.scm" . 76829))
         (call
           (push.iloc.0 . 0)
           (push.n+.iloc (1 . 1) 1 "./boot/macro/syntmp.scm" . 77855)
           (apply.iloc (2 . 0) "./boot/macro/syntmp.scm" . 77844))
         (push.iloc.0 . 1)
         (push.iloc.1 . 1)
         (apply.iloc (2 . 0) "./boot/macro/syntmp.scm" . 78868))
       (apply.gloc.of
         |.call-with-values|
         (|.call-with-values|
           (lambda () (parse-ellipsis-splicing |lst`1372*|))
           (lambda (|body`1374*| |tail`1374*| |len`1374*|)
             (and (= |depth`1372*| 0)
                  (or (|control-patvar-exists?`1348*| (car |lst`1372*|) |len`1374*|)
                      (syntax-violation
                        "syntax template"
                        "missing pattern variable that used in same level as in pattern"
                        |tmpl`1347*|
                        |lst`1372*|)))
             (|loop`1371*| |body`1374*| (+ |depth`1372*| 1))
             (|loop`1371*| |tail`1374*| |depth`1372*|)))))
     (call
       (touch.gloc.of ellipsis-pair?)
       (push.iloc.0 . 0)
       (apply.gloc.of ellipsis-pair? "./boot/macro/syntmp.scm" . 79890))
     (if.true
       (car.iloc (0 . 0) "./boot/macro/syntmp.scm" . 80930)
       (if.symbol?
         (call
           (touch.gloc.of rank-of)
           (push.car.iloc (0 . 0) "./boot/macro/syntmp.scm" . 81966)
           (push.iloc 3 . 1)
           (apply.gloc.of rank-of "./boot/macro/syntmp.scm" . 81957))
         (push)
         (extend . 1)
         (<n.iloc (0 . 0) 0 "./boot/macro/syntmp.scm" . 82978)
         (if.true
           (push.const . "syntax template")
           (push.const . "misplace ellipsis following literal")
           (push.iloc 4 . 0)
           (push.car.iloc (1 . 0) "./boot/macro/syntmp.scm" . 84081)
           (apply.gloc.of syntax-violation "./boot/macro/syntmp.scm" . 84002))
         (n+.iloc (1 . 1) 1 "./boot/macro/syntmp.scm" . 85034)
         (<.iloc (0 . 0) "./boot/macro/syntmp.scm" . 85026)
         (if.true
           (push.const . "syntax template")
           (push.const . "too few ellipsis following subtemplate")
           (push.iloc 4 . 0)
           (push.car.iloc (1 . 0) "./boot/macro/syntmp.scm" . 86132)
           (apply.gloc.of syntax-violation "./boot/macro/syntmp.scm" . 86050))
         (push.cddr.iloc (1 . 0) "./boot/macro/syntmp.scm" . 88104)
         (push.iloc.1 . 1)
         (apply.iloc (2 . 0) "./boot/macro/syntmp.scm" . 88098))
       (car.iloc (0 . 0) "./boot/macro/syntmp.scm" . 89120)
       (if.pair?
         (call
           (=n.iloc (0 . 1) 0 "./boot/macro/syntmp.scm" . 90142)
           (if.false.ret)
           (call
             (push.car.iloc (0 . 0) "./boot/macro/syntmp.scm" . 91194)
             (push.n+.iloc (0 . 1) 1 "./boot/macro/syntmp.scm" . 91204)
             (apply.iloc (2 . 0) "./boot/macro/syntmp.scm" . 91170))
           (if.true.ret)
           (push.const . "syntax template")
           (push.const . "missing pattern variable that used in same level as in pattern")
           (push.iloc 3 . 0)
           (push.car.iloc (0 . 0) "./boot/macro/syntmp.scm" . 92300)
           (apply.gloc.of syntax-violation "./boot/macro/syntmp.scm" . 92194))
         (call
           (push.car.iloc (0 . 0) "./boot/macro/syntmp.scm" . 93215)
           (push.n+.iloc (0 . 1) 1 "./boot/macro/syntmp.scm" . 93225)
           (apply.iloc (1 . 0) "./boot/macro/syntmp.scm" . 93209))
         (push.cddr.iloc (0 . 0) "./boot/macro/syntmp.scm" . 94239)
         (push.iloc.0 . 1)
         (apply.iloc (1 . 0) "./boot/macro/syntmp.scm" . 94233))
       (car.iloc (0 . 0) "./boot/macro/syntmp.scm" . 95264)
       (if.null?
         (push.const . "syntax template")
         (push.const . "misplaced ellipsis following empty list")
         (push.iloc 3 . 0)
         (apply.gloc.of syntax-violation "./boot/macro/syntmp.scm" . 96281))
       (push.const . "syntax template")
       (push.const . "misplaced ellipsis following literal")
       (push.iloc 3 . 0)
       (push.car.iloc (0 . 0) "./boot/macro/syntmp.scm" . 98409)
       (apply.gloc.of syntax-violation "./boot/macro/syntmp.scm" . 98329))
     (iloc.0 . 0)
     (if.pair?
       (call
         (push.car.iloc (0 . 0) "./boot/macro/syntmp.scm" . 100376)
         (push.iloc.0 . 1)
         (apply.iloc (1 . 0) "./boot/macro/syntmp.scm" . 100370))
       (push.cdr.iloc (0 . 0) "./boot/macro/syntmp.scm" . 101400)
       (push.iloc.0 . 1)
       (apply.iloc (1 . 0) "./boot/macro/syntmp.scm" . 101394))
     (push.iloc.0 . 0)
     (subr.gloc.of vector? 1 "./boot/macro/syntmp.scm" . 102418)
     (if.true
       (push.iloc.0 . 0)
       (push.subr.gloc.of vector->list 1 "./boot/macro/syntmp.scm" . 103448)
       (push.iloc.0 . 1)
       (apply.iloc (1 . 0) "./boot/macro/syntmp.scm" . 103442))
     (ret.const.unspec))
   (push.iloc 2 . 0)
   (push.const . 0)
   (apply.iloc (0 . 0) "./boot/macro/syntmp.scm" . 65547))
 (set.gloc.of check-template)
 (ret.const.unspec))
((close
   (2 0 . rank-of)
   (push.iloc.0 . 0)
   (push.iloc.0 . 1)
   (push.subr.gloc.of assq 2 "./boot/macro/syntmp.scm" . 107537)
   (extend . 1)
   (iloc.0 . 0)
   (if.true (push.iloc.0 . 0) (ret.subr.gloc.of cdr "./boot/macro/syntmp.scm" . 108560))
   (ret.const . -1))
 (set.gloc.of rank-of)
 (ret.const.unspec))
((close
   (2 0 . subform-of)
   (push.iloc.0 . 0)
   (push.iloc.0 . 1)
   (push.subr.gloc.of assq 2 "./boot/macro/syntmp.scm" . 112650)
   (ret.subr.gloc.of cdr "./boot/macro/syntmp.scm" . 112645))
 (set.gloc.of subform-of)
 (ret.const.unspec))
((close
   (4 0 . collect-ellipsis-vars)
   (call
     (touch.gloc.of collect-unique-ids)
     (push.iloc.0 . 0)
     (apply.gloc.of collect-unique-ids "./boot/macro/syntmp.scm" . 116752))
   (push)
   (extend . 1)
   (push.gloc.of values)
   (call
     (push.close
       (1 0)
       (push.car.iloc (0 . 0) "./boot/macro/syntmp.scm" . 119841)
       (push.iloc.1 . 0)
       (subr.gloc.of memq 2 "./boot/macro/syntmp.scm" . 119835)
       (if.false.ret)
       (push.car.iloc (0 . 0) "./boot/macro/syntmp.scm" . 120882)
       (push.iloc 2 . 1)
       (push.subr.gloc.of assq 2 "./boot/macro/syntmp.scm" . 120876)
       (subr.gloc.of cdr 1 "./boot/macro/syntmp.scm" . 120871)
       (<.iloc (2 . 2) "./boot/macro/syntmp.scm" . 121892)
       (if.true (ret.iloc 0 . 0))
       (cdr.iloc (0 . 0) "./boot/macro/syntmp.scm" . 122923)
       (if.null? (ret.iloc 0 . 0))
       (push.car.iloc (0 . 0) "./boot/macro/syntmp.scm" . 123951)
       (cadr.iloc (0 . 0) "./boot/macro/syntmp.scm" . 123962)
       (ret.cons "./boot/macro/syntmp.scm" . 123945))
     (push.iloc.1 . 3)
     (apply.gloc.of
       map
       (map (lambda (|slot`1389*|)
              (and (memq (car |slot`1389*|) |ids`1387*|)
                   (if (< (cdr (assq (car |slot`1389*|) |ranks`1385*|)) |depth`1385*|)
                       |slot`1389*|
                       (if (null? (cdr |slot`1389*|))
                           |slot`1389*|
                           (cons (car |slot`1389*|) (cadr |slot`1389*|))))))
            |vars`1385*|)))
   (push)
   (apply.gloc.of
     filter
     (filter
       values
       (map (lambda (|slot`1389*|)
              (and (memq (car |slot`1389*|) |ids`1387*|)
                   (if (< (cdr (assq (car |slot`1389*|) |ranks`1385*|)) |depth`1385*|)
                       |slot`1389*|
                       (if (null? (cdr |slot`1389*|))
                           |slot`1389*|
                           (cons (car |slot`1389*|) (cadr |slot`1389*|))))))
            |vars`1385*|))))
 (set.gloc.of collect-ellipsis-vars)
 (ret.const.unspec))
((close
   (3 0 . consume-ellipsis-vars)
   (push.const . #f)
   (push.const . #f)
   (extend . 2)
   (call
     (extend.enclose
       (1 0 . loop)
       (iloc.0 . 0)
       (if.null?.ret.const)
       (call
         (touch.gloc.of rank-of)
         (push.iloc.0 . 0)
         (push.subr.gloc.of caar 1 "./boot/macro/syntmp.scm" . 138275)
         (push.iloc 3 . 0)
         (apply.gloc.of rank-of "./boot/macro/syntmp.scm" . 138266))
       (<.iloc (3 . 1) "./boot/macro/syntmp.scm" . 138263)
       (if.true
         (push.car.iloc (0 . 0) "./boot/macro/syntmp.scm" . 139293)
         (call
           (push.cdr.iloc (0 . 0) "./boot/macro/syntmp.scm" . 139309)
           (apply.iloc (1 . 0) "./boot/macro/syntmp.scm" . 139303))
         (ret.cons "./boot/macro/syntmp.scm" . 139287))
       (push.iloc.0 . 0)
       (subr.gloc.of cdar 1 "./boot/macro/syntmp.scm" . 140318)
       (if.null?
         (push.cdr.iloc (0 . 0) "./boot/macro/syntmp.scm" . 141341)
         (apply.iloc (1 . 0) "./boot/macro/syntmp.scm" . 141335))
       (push.iloc.0 . 0)
       (subr.gloc.of cddar 1 "./boot/macro/syntmp.scm" . 142366)
       (if.null?
         (const . #t)
         (set.iloc (2 . 0) "./boot/macro/syntmp.scm" . 143383)
         (push.cdr.iloc (0 . 0) "./boot/macro/syntmp.scm" . 144413)
         (apply.iloc (1 . 0) "./boot/macro/syntmp.scm" . 144407))
       (call
         (push.iloc.0 . 0)
         (push.subr.gloc.of cdar 1 "./boot/macro/syntmp.scm" . 146475)
         (subr.gloc.of circular-list? 1 "./boot/macro/syntmp.scm" . 146459)
         (if.true.ret)
         (const . #t)
         (set.iloc (2 . 1) "./boot/macro/syntmp.scm" . 146487)
         (ret.const.unspec))
       (touch.gloc.of acons)
       (push.iloc.0 . 0)
       (push.subr.gloc.of caar 1 "./boot/macro/syntmp.scm" . 147486)
       (push.iloc.0 . 0)
       (push.subr.gloc.of cddar 1 "./boot/macro/syntmp.scm" . 147497)
       (call
         (push.cdr.iloc (0 . 0) "./boot/macro/syntmp.scm" . 147515)
         (apply.iloc (1 . 0) "./boot/macro/syntmp.scm" . 147509))
       (push)
       (apply.gloc.of acons "./boot/macro/syntmp.scm" . 147479))
     (push.iloc 2 . 2)
     (apply.iloc (0 . 0) "./boot/macro/syntmp.scm" . 137232))
   (push)
   (extend . 1)
   (iloc.1 . 1)
   (if.true (iloc.1 . 0) (if.true.ret.const . #f) (ret.iloc 0 . 0))
   (iloc.1 . 0)
   (if.true.ret)
   (ret.const))
 (set.gloc.of consume-ellipsis-vars)
 (ret.const.unspec))
((close
   (3 0 . contain-rank-moved-var?)
   (extend.enclose+
     (2 0 . traverse-escaped)
     (extend.enclose+
       (2 0 . loop)
       (iloc.0 . 0)
       (if.symbol?
         (push.const . 0)
         (call
           (touch.gloc.of rank-of)
           (push.iloc.0 . 0)
           (push.iloc 4 . 1)
           (apply.gloc.of rank-of "./boot/macro/syntmp.scm" . 159767))
         (push)
         (push.iloc.0 . 1)
         (ret.subr.gloc.of < "./boot/macro/syntmp.scm" . 159762))
       (iloc.0 . 0)
       (if.pair?
         (call
           (push.car.iloc (0 . 0) "./boot/macro/syntmp.scm" . 161820)
           (push.iloc.0 . 1)
           (apply.iloc+ (1 . 0) "./boot/macro/syntmp.scm" . 161814))
         (if.true.ret)
         (push.cdr.iloc (0 . 0) "./boot/macro/syntmp.scm" . 162844)
         (push.iloc.0 . 1)
         (apply.iloc+ (1 . 0) "./boot/macro/syntmp.scm" . 162838))
       (push.iloc.0 . 0)
       (subr.gloc.of vector? 1 "./boot/macro/syntmp.scm" . 163858)
       (if.false.ret)
       (push.iloc.0 . 0)
       (push.subr.gloc.of vector->list 1 "./boot/macro/syntmp.scm" . 164888)
       (push.iloc.0 . 1)
       (apply.iloc+ (1 . 0) "./boot/macro/syntmp.scm" . 164882))
     (push.iloc.1 . 0)
     (push.iloc.1 . 1)
     (apply.iloc+ (0 . 0) "./boot/macro/syntmp.scm" . 158731))
   (extend.enclose
     (2 0 . loop)
     (iloc.0 . 0)
     (if.symbol?
       (push.const . 0)
       (call
         (touch.gloc.of rank-of)
         (push.iloc.0 . 0)
         (push.iloc 3 . 1)
         (apply.gloc.of rank-of "./boot/macro/syntmp.scm" . 170003))
       (push)
       (push.iloc.0 . 1)
       (ret.subr.gloc.of < "./boot/macro/syntmp.scm" . 169998))
     (call
       (touch.gloc.of ellipsis-quote?)
       (push.iloc.0 . 0)
       (apply.gloc.of ellipsis-quote? "./boot/macro/syntmp.scm" . 171022))
     (if.true
       (push.cadr.iloc (0 . 0) "./boot/macro/syntmp.scm" . 172064)
       (push.iloc.0 . 1)
       (apply.iloc+ (2 . 0) "./boot/macro/syntmp.scm" . 172046))
     (call
       (touch.gloc.of ellipsis-splicing-pair?)
       (push.iloc.0 . 0)
       (apply.gloc.of ellipsis-splicing-pair? "./boot/macro/syntmp.scm" . 173070))
     (if.true
       (push.close
         (0 0)
         (touch.gloc.of parse-ellipsis-splicing)
         (push.iloc.1 . 0)
         (apply.gloc.of parse-ellipsis-splicing "./boot/macro/syntmp.scm" . 174124))
       (push.close
         (3 0)
         (call
           (push.iloc.0 . 0)
           (push.n+.iloc (1 . 1) 1 "./boot/macro/syntmp.scm" . 175135)
           (apply.iloc (2 . 0) "./boot/macro/syntmp.scm" . 175124))
         (if.true.ret)
         (push.iloc.0 . 1)
         (push.iloc.1 . 1)
         (apply.iloc (2 . 0) "./boot/macro/syntmp.scm" . 176148))
       (apply.gloc.of
         |.call-with-values|
         (|.call-with-values|
           (lambda () (parse-ellipsis-splicing |lst`1418*|))
           (lambda (|body`1420*| |tail`1420*| |len`1420*|)
             (or (|loop`1417*| |body`1420*| (+ |depth`1418*| 1))
                 (|loop`1417*| |tail`1420*| |depth`1418*|))))))
     (call
       (touch.gloc.of ellipsis-pair?)
       (push.iloc.0 . 0)
       (apply.gloc.of ellipsis-pair? "./boot/macro/syntmp.scm" . 177166))
     (if.true
       (call
         (push.car.iloc (0 . 0) "./boot/macro/syntmp.scm" . 178200)
         (push.n+.iloc (0 . 1) 1 "./boot/macro/syntmp.scm" . 178210)
         (apply.iloc (1 . 0) "./boot/macro/syntmp.scm" . 178194))
       (if.true.ret)
       (push.cddr.iloc (0 . 0) "./boot/macro/syntmp.scm" . 179224)
       (push.iloc.0 . 1)
       (apply.iloc (1 . 0) "./boot/macro/syntmp.scm" . 179218))
     (iloc.0 . 0)
     (if.pair?
       (call
         (push.car.iloc (0 . 0) "./boot/macro/syntmp.scm" . 181272)
         (push.iloc.0 . 1)
         (apply.iloc (1 . 0) "./boot/macro/syntmp.scm" . 181266))
       (if.true.ret)
       (push.cdr.iloc (0 . 0) "./boot/macro/syntmp.scm" . 182296)
       (push.iloc.0 . 1)
       (apply.iloc (1 . 0) "./boot/macro/syntmp.scm" . 182290))
     (push.iloc.0 . 0)
     (subr.gloc.of vector? 1 "./boot/macro/syntmp.scm" . 183310)
     (if.false.ret)
     (push.iloc.0 . 0)
     (push.subr.gloc.of vector->list 1 "./boot/macro/syntmp.scm" . 184340)
     (push.iloc.0 . 1)
     (apply.iloc (1 . 0) "./boot/macro/syntmp.scm" . 184334))
   (push.iloc 2 . 0)
   (push.const . 0)
   (apply.iloc (0 . 0) "./boot/macro/syntmp.scm" . 168967))
 (set.gloc.of contain-rank-moved-var?)
 (ret.const.unspec))
((close
   (3 0 . rewrite-template-ranks-vars)
   (subr.gloc.of make-core-hashtable 0)
   (push)
   (subr.gloc.of make-core-hashtable 0)
   (push)
   (extend . 2)
   (extend.unbound . 2)
   (push.close
     (2 0 . revealed)
     (push.const . 0)
     (call
       (touch.gloc.of rank-of)
       (push.iloc.0 . 0)
       (push.iloc 3 . 1)
       (apply.gloc.of rank-of "./boot/macro/syntmp.scm" . 201752))
     (push)
     (push.iloc.0 . 1)
     (subr.gloc.of < 3 "./boot/macro/syntmp.scm" . 201747)
     (if.true
       (push.const . "~a:~a")
       (call (apply.gloc.of generate-temporary-symbol "./boot/macro/syntmp.scm" . 202818))
       (push)
       (push.iloc.0 . 0)
       (push.subr.gloc.of format 3 "./boot/macro/syntmp.scm" . 202802)
       (push.subr.gloc.of string->symbol 1 "./boot/macro/syntmp.scm" . 202786)
       (extend . 1)
       (call
         (push.iloc 3 . 0)
         (push.iloc.0 . 0)
         (push.const . #f)
         (subr.gloc.of core-hashtable-ref 3 "./boot/macro/syntmp.scm" . 203801)
         (if.true.ret)
         (extend.enclose+
           (2 0 . loop)
           (>n.iloc (0 . 0) 0 "./boot/macro/syntmp.scm" . 205858)
           (if.true
             (push.n+.iloc (0 . 0) -1 "./boot/macro/syntmp.scm" . 206888)
             (call
               (touch.gloc.of |make-infinite-list`1428*|)
               (push.car.iloc (0 . 1) "./boot/macro/syntmp.scm" . 206922)
               (apply.gloc.of |make-infinite-list`1428*| "./boot/macro/syntmp.scm" . 206902))
             (push)
             (push.subr.gloc.of list 1 "./boot/macro/syntmp.scm" . 206896)
             (apply.iloc+ (1 . 0) "./boot/macro/syntmp.scm" . 206882))
           (push.iloc 5 . 0)
           (push.iloc 2 . 0)
           (push.iloc 3 . 1)
           (subr.gloc.of core-hashtable-set! 3 "./boot/macro/syntmp.scm" . 208930)
           (push.iloc 5 . 1)
           (push.iloc 2 . 0)
           (push.iloc.0 . 1)
           (ret.subr.gloc.of core-hashtable-set! "./boot/macro/syntmp.scm" . 209954))
         (push.iloc 2 . 1)
         (call
           (touch.gloc.of rank-of)
           (push.iloc 2 . 0)
           (push.iloc 5 . 1)
           (apply.gloc.of rank-of "./boot/macro/syntmp.scm" . 204848))
         (push)
         (push.subr.gloc.of - 2 "./boot/macro/syntmp.scm" . 204839)
         (call
           (touch.gloc.of subform-of)
           (push.iloc 2 . 0)
           (push.iloc 5 . 2)
           (apply.gloc.of subform-of "./boot/macro/syntmp.scm" . 204876))
         (push)
         (apply.iloc+ (0 . 0) "./boot/macro/syntmp.scm" . 205851))
       (ret.iloc 0 . 0))
     (ret.iloc 0 . 0))
   (push.close
     (2 0 . traverse-escaped)
     (extend.enclose
       (2 0 . loop)
       (iloc.0 . 0)
       (if.symbol?
         (push.iloc.0 . 0)
         (push.iloc.0 . 1)
         (apply.iloc (3 . 0) "./boot/macro/syntmp.scm" . 218136))
       (iloc.0 . 0)
       (if.pair?
         (call
           (push.car.iloc (0 . 0) "./boot/macro/syntmp.scm" . 220196)
           (push.iloc.0 . 1)
           (apply.iloc (1 . 0) "./boot/macro/syntmp.scm" . 220190))
         (push)
         (call
           (push.cdr.iloc (0 . 0) "./boot/macro/syntmp.scm" . 221220)
           (push.iloc.0 . 1)
           (apply.iloc (1 . 0) "./boot/macro/syntmp.scm" . 221214))
         (ret.cons "./boot/macro/syntmp.scm" . 220184))
       (push.iloc.0 . 0)
       (subr.gloc.of vector? 1 "./boot/macro/syntmp.scm" . 222232)
       (if.true
         (call
           (push.iloc.0 . 0)
           (push.subr.gloc.of vector->list 1 "./boot/macro/syntmp.scm" . 223276)
           (push.iloc.0 . 1)
           (apply.iloc (1 . 0) "./boot/macro/syntmp.scm" . 223270))
         (push)
         (ret.subr.gloc.of list->vector "./boot/macro/syntmp.scm" . 223256))
       (ret.iloc 0 . 0))
     (push.iloc.1 . 0)
     (push.iloc.1 . 1)
     (apply.iloc (0 . 0) "./boot/macro/syntmp.scm" . 217105))
   (enclose . 2)
   (call
     (extend.enclose
       (2 0 . loop)
       (iloc.0 . 0)
       (if.symbol?
         (push.iloc.0 . 0)
         (push.iloc.0 . 1)
         (apply.iloc (2 . 0) "./boot/macro/syntmp.scm" . 229403))
       (call
         (touch.gloc.of ellipsis-quote?)
         (push.iloc.0 . 0)
         (apply.gloc.of ellipsis-quote? "./boot/macro/syntmp.scm" . 230427))
       (if.true
         (push.car.iloc (0 . 0) "./boot/macro/syntmp.scm" . 231457)
         (call
           (push.cdr.iloc (0 . 0) "./boot/macro/syntmp.scm" . 232499)
           (push.iloc.0 . 1)
           (apply.iloc (2 . 1) "./boot/macro/syntmp.scm" . 232481))
         (ret.cons "./boot/macro/syntmp.scm" . 231451))
       (call
         (touch.gloc.of ellipsis-splicing-pair?)
         (push.iloc.0 . 0)
         (apply.gloc.of ellipsis-splicing-pair? "./boot/macro/syntmp.scm" . 233499))
       (if.true
         (push.close
           (0 0)
           (touch.gloc.of parse-ellipsis-splicing)
           (push.iloc.1 . 0)
           (apply.gloc.of parse-ellipsis-splicing "./boot/macro/syntmp.scm" . 234553))
         (push.close
           (3 0)
           (call
             (push.iloc.0 . 0)
             (push.n+.iloc (1 . 1) 1 "./boot/macro/syntmp.scm" . 235568)
             (apply.iloc (2 . 0) "./boot/macro/syntmp.scm" . 235557))
           (push)
           (push.const . ...)
           (call
             (push.iloc.0 . 1)
             (push.iloc.1 . 1)
             (apply.iloc (2 . 0) "./boot/macro/syntmp.scm" . 235592))
           (push.cons)
           (ret.subr.gloc.of append "./boot/macro/syntmp.scm" . 235549))
         (apply.gloc.of
           |.call-with-values|
           (|.call-with-values|
             (lambda () (parse-ellipsis-splicing |lst`1454*|))
             (lambda (|body`1456*| |tail`1456*| |len`1456*|)
               (append
                 (|loop`1453*| |body`1456*| (+ |depth`1454*| 1))
                 (cons '... (|loop`1453*| |tail`1456*| |depth`1454*|)))))))
       (call
         (touch.gloc.of ellipsis-pair?)
         (push.iloc.0 . 0)
         (apply.gloc.of ellipsis-pair? "./boot/macro/syntmp.scm" . 236571))
       (if.true
         (call
           (push.car.iloc (0 . 0) "./boot/macro/syntmp.scm" . 237607)
           (push.n+.iloc (0 . 1) 1 "./boot/macro/syntmp.scm" . 237617)
           (apply.iloc (1 . 0) "./boot/macro/syntmp.scm" . 237601))
         (push)
         (push.const . ...)
         (call
           (push.cddr.iloc (0 . 0) "./boot/macro/syntmp.scm" . 238642)
           (push.iloc.0 . 1)
           (apply.iloc (1 . 0) "./boot/macro/syntmp.scm" . 238636))
         (push)
         (subr.gloc.of cons 2 "./boot/macro/syntmp.scm" . 238625)
         (ret.cons "./boot/macro/syntmp.scm" . 237595))
       (iloc.0 . 0)
       (if.pair?
         (call
           (push.car.iloc (0 . 0) "./boot/macro/syntmp.scm" . 240679)
           (push.iloc.0 . 1)
           (apply.iloc (1 . 0) "./boot/macro/syntmp.scm" . 240673))
         (push)
         (call
           (push.cdr.iloc (0 . 0) "./boot/macro/syntmp.scm" . 241703)
           (push.iloc.0 . 1)
           (apply.iloc (1 . 0) "./boot/macro/syntmp.scm" . 241697))
         (ret.cons "./boot/macro/syntmp.scm" . 240667))
       (push.iloc.0 . 0)
       (subr.gloc.of vector? 1 "./boot/macro/syntmp.scm" . 242715)
       (if.true
         (call
           (push.iloc.0 . 0)
           (push.subr.gloc.of vector->list 1 "./boot/macro/syntmp.scm" . 243759)
           (push.iloc.0 . 1)
           (apply.iloc (1 . 0) "./boot/macro/syntmp.scm" . 243753))
         (push)
         (ret.subr.gloc.of list->vector "./boot/macro/syntmp.scm" . 243739))
       (ret.iloc 0 . 0))
     (push.iloc 3 . 0)
     (push.const . 0)
     (apply.iloc (0 . 0) "./boot/macro/syntmp.scm" . 228372))
   (push)
   (push.iloc 2 . 1)
   (push.iloc.1 . 0)
   (push.subr.gloc.of core-hashtable->alist 1 "./boot/macro/syntmp.scm" . 246819)
   (push.subr.gloc.of append 2 "./boot/macro/syntmp.scm" . 246805)
   (push.iloc 2 . 2)
   (push.iloc.1 . 1)
   (push.subr.gloc.of core-hashtable->alist 1 "./boot/macro/syntmp.scm" . 247842)
   (push.subr.gloc.of append 2 "./boot/macro/syntmp.scm" . 247829)
   (ret.subr.gloc.of
     values
     (values
       (letrec* ((|loop`1453*|
                   (lambda (|lst`1454*| |depth`1454*|)
                     (if (symbol? |lst`1454*|)
                         (|revealed`1428*| |lst`1454*| |depth`1454*|)
                         (if (ellipsis-quote? |lst`1454*|)
                             (cons (car |lst`1454*|)
                                   (|traverse-escaped`1428*| (cdr |lst`1454*|) |depth`1454*|))
                             (if (ellipsis-splicing-pair? |lst`1454*|)
                                 (|.call-with-values|
                                   (lambda () (parse-ellipsis-splicing |lst`1454*|))
                                   (lambda (|body`1456*| |tail`1456*| |len`1456*|)
                                     (append
                                       (|loop`1453*| |body`1456*| (+ |depth`1454*| 1))
                                       (cons '... (|loop`1453*| |tail`1456*| |depth`1454*|)))))
                                 (if (ellipsis-pair? |lst`1454*|)
                                     (cons (|loop`1453*| (car |lst`1454*|) (+ |depth`1454*| 1))
                                           (cons '...
                                                 (|loop`1453*| (cddr |lst`1454*|) |depth`1454*|)))
                                     (if (pair? |lst`1454*|)
                                         (cons (|loop`1453*| (car |lst`1454*|) |depth`1454*|)
                                               (|loop`1453*| (cdr |lst`1454*|) |depth`1454*|))
                                         (if (vector? |lst`1454*|)
                                             (list->vector
                                               (|loop`1453*|
                                                 (vector->list |lst`1454*|)
                                                 |depth`1454*|))
                                             |lst`1454*|)))))))))
         (|loop`1453*| |tmpl`1425*| 0))
       (append |ranks`1425*| (core-hashtable->alist |moved-ranks`1427*|))
       (append |vars`1425*| (core-hashtable->alist |moved-vars`1427*|)))))
 (set.gloc.of |rewrite-template-ranks-vars`1424*|)
 (close
   (1 0 . make-infinite-list)
   (push.iloc.0 . 0)
   (push.subr.gloc.of list 1 "./boot/macro/syntmp.scm" . 196634)
   (extend . 1)
   (push.iloc.0 . 0)
   (push.iloc.0 . 0)
   (subr.gloc.of set-cdr! 2 "./boot/macro/syntmp.scm" . 197656)
   (ret.iloc 0 . 0))
 (set.gloc.of |make-infinite-list`1428*|)
 (close
   (3 0 . adapt-to-rank-moved-vars)
   (call
     (touch.gloc.of contain-rank-moved-var?)
     (push.iloc.0 . 0)
     (push.iloc.0 . 1)
     (push.iloc.0 . 2)
     (apply.gloc.of contain-rank-moved-var? "./boot/macro/syntmp.scm" . 249865))
   (if.true
     (touch.gloc.of |rewrite-template-ranks-vars`1424*|)
     (push.iloc.0 . 0)
     (push.iloc.0 . 1)
     (push.iloc.0 . 2)
     (apply.gloc.of |rewrite-template-ranks-vars`1424*| "./boot/macro/syntmp.scm" . 250889))
   (push.iloc.0 . 0)
   (push.iloc.0 . 1)
   (push.iloc.0 . 2)
   (ret.subr.gloc.of values "./boot/macro/syntmp.scm" . 251913))
 (set.gloc.of adapt-to-rank-moved-vars)
 (ret.const.unspec))
((close
   (1 0 . remove-duplicates)
   (call
     (extend.enclose+
       (1 0 . loop)
       (iloc.0 . 0)
       (if.null? (ret.iloc 2 . 0))
       (push.iloc.0 . 0)
       (push.subr.gloc.of caar 1 "./boot/macro/syntmp.scm" . 261148)
       (push.cdr.iloc (0 . 0) "./boot/macro/syntmp.scm" . 261159)
       (subr.gloc.of assq 2 "./boot/macro/syntmp.scm" . 261142)
       (if.true.ret.const . #f)
       (push.cdr.iloc (0 . 0) "./boot/macro/syntmp.scm" . 262177)
       (apply.iloc+ (1 . 0) "./boot/macro/syntmp.scm" . 262171))
     (push.iloc.1 . 0)
     (apply.iloc+ (0 . 0) "./boot/macro/syntmp.scm" . 260111))
   (if.true.ret)
   (touch.gloc.of |loop`1473*|)
   (push.iloc.0 . 0)
   (push.const)
   (apply.gloc.of |loop`1473*| "./boot/macro/syntmp.scm" . 264207))
 (set.gloc.of |remove-duplicates`1462*|)
 (close
   (2 0 . loop)
   (iloc.0 . 0)
   (if.null? (ret.iloc 0 . 1))
   (push.iloc.0 . 0)
   (push.subr.gloc.of caar 1 "./boot/macro/syntmp.scm" . 265244)
   (push.iloc.0 . 1)
   (subr.gloc.of assq 2 "./boot/macro/syntmp.scm" . 265238)
   (if.true
     (touch.gloc.of |loop`1473*|)
     (push.cdr.iloc (0 . 0) "./boot/macro/syntmp.scm" . 266268)
     (push.iloc.0 . 1)
     (apply.gloc.of |loop`1473*| "./boot/macro/syntmp.scm" . 266262))
   (touch.gloc.of |loop`1473*|)
   (push.cdr.iloc (0 . 0) "./boot/macro/syntmp.scm" . 268316)
   (push.car.iloc (0 . 0) "./boot/macro/syntmp.scm" . 268332)
   (iloc.0 . 1)
   (push.cons)
   (apply.gloc.of |loop`1473*| "./boot/macro/syntmp.scm" . 268310))
 (set.gloc.of |loop`1473*|)
 (close
   (5 0 . transcribe-template)
   (push.close
     (0 0)
     (touch.gloc.of adapt-to-rank-moved-vars)
     (push.iloc.1 . 0)
     (push.iloc.1 . 1)
     (call
       (touch.gloc.of |remove-duplicates`1462*|)
       (push.iloc.1 . 2)
       (apply.gloc.of |remove-duplicates`1462*| "./boot/macro/syntmp.scm" . 270416))
     (push)
     (apply.gloc.of adapt-to-rank-moved-vars "./boot/macro/syntmp.scm" . 270373))
   (push.close
     (3 0)
     (extend.unbound . 5)
     (push.close+
       (2 0 . expand-var)
       (push.iloc.0 . 0)
       (push.iloc.0 . 1)
       (push.subr.gloc.of assq 2 "./boot/macro/syntmp.scm" . 274450)
       (extend . 1)
       (iloc.0 . 0)
       (if.true
         (cdr.iloc (0 . 0) "./boot/macro/syntmp.scm" . 276517)
         (if.null?.ret.const)
         (iloc 4 . 4)
         (if.true
           (push.cadr.iloc (0 . 0) "./boot/macro/syntmp.scm" . 277545)
           (apply.iloc (4 . 4) "./boot/macro/syntmp.scm" . 277539))
         (push.iloc.0 . 0)
         (ret.subr.gloc.of cadr "./boot/macro/syntmp.scm" . 278563))
       (call
         (push.iloc.1 . 0)
         (push.iloc 4 . 1)
         (subr.gloc.of assq 2 "./boot/macro/syntmp.scm" . 279575)
         (if.false.ret)
         (push.iloc.1 . 0)
         (push.iloc 4 . 2)
         (push.subr.gloc.of assq 2 "./boot/macro/syntmp.scm" . 279601)
         (ret.subr.gloc.of not "./boot/macro/syntmp.scm" . 279596))
       (if.true
         (push.const . "syntax template")
         (push.const . "pattern variable ~u out of context")
         (push.iloc.1 . 0)
         (push.subr.gloc.of format 2 "./boot/macro/syntmp.scm" . 280630)
         (push.iloc 4 . 0)
         (apply.gloc.of syntax-violation "./boot/macro/syntmp.scm" . 280594))
       (push.const . "syntax template")
       (push.const . "subforms have different size of matched input")
       (push.const . template:)
       (push.iloc 4 . 0)
       (push.subr.gloc.of |.list| 2 "./boot/macro/syntmp.scm" . 282642)
       (push.const . subforms:)
       (iloc 4 . 2)
       (push.cons)
       (apply.gloc.of assertion-violation "./boot/macro/syntmp.scm" . 282642))
     (push.close+
       (2 0 . expand-ellipsis-var)
       (push.iloc.0 . 0)
       (push.iloc.0 . 1)
       (push.subr.gloc.of assq 2 "./boot/macro/syntmp.scm" . 287762)
       (extend . 1)
       (iloc.0 . 0)
       (if.true
         (cdr.iloc (0 . 0) "./boot/macro/syntmp.scm" . 289829)
         (if.null?.ret.const)
         (iloc 4 . 4)
         (if.true
           (push.iloc 4 . 4)
           (push.cadr.iloc (0 . 0) "./boot/macro/syntmp.scm" . 290861)
           (apply.gloc.of map "./boot/macro/syntmp.scm" . 290851))
         (push.iloc.0 . 0)
         (ret.subr.gloc.of cadr "./boot/macro/syntmp.scm" . 291875))
       (call
         (push.iloc.1 . 0)
         (push.iloc 4 . 1)
         (subr.gloc.of assq 2 "./boot/macro/syntmp.scm" . 292887)
         (if.false.ret)
         (push.iloc.1 . 0)
         (push.iloc 4 . 2)
         (push.subr.gloc.of assq 2 "./boot/macro/syntmp.scm" . 292913)
         (ret.subr.gloc.of not "./boot/macro/syntmp.scm" . 292908))
       (if.true
         (push.const . "syntax template")
         (push.const . "pattern variable ~u out of context")
         (push.iloc.1 . 0)
         (push.subr.gloc.of format 2 "./boot/macro/syntmp.scm" . 293942)
         (push.iloc 4 . 0)
         (apply.gloc.of syntax-violation "./boot/macro/syntmp.scm" . 293906))
       (push.const . "syntax template")
       (push.const . "subforms have different size of matched input")
       (push.const . template:)
       (push.iloc 4 . 0)
       (push.subr.gloc.of |.list| 2 "./boot/macro/syntmp.scm" . 295954)
       (push.const . subforms:)
       (iloc 4 . 2)
       (push.cons)
       (apply.gloc.of assertion-violation "./boot/macro/syntmp.scm" . 295954))
     (push.close
       (3 0 . expand-ellipsis-template)
       (extend.enclose+
         (2 0 . loop)
         (iloc.0 . 1)
         (if.pair?
           (call
             (push.iloc 2 . 0)
             (push.iloc 2 . 1)
             (push.iloc.0 . 1)
             (apply.iloc (3 . 4) "./boot/macro/syntmp.scm" . 303136))
           (push)
           (iloc.0 . 0)
           (push.cons)
           (call
             (touch.gloc.of consume-ellipsis-vars)
             (push.iloc 4 . 1)
             (push.iloc 2 . 1)
             (push.iloc.0 . 1)
             (apply.gloc.of consume-ellipsis-vars "./boot/macro/syntmp.scm" . 304154))
           (push)
           (apply.iloc+ (1 . 0) "./boot/macro/syntmp.scm" . 303124))
         (iloc.0 . 1)
         (if.null?.ret.const)
         (push.iloc.0 . 1)
         (const . #t)
         (if.eq? (push.iloc.0 . 0) (ret.subr.gloc.of reverse "./boot/macro/syntmp.scm" . 306213))
         (push.const . "syntax template")
         (push.const . "subforms have different size of matched input")
         (push.const . template:)
         (push.iloc 5 . 0)
         (push.subr.gloc.of |.list| 2 "./boot/macro/syntmp.scm" . 308244)
         (push.const . subforms:)
         (iloc 5 . 2)
         (push.cons)
         (apply.gloc.of assertion-violation "./boot/macro/syntmp.scm" . 308244))
       (push.const)
       (call
         (touch.gloc.of collect-ellipsis-vars)
         (push.iloc.1 . 0)
         (push.iloc 3 . 1)
         (push.iloc.1 . 1)
         (push.iloc.1 . 2)
         (apply.gloc.of collect-ellipsis-vars "./boot/macro/syntmp.scm" . 301098))
       (push)
       (apply.iloc+ (0 . 0) "./boot/macro/syntmp.scm" . 302093))
     (push.close+
       (3 0 . expand-escaped-template)
       (iloc.0 . 0)
       (if.symbol?
         (call
           (touch.gloc.of rank-of)
           (push.iloc.0 . 0)
           (push.iloc 2 . 1)
           (apply.gloc.of rank-of "./boot/macro/syntmp.scm" . 314393))
         (push)
         (push.const . 0)
         (subr.gloc.of < 2 "./boot/macro/syntmp.scm" . 314390)
         (if.true
           (push.iloc.0 . 0)
           (push.iloc 3 . 3)
           (push.subr.gloc.of assq 2 "./boot/macro/syntmp.scm" . 315421)
           (extend . 1)
           (iloc.0 . 0)
           (if.true (push.iloc.0 . 0) (ret.subr.gloc.of cdr (cdr |.L425`1501*|)))
           (ret.iloc 1 . 0))
         (push.iloc.0 . 0)
         (push.iloc.0 . 2)
         (apply.iloc+ (1 . 0) "./boot/macro/syntmp.scm" . 316438))
       (iloc.0 . 0)
       (if.pair?
         (call
           (iloc 3 . 4)
           (if.false.ret)
           (car.iloc (0 . 0) "./boot/macro/syntmp.scm" . 318503)
           (ret.null? "./boot/macro/syntmp.scm" . 318496))
         (if.true
           (push.const . |.&NIL|)
           (call
             (push.cdr.iloc (0 . 0) "./boot/macro/syntmp.scm" . 320565)
             (push.iloc.0 . 1)
             (push.iloc.0 . 2)
             (apply.iloc+ (1 . 3) "./boot/macro/syntmp.scm" . 320540))
           (ret.cons "./boot/macro/syntmp.scm" . 319510))
         (call
           (push.car.iloc (0 . 0) "./boot/macro/syntmp.scm" . 321589)
           (push.iloc.0 . 1)
           (push.iloc.0 . 2)
           (apply.iloc+ (1 . 3) "./boot/macro/syntmp.scm" . 321564))
         (push)
         (call
           (push.cdr.iloc (0 . 0) "./boot/macro/syntmp.scm" . 322613)
           (push.iloc.0 . 1)
           (push.iloc.0 . 2)
           (apply.iloc+ (1 . 3) "./boot/macro/syntmp.scm" . 322588))
         (ret.cons "./boot/macro/syntmp.scm" . 321558))
       (push.iloc.0 . 0)
       (subr.gloc.of vector? 1 "./boot/macro/syntmp.scm" . 323602)
       (if.true
         (call
           (push.iloc.0 . 0)
           (push.subr.gloc.of vector->list 1 "./boot/macro/syntmp.scm" . 324665)
           (push.iloc.0 . 1)
           (push.iloc.0 . 2)
           (apply.iloc+ (1 . 3) "./boot/macro/syntmp.scm" . 324640))
         (push)
         (ret.subr.gloc.of list->vector "./boot/macro/syntmp.scm" . 324626))
       (ret.iloc 0 . 0))
     (push.close
       (3 0 . expand-template)
       (iloc.0 . 0)
       (if.symbol?
         (call
           (touch.gloc.of rank-of)
           (push.iloc.0 . 0)
           (push.iloc 2 . 1)
           (apply.gloc.of rank-of "./boot/macro/syntmp.scm" . 330777))
         (push)
         (push.const . 0)
         (subr.gloc.of < 2 "./boot/macro/syntmp.scm" . 330774)
         (if.true
           (push.iloc.0 . 0)
           (push.iloc 3 . 3)
           (push.subr.gloc.of assq 2 "./boot/macro/syntmp.scm" . 331805)
           (extend . 1)
           (iloc.0 . 0)
           (if.true (push.iloc.0 . 0) (ret.subr.gloc.of cdr (cdr |.L426`1505*|)))
           (ret.iloc 1 . 0))
         (push.iloc.0 . 0)
         (push.iloc.0 . 2)
         (apply.iloc+ (1 . 0) "./boot/macro/syntmp.scm" . 332822))
       (call
         (touch.gloc.of ellipsis-quote?)
         (push.iloc.0 . 0)
         (apply.gloc.of ellipsis-quote? "./boot/macro/syntmp.scm" . 333842))
       (if.true
         (push.cadr.iloc (0 . 0) "./boot/macro/syntmp.scm" . 334891)
         (push.iloc.0 . 1)
         (push.iloc.0 . 2)
         (apply.iloc+ (1 . 3) "./boot/macro/syntmp.scm" . 334866))
       (call
         (touch.gloc.of ellipsis-splicing-pair?)
         (push.iloc.0 . 0)
         (apply.gloc.of ellipsis-splicing-pair? "./boot/macro/syntmp.scm" . 335890))
       (if.true
         (push.close
           (0 0)
           (touch.gloc.of parse-ellipsis-splicing)
           (push.iloc.1 . 0)
           (apply.gloc.of parse-ellipsis-splicing "./boot/macro/syntmp.scm" . 336944))
         (push.close
           (3 0)
           (call
             (push.gloc.of append)
             (call
               (push.iloc.0 . 0)
               (push.n+.iloc (1 . 1) 1 "./boot/macro/syntmp.scm" . 337993)
               (push.iloc.1 . 2)
               (apply.iloc (2 . 2) "./boot/macro/syntmp.scm" . 337962))
             (push)
             (apply.gloc.of apply "./boot/macro/syntmp.scm" . 337948))
           (push)
           (call
             (push.iloc.0 . 1)
             (push.iloc.1 . 1)
             (push.iloc.1 . 2)
             (apply.iloc (2 . 4) "./boot/macro/syntmp.scm" . 338972))
           (push)
           (ret.subr.gloc.of append "./boot/macro/syntmp.scm" . 337940))
         (apply.gloc.of |.call-with-values| "./boot/macro/syntmp.scm" . 335890))
       (call
         (touch.gloc.of ellipsis-pair?)
         (push.iloc.0 . 0)
         (apply.gloc.of ellipsis-pair? "./boot/macro/syntmp.scm" . 339986))
       (if.true
         (car.iloc (0 . 0) "./boot/macro/syntmp.scm" . 341026)
         (if.symbol?
           (call
             (touch.gloc.of rank-of)
             (push.car.iloc (0 . 0) "./boot/macro/syntmp.scm" . 342062)
             (push.iloc 2 . 1)
             (apply.gloc.of rank-of "./boot/macro/syntmp.scm" . 342053))
           (push)
           (push.n+.iloc (0 . 1) 1 "./boot/macro/syntmp.scm" . 343082)
           (subr.gloc.of = 2 "./boot/macro/syntmp.scm" . 343074)
           (if.true
             (call
               (push.car.iloc (0 . 0) "./boot/macro/syntmp.scm" . 344127)
               (push.iloc.0 . 2)
               (apply.iloc+ (1 . 1) "./boot/macro/syntmp.scm" . 344106))
             (push)
             (call
               (push.cddr.iloc (0 . 0) "./boot/macro/syntmp.scm" . 345147)
               (push.iloc.0 . 1)
               (push.iloc.0 . 2)
               (apply.iloc (1 . 4) "./boot/macro/syntmp.scm" . 345130))
             (push)
             (ret.subr.gloc.of append "./boot/macro/syntmp.scm" . 344098))
           (ret.const.unspec))
         (car.iloc (0 . 0) "./boot/macro/syntmp.scm" . 346144)
         (if.pair?
           (call
             (push.car.iloc (0 . 0) "./boot/macro/syntmp.scm" . 347195)
             (push.n+.iloc (0 . 1) 1 "./boot/macro/syntmp.scm" . 347206)
             (push.iloc.0 . 2)
             (apply.iloc (1 . 2) "./boot/macro/syntmp.scm" . 347169))
           (push)
           (call
             (push.cddr.iloc (0 . 0) "./boot/macro/syntmp.scm" . 348210)
             (push.iloc.0 . 1)
             (push.iloc.0 . 2)
             (apply.iloc (1 . 4) "./boot/macro/syntmp.scm" . 348193))
           (push)
           (ret.subr.gloc.of append "./boot/macro/syntmp.scm" . 347161))
         (ret.const.unspec))
       (iloc.0 . 0)
       (if.pair?
         (call
           (iloc 3 . 4)
           (if.false.ret)
           (car.iloc (0 . 0) "./boot/macro/syntmp.scm" . 350247)
           (ret.null? "./boot/macro/syntmp.scm" . 350240))
         (if.true
           (push.const . |.&NIL|)
           (call
             (push.cdr.iloc (0 . 0) "./boot/macro/syntmp.scm" . 352301)
             (push.iloc.0 . 1)
             (push.iloc.0 . 2)
             (apply.iloc (1 . 4) "./boot/macro/syntmp.scm" . 352284))
           (ret.cons "./boot/macro/syntmp.scm" . 351254))
         (call
           (push.car.iloc (0 . 0) "./boot/macro/syntmp.scm" . 353325)
           (push.iloc.0 . 1)
           (push.iloc.0 . 2)
           (apply.iloc (1 . 4) "./boot/macro/syntmp.scm" . 353308))
         (push)
         (call
           (push.cdr.iloc (0 . 0) "./boot/macro/syntmp.scm" . 354349)
           (push.iloc.0 . 1)
           (push.iloc.0 . 2)
           (apply.iloc (1 . 4) "./boot/macro/syntmp.scm" . 354332))
         (ret.cons "./boot/macro/syntmp.scm" . 353302))
       (push.iloc.0 . 0)
       (subr.gloc.of vector? 1 "./boot/macro/syntmp.scm" . 355346)
       (if.true
         (call
           (push.iloc.0 . 0)
           (push.subr.gloc.of vector->list 1 "./boot/macro/syntmp.scm" . 356401)
           (push.iloc.0 . 1)
           (push.iloc.0 . 2)
           (apply.iloc (1 . 4) "./boot/macro/syntmp.scm" . 356384))
         (push)
         (ret.subr.gloc.of list->vector "./boot/macro/syntmp.scm" . 356370))
       (ret.iloc 0 . 0))
     (enclose . 5)
     (call
       (call
         (touch.gloc.of safe-length)
         (push.iloc.1 . 0)
         (apply.gloc.of safe-length "./boot/macro/syntmp.scm" . 359443))
       (push)
       (push.const . 2)
       (subr.gloc.of = 2 "./boot/macro/syntmp.scm" . 359440)
       (if.false.ret)
       (push.car.iloc (1 . 0) "./boot/macro/syntmp.scm" . 359470)
       (const . ...)
       (ret.eq? "./boot/macro/syntmp.scm" . 359465))
     (if.true
       (push.cadr.iloc (1 . 0) "./boot/macro/syntmp.scm" . 360484)
       (push.const . 0)
       (push.iloc.1 . 2)
       (apply.iloc+ (0 . 3) "./boot/macro/syntmp.scm" . 360459))
     (push.iloc.1 . 0)
     (push.const . 0)
     (push.iloc.1 . 2)
     (apply.iloc (0 . 4) "./boot/macro/syntmp.scm" . 361483))
   (apply.gloc.of
     |.call-with-values|
     (|.call-with-values|
       (lambda ()
         (adapt-to-rank-moved-vars
           |in-form`1461*|
           |in-ranks`1461*|
           (|remove-duplicates`1462*| |in-vars`1461*|)))
       (lambda (|tmpl`1477*| |ranks`1477*| |vars`1477*|)
         (letrec* ((|expand-var`1478*|
                     (lambda (|tmpl`1479*| |vars`1479*|)
                       (let ((|.L423`1481*| (assq |tmpl`1479*| |vars`1479*|)))
                         (if |.L423`1481*|
                             (if (null? (cdr |.L423`1481*|))
                                 '()
                                 (if |emit`1461*|
                                     (|emit`1461*| (cadr |.L423`1481*|))
                                     (cadr |.L423`1481*|)))
                             (if (and (assq |tmpl`1479*| |in-ranks`1461*|)
                                      (not (assq |tmpl`1479*| |in-vars`1461*|)))
                                 (syntax-violation
                                   "syntax template"
                                   (format "pattern variable ~u out of context" |tmpl`1479*|)
                                   |in-form`1461*|)
                                 (assertion-violation
                                   "syntax template"
                                   "subforms have different size of matched input"
                                   (|.list| 'template: |in-form`1461*|)
                                   (|.cons| 'subforms: |in-vars`1461*|)))))))
                   (|expand-ellipsis-var`1478*|
                     (lambda (|tmpl`1485*| |vars`1485*|)
                       (let ((|.L424`1487*| (assq |tmpl`1485*| |vars`1485*|)))
                         (if |.L424`1487*|
                             (if (null? (cdr |.L424`1487*|))
                                 '()
                                 (if |emit`1461*|
                                     (map |emit`1461*| (cadr |.L424`1487*|))
                                     (cadr |.L424`1487*|)))
                             (if (and (assq |tmpl`1485*| |in-ranks`1461*|)
                                      (not (assq |tmpl`1485*| |in-vars`1461*|)))
                                 (syntax-violation
                                   "syntax template"
                                   (format "pattern variable ~u out of context" |tmpl`1485*|)
                                   |in-form`1461*|)
                                 (assertion-violation
                                   "syntax template"
                                   "subforms have different size of matched input"
                                   (|.list| 'template: |in-form`1461*|)
                                   (|.cons| 'subforms: |in-vars`1461*|)))))))
                   (|expand-ellipsis-template`1478*|
                     (lambda (|tmpl`1491*| |depth`1491*| |vars`1491*|)
                       (letrec* ((|loop`1495*|
                                   (lambda (|expr`1496*| |remains`1496*|)
                                     (if (pair? |remains`1496*|)
                                         (|loop`1495*|
                                           (cons (|expand-template`1478*|
                                                   |tmpl`1491*|
                                                   |depth`1491*|
                                                   |remains`1496*|)
                                                 |expr`1496*|)
                                           (consume-ellipsis-vars
                                             |ranks`1477*|
                                             |depth`1491*|
                                             |remains`1496*|))
                                         (if (null? |remains`1496*|)
                                             '()
                                             (if (eq? |remains`1496*| #t)
                                                 (reverse |expr`1496*|)
                                                 (assertion-violation
                                                   "syntax template"
                                                   "subforms have different size of matched input"
                                                   (|.list| 'template: |in-form`1461*|)
                                                   (|.cons| 'subforms: |in-vars`1461*|))))))))
                         (|loop`1495*|
                           '()
                           (collect-ellipsis-vars
                             |tmpl`1491*|
                             |ranks`1477*|
                             |depth`1491*|
                             |vars`1491*|)))))
                   (|expand-escaped-template`1478*|
                     (lambda (|tmpl`1499*| |depth`1499*| |vars`1499*|)
                       (if (symbol? |tmpl`1499*|)
                           (if (< (rank-of |tmpl`1499*| |ranks`1477*|) 0)
                               (let ((|.L425`1501*| (assq |tmpl`1499*| |aliases`1461*|)))
                                 (if |.L425`1501*| (cdr |.L425`1501*|) |tmpl`1499*|))
                               (|expand-var`1478*| |tmpl`1499*| |vars`1499*|))
                           (if (pair? |tmpl`1499*|)
                               (if (and |emit`1461*| (null? (car |tmpl`1499*|)))
                                   (cons '|.&NIL|
                                         (|expand-escaped-template`1478*|
                                           (cdr |tmpl`1499*|)
                                           |depth`1499*|
                                           |vars`1499*|))
                                   (cons (|expand-escaped-template`1478*|
                                           (car |tmpl`1499*|)
                                           |depth`1499*|
                                           |vars`1499*|)
                                         (|expand-escaped-template`1478*|
                                           (cdr |tmpl`1499*|)
                                           |depth`1499*|
                                           |vars`1499*|)))
                               (if (vector? |tmpl`1499*|)
                                   (list->vector
                                     (|expand-escaped-template`1478*|
                                       (vector->list |tmpl`1499*|)
                                       |depth`1499*|
                                       |vars`1499*|))
                                   |tmpl`1499*|)))))
                   (|expand-template`1478*|
                     (lambda (|tmpl`1503*| |depth`1503*| |vars`1503*|)
                       (if (symbol? |tmpl`1503*|)
                           (if (< (rank-of |tmpl`1503*| |ranks`1477*|) 0)
                               (let ((|.L426`1505*| (assq |tmpl`1503*| |aliases`1461*|)))
                                 (if |.L426`1505*| (cdr |.L426`1505*|) |tmpl`1503*|))
                               (|expand-var`1478*| |tmpl`1503*| |vars`1503*|))
                           (if (ellipsis-quote? |tmpl`1503*|)
                               (|expand-escaped-template`1478*|
                                 (cadr |tmpl`1503*|)
                                 |depth`1503*|
                                 |vars`1503*|)
                               (if (ellipsis-splicing-pair? |tmpl`1503*|)
                                   (|.call-with-values|
                                     (lambda () (parse-ellipsis-splicing |tmpl`1503*|))
                                     (lambda (|body`1507*| |tail`1507*| |len`1507*|)
                                       (append
                                         (apply
                                           append
                                           (|expand-ellipsis-template`1478*|
                                             |body`1507*|
                                             (+ |depth`1503*| 1)
                                             |vars`1503*|))
                                         (|expand-template`1478*|
                                           |tail`1507*|
                                           |depth`1503*|
                                           |vars`1503*|))))
                                   (if (ellipsis-pair? |tmpl`1503*|)
                                       (if (symbol? (car |tmpl`1503*|))
                                           (if (=
                                                 (rank-of (car |tmpl`1503*|) |ranks`1477*|)
                                                 (+ |depth`1503*| 1))
                                               (append
                                                 (|expand-ellipsis-var`1478*|
                                                   (car |tmpl`1503*|)
                                                   |vars`1503*|)
                                                 (|expand-template`1478*|
                                                   (cddr |tmpl`1503*|)
                                                   |depth`1503*|
                                                   |vars`1503*|))
                                               (|.unspecified|))
                                           (if (pair? (car |tmpl`1503*|))
                                               (append
                                                 (|expand-ellipsis-template`1478*|
                                                   (car |tmpl`1503*|)
                                                   (+ |depth`1503*| 1)
                                                   |vars`1503*|)
                                                 (|expand-template`1478*|
                                                   (cddr |tmpl`1503*|)
                                                   |depth`1503*|
                                                   |vars`1503*|))
                                               (|.unspecified|)))
                                       (if (pair? |tmpl`1503*|)
                                           (if (and |emit`1461*| (null? (car |tmpl`1503*|)))
                                               (cons '|.&NIL|
                                                     (|expand-template`1478*|
                                                       (cdr |tmpl`1503*|)
                                                       |depth`1503*|
                                                       |vars`1503*|))
                                               (cons (|expand-template`1478*|
                                                       (car |tmpl`1503*|)
                                                       |depth`1503*|
                                                       |vars`1503*|)
                                                     (|expand-template`1478*|
                                                       (cdr |tmpl`1503*|)
                                                       |depth`1503*|
                                                       |vars`1503*|)))
                                           (if (vector? |tmpl`1503*|)
                                               (list->vector
                                                 (|expand-template`1478*|
                                                   (vector->list |tmpl`1503*|)
                                                   |depth`1503*|
                                                   |vars`1503*|))
                                               |tmpl`1503*|)))))))))
           (if (and (= (safe-length |tmpl`1477*|) 2) (eq? (car |tmpl`1477*|) '...))
               (|expand-escaped-template`1478*| (cadr |tmpl`1477*|) 0 |vars`1477*|)
               (|expand-template`1478*| |tmpl`1477*| 0 |vars`1477*|)))))))
 (set.gloc.of transcribe-template)
 (ret.const.unspec))

;
((close
   (2 0 . compiled->source)
   (push.const . syntax-rules)
   (push.iloc.0 . 0)
   (call
     (push.gloc.of |.L433|)
     (push.iloc.0 . 1)
     (apply.gloc.of map "./boot/macro/synrule.scm" . 30753))
   (push)
   (ret.subr.gloc.of |.cons*| "./boot/macro/synrule.scm" . 29703))
 (set.gloc.of |compiled->source`1512*|)
 (close
   (1 0)
   (push.car.iloc (0 . 0) "./boot/macro/synrule.scm" . 30773)
   (push.cadr.iloc (0 . 0) "./boot/macro/synrule.scm" . 30782)
   (ret.subr.gloc.of |.list| "./boot/macro/synrule.scm" . 30758))
 (set.gloc.of |.L433|)
 (close
   (2 0 . transcribe-compiled-templete)
   (push.car.iloc (0 . 0) "./boot/macro/synrule.scm" . 10265)
   (push.cadr.iloc (0 . 0) "./boot/macro/synrule.scm" . 11289)
   (call
     (touch.gloc.of current-transformer-environment)
     (apply.gloc.of current-transformer-environment "./boot/macro/synrule.scm" . 13332))
   (push)
   (call
     (touch.gloc.of current-rename-count)
     (apply.gloc.of current-rename-count "./boot/macro/synrule.scm" . 14359))
   (push)
   (extend . 4)
   (call
     (extend.enclose+
       (2 0 . loop)
       (iloc.0 . 0)
       (if.null? (ret.iloc 0 . 1))
       (push.cdr.iloc (0 . 0) "./boot/macro/synrule.scm" . 21536)
       (call
         (touch.gloc.of acons)
         (push.car.iloc (0 . 0) "./boot/macro/synrule.scm" . 20514)
         (call
           (touch.gloc.of rename-id)
           (push.car.iloc (0 . 0) "./boot/macro/synrule.scm" . 20514)
           (push.iloc 2 . 3)
           (apply.gloc.of rename-id "./boot/macro/synrule.scm" . 21556))
         (push)
         (push.iloc.0 . 1)
         (apply.gloc.of acons "./boot/macro/synrule.scm" . 21546))
       (push)
       (apply.iloc+ (1 . 0) "./boot/macro/synrule.scm" . 21530))
     (push.iloc 2 . 0)
     (push.subr.gloc.of caddr 1 "./boot/macro/synrule.scm" . 12313)
     (push.const)
     (apply.iloc+ (0 . 0) "./boot/macro/synrule.scm" . 18452))
   (push)
   (extend . 1)
   (call
     (touch.gloc.of transcribe-template)
     (push.iloc.1 . 0)
     (push.iloc.1 . 1)
     (push.iloc 2 . 1)
     (push.iloc.0 . 0)
     (push.const . #f)
     (apply.gloc.of transcribe-template "./boot/macro/synrule.scm" . 23573))
   (push)
   (call
     (push.close
       (1 0)
       (push.cdr.iloc (0 . 0) "./boot/macro/synrule.scm" . 25634)
       (call
         (touch.gloc.of env-lookup)
         (push.iloc 2 . 2)
         (push.car.iloc (0 . 0) "./boot/macro/synrule.scm" . 25660)
         (apply.gloc.of env-lookup "./boot/macro/synrule.scm" . 25644))
       (ret.cons "./boot/macro/synrule.scm" . 25628))
     (push.iloc.0 . 0)
     (apply.gloc.of map "./boot/macro/synrule.scm" . 24597))
   (push)
   (ret.subr.gloc.of values "./boot/macro/synrule.scm" . 23565))
 (set.gloc.of |transcribe-compiled-templete`1512*|)
 (close
   (2 0 . transcribe-syntax-rules)
   (call
     (iloc.0 . 0)
     (if.pair?.ret.const . #t)
     (push.iloc.0 . 0)
     (push.const . "misplaced syntactic keyword")
     (push.iloc.0 . 0)
     (apply.gloc.of syntax-violation "./boot/macro/synrule.scm" . 33801))
   (push.car.iloc (0 . 1) "./boot/macro/synrule.scm" . 35858)
   (push.cadr.iloc (0 . 1) "./boot/macro/synrule.scm" . 35878)
   (extend . 2)
   (extend.enclose+
     (1 0 . loop)
     (iloc.0 . 0)
     (if.null?
       (iloc 2 . 1)
       (if.true
         (push.car.iloc (3 . 0) "./boot/macro/synrule.scm" . 39971)
         (push.const . "invalid syntax")
         (push.iloc 3 . 0)
         (call
           (touch.gloc.of put-annotation)
           (call
             (touch.gloc.of |compiled->source`1512*|)
             (push.iloc 2 . 0)
             (push.cddr.iloc (3 . 1) "./boot/macro/synrule.scm" . 40044)
             (apply.gloc.of |compiled->source`1512*| "./boot/macro/synrule.scm" . 40020))
           (push)
           (push.iloc 2 . 1)
           (apply.gloc.of put-annotation "./boot/macro/synrule.scm" . 40004))
         (push)
         (apply.gloc.of syntax-violation "./boot/macro/synrule.scm" . 39953))
       (push.car.iloc (3 . 0) "./boot/macro/synrule.scm" . 40995)
       (push.const . "invalid syntax")
       (push.iloc 3 . 0)
       (apply.gloc.of syntax-violation "./boot/macro/synrule.scm" . 40977))
     (push.car.iloc (0 . 0) "./boot/macro/synrule.scm" . 42010)
     (extend . 1)
     (push.car.iloc (0 . 0) "./boot/macro/synrule.scm" . 43037)
     (extend . 1)
     (call
       (call
         (touch.gloc.of match-pattern?)
         (push.iloc 5 . 0)
         (push.iloc.0 . 0)
         (push.iloc 4 . 0)
         (apply.gloc.of match-pattern? "./boot/macro/synrule.scm" . 44063))
       (if.false.ret)
       (touch.gloc.of bind-pattern)
       (push.iloc 5 . 0)
       (push.iloc.0 . 0)
       (push.iloc 4 . 0)
       (push.const)
       (apply.gloc.of bind-pattern "./boot/macro/synrule.scm" . 45087))
     (push)
     (extend . 1)
     (iloc.0 . 0)
     (if.true
       (touch.gloc.of |transcribe-compiled-templete`1512*|)
       (push.cdr.iloc (2 . 0) "./boot/macro/synrule.scm" . 47153)
       (push.iloc.0 . 0)
       (apply.gloc.of |transcribe-compiled-templete`1512*| "./boot/macro/synrule.scm" . 47123))
     (push.cdr.iloc (3 . 0) "./boot/macro/synrule.scm" . 48153)
     (apply.iloc+ (4 . 0) "./boot/macro/synrule.scm" . 48147))
   (push.cddr.iloc (2 . 1) "./boot/macro/synrule.scm" . 35898)
   (apply.iloc+ (0 . 0) "./boot/macro/synrule.scm" . 37897))
 (set.gloc.of transcribe-syntax-rules)
 (ret.const.unspec))
((close
   (3 0 . parse-syntax-rule)
   (push.car.iloc (0 . 1) "./boot/macro/synrule.scm" . 52244)
   (push.cadr.iloc (0 . 1) "./boot/macro/synrule.scm" . 52268)
   (extend . 2)
   (call
     (touch.gloc.of check-pattern)
     (push.iloc.0 . 0)
     (push.iloc.1 . 0)
     (apply.gloc.of check-pattern "./boot/macro/synrule.scm" . 53255))
   (call
     (touch.gloc.of collect-vars-ranks)
     (push.iloc.0 . 0)
     (push.iloc.1 . 0)
     (push.const . 0)
     (push.const)
     (apply.gloc.of collect-vars-ranks "./boot/macro/synrule.scm" . 54292))
   (push)
   (extend . 1)
   (call
     (touch.gloc.of check-template)
     (push.iloc.1 . 1)
     (push.iloc.0 . 0)
     (apply.gloc.of check-template "./boot/macro/synrule.scm" . 55305))
   (push.iloc.1 . 0)
   (push.iloc.1 . 1)
   (push.iloc.0 . 0)
   (call
     (touch.gloc.of collect-rename-ids)
     (push.iloc.1 . 1)
     (push.iloc.0 . 0)
     (apply.gloc.of collect-rename-ids "./boot/macro/synrule.scm" . 56360))
   (push)
   (ret.subr.gloc.of values "./boot/macro/synrule.scm" . 56329))
 (set.gloc.of parse-syntax-rule)
 (ret.const.unspec))
((close
   (1 0 . make-remark)
   (call
     (touch.gloc.of get-annotation)
     (push.iloc.0 . 0)
     (apply.gloc.of get-annotation "./boot/macro/synrule.scm" . 63504))
   (push)
   (extend . 1)
   (iloc.0 . 0)
   (if.false.ret)
   (subr.gloc.of current-source-comments 0)
   (push)
   (push.const . |.&SOURCE-PATH|)
   (push.const . #f)
   (push.subr.gloc.of core-hashtable-ref 3 "./boot/macro/synrule.scm" . 65563)
   (iloc.0 . 0)
   (ret.cons "./boot/macro/synrule.scm" . 65557))
 (set.gloc.of |make-remark`1555*|)
 (close
   (4 0)
   (push.iloc.0 . 0)
   (push.iloc.0 . 1)
   (push.iloc.0 . 2)
   (push.iloc.0 . 3)
   (ret.subr.gloc.of list "./boot/macro/synrule.scm" . 74780))
 (set.gloc.of |.L449|)
 (close
   (4 0 . compile-syntax-rules)
   (call
     (touch.gloc.of unrename-syntax)
     (push.iloc.0 . 1)
     (push.iloc.0 . 3)
     (apply.gloc.of unrename-syntax "./boot/macro/synrule.scm" . 69650))
   (push)
   (call
     (touch.gloc.of unrename-syntax)
     (push.iloc.0 . 2)
     (push.iloc.0 . 3)
     (apply.gloc.of unrename-syntax "./boot/macro/synrule.scm" . 69688))
   (push)
   (extend . 2)
   (push.iloc.0 . 0)
   (call
     (touch.gloc.of |make-remark`1555*|)
     (push.iloc.1 . 0)
     (apply.gloc.of |make-remark`1555*| "./boot/macro/synrule.scm" . 71699))
   (push)
   (call
     (push.close
       (1 0)
       (push.close
         (0 0)
         (touch.gloc.of parse-syntax-rule)
         (push.iloc 2 . 0)
         (push.iloc.1 . 0)
         (push.iloc 3 . 3)
         (apply.gloc.of parse-syntax-rule "./boot/macro/synrule.scm" . 73801))
       (push.gloc.of |.L449|)
       (apply.gloc.of |.call-with-values| "./boot/macro/synrule.scm" . 73801))
     (push.iloc.0 . 1)
     (apply.gloc.of map "./boot/macro/synrule.scm" . 72728))
   (push)
   (subr.gloc.of cons 2 "./boot/macro/synrule.scm" . 71699)
   (ret.cons "./boot/macro/synrule.scm" . 71699))
 (set.gloc.of compile-syntax-rules)
 (ret.const.unspec))

;
((push.const . |.vars|)
 (push.const . #f)
 (ret.subr.gloc.of set-top-level-value! "./boot/macro/syncase.scm" . 14337))
((close
   (3 0 . make-syntax-object)
   (push.const . type:syntax)
   (push.iloc.0 . 0)
   (push.iloc.0 . 1)
   (push.iloc.0 . 2)
   (ret.subr.gloc.of tuple "./boot/macro/syncase.scm" . 16446))
 (set.gloc.of make-syntax-object)
 (ret.const.unspec))
((close
   (1 0 . syntax-object-expr)
   (push.iloc.0 . 0)
   (push.const . 1)
   (ret.subr.gloc.of tuple-ref "./boot/macro/syncase.scm" . 17453))
 (set.gloc.of syntax-object-expr)
 (ret.const.unspec))
((close
   (1 0 . syntax-object-renames)
   (push.iloc.0 . 0)
   (push.const . 2)
   (ret.subr.gloc.of tuple-ref "./boot/macro/syncase.scm" . 18477))
 (set.gloc.of syntax-object-renames)
 (ret.const.unspec))
((close
   (1 0 . syntax-object-lexname)
   (push.iloc.0 . 0)
   (push.const . 3)
   (ret.subr.gloc.of tuple-ref "./boot/macro/syncase.scm" . 19501))
 (set.gloc.of syntax-object-lexname)
 (ret.const.unspec))
((close
   (1 0 . wrapped-syntax-object?)
   (push.iloc.0 . 0)
   (push.const . 0)
   (push.subr.gloc.of tuple-ref 2 "./boot/macro/syncase.scm" . 23562)
   (const . type:syntax)
   (ret.eq? "./boot/macro/syncase.scm" . 23557))
 (set.gloc.of wrapped-syntax-object?)
 (ret.const.unspec))
((close
   (1 0 . ensure-output-is-syntax-object)
   (extend.enclose
     (1 0 . loop)
     (iloc.0 . 0)
     (if.pair?
       (call
         (push.car.iloc (0 . 0) "./boot/macro/syncase.scm" . 29716)
         (apply.iloc (1 . 0) "./boot/macro/syncase.scm" . 29710))
       (push.cdr.iloc (0 . 0) "./boot/macro/syncase.scm" . 30740)
       (apply.iloc (1 . 0) "./boot/macro/syncase.scm" . 30734))
     (push.iloc.0 . 0)
     (subr.gloc.of vector? 1 "./boot/macro/syncase.scm" . 31758)
     (if.true
       (push.iloc.1 . 0)
       (push.iloc.0 . 0)
       (push.subr.gloc.of vector->list 1 "./boot/macro/syncase.scm" . 32792)
       (apply.gloc.of map "./boot/macro/syncase.scm" . 32782))
     (iloc.0 . 0)
     (if.symbol?
       (push.iloc.0 . 0)
       (subr.gloc.of uninterned-symbol? 1 "./boot/macro/syncase.scm" . 34834)
       (if.true.ret)
       (push.const . "transformation procedure")
       (push.const . "output contains raw symbol ~s")
       (push.iloc.0 . 0)
       (push.subr.gloc.of format 2 "./boot/macro/syncase.scm" . 35906)
       (push.iloc 2 . 0)
       (apply.gloc.of assertion-violation "./boot/macro/syncase.scm" . 35858))
     (ret.const.unspec))
   (push.iloc.1 . 0)
   (apply.iloc (0 . 0) "./boot/macro/syncase.scm" . 28679))
 (set.gloc.of ensure-output-is-syntax-object)
 (ret.const.unspec))
((close
   (1 0 . ensure-input-is-syntax-object)
   (extend.enclose
     (1 0 . loop)
     (iloc.0 . 0)
     (if.pair?
       (call
         (push.car.iloc (0 . 0) "./boot/macro/syncase.scm" . 42004)
         (apply.iloc (1 . 0) "./boot/macro/syncase.scm" . 41998))
       (push.cdr.iloc (0 . 0) "./boot/macro/syncase.scm" . 43028)
       (apply.iloc (1 . 0) "./boot/macro/syncase.scm" . 43022))
     (push.iloc.0 . 0)
     (subr.gloc.of vector? 1 "./boot/macro/syncase.scm" . 44046)
     (if.true
       (push.iloc.1 . 0)
       (push.iloc.0 . 0)
       (push.subr.gloc.of vector->list 1 "./boot/macro/syncase.scm" . 45080)
       (apply.gloc.of map "./boot/macro/syncase.scm" . 45070))
     (iloc.0 . 0)
     (if.symbol?
       (push.iloc.0 . 0)
       (subr.gloc.of uninterned-symbol? 1 "./boot/macro/syncase.scm" . 47122)
       (if.true.ret)
       (push.const . "transformation procedure")
       (push.const . "input contains raw symbol ~s")
       (push.iloc.0 . 0)
       (push.subr.gloc.of format 2 "./boot/macro/syncase.scm" . 48194)
       (push.iloc 2 . 0)
       (apply.gloc.of assertion-violation "./boot/macro/syncase.scm" . 48146))
     (ret.const.unspec))
   (push.iloc.1 . 0)
   (apply.iloc (0 . 0) "./boot/macro/syncase.scm" . 40967))
 (set.gloc.of ensure-input-is-syntax-object)
 (ret.const.unspec))
((close
   (1 0)
   (call
     (touch.gloc.of ensure-output-is-syntax-object)
     (push.iloc.0 . 0)
     (apply.gloc.of ensure-output-is-syntax-object "./boot/macro/syncase.scm" . 52229))
   (subr.gloc.of make-core-hashtable 0)
   (push)
   (extend . 1)
   (call
     (extend.enclose
       (1 0 . loop)
       (iloc.0 . 0)
       (if.pair?
         (call
           (push.car.iloc (0 . 0) "./boot/macro/syncase.scm" . 57382)
           (apply.iloc (1 . 0) "./boot/macro/syncase.scm" . 57376))
         (push)
         (call
           (push.cdr.iloc (0 . 0) "./boot/macro/syncase.scm" . 57403)
           (apply.iloc (1 . 0) "./boot/macro/syncase.scm" . 57397))
         (push)
         (extend . 2)
         (call
           (push.iloc.0 . 0)
           (car.iloc (1 . 0) "./boot/macro/syncase.scm" . 58412)
           (if.not.eq?.ret.const . #f)
           (push.iloc.0 . 1)
           (cdr.iloc (1 . 0) "./boot/macro/syncase.scm" . 58430)
           (ret.eq? "./boot/macro/syncase.scm" . 58423))
         (if.true (ret.iloc 1 . 0))
         (push.iloc.0 . 0)
         (iloc.0 . 1)
         (ret.cons "./boot/macro/syncase.scm" . 59429))
       (push.iloc.0 . 0)
       (subr.gloc.of vector? 1 "./boot/macro/syncase.scm" . 60439)
       (if.true
         (call
           (push.iloc.1 . 0)
           (push.iloc.0 . 0)
           (push.subr.gloc.of vector->list 1 "./boot/macro/syncase.scm" . 61487)
           (apply.gloc.of map "./boot/macro/syncase.scm" . 61477))
         (push)
         (ret.subr.gloc.of list->vector "./boot/macro/syncase.scm" . 61463))
       (call (push.iloc.0 . 0) (apply.gloc.of identifier? "./boot/macro/syncase.scm" . 62487))
       (if.true
         (call
           (call
             (touch.gloc.of syntax-object-renames)
             (push.iloc.0 . 0)
             (apply.gloc.of syntax-object-renames "./boot/macro/syncase.scm" . 63525))
           (push)
           (extend . 1)
           (iloc.0 . 0)
           (if.null?.ret.const . #t)
           (push.iloc 3 . 0)
           (push.car.iloc (0 . 0) "./boot/macro/syncase.scm" . 65598)
           (subr.gloc.of core-hashtable-contains? 2 "./boot/macro/syncase.scm" . 65569)
           (if.true.ret)
           (push.iloc 3 . 0)
           (push.car.iloc (0 . 0) "./boot/macro/syncase.scm" . 66617)
           (push.cdr.iloc (0 . 0) "./boot/macro/syncase.scm" . 66630)
           (ret.subr.gloc.of core-hashtable-set! "./boot/macro/syncase.scm" . 66593))
         (touch.gloc.of syntax-object-expr)
         (push.iloc.0 . 0)
         (apply.gloc.of syntax-object-expr "./boot/macro/syncase.scm" . 67607))
       (call
         (touch.gloc.of wrapped-syntax-object?)
         (push.iloc.0 . 0)
         (apply.gloc.of wrapped-syntax-object? "./boot/macro/syncase.scm" . 68631))
       (if.true
         (call
           (push.close
             (1 0)
             (push.iloc 3 . 0)
             (push.car.iloc (0 . 0) "./boot/macro/syncase.scm" . 70724)
             (subr.gloc.of core-hashtable-contains? 2 "./boot/macro/syncase.scm" . 70695)
             (if.true.ret)
             (push.iloc 3 . 0)
             (push.car.iloc (0 . 0) "./boot/macro/syncase.scm" . 71743)
             (push.cdr.iloc (0 . 0) "./boot/macro/syncase.scm" . 71751)
             (ret.subr.gloc.of core-hashtable-set! "./boot/macro/syncase.scm" . 71719))
           (call
             (touch.gloc.of syntax-object-renames)
             (push.iloc.0 . 0)
             (apply.gloc.of syntax-object-renames "./boot/macro/syncase.scm" . 72737))
           (push)
           (apply.gloc.of for-each "./boot/macro/syncase.scm" . 69655))
         (call
           (touch.gloc.of syntax-object-expr)
           (push.iloc.0 . 0)
           (apply.gloc.of syntax-object-expr "./boot/macro/syncase.scm" . 73757))
         (push)
         (apply.iloc (1 . 0) "./boot/macro/syncase.scm" . 73751))
       (ret.iloc 0 . 0))
     (push.iloc 2 . 0)
     (apply.iloc (0 . 0) "./boot/macro/syncase.scm" . 56336))
   (push)
   (push.iloc.0 . 0)
   (push.subr.gloc.of core-hashtable->alist 1 "./boot/macro/syncase.scm" . 75798)
   (ret.subr.gloc.of
     values
     (values
       (letrec* ((|loop`1600*|
                   (lambda (|lst`1601*|)
                     (if (pair? |lst`1601*|)
                         (let ((|a`1603*| (|loop`1600*| (car |lst`1601*|)))
                               (|d`1603*| (|loop`1600*| (cdr |lst`1601*|))))
                           (if (and (eq? |a`1603*| (car |lst`1601*|))
                                    (eq? |d`1603*| (cdr |lst`1601*|)))
                               |lst`1601*|
                               (cons |a`1603*| |d`1603*|)))
                         (if (vector? |lst`1601*|)
                             (list->vector (map |loop`1600*| (vector->list |lst`1601*|)))
                             (if (identifier? |lst`1601*|)
                                 (begin
                                   (let ((|rename`1605*| (syntax-object-renames |lst`1601*|)))
                                     (or (null? |rename`1605*|)
                                         (core-hashtable-contains? |ht`1596*| (car |rename`1605*|))
                                         (core-hashtable-set!
                                           |ht`1596*|
                                           (car |rename`1605*|)
                                           (cdr |rename`1605*|))))
                                   (syntax-object-expr |lst`1601*|))
                                 (if (wrapped-syntax-object? |lst`1601*|)
                                     (begin
                                       (for-each (lambda (|a`1607*|)
                                                   (or (core-hashtable-contains?
                                                         |ht`1596*|
                                                         (car |a`1607*|))
                                                       (core-hashtable-set!
                                                         |ht`1596*|
                                                         (car |a`1607*|)
                                                         (cdr |a`1607*|))))
                                                 (syntax-object-renames |lst`1601*|))
                                       (|loop`1600*| (syntax-object-expr |lst`1601*|)))
                                     |lst`1601*|)))))))
         (|loop`1600*| |expr`1594*|))
       (core-hashtable->alist |ht`1596*|))))
 (set.gloc.of |.L468|)
 (push.const . |.flatten-syntax|)
 (push.gloc.of |.L468|)
 (ret.subr.gloc.of set-top-level-value! "./boot/macro/syncase.scm" . 51203))
((close
   (3 1)
   (extend.enclose+
     (2 0 . match)
     (call
       (touch.gloc.of match-pattern?)
       (push.iloc.0 . 0)
       (push.iloc.0 . 1)
       (push.iloc 2 . 2)
       (apply.gloc.of match-pattern? "./boot/macro/syncase.scm" . 82958))
     (if.false.ret)
     (touch.gloc.of bind-pattern)
     (push.iloc.0 . 0)
     (push.iloc.0 . 1)
     (push.iloc 2 . 2)
     (push.const)
     (apply.gloc.of bind-pattern "./boot/macro/syncase.scm" . 83982))
   (call
     (iloc.1 . 0)
     (if.false.ret)
     (touch.gloc.of ensure-input-is-syntax-object)
     (push.iloc.1 . 1)
     (apply.gloc.of ensure-input-is-syntax-object "./boot/macro/syncase.scm" . 86034))
   (call
     (touch.gloc.of unwrap-syntax)
     (push.iloc.1 . 1)
     (apply.gloc.of unwrap-syntax "./boot/macro/syncase.scm" . 87057))
   (push)
   (call (iloc.1 . 0) (if.true.ret) (ret.const))
   (push)
   (extend . 2)
   (extend.enclose+
     (1 0 . loop)
     (iloc.0 . 0)
     (if.null?
       (call
         (iloc 2 . 0)
         (if.not.pair?.ret.const . #f)
         (push.iloc 2 . 0)
         (ret.subr.gloc.of car "./boot/macro/syncase.scm" . 90161))
       (push)
       (push.const . "invalid syntax")
       (push.iloc 2 . 0)
       (apply.gloc.of syntax-violation "./boot/macro/syncase.scm" . 90125))
     (push.car.iloc (0 . 0) "./boot/macro/syncase.scm" . 91163)
     (push.subr.gloc.of cadr 1 "./boot/macro/syncase.scm" . 93213)
     (push.car.iloc (0 . 0) "./boot/macro/syncase.scm" . 91163)
     (push.subr.gloc.of caddr 1 "./boot/macro/syncase.scm" . 94235)
     (extend . 2)
     (call
       (push.iloc 3 . 0)
       (push.car.iloc (1 . 0) "./boot/macro/syncase.scm" . 91163)
       (push.subr.gloc.of car 1 "./boot/macro/syncase.scm" . 92186)
       (apply.iloc+ (4 . 0) "./boot/macro/syncase.scm" . 95261))
     (push)
     (extend . 1)
     (call
       (iloc.0 . 0)
       (if.false.ret)
       (iloc.1 . 0)
       (if.false.ret.const . #t)
       (push.iloc.0 . 0)
       (push.iloc 4 . 1)
       (push.subr.gloc.of append 2 "./boot/macro/syncase.scm" . 98344)
       (apply.iloc (1 . 0) "./boot/macro/syncase.scm" . 98336))
     (if.true
       (push.iloc.0 . 0)
       (push.iloc 4 . 1)
       (push.subr.gloc.of append 2 "./boot/macro/syncase.scm" . 99357)
       (apply.iloc (1 . 1) "./boot/macro/syncase.scm" . 99351))
     (push.cdr.iloc (2 . 0) "./boot/macro/syncase.scm" . 100381)
     (apply.iloc+ (3 . 0) "./boot/macro/syncase.scm" . 100375))
   (push.iloc 3 . 3)
   (apply.iloc+ (0 . 0) "./boot/macro/syncase.scm" . 89097))
 (set.gloc.of |.L470|)
 (push.const . |.syntax-dispatch|)
 (push.gloc.of |.L470|)
 (ret.subr.gloc.of set-top-level-value! "./boot/macro/syncase.scm" . 77825))
((close
   (1 1)
   (iloc.0 . 1)
   (if.null?
     (push.iloc.0 . 0)
     (apply.gloc.of |.flatten-syntax| "./boot/macro/syncase.scm" . 109596))
   (push.iloc.0 . 0)
   (push.car.iloc (0 . 1) "./boot/macro/syncase.scm" . 110632)
   (ret.subr.gloc.of values "./boot/macro/syncase.scm" . 110620))
 (set.gloc.of |.L472|)
 (close
   (1 0)
   (push.close
     (1 0 . thunk)
     (push.close (0 0) (push.iloc.1 . 0) (apply.iloc (2 . 0) "./boot/macro/syncase.scm" . 106529))
     (push.gloc.of |.L472|)
     (apply.gloc.of call-with-values "./boot/macro/syncase.scm" . 105492))
   (extend . 1)
   (push.iloc.1 . 0)
   (subr.gloc.of procedure? 1 "./boot/macro/syncase.scm" . 111630)
   (if.true
     (push.close
       (0 0)
       (touch.gloc.of closure-arity)
       (push.iloc 2 . 0)
       (apply.gloc.of closure-arity "./boot/macro/syncase.scm" . 112680))
     (push.close
       (2 0)
       (iloc.0 . 0)
       (if.false.ret)
       (iloc.0 . 1)
       (if.false.ret)
       (=n.iloc (0 . 0) 1 "./boot/macro/syncase.scm" . 113695)
       (if.false.ret)
       (=n.iloc (0 . 1) 0 "./boot/macro/syncase.scm" . 113707)
       (if.false.ret)
       (ret.iloc 1 . 0))
     (apply.gloc.of
       |.call-with-values|
       (|.call-with-values|
         (lambda () (closure-arity |code`1630*|))
         (lambda (|nargs`1640*| |opt`1640*|)
           (and |nargs`1640*| |opt`1640*| (= |nargs`1640*| 1) (= |opt`1640*| 0) |thunk`1638*|)))))
   (call
     (touch.gloc.of variable-transformer-token?)
     (push.iloc.1 . 0)
     (apply.gloc.of variable-transformer-token? "./boot/macro/syncase.scm" . 114702))
   (if.true
     (push.iloc.1 . 0)
     (push.const . 1)
     (subr.gloc.of tuple-ref 2 "./boot/macro/syncase.scm" . 115737)
     (set.iloc (1 . 0) "./boot/macro/syncase.scm" . 115726)
     (touch.gloc.of make-variable-transformer-token)
     (push.iloc.0 . 0)
     (apply.gloc.of make-variable-transformer-token "./boot/macro/syncase.scm" . 116750))
   (ret.iloc 1 . 0))
 (set.gloc.of |.L473|)
 (push.const . |.transformer-thunk|)
 (push.gloc.of |.L473|)
 (ret.subr.gloc.of set-top-level-value! "./boot/macro/syncase.scm" . 107542))
((close
   (2 0 . rewrite)
   (extend.enclose
     (1 0 . loop)
     (iloc.0 . 0)
     (if.pair?
       (call
         (push.car.iloc (0 . 0) "./boot/macro/syncase.scm" . 125994)
         (apply.iloc (1 . 0) "./boot/macro/syncase.scm" . 125988))
       (push)
       (call
         (push.cdr.iloc (0 . 0) "./boot/macro/syncase.scm" . 126011)
         (apply.iloc (1 . 0) "./boot/macro/syncase.scm" . 126005))
       (ret.cons "./boot/macro/syncase.scm" . 125982))
     (call
       (iloc.0 . 0)
       (if.not.symbol?.ret.const . #f)
       (push.iloc.0 . 0)
       (push.iloc 2 . 1)
       (ret.subr.gloc.of assq "./boot/macro/syncase.scm" . 127013))
     (push)
     (extend . 1)
     (iloc.0 . 0)
     (if.true (push.iloc.0 . 0) (ret.subr.gloc.of cdr "./boot/macro/syncase.scm" . 128018))
     (push.iloc.1 . 0)
     (subr.gloc.of vector? 1 "./boot/macro/syncase.scm" . 128018)
     (if.true
       (call
         (push.iloc 2 . 0)
         (push.iloc.1 . 0)
         (push.subr.gloc.of vector->list 1 "./boot/macro/syncase.scm" . 128056)
         (apply.gloc.of map "./boot/macro/syncase.scm" . 128046))
       (push)
       (ret.subr.gloc.of list->vector "./boot/macro/syncase.scm" . 128032))
     (ret.iloc 1 . 0))
   (push.iloc.1 . 0)
   (apply.iloc (0 . 0) "./boot/macro/syncase.scm" . 125963))
 (set.gloc.of |rewrite`1643*|)
 (close
   (1 0)
   (push.car.iloc (0 . 0) "./boot/macro/syncase.scm" . 123911)
   (call
     (touch.gloc.of make-pattern-variable)
     (push.cdr.iloc (0 . 0) "./boot/macro/syncase.scm" . 123911)
     (apply.gloc.of make-pattern-variable "./boot/macro/syncase.scm" . 123911))
   (ret.cons "./boot/macro/syncase.scm" . 123911))
 (set.gloc.of |.L480|)
 (close
   (2 0 . expand-syntax-case)
   (call
     (iloc.0 . 0)
     (if.not.pair?.ret.const . #f)
     (cdr.iloc (0 . 0) "./boot/macro/syncase.scm" . 123911)
     (if.not.pair?.ret.const . #f)
     (cddr.iloc (0 . 0) "./boot/macro/syncase.scm" . 123911)
     (if.not.pair?.ret.const . #f)
     (push.iloc.0 . 0)
     (push.subr.gloc.of cdddr 1 "./boot/macro/syncase.scm" . 123911)
     (ret.subr.gloc.of list? "./boot/macro/syncase.scm" . 123911))
   (if.true
     (push.iloc.0 . 0)
     (push.subr.gloc.of cdddr 1 "./boot/macro/syncase.scm" . 123911)
     (push.cadr.iloc (0 . 0) "./boot/macro/syncase.scm" . 123911)
     (extend . 2)
     (call
       (touch.gloc.of unrename-syntax)
       (push.iloc.1 . 0)
       (push.subr.gloc.of caddr 1 "./boot/macro/syncase.scm" . 123911)
       (push.iloc.1 . 1)
       (apply.gloc.of unrename-syntax "./boot/macro/syncase.scm" . 123911))
     (push)
     (extend . 1)
     (call
       (call
         (push.iloc.0 . 0)
         (subr.gloc.of list? 1 "./boot/macro/syncase.scm" . 123911)
         (if.false.ret)
         (touch.gloc.of every1)
         (push.gloc.of symbol?)
         (push.iloc.0 . 0)
         (apply.gloc.of every1 "./boot/macro/syncase.scm" . 123911))
       (if.true.ret)
       (push.const . syntax-case)
       (push.const . "invalid literals")
       (push.iloc 2 . 0)
       (push.iloc.0 . 0)
       (apply.gloc.of syntax-violation "./boot/macro/syncase.scm" . 123911))
     (call
       (call
         (touch.gloc.of unique-id-list?)
         (push.iloc.0 . 0)
         (apply.gloc.of unique-id-list? "./boot/macro/syncase.scm" . 123911))
       (if.true.ret)
       (push.const . syntax-case)
       (push.const . "duplicate literals")
       (push.iloc 2 . 0)
       (push.iloc.0 . 0)
       (apply.gloc.of syntax-violation "./boot/macro/syncase.scm" . 123911))
     (call
       (push.const . _)
       (push.iloc.0 . 0)
       (subr.gloc.of memq 2 "./boot/macro/syncase.scm" . 123911)
       (if.false.ret)
       (push.const . syntax-case)
       (push.const . "_ in literals")
       (push.iloc 2 . 0)
       (push.iloc.0 . 0)
       (apply.gloc.of syntax-violation "./boot/macro/syncase.scm" . 123911))
     (call
       (push.const . ...)
       (push.iloc.0 . 0)
       (subr.gloc.of memq 2 "./boot/macro/syncase.scm" . 123911)
       (if.false.ret)
       (push.const . syntax-case)
       (push.const . "... in literals")
       (push.iloc 2 . 0)
       (push.iloc.0 . 0)
       (apply.gloc.of syntax-violation "./boot/macro/syncase.scm" . 123911))
     (call
       (push.close
         (1 0)
         (push.iloc.0 . 0)
         (call
           (touch.gloc.of lookup-lexical-name)
           (push.iloc.0 . 0)
           (push.iloc 3 . 1)
           (apply.gloc.of lookup-lexical-name "./boot/macro/syncase.scm" . 123911))
         (ret.cons "./boot/macro/syncase.scm" . 123911))
       (push.iloc.0 . 0)
       (apply.gloc.of map "./boot/macro/syncase.scm" . 123911))
     (push)
     (extend . 1)
     (call
       (touch.gloc.of |rewrite`1643*|)
       (push.iloc.1 . 0)
       (push.iloc.0 . 0)
       (apply.gloc.of |rewrite`1643*| "./boot/macro/syncase.scm" . 123911))
     (push)
     (extend . 1)
     (extend.enclose
       (1 0 . parse-pattern)
       (call
         (touch.gloc.of |rewrite`1643*|)
         (call
           (touch.gloc.of unrename-syntax)
           (push.iloc.0 . 0)
           (push.iloc 6 . 1)
           (apply.gloc.of unrename-syntax "./boot/macro/syncase.scm" . 123911))
         (push)
         (push.iloc 3 . 0)
         (apply.gloc.of |rewrite`1643*| "./boot/macro/syncase.scm" . 123911))
       (push)
       (extend . 1)
       (call
         (touch.gloc.of annotate)
         (push.iloc.0 . 0)
         (push.iloc.1 . 0)
         (apply.gloc.of annotate "./boot/macro/syncase.scm" . 123911))
       (call
         (touch.gloc.of check-pattern)
         (push.iloc.0 . 0)
         (push.iloc 3 . 0)
         (apply.gloc.of check-pattern "./boot/macro/syncase.scm" . 123911))
       (push.iloc.0 . 0)
       (call
         (touch.gloc.of extend-env)
         (call
           (push.gloc.of |.L480|)
           (call
             (touch.gloc.of collect-vars-ranks)
             (push.iloc.0 . 0)
             (push.iloc 3 . 0)
             (push.const . 0)
             (push.const)
             (apply.gloc.of collect-vars-ranks "./boot/macro/syncase.scm" . 123911))
           (push)
           (apply.gloc.of map "./boot/macro/syncase.scm" . 123911))
         (push)
         (push.iloc 7 . 1)
         (apply.gloc.of extend-env "./boot/macro/syncase.scm" . 123911))
       (push)
       (ret.subr.gloc.of values "./boot/macro/syncase.scm" . 123911))
     (touch.gloc.of annotate)
     (push.const . |.syntax-dispatch|)
     (call
       (touch.gloc.of expand-form)
       (push.const . |.vars|)
       (push.iloc 5 . 1)
       (apply.gloc.of expand-form "./boot/macro/syncase.scm" . 123911))
     (push)
     (call
       (touch.gloc.of expand-form)
       (push.iloc 4 . 1)
       (push.iloc 5 . 1)
       (apply.gloc.of expand-form "./boot/macro/syncase.scm" . 123911))
     (push)
     (push.const . quote)
     (push.iloc.1 . 0)
     (push.subr.gloc.of |.list| 2 "./boot/macro/syncase.scm" . 123911)
     (call
       (push.close
         (1 0)
         (call
           (iloc.0 . 0)
           (if.not.pair?.ret.const . #f)
           (cdr.iloc (0 . 0) "./boot/macro/syncase.scm" . 123911)
           (ret.pair? "./boot/macro/syncase.scm" . 123911))
         (push)
         (extend . 1)
         (call
           (iloc.0 . 0)
           (if.false.ret)
           (cddr.iloc (1 . 0) "./boot/macro/syncase.scm" . 123911)
           (ret.null? "./boot/macro/syncase.scm" . 123911))
         (if.true
           (push.cadr.iloc (1 . 0) "./boot/macro/syncase.scm" . 123911)
           (push.car.iloc (1 . 0) "./boot/macro/syncase.scm" . 123911)
           (extend . 2)
           (push.close
             (0 0)
             (push.iloc.1 . 1)
             (apply.iloc (4 . 0) "./boot/macro/syncase.scm" . 123911))
           (push.close
             (2 0)
             (push.const . |.list|)
             (push.const . quote)
             (push.iloc.0 . 0)
             (push.subr.gloc.of |.list| 2 "./boot/macro/syncase.scm" . 123911)
             (push.const . #f)
             (call
               (touch.gloc.of expand-form)
               (push.const . |.LAMBDA|)
               (push.const |.vars|)
               (push.iloc.1 . 0)
               (push.subr.gloc.of |.list| 3 "./boot/macro/syncase.scm" . 123911)
               (push.iloc.0 . 1)
               (apply.gloc.of expand-form "./boot/macro/syncase.scm" . 123911))
             (push)
             (ret.subr.gloc.of |.list| "./boot/macro/syncase.scm" . 123911))
           (apply.gloc.of |.call-with-values| "./boot/macro/syncase.scm" . 123911))
         (iloc.0 . 0)
         (if.false.ret)
         (cddr.iloc (1 . 0) "./boot/macro/syncase.scm" . 123911)
         (if.not.pair?.ret.const . #f)
         (push.iloc.1 . 0)
         (subr.gloc.of cdddr 1 "./boot/macro/syncase.scm" . 123911)
         (if.not.null?.ret.const . #f)
         (push.iloc.1 . 0)
         (push.subr.gloc.of caddr 1 "./boot/macro/syncase.scm" . 123911)
         (push.cadr.iloc (1 . 0) "./boot/macro/syncase.scm" . 123911)
         (push.car.iloc (1 . 0) "./boot/macro/syncase.scm" . 123911)
         (extend . 3)
         (push.close
           (0 0)
           (push.iloc.1 . 2)
           (apply.iloc (4 . 0) "./boot/macro/syncase.scm" . 123911))
         (push.close
           (2 0)
           (push.const . |.list|)
           (push.const . quote)
           (push.iloc.0 . 0)
           (push.subr.gloc.of |.list| 2 "./boot/macro/syncase.scm" . 123911)
           (call
             (touch.gloc.of expand-form)
             (push.const . |.LAMBDA|)
             (push.const |.vars|)
             (push.iloc.1 . 1)
             (push.subr.gloc.of |.list| 3 "./boot/macro/syncase.scm" . 123911)
             (push.iloc.0 . 1)
             (apply.gloc.of expand-form "./boot/macro/syncase.scm" . 123911))
           (push)
           (call
             (touch.gloc.of expand-form)
             (push.const . |.LAMBDA|)
             (push.const |.vars|)
             (push.iloc.1 . 0)
             (push.subr.gloc.of |.list| 3 "./boot/macro/syncase.scm" . 123911)
             (push.iloc.0 . 1)
             (apply.gloc.of expand-form "./boot/macro/syncase.scm" . 123911))
           (push)
           (ret.subr.gloc.of |.list| "./boot/macro/syncase.scm" . 123911))
         (apply.gloc.of |.call-with-values| "./boot/macro/syncase.scm" . 123911))
       (push.iloc 4 . 0)
       (apply.gloc.of
         map
         (map (lambda (|clause`1674*|)
                (let ((|.L479`1676`1679*|
                        (and (pair? |clause`1674*|) (pair? (cdr |clause`1674*|)))))
                  (if (and |.L479`1676`1679*| (null? (cddr |clause`1674*|)))
                      (let ((|expr`1682*| (cadr |clause`1674*|)) (|p`1682*| (car |clause`1674*|)))
                        (|.call-with-values|
                          (lambda () (|parse-pattern`1667*| |p`1682*|))
                          (lambda (|pattern`1684*| |env`1684*|)
                            (|.list|
                              '|.list|
                              (|.list| 'quote |pattern`1684*|)
                              #f
                              (expand-form
                                (|.list| '|.LAMBDA| '(|.vars|) |expr`1682*|)
                                |env`1684*|)))))
                      (and |.L479`1676`1679*|
                           (pair? (cddr |clause`1674*|))
                           (null? (cdddr |clause`1674*|))
                           (let ((|expr`1686*| (caddr |clause`1674*|))
                                 (|fender`1686*| (cadr |clause`1674*|))
                                 (|p`1686*| (car |clause`1674*|)))
                             (|.call-with-values|
                               (lambda () (|parse-pattern`1667*| |p`1686*|))
                               (lambda (|pattern`1688*| |env`1688*|)
                                 (|.list|
                                   '|.list|
                                   (|.list| 'quote |pattern`1688*|)
                                   (expand-form
                                     (|.list| '|.LAMBDA| '(|.vars|) |fender`1686*|)
                                     |env`1688*|)
                                   (expand-form
                                     (|.list| '|.LAMBDA| '(|.vars|) |expr`1686*|)
                                     |env`1688*|)))))))))
              |clauses`1658*|)))
     (push)
     (push.subr.gloc.of
       |.cons*|
       5
       (|.cons*|
         '|.syntax-dispatch|
         (expand-form '|.vars| |env`1642*|)
         (expand-form |expr`1658*| |env`1642*|)
         (|.list| 'quote |lites`1666*|)
         (map (lambda (|clause`1674*|)
                (let ((|.L479`1676`1679*|
                        (and (pair? |clause`1674*|) (pair? (cdr |clause`1674*|)))))
                  (if (and |.L479`1676`1679*| (null? (cddr |clause`1674*|)))
                      (let ((|expr`1682*| (cadr |clause`1674*|)) (|p`1682*| (car |clause`1674*|)))
                        (|.call-with-values|
                          (lambda () (|parse-pattern`1667*| |p`1682*|))
                          (lambda (|pattern`1684*| |env`1684*|)
                            (|.list|
                              '|.list|
                              (|.list| 'quote |pattern`1684*|)
                              #f
                              (expand-form
                                (|.list| '|.LAMBDA| '(|.vars|) |expr`1682*|)
                                |env`1684*|)))))
                      (and |.L479`1676`1679*|
                           (pair? (cddr |clause`1674*|))
                           (null? (cdddr |clause`1674*|))
                           (let ((|expr`1686*| (caddr |clause`1674*|))
                                 (|fender`1686*| (cadr |clause`1674*|))
                                 (|p`1686*| (car |clause`1674*|)))
                             (|.call-with-values|
                               (lambda () (|parse-pattern`1667*| |p`1686*|))
                               (lambda (|pattern`1688*| |env`1688*|)
                                 (|.list|
                                   '|.list|
                                   (|.list| 'quote |pattern`1688*|)
                                   (expand-form
                                     (|.list| '|.LAMBDA| '(|.vars|) |fender`1686*|)
                                     |env`1688*|)
                                   (expand-form
                                     (|.list| '|.LAMBDA| '(|.vars|) |expr`1686*|)
                                     |env`1688*|)))))))))
              |clauses`1658*|)))
     (push.iloc 4 . 1)
     (apply.gloc.of
       annotate
       (annotate
         (|.cons*|
           '|.syntax-dispatch|
           (expand-form '|.vars| |env`1642*|)
           (expand-form |expr`1658*| |env`1642*|)
           (|.list| 'quote |lites`1666*|)
           (map (lambda (|clause`1674*|)
                  (let ((|.L479`1676`1679*|
                          (and (pair? |clause`1674*|) (pair? (cdr |clause`1674*|)))))
                    (if (and |.L479`1676`1679*| (null? (cddr |clause`1674*|)))
                        (let ((|expr`1682*| (cadr |clause`1674*|)) (|p`1682*| (car |clause`1674*|)))
                          (|.call-with-values|
                            (lambda () (|parse-pattern`1667*| |p`1682*|))
                            (lambda (|pattern`1684*| |env`1684*|)
                              (|.list|
                                '|.list|
                                (|.list| 'quote |pattern`1684*|)
                                #f
                                (expand-form
                                  (|.list| '|.LAMBDA| '(|.vars|) |expr`1682*|)
                                  |env`1684*|)))))
                        (and |.L479`1676`1679*|
                             (pair? (cddr |clause`1674*|))
                             (null? (cdddr |clause`1674*|))
                             (let ((|expr`1686*| (caddr |clause`1674*|))
                                   (|fender`1686*| (cadr |clause`1674*|))
                                   (|p`1686*| (car |clause`1674*|)))
                               (|.call-with-values|
                                 (lambda () (|parse-pattern`1667*| |p`1686*|))
                                 (lambda (|pattern`1688*| |env`1688*|)
                                   (|.list|
                                     '|.list|
                                     (|.list| 'quote |pattern`1688*|)
                                     (expand-form
                                       (|.list| '|.LAMBDA| '(|.vars|) |fender`1686*|)
                                       |env`1688*|)
                                     (expand-form
                                       (|.list| '|.LAMBDA| '(|.vars|) |expr`1686*|)
                                       |env`1688*|)))))))))
                |clauses`1658*|))
         |expr`1658*|)))
   (push.const . syntax-case)
   (push.const . "invalid syntax")
   (push.iloc.0 . 0)
   (apply.gloc.of syntax-violation "./boot/macro/syncase.scm" . 123911))
 (set.gloc.of expand-syntax-case)
 (ret.const.unspec))
((close
   (2 0 . expand-syntax)
   (call
     (iloc.0 . 0)
     (if.not.pair?.ret.const . #f)
     (cdr.iloc (0 . 0) "./boot/macro/syncase.scm" . 184325)
     (if.not.pair?.ret.const . #f)
     (cddr.iloc (0 . 0) "./boot/macro/syncase.scm" . 184325)
     (ret.null? "./boot/macro/syncase.scm" . 184325))
   (if.true
     (push.cadr.iloc (0 . 0) "./boot/macro/syncase.scm" . 184325)
     (extend . 1)
     (call
       (touch.gloc.of unrename-syntax)
       (push.iloc.0 . 0)
       (push.iloc.1 . 1)
       (apply.gloc.of unrename-syntax "./boot/macro/syncase.scm" . 184325))
     (push)
     (call
       (touch.gloc.of expand-form)
       (push.const . |.vars|)
       (push.iloc.1 . 1)
       (apply.gloc.of expand-form "./boot/macro/syncase.scm" . 184325))
     (push)
     (extend . 2)
     (call
       (touch.gloc.of collect-unique-ids)
       (push.iloc.0 . 0)
       (apply.gloc.of collect-unique-ids "./boot/macro/syncase.scm" . 184325))
     (push)
     (extend . 1)
     (call
       (push.gloc.of values)
       (call
         (push.close
           (1 0)
           (call
             (touch.gloc.of env-lookup)
             (push.iloc 4 . 1)
             (push.iloc.0 . 0)
             (apply.gloc.of env-lookup "./boot/macro/syncase.scm" . 184325))
           (push)
           (extend . 1)
           (call
             (touch.gloc.of pattern-variable?)
             (push.iloc.0 . 0)
             (apply.gloc.of pattern-variable? "./boot/macro/syncase.scm" . 184325))
           (if.false.ret)
           (push.iloc.1 . 0)
           (cdr.iloc (0 . 0) "./boot/macro/syncase.scm" . 184325)
           (ret.cons "./boot/macro/syncase.scm" . 184325))
         (push.iloc.0 . 0)
         (apply.gloc.of map "./boot/macro/syncase.scm" . 184325))
       (push)
       (apply.gloc.of filter "./boot/macro/syncase.scm" . 184325))
     (push)
     (extend . 1)
     (call
       (touch.gloc.of check-template)
       (push.iloc 2 . 0)
       (push.iloc.0 . 0)
       (apply.gloc.of check-template "./boot/macro/syncase.scm" . 184325))
     (call
       (call
         (touch.gloc.of current-template-environment)
         (apply.gloc.of current-template-environment "./boot/macro/syncase.scm" . 184325))
       (push)
       (extend . 1)
       (iloc.0 . 0)
       (if.true
         (push.gloc.of values)
         (call
           (push.close
             (1 0)
             (push.iloc.0 . 0)
             (push.iloc 2 . 0)
             (subr.gloc.of assq 2 "./boot/macro/syncase.scm" . 184325)
             (if.true.ret.const . #f)
             (push.iloc.0 . 0)
             (push.iloc.1 . 0)
             (push.subr.gloc.of assq 2 "./boot/macro/syncase.scm" . 184325)
             (extend . 1)
             (iloc.0 . 0)
             (if.false.ret)
             (push.iloc.1 . 0)
             (cdr.iloc (0 . 0) "./boot/macro/syncase.scm" . 184325)
             (ret.cons "./boot/macro/syncase.scm" . 184325))
           (push.iloc 2 . 0)
           (apply.gloc.of
             map
             (map (lambda (|id`1713*|)
                    (if (assq |id`1713*| |ranks`1707*|)
                        #f
                        (let ((|.L488`1715*| (assq |id`1713*| |.L487`1709*|)))
                          (and |.L488`1715*| (cons |id`1713*| (cdr |.L488`1715*|))))))
                  |ids`1701*|)))
         (push)
         (apply.gloc.of
           filter
           (filter
             values
             (map (lambda (|id`1713*|)
                    (if (assq |id`1713*| |ranks`1707*|)
                        #f
                        (let ((|.L488`1715*| (assq |id`1713*| |.L487`1709*|)))
                          (and |.L488`1715*| (cons |id`1713*| (cdr |.L488`1715*|))))))
                  |ids`1701*|))))
       (ret.const))
     (push)
     (extend . 1)
     (iloc 3 . 0)
     (if.symbol?
       (call
         (touch.gloc.of lookup-lexical-name)
         (push.iloc 4 . 0)
         (push.iloc 5 . 1)
         (apply.gloc.of lookup-lexical-name "./boot/macro/syncase.scm" . 184325))
       (push)
       (extend . 1)
       (push.iloc 4 . 0)
       (iloc.0 . 0)
       (if.eq?
         (iloc 2 . 0)
         (if.null?
           (iloc.1 . 0)
           (if.null?
             (touch.gloc.of annotate)
             (push.const . |.syntax/i0n|)
             (push.iloc 4 . 1)
             (push.const . quote)
             (push.iloc 4 . 0)
             (push.subr.gloc.of |.list| 2 "./boot/macro/syncase.scm" . 184325)
             (push.subr.gloc.of |.list| 3 "./boot/macro/syncase.scm" . 184325)
             (push.iloc 6 . 0)
             (apply.gloc.of annotate "./boot/macro/syncase.scm" . 184325))
           (touch.gloc.of annotate)
           (push.const . |.syntax/i0e|)
           (push.iloc 4 . 1)
           (push.const . quote)
           (push.iloc 4 . 0)
           (push.subr.gloc.of |.list| 2 "./boot/macro/syncase.scm" . 184325)
           (push.const . quote)
           (push.iloc.1 . 0)
           (push.subr.gloc.of |.list| 2 "./boot/macro/syncase.scm" . 184325)
           (push.subr.gloc.of |.list| 4 "./boot/macro/syncase.scm" . 184325)
           (push.iloc 6 . 0)
           (apply.gloc.of annotate "./boot/macro/syncase.scm" . 184325))
         (iloc.1 . 0)
         (if.null?
           (touch.gloc.of annotate)
           (push.const . |.syntax/i1n|)
           (push.iloc 4 . 1)
           (push.const . quote)
           (push.iloc 4 . 0)
           (push.subr.gloc.of |.list| 2 "./boot/macro/syncase.scm" . 184325)
           (push.subr.gloc.of |.list| 3 "./boot/macro/syncase.scm" . 184325)
           (push.iloc 6 . 0)
           (apply.gloc.of annotate "./boot/macro/syncase.scm" . 184325))
         (touch.gloc.of annotate)
         (push.const . |.syntax/i1e|)
         (push.iloc 4 . 1)
         (push.const . quote)
         (push.iloc 4 . 0)
         (push.subr.gloc.of |.list| 2 "./boot/macro/syncase.scm" . 184325)
         (push.const . quote)
         (push.iloc.1 . 0)
         (push.subr.gloc.of |.list| 2 "./boot/macro/syncase.scm" . 184325)
         (push.subr.gloc.of |.list| 4 "./boot/macro/syncase.scm" . 184325)
         (push.iloc 6 . 0)
         (apply.gloc.of annotate "./boot/macro/syncase.scm" . 184325))
       (iloc 2 . 0)
       (if.null?
         (iloc.1 . 0)
         (if.null?
           (touch.gloc.of annotate)
           (push.const . |.syntax/i2n|)
           (push.iloc 4 . 1)
           (push.const . quote)
           (push.iloc 4 . 0)
           (push.subr.gloc.of |.list| 2 "./boot/macro/syncase.scm" . 184325)
           (push.const . quote)
           (push.iloc.0 . 0)
           (push.subr.gloc.of |.list| 2 "./boot/macro/syncase.scm" . 184325)
           (push.subr.gloc.of |.list| 4 "./boot/macro/syncase.scm" . 184325)
           (push.iloc 6 . 0)
           (apply.gloc.of annotate "./boot/macro/syncase.scm" . 184325))
         (touch.gloc.of annotate)
         (push.const . |.syntax/i2e|)
         (push.iloc 4 . 1)
         (push.const . quote)
         (push.iloc 4 . 0)
         (push.subr.gloc.of |.list| 2 "./boot/macro/syncase.scm" . 184325)
         (push.const . quote)
         (push.iloc.1 . 0)
         (push.subr.gloc.of |.list| 2 "./boot/macro/syncase.scm" . 184325)
         (push.const . quote)
         (push.iloc.0 . 0)
         (push.subr.gloc.of |.list| 2 "./boot/macro/syncase.scm" . 184325)
         (push.subr.gloc.of |.list| 5 "./boot/macro/syncase.scm" . 184325)
         (push.iloc 6 . 0)
         (apply.gloc.of annotate "./boot/macro/syncase.scm" . 184325))
       (iloc.1 . 0)
       (if.null?
         (touch.gloc.of annotate)
         (push.const . |.syntax/i3n|)
         (push.iloc 4 . 1)
         (push.const . quote)
         (push.iloc 4 . 0)
         (push.subr.gloc.of |.list| 2 "./boot/macro/syncase.scm" . 184325)
         (push.const . quote)
         (push.iloc.0 . 0)
         (push.subr.gloc.of |.list| 2 "./boot/macro/syncase.scm" . 184325)
         (push.subr.gloc.of |.list| 4 "./boot/macro/syncase.scm" . 184325)
         (push.iloc 6 . 0)
         (apply.gloc.of annotate "./boot/macro/syncase.scm" . 184325))
       (touch.gloc.of annotate)
       (push.const . |.syntax/i3e|)
       (push.iloc 4 . 1)
       (push.const . quote)
       (push.iloc 4 . 0)
       (push.subr.gloc.of |.list| 2 "./boot/macro/syncase.scm" . 184325)
       (push.const . quote)
       (push.iloc.1 . 0)
       (push.subr.gloc.of |.list| 2 "./boot/macro/syncase.scm" . 184325)
       (push.const . quote)
       (push.iloc.0 . 0)
       (push.subr.gloc.of |.list| 2 "./boot/macro/syncase.scm" . 184325)
       (push.subr.gloc.of |.list| 5 "./boot/macro/syncase.scm" . 184325)
       (push.iloc 6 . 0)
       (apply.gloc.of annotate "./boot/macro/syncase.scm" . 184325))
     (call
       (push.gloc.of values)
       (call
         (push.close
           (1 0)
           (call
             (touch.gloc.of lookup-lexical-name)
             (push.iloc.0 . 0)
             (push.iloc 6 . 1)
             (apply.gloc.of lookup-lexical-name "./boot/macro/syncase.scm" . 184325))
           (push)
           (extend . 1)
           (call
             (call
               (touch.gloc.of renamed-id?)
               (push.iloc.0 . 0)
               (apply.gloc.of renamed-id? "./boot/macro/syncase.scm" . 184325))
             (if.true.ret)
             (touch.gloc.of local-macro-symbol?)
             (push.iloc.0 . 0)
             (apply.gloc.of local-macro-symbol? "./boot/macro/syncase.scm" . 184325))
           (if.false.ret)
           (push.iloc.1 . 0)
           (iloc.0 . 0)
           (if.eq?.ret.const . #f)
           (push.iloc.1 . 0)
           (iloc.0 . 0)
           (ret.cons "./boot/macro/syncase.scm" . 184325))
         (call
           (touch.gloc.of collect-rename-ids)
           (push.iloc 3 . 0)
           (push.iloc.1 . 0)
           (apply.gloc.of collect-rename-ids "./boot/macro/syncase.scm" . 184325))
         (push)
         (apply.gloc.of map "./boot/macro/syncase.scm" . 184325))
       (push)
       (apply.gloc.of filter "./boot/macro/syncase.scm" . 184325))
     (push)
     (extend . 1)
     (iloc.0 . 0)
     (if.null?
       (iloc 2 . 0)
       (if.null?
         (iloc.1 . 0)
         (if.null?
           (touch.gloc.of annotate)
           (push.const . |.syntax/c0n|)
           (push.iloc 4 . 1)
           (push.const . quote)
           (push.iloc 4 . 0)
           (push.subr.gloc.of |.list| 2 "./boot/macro/syncase.scm" . 184325)
           (push.subr.gloc.of |.list| 3 "./boot/macro/syncase.scm" . 184325)
           (push.iloc 6 . 0)
           (apply.gloc.of annotate "./boot/macro/syncase.scm" . 184325))
         (touch.gloc.of annotate)
         (push.const . |.syntax/c0e|)
         (push.iloc 4 . 1)
         (push.const . quote)
         (push.iloc 4 . 0)
         (push.subr.gloc.of |.list| 2 "./boot/macro/syncase.scm" . 184325)
         (push.const . quote)
         (push.iloc.1 . 0)
         (push.subr.gloc.of |.list| 2 "./boot/macro/syncase.scm" . 184325)
         (push.subr.gloc.of |.list| 4 "./boot/macro/syncase.scm" . 184325)
         (push.iloc 6 . 0)
         (apply.gloc.of annotate "./boot/macro/syncase.scm" . 184325))
       (iloc.1 . 0)
       (if.null?
         (touch.gloc.of annotate)
         (push.const . |.syntax/c1n|)
         (push.iloc 4 . 1)
         (push.const . quote)
         (push.iloc 4 . 0)
         (push.subr.gloc.of |.list| 2 "./boot/macro/syncase.scm" . 184325)
         (push.const . quote)
         (push.iloc 2 . 0)
         (push.subr.gloc.of |.list| 2 "./boot/macro/syncase.scm" . 184325)
         (push.subr.gloc.of |.list| 4 "./boot/macro/syncase.scm" . 184325)
         (push.iloc 6 . 0)
         (apply.gloc.of annotate "./boot/macro/syncase.scm" . 184325))
       (touch.gloc.of annotate)
       (push.const . |.syntax/c1e|)
       (push.iloc 4 . 1)
       (push.const . quote)
       (push.iloc 4 . 0)
       (push.subr.gloc.of |.list| 2 "./boot/macro/syncase.scm" . 184325)
       (push.const . quote)
       (push.iloc.1 . 0)
       (push.subr.gloc.of |.list| 2 "./boot/macro/syncase.scm" . 184325)
       (push.const . quote)
       (push.iloc 2 . 0)
       (push.subr.gloc.of |.list| 2 "./boot/macro/syncase.scm" . 184325)
       (push.subr.gloc.of |.list| 5 "./boot/macro/syncase.scm" . 184325)
       (push.iloc 6 . 0)
       (apply.gloc.of annotate "./boot/macro/syncase.scm" . 184325))
     (iloc 2 . 0)
     (if.null?
       (iloc.1 . 0)
       (if.null?
         (touch.gloc.of annotate)
         (push.const . |.syntax/c2n|)
         (push.iloc 4 . 1)
         (push.const . quote)
         (push.iloc 4 . 0)
         (push.subr.gloc.of |.list| 2 "./boot/macro/syncase.scm" . 184325)
         (push.const . quote)
         (push.iloc.0 . 0)
         (push.subr.gloc.of |.list| 2 "./boot/macro/syncase.scm" . 184325)
         (push.subr.gloc.of |.list| 4 "./boot/macro/syncase.scm" . 184325)
         (push.iloc 6 . 0)
         (apply.gloc.of annotate "./boot/macro/syncase.scm" . 184325))
       (touch.gloc.of annotate)
       (push.const . |.syntax/c2e|)
       (push.iloc 4 . 1)
       (push.const . quote)
       (push.iloc 4 . 0)
       (push.subr.gloc.of |.list| 2 "./boot/macro/syncase.scm" . 184325)
       (push.const . quote)
       (push.iloc.1 . 0)
       (push.subr.gloc.of |.list| 2 "./boot/macro/syncase.scm" . 184325)
       (push.const . quote)
       (push.iloc.0 . 0)
       (push.subr.gloc.of |.list| 2 "./boot/macro/syncase.scm" . 184325)
       (push.subr.gloc.of |.list| 5 "./boot/macro/syncase.scm" . 184325)
       (push.iloc 6 . 0)
       (apply.gloc.of annotate "./boot/macro/syncase.scm" . 184325))
     (iloc.1 . 0)
     (if.null?
       (touch.gloc.of annotate)
       (push.const . |.syntax/c3n|)
       (push.iloc 4 . 1)
       (push.const . quote)
       (push.iloc 4 . 0)
       (push.subr.gloc.of |.list| 2 "./boot/macro/syncase.scm" . 184325)
       (push.const . quote)
       (push.iloc 2 . 0)
       (push.subr.gloc.of |.list| 2 "./boot/macro/syncase.scm" . 184325)
       (push.const . quote)
       (push.iloc.0 . 0)
       (push.subr.gloc.of |.list| 2 "./boot/macro/syncase.scm" . 184325)
       (push.subr.gloc.of |.list| 5 "./boot/macro/syncase.scm" . 184325)
       (push.iloc 6 . 0)
       (apply.gloc.of annotate "./boot/macro/syncase.scm" . 184325))
     (touch.gloc.of annotate)
     (push.const . |.syntax/c3e|)
     (push.iloc 4 . 1)
     (push.const . quote)
     (push.iloc 4 . 0)
     (push.subr.gloc.of |.list| 2 "./boot/macro/syncase.scm" . 184325)
     (push.const . quote)
     (push.iloc.1 . 0)
     (push.subr.gloc.of |.list| 2 "./boot/macro/syncase.scm" . 184325)
     (push.const . quote)
     (push.iloc 2 . 0)
     (push.subr.gloc.of |.list| 2 "./boot/macro/syncase.scm" . 184325)
     (push.const . quote)
     (push.iloc.0 . 0)
     (push.subr.gloc.of |.list| 2 "./boot/macro/syncase.scm" . 184325)
     (push.subr.gloc.of |.list| 6 "./boot/macro/syncase.scm" . 184325)
     (push.iloc 6 . 0)
     (apply.gloc.of annotate "./boot/macro/syncase.scm" . 184325))
   (push.const . syntax)
   (push.const . "expected exactly one datum")
   (push.iloc.0 . 0)
   (apply.gloc.of syntax-violation "./boot/macro/syncase.scm" . 184325))
 (set.gloc.of expand-syntax)
 (ret.const.unspec))
((close
   (1 0 . loop)
   (iloc.0 . 0)
   (if.pair?
     (call
       (touch.gloc.of |loop`1734*|)
       (push.car.iloc (0 . 0) "./boot/macro/syncase.scm" . 260126)
       (apply.gloc.of |loop`1734*| "./boot/macro/syncase.scm" . 260120))
     (push)
     (call
       (touch.gloc.of |loop`1734*|)
       (push.cdr.iloc (0 . 0) "./boot/macro/syncase.scm" . 260147)
       (apply.gloc.of |loop`1734*| "./boot/macro/syncase.scm" . 260141))
     (push)
     (extend . 2)
     (call
       (push.iloc.0 . 0)
       (car.iloc (1 . 0) "./boot/macro/syncase.scm" . 261156)
       (if.not.eq?.ret.const . #f)
       (push.iloc.0 . 1)
       (cdr.iloc (1 . 0) "./boot/macro/syncase.scm" . 261174)
       (ret.eq? "./boot/macro/syncase.scm" . 261167))
     (if.true (ret.iloc 1 . 0))
     (push.iloc.0 . 0)
     (iloc.0 . 1)
     (ret.cons "./boot/macro/syncase.scm" . 262173))
   (push.iloc.0 . 0)
   (subr.gloc.of vector? 1 "./boot/macro/syncase.scm" . 263183)
   (if.true
     (call
       (push.gloc.of |loop`1734*|)
       (push.iloc.0 . 0)
       (push.subr.gloc.of vector->list 1 "./boot/macro/syncase.scm" . 264231)
       (apply.gloc.of map "./boot/macro/syncase.scm" . 264221))
     (push)
     (ret.subr.gloc.of list->vector "./boot/macro/syncase.scm" . 264207))
   (call
     (touch.gloc.of wrapped-syntax-object?)
     (push.iloc.0 . 0)
     (apply.gloc.of wrapped-syntax-object? "./boot/macro/syncase.scm" . 265231))
   (if.true
     (touch.gloc.of |loop`1734*|)
     (call
       (touch.gloc.of syntax-object-expr)
       (push.iloc.0 . 0)
       (apply.gloc.of syntax-object-expr "./boot/macro/syncase.scm" . 266261))
     (push)
     (apply.gloc.of |loop`1734*| "./boot/macro/syncase.scm" . 266255))
   (ret.iloc 0 . 0))
 (set.gloc.of |loop`1734*|)
 (close
   (1 0 . syntax->datum)
   (touch.gloc.of strip-rename-suffix)
   (call
     (touch.gloc.of |loop`1734*|)
     (push.iloc.0 . 0)
     (apply.gloc.of |loop`1734*| "./boot/macro/syncase.scm" . 259080))
   (push)
   (apply.gloc.of strip-rename-suffix (strip-rename-suffix (|loop`1734*| |expr`1730*|))))
 (set.gloc.of syntax->datum)
 (ret.const.unspec))
((close
   (2 0 . datum->syntax)
   (call (push.iloc.0 . 0) (apply.gloc.of identifier? "./boot/macro/syncase.scm" . 271369))
   (if.false.call
     (push.const . datum->syntax)
     (push.const . "expected identifier, but got ~r")
     (push.iloc.0 . 0)
     (push.subr.gloc.of format 2 "./boot/macro/syncase.scm" . 272429)
     (apply.gloc.of assertion-violation "./boot/macro/syncase.scm" . 272393))
   (call
     (call
       (touch.gloc.of syntax-object-renames)
       (push.iloc.0 . 0)
       (apply.gloc.of syntax-object-renames "./boot/macro/syncase.scm" . 273425))
     (if.not.pair?.ret.const . #f)
     (call
       (touch.gloc.of import?)
       (call
         (touch.gloc.of syntax-object-renames)
         (push.iloc.0 . 0)
         (apply.gloc.of syntax-object-renames "./boot/macro/syncase.scm" . 274456))
       (push)
       (push.subr.gloc.of cdr 1 "./boot/macro/syncase.scm" . 274451)
       (apply.gloc.of import? "./boot/macro/syncase.scm" . 274442))
     (if.false.ret)
     (push.const . datum->syntax)
     (push.const . "identifer ~u out of context")
     (call
       (touch.gloc.of syntax-object-expr)
       (push.iloc.0 . 0)
       (apply.gloc.of syntax-object-expr "./boot/macro/syncase.scm" . 275540))
     (push)
     (push.subr.gloc.of format 2 "./boot/macro/syncase.scm" . 275502)
     (apply.gloc.of assertion-violation "./boot/macro/syncase.scm" . 275466))
   (call
     (touch.gloc.of retrieve-rename-suffix)
     (call
       (touch.gloc.of syntax-object-expr)
       (push.iloc.0 . 0)
       (apply.gloc.of syntax-object-expr "./boot/macro/syncase.scm" . 276523))
     (push)
     (apply.gloc.of retrieve-rename-suffix "./boot/macro/syncase.scm" . 276499))
   (push)
   (call
     (call
       (touch.gloc.of syntax-object-renames)
       (push.iloc.0 . 0)
       (apply.gloc.of syntax-object-renames "./boot/macro/syncase.scm" . 277531))
     (if.null?
       (touch.gloc.of current-expansion-environment)
       (apply.gloc.of current-expansion-environment "./boot/macro/syncase.scm" . 278548))
     (touch.gloc.of current-transformer-environment)
     (apply.gloc.of current-transformer-environment "./boot/macro/syncase.scm" . 279572))
   (push)
   (subr.gloc.of make-core-hashtable 0)
   (push)
   (subr.gloc.of make-core-hashtable 0)
   (push)
   (extend . 4)
   (call
     (extend.enclose
       (1 0 . loop)
       (iloc.0 . 0)
       (if.pair?
         (call
           (push.car.iloc (0 . 0) "./boot/macro/syncase.scm" . 284711)
           (apply.iloc (1 . 0) "./boot/macro/syncase.scm" . 284705))
         (push)
         (call
           (push.cdr.iloc (0 . 0) "./boot/macro/syncase.scm" . 284728)
           (apply.iloc (1 . 0) "./boot/macro/syncase.scm" . 284722))
         (ret.cons "./boot/macro/syncase.scm" . 284699))
       (push.iloc.0 . 0)
       (subr.gloc.of vector? 1 "./boot/macro/syncase.scm" . 285723)
       (if.true
         (call
           (push.iloc.1 . 0)
           (push.iloc.0 . 0)
           (push.subr.gloc.of vector->list 1 "./boot/macro/syncase.scm" . 286771)
           (apply.gloc.of map "./boot/macro/syncase.scm" . 286761))
         (push)
         (ret.subr.gloc.of list->vector "./boot/macro/syncase.scm" . 286747))
       (iloc.0 . 0)
       (if.symbol?
         (push.iloc 2 . 2)
         (push.iloc.0 . 0)
         (push.const . #f)
         (subr.gloc.of core-hashtable-ref 3 "./boot/macro/syncase.scm" . 288802)
         (if.true.ret)
         (call
           (call
             (push.iloc.0 . 0)
             (subr.gloc.of uninterned-symbol? 1 "./boot/macro/syncase.scm" . 290869)
             (if.true.ret)
             (push.iloc 2 . 0)
             (push.const . "")
             (push.subr.gloc.of string=? 2 "./boot/macro/syncase.scm" . 290899)
             (ret.subr.gloc.of not "./boot/macro/syncase.scm" . 290894))
           (if.true
             (touch.gloc.of compose-id)
             (push.iloc.0 . 0)
             (push.iloc 2 . 0)
             (apply.gloc.of compose-id "./boot/macro/syncase.scm" . 291889))
           (push.const . "~a~a")
           (push.iloc.0 . 0)
           (push.iloc 2 . 0)
           (push.subr.gloc.of format 3 "./boot/macro/syncase.scm" . 292929)
           (ret.subr.gloc.of string->symbol "./boot/macro/syncase.scm" . 292913))
         (push)
         (extend . 1)
         (push.iloc 3 . 2)
         (push.iloc.1 . 0)
         (push.iloc.0 . 0)
         (subr.gloc.of core-hashtable-set! 3 "./boot/macro/syncase.scm" . 293924)
         (call
           (call
             (touch.gloc.of env-lookup)
             (push.iloc 3 . 1)
             (push.iloc.0 . 0)
             (apply.gloc.of env-lookup "./boot/macro/syncase.scm" . 294966))
           (push)
           (extend . 1)
           (push.iloc.0 . 0)
           (iloc.1 . 0)
           (if.eq?
             (push.iloc 4 . 3)
             (push.iloc.1 . 0)
             (call
               (touch.gloc.of env-lookup)
               (push.iloc 4 . 1)
               (push.iloc 2 . 0)
               (apply.gloc.of env-lookup "./boot/macro/syncase.scm" . 298058))
             (push)
             (ret.subr.gloc.of core-hashtable-set! "./boot/macro/syncase.scm" . 298029))
           (push.iloc 4 . 3)
           (push.iloc.1 . 0)
           (push.iloc.0 . 0)
           (ret.subr.gloc.of core-hashtable-set! "./boot/macro/syncase.scm" . 301101))
         (ret.iloc 0 . 0))
       (ret.iloc 0 . 0))
     (push.iloc 2 . 1)
     (apply.iloc (0 . 0) "./boot/macro/syncase.scm" . 283668))
   (push)
   (extend . 1)
   (iloc.0 . 0)
   (if.symbol?
     (touch.gloc.of make-syntax-object)
     (push.iloc.0 . 0)
     (call
       (push.iloc.0 . 0)
       (push.iloc.1 . 3)
       (push.subr.gloc.of core-hashtable->alist 1 "./boot/macro/syncase.scm" . 305203)
       (subr.gloc.of assq 2 "./boot/macro/syncase.scm" . 305193)
       (if.true.ret)
       (ret.const))
     (push)
     (push.const . #f)
     (apply.gloc.of make-syntax-object "./boot/macro/syncase.scm" . 305165))
   (touch.gloc.of make-syntax-object)
   (push.iloc.0 . 0)
   (push.iloc.1 . 3)
   (push.subr.gloc.of core-hashtable->alist 1 "./boot/macro/syncase.scm" . 306213)
   (push.const . #f)
   (apply.gloc.of make-syntax-object "./boot/macro/syncase.scm" . 306189))
 (set.gloc.of datum->syntax)
 (ret.const.unspec))
((close
   (1 0 . identifier?)
   (call
     (touch.gloc.of wrapped-syntax-object?)
     (push.iloc.0 . 0)
     (apply.gloc.of wrapped-syntax-object? "./boot/macro/syncase.scm" . 310282))
   (if.false.ret)
   (call
     (touch.gloc.of syntax-object-expr)
     (push.iloc.0 . 0)
     (apply.gloc.of syntax-object-expr "./boot/macro/syncase.scm" . 311315))
   (push)
   (ret.subr.gloc.of symbol? "./boot/macro/syncase.scm" . 311306))
 (set.gloc.of identifier?)
 (ret.const.unspec))
((close
   (2 0 . bound-identifier=?)
   (call (push.iloc.0 . 0) (apply.gloc.of identifier? "./boot/macro/syncase.scm" . 315401))
   (if.false.call
     (push.const . bound-identifier=?)
     (push.const . "expected identifier, but got ~r")
     (push.iloc.0 . 0)
     (push.subr.gloc.of format 2 "./boot/macro/syncase.scm" . 316466)
     (apply.gloc.of assertion-violation "./boot/macro/syncase.scm" . 316425))
   (call (push.iloc.0 . 1) (apply.gloc.of identifier? "./boot/macro/syncase.scm" . 317449))
   (if.false.call
     (push.const . bound-identifier=?)
     (push.const . "expected identifier, but got ~r")
     (push.iloc.0 . 1)
     (push.subr.gloc.of format 2 "./boot/macro/syncase.scm" . 318514)
     (apply.gloc.of assertion-violation "./boot/macro/syncase.scm" . 318473))
   (call
     (touch.gloc.of syntax-object-expr)
     (push.iloc.0 . 0)
     (apply.gloc.of syntax-object-expr "./boot/macro/syncase.scm" . 319519))
   (push)
   (push.subr.gloc.of symbol->string 1 "./boot/macro/syncase.scm" . 319503)
   (call
     (touch.gloc.of syntax-object-expr)
     (push.iloc.0 . 1)
     (apply.gloc.of syntax-object-expr "./boot/macro/syncase.scm" . 320543))
   (push)
   (push.subr.gloc.of symbol->string 1 "./boot/macro/syncase.scm" . 320527)
   (ret.subr.gloc.of string=? "./boot/macro/syncase.scm" . 319493))
 (set.gloc.of bound-identifier=?)
 (ret.const.unspec))
((close
   (2 0 . free-identifier=?)
   (call (push.iloc.0 . 0) (apply.gloc.of identifier? "./boot/macro/syncase.scm" . 324617))
   (if.false.call
     (push.const . free-identifier=?)
     (push.const . "expected identifier, but got ~r")
     (push.iloc.0 . 0)
     (push.subr.gloc.of format 2 "./boot/macro/syncase.scm" . 325681)
     (apply.gloc.of assertion-violation "./boot/macro/syncase.scm" . 325641))
   (call (push.iloc.0 . 1) (apply.gloc.of identifier? "./boot/macro/syncase.scm" . 326665))
   (if.false.call
     (push.const . free-identifier=?)
     (push.const . "expected identifier, but got ~r")
     (push.iloc.0 . 1)
     (push.subr.gloc.of format 2 "./boot/macro/syncase.scm" . 327729)
     (apply.gloc.of assertion-violation "./boot/macro/syncase.scm" . 327689))
   (call
     (touch.gloc.of current-expansion-environment)
     (apply.gloc.of current-expansion-environment "./boot/macro/syncase.scm" . 328724))
   (push)
   (call
     (touch.gloc.of current-transformer-environment)
     (apply.gloc.of current-transformer-environment "./boot/macro/syncase.scm" . 329748))
   (push)
   (extend . 2)
   (call
     (touch.gloc.of syntax-object-lexname)
     (push.iloc.1 . 0)
     (apply.gloc.of syntax-object-lexname "./boot/macro/syncase.scm" . 330770))
   (push)
   (call
     (touch.gloc.of syntax-object-lexname)
     (push.iloc.1 . 1)
     (apply.gloc.of syntax-object-lexname "./boot/macro/syncase.scm" . 331794))
   (push)
   (extend . 2)
   (call
     (iloc.0 . 0)
     (if.true.ret)
     (touch.gloc.of lookup-lexical-name)
     (call
       (touch.gloc.of syntax-object-expr)
       (push.iloc 2 . 0)
       (apply.gloc.of syntax-object-expr "./boot/macro/syncase.scm" . 332849))
     (push)
     (push.iloc.1 . 0)
     (apply.gloc.of lookup-lexical-name "./boot/macro/syncase.scm" . 332828))
   (push)
   (call
     (iloc.0 . 1)
     (if.true.ret)
     (touch.gloc.of lookup-lexical-name)
     (call
       (touch.gloc.of syntax-object-expr)
       (push.iloc 2 . 1)
       (apply.gloc.of syntax-object-expr "./boot/macro/syncase.scm" . 333873))
     (push)
     (push.iloc.1 . 0)
     (apply.gloc.of lookup-lexical-name "./boot/macro/syncase.scm" . 333852))
   (push)
   (extend . 2)
   (call (iloc.1 . 0) (if.false.ret) (ret.iloc 1 . 1))
   (if.true (push.iloc.1 . 0) (iloc.1 . 1) (ret.eq? "./boot/macro/syncase.scm" . 334880))
   (push.iloc.0 . 0)
   (iloc.0 . 1)
   (if.eq?
     (call
       (touch.gloc.of lookup-topmost-subst)
       (push.iloc.0 . 0)
       (push.iloc 2 . 1)
       (apply.gloc.of lookup-topmost-subst "./boot/macro/syncase.scm" . 335909))
     (push)
     (call
       (touch.gloc.of lookup-topmost-subst)
       (push.iloc.0 . 1)
       (push.iloc 2 . 0)
       (apply.gloc.of lookup-topmost-subst "./boot/macro/syncase.scm" . 335944))
     (ret.eq? "./boot/macro/syncase.scm" . 335904))
   (call
     (touch.gloc.of syntax-object-renames)
     (push.iloc 3 . 0)
     (apply.gloc.of syntax-object-renames "./boot/macro/syncase.scm" . 337950))
   (push)
   (call
     (touch.gloc.of syntax-object-renames)
     (push.iloc 3 . 1)
     (apply.gloc.of syntax-object-renames "./boot/macro/syncase.scm" . 337985))
   (push)
   (extend . 2)
   (call
     (iloc.0 . 0)
     (if.not.pair?.ret.const . #f)
     (iloc.0 . 1)
     (ret.pair? "./boot/macro/syncase.scm" . 338986))
   (if.true
     (push.cdr.iloc (0 . 0) "./boot/macro/syncase.scm" . 339997)
     (cdr.iloc (0 . 1) "./boot/macro/syncase.scm" . 340008)
     (ret.eq? "./boot/macro/syncase.scm" . 339992))
   (call
     (touch.gloc.of lookup-topmost-subst)
     (push.iloc.1 . 0)
     (push.iloc 3 . 1)
     (apply.gloc.of lookup-topmost-subst "./boot/macro/syncase.scm" . 341021))
   (push)
   (call
     (touch.gloc.of lookup-topmost-subst)
     (push.iloc.1 . 1)
     (push.iloc 3 . 1)
     (apply.gloc.of lookup-topmost-subst "./boot/macro/syncase.scm" . 341056))
   (ret.eq? "./boot/macro/syncase.scm" . 341016))
 (set.gloc.of free-identifier=?)
 (ret.const.unspec))
((close
   (1 0)
   (touch.gloc.of make-syntax-object)
   (call (apply.gloc.of generate-temporary-symbol "./boot/macro/syncase.scm" . 347178))
   (push)
   (push.const)
   (push.const . #f)
   (apply.gloc.of make-syntax-object "./boot/macro/syncase.scm" . 347158))
 (set.gloc.of |.L504|)
 (close
   (1 0 . generate-temporaries)
   (push.iloc.0 . 0)
   (subr.gloc.of list? 1 "./boot/macro/syncase.scm" . 345097)
   (if.false.call
     (push.const . generate-temporaries)
     (push.const . "expected list, but got ~r")
     (push.iloc.0 . 0)
     (push.subr.gloc.of format 2 "./boot/macro/syncase.scm" . 346164)
     (apply.gloc.of assertion-violation "./boot/macro/syncase.scm" . 346121))
   (push.gloc.of |.L504|)
   (push.iloc.0 . 0)
   (apply.gloc.of map "./boot/macro/syncase.scm" . 347141))
 (set.gloc.of generate-temporaries)
 (ret.const.unspec))
((close
   (1 0 . make-variable-transformer)
   (touch.gloc.of make-variable-transformer-token)
   (push.close
     (1 0)
     (call
       (call
         (touch.gloc.of wrapped-syntax-object?)
         (push.iloc.0 . 0)
         (apply.gloc.of wrapped-syntax-object? "./boot/macro/syncase.scm" . 353298))
       (if.true (ret.iloc 0 . 0))
       (touch.gloc.of make-syntax-object)
       (push.iloc.0 . 0)
       (push.const)
       (push.const . #f)
       (apply.gloc.of make-syntax-object "./boot/macro/syncase.scm" . 355346))
     (push)
     (apply.iloc (1 . 0) "./boot/macro/syncase.scm" . 353288))
   (apply.gloc.of make-variable-transformer-token "./boot/macro/syncase.scm" . 351237))
 (set.gloc.of make-variable-transformer)
 (ret.const.unspec))
((close
   (1 0 . make-variable-transformer-token)
   (push.const . type:variable-transformer-token)
   (push.iloc.0 . 0)
   (ret.subr.gloc.of tuple "./boot/macro/syncase.scm" . 359429))
 (set.gloc.of make-variable-transformer-token)
 (ret.const.unspec))
((close
   (1 0 . variable-transformer-token?)
   (push.iloc.0 . 0)
   (push.const . 0)
   (push.subr.gloc.of tuple-ref 2 "./boot/macro/syncase.scm" . 363530)
   (const . type:variable-transformer-token)
   (ret.eq? "./boot/macro/syncase.scm" . 363525))
 (set.gloc.of variable-transformer-token?)
 (ret.const.unspec))
((close
   (1 0 . wrap-transformer-input)
   (call
     (touch.gloc.of wrapped-syntax-object?)
     (push.iloc.0 . 0)
     (apply.gloc.of wrapped-syntax-object? "./boot/macro/syncase.scm" . 367628))
   (if.true (ret.iloc 0 . 0))
   (iloc.0 . 0)
   (if.symbol?
     (touch.gloc.of make-syntax-object)
     (push.iloc.0 . 0)
     (push.iloc.0 . 0)
     (push.const . #f)
     (apply.gloc.of make-syntax-object "./boot/macro/syncase.scm" . 368667))
   (touch.gloc.of make-syntax-object)
   (push.iloc.0 . 0)
   (push.const)
   (push.const . #f)
   (apply.gloc.of make-syntax-object "./boot/macro/syncase.scm" . 369681))
 (set.gloc.of wrap-transformer-input)
 (ret.const.unspec))
((close
   (1 0 . contain-non-id-wrapped-syntax-object?)
   (touch.gloc.of |loop`1790*|)
   (push.iloc.0 . 0)
   (apply.gloc.of |loop`1790*| "./boot/macro/syncase.scm" . 377867))
 (set.gloc.of |contain-non-id-wrapped-syntax-object?`1785*|)
 (close
   (1 0 . loop)
   (iloc.0 . 0)
   (if.pair?
     (call
       (touch.gloc.of |loop`1790*|)
       (push.car.iloc (0 . 0) "./boot/macro/syncase.scm" . 378908)
       (apply.gloc.of |loop`1790*| "./boot/macro/syncase.scm" . 378902))
     (if.true.ret)
     (touch.gloc.of |loop`1790*|)
     (push.cdr.iloc (0 . 0) "./boot/macro/syncase.scm" . 378925)
     (apply.gloc.of |loop`1790*| "./boot/macro/syncase.scm" . 378919))
   (push.iloc.0 . 0)
   (subr.gloc.of vector? 1 "./boot/macro/syncase.scm" . 379922)
   (if.true
     (extend.enclose+
       (1 0 . loop2)
       (>=n.iloc (0 . 0) 0 "./boot/macro/syncase.scm" . 381977)
       (if.false.ret)
       (call
         (touch.gloc.of |loop`1790*|)
         (push.iloc.0 . 0)
         (push.vector-ref.iloc (2 . 0) "./boot/macro/syncase.scm" . 383011)
         (apply.gloc.of |loop`1790*| "./boot/macro/syncase.scm" . 383005))
       (if.true.ret)
       (push.n+.iloc (0 . 0) -1 "./boot/macro/syncase.scm" . 384036)
       (apply.iloc+ (1 . 0) "./boot/macro/syncase.scm" . 384029))
     (push.iloc.1 . 0)
     (push.subr.gloc.of vector-length 1 "./boot/macro/syncase.scm" . 380964)
     (push.const . 1)
     (push.subr.gloc.of - 2 "./boot/macro/syncase.scm" . 380961)
     (apply.iloc+ (0 . 0) "./boot/macro/syncase.scm" . 381972))
   (call (push.iloc.0 . 0) (apply.gloc.of identifier? "./boot/macro/syncase.scm" . 385042))
   (if.true.ret.const . #f)
   (touch.gloc.of wrapped-syntax-object?)
   (push.iloc.0 . 0)
   (apply.gloc.of wrapped-syntax-object? "./boot/macro/syncase.scm" . 387090))
 (set.gloc.of |loop`1790*|)
 (close
   (1 0 . unwrap-syntax)
   (call
     (touch.gloc.of |contain-non-id-wrapped-syntax-object?`1785*|)
     (push.iloc.0 . 0)
     (apply.gloc.of
       |contain-non-id-wrapped-syntax-object?`1785*|
       "./boot/macro/syncase.scm"
       .
       389132))
   (if.true
     (call
       (subr.gloc.of make-core-hashtable 0)
       (push)
       (extend . 1)
       (call
         (extend.enclose
           (1 0 . loop)
           (iloc.0 . 0)
           (if.pair?
             (call
               (push.car.iloc (0 . 0) "./boot/macro/syncase.scm" . 394276)
               (apply.iloc (1 . 0) "./boot/macro/syncase.scm" . 394270))
             (push.cdr.iloc (0 . 0) "./boot/macro/syncase.scm" . 395300)
             (apply.iloc (1 . 0) "./boot/macro/syncase.scm" . 395294))
           (push.iloc.0 . 0)
           (subr.gloc.of vector? 1 "./boot/macro/syncase.scm" . 396318)
           (if.true
             (push.iloc.1 . 0)
             (push.iloc.0 . 0)
             (push.subr.gloc.of vector->list 1 "./boot/macro/syncase.scm" . 397357)
             (apply.gloc.of for-each "./boot/macro/syncase.scm" . 397342))
           (call (push.iloc.0 . 0) (apply.gloc.of identifier? "./boot/macro/syncase.scm" . 398366))
           (if.true
             (call
               (touch.gloc.of syntax-object-renames)
               (push.iloc.0 . 0)
               (apply.gloc.of syntax-object-renames "./boot/macro/syncase.scm" . 399404))
             (push)
             (extend . 1)
             (iloc.0 . 0)
             (if.null?.ret.const . #t)
             (push.iloc 3 . 0)
             (push.car.iloc (0 . 0) "./boot/macro/syncase.scm" . 401473)
             (subr.gloc.of core-hashtable-contains? 2 "./boot/macro/syncase.scm" . 401444)
             (if.true.ret)
             (push.iloc 3 . 0)
             (push.car.iloc (0 . 0) "./boot/macro/syncase.scm" . 402492)
             (push.cdr.iloc (0 . 0) "./boot/macro/syncase.scm" . 402505)
             (ret.subr.gloc.of core-hashtable-set! "./boot/macro/syncase.scm" . 402468))
           (call
             (touch.gloc.of wrapped-syntax-object?)
             (push.iloc.0 . 0)
             (apply.gloc.of wrapped-syntax-object? "./boot/macro/syncase.scm" . 403486))
           (if.true
             (call
               (push.close
                 (1 0)
                 (push.iloc 3 . 0)
                 (push.car.iloc (0 . 0) "./boot/macro/syncase.scm" . 405579)
                 (subr.gloc.of core-hashtable-contains? 2 "./boot/macro/syncase.scm" . 405550)
                 (if.true.ret)
                 (push.iloc 3 . 0)
                 (push.car.iloc (0 . 0) "./boot/macro/syncase.scm" . 406598)
                 (push.cdr.iloc (0 . 0) "./boot/macro/syncase.scm" . 406606)
                 (ret.subr.gloc.of core-hashtable-set! "./boot/macro/syncase.scm" . 406574))
               (call
                 (touch.gloc.of syntax-object-renames)
                 (push.iloc.0 . 0)
                 (apply.gloc.of syntax-object-renames "./boot/macro/syncase.scm" . 407592))
               (push)
               (apply.gloc.of for-each "./boot/macro/syncase.scm" . 404510))
             (call
               (touch.gloc.of syntax-object-expr)
               (push.iloc.0 . 0)
               (apply.gloc.of syntax-object-expr "./boot/macro/syncase.scm" . 408612))
             (push)
             (apply.iloc (1 . 0) "./boot/macro/syncase.scm" . 408606))
           (ret.const.unspec))
         (push.iloc 2 . 0)
         (apply.iloc (0 . 0) "./boot/macro/syncase.scm" . 393239))
       (push.iloc.0 . 0)
       (ret.subr.gloc.of core-hashtable->alist "./boot/macro/syncase.scm" . 409621))
     (push)
     (extend . 1)
     (extend.enclose
       (1 0 . loop)
       (iloc.0 . 0)
       (if.pair?
         (call
           (push.car.iloc (0 . 0) "./boot/macro/syncase.scm" . 412710)
           (apply.iloc (1 . 0) "./boot/macro/syncase.scm" . 412704))
         (push)
         (call
           (push.cdr.iloc (0 . 0) "./boot/macro/syncase.scm" . 412731)
           (apply.iloc (1 . 0) "./boot/macro/syncase.scm" . 412725))
         (push)
         (extend . 2)
         (call
           (push.iloc.0 . 0)
           (car.iloc (1 . 0) "./boot/macro/syncase.scm" . 413740)
           (if.not.eq?.ret.const . #f)
           (push.iloc.0 . 1)
           (cdr.iloc (1 . 0) "./boot/macro/syncase.scm" . 413758)
           (ret.eq? "./boot/macro/syncase.scm" . 413751))
         (if.true (ret.iloc 1 . 0))
         (push.iloc.0 . 0)
         (iloc.0 . 1)
         (ret.cons "./boot/macro/syncase.scm" . 414757))
       (iloc.0 . 0)
       (if.symbol?
         (touch.gloc.of make-syntax-object)
         (push.iloc.0 . 0)
         (call
           (push.iloc.0 . 0)
           (push.iloc 2 . 0)
           (subr.gloc.of assq 2 "./boot/macro/syncase.scm" . 416819)
           (if.true.ret)
           (ret.const))
         (push)
         (push.const . #f)
         (apply.gloc.of make-syntax-object "./boot/macro/syncase.scm" . 416791))
       (call
         (touch.gloc.of wrapped-syntax-object?)
         (push.iloc.0 . 0)
         (apply.gloc.of wrapped-syntax-object? "./boot/macro/syncase.scm" . 417815))
       (if.true
         (call (push.iloc.0 . 0) (apply.gloc.of identifier? "./boot/macro/syncase.scm" . 418846))
         (if.true (ret.iloc 0 . 0))
         (call
           (touch.gloc.of syntax-object-expr)
           (push.iloc.0 . 0)
           (apply.gloc.of syntax-object-expr "./boot/macro/syncase.scm" . 419881))
         (push)
         (apply.iloc (1 . 0) "./boot/macro/syncase.scm" . 419875))
       (push.iloc.0 . 0)
       (subr.gloc.of vector? 1 "./boot/macro/syncase.scm" . 420887)
       (if.true
         (call
           (push.iloc.1 . 0)
           (push.iloc.0 . 0)
           (push.subr.gloc.of vector->list 1 "./boot/macro/syncase.scm" . 421935)
           (apply.gloc.of map "./boot/macro/syncase.scm" . 421925))
         (push)
         (ret.subr.gloc.of list->vector "./boot/macro/syncase.scm" . 421911))
       (ret.iloc 0 . 0))
     (push.iloc 2 . 0)
     (apply.iloc (0 . 0) "./boot/macro/syncase.scm" . 411664))
   (ret.iloc 0 . 0))
 (set.gloc.of unwrap-syntax)
 (ret.const.unspec))
((close
   (2 0 . partial-wrap-syntax-object)
   (extend.enclose+
     (1 0 . loop)
     (call
       (touch.gloc.of |contain-wrapped-syntax-object?`1823*|)
       (push.iloc.0 . 0)
       (apply.gloc.of |contain-wrapped-syntax-object?`1823*| "./boot/macro/syncase.scm" . 476178))
     (if.true
       (iloc.0 . 0)
       (if.pair?
         (call
           (push.car.iloc (0 . 0) "./boot/macro/syncase.scm" . 478248)
           (apply.iloc+ (1 . 0) "./boot/macro/syncase.scm" . 478242))
         (push)
         (call
           (push.cdr.iloc (0 . 0) "./boot/macro/syncase.scm" . 478269)
           (apply.iloc+ (1 . 0) "./boot/macro/syncase.scm" . 478263))
         (push)
         (extend . 2)
         (call
           (push.car.iloc (1 . 0) "./boot/macro/syncase.scm" . 479276)
           (iloc.0 . 0)
           (if.not.eq?.ret.const . #f)
           (push.cdr.iloc (1 . 0) "./boot/macro/syncase.scm" . 479294)
           (iloc.0 . 1)
           (ret.eq? "./boot/macro/syncase.scm" . 479289))
         (if.true (ret.iloc 1 . 0))
         (push.iloc.0 . 0)
         (iloc.0 . 1)
         (ret.cons "./boot/macro/syncase.scm" . 480295))
       (ret.iloc 0 . 0))
     (push.iloc.0 . 0)
     (const . |.&NIL|)
     (if.eq?
       (touch.gloc.of make-syntax-object)
       (push.const)
       (push.const)
       (push.const . #f)
       (apply.gloc.of make-syntax-object "./boot/macro/syncase.scm" . 483346))
     (iloc.0 . 0)
     (if.symbol?
       (touch.gloc.of make-syntax-object)
       (push.iloc.0 . 0)
       (call
         (push.iloc.0 . 0)
         (push.iloc 2 . 1)
         (subr.gloc.of assq 2 "./boot/macro/syncase.scm" . 485422)
         (if.true.ret)
         (ret.const))
       (push)
       (push.const . #f)
       (apply.gloc.of make-syntax-object "./boot/macro/syncase.scm" . 485394))
     (push.iloc.0 . 0)
     (subr.gloc.of vector? 1 "./boot/macro/syncase.scm" . 486418)
     (if.true
       (touch.gloc.of make-syntax-object)
       (call
         (touch.gloc.of |rewrite-nil`1823*|)
         (push.iloc.0 . 0)
         (apply.gloc.of |rewrite-nil`1823*| "./boot/macro/syncase.scm" . 487462))
       (push)
       (push.iloc 2 . 1)
       (push.const . #f)
       (apply.gloc.of make-syntax-object "./boot/macro/syncase.scm" . 487442))
     (iloc.0 . 0)
     (if.pair?
       (touch.gloc.of make-syntax-object)
       (call
         (touch.gloc.of |rewrite-nil`1823*|)
         (push.iloc.0 . 0)
         (apply.gloc.of |rewrite-nil`1823*| "./boot/macro/syncase.scm" . 489510))
       (push)
       (push.iloc 2 . 1)
       (push.const . #f)
       (apply.gloc.of make-syntax-object "./boot/macro/syncase.scm" . 489490))
     (iloc.0 . 0)
     (if.null?.ret.const)
     (touch.gloc.of make-syntax-object)
     (push.iloc.0 . 0)
     (push.const)
     (push.const . #f)
     (apply.gloc.of make-syntax-object "./boot/macro/syncase.scm" . 492562))
   (push.iloc.1 . 0)
   (apply.iloc+ (0 . 0) "./boot/macro/syncase.scm" . 476171))
 (set.gloc.of |partial-wrap-syntax-object`1823*|)
 (close
   (1 0 . contain-wrapped-syntax-object?)
   (touch.gloc.of |loop`1830*|)
   (push.iloc.0 . 0)
   (apply.gloc.of |loop`1830*| "./boot/macro/syncase.scm" . 437259))
 (set.gloc.of |contain-wrapped-syntax-object?`1823*|)
 (close
   (1 0 . loop)
   (iloc.0 . 0)
   (if.pair?
     (car.iloc (0 . 0) "./boot/macro/syncase.scm" . 438301)
     (if.null?.ret.const . #t)
     (call
       (touch.gloc.of |loop`1830*|)
       (push.car.iloc (0 . 0) "./boot/macro/syncase.scm" . 438318)
       (apply.gloc.of |loop`1830*| "./boot/macro/syncase.scm" . 438312))
     (if.true.ret)
     (touch.gloc.of |loop`1830*|)
     (push.cdr.iloc (0 . 0) "./boot/macro/syncase.scm" . 438335)
     (apply.gloc.of |loop`1830*| "./boot/macro/syncase.scm" . 438329))
   (push.iloc.0 . 0)
   (subr.gloc.of vector? 1 "./boot/macro/syncase.scm" . 439314)
   (if.true
     (extend.enclose+
       (1 0 . loop2)
       (>=n.iloc (0 . 0) 0 "./boot/macro/syncase.scm" . 441369)
       (if.false.ret)
       (call
         (touch.gloc.of |loop`1830*|)
         (push.iloc.0 . 0)
         (push.vector-ref.iloc (2 . 0) "./boot/macro/syncase.scm" . 442403)
         (apply.gloc.of |loop`1830*| "./boot/macro/syncase.scm" . 442397))
       (if.true.ret)
       (push.n+.iloc (0 . 0) -1 "./boot/macro/syncase.scm" . 443428)
       (apply.iloc+ (1 . 0) "./boot/macro/syncase.scm" . 443421))
     (push.iloc.1 . 0)
     (push.subr.gloc.of vector-length 1 "./boot/macro/syncase.scm" . 440356)
     (push.const . 1)
     (push.subr.gloc.of - 2 "./boot/macro/syncase.scm" . 440353)
     (apply.iloc+ (0 . 0) "./boot/macro/syncase.scm" . 441364))
   (touch.gloc.of wrapped-syntax-object?)
   (push.iloc.0 . 0)
   (apply.gloc.of wrapped-syntax-object? "./boot/macro/syncase.scm" . 445458))
 (set.gloc.of |loop`1830*|)
 (close
   (1 0 . rewrite-nil)
   (touch.gloc.of |loop`1844*|)
   (push.iloc.0 . 0)
   (apply.gloc.of |loop`1844*| "./boot/macro/syncase.scm" . 450571))
 (set.gloc.of |rewrite-nil`1823*|)
 (close
   (2 0 . wrap-renamed-id)
   (extend.enclose+
     (1 0 . loop)
     (iloc.0 . 0)
     (if.pair?
       (call
         (push.car.iloc (0 . 0) "./boot/macro/syncase.scm" . 463905)
         (apply.iloc+ (1 . 0) "./boot/macro/syncase.scm" . 463899))
       (push)
       (call
         (push.cdr.iloc (0 . 0) "./boot/macro/syncase.scm" . 463926)
         (apply.iloc+ (1 . 0) "./boot/macro/syncase.scm" . 463920))
       (push)
       (extend . 2)
       (call
         (push.car.iloc (1 . 0) "./boot/macro/syncase.scm" . 464933)
         (iloc.0 . 0)
         (if.not.eq?.ret.const . #f)
         (push.cdr.iloc (1 . 0) "./boot/macro/syncase.scm" . 464951)
         (iloc.0 . 1)
         (ret.eq? "./boot/macro/syncase.scm" . 464946))
       (if.true (ret.iloc 1 . 0))
       (push.iloc.0 . 0)
       (iloc.0 . 1)
       (ret.cons "./boot/macro/syncase.scm" . 465952))
     (push.iloc.0 . 0)
     (subr.gloc.of vector? 1 "./boot/macro/syncase.scm" . 466962)
     (if.true
       (call
         (push.iloc.0 . 0)
         (push.subr.gloc.of vector->list 1 "./boot/macro/syncase.scm" . 468006)
         (apply.iloc+ (1 . 0) "./boot/macro/syncase.scm" . 468000))
       (push)
       (ret.subr.gloc.of list->vector "./boot/macro/syncase.scm" . 467986))
     (call
       (touch.gloc.of renamed-id?)
       (push.iloc.0 . 0)
       (apply.gloc.of renamed-id? "./boot/macro/syncase.scm" . 469010))
     (if.true
       (touch.gloc.of make-syntax-object)
       (push.iloc.0 . 0)
       (call
         (push.iloc.0 . 0)
         (push.iloc 2 . 1)
         (subr.gloc.of assq 2 "./boot/macro/syncase.scm" . 470062)
         (if.true.ret)
         (ret.const))
       (push)
       (push.const . #f)
       (apply.gloc.of make-syntax-object "./boot/macro/syncase.scm" . 470034))
     (ret.iloc 0 . 0))
   (push.iloc.1 . 0)
   (apply.iloc+ (0 . 0) "./boot/macro/syncase.scm" . 462859))
 (set.gloc.of |wrap-renamed-id`1823*|)
 (close
   (1 0 . loop)
   (iloc.0 . 0)
   (if.pair?
     (call
       (touch.gloc.of |loop`1844*|)
       (push.car.iloc (0 . 0) "./boot/macro/syncase.scm" . 451617)
       (apply.gloc.of |loop`1844*| "./boot/macro/syncase.scm" . 451611))
     (push)
     (call
       (touch.gloc.of |loop`1844*|)
       (push.cdr.iloc (0 . 0) "./boot/macro/syncase.scm" . 451638)
       (apply.gloc.of |loop`1844*| "./boot/macro/syncase.scm" . 451632))
     (push)
     (extend . 2)
     (call
       (push.car.iloc (1 . 0) "./boot/macro/syncase.scm" . 452645)
       (iloc.0 . 0)
       (if.not.eq?.ret.const . #f)
       (push.cdr.iloc (1 . 0) "./boot/macro/syncase.scm" . 452663)
       (iloc.0 . 1)
       (ret.eq? "./boot/macro/syncase.scm" . 452658))
     (if.true (ret.iloc 1 . 0))
     (push.iloc.0 . 0)
     (iloc.0 . 1)
     (ret.cons "./boot/macro/syncase.scm" . 453664))
   (push.iloc.0 . 0)
   (subr.gloc.of vector? 1 "./boot/macro/syncase.scm" . 454674)
   (if.true
     (call
       (touch.gloc.of |loop`1844*|)
       (push.iloc.0 . 0)
       (push.subr.gloc.of vector->list 1 "./boot/macro/syncase.scm" . 455718)
       (apply.gloc.of |loop`1844*| "./boot/macro/syncase.scm" . 455712))
     (push)
     (ret.subr.gloc.of list->vector "./boot/macro/syncase.scm" . 455698))
   (push.iloc.0 . 0)
   (const . |.&NIL|)
   (if.eq?.ret.const)
   (ret.iloc 0 . 0))
 (set.gloc.of |loop`1844*|)
 (close
   (1 0 . emit)
   (call
     (touch.gloc.of wrapped-syntax-object?)
     (push.iloc.0 . 0)
     (apply.gloc.of wrapped-syntax-object? "./boot/macro/syncase.scm" . 431120))
   (if.true (ret.iloc 0 . 0))
   (touch.gloc.of make-syntax-object)
   (push.iloc.0 . 0)
   (push.const)
   (push.const . #f)
   (apply.gloc.of make-syntax-object "./boot/macro/syncase.scm" . 432149))
 (set.gloc.of |emit`1823*|)
 (close
   (6 0 . syntax-transcribe)
   (iloc.0 . 1)
   (if.null?
     (touch.gloc.of make-syntax-object)
     (push.const)
     (push.const)
     (push.const . #f)
     (apply.gloc.of make-syntax-object "./boot/macro/syncase.scm" . 495625))
   (call
     (touch.gloc.of current-expansion-environment)
     (apply.gloc.of current-expansion-environment "./boot/macro/syncase.scm" . 497681))
   (push)
   (extend . 1)
   (call
     (touch.gloc.of current-transformer-environment)
     (apply.gloc.of current-transformer-environment "./boot/macro/syncase.scm" . 499729))
   (push)
   (extend . 1)
   (call
     (touch.gloc.of current-rename-count)
     (apply.gloc.of current-rename-count "./boot/macro/syncase.scm" . 501777))
   (push)
   (extend . 1)
   (call
     (push.close
       (1 0)
       (push.iloc.0 . 0)
       (call
         (touch.gloc.of rename-id)
         (push.iloc.0 . 0)
         (push.iloc.1 . 0)
         (apply.gloc.of rename-id "./boot/macro/syncase.scm" . 503852))
       (ret.cons "./boot/macro/syncase.scm" . 503843))
     (call
       (touch.gloc.of collect-rename-ids)
       (push.iloc 3 . 1)
       (push.iloc 3 . 3)
       (apply.gloc.of collect-rename-ids "./boot/macro/syncase.scm" . 504854))
     (push)
     (apply.gloc.of map "./boot/macro/syncase.scm" . 503825))
   (push)
   (extend . 1)
   (call
     (iloc 4 . 2)
     (if.null?
       (push.close
         (1 0)
         (push.cdr.iloc (0 . 0) "./boot/macro/syncase.scm" . 507950)
         (call
           (touch.gloc.of env-lookup)
           (push.iloc 3 . 0)
           (push.car.iloc (0 . 0) "./boot/macro/syncase.scm" . 507980)
           (apply.gloc.of env-lookup "./boot/macro/syncase.scm" . 507960))
         (ret.cons "./boot/macro/syncase.scm" . 507944))
       (push.iloc.0 . 0)
       (apply.gloc.of map "./boot/macro/syncase.scm" . 507925))
     (push.close
       (1 0)
       (push.car.iloc (0 . 0) "./boot/macro/syncase.scm" . 509993)
       (push.iloc 5 . 2)
       (push.subr.gloc.of assq 2 "./boot/macro/syncase.scm" . 509987)
       (extend . 1)
       (iloc.0 . 0)
       (if.true
         (push.cdr.iloc (1 . 0) "./boot/macro/syncase.scm" . 510038)
         (cdr.iloc (0 . 0) "./boot/macro/syncase.scm" . 510048)
         (ret.cons "./boot/macro/syncase.scm" . 510032))
       (push.cdr.iloc (1 . 0) "./boot/macro/syncase.scm" . 511022)
       (call
         (touch.gloc.of env-lookup)
         (push.iloc 4 . 0)
         (push.car.iloc (1 . 0) "./boot/macro/syncase.scm" . 511052)
         (apply.gloc.of env-lookup "./boot/macro/syncase.scm" . 511032))
       (ret.cons "./boot/macro/syncase.scm" . 511016))
     (push.iloc.0 . 0)
     (apply.gloc.of
       map
       (map (lambda (|lst`1882*|)
              (let ((|.L521`1884*| (assq (car |lst`1882*|) |template-env`1822*|)))
                (if |.L521`1884*|
                    (cons (cdr |lst`1882*|) (cdr |.L521`1884*|))
                    (cons (cdr |lst`1882*|) (env-lookup |env-def`1872*| (car |lst`1882*|))))))
            |aliases`1878*|)))
   (push)
   (extend . 1)
   (call
     (iloc 5 . 5)
     (if.null? (ret.const))
     (iloc 3 . 0)
     (if.null?.ret.const)
     (push.gloc.of values)
     (call
       (push.close
         (1 0)
         (push.car.iloc (0 . 0) "./boot/macro/syncase.scm" . 519217)
         (push.iloc 6 . 5)
         (push.subr.gloc.of assq 2 "./boot/macro/syncase.scm" . 520240)
         (extend . 1)
         (iloc.0 . 0)
         (if.false.ret)
         (call
           (call
             (touch.gloc.of lookup-lexical-name)
             (push.car.iloc (1 . 0) "./boot/macro/syncase.scm" . 519217)
             (push.iloc 5 . 0)
             (apply.gloc.of lookup-lexical-name "./boot/macro/syncase.scm" . 522306))
           (push)
           (cdr.iloc (0 . 0) "./boot/macro/syncase.scm" . 522339)
           (if.eq?.ret.const . #t)
           (call
             (touch.gloc.of local-macro-symbol?)
             (push.cdr.iloc (0 . 0) "./boot/macro/syncase.scm" . 523351)
             (apply.gloc.of local-macro-symbol? "./boot/macro/syncase.scm" . 523330))
           (if.false.ret)
           (call
             (touch.gloc.of lookup-lexical-name)
             (push.car.iloc (0 . 0) "./boot/macro/syncase.scm" . 524394)
             (push.iloc 6 . 0)
             (apply.gloc.of lookup-lexical-name "./boot/macro/syncase.scm" . 524373))
           (push)
           (extend . 1)
           (call
             (touch.gloc.of local-macro-symbol?)
             (push.iloc.0 . 0)
             (apply.gloc.of local-macro-symbol? "./boot/macro/syncase.scm" . 525385))
           (if.false.ret)
           (push.iloc.0 . 0)
           (call
             (touch.gloc.of lookup-lexical-name)
             (push.car.iloc (1 . 0) "./boot/macro/syncase.scm" . 526447)
             (push.iloc 6 . 0)
             (apply.gloc.of lookup-lexical-name "./boot/macro/syncase.scm" . 526426))
           (ret.eq? "./boot/macro/syncase.scm" . 526409))
         (if.true.ret.const . #f)
         (push.cdr.iloc (1 . 0) "./boot/macro/syncase.scm" . 528447)
         (call
           (touch.gloc.of make-out-of-context)
           (push.iloc 7 . 1)
           (apply.gloc.of make-out-of-context "./boot/macro/syncase.scm" . 528455))
         (ret.cons "./boot/macro/syncase.scm" . 528441))
       (push.iloc.1 . 0)
       (apply.gloc.of
         map
         (map (lambda (|a`1890*|)
                (let ((|.L522`1894*| (assq (car |a`1890*|) |lexname-check-list`1822*|)))
                  (and |.L522`1894*|
                       (if (or (eq?
                                 (lookup-lexical-name (car |a`1890*|) |env-def`1872*|)
                                 (cdr |.L522`1894*|))
                               (and (local-macro-symbol? (cdr |.L522`1894*|))
                                    (let ((|lexname-use`1898*|
                                            (lookup-lexical-name
                                              (car |.L522`1894*|)
                                              |env-use`1870*|)))
                                      (and (local-macro-symbol? |lexname-use`1898*|)
                                           (eq?
                                             |lexname-use`1898*|
                                             (lookup-lexical-name
                                               (car |.L522`1894*|)
                                               |env-def`1872*|))))))
                           #f
                           (cons (cdr |a`1890*|) (make-out-of-context |template`1822*|))))))
              |aliases`1878*|)))
     (push)
     (apply.gloc.of
       filter
       (filter
         values
         (map (lambda (|a`1890*|)
                (let ((|.L522`1894*| (assq (car |a`1890*|) |lexname-check-list`1822*|)))
                  (and |.L522`1894*|
                       (if (or (eq?
                                 (lookup-lexical-name (car |a`1890*|) |env-def`1872*|)
                                 (cdr |.L522`1894*|))
                               (and (local-macro-symbol? (cdr |.L522`1894*|))
                                    (let ((|lexname-use`1898*|
                                            (lookup-lexical-name
                                              (car |.L522`1894*|)
                                              |env-use`1870*|)))
                                      (and (local-macro-symbol? |lexname-use`1898*|)
                                           (eq?
                                             |lexname-use`1898*|
                                             (lookup-lexical-name
                                               (car |.L522`1894*|)
                                               |env-def`1872*|))))))
                           #f
                           (cons (cdr |a`1890*|) (make-out-of-context |template`1822*|))))))
              |aliases`1878*|))))
   (push)
   (extend . 1)
   (call (iloc 6 . 0) (if.true.ret) (ret.const))
   (push)
   (extend . 1)
   (iloc 6 . 0)
   (if.null?
     (call
       (touch.gloc.of transcribe-template)
       (push.iloc 7 . 1)
       (push.iloc 7 . 3)
       (push.iloc.0 . 0)
       (push.iloc 3 . 0)
       (push.const . #f)
       (apply.gloc.of transcribe-template "./boot/macro/syncase.scm" . 533533))
     (push)
     (extend . 1)
     (call
       (touch.gloc.of renamed-id?)
       (push.iloc.0 . 0)
       (apply.gloc.of renamed-id? "./boot/macro/syncase.scm" . 534551))
     (if.true
       (touch.gloc.of make-syntax-object)
       (push.iloc.0 . 0)
       (call
         (push.iloc.0 . 0)
         (push.iloc 3 . 0)
         (subr.gloc.of assq 2 "./boot/macro/syncase.scm" . 535604)
         (if.true.ret)
         (ret.const))
       (push)
       (push.iloc 8 . 4)
       (apply.gloc.of make-syntax-object "./boot/macro/syncase.scm" . 535575))
     (touch.gloc.of |wrap-renamed-id`1823*|)
     (push.iloc.0 . 0)
     (push.iloc 3 . 0)
     (apply.gloc.of |wrap-renamed-id`1823*| "./boot/macro/syncase.scm" . 536599))
   (call
     (touch.gloc.of transcribe-template)
     (push.iloc 7 . 1)
     (push.iloc 7 . 3)
     (push.iloc.0 . 0)
     (push.iloc 3 . 0)
     (push.gloc.of |emit`1823*|)
     (apply.gloc.of transcribe-template "./boot/macro/syncase.scm" . 537629))
   (push)
   (extend . 1)
   (iloc.0 . 0)
   (if.null?.ret.const)
   (call
     (touch.gloc.of wrapped-syntax-object?)
     (push.iloc.0 . 0)
     (apply.gloc.of wrapped-syntax-object? "./boot/macro/syncase.scm" . 539674))
   (if.true (ret.iloc 0 . 0))
   (push.iloc.0 . 0)
   (const . |.&NIL|)
   (if.eq?
     (touch.gloc.of make-syntax-object)
     (push.const)
     (push.const)
     (push.const . #f)
     (apply.gloc.of make-syntax-object "./boot/macro/syncase.scm" . 541722))
   (iloc.0 . 0)
   (if.symbol?
     (touch.gloc.of make-syntax-object)
     (push.iloc.0 . 0)
     (call
       (push.iloc.0 . 0)
       (push.iloc 2 . 0)
       (subr.gloc.of assq 2 "./boot/macro/syncase.scm" . 543799)
       (if.true.ret)
       (push.iloc.0 . 0)
       (push.iloc 3 . 0)
       (subr.gloc.of assq 2 "./boot/macro/syncase.scm" . 543826)
       (if.true.ret)
       (ret.const))
     (push)
     (push.iloc 8 . 4)
     (apply.gloc.of make-syntax-object "./boot/macro/syncase.scm" . 543770))
   (touch.gloc.of |partial-wrap-syntax-object`1823*|)
   (push.iloc.0 . 0)
   (call
     (touch.gloc.of extend-env)
     (push.iloc 2 . 0)
     (push.iloc 3 . 0)
     (apply.gloc.of extend-env "./boot/macro/syncase.scm" . 545851))
   (push)
   (apply.gloc.of |partial-wrap-syntax-object`1823*| "./boot/macro/syncase.scm" . 545818))
 (set.gloc.of syntax-transcribe)
 (ret.const.unspec))
((close
   (2 0)
   (touch.gloc.of syntax-transcribe)
   (push.iloc.0 . 0)
   (push.iloc.0 . 1)
   (push.const)
   (push.const)
   (push.iloc.0 . 1)
   (push.const)
   (apply.gloc.of syntax-transcribe "./boot/macro/syncase.scm" . 551941))
 (set.gloc.of |.L539|)
 (push.const . |.syntax/i0n|)
 (push.gloc.of |.L539|)
 (ret.subr.gloc.of set-top-level-value! "./boot/macro/syncase.scm" . 549889))
((close
   (2 0)
   (touch.gloc.of syntax-transcribe)
   (push.iloc.0 . 0)
   (push.iloc.0 . 1)
   (push.const)
   (push.iloc.0 . 1)
   (const . 0)
   (push.cons)
   (push.subr.gloc.of list 1 "./boot/macro/syncase.scm" . 556074)
   (push.iloc.0 . 1)
   (push.const)
   (apply.gloc.of syntax-transcribe "./boot/macro/syncase.scm" . 556037))
 (set.gloc.of |.L541|)
 (push.const . |.syntax/i1n|)
 (push.gloc.of |.L541|)
 (ret.subr.gloc.of set-top-level-value! "./boot/macro/syncase.scm" . 553985))
((close
   (3 0)
   (touch.gloc.of syntax-transcribe)
   (push.iloc.0 . 0)
   (push.iloc.0 . 1)
   (push.const)
   (push.const)
   (push.iloc.0 . 2)
   (push.const)
   (apply.gloc.of syntax-transcribe "./boot/macro/syncase.scm" . 560133))
 (set.gloc.of |.L543|)
 (push.const . |.syntax/i2n|)
 (push.gloc.of |.L543|)
 (ret.subr.gloc.of set-top-level-value! "./boot/macro/syncase.scm" . 558081))
((close
   (3 0)
   (touch.gloc.of syntax-transcribe)
   (push.iloc.0 . 0)
   (push.iloc.0 . 1)
   (push.const)
   (push.iloc.0 . 1)
   (const . 0)
   (push.cons)
   (push.subr.gloc.of list 1 "./boot/macro/syncase.scm" . 564266)
   (push.iloc.0 . 2)
   (push.const)
   (apply.gloc.of syntax-transcribe "./boot/macro/syncase.scm" . 564229))
 (set.gloc.of |.L545|)
 (push.const . |.syntax/i3n|)
 (push.gloc.of |.L545|)
 (ret.subr.gloc.of set-top-level-value! "./boot/macro/syncase.scm" . 562177))
((close
   (2 0)
   (touch.gloc.of syntax-transcribe)
   (push.iloc.0 . 0)
   (push.iloc.0 . 1)
   (push.const)
   (push.const)
   (push.const . #f)
   (push.const)
   (apply.gloc.of syntax-transcribe "./boot/macro/syncase.scm" . 568325))
 (set.gloc.of |.L547|)
 (push.const . |.syntax/c0n|)
 (push.gloc.of |.L547|)
 (ret.subr.gloc.of set-top-level-value! "./boot/macro/syncase.scm" . 566273))
((close
   (3 0)
   (touch.gloc.of syntax-transcribe)
   (push.iloc.0 . 0)
   (push.iloc.0 . 1)
   (push.const)
   (push.iloc.0 . 2)
   (push.const . #f)
   (push.const)
   (apply.gloc.of syntax-transcribe "./boot/macro/syncase.scm" . 572421))
 (set.gloc.of |.L549|)
 (push.const . |.syntax/c1n|)
 (push.gloc.of |.L549|)
 (ret.subr.gloc.of set-top-level-value! "./boot/macro/syncase.scm" . 570369))
((close
   (3 0)
   (touch.gloc.of syntax-transcribe)
   (push.iloc.0 . 0)
   (push.iloc.0 . 1)
   (push.const)
   (push.const)
   (push.const . #f)
   (push.iloc.0 . 2)
   (apply.gloc.of syntax-transcribe "./boot/macro/syncase.scm" . 576517))
 (set.gloc.of |.L551|)
 (push.const . |.syntax/c2n|)
 (push.gloc.of |.L551|)
 (ret.subr.gloc.of set-top-level-value! "./boot/macro/syncase.scm" . 574465))
((close
   (4 0)
   (touch.gloc.of syntax-transcribe)
   (push.iloc.0 . 0)
   (push.iloc.0 . 1)
   (push.const)
   (push.iloc.0 . 2)
   (push.const . #f)
   (push.iloc.0 . 3)
   (apply.gloc.of syntax-transcribe "./boot/macro/syncase.scm" . 580613))
 (set.gloc.of |.L553|)
 (push.const . |.syntax/c3n|)
 (push.gloc.of |.L553|)
 (ret.subr.gloc.of set-top-level-value! "./boot/macro/syncase.scm" . 578561))
((close
   (3 0)
   (touch.gloc.of syntax-transcribe)
   (push.iloc.0 . 0)
   (push.iloc.0 . 1)
   (push.iloc.0 . 2)
   (push.const)
   (push.iloc.0 . 1)
   (push.const)
   (apply.gloc.of syntax-transcribe "./boot/macro/syncase.scm" . 586757))
 (set.gloc.of |.L555|)
 (push.const . |.syntax/i0e|)
 (push.gloc.of |.L555|)
 (ret.subr.gloc.of set-top-level-value! "./boot/macro/syncase.scm" . 584705))
((close
   (3 0)
   (touch.gloc.of syntax-transcribe)
   (push.iloc.0 . 0)
   (push.iloc.0 . 1)
   (push.iloc.0 . 2)
   (push.iloc.0 . 1)
   (const . 0)
   (push.cons)
   (push.subr.gloc.of list 1 "./boot/macro/syncase.scm" . 590890)
   (push.iloc.0 . 1)
   (push.const)
   (apply.gloc.of syntax-transcribe "./boot/macro/syncase.scm" . 590853))
 (set.gloc.of |.L557|)
 (push.const . |.syntax/i1e|)
 (push.gloc.of |.L557|)
 (ret.subr.gloc.of set-top-level-value! "./boot/macro/syncase.scm" . 588801))
((close
   (4 0)
   (touch.gloc.of syntax-transcribe)
   (push.iloc.0 . 0)
   (push.iloc.0 . 1)
   (push.iloc.0 . 2)
   (push.const)
   (push.iloc.0 . 3)
   (push.const)
   (apply.gloc.of syntax-transcribe "./boot/macro/syncase.scm" . 594949))
 (set.gloc.of |.L559|)
 (push.const . |.syntax/i2e|)
 (push.gloc.of |.L559|)
 (ret.subr.gloc.of set-top-level-value! "./boot/macro/syncase.scm" . 592897))
((close
   (4 0)
   (touch.gloc.of syntax-transcribe)
   (push.iloc.0 . 0)
   (push.iloc.0 . 1)
   (push.iloc.0 . 2)
   (push.iloc.0 . 1)
   (const . 0)
   (push.cons)
   (push.subr.gloc.of list 1 "./boot/macro/syncase.scm" . 599082)
   (push.iloc.0 . 3)
   (push.const)
   (apply.gloc.of syntax-transcribe "./boot/macro/syncase.scm" . 599045))
 (set.gloc.of |.L561|)
 (push.const . |.syntax/i3e|)
 (push.gloc.of |.L561|)
 (ret.subr.gloc.of set-top-level-value! "./boot/macro/syncase.scm" . 596993))
((close
   (3 0)
   (touch.gloc.of syntax-transcribe)
   (push.iloc.0 . 0)
   (push.iloc.0 . 1)
   (push.iloc.0 . 2)
   (push.const)
   (push.const . #f)
   (push.const)
   (apply.gloc.of syntax-transcribe "./boot/macro/syncase.scm" . 603141))
 (set.gloc.of |.L563|)
 (push.const . |.syntax/c0e|)
 (push.gloc.of |.L563|)
 (ret.subr.gloc.of set-top-level-value! "./boot/macro/syncase.scm" . 601089))
((close
   (4 0)
   (touch.gloc.of syntax-transcribe)
   (push.iloc.0 . 0)
   (push.iloc.0 . 1)
   (push.iloc.0 . 2)
   (push.iloc.0 . 3)
   (push.const . #f)
   (push.const)
   (apply.gloc.of syntax-transcribe "./boot/macro/syncase.scm" . 607237))
 (set.gloc.of |.L565|)
 (push.const . |.syntax/c1e|)
 (push.gloc.of |.L565|)
 (ret.subr.gloc.of set-top-level-value! "./boot/macro/syncase.scm" . 605185))
((close
   (4 0)
   (touch.gloc.of syntax-transcribe)
   (push.iloc.0 . 0)
   (push.iloc.0 . 1)
   (push.iloc.0 . 2)
   (push.const)
   (push.const . #f)
   (push.iloc.0 . 3)
   (apply.gloc.of syntax-transcribe "./boot/macro/syncase.scm" . 611333))
 (set.gloc.of |.L567|)
 (push.const . |.syntax/c2e|)
 (push.gloc.of |.L567|)
 (ret.subr.gloc.of set-top-level-value! "./boot/macro/syncase.scm" . 609281))
((close
   (5 0)
   (touch.gloc.of syntax-transcribe)
   (push.iloc.0 . 0)
   (push.iloc.0 . 1)
   (push.iloc.0 . 2)
   (push.iloc.0 . 3)
   (push.const . #f)
   (push.iloc.0 . 4)
   (apply.gloc.of syntax-transcribe "./boot/macro/syncase.scm" . 615429))
 (set.gloc.of |.L569|)
 (push.const . |.syntax/c3e|)
 (push.gloc.of |.L569|)
 (ret.subr.gloc.of set-top-level-value! "./boot/macro/syncase.scm" . 613377))

;
((call (push.const) (apply.gloc.of make-parameter "./boot/macro/library.scm" . 5150))
 (set.gloc.of scheme-library-paths)
 (ret.const.unspec))
((call
   (subr.gloc.of make-core-hashtable 0)
   (push)
   (apply.gloc.of make-parameter "./boot/macro/library.scm" . 6176))
 (set.gloc.of scheme-library-exports)
 (ret.const.unspec))
((call
   (subr.gloc.of make-core-hashtable 0)
   (push)
   (apply.gloc.of make-parameter "./boot/macro/library.scm" . 7201))
 (set.gloc.of scheme-library-versions)
 (ret.const.unspec))
((close
   (2 0 . symbol-list->string)
   (push.gloc.of string-append)
   (call
     (extend.enclose+
       (1 0 . loop)
       (iloc.0 . 0)
       (if.null?.ret.const)
       (car.iloc (0 . 0) "./boot/macro/library.scm" . 14371)
       (if.symbol?
         (push.iloc 2 . 1)
         (push.car.iloc (0 . 0) "./boot/macro/library.scm" . 16438)
         (push.subr.gloc.of symbol->string 1 "./boot/macro/library.scm" . 16422)
         (call
           (push.cdr.iloc (0 . 0) "./boot/macro/library.scm" . 17452)
           (apply.iloc+ (1 . 0) "./boot/macro/library.scm" . 17446))
         (push)
         (subr.gloc.of cons 2 "./boot/macro/library.scm" . 16416)
         (ret.cons "./boot/macro/library.scm" . 15386))
       (push.cdr.iloc (0 . 0) "./boot/macro/library.scm" . 19488)
       (apply.iloc+ (1 . 0) "./boot/macro/library.scm" . 19482))
     (push.iloc.1 . 0)
     (apply.iloc+ (0 . 0) "./boot/macro/library.scm" . 13331))
   (push)
   (push.subr.gloc.of
     cdr
     1
     (cdr
       (letrec* ((|loop`1945*|
                   (lambda (|lst`1946*|)
                     (if (null? |lst`1946*|)
                         '()
                         (if (symbol? (car |lst`1946*|))
                             (cons |infix`1941*|
                                   (cons (symbol->string (car |lst`1946*|))
                                         (|loop`1945*| (cdr |lst`1946*|))))
                             (|loop`1945*| (cdr |lst`1946*|)))))))
         (|loop`1945*| |ref`1941*|))))
   (apply.gloc.of
     apply
     (apply
       string-append
       (cdr
         (letrec* ((|loop`1945*|
                     (lambda (|lst`1946*|)
                       (if (null? |lst`1946*|)
                           '()
                           (if (symbol? (car |lst`1946*|))
                               (cons |infix`1941*|
                                     (cons (symbol->string (car |lst`1946*|))
                                           (|loop`1945*| (cdr |lst`1946*|))))
                               (|loop`1945*| (cdr |lst`1946*|)))))))
           (|loop`1945*| |ref`1941*|))))))
 (set.gloc.of symbol-list->string)
 (ret.const.unspec))
((close
   (1 0 . generate-library-id)
   (touch.gloc.of library-name->id)
   (push.const . #f)
   (push.iloc.0 . 0)
   (apply.gloc.of library-name->id "./boot/macro/library.scm" . 23557))
 (set.gloc.of generate-library-id)
 (ret.const.unspec))
((close
   (2 0 . library-name->id)
   (extend.enclose+
     (0 0 . malformed-name)
     (iloc 2 . 0)
     (if.true
       (push.const . library)
       (push.const . "malformed library name")
       (call
         (touch.gloc.of abbreviated-take-form)
         (push.iloc 2 . 0)
         (push.const . 4)
         (push.const . 8)
         (apply.gloc.of abbreviated-take-form "./boot/macro/library.scm" . 31809))
       (push)
       (push.iloc 2 . 1)
       (apply.gloc.of syntax-violation "./boot/macro/library.scm" . 31757))
     (push.const . library)
     (push.const . "malformed library name")
     (push.iloc 2 . 1)
     (apply.gloc.of syntax-violation "./boot/macro/library.scm" . 32781))
   (call
     (push.iloc.1 . 1)
     (subr.gloc.of list? 1 "./boot/macro/library.scm" . 34830)
     (if.false.ret)
     (push.iloc.1 . 1)
     (push.subr.gloc.of null? 1 "./boot/macro/library.scm" . 34848)
     (ret.subr.gloc.of not "./boot/macro/library.scm" . 34843))
   (if.true
     (call
       (touch.gloc.of every1)
       (push.gloc.of symbol?)
       (push.iloc.1 . 1)
       (apply.gloc.of every1 "./boot/macro/library.scm" . 35853))
     (if.true
       (call
         (touch.gloc.of symbol-list->string)
         (push.iloc.1 . 1)
         (push.const . "~a")
         (subr.gloc.of current-library-infix 0)
         (push)
         (push.subr.gloc.of format 2 "./boot/macro/library.scm" . 36919)
         (apply.gloc.of symbol-list->string "./boot/macro/library.scm" . 36893))
       (push)
       (ret.subr.gloc.of string->symbol "./boot/macro/library.scm" . 36877))
     (push.iloc.1 . 1)
     (push.iloc.1 . 1)
     (push.subr.gloc.of length 1 "./boot/macro/library.scm" . 37932)
     (push.const . 1)
     (push.subr.gloc.of - 2 "./boot/macro/library.scm" . 37929)
     (push.subr.gloc.of list-head 2 "./boot/macro/library.scm" . 37913)
     (extend . 1)
     (call
       (touch.gloc.of every1)
       (push.gloc.of symbol?)
       (push.iloc.0 . 0)
       (apply.gloc.of every1 "./boot/macro/library.scm" . 38931))
     (if.true
       (call
         (touch.gloc.of symbol-list->string)
         (push.iloc.0 . 0)
         (push.const . "~a")
         (subr.gloc.of current-library-infix 0)
         (push)
         (push.subr.gloc.of format 2 "./boot/macro/library.scm" . 39997)
         (apply.gloc.of symbol-list->string "./boot/macro/library.scm" . 39971))
       (push)
       (ret.subr.gloc.of string->symbol "./boot/macro/library.scm" . 39955))
     (apply.iloc+ (1 . 0) "./boot/macro/library.scm" . 40979))
   (apply.iloc+ (0 . 0) "./boot/macro/library.scm" . 41993))
 (set.gloc.of library-name->id)
 (ret.const.unspec))
((close
   (1 0 . exact-nonnegative-integer?)
   (push.iloc.0 . 0)
   (subr.gloc.of integer? 1 "./boot/macro/library.scm" . 55310)
   (if.false.ret)
   (push.iloc.0 . 0)
   (subr.gloc.of exact? 1 "./boot/macro/library.scm" . 55325)
   (if.false.ret)
   (push.iloc.0 . 0)
   (push.const . 0)
   (ret.subr.gloc.of >= "./boot/macro/library.scm" . 55338))
 (set.gloc.of |exact-nonnegative-integer?`1958*|)
 (close
   (2 0 . library-name->version)
   (extend.enclose+
     (0 0 . malformed-version)
     (iloc 2 . 0)
     (if.pair?
       (push.const . library)
       (push.const . "malformed library version")
       (call
         (touch.gloc.of abbreviated-take-form)
         (push.iloc 2 . 0)
         (push.const . 4)
         (push.const . 8)
         (apply.gloc.of abbreviated-take-form "./boot/macro/library.scm" . 50244))
       (push)
       (push.iloc 2 . 1)
       (apply.gloc.of syntax-violation "./boot/macro/library.scm" . 50189))
     (push.const . library)
     (push.const . "malformed library version")
     (push.iloc 2 . 1)
     (apply.gloc.of syntax-violation "./boot/macro/library.scm" . 51213))
   (call
     (push.iloc.1 . 1)
     (subr.gloc.of list? 1 "./boot/macro/library.scm" . 57358)
     (if.false.ret)
     (push.iloc.1 . 1)
     (push.subr.gloc.of null? 1 "./boot/macro/library.scm" . 57376)
     (ret.subr.gloc.of not "./boot/macro/library.scm" . 57371))
   (if.true
     (call
       (touch.gloc.of every1)
       (push.gloc.of symbol?)
       (push.iloc.1 . 1)
       (apply.gloc.of every1 "./boot/macro/library.scm" . 58384))
     (if.true.ret.const . #f)
     (push.iloc.1 . 1)
     (push.iloc.1 . 1)
     (push.subr.gloc.of length 1 "./boot/macro/library.scm" . 60468)
     (push.const . 1)
     (push.subr.gloc.of - 2 "./boot/macro/library.scm" . 60465)
     (push.subr.gloc.of list-tail 2 "./boot/macro/library.scm" . 60449)
     (push.subr.gloc.of car 1 "./boot/macro/library.scm" . 60444)
     (extend . 1)
     (iloc.0 . 0)
     (if.null?.ret.const . #f)
     (call
       (push.iloc.0 . 0)
       (subr.gloc.of list? 1 "./boot/macro/library.scm" . 62494)
       (if.false.ret)
       (touch.gloc.of every1)
       (push.gloc.of |exact-nonnegative-integer?`1958*|)
       (push.iloc.0 . 0)
       (apply.gloc.of every1 "./boot/macro/library.scm" . 62507))
     (if.true (ret.iloc 0 . 0))
     (apply.iloc+ (1 . 0) "./boot/macro/library.scm" . 63518))
   (apply.iloc+ (0 . 0) "./boot/macro/library.scm" . 64521))
 (set.gloc.of library-name->version)
 (ret.const.unspec))
((close
   (2 0 . library-reference->name)
   (extend.enclose+
     (0 0 . malformed-name)
     (iloc 2 . 0)
     (if.pair?
       (push.const . library)
       (push.const . "malformed library name")
       (call
         (touch.gloc.of abbreviated-take-form)
         (push.iloc 2 . 0)
         (push.const . 4)
         (push.const . 8)
         (apply.gloc.of abbreviated-take-form "./boot/macro/library.scm" . 72769))
       (push)
       (push.iloc 2 . 1)
       (apply.gloc.of syntax-violation "./boot/macro/library.scm" . 72717))
     (push.const . library)
     (push.const . "malformed library name")
     (push.iloc 2 . 1)
     (apply.gloc.of syntax-violation "./boot/macro/library.scm" . 73741))
   (call
     (touch.gloc.of every1)
     (push.gloc.of symbol?)
     (push.iloc.1 . 1)
     (apply.gloc.of every1 "./boot/macro/library.scm" . 75788))
   (if.true (ret.iloc 1 . 1))
   (push.iloc.1 . 1)
   (push.iloc.1 . 1)
   (push.subr.gloc.of length 1 "./boot/macro/library.scm" . 77866)
   (push.const . 1)
   (push.subr.gloc.of - 2 "./boot/macro/library.scm" . 77863)
   (push.subr.gloc.of list-head 2 "./boot/macro/library.scm" . 77848)
   (extend . 1)
   (call
     (touch.gloc.of every1)
     (push.gloc.of symbol?)
     (push.iloc.0 . 0)
     (apply.gloc.of every1 "./boot/macro/library.scm" . 78869))
   (if.true (ret.iloc 0 . 0))
   (apply.iloc+ (1 . 0) "./boot/macro/library.scm" . 79898))
 (set.gloc.of library-reference->name)
 (ret.const.unspec))
((close
   (2 0 . flatten-library-reference)
   (call
     (call
       (push.iloc.0 . 1)
       (subr.gloc.of list? 1 "./boot/macro/library.scm" . 83982)
       (if.false.ret)
       (push.iloc.0 . 1)
       (push.subr.gloc.of null? 1 "./boot/macro/library.scm" . 83999)
       (ret.subr.gloc.of not "./boot/macro/library.scm" . 83994))
     (if.true.ret)
     (push.const . library)
     (push.const . "malformed library name")
     (call
       (touch.gloc.of abbreviated-take-form)
       (push.iloc.0 . 0)
       (push.const . 4)
       (push.const . 8)
       (apply.gloc.of abbreviated-take-form "./boot/macro/library.scm" . 85053))
     (push)
     (push.iloc.0 . 1)
     (apply.gloc.of syntax-violation "./boot/macro/library.scm" . 85001))
   (call
     (iloc.0 . 1)
     (if.not.pair?.ret.const . #f)
     (cdr.iloc (0 . 1) (cdr |lst`1971*|))
     (if.not.pair?.ret.const . #f)
     (cddr.iloc (0 . 1) (cddr |lst`1971*|))
     (if.not.null?.ret.const . #f)
     (push.cadr.iloc (0 . 1) (cadr |lst`1971*|))
     (subr.gloc.of list? 1 (list? (cadr |lst`1971*|)))
     (if.false.ret)
     (push.car.iloc (0 . 1) (car |lst`1971*|))
     (const . library)
     (ret.eq? (eq? (car |lst`1971*|) 'library)))
   (if.true
     (touch.gloc.of flatten-library-reference)
     (push.iloc.0 . 0)
     (push.cadr.iloc (0 . 1) (cadr |lst`1971*|))
     (apply.gloc.of
       flatten-library-reference
       (flatten-library-reference |form`1971*| (cadr |lst`1971*|))))
   (call
     (iloc.0 . 1)
     (if.not.pair?.ret.const . #f)
     (push.car.iloc (0 . 1) (car |lst`1971*|))
     (const . library)
     (ret.eq? (eq? (car |lst`1971*|) 'library)))
   (if.true
     (push.const . library)
     (push.const . "malformed library name")
     (call
       (touch.gloc.of abbreviated-take-form)
       (push.iloc.0 . 0)
       (push.const . 4)
       (push.const . 8)
       (apply.gloc.of abbreviated-take-form (abbreviated-take-form |form`1971*| 4 8)))
     (push)
     (push.iloc.0 . 1)
     (apply.gloc.of
       syntax-violation
       (syntax-violation
         'library
         "malformed library name"
         (abbreviated-take-form |form`1971*| 4 8)
         |lst`1971*|)))
   (ret.iloc 0 . 1))
 (set.gloc.of flatten-library-reference)
 (ret.const.unspec))
((close
   (2 0 . library-reference->version)
   (extend.enclose+
     (0 0 . malformed-version)
     (iloc 2 . 0)
     (if.pair?
       (push.const . import)
       (push.const . "malformed library version")
       (call
         (touch.gloc.of abbreviated-take-form)
         (push.iloc 2 . 0)
         (push.const . 4)
         (push.const . 8)
         (apply.gloc.of abbreviated-take-form "./boot/macro/library.scm" . 97347))
       (push)
       (push.iloc 2 . 1)
       (apply.gloc.of syntax-violation "./boot/macro/library.scm" . 97293))
     (push.const . import)
     (push.const . "malformed library version")
     (push.iloc 2 . 1)
     (apply.gloc.of syntax-violation "./boot/macro/library.scm" . 98317))
   (call
     (push.iloc.1 . 1)
     (subr.gloc.of list? 1 "./boot/macro/library.scm" . 100366)
     (if.false.ret)
     (push.iloc.1 . 1)
     (push.subr.gloc.of null? 1 "./boot/macro/library.scm" . 100383)
     (ret.subr.gloc.of not "./boot/macro/library.scm" . 100378))
   (if.true
     (call
       (touch.gloc.of every1)
       (push.gloc.of symbol?)
       (push.iloc.1 . 1)
       (apply.gloc.of every1 "./boot/macro/library.scm" . 101392))
     (if.true.ret.const . #f)
     (push.iloc.1 . 1)
     (push.iloc.1 . 1)
     (push.subr.gloc.of length 1 "./boot/macro/library.scm" . 102456)
     (push.const . 1)
     (push.subr.gloc.of - 2 "./boot/macro/library.scm" . 102453)
     (push.subr.gloc.of list-tail 2 "./boot/macro/library.scm" . 102438)
     (push.subr.gloc.of car 1 "./boot/macro/library.scm" . 102433)
     (extend . 1)
     (push.iloc.0 . 0)
     (subr.gloc.of list? 1 "./boot/macro/library.scm" . 103454)
     (if.true (ret.iloc 0 . 0))
     (apply.iloc+ (1 . 0) "./boot/macro/library.scm" . 104483))
   (apply.iloc+ (0 . 0) "./boot/macro/library.scm" . 105481))
 (set.gloc.of library-reference->version)
 (ret.const.unspec))
((close
   (1 0 . exact-nonnegative-integer?)
   (push.iloc.0 . 0)
   (subr.gloc.of integer? 1 "./boot/macro/library.scm" . 112654)
   (if.false.ret)
   (push.iloc.0 . 0)
   (subr.gloc.of exact? 1 "./boot/macro/library.scm" . 112669)
   (if.false.ret)
   (push.iloc.0 . 0)
   (push.const . 0)
   (ret.subr.gloc.of >= "./boot/macro/library.scm" . 112682))
 (set.gloc.of |exact-nonnegative-integer?`1988*|)
 (close
   (4 0 . test-library-versions)
   (call
     (extend.enclose
       (1 0 . loop)
       (call
         (iloc.0 . 0)
         (if.not.pair?.ret.const . #f)
         (push.cdr.iloc (0 . 0) "./boot/macro/library.scm" . 115723)
         (ret.subr.gloc.of list? "./boot/macro/library.scm" . 115723))
       (push)
       (extend . 1)
       (call
         (iloc.1 . 0)
         (if.not.pair?.ret.const . #f)
         (cdr.iloc (1 . 0) "./boot/macro/library.scm" . 115723)
         (if.not.pair?.ret.const . #f)
         (cddr.iloc (1 . 0) "./boot/macro/library.scm" . 115723)
         (if.not.null?.ret.const . #f)
         (push.car.iloc (1 . 0) "./boot/macro/library.scm" . 115723)
         (const . not)
         (ret.eq? "./boot/macro/library.scm" . 115723))
       (if.true
         (call
           (push.cadr.iloc (1 . 0) "./boot/macro/library.scm" . 115723)
           (apply.iloc (2 . 0) "./boot/macro/library.scm" . 115723))
         (push)
         (ret.subr.gloc.of not "./boot/macro/library.scm" . 115723))
       (call
         (iloc.0 . 0)
         (if.false.ret)
         (push.car.iloc (1 . 0) "./boot/macro/library.scm" . 115723)
         (const . or)
         (ret.eq? "./boot/macro/library.scm" . 115723))
       (if.true
         (touch.gloc.of any1)
         (push.close
           (1 0)
           (push.iloc.0 . 0)
           (apply.iloc (3 . 0) "./boot/macro/library.scm" . 115723))
         (push.cdr.iloc (1 . 0) "./boot/macro/library.scm" . 115723)
         (apply.gloc.of any1 "./boot/macro/library.scm" . 115723))
       (call
         (iloc.0 . 0)
         (if.false.ret)
         (push.car.iloc (1 . 0) "./boot/macro/library.scm" . 115723)
         (const . and)
         (ret.eq? "./boot/macro/library.scm" . 115723))
       (if.true
         (touch.gloc.of every1)
         (push.close
           (1 0)
           (push.iloc.0 . 0)
           (apply.iloc (3 . 0) "./boot/macro/library.scm" . 115723))
         (push.cdr.iloc (1 . 0) "./boot/macro/library.scm" . 115723)
         (apply.gloc.of every1 "./boot/macro/library.scm" . 115723))
       (extend.enclose
         (2 0 . loop)
         (call
           (call
             (push.iloc.0 . 0)
             (subr.gloc.of list? 1 "./boot/macro/library.scm" . 115723)
             (if.false.ret)
             (push.iloc.0 . 1)
             (ret.subr.gloc.of list? "./boot/macro/library.scm" . 115723))
           (if.true.ret)
           (push.const . import)
           (push.const . "malformed version reference")
           (call
             (touch.gloc.of abbreviated-take-form)
             (push.iloc 5 . 0)
             (push.const . 4)
             (push.const . 8)
             (apply.gloc.of abbreviated-take-form "./boot/macro/library.scm" . 115723))
           (push)
           (push.iloc 5 . 1)
           (apply.gloc.of syntax-violation "./boot/macro/library.scm" . 115723))
         (iloc.0 . 1)
         (if.null?.ret.const . #t)
         (push.iloc.0 . 0)
         (push.subr.gloc.of length 1 "./boot/macro/library.scm" . 115723)
         (push.iloc.0 . 1)
         (push.subr.gloc.of length 1 "./boot/macro/library.scm" . 115723)
         (subr.gloc.of >= 2 "./boot/macro/library.scm" . 115723)
         (if.false.ret)
         (touch.gloc.of every2)
         (push.close
           (2 0)
           (call
             (iloc.0 . 1)
             (if.not.pair?.ret.const . #f)
             (push.cdr.iloc (0 . 1) "./boot/macro/library.scm" . 115723)
             (ret.subr.gloc.of list? "./boot/macro/library.scm" . 115723))
           (push)
           (extend . 1)
           (call
             (iloc.1 . 1)
             (if.not.pair?.ret.const . #f)
             (cdr.iloc (1 . 1) "./boot/macro/library.scm" . 115723)
             (if.not.pair?.ret.const . #f)
             (cddr.iloc (1 . 1) "./boot/macro/library.scm" . 115723)
             (ret.null? "./boot/macro/library.scm" . 115723))
           (push)
           (extend . 1)
           (call
             (iloc.0 . 0)
             (if.false.ret)
             (push.car.iloc (2 . 1) "./boot/macro/library.scm" . 115723)
             (const . not)
             (ret.eq? "./boot/macro/library.scm" . 115723))
           (if.true
             (call
               (push.iloc 2 . 0)
               (push.cadr.iloc (2 . 1) "./boot/macro/library.scm" . 115723)
               (apply.iloc (4 . 0) "./boot/macro/library.scm" . 115723))
             (push)
             (ret.subr.gloc.of not "./boot/macro/library.scm" . 115723))
           (call
             (iloc.0 . 0)
             (if.false.ret)
             (push.car.iloc (2 . 1) "./boot/macro/library.scm" . 115723)
             (const . >=)
             (if.not.eq?.ret.const . #f)
             (touch.gloc.of |exact-nonnegative-integer?`1988*|)
             (push.cadr.iloc (2 . 1) "./boot/macro/library.scm" . 115723)
             (apply.gloc.of |exact-nonnegative-integer?`1988*| "./boot/macro/library.scm" . 115723))
           (if.true
             (push.iloc 2 . 0)
             (push.cadr.iloc (2 . 1) "./boot/macro/library.scm" . 115723)
             (ret.subr.gloc.of >= "./boot/macro/library.scm" . 115723))
           (call
             (iloc.0 . 0)
             (if.false.ret)
             (push.car.iloc (2 . 1) "./boot/macro/library.scm" . 115723)
             (const . <=)
             (if.not.eq?.ret.const . #f)
             (touch.gloc.of |exact-nonnegative-integer?`1988*|)
             (push.cadr.iloc (2 . 1) "./boot/macro/library.scm" . 115723)
             (apply.gloc.of |exact-nonnegative-integer?`1988*| "./boot/macro/library.scm" . 115723))
           (if.true
             (push.iloc 2 . 0)
             (push.cadr.iloc (2 . 1) "./boot/macro/library.scm" . 115723)
             (ret.subr.gloc.of <= "./boot/macro/library.scm" . 115723))
           (call
             (iloc.1 . 0)
             (if.false.ret)
             (push.car.iloc (2 . 1) "./boot/macro/library.scm" . 115723)
             (const . and)
             (ret.eq? "./boot/macro/library.scm" . 115723))
           (if.true
             (touch.gloc.of every1)
             (push.close
               (1 0)
               (push.iloc 3 . 0)
               (push.subr.gloc.of list 1 "./boot/macro/library.scm" . 115723)
               (push.iloc.0 . 0)
               (push.subr.gloc.of list 1 "./boot/macro/library.scm" . 115723)
               (apply.iloc (5 . 0) "./boot/macro/library.scm" . 115723))
             (push.cdr.iloc (2 . 1) "./boot/macro/library.scm" . 115723)
             (apply.gloc.of every1 "./boot/macro/library.scm" . 115723))
           (call
             (iloc.1 . 0)
             (if.false.ret)
             (push.car.iloc (2 . 1) "./boot/macro/library.scm" . 115723)
             (const . or)
             (ret.eq? "./boot/macro/library.scm" . 115723))
           (if.true
             (touch.gloc.of any1)
             (push.close
               (1 0)
               (push.iloc 3 . 0)
               (push.subr.gloc.of list 1 "./boot/macro/library.scm" . 115723)
               (push.iloc.0 . 0)
               (push.subr.gloc.of list 1 "./boot/macro/library.scm" . 115723)
               (apply.iloc (5 . 0) "./boot/macro/library.scm" . 115723))
             (push.cdr.iloc (2 . 1) "./boot/macro/library.scm" . 115723)
             (apply.gloc.of any1 "./boot/macro/library.scm" . 115723))
           (call
             (touch.gloc.of |exact-nonnegative-integer?`1988*|)
             (push.iloc 2 . 1)
             (apply.gloc.of |exact-nonnegative-integer?`1988*| "./boot/macro/library.scm" . 115723))
           (if.true
             (push.iloc 2 . 0)
             (push.iloc 2 . 1)
             (ret.subr.gloc.of = "./boot/macro/library.scm" . 115723))
           (push.const . import)
           (push.const . "malformed version reference")
           (call
             (touch.gloc.of abbreviated-take-form)
             (push.iloc 8 . 0)
             (push.const . 4)
             (push.const . 8)
             (apply.gloc.of abbreviated-take-form "./boot/macro/library.scm" . 115723))
           (push)
           (push.iloc 8 . 1)
           (apply.gloc.of syntax-violation "./boot/macro/library.scm" . 115723))
         (push.iloc.0 . 0)
         (push.iloc.0 . 1)
         (push.subr.gloc.of length 1 "./boot/macro/library.scm" . 115723)
         (push.subr.gloc.of list-head 2 "./boot/macro/library.scm" . 115723)
         (push.iloc.0 . 1)
         (apply.gloc.of
           every2
           (every2
             (lambda (|c`2021*| |s`2021*|)
               (let ((|.L593`2023`2026*| (and (pair? |s`2021*|) (list? (cdr |s`2021*|)))))
                 (let ((|.L592`2023`2028*|
                         (and (pair? |s`2021*|) (pair? (cdr |s`2021*|)) (null? (cddr |s`2021*|)))))
                   (if (and |.L592`2023`2028*| (eq? (car |s`2021*|) 'not))
                       (not (|loop`2016*| |c`2021*| (cadr |s`2021*|)))
                       (if (and |.L592`2023`2028*|
                                (eq? (car |s`2021*|) '>=)
                                (|exact-nonnegative-integer?`1988*| (cadr |s`2021*|)))
                           (>= |c`2021*| (cadr |s`2021*|))
                           (if (and |.L592`2023`2028*|
                                    (eq? (car |s`2021*|) '<=)
                                    (|exact-nonnegative-integer?`1988*| (cadr |s`2021*|)))
                               (<= |c`2021*| (cadr |s`2021*|))
                               (if (and |.L593`2023`2026*| (eq? (car |s`2021*|) 'and))
                                   (every1
                                     (lambda (|e`2039*|)
                                       (|loop`2016*| (list |c`2021*|) (list |e`2039*|)))
                                     (cdr |s`2021*|))
                                   (if (and |.L593`2023`2026*| (eq? (car |s`2021*|) 'or))
                                       (any1
                                         (lambda (|e`2043*|)
                                           (|loop`2016*| (list |c`2021*|) (list |e`2043*|)))
                                         (cdr |s`2021*|))
                                       (if (|exact-nonnegative-integer?`1988*| |s`2021*|)
                                           (= |c`2021*| |s`2021*|)
                                           (syntax-violation
                                             'import
                                             "malformed version reference"
                                             (abbreviated-take-form |form`1987*| 4 8)
                                             |spec`1987*|))))))))))
             (list-head |current`2017*| (length |sub-reference`2017*|))
             |sub-reference`2017*|)))
       (push.iloc 4 . 3)
       (push.iloc 2 . 0)
       (apply.iloc (0 . 0) "./boot/macro/library.scm" . 115723))
     (push.iloc.1 . 2)
     (apply.iloc (0 . 0) "./boot/macro/library.scm" . 115723))
   (if.true.ret)
   (push.const . import)
   (push.const . "mismatch between version reference ~a and current version ~a")
   (push.iloc.0 . 2)
   (push.iloc.0 . 3)
   (push.subr.gloc.of format 3 "./boot/macro/library.scm" . 138267)
   (call
     (touch.gloc.of abbreviated-take-form)
     (push.iloc.0 . 0)
     (push.const . 4)
     (push.const . 8)
     (apply.gloc.of abbreviated-take-form "./boot/macro/library.scm" . 139291))
   (push)
   (push.iloc.0 . 1)
   (apply.gloc.of syntax-violation "./boot/macro/library.scm" . 137225))
 (set.gloc.of test-library-versions)
 (ret.const.unspec))
((close
   (1 0 . make-shield-id-table)
   (subr.gloc.of make-core-hashtable 0)
   (push)
   (subr.gloc.of make-core-hashtable 0)
   (push)
   (call
     (touch.gloc.of make-unbound)
     (apply.gloc.of make-unbound "./boot/macro/library.scm" . 143437))
   (push)
   (extend . 3)
   (call
     (extend.enclose
       (1 0 . loop)
       (iloc.0 . 0)
       (if.symbol?
         (push.iloc 2 . 1)
         (push.iloc.0 . 0)
         (push.iloc 2 . 2)
         (ret.subr.gloc.of core-hashtable-set! "./boot/macro/library.scm" . 146448))
       (iloc.0 . 0)
       (if.pair?
         (push.iloc 2 . 0)
         (push.iloc.0 . 0)
         (subr.gloc.of core-hashtable-contains? 2 "./boot/macro/library.scm" . 148500)
         (if.true.ret)
         (push.iloc 2 . 0)
         (push.iloc.0 . 0)
         (push.const . #t)
         (subr.gloc.of core-hashtable-set! 3 "./boot/macro/library.scm" . 150550)
         (call
           (push.car.iloc (0 . 0) "./boot/macro/library.scm" . 151580)
           (apply.iloc (1 . 0) "./boot/macro/library.scm" . 151574))
         (push.cdr.iloc (0 . 0) "./boot/macro/library.scm" . 152604)
         (apply.iloc (1 . 0) "./boot/macro/library.scm" . 152598))
       (push.iloc.0 . 0)
       (subr.gloc.of vector? 1 "./boot/macro/library.scm" . 153616)
       (if.true
         (push.iloc 2 . 0)
         (push.iloc.0 . 0)
         (subr.gloc.of core-hashtable-contains? 2 "./boot/macro/library.scm" . 154644)
         (if.true.ret)
         (push.iloc 2 . 0)
         (push.iloc.0 . 0)
         (push.const . #t)
         (subr.gloc.of core-hashtable-set! 3 "./boot/macro/library.scm" . 156694)
         (push.iloc.0 . 0)
         (push.subr.gloc.of vector->list 1 "./boot/macro/library.scm" . 157724)
         (apply.iloc (1 . 0) "./boot/macro/library.scm" . 157718))
       (ret.const.unspec))
     (push.iloc 2 . 0)
     (apply.iloc (0 . 0) "./boot/macro/library.scm" . 145417))
   (ret.iloc 0 . 1))
 (set.gloc.of make-shield-id-table)
 (ret.const.unspec))
((close
   (1 0)
   (call
     (touch.gloc.of safe-length)
     (push.iloc.0 . 0)
     (apply.gloc.of safe-length "./boot/macro/library.scm" . 161795))
   (push)
   (push.const . 2)
   (ret.subr.gloc.of = "./boot/macro/library.scm" . 161795))
 (set.gloc.of |.L607|)
 (close
   (1 0)
   (push.car.iloc (0 . 0) "./boot/macro/library.scm" . 161795)
   (cadr.iloc (0 . 0) "./boot/macro/library.scm" . 161795)
   (ret.cons "./boot/macro/library.scm" . 161795))
 (set.gloc.of |.L608|)
 (close
   (2 0 . parse-exports)
   (extend.enclose+
     (2 0 . loop)
     (iloc.0 . 0)
     (if.null? (push.iloc.0 . 1) (ret.subr.gloc.of reverse "./boot/macro/library.scm" . 161795))
     (call
       (iloc.0 . 0)
       (if.not.pair?.ret.const . #f)
       (push.car.iloc (0 . 0) "./boot/macro/library.scm" . 161795)
       (ret.subr.gloc.of symbol? "./boot/macro/library.scm" . 161795))
     (if.true
       (push.cdr.iloc (0 . 0) "./boot/macro/library.scm" . 161795)
       (call
         (touch.gloc.of acons)
         (push.car.iloc (0 . 0) "./boot/macro/library.scm" . 161795)
         (push.car.iloc (0 . 0) "./boot/macro/library.scm" . 161795)
         (push.iloc.0 . 1)
         (apply.gloc.of acons "./boot/macro/library.scm" . 161795))
       (push)
       (apply.iloc+ (1 . 0) "./boot/macro/library.scm" . 161795))
     (call
       (iloc.0 . 0)
       (if.not.pair?.ret.const . #f)
       (car.iloc (0 . 0) "./boot/macro/library.scm" . 161795)
       (if.not.pair?.ret.const . #f)
       (push.iloc.0 . 0)
       (push.subr.gloc.of caar 1 "./boot/macro/library.scm" . 161795)
       (const . rename)
       (ret.eq? "./boot/macro/library.scm" . 161795))
     (if.true
       (push.cdr.iloc (0 . 0) "./boot/macro/library.scm" . 161795)
       (push.iloc.0 . 0)
       (push.subr.gloc.of cdar 1 "./boot/macro/library.scm" . 161795)
       (extend . 2)
       (call
         (call
           (touch.gloc.of every1)
           (push.gloc.of |.L607|)
           (push.iloc.0 . 1)
           (apply.gloc.of every1 "./boot/macro/library.scm" . 161795))
         (if.true.ret)
         (push.const . export)
         (push.const . "malformed export spec")
         (call
           (touch.gloc.of abbreviated-take-form)
           (push.iloc 3 . 0)
           (push.const . 4)
           (push.const . 8)
           (apply.gloc.of abbreviated-take-form "./boot/macro/library.scm" . 161795))
         (push)
         (push.car.iloc (1 . 0) "./boot/macro/library.scm" . 161795)
         (apply.gloc.of syntax-violation "./boot/macro/library.scm" . 161795))
       (push.iloc.0 . 0)
       (call
         (push.gloc.of |.L608|)
         (push.iloc.0 . 1)
         (apply.gloc.of map "./boot/macro/library.scm" . 161795))
       (push)
       (push.iloc.1 . 1)
       (push.subr.gloc.of append 2 "./boot/macro/library.scm" . 161795)
       (apply.iloc+ (2 . 0) "./boot/macro/library.scm" . 161795))
     (push.const . export)
     (push.const . "malformed export spec")
     (call
       (touch.gloc.of abbreviated-take-form)
       (push.iloc 2 . 0)
       (push.const . 4)
       (push.const . 8)
       (apply.gloc.of abbreviated-take-form "./boot/macro/library.scm" . 161795))
     (push)
     (push.car.iloc (0 . 0) "./boot/macro/library.scm" . 161795)
     (apply.gloc.of syntax-violation "./boot/macro/library.scm" . 161795))
   (push.iloc.1 . 1)
   (push.const)
   (apply.iloc+ (0 . 0) "./boot/macro/library.scm" . 163847))
 (set.gloc.of parse-exports)
 (ret.const.unspec))
((close
   (1 0)
   (call
     (touch.gloc.of safe-length)
     (push.iloc.0 . 0)
     (apply.gloc.of safe-length "./boot/macro/library.scm" . 180227))
   (push)
   (push.const . 2)
   (ret.subr.gloc.of = "./boot/macro/library.scm" . 180227))
 (set.gloc.of |.L617|)
 (close
   (2 0 . parse-imports)
   (extend.unbound . 2)
   (push.close
     (3 0 . check-unbound-identifier)
     (push.close
       (1 0)
       (push.iloc.0 . 0)
       (push.iloc.1 . 0)
       (subr.gloc.of assq 2 "./boot/macro/library.scm" . 185369)
       (if.true.ret)
       (push.const . import)
       (push.const . "attempt to reference unexported identifier ~a")
       (push.iloc.0 . 0)
       (push.subr.gloc.of format 2 "./boot/macro/library.scm" . 186419)
       (call
         (touch.gloc.of abbreviated-take-form)
         (push.iloc 3 . 0)
         (push.const . 4)
         (push.const . 8)
         (apply.gloc.of abbreviated-take-form "./boot/macro/library.scm" . 186479))
       (push)
       (push.iloc.1 . 2)
       (apply.gloc.of syntax-violation "./boot/macro/library.scm" . 186393))
     (push.iloc.0 . 1)
     (apply.gloc.of for-each "./boot/macro/library.scm" . 184329))
   (push.close
     (3 0 . check-bound-identifier)
     (push.close
       (1 0)
       (push.iloc.0 . 0)
       (push.iloc.1 . 0)
       (subr.gloc.of assq 2 "./boot/macro/library.scm" . 192538)
       (if.false.ret)
       (push.const . import)
       (push.const . "duplicate import identifiers ~a")
       (push.iloc.0 . 0)
       (push.subr.gloc.of format 2 "./boot/macro/library.scm" . 193588)
       (call
         (touch.gloc.of abbreviated-take-form)
         (push.iloc 3 . 0)
         (push.const . 4)
         (push.const . 8)
         (apply.gloc.of abbreviated-take-form "./boot/macro/library.scm" . 193634))
       (push)
       (push.iloc.1 . 2)
       (apply.gloc.of syntax-violation "./boot/macro/library.scm" . 193562))
     (push.iloc.0 . 1)
     (apply.gloc.of for-each "./boot/macro/library.scm" . 191497))
   (enclose . 2)
   (extend.enclose
     (2 0 . loop)
     (call
       (iloc.0 . 0)
       (if.not.pair?.ret.const . #f)
       (car.iloc (0 . 0) "./boot/macro/library.scm" . 180227)
       (if.not.pair?.ret.const . #f)
       (push.iloc.0 . 0)
       (subr.gloc.of cdar 1 "./boot/macro/library.scm" . 180227)
       (ret.pair? "./boot/macro/library.scm" . 180227))
     (push)
     (extend . 1)
     (iloc.1 . 0)
     (if.null? (ret.iloc 1 . 1))
     (call
       (iloc.0 . 0)
       (if.false.ret)
       (push.iloc.1 . 0)
       (push.subr.gloc.of caar 1 "./boot/macro/library.scm" . 180227)
       (const . for)
       (ret.eq? "./boot/macro/library.scm" . 180227))
     (if.true
       (push.cdr.iloc (1 . 0) "./boot/macro/library.scm" . 180227)
       (call
         (push.iloc.1 . 0)
         (push.subr.gloc.of cadar 1 "./boot/macro/library.scm" . 180227)
         (push.subr.gloc.of list 1 "./boot/macro/library.scm" . 180227)
         (push.iloc.1 . 1)
         (apply.iloc (2 . 0) "./boot/macro/library.scm" . 180227))
       (push)
       (apply.iloc (2 . 0) "./boot/macro/library.scm" . 180227))
     (call
       (iloc.0 . 0)
       (if.false.ret)
       (push.iloc.1 . 0)
       (push.subr.gloc.of caar 1 "./boot/macro/library.scm" . 180227)
       (const . only)
       (ret.eq? "./boot/macro/library.scm" . 180227))
     (if.true
       (push.cdr.iloc (1 . 0) "./boot/macro/library.scm" . 180227)
       (push.iloc.1 . 0)
       (push.subr.gloc.of cddar 1 "./boot/macro/library.scm" . 180227)
       (extend . 2)
       (call
         (push.iloc 2 . 0)
         (push.subr.gloc.of cadar 1 "./boot/macro/library.scm" . 180227)
         (push.subr.gloc.of list 1 "./boot/macro/library.scm" . 180227)
         (push.const)
         (apply.iloc (3 . 0) "./boot/macro/library.scm" . 180227))
       (push)
       (extend . 1)
       (call
         (push.iloc.0 . 0)
         (push.iloc.1 . 1)
         (push.car.iloc (3 . 0) "./boot/macro/library.scm" . 180227)
         (apply.iloc (5 . 0) "./boot/macro/library.scm" . 180227))
       (push.iloc.1 . 0)
       (call
         (push.close
           (1 0)
           (push.car.iloc (0 . 0) "./boot/macro/library.scm" . 180227)
           (push.iloc 2 . 1)
           (ret.subr.gloc.of memq "./boot/macro/library.scm" . 180227))
         (push.iloc.0 . 0)
         (apply.gloc.of filter "./boot/macro/library.scm" . 180227))
       (push)
       (push.iloc 3 . 1)
       (push.subr.gloc.of append 2 "./boot/macro/library.scm" . 180227)
       (apply.iloc (4 . 0) "./boot/macro/library.scm" . 180227))
     (call
       (iloc.0 . 0)
       (if.false.ret)
       (push.iloc.1 . 0)
       (push.subr.gloc.of caar 1 "./boot/macro/library.scm" . 180227)
       (const . except)
       (ret.eq? "./boot/macro/library.scm" . 180227))
     (if.true
       (push.cdr.iloc (1 . 0) "./boot/macro/library.scm" . 180227)
       (push.iloc.1 . 0)
       (push.subr.gloc.of cddar 1 "./boot/macro/library.scm" . 180227)
       (extend . 2)
       (call
         (push.iloc 2 . 0)
         (push.subr.gloc.of cadar 1 "./boot/macro/library.scm" . 180227)
         (push.subr.gloc.of list 1 "./boot/macro/library.scm" . 180227)
         (push.const)
         (apply.iloc (3 . 0) "./boot/macro/library.scm" . 180227))
       (push)
       (extend . 1)
       (call
         (push.iloc.0 . 0)
         (push.iloc.1 . 1)
         (push.car.iloc (3 . 0) "./boot/macro/library.scm" . 180227)
         (apply.iloc (5 . 0) "./boot/macro/library.scm" . 180227))
       (push.iloc.1 . 0)
       (call
         (push.close
           (1 0)
           (push.car.iloc (0 . 0) "./boot/macro/library.scm" . 180227)
           (push.iloc 2 . 1)
           (push.subr.gloc.of memq 2 "./boot/macro/library.scm" . 180227)
           (ret.subr.gloc.of not "./boot/macro/library.scm" . 180227))
         (push.iloc.0 . 0)
         (apply.gloc.of filter "./boot/macro/library.scm" . 180227))
       (push)
       (push.iloc 3 . 1)
       (push.subr.gloc.of append 2 "./boot/macro/library.scm" . 180227)
       (apply.iloc (4 . 0) "./boot/macro/library.scm" . 180227))
     (call
       (iloc.0 . 0)
       (if.false.ret)
       (push.iloc.1 . 0)
       (push.subr.gloc.of caar 1 "./boot/macro/library.scm" . 180227)
       (const . rename)
       (ret.eq? "./boot/macro/library.scm" . 180227))
     (if.true
       (push.cdr.iloc (1 . 0) "./boot/macro/library.scm" . 180227)
       (push.iloc.1 . 0)
       (push.subr.gloc.of cddar 1 "./boot/macro/library.scm" . 180227)
       (extend . 2)
       (call
         (push.iloc 2 . 0)
         (push.subr.gloc.of cadar 1 "./boot/macro/library.scm" . 180227)
         (push.subr.gloc.of list 1 "./boot/macro/library.scm" . 180227)
         (push.const)
         (apply.iloc (3 . 0) "./boot/macro/library.scm" . 180227))
       (push)
       (extend . 1)
       (call
         (call
           (touch.gloc.of every1)
           (push.gloc.of |.L617|)
           (push.iloc.1 . 1)
           (apply.gloc.of every1 "./boot/macro/library.scm" . 180227))
         (if.true.ret)
         (push.const . import)
         (push.const . "malformed import set")
         (call
           (touch.gloc.of abbreviated-take-form)
           (push.iloc 6 . 0)
           (push.const . 4)
           (push.const . 8)
           (apply.gloc.of abbreviated-take-form "./boot/macro/library.scm" . 180227))
         (push)
         (push.car.iloc (3 . 0) "./boot/macro/library.scm" . 180227)
         (apply.gloc.of syntax-violation "./boot/macro/library.scm" . 180227))
       (call
         (call
           (call
             (touch.gloc.of unique-id-list?)
             (call
               (push.gloc.of car)
               (push.iloc.1 . 1)
               (apply.gloc.of map "./boot/macro/library.scm" . 180227))
             (push)
             (apply.gloc.of unique-id-list? "./boot/macro/library.scm" . 180227))
           (if.false.ret)
           (touch.gloc.of unique-id-list?)
           (call
             (push.gloc.of cadr)
             (push.iloc.1 . 1)
             (apply.gloc.of map "./boot/macro/library.scm" . 180227))
           (push)
           (apply.gloc.of unique-id-list? "./boot/macro/library.scm" . 180227))
         (if.true.ret)
         (push.const . import)
         (push.const . "duplicate identifers in rename specs")
         (call
           (touch.gloc.of abbreviated-take-form)
           (push.iloc 6 . 0)
           (push.const . 4)
           (push.const . 8)
           (apply.gloc.of abbreviated-take-form "./boot/macro/library.scm" . 180227))
         (push)
         (push.car.iloc (3 . 0) "./boot/macro/library.scm" . 180227)
         (apply.gloc.of syntax-violation "./boot/macro/library.scm" . 180227))
       (call
         (push.iloc.0 . 0)
         (call
           (push.gloc.of cadr)
           (push.iloc.1 . 1)
           (apply.gloc.of map "./boot/macro/library.scm" . 180227))
         (push)
         (push.car.iloc (3 . 0) "./boot/macro/library.scm" . 180227)
         (apply.iloc (5 . 1) "./boot/macro/library.scm" . 180227))
       (call
         (push.iloc.0 . 0)
         (call
           (push.gloc.of car)
           (push.iloc.1 . 1)
           (apply.gloc.of map "./boot/macro/library.scm" . 180227))
         (push)
         (push.car.iloc (3 . 0) "./boot/macro/library.scm" . 180227)
         (apply.iloc (5 . 0) "./boot/macro/library.scm" . 180227))
       (push.iloc.1 . 0)
       (call
         (push.close
           (1 0)
           (push.car.iloc (0 . 0) "./boot/macro/library.scm" . 180227)
           (push.iloc 2 . 1)
           (push.subr.gloc.of assq 2 "./boot/macro/library.scm" . 180227)
           (extend . 1)
           (iloc.0 . 0)
           (if.true
             (push.cadr.iloc (0 . 0) "./boot/macro/library.scm" . 180227)
             (cdr.iloc (1 . 0) "./boot/macro/library.scm" . 180227)
             (ret.cons "./boot/macro/library.scm" . 180227))
           (ret.iloc 1 . 0))
         (push.iloc.0 . 0)
         (apply.gloc.of
           map
           (map (lambda (|e`2125*|)
                  (let ((|.L614`2127*| (assq (car |e`2125*|) |alist`2119*|)))
                    (if |.L614`2127*| (cons (cadr |.L614`2127*|) (cdr |e`2125*|)) |e`2125*|)))
                |bindings`2121*|)))
       (push)
       (push.iloc 3 . 1)
       (push.subr.gloc.of
         append
         2
         (append
           (map (lambda (|e`2125*|)
                  (let ((|.L614`2127*| (assq (car |e`2125*|) |alist`2119*|)))
                    (if |.L614`2127*| (cons (cadr |.L614`2127*|) (cdr |e`2125*|)) |e`2125*|)))
                |bindings`2121*|)
           |imports`2096*|))
       (apply.iloc
         (4 . 0)
         (|loop`2095*|
           |more`2119*|
           (append
             (map (lambda (|e`2125*|)
                    (let ((|.L614`2127*| (assq (car |e`2125*|) |alist`2119*|)))
                      (if |.L614`2127*| (cons (cadr |.L614`2127*|) (cdr |e`2125*|)) |e`2125*|)))
                  |bindings`2121*|)
             |imports`2096*|))))
     (call
       (iloc.0 . 0)
       (if.false.ret)
       (push.iloc.1 . 0)
       (subr.gloc.of cddar 1 "./boot/macro/library.scm" . 180227)
       (if.not.pair?.ret.const . #f)
       (push.iloc.1 . 0)
       (subr.gloc.of cdddar 1 "./boot/macro/library.scm" . 180227)
       (if.not.null?.ret.const . #f)
       (push.iloc.1 . 0)
       (push.subr.gloc.of caar 1 "./boot/macro/library.scm" . 180227)
       (const . prefix)
       (ret.eq? "./boot/macro/library.scm" . 180227))
     (if.true
       (push.iloc.1 . 0)
       (push.subr.gloc.of caddar 1 "./boot/macro/library.scm" . 180227)
       (extend . 1)
       (push.cdr.iloc (2 . 0) "./boot/macro/library.scm" . 180227)
       (call
         (push.close
           (1 0)
           (push.const . "~a~a")
           (push.iloc.1 . 0)
           (push.car.iloc (0 . 0) "./boot/macro/library.scm" . 180227)
           (push.subr.gloc.of format 3 "./boot/macro/library.scm" . 180227)
           (push.subr.gloc.of string->symbol 1 "./boot/macro/library.scm" . 180227)
           (cdr.iloc (0 . 0) "./boot/macro/library.scm" . 180227)
           (ret.cons "./boot/macro/library.scm" . 180227))
         (call
           (push.iloc 2 . 0)
           (push.subr.gloc.of cadar 1 "./boot/macro/library.scm" . 180227)
           (push.subr.gloc.of list 1 "./boot/macro/library.scm" . 180227)
           (push.const)
           (apply.iloc (3 . 0) "./boot/macro/library.scm" . 180227))
         (push)
         (apply.gloc.of map "./boot/macro/library.scm" . 180227))
       (push)
       (push.iloc 2 . 1)
       (push.subr.gloc.of append 2 "./boot/macro/library.scm" . 180227)
       (apply.iloc (3 . 0) "./boot/macro/library.scm" . 180227))
     (iloc.1 . 0)
     (if.pair?
       (push.cdr.iloc (1 . 0) "./boot/macro/library.scm" . 180227)
       (extend . 1)
       (call
         (touch.gloc.of flatten-library-reference)
         (push.iloc 5 . 0)
         (push.car.iloc (2 . 0) "./boot/macro/library.scm" . 180227)
         (apply.gloc.of flatten-library-reference "./boot/macro/library.scm" . 180227))
       (push)
       (extend . 1)
       (call
         (touch.gloc.of library-reference->name)
         (push.iloc 6 . 0)
         (push.iloc.0 . 0)
         (apply.gloc.of library-reference->name "./boot/macro/library.scm" . 180227))
       (push)
       (call
         (touch.gloc.of library-reference->version)
         (push.iloc 6 . 0)
         (push.iloc.0 . 0)
         (apply.gloc.of library-reference->version "./boot/macro/library.scm" . 180227))
       (push)
       (extend . 2)
       (call
         (push.iloc.0 . 0)
         (apply.gloc.of |.require-scheme-library| "./boot/macro/library.scm" . 180227))
       (call
         (touch.gloc.of library-name->id)
         (push.iloc 7 . 0)
         (push.iloc.0 . 0)
         (apply.gloc.of library-name->id "./boot/macro/library.scm" . 180227))
       (push)
       (extend . 1)
       (call
         (call
           (iloc.1 . 1)
           (if.false.ret)
           (call
             (touch.gloc.of scheme-library-versions)
             (apply.gloc.of scheme-library-versions "./boot/macro/library.scm" . 180227))
           (push)
           (push.iloc.0 . 0)
           (push.const . #f)
           (ret.subr.gloc.of core-hashtable-ref "./boot/macro/library.scm" . 180227))
         (push)
         (extend . 1)
         (iloc.0 . 0)
         (if.true
           (touch.gloc.of test-library-versions)
           (push.iloc 9 . 0)
           (push.iloc 3 . 0)
           (push.iloc 2 . 1)
           (push.iloc.0 . 0)
           (apply.gloc.of test-library-versions "./boot/macro/library.scm" . 180227))
         (ret.const.unspec))
       (push.iloc 3 . 0)
       (call
         (call (apply.gloc.of scheme-library-exports "./boot/macro/library.scm" . 180227))
         (push)
         (push.iloc.0 . 0)
         (push.const . #f)
         (push.subr.gloc.of core-hashtable-ref 3 "./boot/macro/library.scm" . 180227)
         (extend . 1)
         (iloc.0 . 0)
         (if.true
           (push.iloc.0 . 0)
           (push.iloc 6 . 1)
           (ret.subr.gloc.of append "./boot/macro/library.scm" . 180227))
         (push.const . import)
         (push.const . "attempt to import undefined library ~s")
         (push.iloc 2 . 0)
         (push.subr.gloc.of format 2 "./boot/macro/library.scm" . 180227)
         (call
           (touch.gloc.of abbreviated-take-form)
           (push.iloc 9 . 0)
           (push.const . 4)
           (push.const . 8)
           (apply.gloc.of abbreviated-take-form "./boot/macro/library.scm" . 180227))
         (push)
         (apply.gloc.of syntax-violation "./boot/macro/library.scm" . 180227))
       (push)
       (apply.iloc
         (6 . 0)
         (|loop`2095*|
           |more`2135*|
           (let ((|.L616`2147*|
                   (core-hashtable-ref (scheme-library-exports) |library-id`2141*| #f)))
             (if |.L616`2147*|
                 (append |.L616`2147*| |imports`2096*|)
                 (syntax-violation
                   'import
                   (format "attempt to import undefined library ~s" |name`2139*|)
                   (abbreviated-take-form |form`2083*| 4 8)))))))
     (push.const . import)
     (push.const . "malformed import set")
     (call
       (touch.gloc.of abbreviated-take-form)
       (push.iloc 4 . 0)
       (push.const . 4)
       (push.const . 8)
       (apply.gloc.of abbreviated-take-form "./boot/macro/library.scm" . 180227))
     (push)
     (push.car.iloc (1 . 0) "./boot/macro/library.scm" . 180227)
     (apply.gloc.of syntax-violation "./boot/macro/library.scm" . 180227))
   (push.iloc 2 . 1)
   (push.const)
   (apply.iloc (0 . 0) "./boot/macro/library.scm" . 197639))
 (set.gloc.of parse-imports)
 (ret.const.unspec))
((close
   (2 0 . parse-depends)
   (extend.enclose+
     (2 0 . loop)
     (call
       (iloc.0 . 0)
       (if.not.pair?.ret.const . #f)
       (car.iloc (0 . 0) "./boot/macro/library.scm" . 259079)
       (if.not.pair?.ret.const . #f)
       (push.iloc.0 . 0)
       (subr.gloc.of cdar 1 "./boot/macro/library.scm" . 259079)
       (ret.pair? "./boot/macro/library.scm" . 259079))
     (push)
     (extend . 1)
     (iloc.1 . 0)
     (if.null? (ret.iloc 1 . 1))
     (call
       (iloc.0 . 0)
       (if.false.ret)
       (push.iloc.1 . 0)
       (push.subr.gloc.of caar 1 "./boot/macro/library.scm" . 259079)
       (const . for)
       (ret.eq? "./boot/macro/library.scm" . 259079))
     (if.true
       (push.cdr.iloc (1 . 0) "./boot/macro/library.scm" . 259079)
       (call
         (push.iloc.1 . 0)
         (push.subr.gloc.of cadar 1 "./boot/macro/library.scm" . 259079)
         (push.subr.gloc.of list 1 "./boot/macro/library.scm" . 259079)
         (push.iloc.1 . 1)
         (apply.iloc+ (2 . 0) "./boot/macro/library.scm" . 259079))
       (push)
       (apply.iloc+ (2 . 0) "./boot/macro/library.scm" . 259079))
     (call
       (iloc.0 . 0)
       (if.false.ret)
       (push.iloc.1 . 0)
       (push.subr.gloc.of caar 1 "./boot/macro/library.scm" . 259079)
       (const . only)
       (ret.eq? "./boot/macro/library.scm" . 259079))
     (if.true
       (push.cdr.iloc (1 . 0) "./boot/macro/library.scm" . 259079)
       (call
         (push.iloc.1 . 0)
         (push.subr.gloc.of cadar 1 "./boot/macro/library.scm" . 259079)
         (push.subr.gloc.of list 1 "./boot/macro/library.scm" . 259079)
         (push.iloc.1 . 1)
         (apply.iloc+ (2 . 0) "./boot/macro/library.scm" . 259079))
       (push)
       (apply.iloc+ (2 . 0) "./boot/macro/library.scm" . 259079))
     (call
       (iloc.0 . 0)
       (if.false.ret)
       (push.iloc.1 . 0)
       (push.subr.gloc.of caar 1 "./boot/macro/library.scm" . 259079)
       (const . except)
       (ret.eq? "./boot/macro/library.scm" . 259079))
     (if.true
       (push.cdr.iloc (1 . 0) "./boot/macro/library.scm" . 259079)
       (call
         (push.iloc.1 . 0)
         (push.subr.gloc.of cadar 1 "./boot/macro/library.scm" . 259079)
         (push.subr.gloc.of list 1 "./boot/macro/library.scm" . 259079)
         (push.iloc.1 . 1)
         (apply.iloc+ (2 . 0) "./boot/macro/library.scm" . 259079))
       (push)
       (apply.iloc+ (2 . 0) "./boot/macro/library.scm" . 259079))
     (call
       (iloc.0 . 0)
       (if.false.ret)
       (push.iloc.1 . 0)
       (push.subr.gloc.of caar 1 "./boot/macro/library.scm" . 259079)
       (const . rename)
       (ret.eq? "./boot/macro/library.scm" . 259079))
     (if.true
       (push.cdr.iloc (1 . 0) "./boot/macro/library.scm" . 259079)
       (call
         (push.iloc.1 . 0)
         (push.subr.gloc.of cadar 1 "./boot/macro/library.scm" . 259079)
         (push.subr.gloc.of list 1 "./boot/macro/library.scm" . 259079)
         (push.iloc.1 . 1)
         (apply.iloc+ (2 . 0) "./boot/macro/library.scm" . 259079))
       (push)
       (apply.iloc+ (2 . 0) "./boot/macro/library.scm" . 259079))
     (call
       (iloc.0 . 0)
       (if.false.ret)
       (push.iloc.1 . 0)
       (subr.gloc.of cddar 1 "./boot/macro/library.scm" . 259079)
       (if.not.pair?.ret.const . #f)
       (push.iloc.1 . 0)
       (subr.gloc.of cdddar 1 "./boot/macro/library.scm" . 259079)
       (if.not.null?.ret.const . #f)
       (push.iloc.1 . 0)
       (push.subr.gloc.of caar 1 "./boot/macro/library.scm" . 259079)
       (const . prefix)
       (ret.eq? "./boot/macro/library.scm" . 259079))
     (if.true
       (push.cdr.iloc (1 . 0) "./boot/macro/library.scm" . 259079)
       (call
         (push.iloc.1 . 0)
         (push.subr.gloc.of cadar 1 "./boot/macro/library.scm" . 259079)
         (push.subr.gloc.of list 1 "./boot/macro/library.scm" . 259079)
         (push.iloc.1 . 1)
         (apply.iloc+ (2 . 0) "./boot/macro/library.scm" . 259079))
       (push)
       (apply.iloc+ (2 . 0) "./boot/macro/library.scm" . 259079))
     (iloc.1 . 0)
     (if.pair?
       (push.cdr.iloc (1 . 0) "./boot/macro/library.scm" . 259079)
       (call
         (touch.gloc.of library-reference->name)
         (push.iloc 3 . 0)
         (call
           (touch.gloc.of flatten-library-reference)
           (push.iloc 3 . 0)
           (push.car.iloc (1 . 0) "./boot/macro/library.scm" . 259079)
           (apply.gloc.of flatten-library-reference "./boot/macro/library.scm" . 259079))
         (push)
         (apply.gloc.of library-reference->name "./boot/macro/library.scm" . 259079))
       (push)
       (iloc.1 . 1)
       (push.cons)
       (apply.iloc+ (2 . 0) "./boot/macro/library.scm" . 259079))
     (push.const . import)
     (push.const . "malformed import set")
     (call
       (touch.gloc.of abbreviated-take-form)
       (push.iloc 3 . 0)
       (push.const . 4)
       (push.const . 8)
       (apply.gloc.of abbreviated-take-form "./boot/macro/library.scm" . 259079))
     (push)
     (push.car.iloc (1 . 0) "./boot/macro/library.scm" . 259079)
     (apply.gloc.of syntax-violation "./boot/macro/library.scm" . 259079))
   (push.iloc.1 . 1)
   (push.const)
   (apply.iloc+ (0 . 0) "./boot/macro/library.scm" . 259079))
 (set.gloc.of parse-depends)
 (ret.const.unspec))
((close
   (1 0 . permute-env)
   (touch.gloc.of |loop`2192*|)
   (push.iloc.0 . 0)
   (push.subr.gloc.of core-hashtable->alist 1 "./boot/macro/library.scm" . 283673)
   (push.const)
   (push.const)
   (apply.gloc.of |loop`2192*| "./boot/macro/library.scm" . 284683))
 (set.gloc.of |permute-env`2186*|)
 (close
   (3 0 . loop)
   (iloc.0 . 0)
   (if.null?
     (push.iloc.0 . 1)
     (push.iloc.0 . 2)
     (ret.subr.gloc.of append "./boot/macro/library.scm" . 285714))
   (call
     (touch.gloc.of unbound?)
     (push.iloc.0 . 0)
     (push.subr.gloc.of cdar 1 "./boot/macro/library.scm" . 286748)
     (apply.gloc.of unbound? "./boot/macro/library.scm" . 286738))
   (if.true
     (touch.gloc.of |loop`2192*|)
     (push.cdr.iloc (0 . 0) "./boot/macro/library.scm" . 287768)
     (push.iloc.0 . 1)
     (push.car.iloc (0 . 0) "./boot/macro/library.scm" . 287791)
     (iloc.0 . 2)
     (push.cons)
     (apply.gloc.of |loop`2192*| "./boot/macro/library.scm" . 287762))
   (touch.gloc.of |loop`2192*|)
   (push.cdr.iloc (0 . 0) "./boot/macro/library.scm" . 289816)
   (push.car.iloc (0 . 0) "./boot/macro/library.scm" . 289832)
   (iloc.0 . 1)
   (push.cons)
   (push.iloc.0 . 2)
   (apply.gloc.of |loop`2192*| "./boot/macro/library.scm" . 289810))
 (set.gloc.of |loop`2192*|)
 (close
   (2 0 . expand-library)
   (call
     (iloc.0 . 0)
     (if.not.pair?.ret.const . #f)
     (cdr.iloc (0 . 0) "./boot/macro/library.scm" . 291845)
     (if.not.pair?.ret.const . #f)
     (cddr.iloc (0 . 0) "./boot/macro/library.scm" . 291845)
     (if.not.pair?.ret.const . #f)
     (push.iloc.0 . 0)
     (subr.gloc.of caddr 1 "./boot/macro/library.scm" . 291845)
     (if.not.pair?.ret.const . #f)
     (push.iloc.0 . 0)
     (subr.gloc.of cdddr 1 "./boot/macro/library.scm" . 291845)
     (if.not.pair?.ret.const . #f)
     (push.iloc.0 . 0)
     (subr.gloc.of cadddr 1 "./boot/macro/library.scm" . 291845)
     (if.not.pair?.ret.const . #f)
     (push.iloc.0 . 0)
     (push.subr.gloc.of cdaddr 1 "./boot/macro/library.scm" . 291845)
     (subr.gloc.of list? 1 "./boot/macro/library.scm" . 291845)
     (if.false.ret)
     (push.iloc.0 . 0)
     (push.subr.gloc.of cadddr 1 "./boot/macro/library.scm" . 291845)
     (push.subr.gloc.of cdr 1 "./boot/macro/library.scm" . 291845)
     (subr.gloc.of list? 1 "./boot/macro/library.scm" . 291845)
     (if.false.ret)
     (push.iloc.0 . 0)
     (push.subr.gloc.of cddddr 1 "./boot/macro/library.scm" . 291845)
     (subr.gloc.of list? 1 "./boot/macro/library.scm" . 291845)
     (if.false.ret)
     (push.iloc.0 . 0)
     (push.subr.gloc.of caaddr 1 "./boot/macro/library.scm" . 291845)
     (const . export)
     (if.not.eq?.ret.const . #f)
     (push.iloc.0 . 0)
     (push.subr.gloc.of cadddr 1 "./boot/macro/library.scm" . 291845)
     (push.subr.gloc.of car 1 "./boot/macro/library.scm" . 291845)
     (const . import)
     (ret.eq? "./boot/macro/library.scm" . 291845))
   (if.true
     (push.iloc.0 . 0)
     (push.subr.gloc.of cddddr 1 "./boot/macro/library.scm" . 291845)
     (push.iloc.0 . 0)
     (push.subr.gloc.of cadddr 1 "./boot/macro/library.scm" . 291845)
     (push.subr.gloc.of cdr 1 "./boot/macro/library.scm" . 291845)
     (push.iloc.0 . 0)
     (push.subr.gloc.of cdaddr 1 "./boot/macro/library.scm" . 291845)
     (push.cadr.iloc (0 . 0) "./boot/macro/library.scm" . 291845)
     (extend . 4)
     (call
       (touch.gloc.of library-name->id)
       (push.iloc.1 . 0)
       (push.iloc.0 . 3)
       (apply.gloc.of library-name->id "./boot/macro/library.scm" . 291845))
     (push)
     (call
       (touch.gloc.of library-name->version)
       (push.iloc.1 . 0)
       (push.iloc.0 . 3)
       (apply.gloc.of library-name->version "./boot/macro/library.scm" . 291845))
     (push)
     (extend . 2)
     (call
       (iloc.0 . 1)
       (if.false.ret)
       (call
         (touch.gloc.of scheme-library-versions)
         (apply.gloc.of scheme-library-versions "./boot/macro/library.scm" . 291845))
       (push)
       (push.iloc.0 . 0)
       (push.iloc.0 . 1)
       (ret.subr.gloc.of core-hashtable-set! "./boot/macro/library.scm" . 291845))
     (push.const . #f)
     (subr.gloc.of make-core-hashtable 0)
     (push)
     (extend . 2)
     (push.close
       (0 0)
       (call
         (touch.gloc.of current-include-files)
         (apply.gloc.of current-include-files "./boot/macro/library.scm" . 291845))
       (set.iloc (1 . 0) "./boot/macro/library.scm" . 291845)
       (touch.gloc.of current-include-files)
       (push.iloc.1 . 1)
       (apply.gloc.of current-include-files "./boot/macro/library.scm" . 291845))
     (push.close
       (0 0)
       (call
         (call
           (touch.gloc.of parse-exports)
           (push.iloc 4 . 0)
           (push.iloc 3 . 2)
           (apply.gloc.of parse-exports "./boot/macro/library.scm" . 291845))
         (push)
         (call
           (touch.gloc.of parse-imports)
           (push.iloc 4 . 0)
           (push.iloc 3 . 1)
           (apply.gloc.of parse-imports "./boot/macro/library.scm" . 291845))
         (push)
         (call
           (touch.gloc.of parse-depends)
           (push.iloc 4 . 0)
           (push.iloc 3 . 1)
           (apply.gloc.of parse-depends "./boot/macro/library.scm" . 291845))
         (push)
         (subr.gloc.of make-core-hashtable 0)
         (push)
         (subr.gloc.of make-core-hashtable 0)
         (push)
         (subr.gloc.of make-core-hashtable 0)
         (push)
         (extend . 6)
         (call
           (push.close
             (1 0)
             (call
               (push.iloc.1 . 5)
               (push.cdr.iloc (0 . 0) "./boot/macro/library.scm" . 291845)
               (push.const . #f)
               (subr.gloc.of core-hashtable-ref 3 "./boot/macro/library.scm" . 291845)
               (if.false.ret)
               (push.const . library)
               (push.const . "duplicate export identifiers")
               (call
                 (touch.gloc.of abbreviated-take-form)
                 (push.iloc 6 . 0)
                 (push.const . 4)
                 (push.const . 8)
                 (apply.gloc.of abbreviated-take-form "./boot/macro/library.scm" . 291845))
               (push)
               (push.cdr.iloc (0 . 0) "./boot/macro/library.scm" . 291845)
               (apply.gloc.of syntax-violation "./boot/macro/library.scm" . 291845))
             (push.iloc.1 . 5)
             (push.cdr.iloc (0 . 0) "./boot/macro/library.scm" . 291845)
             (push.const . #t)
             (subr.gloc.of core-hashtable-set! 3 "./boot/macro/library.scm" . 291845)
             (push.iloc.1 . 3)
             (push.car.iloc (0 . 0) "./boot/macro/library.scm" . 291845)
             (push.const . #t)
             (ret.subr.gloc.of core-hashtable-set! "./boot/macro/library.scm" . 291845))
           (push.iloc.0 . 0)
           (apply.gloc.of for-each "./boot/macro/library.scm" . 291845))
         (call
           (push.close
             (1 0)
             (push.iloc.1 . 3)
             (push.car.iloc (0 . 0) "./boot/macro/library.scm" . 291845)
             (push.const . #t)
             (subr.gloc.of core-hashtable-set! 3 "./boot/macro/library.scm" . 291845)
             (push.iloc.1 . 4)
             (push.car.iloc (0 . 0) "./boot/macro/library.scm" . 291845)
             (push.const . #f)
             (push.subr.gloc.of core-hashtable-ref 3 "./boot/macro/library.scm" . 291845)
             (extend . 1)
             (iloc.0 . 0)
             (if.true
               (push.iloc.0 . 0)
               (cdr.iloc (1 . 0) "./boot/macro/library.scm" . 291845)
               (if.eq?.ret.const . #t)
               (push.const . library)
               (push.const . "duplicate import identifiers")
               (call
                 (touch.gloc.of abbreviated-take-form)
                 (push.iloc 7 . 0)
                 (push.const . 4)
                 (push.const . 8)
                 (apply.gloc.of abbreviated-take-form "./boot/macro/library.scm" . 291845))
               (push)
               (push.car.iloc (1 . 0) "./boot/macro/library.scm" . 291845)
               (apply.gloc.of syntax-violation "./boot/macro/library.scm" . 291845))
             (push.iloc 2 . 4)
             (push.car.iloc (1 . 0) "./boot/macro/library.scm" . 291845)
             (push.cdr.iloc (1 . 0) "./boot/macro/library.scm" . 291845)
             (ret.subr.gloc.of core-hashtable-set! "./boot/macro/library.scm" . 291845))
           (push.iloc.0 . 1)
           (apply.gloc.of
             for-each
             (for-each (lambda (|a`2216*|)
                         (core-hashtable-set! |ht-immutables`2212*| (car |a`2216*|) #t)
                         (let ((|.L627`2218*|
                                 (core-hashtable-ref |ht-imports`2212*| (car |a`2216*|) #f)))
                           (if |.L627`2218*|
                               (or (eq? |.L627`2218*| (cdr |a`2216*|))
                                   (syntax-violation
                                     'library
                                     "duplicate import identifiers"
                                     (abbreviated-take-form |form`2185*| 4 8)
                                     (car |a`2216*|)))
                               (core-hashtable-set!
                                 |ht-imports`2212*|
                                 (car |a`2216*|)
                                 (cdr |a`2216*|)))))
                       |imports`2212*|)))
         (call
           (touch.gloc.of make-shield-id-table)
           (push.iloc 4 . 0)
           (apply.gloc.of make-shield-id-table "./boot/macro/library.scm" . 291845))
         (push)
         (subr.gloc.of make-core-hashtable 0)
         (push)
         (extend . 2)
         (call
           (push.close
             (1 0)
             (push.iloc.1 . 0)
             (push.car.iloc (0 . 0) "./boot/macro/library.scm" . 291845)
             (push.cdr.iloc (0 . 0) "./boot/macro/library.scm" . 291845)
             (subr.gloc.of core-hashtable-set! 3 "./boot/macro/library.scm" . 291845)
             (push.iloc.1 . 1)
             (push.car.iloc (0 . 0) "./boot/macro/library.scm" . 291845)
             (push.cdr.iloc (0 . 0) "./boot/macro/library.scm" . 291845)
             (ret.subr.gloc.of core-hashtable-set! "./boot/macro/library.scm" . 291845))
           (push.iloc.1 . 4)
           (push.subr.gloc.of core-hashtable->alist 1 "./boot/macro/library.scm" . 291845)
           (apply.gloc.of for-each "./boot/macro/library.scm" . 291845))
         (push.const . #f)
         (extend . 1)
         (push.close
           (0 0)
           (call
             (touch.gloc.of current-immutable-identifiers)
             (apply.gloc.of current-immutable-identifiers "./boot/macro/library.scm" . 291845))
           (set.iloc (1 . 0) "./boot/macro/library.scm" . 291845)
           (touch.gloc.of current-immutable-identifiers)
           (push.iloc 3 . 3)
           (apply.gloc.of current-immutable-identifiers "./boot/macro/library.scm" . 291845))
         (push.close
           (0 0)
           (touch.gloc.of expand-library-body)
           (push.iloc 8 . 0)
           (push.iloc 6 . 0)
           (push.iloc 6 . 1)
           (push.iloc 7 . 0)
           (push.iloc 3 . 0)
           (push.iloc 3 . 1)
           (push.iloc 3 . 2)
           (call
             (touch.gloc.of extend-env)
             (push.gloc.of private-primitives-environment)
             (call
               (touch.gloc.of |permute-env`2186*|)
               (push.iloc 2 . 0)
               (apply.gloc.of |permute-env`2186*| "./boot/macro/library.scm" . 291845))
             (push)
             (apply.gloc.of extend-env "./boot/macro/library.scm" . 291845))
           (push)
           (call
             (touch.gloc.of |permute-env`2186*|)
             (push.iloc 2 . 1)
             (apply.gloc.of |permute-env`2186*| "./boot/macro/library.scm" . 291845))
           (push)
           (apply.gloc.of expand-library-body "./boot/macro/library.scm" . 291845))
         (push.close
           (0 0)
           (touch.gloc.of current-immutable-identifiers)
           (push.iloc.1 . 0)
           (apply.gloc.of current-immutable-identifiers "./boot/macro/library.scm" . 291845))
         (apply.gloc.of |.dynamic-wind| "./boot/macro/library.scm" . 291845))
       (push)
       (extend . 1)
       (call
         (call
           (touch.gloc.of current-include-files)
           (apply.gloc.of current-include-files "./boot/macro/library.scm" . 291845))
         (push)
         (push.subr.gloc.of core-hashtable-size 1 "./boot/macro/library.scm" . 291845)
         (push.const . 0)
         (subr.gloc.of = 2 "./boot/macro/library.scm" . 291845)
         (if.true.ret)
         (push.gloc.of library-include-dependencies)
         (push.iloc 3 . 0)
         (call
           (touch.gloc.of current-include-files)
           (apply.gloc.of current-include-files "./boot/macro/library.scm" . 291845))
         (push)
         (ret.subr.gloc.of core-hashtable-set! "./boot/macro/library.scm" . 291845))
       (ret.iloc 0 . 0))
     (push.close
       (0 0)
       (touch.gloc.of current-include-files)
       (push.iloc.1 . 0)
       (apply.gloc.of current-include-files "./boot/macro/library.scm" . 291845))
     (apply.gloc.of
       |.dynamic-wind|
       (|.dynamic-wind|
         (lambda ()
           (set! |tmp1`2204`2206*| (current-include-files))
           (current-include-files |tmp2`2204`2206*|))
         (lambda ()
           (let ((|coreform`2237*|
                   (let ((|exports`2212*| (parse-exports |form`2185*| |export-spec`2199*|))
                         (|imports`2212*| (parse-imports |form`2185*| |import-spec`2199*|))
                         (|depends`2212*| (parse-depends |form`2185*| |import-spec`2199*|))
                         (|ht-immutables`2212*| (make-core-hashtable))
                         (|ht-imports`2212*| (make-core-hashtable))
                         (|ht-publics`2212*| (make-core-hashtable)))
                     (for-each (lambda (|a`2214*|)
                                 (and (core-hashtable-ref |ht-publics`2212*| (cdr |a`2214*|) #f)
                                      (syntax-violation
                                        'library
                                        "duplicate export identifiers"
                                        (abbreviated-take-form |form`2185*| 4 8)
                                        (cdr |a`2214*|)))
                                 (core-hashtable-set! |ht-publics`2212*| (cdr |a`2214*|) #t)
                                 (core-hashtable-set! |ht-immutables`2212*| (car |a`2214*|) #t))
                               |exports`2212*|)
                     (for-each (lambda (|a`2216*|)
                                 (core-hashtable-set! |ht-immutables`2212*| (car |a`2216*|) #t)
                                 (let ((|.L627`2218*|
                                         (core-hashtable-ref
                                           |ht-imports`2212*|
                                           (car |a`2216*|)
                                           #f)))
                                   (if |.L627`2218*|
                                       (or (eq? |.L627`2218*| (cdr |a`2216*|))
                                           (syntax-violation
                                             'library
                                             "duplicate import identifiers"
                                             (abbreviated-take-form |form`2185*| 4 8)
                                             (car |a`2216*|)))
                                       (core-hashtable-set!
                                         |ht-imports`2212*|
                                         (car |a`2216*|)
                                         (cdr |a`2216*|)))))
                               |imports`2212*|)
                     (let ((|ht-env`2222*| (make-shield-id-table |body`2199*|))
                           (|ht-libenv`2222*| (make-core-hashtable)))
                       (for-each (lambda (|a`2224*|)
                                   (core-hashtable-set!
                                     |ht-env`2222*|
                                     (car |a`2224*|)
                                     (cdr |a`2224*|))
                                   (core-hashtable-set!
                                     |ht-libenv`2222*|
                                     (car |a`2224*|)
                                     (cdr |a`2224*|)))
                                 (core-hashtable->alist |ht-imports`2212*|))
                       (let ((|tmp1`2227`2229*| #f))
                         (|.dynamic-wind|
                           (lambda ()
                             (set! |tmp1`2227`2229*| (current-immutable-identifiers))
                             (current-immutable-identifiers |ht-immutables`2212*|))
                           (lambda ()
                             (expand-library-body
                               |form`2185*|
                               |library-id`2201*|
                               |library-version`2201*|
                               |body`2199*|
                               |exports`2212*|
                               |imports`2212*|
                               |depends`2212*|
                               (extend-env
                                 private-primitives-environment
                                 (|permute-env`2186*| |ht-env`2222*|))
                               (|permute-env`2186*| |ht-libenv`2222*|)))
                           (lambda () (current-immutable-identifiers |tmp1`2227`2229*|))))))))
             (or (= (core-hashtable-size (current-include-files)) 0)
                 (core-hashtable-set!
                   library-include-dependencies
                   |library-id`2201*|
                   (current-include-files)))
             |coreform`2237*|))
         (lambda () (current-include-files |tmp1`2204`2206*|)))))
   (push.const . library)
   (push.const . "expected library name, export spec, and import spec")
   (call
     (touch.gloc.of abbreviated-take-form)
     (push.iloc.0 . 0)
     (push.const . 4)
     (push.const . 8)
     (apply.gloc.of abbreviated-take-form "./boot/macro/library.scm" . 291845))
   (push)
   (apply.gloc.of syntax-violation "./boot/macro/library.scm" . 291845))
 (set.gloc.of expand-library)
 (ret.const.unspec))
((close
   (4 0 . make-rule-macro)
   (push.const . |.set-top-level-macro!|)
   (push.const . quote)
   (push.iloc.0 . 0)
   (push.subr.gloc.of |.list| 2 (|.list| 'quote |type`2284*|))
   (push.const . quote)
   (push.iloc.0 . 1)
   (push.subr.gloc.of |.list| 2 (|.list| 'quote |id`2284*|))
   (push.const . quote)
   (push.iloc.0 . 2)
   (push.subr.gloc.of |.list| 2 (|.list| 'quote |spec`2284*|))
   (push.iloc.0 . 3)
   (ret.subr.gloc.of |.list| "./boot/macro/library.scm" . 416779))
 (set.gloc.of |make-rule-macro`2275*|)
 (close
   (3 0 . check-duplicate-definition)
   (call
     (touch.gloc.of unique-id-list?)
     (call
       (push.gloc.of car)
       (push.iloc.0 . 2)
       (apply.gloc.of map "./boot/macro/library.scm" . 369694))
     (push)
     (apply.gloc.of unique-id-list? "./boot/macro/library.scm" . 369677))
   (if.true.ret)
   (call
     (touch.gloc.of find-duplicates)
     (call
       (push.gloc.of car)
       (push.iloc.0 . 2)
       (apply.gloc.of map "./boot/macro/library.scm" . 370728))
     (push)
     (apply.gloc.of find-duplicates "./boot/macro/library.scm" . 370711))
   (push)
   (extend . 1)
   (push.iloc.0 . 0)
   (push.iloc.1 . 0)
   (push.subr.gloc.of assq 2 "./boot/macro/library.scm" . 371734)
   (extend . 1)
   (iloc.0 . 0)
   (if.true
     (push.iloc.1 . 0)
     (push.iloc 2 . 0)
     (push.subr.gloc.of reverse 1 "./boot/macro/library.scm" . 373806)
     (push.subr.gloc.of assq 2 "./boot/macro/library.scm" . 373797)
     (extend . 1)
     (push.iloc.1 . 0)
     (iloc.0 . 0)
     (if.eq?
       (push.iloc 2 . 0)
       (push.iloc 3 . 1)
       (push.subr.gloc.of assq 2 "./boot/macro/library.scm" . 375854)
       (extend . 1)
       (push.const . library)
       (push.const . "duplicate definitions")
       (call
         (touch.gloc.of annotate)
         (push.const . define-syntax)
         (push.car.iloc (0 . 0) "./boot/macro/library.scm" . 377939)
         (push.const ...)
         (push.subr.gloc.of |.cons*| 3 "./boot/macro/library.scm" . 377912)
         (push.iloc.0 . 0)
         (apply.gloc.of annotate "./boot/macro/library.scm" . 377912))
       (push)
       (call
         (touch.gloc.of annotate)
         (push.const . define)
         (iloc 2 . 0)
         (push.cons)
         (push.iloc 2 . 0)
         (apply.gloc.of annotate "./boot/macro/library.scm" . 378936))
       (push)
       (apply.gloc.of syntax-violation "./boot/macro/library.scm" . 376870))
     (push.const . library)
     (push.const . "duplicate definitions")
     (call
       (touch.gloc.of annotate)
       (push.const . define)
       (iloc.1 . 0)
       (push.cons)
       (push.iloc.1 . 0)
       (apply.gloc.of annotate "./boot/macro/library.scm" . 382006))
     (push)
     (call
       (touch.gloc.of annotate)
       (push.const . define)
       (iloc.0 . 0)
       (push.cons)
       (push.iloc.0 . 0)
       (apply.gloc.of annotate "./boot/macro/library.scm" . 383030))
     (push)
     (apply.gloc.of syntax-violation "./boot/macro/library.scm" . 380964))
   (push.iloc.1 . 0)
   (push.iloc 2 . 1)
   (push.subr.gloc.of assq 2 "./boot/macro/library.scm" . 384022)
   (extend . 1)
   (iloc.0 . 0)
   (if.true
     (push.iloc 2 . 0)
     (push.iloc 3 . 1)
     (push.subr.gloc.of reverse 1 "./boot/macro/library.scm" . 386094)
     (push.subr.gloc.of assq 2 "./boot/macro/library.scm" . 386085)
     (extend . 1)
     (push.iloc.1 . 0)
     (iloc.0 . 0)
     (if.eq?
       (push.iloc 3 . 0)
       (push.iloc 4 . 0)
       (push.subr.gloc.of assq 2 "./boot/macro/library.scm" . 388142)
       (extend . 1)
       (push.const . library)
       (push.const . "duplicate definitions")
       (call
         (touch.gloc.of annotate)
         (push.const . define-syntax)
         (push.car.iloc (2 . 0) "./boot/macro/library.scm" . 390227)
         (push.const ...)
         (push.subr.gloc.of |.cons*| 3 "./boot/macro/library.scm" . 390200)
         (push.iloc 2 . 0)
         (apply.gloc.of annotate "./boot/macro/library.scm" . 390200))
       (push)
       (call
         (touch.gloc.of annotate)
         (push.const . define)
         (iloc.0 . 0)
         (push.cons)
         (push.iloc.0 . 0)
         (apply.gloc.of annotate "./boot/macro/library.scm" . 391224))
       (push)
       (apply.gloc.of syntax-violation "./boot/macro/library.scm" . 389158))
     (push.const . library)
     (push.const . "duplicate definitions")
     (call
       (touch.gloc.of annotate)
       (push.const . define-syntax)
       (push.car.iloc (1 . 0) "./boot/macro/library.scm" . 394321)
       (push.const ...)
       (push.subr.gloc.of |.cons*| 3 "./boot/macro/library.scm" . 394294)
       (push.iloc.1 . 0)
       (apply.gloc.of annotate "./boot/macro/library.scm" . 394294))
     (push)
     (call
       (touch.gloc.of annotate)
       (push.const . define-syntax)
       (push.car.iloc (0 . 0) "./boot/macro/library.scm" . 395345)
       (push.const ...)
       (push.subr.gloc.of |.cons*| 3 "./boot/macro/library.scm" . 395318)
       (push.iloc.0 . 0)
       (apply.gloc.of annotate "./boot/macro/library.scm" . 395318))
     (push)
     (apply.gloc.of syntax-violation "./boot/macro/library.scm" . 393252))
   (push.const . library)
   (push.const . "duplicate definitions")
   (push.iloc 2 . 0)
   (apply.gloc.of syntax-violation "./boot/macro/library.scm" . 397334))
 (set.gloc.of |check-duplicate-definition`2243*|)
 (close
   (1 0)
   (push.const . |.require-scheme-library|)
   (push.const . quote)
   (push.iloc.0 . 0)
   (push.subr.gloc.of |.list| 2 (|.list| 'quote |dep`2296*|))
   (ret.subr.gloc.of |.list| "./boot/macro/library.scm" . 445466))
 (set.gloc.of |.L643|)
 (close
   (4 0 . make-proc-macro)
   (call
     (iloc.0 . 2)
     (if.not.pair?.ret.const . #f)
     (push.car.iloc (0 . 2) "./boot/macro/library.scm" . 426027)
     (const . lambda)
     (ret.eq? "./boot/macro/library.scm" . 426022))
   (if.true
     (push.const . |.set-top-level-macro!|)
     (push.const . quote)
     (push.iloc.0 . 0)
     (push.subr.gloc.of |.list| 2 (|.list| 'quote |type`2288*|))
     (push.const . quote)
     (push.iloc.0 . 1)
     (push.subr.gloc.of |.list| 2 (|.list| 'quote |id`2288*|))
     (push.const . |.transformer-thunk|)
     (push.iloc.0 . 2)
     (push.subr.gloc.of |.list| 2 (|.list| '|.transformer-thunk| |spec`2288*|))
     (push.iloc.0 . 3)
     (ret.subr.gloc.of |.list| "./boot/macro/library.scm" . 426003))
   (call (apply.gloc.of generate-temporary-symbol "./boot/macro/library.scm" . 429085))
   (push)
   (extend . 1)
   (push.const . |.set-top-level-macro!|)
   (push.const . quote)
   (push.iloc.1 . 0)
   (push.subr.gloc.of |.list| 2 (|.list| 'quote |type`2288*|))
   (push.const . quote)
   (push.iloc.1 . 1)
   (push.subr.gloc.of |.list| 2 (|.list| 'quote |id`2288*|))
   (push.const . let)
   (push.const (proc #f))
   (push.const . lambda)
   (push.iloc.0 . 0)
   (push.subr.gloc.of |.list| 1 (|.list| |x`2290*|))
   (push.const . if)
   (push.const . proc)
   (push.const . proc)
   (push.iloc.0 . 0)
   (push.subr.gloc.of |.list| 2 (|.list| 'proc |x`2290*|))
   (push.const . begin)
   (push.const . set!)
   (push.const . proc)
   (push.const . |.transformer-thunk|)
   (push.iloc.1 . 2)
   (push.subr.gloc.of |.list| 2 (|.list| '|.transformer-thunk| |spec`2288*|))
   (push.subr.gloc.of |.list| 3 (|.list| 'set! 'proc (|.list| '|.transformer-thunk| |spec`2288*|)))
   (push.const . proc)
   (push.iloc.0 . 0)
   (push.subr.gloc.of |.list| 2 (|.list| 'proc |x`2290*|))
   (push.subr.gloc.of
     |.list|
     3
     (|.list|
       'begin
       (|.list| 'set! 'proc (|.list| '|.transformer-thunk| |spec`2288*|))
       (|.list| 'proc |x`2290*|)))
   (push.subr.gloc.of
     |.list|
     4
     (|.list|
       'if
       'proc
       (|.list| 'proc |x`2290*|)
       (|.list|
         'begin
         (|.list| 'set! 'proc (|.list| '|.transformer-thunk| |spec`2288*|))
         (|.list| 'proc |x`2290*|))))
   (push.subr.gloc.of
     |.list|
     3
     (|.list|
       'lambda
       (|.list| |x`2290*|)
       (|.list|
         'if
         'proc
         (|.list| 'proc |x`2290*|)
         (|.list|
           'begin
           (|.list| 'set! 'proc (|.list| '|.transformer-thunk| |spec`2288*|))
           (|.list| 'proc |x`2290*|)))))
   (push.subr.gloc.of
     |.list|
     3
     (|.list|
       'let
       '((proc #f))
       (|.list|
         'lambda
         (|.list| |x`2290*|)
         (|.list|
           'if
           'proc
           (|.list| 'proc |x`2290*|)
           (|.list|
             'begin
             (|.list| 'set! 'proc (|.list| '|.transformer-thunk| |spec`2288*|))
             (|.list| 'proc |x`2290*|))))))
   (push.iloc.1 . 3)
   (ret.subr.gloc.of |.list| "./boot/macro/library.scm" . 429076))
 (set.gloc.of |make-proc-macro`2275*|)
 (close
   (4 0 . make-var-macro)
   (push.const . |.set-top-level-macro!|)
   (push.const . quote)
   (push.iloc.0 . 0)
   (push.subr.gloc.of |.list| 2 (|.list| 'quote |type`2286*|))
   (push.const . quote)
   (push.iloc.0 . 1)
   (push.subr.gloc.of |.list| 2 (|.list| 'quote |id`2286*|))
   (push.const . |.transformer-thunk|)
   (push.iloc.0 . 2)
   (push.subr.gloc.of |.list| 2 (|.list| '|.transformer-thunk| |spec`2286*|))
   (push.iloc.0 . 3)
   (ret.subr.gloc.of |.list| "./boot/macro/library.scm" . 420875))
 (set.gloc.of |make-var-macro`2275*|)
 (close
   (9 0 . expand-library-body)
   (extend.unbound . 7)
   (push.const . #f)
   (push.close
     (1 0 . internal-definition?)
     (iloc.0 . 0)
     (if.not.pair?.ret.const . #f)
     (car.iloc (0 . 0) "./boot/macro/library.scm" . 344085)
     (if.not.pair?.ret.const . #f)
     (push.iloc.0 . 0)
     (subr.gloc.of caar 1 "./boot/macro/library.scm" . 345111)
     (if.not.symbol?.ret.const . #f)
     (call
       (touch.gloc.of env-lookup)
       (push.iloc 2 . 7)
       (push.iloc.0 . 0)
       (push.subr.gloc.of caar 1 "./boot/macro/library.scm" . 346154)
       (apply.gloc.of env-lookup "./boot/macro/library.scm" . 346138))
     (push)
     (extend . 1)
     (call
       (touch.gloc.of macro?)
       (push.iloc.0 . 0)
       (apply.gloc.of macro? "./boot/macro/library.scm" . 347156))
     (if.true.ret)
     (push.gloc.of denote-define)
     (iloc.0 . 0)
     (if.eq?.ret.const . #t)
     (push.gloc.of denote-define-syntax)
     (iloc.0 . 0)
     (if.eq?.ret.const . #t)
     (push.gloc.of denote-let-syntax)
     (iloc.0 . 0)
     (if.eq?.ret.const . #t)
     (push.gloc.of denote-letrec-syntax)
     (iloc.0 . 0)
     (ret.eq? "./boot/macro/library.scm" . 351252))
   (push.const)
   (push.close
     (2 0 . extend-env!)
     (call
       (call
         (touch.gloc.of macro?)
         (push.iloc.0 . 1)
         (apply.gloc.of macro? "./boot/macro/library.scm" . 357390))
       (if.false.ret)
       (call
         (touch.gloc.of acons)
         (push.iloc.0 . 0)
         (push.iloc.0 . 1)
         (push.iloc.1 . 2)
         (apply.gloc.of acons "./boot/macro/library.scm" . 358431))
       (set.iloc (1 . 2) "./boot/macro/library.scm" . 358414)
       (ret.const.unspec))
     (call
       (touch.gloc.of extend-env)
       (push.iloc.0 . 0)
       (iloc.0 . 1)
       (push.cons)
       (push.subr.gloc.of list 1 "./boot/macro/library.scm" . 359455)
       (push.iloc 2 . 7)
       (apply.gloc.of extend-env "./boot/macro/library.scm" . 359443))
     (set.iloc (2 . 7) "./boot/macro/library.scm" . 359433)
     (push.close
       (1 0)
       (push.cddr.iloc (0 . 0) "./boot/macro/library.scm" . 360489)
       (push.iloc 3 . 7)
       (ret.subr.gloc.of set-cdr! "./boot/macro/library.scm" . 360479))
     (push.iloc.1 . 2)
     (apply.gloc.of for-each "./boot/macro/library.scm" . 360457))
   (push.close
     (2 0 . extend-libenv!)
     (call
       (touch.gloc.of extend-env)
       (push.iloc.0 . 0)
       (iloc.0 . 1)
       (push.cons)
       (push.subr.gloc.of list 1 "./boot/macro/library.scm" . 364578)
       (push.iloc 2 . 8)
       (apply.gloc.of extend-env "./boot/macro/library.scm" . 364566))
     (set.iloc (2 . 8) "./boot/macro/library.scm" . 364553)
     (touch.gloc.of current-template-environment)
     (push.iloc 2 . 8)
     (apply.gloc.of current-template-environment "./boot/macro/library.scm" . 365577))
   (push.close
     (4 0 . rewrite-body)
     (extend.enclose+
       (1 0 . rewrite-env)
       (extend.enclose+
         (2 0 . loop)
         (iloc.0 . 0)
         (if.null? (ret.iloc 0 . 1))
         (push.iloc.0 . 0)
         (push.subr.gloc.of caar 1 "./boot/macro/library.scm" . 406570)
         (subr.gloc.of uninterned-symbol? 1 "./boot/macro/library.scm" . 406550)
         (if.true
           (push.iloc.0 . 0)
           (push.subr.gloc.of cdar 1 "./boot/macro/library.scm" . 407584)
           (push.iloc 4 . 1)
           (subr.gloc.of assq 2 "./boot/macro/library.scm" . 407578)
           (if.true
             (push.cdr.iloc (0 . 0) "./boot/macro/library.scm" . 408608)
             (push.iloc.0 . 0)
             (push.subr.gloc.of caar 1 "./boot/macro/library.scm" . 408630)
             (push.iloc.0 . 0)
             (push.subr.gloc.of cdar 1 "./boot/macro/library.scm" . 408653)
             (push.iloc 6 . 8)
             (push.subr.gloc.of assq 2 "./boot/macro/library.scm" . 408647)
             (subr.gloc.of cddr 1 "./boot/macro/library.scm" . 408641)
             (push.cons)
             (iloc.0 . 1)
             (push.cons)
             (apply.iloc+ (1 . 0) "./boot/macro/library.scm" . 408602))
           (push.cdr.iloc (0 . 0) "./boot/macro/library.scm" . 409632)
           (push.car.iloc (0 . 0) "./boot/macro/library.scm" . 409648)
           (iloc.0 . 1)
           (push.cons)
           (apply.iloc+ (1 . 0) "./boot/macro/library.scm" . 409626))
         (push.iloc.0 . 0)
         (push.subr.gloc.of caar 1 "./boot/macro/library.scm" . 410652)
         (push.cdr.iloc (0 . 0) "./boot/macro/library.scm" . 410663)
         (subr.gloc.of assq 2 "./boot/macro/library.scm" . 410646)
         (if.true
           (push.cdr.iloc (0 . 0) "./boot/macro/library.scm" . 411676)
           (push.iloc.0 . 1)
           (apply.iloc+ (1 . 0) "./boot/macro/library.scm" . 411670))
         (push.cdr.iloc (0 . 0) "./boot/macro/library.scm" . 413724)
         (push.car.iloc (0 . 0) "./boot/macro/library.scm" . 413740)
         (iloc.0 . 1)
         (push.cons)
         (apply.iloc+ (1 . 0) "./boot/macro/library.scm" . 413718))
       (push.iloc.1 . 0)
       (push.subr.gloc.of reverse 1 "./boot/macro/library.scm" . 404509)
       (push.const)
       (apply.iloc+ (0 . 0) "./boot/macro/library.scm" . 405519))
     (call
       (touch.gloc.of |check-duplicate-definition`2243*|)
       (push.iloc.1 . 1)
       (push.iloc.1 . 2)
       (push.iloc.1 . 3)
       (apply.gloc.of |check-duplicate-definition`2243*| "./boot/macro/library.scm" . 441353))
     (call (push.iloc 3 . 7) (apply.iloc+ (0 . 0) "./boot/macro/library.scm" . 442388))
     (push)
     (extend . 1)
     (call
       (touch.gloc.of expand-each)
       (push.iloc 2 . 0)
       (push.iloc.0 . 0)
       (apply.gloc.of expand-each "./boot/macro/library.scm" . 443424))
     (push)
     (extend . 1)
     (call
       (push.gloc.of |.L643|)
       (push.iloc 5 . 6)
       (apply.gloc.of map "./boot/macro/library.scm" . 445461))
     (push)
     (extend . 1)
     (call
       (push.close
         (1 0)
         (push.const . #f)
         (push.car.iloc (0 . 0) "./boot/macro/library.scm" . 448583)
         (extend . 2)
         (push.close
           (0 0)
           (call
             (touch.gloc.of current-top-level-exterior)
             (apply.gloc.of current-top-level-exterior "./boot/macro/library.scm" . 449566))
           (set.iloc (1 . 0) "./boot/macro/library.scm" . 449566)
           (touch.gloc.of current-top-level-exterior)
           (push.iloc.1 . 1)
           (apply.gloc.of current-top-level-exterior "./boot/macro/library.scm" . 449566))
         (push.close
           (0 0)
           (push.car.iloc (2 . 0) "./boot/macro/library.scm" . 449588)
           (push.iloc 7 . 3)
           (push.subr.gloc.of assq 2 "./boot/macro/library.scm" . 449582)
           (push.subr.gloc.of cdr 1 "./boot/macro/library.scm" . 449577)
           (call
             (touch.gloc.of expand-form)
             (push.cadr.iloc (2 . 0) "./boot/macro/library.scm" . 450614)
             (push.iloc 5 . 0)
             (apply.gloc.of expand-form "./boot/macro/library.scm" . 450601))
           (push)
           (extend . 2)
           (call
             (touch.gloc.of set-closure-comment!)
             (push.iloc.0 . 1)
             (push.iloc.0 . 0)
             (apply.gloc.of set-closure-comment! "./boot/macro/library.scm" . 451616))
           (push.const . define)
           (push.iloc.0 . 0)
           (push.iloc.0 . 1)
           (ret.subr.gloc.of |.list| "./boot/macro/library.scm" . 449566))
         (push.close
           (0 0)
           (touch.gloc.of current-top-level-exterior)
           (push.iloc.1 . 0)
           (apply.gloc.of current-top-level-exterior "./boot/macro/library.scm" . 449566))
         (apply.gloc.of |.dynamic-wind| "./boot/macro/library.scm" . 449566))
       (push.iloc 4 . 1)
       (apply.gloc.of map "./boot/macro/library.scm" . 447509))
     (push)
     (extend . 1)
     (call
       (iloc 5 . 2)
       (if.null? (ret.const))
       (subr.gloc.of make-core-hashtable 0)
       (push)
       (extend . 1)
       (call
         (push.close
           (1 0)
           (push.iloc.1 . 0)
           (push.car.iloc (0 . 0) "./boot/macro/library.scm" . 458837)
           (push.const . #t)
           (ret.subr.gloc.of core-hashtable-set! "./boot/macro/library.scm" . 458804))
         (push.iloc 6 . 2)
         (apply.gloc.of for-each "./boot/macro/library.scm" . 458782))
       (call
         (extend.enclose
           (1 0 . loop)
           (iloc.0 . 0)
           (if.pair?
             (call
               (push.car.iloc (0 . 0) "./boot/macro/library.scm" . 460857)
               (apply.iloc (1 . 0) "./boot/macro/library.scm" . 460851))
             (push.cdr.iloc (0 . 0) "./boot/macro/library.scm" . 460874)
             (apply.iloc (1 . 0) "./boot/macro/library.scm" . 460868))
           (iloc.0 . 0)
           (if.symbol?
             (push.iloc 2 . 0)
             (push.iloc.0 . 0)
             (push.const . #t)
             (ret.subr.gloc.of core-hashtable-set! "./boot/macro/library.scm" . 461877))
           (push.iloc.0 . 0)
           (subr.gloc.of vector? 1 "./boot/macro/library.scm" . 462887)
           (if.true
             (push.iloc.0 . 0)
             (push.subr.gloc.of vector->list 1 "./boot/macro/library.scm" . 462907)
             (apply.iloc (1 . 0) "./boot/macro/library.scm" . 462901))
           (ret.const.unspec))
         (call
           (push.gloc.of caddr)
           (push.iloc 7 . 2)
           (apply.gloc.of map "./boot/macro/library.scm" . 459822))
         (push)
         (apply.iloc (0 . 0) "./boot/macro/library.scm" . 460832))
       (call
         (push.close
           (1 0)
           (push.car.iloc (0 . 0) "./boot/macro/library.scm" . 464948)
           (push.iloc 9 . 8)
           (subr.gloc.of assq 2 "./boot/macro/library.scm" . 464942)
           (if.true.ret)
           (call
             (touch.gloc.of env-lookup)
             (push.iloc 5 . 0)
             (push.car.iloc (0 . 0) "./boot/macro/library.scm" . 465994)
             (apply.gloc.of env-lookup "./boot/macro/library.scm" . 465978))
           (push)
           (extend . 1)
           (call
             (iloc.0 . 0)
             (if.not.symbol?.ret.const . #f)
             (push.iloc.0 . 0)
             (push.car.iloc (1 . 0) "./boot/macro/library.scm" . 467031)
             (push.subr.gloc.of eq? 2 "./boot/macro/library.scm" . 467021)
             (ret.subr.gloc.of not "./boot/macro/library.scm" . 467016))
           (if.true
             (push.car.iloc (1 . 0) "./boot/macro/library.scm" . 468036)
             (call
               (touch.gloc.of make-import)
               (push.iloc.0 . 0)
               (apply.gloc.of make-import "./boot/macro/library.scm" . 468044))
             (push)
             (apply.iloc (9 . 4) "./boot/macro/library.scm" . 468020))
           (push.car.iloc (1 . 0) "./boot/macro/library.scm" . 469068)
           (subr.gloc.of uninterned-symbol? 1 "./boot/macro/library.scm" . 469048)
           (if.true.ret)
           (call
             (touch.gloc.of core-primitive-name?)
             (push.car.iloc (1 . 0) "./boot/macro/library.scm" . 470094)
             (apply.gloc.of core-primitive-name? "./boot/macro/library.scm" . 470072))
           (if.true.ret)
           (push.car.iloc (1 . 0) "./boot/macro/library.scm" . 471112)
           (call
             (touch.gloc.of make-unbound)
             (apply.gloc.of make-unbound "./boot/macro/library.scm" . 471120))
           (push)
           (apply.iloc (9 . 4) "./boot/macro/library.scm" . 471096))
         (push.iloc.0 . 0)
         (push.subr.gloc.of core-hashtable->alist 1 "./boot/macro/library.scm" . 472104)
         (apply.gloc.of for-each "./boot/macro/library.scm" . 463902))
       (call (apply.gloc.of generate-temporary-symbol "./boot/macro/library.scm" . 473136))
       (push)
       (extend . 1)
       (push.const . let)
       (push.iloc.0 . 0)
       (push.const . quote)
       (call
         (subr.gloc.of make-core-hashtable 0)
         (push)
         (extend . 1)
         (call
           (push.close
             (1 0)
             (push.iloc 3 . 0)
             (push.car.iloc (0 . 0) "./boot/macro/library.scm" . 477285)
             (subr.gloc.of core-hashtable-contains? 2 "./boot/macro/library.scm" . 477247)
             (if.false.ret)
             (push.iloc.1 . 0)
             (push.car.iloc (0 . 0) "./boot/macro/library.scm" . 478295)
             (push.cdr.iloc (0 . 0) "./boot/macro/library.scm" . 478303)
             (ret.subr.gloc.of core-hashtable-set! "./boot/macro/library.scm" . 478271))
           (push.iloc 10 . 8)
           (push.subr.gloc.of reverse 1 "./boot/macro/library.scm" . 479288)
           (apply.gloc.of for-each "./boot/macro/library.scm" . 476206))
         (push.iloc.0 . 0)
         (ret.subr.gloc.of core-hashtable->alist "./boot/macro/library.scm" . 480302))
       (push)
       (push.subr.gloc.of |.list| 2 "./boot/macro/library.scm" . 475180)
       (push.subr.gloc.of |.list| 2 "./boot/macro/library.scm" . 475180)
       (push.subr.gloc.of |.list| 1 "./boot/macro/library.scm" . 475180)
       (call
         (push.close
           (1 0)
           (push.car.iloc (0 . 0) "./boot/macro/library.scm" . 482370)
           (push.iloc 8 . 3)
           (push.subr.gloc.of assq 2 "./boot/macro/library.scm" . 482364)
           (push.subr.gloc.of cdr 1 "./boot/macro/library.scm" . 482359)
           (push.cadr.iloc (0 . 0) "./boot/macro/library.scm" . 483385)
           (push.iloc.0 . 0)
           (push.subr.gloc.of caddr 1 "./boot/macro/library.scm" . 484409)
           (extend . 3)
           (push.iloc.0 . 1)
           (const . template)
           (if.eq?
             (touch.gloc.of |make-rule-macro`2275*|)
             (push.const . syntax)
             (push.iloc.0 . 0)
             (push.iloc.0 . 2)
             (push.iloc 2 . 0)
             (apply.gloc.of |make-rule-macro`2275*| "./boot/macro/library.scm" . 487474))
           (push.iloc.0 . 1)
           (const . procedure)
           (if.eq?
             (touch.gloc.of |make-proc-macro`2275*|)
             (push.const . syntax)
             (push.iloc.0 . 0)
             (push.iloc.0 . 2)
             (push.iloc 2 . 0)
             (apply.gloc.of |make-proc-macro`2275*| "./boot/macro/library.scm" . 489522))
           (push.iloc.0 . 1)
           (const . variable)
           (if.eq?
             (touch.gloc.of |make-var-macro`2275*|)
             (push.const . variable)
             (push.iloc.0 . 0)
             (push.iloc.0 . 2)
             (push.iloc 2 . 0)
             (apply.gloc.of |make-var-macro`2275*| "./boot/macro/library.scm" . 491570))
           (push.const . "internal error in rewrite body: bad macro spec ~s")
           (push.iloc.1 . 0)
           (apply.gloc.of scheme-error "./boot/macro/library.scm" . 493618))
         (push.iloc 7 . 2)
         (apply.gloc.of
           map
           (map (lambda (|e`2337*|)
                  (let ((|id`2339*| (cdr (assq (car |e`2337*|) |renames`2274*|)))
                        (|type`2339*| (cadr |e`2337*|))
                        (|spec`2339*| (caddr |e`2337*|)))
                    (if (|.eq?| |type`2339*| 'template)
                        (|make-rule-macro`2275*| 'syntax |id`2339*| |spec`2339*| |shared-env`2331*|)
                        (if (|.eq?| |type`2339*| 'procedure)
                            (|make-proc-macro`2275*|
                              'syntax
                              |id`2339*|
                              |spec`2339*|
                              |shared-env`2331*|)
                            (if (|.eq?| |type`2339*| 'variable)
                                (|make-var-macro`2275*|
                                  'variable
                                  |id`2339*|
                                  |spec`2339*|
                                  |shared-env`2331*|)
                                (scheme-error
                                  "internal error in rewrite body: bad macro spec ~s"
                                  |e`2337*|))))))
                |macros`2274*|)))
       (push)
       (push.subr.gloc.of
         |.cons*|
         3
         (|.cons*|
           'let
           (|.list|
             (|.list|
               |shared-env`2331*|
               (|.list|
                 'quote
                 (let ((|ht`2333*| (make-core-hashtable)))
                   (for-each (lambda (|a`2335*|)
                               (and (core-hashtable-contains? |ht-visibles`2317*| (car |a`2335*|))
                                    (core-hashtable-set!
                                      |ht`2333*|
                                      (car |a`2335*|)
                                      (cdr |a`2335*|))))
                             (reverse |libenv`2242*|))
                   (core-hashtable->alist |ht`2333*|)))))
           (map (lambda (|e`2337*|)
                  (let ((|id`2339*| (cdr (assq (car |e`2337*|) |renames`2274*|)))
                        (|type`2339*| (cadr |e`2337*|))
                        (|spec`2339*| (caddr |e`2337*|)))
                    (if (|.eq?| |type`2339*| 'template)
                        (|make-rule-macro`2275*| 'syntax |id`2339*| |spec`2339*| |shared-env`2331*|)
                        (if (|.eq?| |type`2339*| 'procedure)
                            (|make-proc-macro`2275*|
                              'syntax
                              |id`2339*|
                              |spec`2339*|
                              |shared-env`2331*|)
                            (if (|.eq?| |type`2339*| 'variable)
                                (|make-var-macro`2275*|
                                  'variable
                                  |id`2339*|
                                  |spec`2339*|
                                  |shared-env`2331*|)
                                (scheme-error
                                  "internal error in rewrite body: bad macro spec ~s"
                                  |e`2337*|))))))
                |macros`2274*|)))
       (ret.subr.gloc.of
         |.list|
         (|.list|
           (|.cons*|
             'let
             (|.list|
               (|.list|
                 |shared-env`2331*|
                 (|.list|
                   'quote
                   (let ((|ht`2333*| (make-core-hashtable)))
                     (for-each (lambda (|a`2335*|)
                                 (and (core-hashtable-contains? |ht-visibles`2317*| (car |a`2335*|))
                                      (core-hashtable-set!
                                        |ht`2333*|
                                        (car |a`2335*|)
                                        (cdr |a`2335*|))))
                               (reverse |libenv`2242*|))
                     (core-hashtable->alist |ht`2333*|)))))
             (map (lambda (|e`2337*|)
                    (let ((|id`2339*| (cdr (assq (car |e`2337*|) |renames`2274*|)))
                          (|type`2339*| (cadr |e`2337*|))
                          (|spec`2339*| (caddr |e`2337*|)))
                      (if (|.eq?| |type`2339*| 'template)
                          (|make-rule-macro`2275*|
                            'syntax
                            |id`2339*|
                            |spec`2339*|
                            |shared-env`2331*|)
                          (if (|.eq?| |type`2339*| 'procedure)
                              (|make-proc-macro`2275*|
                                'syntax
                                |id`2339*|
                                |spec`2339*|
                                |shared-env`2331*|)
                              (if (|.eq?| |type`2339*| 'variable)
                                  (|make-var-macro`2275*|
                                    'variable
                                    |id`2339*|
                                    |spec`2339*|
                                    |shared-env`2331*|)
                                  (scheme-error
                                    "internal error in rewrite body: bad macro spec ~s"
                                    |e`2337*|))))))
                  |macros`2274*|)))))
     (push)
     (extend . 1)
     (push.const . |.intern-scheme-library|)
     (push.const . quote)
     (push.iloc 8 . 1)
     (push.subr.gloc.of |.list| 2 "./boot/macro/library.scm" . 499737)
     (push.const . quote)
     (push.iloc 8 . 2)
     (push.subr.gloc.of |.list| 2 "./boot/macro/library.scm" . 499737)
     (push.const . quote)
     (call
       (push.close
         (1 0)
         (push.cdr.iloc (0 . 0) "./boot/macro/library.scm" . 501800)
         (call
           (push.car.iloc (0 . 0) "./boot/macro/library.scm" . 502837)
           (push.iloc 7 . 3)
           (push.subr.gloc.of assq 2 "./boot/macro/library.scm" . 502831)
           (extend . 1)
           (iloc.0 . 0)
           (if.true
             (touch.gloc.of make-import)
             (push.cdr.iloc (0 . 0) "./boot/macro/library.scm" . 502882)
             (apply.gloc.of make-import "./boot/macro/library.scm" . 502869))
           (push.car.iloc (1 . 0) "./boot/macro/library.scm" . 503861)
           (push.iloc 10 . 5)
           (push.subr.gloc.of assq 2 "./boot/macro/library.scm" . 503855)
           (extend . 1)
           (iloc.0 . 0)
           (if.true (push.iloc.0 . 0) (ret.subr.gloc.of cdr "./boot/macro/library.scm" . 505903))
           (call
             (touch.gloc.of current-macro-expression)
             (push.const . #f)
             (apply.gloc.of current-macro-expression "./boot/macro/library.scm" . 505903))
           (push.const . library)
           (push.const . "attempt to export unbound identifier ~u")
           (push.car.iloc (2 . 0) "./boot/macro/library.scm" . 508019)
           (push.subr.gloc.of format 2 "./boot/macro/library.scm" . 507969)
           (push.iloc 11 . 0)
           (push.subr.gloc.of caddr 1 "./boot/macro/library.scm" . 508993)
           (apply.gloc.of syntax-violation "./boot/macro/library.scm" . 506927))
         (ret.cons
           (cons (cdr |e`2345*|)
                 (let ((|.L637`2347*| (assq (car |e`2345*|) |renames`2274*|)))
                   (if |.L637`2347*|
                       (make-import (cdr |.L637`2347*|))
                       (let ((|.L638`2351*| (assq (car |e`2345*|) |imports`2242*|)))
                         (if |.L638`2351*|
                             (cdr |.L638`2351*|)
                             (begin
                               (current-macro-expression #f)
                               (syntax-violation
                                 'library
                                 (format "attempt to export unbound identifier ~u" (car |e`2345*|))
                                 (caddr |form`2242*|))))))))))
       (push.iloc 8 . 4)
       (apply.gloc.of
         map
         (map (lambda (|e`2345*|)
                (cons (cdr |e`2345*|)
                      (let ((|.L637`2347*| (assq (car |e`2345*|) |renames`2274*|)))
                        (if |.L637`2347*|
                            (make-import (cdr |.L637`2347*|))
                            (let ((|.L638`2351*| (assq (car |e`2345*|) |imports`2242*|)))
                              (if |.L638`2351*|
                                  (cdr |.L638`2351*|)
                                  (begin
                                    (current-macro-expression #f)
                                    (syntax-violation
                                      'library
                                      (format
                                        "attempt to export unbound identifier ~u"
                                        (car |e`2345*|))
                                      (caddr |form`2242*|)))))))))
              |exports`2242*|)))
     (push)
     (push.subr.gloc.of
       |.list|
       2
       (|.list|
         'quote
         (map (lambda (|e`2345*|)
                (cons (cdr |e`2345*|)
                      (let ((|.L637`2347*| (assq (car |e`2345*|) |renames`2274*|)))
                        (if |.L637`2347*|
                            (make-import (cdr |.L637`2347*|))
                            (let ((|.L638`2351*| (assq (car |e`2345*|) |imports`2242*|)))
                              (if |.L638`2351*|
                                  (cdr |.L638`2351*|)
                                  (begin
                                    (current-macro-expression #f)
                                    (syntax-violation
                                      'library
                                      (format
                                        "attempt to export unbound identifier ~u"
                                        (car |e`2345*|))
                                      (caddr |form`2242*|)))))))))
              |exports`2242*|)))
     (push.subr.gloc.of
       |.list|
       4
       (|.list|
         '|.intern-scheme-library|
         (|.list| 'quote |library-id`2242*|)
         (|.list| 'quote |library-version`2242*|)
         (|.list|
           'quote
           (map (lambda (|e`2345*|)
                  (cons (cdr |e`2345*|)
                        (let ((|.L637`2347*| (assq (car |e`2345*|) |renames`2274*|)))
                          (if |.L637`2347*|
                              (make-import (cdr |.L637`2347*|))
                              (let ((|.L638`2351*| (assq (car |e`2345*|) |imports`2242*|)))
                                (if |.L638`2351*|
                                    (cdr |.L638`2351*|)
                                    (begin
                                      (current-macro-expression #f)
                                      (syntax-violation
                                        'library
                                        (format
                                          "attempt to export unbound identifier ~u"
                                          (car |e`2345*|))
                                        (caddr |form`2242*|)))))))))
                |exports`2242*|))))
     (extend . 1)
     (call
       (call
         (touch.gloc.of check-rec*-contract-violation)
         (call
           (push.gloc.of cadr)
           (push.iloc 2 . 0)
           (apply.gloc.of map "./boot/macro/library.scm" . 511003))
         (push)
         (call
           (push.gloc.of caddr)
           (push.iloc 2 . 0)
           (apply.gloc.of map "./boot/macro/library.scm" . 512034))
         (push)
         (apply.gloc.of check-rec*-contract-violation "./boot/macro/library.scm" . 513048))
       (push)
       (extend . 1)
       (iloc.0 . 0)
       (if.true
         (call
           (touch.gloc.of any1)
           (push.close
             (1 0)
             (push.cdr.iloc (0 . 0) "./boot/macro/library.scm" . 515139)
             (car.iloc (1 . 0) "./boot/macro/library.scm" . 515147)
             (if.not.eq?.ret.const . #f)
             (push.iloc.0 . 0)
             (ret.subr.gloc.of car "./boot/macro/library.scm" . 515158))
           (push.iloc 8 . 3)
           (apply.gloc.of any1 "./boot/macro/library.scm" . 515111))
         (push)
         (extend . 1)
         (call
           (touch.gloc.of current-macro-expression)
           (push.const . #f)
           (apply.gloc.of current-macro-expression "./boot/macro/library.scm" . 516127))
         (push.const . #f)
         (push.const . "attempt to reference uninitialized variable ~u")
         (push.iloc.0 . 0)
         (push.subr.gloc.of format 2 "./boot/macro/library.scm" . 518193)
         (call
           (touch.gloc.of any1)
           (push.close
             (1 0)
             (call
               (touch.gloc.of check-rec-contract-violation)
               (push.iloc.1 . 0)
               (push.subr.gloc.of list 1 "./boot/macro/library.scm" . 520284)
               (push.iloc.0 . 0)
               (apply.gloc.of check-rec-contract-violation "./boot/macro/library.scm" . 520254))
             (if.false.ret)
             (touch.gloc.of annotate)
             (push.const . define)
             (iloc.0 . 0)
             (push.cons)
             (push.iloc.0 . 0)
             (apply.gloc.of annotate "./boot/macro/library.scm" . 521278))
           (push.iloc 9 . 1)
           (apply.gloc.of any1 "./boot/macro/library.scm" . 519217))
         (push)
         (apply.gloc.of syntax-violation "./boot/macro/library.scm" . 517151))
       (ret.const.unspec))
     (touch.gloc.of annotate)
     (push.const . begin)
     (push.iloc 3 . 0)
     (push.iloc 2 . 0)
     (push.iloc 4 . 0)
     (push.iloc.1 . 0)
     (push.iloc.0 . 0)
     (push.subr.gloc.of |.list| 1 (|.list| |rewrited-exports`2353*|))
     (push.subr.gloc.of
       |.append|
       2
       (|.append| |rewrited-macros`2343*| (|.list| |rewrited-exports`2353*|)))
     (push.subr.gloc.of
       |.append|
       2
       (|.append|
         |rewrited-body`2294*|
         (|.append| |rewrited-macros`2343*| (|.list| |rewrited-exports`2353*|))))
     (push.subr.gloc.of
       |.append|
       2
       (|.append|
         |rewrited-defs`2315*|
         (|.append|
           |rewrited-body`2294*|
           (|.append| |rewrited-macros`2343*| (|.list| |rewrited-exports`2353*|)))))
     (subr.gloc.of
       |.append|
       2
       (|.append|
         |rewrited-depends`2298*|
         (|.append|
           |rewrited-defs`2315*|
           (|.append|
             |rewrited-body`2294*|
             (|.append| |rewrited-macros`2343*| (|.list| |rewrited-exports`2353*|))))))
     (push.cons)
     (push.iloc 9 . 0)
     (apply.gloc.of annotate "./boot/macro/library.scm" . 523279))
   (enclose . 6)
   (subr.gloc.of make-core-hashtable 0 "./boot/macro/library.scm" . 531492)
   (set.iloc (0 . 6))
   (call
     (touch.gloc.of current-template-environment)
     (push.iloc.1 . 8)
     (apply.gloc.of current-template-environment "./boot/macro/library.scm" . 533509))
   (call
     (push.close
       (1 0)
       (push.iloc.1 . 6)
       (push.car.iloc (0 . 0) "./boot/macro/library.scm" . 534599)
       (push.const . #t)
       (ret.subr.gloc.of core-hashtable-set! "./boot/macro/library.scm" . 534555))
     (push.iloc.1 . 5)
     (apply.gloc.of for-each "./boot/macro/library.scm" . 534533))
   (extend.enclose
     (4 0 . loop)
     (call
       (iloc.0 . 0)
       (if.not.pair?.ret.const . #f)
       (car.iloc (0 . 0) "./boot/macro/library.scm" . 536615)
       (if.not.pair?.ret.const . #f)
       (push.iloc.0 . 0)
       (push.subr.gloc.of caar 1 "./boot/macro/library.scm" . 536636)
       (ret.subr.gloc.of symbol? "./boot/macro/library.scm" . 536627))
     (if.true
       (call
         (touch.gloc.of env-lookup)
         (push.iloc 3 . 7)
         (push.iloc.0 . 0)
         (push.subr.gloc.of caar 1 "./boot/macro/library.scm" . 537642)
         (apply.gloc.of env-lookup "./boot/macro/library.scm" . 537626))
       (push)
       (extend . 1)
       (push.gloc.of denote-begin)
       (iloc.0 . 0)
       (if.eq?
         (call
           (touch.gloc.of flatten-begin)
           (push.iloc.1 . 0)
           (push.iloc 4 . 7)
           (apply.gloc.of flatten-begin "./boot/macro/library.scm" . 539677))
         (push)
         (push.iloc.1 . 1)
         (push.iloc.1 . 2)
         (push.iloc.1 . 3)
         (apply.iloc (2 . 0) "./boot/macro/library.scm" . 539671))
       (push.gloc.of denote-define-syntax)
       (iloc.0 . 0)
       (if.eq?
         (call
           (iloc.1 . 0)
           (if.not.pair?.ret.const . #f)
           (car.iloc (1 . 0) (car |body`2373*|))
           (if.not.pair?.ret.const . #f)
           (push.iloc.1 . 0)
           (subr.gloc.of cdar 1 (cdar |body`2373*|))
           (if.not.pair?.ret.const . #f)
           (push.iloc.1 . 0)
           (subr.gloc.of cddar 1 (cddar |body`2373*|))
           (if.not.pair?.ret.const . #f)
           (push.iloc.1 . 0)
           (subr.gloc.of cdddar 1 (cdddar |body`2373*|))
           (if.not.null?.ret.const . #f)
           (push.cdr.iloc (1 . 0) (cdr |body`2373*|))
           (subr.gloc.of list? 1 (list? (cdr |body`2373*|)))
           (if.false.ret)
           (push.iloc.1 . 0)
           (push.subr.gloc.of cadar 1 (cadar |body`2373*|))
           (ret.subr.gloc.of symbol? (symbol? (cadar |body`2373*|))))
         (if.true
           (push.cdr.iloc (1 . 0) (cdr |body`2373*|))
           (push.iloc.1 . 0)
           (push.subr.gloc.of caddar 1 (caddar |body`2373*|))
           (push.iloc.1 . 0)
           (push.subr.gloc.of cadar 1 (cadar |body`2373*|))
           (extend . 3)
           (call
             (push.iloc 4 . 6)
             (push.iloc.0 . 2)
             (subr.gloc.of
               core-hashtable-contains?
               2
               (core-hashtable-contains? |ht-imported-immutables`2243*| |org`2381*|))
             (if.false.ret)
             (push.const . define-syntax)
             (push.const . "attempt to modify immutable binding")
             (push.car.iloc (2 . 0) (car |body`2373*|))
             (apply.gloc.of
               syntax-violation
               (syntax-violation
                 'define-syntax
                 "attempt to modify immutable binding"
                 (car |body`2373*|))))
           (push.close
             (0 0)
             (push.const . #f)
             (extend . 1)
             (push.close
               (0 0)
               (call
                 (touch.gloc.of current-template-environment)
                 (apply.gloc.of current-template-environment (current-template-environment)))
               (set.iloc (1 . 0) (set! |tmp1`2385`2387*| (current-template-environment)))
               (touch.gloc.of current-template-environment)
               (push.iloc 7 . 0)
               (apply.gloc.of
                 current-template-environment
                 (current-template-environment |initial-libenv`2243*|)))
             (push.close
               (0 0)
               (touch.gloc.of compile-macro)
               (push.car.iloc (5 . 0) (car |body`2373*|))
               (push.iloc 3 . 1)
               (push.iloc 8 . 7)
               (apply.gloc.of
                 compile-macro
                 (compile-macro (car |body`2373*|) |clause`2381*| |env`2242*|)))
             (push.close
               (0 0)
               (touch.gloc.of current-template-environment)
               (push.iloc.1 . 0)
               (apply.gloc.of
                 current-template-environment
                 (current-template-environment |tmp1`2385`2387*|)))
             (apply.gloc.of
               |.dynamic-wind|
               (|.dynamic-wind|
                 (lambda ()
                   (set! |tmp1`2385`2387*| (current-template-environment))
                   (current-template-environment |initial-libenv`2243*|))
                 (lambda () (compile-macro (car |body`2373*|) |clause`2381*| |env`2242*|))
                 (lambda () (current-template-environment |tmp1`2385`2387*|)))))
           (push.close
             (1 1)
             (call
               (touch.gloc.of generate-global-id)
               (push.iloc 6 . 1)
               (push.iloc.1 . 2)
               (apply.gloc.of
                 generate-global-id
                 (generate-global-id |library-id`2242*| |org`2381*|)))
             (push)
             (extend . 1)
             (call
               (push.iloc 2 . 2)
               (call
                 (touch.gloc.of make-import)
                 (push.iloc.0 . 0)
                 (apply.gloc.of make-import (make-import |new`2396*|)))
               (push)
               (apply.iloc (6 . 4) (|extend-libenv!`2243*| |org`2381*| (make-import |new`2396*|))))
             (push.iloc.1 . 0)
             (subr.gloc.of procedure? 1 (procedure? |code`2383*|))
             (if.true
               (call
                 (push.iloc 2 . 2)
                 (call
                   (touch.gloc.of make-macro)
                   (push.iloc.1 . 0)
                   (push.iloc 7 . 7)
                   (apply.gloc.of make-macro (make-macro |code`2383*| |env`2242*|)))
                 (push)
                 (apply.iloc
                   (6 . 3)
                   (|extend-env!`2243*| |org`2381*| (make-macro |code`2383*| |env`2242*|))))
               (push.iloc 2 . 0)
               (push.iloc 4 . 1)
               (push.iloc 2 . 2)
               (push.const . procedure)
               (push.car.iloc (1 . 1) (car |expr`2383*|))
               (push.subr.gloc.of list 3 (list |org`2381*| 'procedure (car |expr`2383*|)))
               (iloc 4 . 2)
               (push.cons)
               (call
                 (touch.gloc.of acons)
                 (push.iloc 2 . 2)
                 (push.iloc.0 . 0)
                 (push.iloc 4 . 3)
                 (apply.gloc.of acons (acons |org`2381*| |new`2396*| |renames`2373*|)))
               (push)
               (apply.iloc
                 (5 . 0)
                 (|loop`2372*|
                   |more`2381*|
                   |defs`2373*|
                   (cons (list |org`2381*| 'procedure (car |expr`2383*|)) |macros`2373*|)
                   (acons |org`2381*| |new`2396*| |renames`2373*|))))
             (call
               (touch.gloc.of macro-variable?)
               (push.iloc.1 . 0)
               (apply.gloc.of macro-variable? (macro-variable? |code`2383*|)))
             (if.true
               (call
                 (push.iloc 2 . 2)
                 (call
                   (touch.gloc.of make-macro-variable)
                   (push.cadr.iloc (1 . 0) (cadr |code`2383*|))
                   (push.iloc 7 . 7)
                   (apply.gloc.of
                     make-macro-variable
                     (make-macro-variable (cadr |code`2383*|) |env`2242*|)))
                 (push)
                 (apply.iloc
                   (6 . 3)
                   (|extend-env!`2243*|
                     |org`2381*|
                     (make-macro-variable (cadr |code`2383*|) |env`2242*|))))
               (push.iloc 2 . 0)
               (push.iloc 4 . 1)
               (push.iloc 2 . 2)
               (push.const . variable)
               (push.car.iloc (1 . 1) (car |expr`2383*|))
               (push.subr.gloc.of list 3 (list |org`2381*| 'variable (car |expr`2383*|)))
               (iloc 4 . 2)
               (push.cons)
               (call
                 (touch.gloc.of acons)
                 (push.iloc 2 . 2)
                 (push.iloc.0 . 0)
                 (push.iloc 4 . 3)
                 (apply.gloc.of acons (acons |org`2381*| |new`2396*| |renames`2373*|)))
               (push)
               (apply.iloc
                 (5 . 0)
                 (|loop`2372*|
                   |more`2381*|
                   |defs`2373*|
                   (cons (list |org`2381*| 'variable (car |expr`2383*|)) |macros`2373*|)
                   (acons |org`2381*| |new`2396*| |renames`2373*|))))
             (call
               (push.iloc 2 . 2)
               (call
                 (touch.gloc.of make-macro)
                 (push.iloc.1 . 0)
                 (push.iloc 7 . 7)
                 (apply.gloc.of make-macro (make-macro |code`2383*| |env`2242*|)))
               (push)
               (apply.iloc
                 (6 . 3)
                 (|extend-env!`2243*| |org`2381*| (make-macro |code`2383*| |env`2242*|))))
             (push.iloc 2 . 0)
             (push.iloc 4 . 1)
             (push.iloc 2 . 2)
             (push.const . template)
             (push.iloc.1 . 0)
             (push.subr.gloc.of list 3 (list |org`2381*| 'template |code`2383*|))
             (iloc 4 . 2)
             (push.cons)
             (call
               (touch.gloc.of acons)
               (push.iloc 2 . 2)
               (push.iloc.0 . 0)
               (push.iloc 4 . 3)
               (apply.gloc.of acons (acons |org`2381*| |new`2396*| |renames`2373*|)))
             (push)
             (apply.iloc
               (5 . 0)
               (|loop`2372*|
                 |more`2381*|
                 |defs`2373*|
                 (cons (list |org`2381*| 'template |code`2383*|) |macros`2373*|)
                 (acons |org`2381*| |new`2396*| |renames`2373*|))))
           (apply.gloc.of
             |.call-with-values|
             (|.call-with-values|
               (lambda ()
                 (let ((|tmp1`2385`2387*| #f))
                   (|.dynamic-wind|
                     (lambda ()
                       (set! |tmp1`2385`2387*| (current-template-environment))
                       (current-template-environment |initial-libenv`2243*|))
                     (lambda () (compile-macro (car |body`2373*|) |clause`2381*| |env`2242*|))
                     (lambda () (current-template-environment |tmp1`2385`2387*|)))))
               (lambda (|code`2383*| . |expr`2383*|)
                 (let ((|new`2396*| (generate-global-id |library-id`2242*| |org`2381*|)))
                   (|extend-libenv!`2243*| |org`2381*| (make-import |new`2396*|))
                   (if (procedure? |code`2383*|)
                       (begin
                         (|extend-env!`2243*| |org`2381*| (make-macro |code`2383*| |env`2242*|))
                         (|loop`2372*|
                           |more`2381*|
                           |defs`2373*|
                           (cons (list |org`2381*| 'procedure (car |expr`2383*|)) |macros`2373*|)
                           (acons |org`2381*| |new`2396*| |renames`2373*|)))
                       (if (macro-variable? |code`2383*|)
                           (begin
                             (|extend-env!`2243*|
                               |org`2381*|
                               (make-macro-variable (cadr |code`2383*|) |env`2242*|))
                             (|loop`2372*|
                               |more`2381*|
                               |defs`2373*|
                               (cons (list |org`2381*| 'variable (car |expr`2383*|)) |macros`2373*|)
                               (acons |org`2381*| |new`2396*| |renames`2373*|)))
                           (begin
                             (|extend-env!`2243*| |org`2381*| (make-macro |code`2383*| |env`2242*|))
                             (|loop`2372*|
                               |more`2381*|
                               |defs`2373*|
                               (cons (list |org`2381*| 'template |code`2383*|) |macros`2373*|)
                               (acons |org`2381*| |new`2396*| |renames`2373*|))))))))))
         (push.const . define-syntax)
         (push.const . "expected symbol and single expression")
         (push.car.iloc (1 . 0) (car |body`2373*|))
         (apply.gloc.of
           syntax-violation
           (syntax-violation
             'define-syntax
             "expected symbol and single expression"
             (car |body`2373*|))))
       (push.gloc.of denote-define)
       (iloc.0 . 0)
       (if.eq?
         (call
           (touch.gloc.of annotate)
           (call
             (touch.gloc.of desugar-define)
             (push.car.iloc (1 . 0) "./boot/macro/library.scm" . 564289)
             (apply.gloc.of desugar-define "./boot/macro/library.scm" . 564273))
           (push)
           (push.subr.gloc.of cdr 1 "./boot/macro/library.scm" . 564268)
           (push.car.iloc (1 . 0) "./boot/macro/library.scm" . 564302)
           (apply.gloc.of annotate "./boot/macro/library.scm" . 564258))
         (push)
         (extend . 1)
         (call
           (push.iloc 4 . 6)
           (push.car.iloc (0 . 0) "./boot/macro/library.scm" . 565327)
           (subr.gloc.of core-hashtable-contains? 2 "./boot/macro/library.scm" . 565278)
           (if.false.ret)
           (push.const . define)
           (push.const . "attempt to modify immutable binding")
           (push.car.iloc (2 . 0) "./boot/macro/library.scm" . 566366)
           (apply.gloc.of syntax-violation "./boot/macro/library.scm" . 566302))
         (push.car.iloc (0 . 0) "./boot/macro/library.scm" . 567332)
         (call
           (touch.gloc.of generate-global-id)
           (push.iloc 5 . 1)
           (push.car.iloc (0 . 0) "./boot/macro/library.scm" . 568387)
           (apply.gloc.of generate-global-id "./boot/macro/library.scm" . 568356))
         (push)
         (extend . 2)
         (call
           (push.iloc.0 . 0)
           (push.iloc.0 . 1)
           (apply.iloc (5 . 3) "./boot/macro/library.scm" . 569371))
         (call
           (push.iloc.0 . 0)
           (call
             (touch.gloc.of make-import)
             (push.iloc.0 . 1)
             (apply.gloc.of make-import "./boot/macro/library.scm" . 570415))
           (push)
           (apply.iloc (5 . 4) "./boot/macro/library.scm" . 570395))
         (push.cdr.iloc (3 . 0) "./boot/macro/library.scm" . 571425)
         (push.iloc.1 . 0)
         (iloc 3 . 1)
         (push.cons)
         (push.iloc 3 . 2)
         (call
           (touch.gloc.of acons)
           (push.iloc.0 . 0)
           (push.iloc.0 . 1)
           (push.iloc 3 . 3)
           (apply.gloc.of acons "./boot/macro/library.scm" . 571459))
         (push)
         (apply.iloc (4 . 0) "./boot/macro/library.scm" . 571419))
       (call
         (call
           (touch.gloc.of macro?)
           (push.iloc.0 . 0)
           (apply.gloc.of macro? "./boot/macro/library.scm" . 572443))
         (if.true.ret)
         (push.gloc.of denote-let-syntax)
         (iloc.0 . 0)
         (if.eq?.ret.const . #t)
         (push.gloc.of denote-letrec-syntax)
         (iloc.0 . 0)
         (ret.eq? "./boot/macro/library.scm" . 574491))
       (if.true
         (push.close
           (0 0)
           (touch.gloc.of expand-initial-forms)
           (push.car.iloc (2 . 0) "./boot/macro/library.scm" . 575558)
           (push.iloc 5 . 7)
           (apply.gloc.of expand-initial-forms "./boot/macro/library.scm" . 575536))
         (push.close
           (2 0)
           (iloc.0 . 1)
           (set.iloc (5 . 7) "./boot/macro/library.scm" . 576537)
           (call
             (touch.gloc.of flatten-begin)
             (push.iloc.0 . 0)
             (push.subr.gloc.of list 1 "./boot/macro/library.scm" . 577593)
             (push.iloc 5 . 7)
             (apply.gloc.of flatten-begin "./boot/macro/library.scm" . 577578))
           (push)
           (extend . 1)
           (iloc.0 . 0)
           (if.null?
             (push.cdr.iloc (3 . 0) "./boot/macro/library.scm" . 579624)
             (push.iloc 3 . 1)
             (push.iloc 3 . 2)
             (push.iloc 3 . 3)
             (apply.iloc (4 . 0) "./boot/macro/library.scm" . 579618))
           (call (push.iloc.0 . 0) (apply.iloc (5 . 1) "./boot/macro/library.scm" . 580642))
           (if.true
             (push.iloc.0 . 0)
             (push.cdr.iloc (3 . 0) "./boot/macro/library.scm" . 581690)
             (push.subr.gloc.of append 2 "./boot/macro/library.scm" . 581672)
             (push.iloc 3 . 1)
             (push.iloc 3 . 2)
             (push.iloc 3 . 3)
             (apply.iloc (4 . 0) "./boot/macro/library.scm" . 581666))
           (push.iloc 3 . 0)
           (push.iloc 3 . 1)
           (push.subr.gloc.of reverse 1 "./boot/macro/library.scm" . 583733)
           (push.iloc 3 . 2)
           (push.subr.gloc.of reverse 1 "./boot/macro/library.scm" . 583748)
           (push.iloc 3 . 3)
           (apply.iloc (5 . 5) "./boot/macro/library.scm" . 583714))
         (apply.gloc.of |.call-with-values| "./boot/macro/library.scm" . 540695))
       (push.iloc.1 . 0)
       (push.iloc.1 . 1)
       (push.subr.gloc.of reverse 1 "./boot/macro/library.scm" . 585770)
       (push.iloc.1 . 2)
       (push.subr.gloc.of reverse 1 "./boot/macro/library.scm" . 585785)
       (push.iloc.1 . 3)
       (apply.iloc (3 . 5) "./boot/macro/library.scm" . 585751))
     (push.iloc.0 . 0)
     (push.iloc.0 . 1)
     (push.subr.gloc.of reverse 1 "./boot/macro/library.scm" . 587809)
     (push.iloc.0 . 2)
     (push.subr.gloc.of reverse 1 "./boot/macro/library.scm" . 587824)
     (push.iloc.0 . 3)
     (apply.iloc (2 . 5) "./boot/macro/library.scm" . 587790))
   (call
     (touch.gloc.of flatten-begin)
     (push.iloc 2 . 3)
     (push.iloc 2 . 7)
     (apply.gloc.of flatten-begin "./boot/macro/library.scm" . 535574))
   (push)
   (push.const)
   (push.const)
   (push.const)
   (apply.iloc (0 . 0) "./boot/macro/library.scm" . 536583))
 (set.gloc.of expand-library-body)
 (ret.const.unspec))
((close
   (1 0)
   (push.car.iloc (0 . 0) "./boot/macro/library.scm" . 602143)
   (push.cddr.iloc (0 . 0) "./boot/macro/library.scm" . 602166)
   (extend . 2)
   (push.iloc.0 . 0)
   (iloc.0 . 1)
   (if.eq?.ret.const . #t)
   (subr.gloc.of current-macro-environment 0)
   (push)
   (push.iloc.0 . 1)
   (push.const . #f)
   (push.subr.gloc.of core-hashtable-ref 3 "./boot/macro/library.scm" . 604190)
   (extend . 1)
   (iloc.0 . 0)
   (if.true
     (call
       (push.iloc.1 . 0)
       (subr.gloc.of top-level-bound? 1 "./boot/macro/library.scm" . 606247)
       (if.false.ret)
       (push.iloc.1 . 0)
       (push.const.undef)
       (ret.subr.gloc.of set-top-level-value! "./boot/macro/library.scm" . 606273))
     (subr.gloc.of current-macro-environment 0)
     (push)
     (push.iloc.1 . 0)
     (push.iloc.0 . 0)
     (ret.subr.gloc.of core-hashtable-set! "./boot/macro/library.scm" . 607267))
   (subr.gloc.of current-macro-environment 0)
   (push)
   (push.iloc.1 . 0)
   (subr.gloc.of core-hashtable-delete! 2 "./boot/macro/library.scm" . 609310)
   (push.iloc.1 . 0)
   (push.iloc.1 . 1)
   (push.subr.gloc.of top-level-value 1 "./boot/macro/library.scm" . 610363)
   (ret.subr.gloc.of set-top-level-value! "./boot/macro/library.scm" . 610334))
 (set.gloc.of |.L656|)
 (close
   (1 0 . import-top-level-bindings)
   (call
     (subr.gloc.of make-core-hashtable 0)
     (push)
     (call
       (touch.gloc.of current-top-level-renames)
       (apply.gloc.of current-top-level-renames "./boot/macro/library.scm" . 591916))
     (push)
     (extend . 2)
     (call
       (push.close
         (1 0)
         (push.iloc.1 . 1)
         (push.car.iloc (2 . 0) "./boot/macro/library.scm" . 593967)
         (subr.gloc.of core-hashtable-delete! 2 "./boot/macro/library.scm" . 593939)
         (push.iloc.1 . 0)
         (push.cddr.iloc (0 . 0) "./boot/macro/library.scm" . 594994)
         (push.const . #f)
         (push.subr.gloc.of core-hashtable-ref 3 "./boot/macro/library.scm" . 594970)
         (extend . 1)
         (iloc.0 . 0)
         (if.true
           (push.iloc 2 . 1)
           (push.car.iloc (1 . 0) "./boot/macro/library.scm" . 596035)
           (push.iloc.0 . 0)
           (ret.subr.gloc.of core-hashtable-set! "./boot/macro/library.scm" . 596010))
         (push.iloc 2 . 0)
         (push.cddr.iloc (1 . 0) "./boot/macro/library.scm" . 598067)
         (push.car.iloc (1 . 0) "./boot/macro/library.scm" . 598082)
         (ret.subr.gloc.of core-hashtable-set! "./boot/macro/library.scm" . 598042))
       (push.iloc.1 . 0)
       (apply.gloc.of
         for-each
         (for-each (lambda (|binding`2412*|)
                     (core-hashtable-delete! |ht2`2410*| (car |bindings`2408*|))
                     (let ((|.L654`2414*|
                             (core-hashtable-ref |ht1`2410*| (cddr |binding`2412*|) #f)))
                       (if |.L654`2414*|
                           (core-hashtable-set! |ht2`2410*| (car |binding`2412*|) |.L654`2414*|)
                           (core-hashtable-set!
                             |ht1`2410*|
                             (cddr |binding`2412*|)
                             (car |binding`2412*|)))))
                   |bindings`2408*|)))
     (touch.gloc.of current-top-level-renames)
     (push.iloc.0 . 1)
     (apply.gloc.of current-top-level-renames "./boot/macro/library.scm" . 600071))
   (push.gloc.of |.L656|)
   (push.iloc.0 . 0)
   (apply.gloc.of for-each "./boot/macro/library.scm" . 601093))
 (set.gloc.of import-top-level-bindings)
 (ret.const.unspec))
((close
   (2 0 . expand-import)
   (call
     (call
       (touch.gloc.of unexpect-top-level-form)
       (apply.gloc.of unexpect-top-level-form "./boot/macro/library.scm" . 615434))
     (if.false.ret)
     (push.const . import)
     (push.const . "misplaced top-level directive")
     (push.iloc.0 . 0)
     (apply.gloc.of syntax-violation "./boot/macro/library.scm" . 616458))
   (call
     (touch.gloc.of auto-compile-cache-update)
     (apply.gloc.of auto-compile-cache-update "./boot/macro/library.scm" . 617477))
   (subr.gloc.of make-core-hashtable 0)
   (push)
   (extend . 1)
   (call
     (push.close
       (1 0)
       (push.iloc.1 . 0)
       (push.car.iloc (0 . 0) "./boot/macro/library.scm" . 620602)
       (push.const . #f)
       (push.subr.gloc.of core-hashtable-ref 3 "./boot/macro/library.scm" . 620570)
       (extend . 1)
       (iloc.0 . 0)
       (if.true
         (push.iloc.0 . 0)
         (cdr.iloc (1 . 0) "./boot/macro/library.scm" . 622637)
         (if.eq?.ret.const . #t)
         (push.const . import)
         (push.const . "duplicate import identifiers")
         (call
           (touch.gloc.of abbreviated-take-form)
           (push.iloc 3 . 0)
           (push.const . 4)
           (push.const . 8)
           (apply.gloc.of abbreviated-take-form "./boot/macro/library.scm" . 623708))
         (push)
         (push.car.iloc (1 . 0) "./boot/macro/library.scm" . 623741)
         (apply.gloc.of syntax-violation "./boot/macro/library.scm" . 623651))
       (push.iloc 2 . 0)
       (push.car.iloc (1 . 0) "./boot/macro/library.scm" . 625723)
       (push.cdr.iloc (1 . 0) "./boot/macro/library.scm" . 625731)
       (ret.subr.gloc.of core-hashtable-set! "./boot/macro/library.scm" . 625690))
     (call
       (touch.gloc.of parse-imports)
       (push.iloc.1 . 0)
       (push.cdr.iloc (1 . 0) "./boot/macro/library.scm" . 618536)
       (apply.gloc.of parse-imports "./boot/macro/library.scm" . 618516))
     (push)
     (apply.gloc.of
       for-each
       (for-each (lambda (|a`2430*|)
                   (let ((|.L660`2432*|
                           (core-hashtable-ref |ht-bindings`2428*| (car |a`2430*|) #f)))
                     (if |.L660`2432*|
                         (or (eq? |.L660`2432*| (cdr |a`2430*|))
                             (syntax-violation
                               'import
                               "duplicate import identifiers"
                               (abbreviated-take-form |form`2426*| 4 8)
                               (car |a`2430*|)))
                         (core-hashtable-set!
                           |ht-bindings`2428*|
                           (car |a`2430*|)
                           (cdr |a`2430*|)))))
                 (parse-imports |form`2426*| (cdr |form`2426*|)))))
   (touch.gloc.of import-top-level-bindings)
   (push.iloc.0 . 0)
   (push.subr.gloc.of core-hashtable->alist 1 "./boot/macro/library.scm" . 627746)
   (apply.gloc.of import-top-level-bindings "./boot/macro/library.scm" . 627719))
 (set.gloc.of expand-import)
 (ret.const.unspec))
((close
   (1 0)
   (call
     (call
       (touch.gloc.of generate-library-id)
       (push.iloc.0 . 0)
       (apply.gloc.of generate-library-id "./boot/macro/library.scm" . 631831))
     (push)
     (extend . 1)
     (call (apply.gloc.of scheme-library-exports "./boot/macro/library.scm" . 632874))
     (push)
     (push.iloc.0 . 0)
     (push.const . #f)
     (push.subr.gloc.of core-hashtable-ref 3 "./boot/macro/library.scm" . 632854)
     (extend . 1)
     (push.iloc.0 . 0)
     (const . pending)
     (if.eq?
       (call (apply.gloc.of scheme-library-exports "./boot/macro/library.scm" . 634917))
       (push)
       (push.iloc.1 . 0)
       (push.const . #f)
       (subr.gloc.of core-hashtable-set! 3 "./boot/macro/library.scm" . 634896)
       (push.const . library)
       (push.const . "encountered cyclic dependencies")
       (push.iloc 2 . 0)
       (apply.gloc.of syntax-violation "./boot/macro/library.scm" . 635920))
     (push.iloc.0 . 0)
     (const . #f)
     (if.eq?
       (push.close
         (0 0)
         (call (apply.gloc.of scheme-library-exports "./boot/macro/library.scm" . 640040))
         (push)
         (push.iloc 2 . 0)
         (push.const . pending)
         (ret.subr.gloc.of core-hashtable-set! "./boot/macro/library.scm" . 640019))
       (push.close
         (0 0)
         (touch.gloc.of load-scheme-library)
         (push.iloc 3 . 0)
         (push.const . #f)
         (apply.gloc.of load-scheme-library "./boot/macro/library.scm" . 642067))
       (push.close
         (0 0)
         (call (apply.gloc.of scheme-library-exports "./boot/macro/library.scm" . 644145))
         (push)
         (push.iloc 2 . 0)
         (push.const . #f)
         (push.subr.gloc.of core-hashtable-ref 3 "./boot/macro/library.scm" . 644125)
         (const . pending)
         (if.not.eq?.ret.const . #f)
         (call (apply.gloc.of scheme-library-exports "./boot/macro/library.scm" . 645165))
         (push)
         (push.iloc 2 . 0)
         (push.const . #f)
         (ret.subr.gloc.of core-hashtable-set! "./boot/macro/library.scm" . 645144))
       (apply.gloc.of dynamic-wind "./boot/macro/library.scm" . 637968))
     (ret.const.unspec))
   (ret.const.unspec))
 (set.gloc.of |.L663|)
 (push.const . |.require-scheme-library|)
 (push.gloc.of |.L663|)
 (ret.subr.gloc.of set-top-level-value! "./boot/macro/library.scm" . 630787))
((call
   (push.const . equal?)
   (push.subr.gloc.of make-core-hashtable 1 "./boot/macro/library.scm" . 649245)
   (extend . 1)
   (ret.close
     (1 0 . unify-import-bindings)
     (push.close
       (1 0)
       (push.iloc 2 . 0)
       (push.iloc.0 . 0)
       (push.const . #f)
       (push.subr.gloc.of core-hashtable-ref 3 "./boot/macro/library.scm" . 652309)
       (extend . 1)
       (iloc.0 . 0)
       (if.true (push.iloc.0 . 0) (ret.subr.gloc.of values "./boot/macro/library.scm" . 654357))
       (push.iloc 3 . 0)
       (push.iloc.1 . 0)
       (push.iloc.1 . 0)
       (subr.gloc.of core-hashtable-set! 3 "./boot/macro/library.scm" . 654364)
       (ret.iloc 1 . 0))
     (push.iloc.0 . 0)
     (apply.gloc.of map "./boot/macro/library.scm" . 651271)))
 (set.gloc.of unify-import-bindings)
 (ret.const.unspec))
((close
   (3 0)
   (call
     (iloc.0 . 1)
     (if.false.ret)
     (call
       (touch.gloc.of scheme-library-versions)
       (apply.gloc.of scheme-library-versions "./boot/macro/library.scm" . 659503))
     (push)
     (push.iloc.0 . 0)
     (push.iloc.0 . 1)
     (ret.subr.gloc.of core-hashtable-set! "./boot/macro/library.scm" . 659482))
   (call (apply.gloc.of scheme-library-exports "./boot/macro/library.scm" . 660506))
   (push)
   (push.iloc.0 . 0)
   (call
     (touch.gloc.of unify-import-bindings)
     (push.iloc.0 . 2)
     (apply.gloc.of unify-import-bindings "./boot/macro/library.scm" . 660542))
   (push)
   (ret.subr.gloc.of core-hashtable-set! "./boot/macro/library.scm" . 660485))
 (set.gloc.of |.L666|)
 (push.const . |.intern-scheme-library|)
 (push.gloc.of |.L666|)
 (ret.subr.gloc.of set-top-level-value! "./boot/macro/library.scm" . 657409))
((close
   (1 0)
   (call (apply.gloc.of scheme-library-exports "./boot/macro/library.scm" . 664605))
   (push)
   (push.iloc.0 . 0)
   (ret.subr.gloc.of core-hashtable-delete! "./boot/macro/library.scm" . 664581))
 (set.gloc.of |.L668|)
 (push.const . |.unintern-scheme-library|)
 (push.gloc.of |.L668|)
 (ret.subr.gloc.of set-top-level-value! "./boot/macro/library.scm" . 662529))
((close
   (3 0 . loop)
   (iloc.0 . 0)
   (if.null?
     (push.iloc.0 . 1)
     (push.iloc.0 . 2)
     (ret.subr.gloc.of append "./boot/macro/library.scm" . 678930))
   (call
     (touch.gloc.of unbound?)
     (push.iloc.0 . 0)
     (push.subr.gloc.of cdar 1 "./boot/macro/library.scm" . 679964)
     (apply.gloc.of unbound? "./boot/macro/library.scm" . 679954))
   (if.true
     (touch.gloc.of |loop`2467*|)
     (push.cdr.iloc (0 . 0) "./boot/macro/library.scm" . 680984)
     (push.iloc.0 . 1)
     (push.car.iloc (0 . 0) "./boot/macro/library.scm" . 681007)
     (iloc.0 . 2)
     (push.cons)
     (apply.gloc.of |loop`2467*| "./boot/macro/library.scm" . 680978))
   (touch.gloc.of |loop`2467*|)
   (push.cdr.iloc (0 . 0) "./boot/macro/library.scm" . 683032)
   (push.car.iloc (0 . 0) "./boot/macro/library.scm" . 683048)
   (iloc.0 . 1)
   (push.cons)
   (push.iloc.0 . 2)
   (apply.gloc.of |loop`2467*| "./boot/macro/library.scm" . 683026))
 (set.gloc.of |loop`2467*|)
 (close
   (1 0 . permute-env)
   (touch.gloc.of |loop`2467*|)
   (push.iloc.0 . 0)
   (push.subr.gloc.of core-hashtable->alist 1 "./boot/macro/library.scm" . 676889)
   (push.const)
   (push.const)
   (apply.gloc.of |loop`2467*| "./boot/macro/library.scm" . 677899))
 (set.gloc.of |permute-env`2461*|)
 (close
   (2 0 . expand-top-level-program)
   (extend.unbound . 1)
   (push.const |.R6RS-TOP|)
   (enclose . 1)
   (call
     (iloc.1 . 0)
     (if.not.pair?.ret.const . #f)
     (car.iloc (1 . 0) "./boot/macro/library.scm" . 687109)
     (if.not.pair?.ret.const . #f)
     (push.iloc.1 . 0)
     (push.subr.gloc.of cdar 1 "./boot/macro/library.scm" . 687109)
     (subr.gloc.of list? 1 "./boot/macro/library.scm" . 687109)
     (if.false.ret)
     (push.cdr.iloc (1 . 0) "./boot/macro/library.scm" . 687109)
     (subr.gloc.of list? 1 "./boot/macro/library.scm" . 687109)
     (if.false.ret)
     (push.iloc.1 . 0)
     (push.subr.gloc.of caar 1 "./boot/macro/library.scm" . 687109)
     (const . import)
     (ret.eq? "./boot/macro/library.scm" . 687109))
   (if.true
     (push.cdr.iloc (1 . 0) "./boot/macro/library.scm" . 687109)
     (push.iloc.1 . 0)
     (push.subr.gloc.of cdar 1 "./boot/macro/library.scm" . 687109)
     (extend . 2)
     (call
       (touch.gloc.of library-name->id)
       (push.iloc 2 . 0)
       (push.iloc.1 . 0)
       (apply.gloc.of library-name->id "./boot/macro/library.scm" . 687109))
     (push)
     (call
       (touch.gloc.of library-name->version)
       (push.iloc 2 . 0)
       (push.iloc.1 . 0)
       (apply.gloc.of library-name->version "./boot/macro/library.scm" . 687109))
     (push)
     (extend . 2)
     (call
       (iloc.0 . 1)
       (if.false.ret)
       (call
         (touch.gloc.of scheme-library-versions)
         (apply.gloc.of scheme-library-versions "./boot/macro/library.scm" . 687109))
       (push)
       (push.iloc.0 . 0)
       (push.iloc.0 . 1)
       (ret.subr.gloc.of core-hashtable-set! "./boot/macro/library.scm" . 687109))
     (call
       (touch.gloc.of parse-imports)
       (push.iloc 3 . 0)
       (push.iloc.1 . 1)
       (apply.gloc.of parse-imports "./boot/macro/library.scm" . 687109))
     (push)
     (call
       (touch.gloc.of parse-depends)
       (push.iloc 3 . 0)
       (push.iloc.1 . 1)
       (apply.gloc.of parse-depends "./boot/macro/library.scm" . 687109))
     (push)
     (subr.gloc.of make-core-hashtable 0)
     (push)
     (subr.gloc.of make-core-hashtable 0)
     (push)
     (extend . 4)
     (call
       (push.close
         (1 0)
         (push.iloc.1 . 2)
         (push.car.iloc (0 . 0) "./boot/macro/library.scm" . 687109)
         (push.const . #t)
         (subr.gloc.of core-hashtable-set! 3 "./boot/macro/library.scm" . 687109)
         (push.iloc.1 . 3)
         (push.car.iloc (0 . 0) "./boot/macro/library.scm" . 687109)
         (push.const . #f)
         (push.subr.gloc.of core-hashtable-ref 3 "./boot/macro/library.scm" . 687109)
         (extend . 1)
         (iloc.0 . 0)
         (if.true
           (push.iloc.0 . 0)
           (cdr.iloc (1 . 0) "./boot/macro/library.scm" . 687109)
           (if.eq?.ret.const . #t)
           (push.const . "top-level program")
           (push.const . "duplicate import identifiers")
           (call
             (touch.gloc.of abbreviated-take-form)
             (push.iloc 6 . 0)
             (push.const . 4)
             (push.const . 8)
             (apply.gloc.of abbreviated-take-form "./boot/macro/library.scm" . 687109))
           (push)
           (push.car.iloc (1 . 0) "./boot/macro/library.scm" . 687109)
           (apply.gloc.of syntax-violation "./boot/macro/library.scm" . 687109))
         (push.iloc 2 . 3)
         (push.car.iloc (1 . 0) "./boot/macro/library.scm" . 687109)
         (push.cdr.iloc (1 . 0) "./boot/macro/library.scm" . 687109)
         (ret.subr.gloc.of core-hashtable-set! "./boot/macro/library.scm" . 687109))
       (push.iloc.0 . 0)
       (apply.gloc.of
         for-each
         (for-each (lambda (|a`2480*|)
                     (core-hashtable-set! |ht-immutables`2478*| (car |a`2480*|) #t)
                     (let ((|.L671`2482*|
                             (core-hashtable-ref |ht-imports`2478*| (car |a`2480*|) #f)))
                       (if |.L671`2482*|
                           (or (eq? |.L671`2482*| (cdr |a`2480*|))
                               (syntax-violation
                                 "top-level program"
                                 "duplicate import identifiers"
                                 (abbreviated-take-form |form`2460*| 4 8)
                                 (car |a`2480*|)))
                           (core-hashtable-set!
                             |ht-imports`2478*|
                             (car |a`2480*|)
                             (cdr |a`2480*|)))))
                   |imports`2478*|)))
     (call
       (touch.gloc.of make-shield-id-table)
       (push.iloc 2 . 0)
       (apply.gloc.of make-shield-id-table "./boot/macro/library.scm" . 687109))
     (push)
     (subr.gloc.of make-core-hashtable 0)
     (push)
     (extend . 2)
     (call
       (push.close
         (1 0)
         (push.iloc.1 . 0)
         (push.car.iloc (0 . 0) "./boot/macro/library.scm" . 687109)
         (push.cdr.iloc (0 . 0) "./boot/macro/library.scm" . 687109)
         (subr.gloc.of core-hashtable-set! 3 "./boot/macro/library.scm" . 687109)
         (push.iloc.1 . 1)
         (push.car.iloc (0 . 0) "./boot/macro/library.scm" . 687109)
         (push.cdr.iloc (0 . 0) "./boot/macro/library.scm" . 687109)
         (ret.subr.gloc.of core-hashtable-set! "./boot/macro/library.scm" . 687109))
       (push.iloc.1 . 3)
       (push.subr.gloc.of core-hashtable->alist 1 "./boot/macro/library.scm" . 687109)
       (apply.gloc.of for-each "./boot/macro/library.scm" . 687109))
     (push.const . #f)
     (extend . 1)
     (push.close
       (0 0)
       (call
         (touch.gloc.of current-immutable-identifiers)
         (apply.gloc.of current-immutable-identifiers "./boot/macro/library.scm" . 687109))
       (set.iloc (1 . 0) "./boot/macro/library.scm" . 687109)
       (touch.gloc.of current-immutable-identifiers)
       (push.iloc 3 . 2)
       (apply.gloc.of current-immutable-identifiers "./boot/macro/library.scm" . 687109))
     (push.close
       (0 0)
       (touch.gloc.of expand-top-level-program-body)
       (push.iloc 7 . 0)
       (push.iloc 4 . 0)
       (push.iloc 4 . 1)
       (push.iloc 5 . 0)
       (push.iloc 3 . 0)
       (push.iloc 3 . 1)
       (call
         (touch.gloc.of extend-env)
         (push.gloc.of private-primitives-environment)
         (call
           (touch.gloc.of |permute-env`2461*|)
           (push.iloc 2 . 0)
           (apply.gloc.of |permute-env`2461*| "./boot/macro/library.scm" . 687109))
         (push)
         (apply.gloc.of extend-env "./boot/macro/library.scm" . 687109))
       (push)
       (call
         (touch.gloc.of |permute-env`2461*|)
         (push.iloc 2 . 1)
         (apply.gloc.of |permute-env`2461*| "./boot/macro/library.scm" . 687109))
       (push)
       (apply.gloc.of expand-top-level-program-body "./boot/macro/library.scm" . 687109))
     (push.close
       (0 0)
       (touch.gloc.of current-immutable-identifiers)
       (push.iloc.1 . 0)
       (apply.gloc.of current-immutable-identifiers "./boot/macro/library.scm" . 687109))
     (apply.gloc.of |.dynamic-wind| "./boot/macro/library.scm" . 687109))
   (push.const . "top-level program")
   (push.const . "expected import form and top-level body")
   (call
     (touch.gloc.of abbreviated-take-form)
     (push.iloc.1 . 0)
     (push.const . 4)
     (push.const . 8)
     (apply.gloc.of abbreviated-take-form "./boot/macro/library.scm" . 687109))
   (push)
   (apply.gloc.of syntax-violation "./boot/macro/library.scm" . 687109))
 (set.gloc.of expand-top-level-program)
 (ret.const.unspec))
((close
   (3 0 . check-duplicate-definition)
   (call
     (touch.gloc.of unique-id-list?)
     (call
       (push.gloc.of car)
       (push.iloc.0 . 2)
       (apply.gloc.of map "./boot/macro/library.scm" . 751646))
     (push)
     (apply.gloc.of unique-id-list? "./boot/macro/library.scm" . 751629))
   (if.true.ret)
   (call
     (touch.gloc.of find-duplicates)
     (call
       (push.gloc.of car)
       (push.iloc.0 . 2)
       (apply.gloc.of map "./boot/macro/library.scm" . 752680))
     (push)
     (apply.gloc.of find-duplicates "./boot/macro/library.scm" . 752663))
   (push)
   (extend . 1)
   (push.iloc.0 . 0)
   (push.iloc.1 . 0)
   (push.subr.gloc.of assq 2 "./boot/macro/library.scm" . 753686)
   (extend . 1)
   (iloc.0 . 0)
   (if.true
     (push.iloc.1 . 0)
     (push.iloc 2 . 0)
     (push.subr.gloc.of reverse 1 "./boot/macro/library.scm" . 755758)
     (push.subr.gloc.of assq 2 "./boot/macro/library.scm" . 755749)
     (extend . 1)
     (push.iloc.1 . 0)
     (iloc.0 . 0)
     (if.eq?
       (push.iloc 2 . 0)
       (push.iloc 3 . 1)
       (push.subr.gloc.of assq 2 "./boot/macro/library.scm" . 757806)
       (extend . 1)
       (push.const . "top-level program")
       (push.const . "duplicate definitions")
       (call
         (touch.gloc.of annotate)
         (push.const . define-syntax)
         (push.car.iloc (0 . 0) "./boot/macro/library.scm" . 759891)
         (push.const ...)
         (push.subr.gloc.of |.cons*| 3 "./boot/macro/library.scm" . 759864)
         (push.iloc.0 . 0)
         (apply.gloc.of annotate "./boot/macro/library.scm" . 759864))
       (push)
       (call
         (touch.gloc.of annotate)
         (push.const . define)
         (iloc 2 . 0)
         (push.cons)
         (push.iloc 2 . 0)
         (apply.gloc.of annotate "./boot/macro/library.scm" . 760888))
       (push)
       (apply.gloc.of syntax-violation "./boot/macro/library.scm" . 758822))
     (push.const . "top-level program")
     (push.const . "duplicate definitions")
     (call
       (touch.gloc.of annotate)
       (push.const . define)
       (iloc.1 . 0)
       (push.cons)
       (push.iloc.1 . 0)
       (apply.gloc.of annotate "./boot/macro/library.scm" . 763958))
     (push)
     (call
       (touch.gloc.of annotate)
       (push.const . define)
       (iloc.0 . 0)
       (push.cons)
       (push.iloc.0 . 0)
       (apply.gloc.of annotate "./boot/macro/library.scm" . 764982))
     (push)
     (apply.gloc.of syntax-violation "./boot/macro/library.scm" . 762916))
   (push.iloc.1 . 0)
   (push.iloc 2 . 1)
   (push.subr.gloc.of assq 2 "./boot/macro/library.scm" . 765974)
   (extend . 1)
   (iloc.0 . 0)
   (if.true
     (push.iloc 2 . 0)
     (push.iloc 3 . 1)
     (push.subr.gloc.of reverse 1 "./boot/macro/library.scm" . 768046)
     (push.subr.gloc.of assq 2 "./boot/macro/library.scm" . 768037)
     (extend . 1)
     (push.iloc.1 . 0)
     (iloc.0 . 0)
     (if.eq?
       (push.iloc 3 . 0)
       (push.iloc 4 . 0)
       (push.subr.gloc.of assq 2 "./boot/macro/library.scm" . 770094)
       (extend . 1)
       (push.const . "top-level program")
       (push.const . "duplicate definitions")
       (call
         (touch.gloc.of annotate)
         (push.const . define-syntax)
         (push.car.iloc (2 . 0) "./boot/macro/library.scm" . 772179)
         (push.const ...)
         (push.subr.gloc.of |.cons*| 3 "./boot/macro/library.scm" . 772152)
         (push.iloc 2 . 0)
         (apply.gloc.of annotate "./boot/macro/library.scm" . 772152))
       (push)
       (call
         (touch.gloc.of annotate)
         (push.const . define)
         (iloc.0 . 0)
         (push.cons)
         (push.iloc.0 . 0)
         (apply.gloc.of annotate "./boot/macro/library.scm" . 773176))
       (push)
       (apply.gloc.of syntax-violation "./boot/macro/library.scm" . 771110))
     (push.const . "top-level program")
     (push.const . "duplicate definitions")
     (call
       (touch.gloc.of annotate)
       (push.const . define-syntax)
       (push.car.iloc (1 . 0) "./boot/macro/library.scm" . 776273)
       (push.const ...)
       (push.subr.gloc.of |.cons*| 3 "./boot/macro/library.scm" . 776246)
       (push.iloc.1 . 0)
       (apply.gloc.of annotate "./boot/macro/library.scm" . 776246))
     (push)
     (call
       (touch.gloc.of annotate)
       (push.const . define-syntax)
       (push.car.iloc (0 . 0) "./boot/macro/library.scm" . 777297)
       (push.const ...)
       (push.subr.gloc.of |.cons*| 3 "./boot/macro/library.scm" . 777270)
       (push.iloc.0 . 0)
       (apply.gloc.of annotate "./boot/macro/library.scm" . 777270))
     (push)
     (apply.gloc.of syntax-violation "./boot/macro/library.scm" . 775204))
   (push.const . "top-level program")
   (push.const . "duplicate definitions")
   (push.iloc 2 . 0)
   (apply.gloc.of syntax-violation "./boot/macro/library.scm" . 779286))
 (set.gloc.of |check-duplicate-definition`2503*|)
 (close
   (1 0)
   (push.const . |.require-scheme-library|)
   (push.const . quote)
   (push.iloc.0 . 0)
   (push.subr.gloc.of |.list| 2 (|.list| 'quote |dep`2548*|))
   (ret.subr.gloc.of |.list| "./boot/macro/library.scm" . 801817))
 (set.gloc.of |.L684|)
 (close
   (8 0 . expand-top-level-program-body)
   (extend.unbound . 7)
   (push.const . #f)
   (push.const)
   (push.close
     (2 0 . extend-env!)
     (call
       (call
         (touch.gloc.of macro?)
         (push.iloc.0 . 1)
         (apply.gloc.of macro? "./boot/macro/library.scm" . 739342))
       (if.false.ret)
       (call
         (touch.gloc.of acons)
         (push.iloc.0 . 0)
         (push.iloc.0 . 1)
         (push.iloc.1 . 1)
         (apply.gloc.of acons "./boot/macro/library.scm" . 740383))
       (set.iloc (1 . 1) "./boot/macro/library.scm" . 740366)
       (ret.const.unspec))
     (call
       (touch.gloc.of extend-env)
       (push.iloc.0 . 0)
       (iloc.0 . 1)
       (push.cons)
       (push.subr.gloc.of list 1 "./boot/macro/library.scm" . 741407)
       (push.iloc 2 . 6)
       (apply.gloc.of extend-env "./boot/macro/library.scm" . 741395))
     (set.iloc (2 . 6) "./boot/macro/library.scm" . 741385)
     (push.close
       (1 0)
       (push.cddr.iloc (0 . 0) "./boot/macro/library.scm" . 742441)
       (push.iloc 3 . 6)
       (ret.subr.gloc.of set-cdr! "./boot/macro/library.scm" . 742431))
     (push.iloc.1 . 1)
     (apply.gloc.of for-each "./boot/macro/library.scm" . 742409))
   (push.close
     (2 0 . extend-libenv!)
     (call
       (touch.gloc.of extend-env)
       (push.iloc.0 . 0)
       (iloc.0 . 1)
       (push.cons)
       (push.subr.gloc.of list 1 "./boot/macro/library.scm" . 746530)
       (push.iloc 2 . 7)
       (apply.gloc.of extend-env "./boot/macro/library.scm" . 746518))
     (set.iloc (2 . 7) "./boot/macro/library.scm" . 746505)
     (touch.gloc.of current-template-environment)
     (push.iloc 2 . 7)
     (apply.gloc.of current-template-environment "./boot/macro/library.scm" . 747529))
   (push.close+
     (4 0 . rewrite-body)
     (extend.enclose+
       (1 0 . rewrite-env)
       (extend.enclose+
         (2 0 . loop)
         (iloc.0 . 0)
         (if.null? (ret.iloc 0 . 1))
         (push.iloc.0 . 0)
         (push.subr.gloc.of caar 1 "./boot/macro/library.scm" . 788522)
         (subr.gloc.of uninterned-symbol? 1 "./boot/macro/library.scm" . 788502)
         (if.true
           (push.iloc.0 . 0)
           (push.subr.gloc.of cdar 1 "./boot/macro/library.scm" . 789536)
           (push.iloc 4 . 1)
           (subr.gloc.of assq 2 "./boot/macro/library.scm" . 789530)
           (if.true
             (push.cdr.iloc (0 . 0) "./boot/macro/library.scm" . 790560)
             (push.iloc.0 . 0)
             (push.subr.gloc.of caar 1 "./boot/macro/library.scm" . 790582)
             (push.iloc.0 . 0)
             (push.subr.gloc.of cdar 1 "./boot/macro/library.scm" . 790605)
             (push.iloc 6 . 7)
             (push.subr.gloc.of assq 2 "./boot/macro/library.scm" . 790599)
             (subr.gloc.of cddr 1 "./boot/macro/library.scm" . 790593)
             (push.cons)
             (iloc.0 . 1)
             (push.cons)
             (apply.iloc+ (1 . 0) "./boot/macro/library.scm" . 790554))
           (push.cdr.iloc (0 . 0) "./boot/macro/library.scm" . 791584)
           (push.car.iloc (0 . 0) "./boot/macro/library.scm" . 791600)
           (iloc.0 . 1)
           (push.cons)
           (apply.iloc+ (1 . 0) "./boot/macro/library.scm" . 791578))
         (push.iloc.0 . 0)
         (push.subr.gloc.of caar 1 "./boot/macro/library.scm" . 792604)
         (push.cdr.iloc (0 . 0) "./boot/macro/library.scm" . 792615)
         (subr.gloc.of assq 2 "./boot/macro/library.scm" . 792598)
         (if.true
           (push.cdr.iloc (0 . 0) "./boot/macro/library.scm" . 793628)
           (push.iloc.0 . 1)
           (apply.iloc+ (1 . 0) "./boot/macro/library.scm" . 793622))
         (push.cdr.iloc (0 . 0) "./boot/macro/library.scm" . 795676)
         (push.car.iloc (0 . 0) "./boot/macro/library.scm" . 795692)
         (iloc.0 . 1)
         (push.cons)
         (apply.iloc+ (1 . 0) "./boot/macro/library.scm" . 795670))
       (push.iloc.1 . 0)
       (push.subr.gloc.of reverse 1 "./boot/macro/library.scm" . 786461)
       (push.const)
       (apply.iloc+ (0 . 0) "./boot/macro/library.scm" . 787471))
     (call
       (touch.gloc.of |check-duplicate-definition`2503*|)
       (push.iloc.1 . 1)
       (push.iloc.1 . 2)
       (push.iloc.1 . 3)
       (apply.gloc.of |check-duplicate-definition`2503*| "./boot/macro/library.scm" . 797705))
     (call (push.iloc 3 . 6) (apply.iloc+ (0 . 0) "./boot/macro/library.scm" . 798740))
     (push)
     (extend . 1)
     (call
       (touch.gloc.of expand-each)
       (push.iloc 2 . 0)
       (push.iloc.0 . 0)
       (apply.gloc.of expand-each "./boot/macro/library.scm" . 799776))
     (push)
     (extend . 1)
     (call
       (push.gloc.of |.L684|)
       (push.iloc 5 . 5)
       (apply.gloc.of map "./boot/macro/library.scm" . 801812))
     (push)
     (call
       (push.close
         (1 0)
         (push.const . #f)
         (push.car.iloc (0 . 0) "./boot/macro/library.scm" . 806982)
         (extend . 2)
         (push.close
           (0 0)
           (call
             (touch.gloc.of current-top-level-exterior)
             (apply.gloc.of current-top-level-exterior "./boot/macro/library.scm" . 807965))
           (set.iloc (1 . 0) "./boot/macro/library.scm" . 807965)
           (touch.gloc.of current-top-level-exterior)
           (push.iloc.1 . 1)
           (apply.gloc.of current-top-level-exterior "./boot/macro/library.scm" . 807965))
         (push.close
           (0 0)
           (push.car.iloc (2 . 0) "./boot/macro/library.scm" . 807987)
           (push.iloc 6 . 3)
           (push.subr.gloc.of assq 2 "./boot/macro/library.scm" . 807981)
           (push.subr.gloc.of cdr 1 "./boot/macro/library.scm" . 807976)
           (call
             (touch.gloc.of expand-form)
             (push.cadr.iloc (2 . 0) "./boot/macro/library.scm" . 809013)
             (push.iloc 4 . 0)
             (apply.gloc.of expand-form "./boot/macro/library.scm" . 809000))
           (push)
           (extend . 2)
           (call
             (touch.gloc.of set-closure-comment!)
             (push.iloc.0 . 1)
             (push.iloc.0 . 0)
             (apply.gloc.of set-closure-comment! "./boot/macro/library.scm" . 810015))
           (push.const . define)
           (push.iloc.0 . 0)
           (push.iloc.0 . 1)
           (ret.subr.gloc.of |.list| "./boot/macro/library.scm" . 807965))
         (push.close
           (0 0)
           (touch.gloc.of current-top-level-exterior)
           (push.iloc.1 . 0)
           (apply.gloc.of current-top-level-exterior "./boot/macro/library.scm" . 807965))
         (apply.gloc.of |.dynamic-wind| "./boot/macro/library.scm" . 807965))
       (push.iloc 3 . 1)
       (apply.gloc.of map "./boot/macro/library.scm" . 805908))
     (push)
     (extend . 2)
     (call
       (call
         (touch.gloc.of check-rec*-contract-violation)
         (call
           (push.gloc.of cadr)
           (push.iloc.0 . 1)
           (apply.gloc.of map "./boot/macro/library.scm" . 813083))
         (push)
         (call
           (push.gloc.of caddr)
           (push.iloc.0 . 1)
           (apply.gloc.of map "./boot/macro/library.scm" . 814114))
         (push)
         (apply.gloc.of check-rec*-contract-violation "./boot/macro/library.scm" . 815128))
       (push)
       (extend . 1)
       (iloc.0 . 0)
       (if.true
         (call
           (touch.gloc.of any1)
           (push.close
             (1 0)
             (push.cdr.iloc (0 . 0) "./boot/macro/library.scm" . 817219)
             (car.iloc (1 . 0) "./boot/macro/library.scm" . 817227)
             (if.not.eq?.ret.const . #f)
             (push.iloc.0 . 0)
             (ret.subr.gloc.of car "./boot/macro/library.scm" . 817238))
           (push.iloc 5 . 3)
           (apply.gloc.of any1 "./boot/macro/library.scm" . 817191))
         (push)
         (extend . 1)
         (call
           (touch.gloc.of current-macro-expression)
           (push.const . #f)
           (apply.gloc.of current-macro-expression "./boot/macro/library.scm" . 818207))
         (push.const . #f)
         (push.const . "attempt to reference uninitialized variable ~u")
         (push.iloc.0 . 0)
         (push.subr.gloc.of format 2 "./boot/macro/library.scm" . 820273)
         (call
           (touch.gloc.of any1)
           (push.close
             (1 0)
             (call
               (touch.gloc.of check-rec-contract-violation)
               (push.iloc.1 . 0)
               (push.subr.gloc.of list 1 "./boot/macro/library.scm" . 822364)
               (push.iloc.0 . 0)
               (apply.gloc.of check-rec-contract-violation "./boot/macro/library.scm" . 822334))
             (if.false.ret)
             (touch.gloc.of annotate)
             (push.const . define)
             (iloc.0 . 0)
             (push.cons)
             (push.iloc.0 . 0)
             (apply.gloc.of annotate "./boot/macro/library.scm" . 823358))
           (push.iloc 6 . 1)
           (apply.gloc.of any1 "./boot/macro/library.scm" . 821297))
         (push)
         (apply.gloc.of syntax-violation "./boot/macro/library.scm" . 819231))
       (ret.const.unspec))
     (touch.gloc.of annotate)
     (push.const . begin)
     (push.iloc.0 . 0)
     (push.iloc.0 . 1)
     (push.iloc.1 . 0)
     (push.subr.gloc.of |.append| 2 (|.append| |rewrited-defs`2565*| |rewrited-body`2546*|))
     (subr.gloc.of
       |.append|
       2
       (|.append| |rewrited-depends`2565*| (|.append| |rewrited-defs`2565*| |rewrited-body`2546*|)))
     (push.cons)
     (push.iloc 6 . 0)
     (apply.gloc.of annotate "./boot/macro/library.scm" . 825359))
   (enclose . 5)
   (subr.gloc.of make-core-hashtable 0 "./boot/macro/library.scm" . 831524)
   (set.iloc (0 . 5))
   (call
     (push.const . 0)
     (extend . 1)
     (ret.close
       (0 0)
       (n+.iloc (1 . 0) 1 "./boot/macro/library.scm" . 836629)
       (set.iloc (1 . 0) "./boot/macro/library.scm" . 836619)
       (push.const . ".e~a")
       (push.iloc.1 . 0)
       (push.subr.gloc.of format 2 "./boot/macro/library.scm" . 837659)
       (ret.subr.gloc.of string->symbol "./boot/macro/library.scm" . 837643)))
   (set.iloc (0 . 6))
   (call
     (touch.gloc.of current-template-environment)
     (push.iloc.1 . 7)
     (apply.gloc.of current-template-environment "./boot/macro/library.scm" . 839685))
   (call
     (push.close
       (1 0)
       (push.iloc.1 . 5)
       (push.car.iloc (0 . 0) "./boot/macro/library.scm" . 840775)
       (push.const . #t)
       (ret.subr.gloc.of core-hashtable-set! "./boot/macro/library.scm" . 840731))
     (push.iloc.1 . 4)
     (apply.gloc.of for-each "./boot/macro/library.scm" . 840709))
   (extend.enclose
     (4 0 . loop)
     (iloc.0 . 0)
     (if.null?
       (push.iloc.0 . 0)
       (push.iloc.0 . 1)
       (push.subr.gloc.of reverse 1 "./boot/macro/library.scm" . 843806)
       (push.iloc.0 . 2)
       (push.subr.gloc.of reverse 1 "./boot/macro/library.scm" . 843821)
       (push.iloc.0 . 3)
       (apply.iloc+ (2 . 4) "./boot/macro/library.scm" . 843787))
     (call
       (iloc.0 . 0)
       (if.not.pair?.ret.const . #f)
       (car.iloc (0 . 0) "./boot/macro/library.scm" . 844843)
       (if.not.pair?.ret.const . #f)
       (push.iloc.0 . 0)
       (push.subr.gloc.of caar 1 "./boot/macro/library.scm" . 844864)
       (ret.subr.gloc.of symbol? "./boot/macro/library.scm" . 844855))
     (if.true
       (call
         (touch.gloc.of env-lookup)
         (push.iloc 3 . 6)
         (push.iloc.0 . 0)
         (push.subr.gloc.of caar 1 "./boot/macro/library.scm" . 845870)
         (apply.gloc.of env-lookup "./boot/macro/library.scm" . 845854))
       (push)
       (extend . 1)
       (push.gloc.of denote-begin)
       (iloc.0 . 0)
       (if.eq?
         (call
           (touch.gloc.of flatten-begin)
           (push.iloc.1 . 0)
           (push.iloc 4 . 6)
           (apply.gloc.of flatten-begin "./boot/macro/library.scm" . 847905))
         (push)
         (push.iloc.1 . 1)
         (push.iloc.1 . 2)
         (push.iloc.1 . 3)
         (apply.iloc (2 . 0) "./boot/macro/library.scm" . 847899))
       (push.gloc.of denote-define-syntax)
       (iloc.0 . 0)
       (if.eq?
         (call
           (iloc.1 . 0)
           (if.not.pair?.ret.const . #f)
           (car.iloc (1 . 0) (car |body`2588*|))
           (if.not.pair?.ret.const . #f)
           (push.iloc.1 . 0)
           (subr.gloc.of cdar 1 (cdar |body`2588*|))
           (if.not.pair?.ret.const . #f)
           (push.iloc.1 . 0)
           (subr.gloc.of cddar 1 (cddar |body`2588*|))
           (if.not.pair?.ret.const . #f)
           (push.iloc.1 . 0)
           (subr.gloc.of cdddar 1 (cdddar |body`2588*|))
           (if.not.null?.ret.const . #f)
           (push.cdr.iloc (1 . 0) (cdr |body`2588*|))
           (subr.gloc.of list? 1 (list? (cdr |body`2588*|)))
           (if.false.ret)
           (push.iloc.1 . 0)
           (push.subr.gloc.of cadar 1 (cadar |body`2588*|))
           (ret.subr.gloc.of symbol? (symbol? (cadar |body`2588*|))))
         (if.true
           (push.cdr.iloc (1 . 0) (cdr |body`2588*|))
           (push.iloc.1 . 0)
           (push.subr.gloc.of caddar 1 (caddar |body`2588*|))
           (push.iloc.1 . 0)
           (push.subr.gloc.of cadar 1 (cadar |body`2588*|))
           (extend . 3)
           (call
             (push.iloc 4 . 5)
             (push.iloc.0 . 2)
             (subr.gloc.of
               core-hashtable-contains?
               2
               (core-hashtable-contains? |ht-imported-immutables`2503*| |org`2596*|))
             (if.false.ret)
             (push.const . define-syntax)
             (push.const . "attempt to modify immutable binding")
             (push.car.iloc (2 . 0) (car |body`2588*|))
             (apply.gloc.of
               syntax-violation
               (syntax-violation
                 'define-syntax
                 "attempt to modify immutable binding"
                 (car |body`2588*|))))
           (push.close
             (0 0)
             (push.const . #f)
             (extend . 1)
             (push.close
               (0 0)
               (call
                 (touch.gloc.of current-template-environment)
                 (apply.gloc.of current-template-environment (current-template-environment)))
               (set.iloc (1 . 0) (set! |tmp1`2600`2602*| (current-template-environment)))
               (touch.gloc.of current-template-environment)
               (push.iloc 7 . 0)
               (apply.gloc.of
                 current-template-environment
                 (current-template-environment |initial-libenv`2503*|)))
             (push.close
               (0 0)
               (touch.gloc.of compile-macro)
               (push.car.iloc (5 . 0) (car |body`2588*|))
               (push.iloc 3 . 1)
               (push.iloc 8 . 6)
               (apply.gloc.of
                 compile-macro
                 (compile-macro (car |body`2588*|) |clause`2596*| |env`2502*|)))
             (push.close
               (0 0)
               (touch.gloc.of current-template-environment)
               (push.iloc.1 . 0)
               (apply.gloc.of
                 current-template-environment
                 (current-template-environment |tmp1`2600`2602*|)))
             (apply.gloc.of
               |.dynamic-wind|
               (|.dynamic-wind|
                 (lambda ()
                   (set! |tmp1`2600`2602*| (current-template-environment))
                   (current-template-environment |initial-libenv`2503*|))
                 (lambda () (compile-macro (car |body`2588*|) |clause`2596*| |env`2502*|))
                 (lambda () (current-template-environment |tmp1`2600`2602*|)))))
           (push.close
             (1 1)
             (call
               (touch.gloc.of generate-global-id)
               (push.iloc 6 . 1)
               (push.iloc.1 . 2)
               (apply.gloc.of
                 generate-global-id
                 (generate-global-id |library-id`2502*| |org`2596*|)))
             (push)
             (extend . 1)
             (call
               (push.iloc 2 . 2)
               (call
                 (touch.gloc.of make-import)
                 (push.iloc.0 . 0)
                 (apply.gloc.of make-import (make-import |new`2611*|)))
               (push)
               (apply.iloc (6 . 3) (|extend-libenv!`2503*| |org`2596*| (make-import |new`2611*|))))
             (push.iloc.1 . 0)
             (subr.gloc.of procedure? 1 (procedure? |code`2598*|))
             (if.true
               (call
                 (push.iloc 2 . 2)
                 (call
                   (touch.gloc.of make-macro)
                   (push.iloc.1 . 0)
                   (push.iloc 7 . 6)
                   (apply.gloc.of make-macro (make-macro |code`2598*| |env`2502*|)))
                 (push)
                 (apply.iloc
                   (6 . 2)
                   (|extend-env!`2503*| |org`2596*| (make-macro |code`2598*| |env`2502*|))))
               (push.iloc 2 . 0)
               (push.iloc 4 . 1)
               (push.iloc 2 . 2)
               (push.const . procedure)
               (push.car.iloc (1 . 1) (car |expr`2598*|))
               (push.subr.gloc.of list 3 (list |org`2596*| 'procedure (car |expr`2598*|)))
               (iloc 4 . 2)
               (push.cons)
               (call
                 (touch.gloc.of acons)
                 (push.iloc 2 . 2)
                 (push.iloc.0 . 0)
                 (push.iloc 4 . 3)
                 (apply.gloc.of acons (acons |org`2596*| |new`2611*| |renames`2588*|)))
               (push)
               (apply.iloc
                 (5 . 0)
                 (|loop`2587*|
                   |more`2596*|
                   |defs`2588*|
                   (cons (list |org`2596*| 'procedure (car |expr`2598*|)) |macros`2588*|)
                   (acons |org`2596*| |new`2611*| |renames`2588*|))))
             (call
               (touch.gloc.of macro-variable?)
               (push.iloc.1 . 0)
               (apply.gloc.of macro-variable? (macro-variable? |code`2598*|)))
             (if.true
               (call
                 (push.iloc 2 . 2)
                 (call
                   (touch.gloc.of make-macro-variable)
                   (push.cadr.iloc (1 . 0) (cadr |code`2598*|))
                   (push.iloc 7 . 6)
                   (apply.gloc.of
                     make-macro-variable
                     (make-macro-variable (cadr |code`2598*|) |env`2502*|)))
                 (push)
                 (apply.iloc
                   (6 . 2)
                   (|extend-env!`2503*|
                     |org`2596*|
                     (make-macro-variable (cadr |code`2598*|) |env`2502*|))))
               (push.iloc 2 . 0)
               (push.iloc 4 . 1)
               (push.iloc 2 . 2)
               (push.const . variable)
               (push.car.iloc (1 . 1) (car |expr`2598*|))
               (push.subr.gloc.of list 3 (list |org`2596*| 'variable (car |expr`2598*|)))
               (iloc 4 . 2)
               (push.cons)
               (call
                 (touch.gloc.of acons)
                 (push.iloc 2 . 2)
                 (push.iloc.0 . 0)
                 (push.iloc 4 . 3)
                 (apply.gloc.of acons (acons |org`2596*| |new`2611*| |renames`2588*|)))
               (push)
               (apply.iloc
                 (5 . 0)
                 (|loop`2587*|
                   |more`2596*|
                   |defs`2588*|
                   (cons (list |org`2596*| 'variable (car |expr`2598*|)) |macros`2588*|)
                   (acons |org`2596*| |new`2611*| |renames`2588*|))))
             (call
               (push.iloc 2 . 2)
               (call
                 (touch.gloc.of make-macro)
                 (push.iloc.1 . 0)
                 (push.iloc 7 . 6)
                 (apply.gloc.of make-macro (make-macro |code`2598*| |env`2502*|)))
               (push)
               (apply.iloc
                 (6 . 2)
                 (|extend-env!`2503*| |org`2596*| (make-macro |code`2598*| |env`2502*|))))
             (push.iloc 2 . 0)
             (push.iloc 4 . 1)
             (push.iloc 2 . 2)
             (push.const . template)
             (push.iloc.1 . 0)
             (push.subr.gloc.of list 3 (list |org`2596*| 'template |code`2598*|))
             (iloc 4 . 2)
             (push.cons)
             (call
               (touch.gloc.of acons)
               (push.iloc 2 . 2)
               (push.iloc.0 . 0)
               (push.iloc 4 . 3)
               (apply.gloc.of acons (acons |org`2596*| |new`2611*| |renames`2588*|)))
             (push)
             (apply.iloc
               (5 . 0)
               (|loop`2587*|
                 |more`2596*|
                 |defs`2588*|
                 (cons (list |org`2596*| 'template |code`2598*|) |macros`2588*|)
                 (acons |org`2596*| |new`2611*| |renames`2588*|))))
           (apply.gloc.of
             |.call-with-values|
             (|.call-with-values|
               (lambda ()
                 (let ((|tmp1`2600`2602*| #f))
                   (|.dynamic-wind|
                     (lambda ()
                       (set! |tmp1`2600`2602*| (current-template-environment))
                       (current-template-environment |initial-libenv`2503*|))
                     (lambda () (compile-macro (car |body`2588*|) |clause`2596*| |env`2502*|))
                     (lambda () (current-template-environment |tmp1`2600`2602*|)))))
               (lambda (|code`2598*| . |expr`2598*|)
                 (let ((|new`2611*| (generate-global-id |library-id`2502*| |org`2596*|)))
                   (|extend-libenv!`2503*| |org`2596*| (make-import |new`2611*|))
                   (if (procedure? |code`2598*|)
                       (begin
                         (|extend-env!`2503*| |org`2596*| (make-macro |code`2598*| |env`2502*|))
                         (|loop`2587*|
                           |more`2596*|
                           |defs`2588*|
                           (cons (list |org`2596*| 'procedure (car |expr`2598*|)) |macros`2588*|)
                           (acons |org`2596*| |new`2611*| |renames`2588*|)))
                       (if (macro-variable? |code`2598*|)
                           (begin
                             (|extend-env!`2503*|
                               |org`2596*|
                               (make-macro-variable (cadr |code`2598*|) |env`2502*|))
                             (|loop`2587*|
                               |more`2596*|
                               |defs`2588*|
                               (cons (list |org`2596*| 'variable (car |expr`2598*|)) |macros`2588*|)
                               (acons |org`2596*| |new`2611*| |renames`2588*|)))
                           (begin
                             (|extend-env!`2503*| |org`2596*| (make-macro |code`2598*| |env`2502*|))
                             (|loop`2587*|
                               |more`2596*|
                               |defs`2588*|
                               (cons (list |org`2596*| 'template |code`2598*|) |macros`2588*|)
                               (acons |org`2596*| |new`2611*| |renames`2588*|))))))))))
         (push.const . define-syntax)
         (push.const . "expected symbol and single expression")
         (push.car.iloc (1 . 0) (car |body`2588*|))
         (apply.gloc.of
           syntax-violation
           (syntax-violation
             'define-syntax
             "expected symbol and single expression"
             (car |body`2588*|))))
       (push.gloc.of denote-define)
       (iloc.0 . 0)
       (if.eq?
         (call
           (touch.gloc.of annotate)
           (call
             (touch.gloc.of desugar-define)
             (push.car.iloc (1 . 0) "./boot/macro/library.scm" . 872517)
             (apply.gloc.of desugar-define "./boot/macro/library.scm" . 872501))
           (push)
           (push.subr.gloc.of cdr 1 "./boot/macro/library.scm" . 872496)
           (push.car.iloc (1 . 0) "./boot/macro/library.scm" . 872530)
           (apply.gloc.of annotate "./boot/macro/library.scm" . 872486))
         (push)
         (extend . 1)
         (call
           (push.iloc 4 . 5)
           (push.car.iloc (0 . 0) "./boot/macro/library.scm" . 873555)
           (subr.gloc.of core-hashtable-contains? 2 "./boot/macro/library.scm" . 873506)
           (if.false.ret)
           (push.const . define)
           (push.const . "attempt to modify immutable binding")
           (push.car.iloc (2 . 0) "./boot/macro/library.scm" . 874594)
           (apply.gloc.of syntax-violation "./boot/macro/library.scm" . 874530))
         (push.car.iloc (0 . 0) "./boot/macro/library.scm" . 875560)
         (call
           (touch.gloc.of generate-global-id)
           (push.iloc 5 . 1)
           (push.car.iloc (0 . 0) "./boot/macro/library.scm" . 876615)
           (apply.gloc.of generate-global-id "./boot/macro/library.scm" . 876584))
         (push)
         (extend . 2)
         (call
           (push.iloc.0 . 0)
           (push.iloc.0 . 1)
           (apply.iloc (5 . 2) "./boot/macro/library.scm" . 877599))
         (call
           (push.iloc.0 . 0)
           (call
             (touch.gloc.of make-import)
             (push.iloc.0 . 1)
             (apply.gloc.of make-import "./boot/macro/library.scm" . 878643))
           (push)
           (apply.iloc (5 . 3) "./boot/macro/library.scm" . 878623))
         (push.cdr.iloc (3 . 0) "./boot/macro/library.scm" . 879653)
         (push.iloc.1 . 0)
         (iloc 3 . 1)
         (push.cons)
         (push.iloc 3 . 2)
         (call
           (touch.gloc.of acons)
           (push.iloc.0 . 0)
           (push.iloc.0 . 1)
           (push.iloc 3 . 3)
           (apply.gloc.of acons "./boot/macro/library.scm" . 879687))
         (push)
         (apply.iloc (4 . 0) "./boot/macro/library.scm" . 879647))
       (call
         (call
           (touch.gloc.of macro?)
           (push.iloc.0 . 0)
           (apply.gloc.of macro? "./boot/macro/library.scm" . 880671))
         (if.true.ret)
         (push.gloc.of denote-let-syntax)
         (iloc.0 . 0)
         (if.eq?.ret.const . #t)
         (push.gloc.of denote-letrec-syntax)
         (iloc.0 . 0)
         (ret.eq? "./boot/macro/library.scm" . 882719))
       (if.true
         (push.close
           (0 0)
           (touch.gloc.of expand-initial-forms)
           (push.car.iloc (2 . 0) "./boot/macro/library.scm" . 883786)
           (push.iloc 5 . 6)
           (apply.gloc.of expand-initial-forms "./boot/macro/library.scm" . 883764))
         (push.close
           (2 0)
           (iloc.0 . 1)
           (set.iloc (5 . 6) "./boot/macro/library.scm" . 884765)
           (call
             (touch.gloc.of flatten-begin)
             (push.iloc.0 . 0)
             (push.subr.gloc.of list 1 "./boot/macro/library.scm" . 885818)
             (push.iloc 5 . 6)
             (apply.gloc.of flatten-begin "./boot/macro/library.scm" . 885803))
           (push)
           (push.cdr.iloc (2 . 0) "./boot/macro/library.scm" . 885835)
           (push.subr.gloc.of append 2 "./boot/macro/library.scm" . 885795)
           (push.iloc 2 . 1)
           (push.iloc 2 . 2)
           (push.iloc 2 . 3)
           (apply.iloc (3 . 0) "./boot/macro/library.scm" . 885789))
         (apply.gloc.of |.call-with-values| "./boot/macro/library.scm" . 848923))
       (push.const . |.define|)
       (call (apply.iloc (3 . 6) "./boot/macro/library.scm" . 887858))
       (push)
       (push.car.iloc (1 . 0) "./boot/macro/library.scm" . 887876)
       (push.subr.gloc.of |.list| 3 "./boot/macro/library.scm" . 887841)
       (cdr.iloc (1 . 0) "./boot/macro/library.scm" . 887888)
       (push.cons)
       (push.iloc.1 . 1)
       (push.iloc.1 . 2)
       (push.iloc.1 . 3)
       (apply.iloc (2 . 0) "./boot/macro/library.scm" . 887835))
     (push.const . |.define|)
     (call (apply.iloc (2 . 6) "./boot/macro/library.scm" . 889897))
     (push)
     (push.car.iloc (0 . 0) "./boot/macro/library.scm" . 889915)
     (push.subr.gloc.of |.list| 3 "./boot/macro/library.scm" . 889880)
     (cdr.iloc (0 . 0) "./boot/macro/library.scm" . 889927)
     (push.cons)
     (push.iloc.0 . 1)
     (push.iloc.0 . 2)
     (push.iloc.0 . 3)
     (apply.iloc (1 . 0) "./boot/macro/library.scm" . 889874))
   (call
     (touch.gloc.of flatten-begin)
     (push.iloc 2 . 3)
     (push.iloc 2 . 6)
     (apply.gloc.of flatten-begin "./boot/macro/library.scm" . 841750))
   (push)
   (push.const)
   (push.const)
   (push.const)
   (apply.iloc (0 . 0) "./boot/macro/library.scm" . 842759))
 (set.gloc.of expand-top-level-program-body)
 (ret.const.unspec))

;
((close
   (2 0 . extend-env)
   (iloc.0 . 0)
   (if.null? (ret.iloc 0 . 1))
   (push.iloc.0 . 0)
   (push.iloc.0 . 1)
   (ret.subr.gloc.of append "./boot/macro/synenv.scm" . 9225))
 (set.gloc.of extend-env)
 (ret.const.unspec))
((close
   (2 0 . env-lookup)
   (call
     (iloc.0 . 1)
     (if.symbol?.ret.const . #t)
     (push.const . "internal error: env-lookup: expect symbol but got ~s")
     (push.iloc.0 . 1)
     (apply.gloc.of scheme-error "./boot/macro/synenv.scm" . 14345))
   (push.iloc.0 . 1)
   (push.iloc.0 . 0)
   (push.subr.gloc.of assq 2 "./boot/macro/synenv.scm" . 15372)
   (extend . 1)
   (iloc.0 . 0)
   (if.true
     (call
       (touch.gloc.of import?)
       (push.cdr.iloc (0 . 0) "./boot/macro/synenv.scm" . 17441)
       (apply.gloc.of import? "./boot/macro/synenv.scm" . 17432))
     (if.true
       (push.cddr.iloc (0 . 0) "./boot/macro/synenv.scm" . 18470)
       (extend . 1)
       (subr.gloc.of current-macro-environment 0)
       (push)
       (push.iloc.0 . 0)
       (push.iloc.0 . 0)
       (ret.subr.gloc.of core-hashtable-ref "./boot/macro/synenv.scm" . 19482))
     (push.iloc.0 . 0)
     (ret.subr.gloc.of cdr "./boot/macro/synenv.scm" . 21528))
   (subr.gloc.of current-macro-environment 0)
   (push)
   (push.iloc.1 . 1)
   (push.iloc.1 . 1)
   (ret.subr.gloc.of core-hashtable-ref "./boot/macro/synenv.scm" . 23564))
 (set.gloc.of env-lookup)
 (ret.const.unspec))
((close
   (2 0 . env-delete!)
   (push.iloc.0 . 1)
   (push.iloc.0 . 0)
   (push.subr.gloc.of assq 2 "./boot/macro/synenv.scm" . 27660)
   (extend . 1)
   (iloc.0 . 0)
   (if.true
     (push.iloc.0 . 0)
     (push.const . #f)
     (subr.gloc.of set-car! 2 "./boot/macro/synenv.scm" . 29713)
     (push.iloc.0 . 0)
     (push.const . no-use)
     (ret.subr.gloc.of set-cdr! "./boot/macro/synenv.scm" . 30737))
   (ret.const.unspec))
 (set.gloc.of env-delete!)
 (ret.const.unspec))
((close
   (2 0 . unrename-syntax)
   (extend.enclose
     (1 0 . loop)
     (iloc.0 . 0)
     (if.pair?
       (call
         (push.car.iloc (0 . 0) "./boot/macro/synenv.scm" . 36894)
         (apply.iloc (1 . 0) "./boot/macro/synenv.scm" . 36888))
       (push)
       (call
         (push.cdr.iloc (0 . 0) "./boot/macro/synenv.scm" . 36916)
         (apply.iloc (1 . 0) "./boot/macro/synenv.scm" . 36910))
       (push)
       (extend . 2)
       (call
         (push.iloc.0 . 0)
         (car.iloc (1 . 0) "./boot/macro/synenv.scm" . 37924)
         (if.not.eq?.ret.const . #f)
         (push.iloc.0 . 1)
         (cdr.iloc (1 . 0) "./boot/macro/synenv.scm" . 37943)
         (ret.eq? "./boot/macro/synenv.scm" . 37935))
       (if.true (ret.iloc 1 . 0))
       (call
         (touch.gloc.of annotated?)
         (push.iloc.1 . 0)
         (apply.gloc.of annotated? "./boot/macro/synenv.scm" . 38935))
       (if.true
         (touch.gloc.of annotate)
         (push.iloc.0 . 0)
         (iloc.0 . 1)
         (push.cons)
         (push.iloc.1 . 0)
         (apply.gloc.of annotate "./boot/macro/synenv.scm" . 38952))
       (push.iloc.0 . 0)
       (iloc.0 . 1)
       (ret.cons "./boot/macro/synenv.scm" . 39964))
     (call
       (touch.gloc.of renamed-id?)
       (push.iloc.0 . 0)
       (apply.gloc.of renamed-id? "./boot/macro/synenv.scm" . 40974))
     (if.true
       (call
         (touch.gloc.of env-lookup)
         (push.iloc 2 . 1)
         (push.iloc.0 . 0)
         (apply.gloc.of env-lookup "./boot/macro/synenv.scm" . 42010))
       (push)
       (extend . 1)
       (call
         (touch.gloc.of special?)
         (push.iloc.0 . 0)
         (apply.gloc.of special? "./boot/macro/synenv.scm" . 43031))
       (if.true
         (push.iloc.0 . 0)
         (gloc.of denote-_)
         (if.eq?.ret.const . _)
         (touch.gloc.of core-primitive-name)
         (call
           (touch.gloc.of original-id)
           (push.iloc.1 . 0)
           (apply.gloc.of original-id "./boot/macro/synenv.scm" . 46131))
         (push)
         (apply.gloc.of core-primitive-name "./boot/macro/synenv.scm" . 46110))
       (call
         (touch.gloc.of macro?)
         (push.iloc.0 . 0)
         (apply.gloc.of macro? "./boot/macro/synenv.scm" . 47127))
       (if.true
         (call
           (touch.gloc.of original-id)
           (push.iloc.1 . 0)
           (apply.gloc.of original-id "./boot/macro/synenv.scm" . 48161))
         (push)
         (extend . 1)
         (push.iloc.1 . 0)
         (call
           (touch.gloc.of env-lookup)
           (push.iloc 4 . 1)
           (push.iloc.0 . 0)
           (apply.gloc.of env-lookup "./boot/macro/synenv.scm" . 49194))
         (if.eq? (ret.iloc 0 . 0))
         (push.iloc.1 . 0)
         (subr.gloc.of current-macro-environment 0)
         (push)
         (push.iloc.0 . 0)
         (push.const . #f)
         (subr.gloc.of core-hashtable-ref 3 "./boot/macro/synenv.scm" . 50218)
         (if.eq? (ret.iloc 0 . 0))
         (ret.iloc 2 . 0))
       (ret.iloc 1 . 0))
     (push.iloc.0 . 0)
     (subr.gloc.of vector? 1 "./boot/macro/synenv.scm" . 53262)
     (if.true
       (call
         (push.iloc.1 . 0)
         (push.iloc.0 . 0)
         (push.subr.gloc.of vector->list 1 "./boot/macro/synenv.scm" . 54310)
         (apply.gloc.of map "./boot/macro/synenv.scm" . 54300))
       (push)
       (ret.subr.gloc.of list->vector "./boot/macro/synenv.scm" . 54286))
     (ret.iloc 0 . 0))
   (push.iloc.1 . 0)
   (apply.iloc (0 . 0) "./boot/macro/synenv.scm" . 35847))
 (set.gloc.of unrename-syntax)
 (ret.const.unspec))
((close
   (2 0 . lookup-lexical-name)
   (call
     (touch.gloc.of env-lookup)
     (push.iloc.0 . 1)
     (push.iloc.0 . 0)
     (apply.gloc.of env-lookup "./boot/macro/synenv.scm" . 59409))
   (push)
   (extend . 1)
   (iloc.0 . 0)
   (if.symbol? (ret.iloc 0 . 0))
   (call
     (call
       (touch.gloc.of macro?)
       (push.iloc.0 . 0)
       (apply.gloc.of macro? "./boot/macro/synenv.scm" . 61459))
     (if.false.ret)
     (push.iloc.0 . 0)
     (push.iloc.1 . 1)
     (ret.subr.gloc.of assq "./boot/macro/synenv.scm" . 61473))
   (push)
   (extend . 1)
   (iloc.0 . 0)
   (if.true (push.iloc.0 . 0) (ret.subr.gloc.of cdr "./boot/macro/synenv.scm" . 61454))
   (ret.iloc 2 . 0))
 (set.gloc.of lookup-lexical-name)
 (ret.const.unspec))
((close
   (1 0 . unrename-primitive-id)
   (call
     (push.iloc.0 . 0)
     (subr.gloc.of current-primitive-prefix 0)
     (push)
     (push.subr.gloc.of symbol-contains 2 "./boot/macro/synenv.scm" . 69655)
     (const . 0)
     (if.not.eq?.ret.const . #f)
     (subr.gloc.of current-variable-environment 0)
     (push)
     (push.iloc.0 . 0)
     (ret.subr.gloc.of core-hashtable-contains? "./boot/macro/synenv.scm" . 70674))
   (if.true
     (push.iloc.0 . 0)
     (push.subr.gloc.of symbol->string 1 "./boot/macro/synenv.scm" . 71705)
     (extend . 1)
     (push.iloc.0 . 0)
     (push.const . 1)
     (push.iloc.0 . 0)
     (push.subr.gloc.of string-length 1 "./boot/macro/synenv.scm" . 72753)
     (push.subr.gloc.of substring 3 "./boot/macro/synenv.scm" . 72735)
     (ret.subr.gloc.of string->symbol "./boot/macro/synenv.scm" . 72719))
   (ret.iloc 0 . 0))
 (set.gloc.of |unrename-primitive-id`2658*|)
 (close
   (2 0 . lookup-topmost-subst)
   (iloc.0 . 0)
   (if.symbol?
     (call
       (touch.gloc.of env-lookup)
       (push.iloc.0 . 1)
       (push.iloc.0 . 0)
       (apply.gloc.of env-lookup "./boot/macro/synenv.scm" . 76821))
     (push)
     (extend . 1)
     (push.iloc.0 . 0)
     (subr.gloc.of uninterned-symbol? 1 "./boot/macro/synenv.scm" . 77842)
     (if.true
       (call
         (touch.gloc.of local-macro-symbol?)
         (push.iloc.0 . 0)
         (apply.gloc.of local-macro-symbol? "./boot/macro/synenv.scm" . 78873))
       (if.true (ret.iloc 0 . 0))
       (call
         (touch.gloc.of renamed-variable-id?)
         (push.iloc.0 . 0)
         (apply.gloc.of renamed-variable-id? "./boot/macro/synenv.scm" . 79897))
       (if.true (ret.iloc 0 . 0))
       (push.iloc.1 . 0)
       (iloc.0 . 0)
       (if.eq?
         (touch.gloc.of |unrename-primitive-id`2658*|)
         (call
           (touch.gloc.of original-id)
           (push.iloc.1 . 0)
           (apply.gloc.of original-id "./boot/macro/synenv.scm" . 81968))
         (push)
         (apply.gloc.of |unrename-primitive-id`2658*| "./boot/macro/synenv.scm" . 81945))
       (touch.gloc.of lookup-topmost-subst)
       (push.iloc.0 . 0)
       (push.iloc.1 . 1)
       (apply.gloc.of lookup-topmost-subst "./boot/macro/synenv.scm" . 83993))
     (iloc.0 . 0)
     (if.symbol?
       (touch.gloc.of |unrename-primitive-id`2658*|)
       (call
         (touch.gloc.of current-top-level-renames)
         (apply.gloc.of current-top-level-renames "./boot/macro/synenv.scm" . 86077))
       (push)
       (push.iloc.0 . 0)
       (push.iloc.0 . 0)
       (push.subr.gloc.of core-hashtable-ref 3 "./boot/macro/synenv.scm" . 86057)
       (apply.gloc.of |unrename-primitive-id`2658*| "./boot/macro/synenv.scm" . 86034))
     (call
       (touch.gloc.of unbound?)
       (push.iloc.0 . 0)
       (apply.gloc.of unbound? "./boot/macro/synenv.scm" . 87058))
     (if.true
       (touch.gloc.of |unrename-primitive-id`2658*|)
       (call
         (touch.gloc.of original-id)
         (push.iloc.1 . 0)
         (apply.gloc.of original-id "./boot/macro/synenv.scm" . 88105))
       (push)
       (apply.gloc.of |unrename-primitive-id`2658*| "./boot/macro/synenv.scm" . 88082))
     (call
       (call
         (touch.gloc.of macro?)
         (push.iloc.0 . 0)
         (apply.gloc.of macro? "./boot/macro/synenv.scm" . 89111))
       (if.false.ret)
       (push.iloc.0 . 0)
       (push.iloc.1 . 1)
       (ret.subr.gloc.of assq "./boot/macro/synenv.scm" . 89125))
     (push)
     (extend . 1)
     (iloc.0 . 0)
     (if.true (push.iloc.0 . 0) (ret.subr.gloc.of cdr "./boot/macro/synenv.scm" . 89106))
     (ret.iloc 1 . 0))
   (call
     (touch.gloc.of syntax-object-renames)
     (push.iloc.0 . 0)
     (apply.gloc.of syntax-object-renames "./boot/macro/synenv.scm" . 91156))
   (push)
   (extend . 1)
   (iloc.0 . 0)
   (if.pair?
     (cdr.iloc (0 . 0) "./boot/macro/synenv.scm" . 93212)
     (if.symbol?
       (touch.gloc.of lookup-topmost-subst)
       (push.cdr.iloc (0 . 0) "./boot/macro/synenv.scm" . 94249)
       (push.iloc.1 . 1)
       (apply.gloc.of lookup-topmost-subst "./boot/macro/synenv.scm" . 94227))
     (push.iloc.0 . 0)
     (ret.subr.gloc.of cdr "./boot/macro/synenv.scm" . 95251))
   (touch.gloc.of lookup-topmost-subst)
   (call
     (touch.gloc.of syntax-object-expr)
     (push.iloc.1 . 0)
     (apply.gloc.of syntax-object-expr "./boot/macro/synenv.scm" . 96293))
   (push)
   (push.iloc.1 . 1)
   (apply.gloc.of lookup-topmost-subst "./boot/macro/synenv.scm" . 96271))
 (set.gloc.of lookup-topmost-subst)
 (ret.const.unspec))
((close
   (2 0 . free-id=?)
   (call
     (touch.gloc.of lookup-topmost-subst)
     (push.iloc.0 . 0)
     (call
       (touch.gloc.of current-transformer-environment)
       (apply.gloc.of current-transformer-environment "./boot/macro/synenv.scm" . 100388))
     (push)
     (apply.gloc.of lookup-topmost-subst "./boot/macro/synenv.scm" . 100362))
   (push)
   (call
     (touch.gloc.of lookup-topmost-subst)
     (push.iloc.0 . 1)
     (call
       (touch.gloc.of current-expansion-environment)
       (apply.gloc.of current-expansion-environment "./boot/macro/synenv.scm" . 101412))
     (push)
     (apply.gloc.of lookup-topmost-subst "./boot/macro/synenv.scm" . 101386))
   (ret.eq? "./boot/macro/synenv.scm" . 100357))
 (set.gloc.of free-id=?)
 (ret.const.unspec))
((close
   (1 0 . make-import)
   (push.const . import)
   (iloc.0 . 0)
   (ret.cons "./boot/macro/synenv.scm" . 105477))
 (set.gloc.of make-import)
 (ret.const.unspec))
((close (0 0 . make-unbound) (ret.const unbound)) (set.gloc.of make-unbound) (ret.const.unspec))
((close
   (1 0 . make-out-of-context)
   (iloc.0 . 0)
   (if.true
     (push.const . out-of-context)
     (iloc.0 . 0)
     (ret.cons "./boot/macro/synenv.scm" . 114697))
   (ret.const out-of-context . #f))
 (set.gloc.of make-out-of-context)
 (ret.const.unspec))
((close
   (1 0 . make-pattern-variable)
   (push.const . pattern-variable)
   (iloc.0 . 0)
   (ret.cons "./boot/macro/synenv.scm" . 119813))
 (set.gloc.of make-pattern-variable)
 (ret.const.unspec))
((close
   (2 0 . make-macro)
   (push.const . macro)
   (push.iloc.0 . 0)
   (push.iloc.0 . 1)
   (ret.subr.gloc.of cons* "./boot/macro/synenv.scm" . 123909))
 (set.gloc.of make-macro)
 (ret.const.unspec))
((close
   (2 0 . make-macro-variable)
   (push.const . macro-variable)
   (push.iloc.0 . 0)
   (push.iloc.0 . 1)
   (ret.subr.gloc.of cons* "./boot/macro/synenv.scm" . 128005))
 (set.gloc.of make-macro-variable)
 (ret.const.unspec))
((close
   (1 0 . make-special)
   (push.const . special)
   (iloc.0 . 0)
   (ret.cons "./boot/macro/synenv.scm" . 132101))
 (set.gloc.of make-special)
 (ret.const.unspec))
((close
   (1 0 . import?)
   (iloc.0 . 0)
   (if.not.pair?.ret.const . #f)
   (push.car.iloc (0 . 0) "./boot/macro/synenv.scm" . 137231)
   (const . import)
   (ret.eq? "./boot/macro/synenv.scm" . 137226))
 (set.gloc.of import?)
 (ret.const.unspec))
((close
   (1 0 . unbound?)
   (iloc.0 . 0)
   (if.not.pair?.ret.const . #f)
   (push.car.iloc (0 . 0) "./boot/macro/synenv.scm" . 142351)
   (const . unbound)
   (ret.eq? "./boot/macro/synenv.scm" . 142346))
 (set.gloc.of unbound?)
 (ret.const.unspec))
((close
   (1 0 . out-of-context?)
   (iloc.0 . 0)
   (if.not.pair?.ret.const . #f)
   (push.car.iloc (0 . 0) "./boot/macro/synenv.scm" . 147471)
   (const . out-of-context)
   (ret.eq? "./boot/macro/synenv.scm" . 147466))
 (set.gloc.of out-of-context?)
 (ret.const.unspec))
((close
   (1 0 . macro?)
   (iloc.0 . 0)
   (if.not.pair?.ret.const . #f)
   (push.car.iloc (0 . 0) "./boot/macro/synenv.scm" . 152595)
   (const . macro)
   (if.eq?.ret.const . #t)
   (push.car.iloc (0 . 0) "./boot/macro/synenv.scm" . 153619)
   (const . macro-variable)
   (ret.eq? "./boot/macro/synenv.scm" . 153614))
 (set.gloc.of macro?)
 (ret.const.unspec))
((close
   (1 0 . macro-variable?)
   (iloc.0 . 0)
   (if.not.pair?.ret.const . #f)
   (push.car.iloc (0 . 0) "./boot/macro/synenv.scm" . 158735)
   (const . macro-variable)
   (ret.eq? "./boot/macro/synenv.scm" . 158730))
 (set.gloc.of macro-variable?)
 (ret.const.unspec))
((close
   (1 0 . pattern-variable?)
   (iloc.0 . 0)
   (if.not.pair?.ret.const . #f)
   (push.car.iloc (0 . 0) "./boot/macro/synenv.scm" . 163855)
   (const . pattern-variable)
   (ret.eq? "./boot/macro/synenv.scm" . 163850))
 (set.gloc.of pattern-variable?)
 (ret.const.unspec))
((close
   (1 0 . special?)
   (iloc.0 . 0)
   (if.not.pair?.ret.const . #f)
   (push.car.iloc (0 . 0) "./boot/macro/synenv.scm" . 168975)
   (const . special)
   (ret.eq? "./boot/macro/synenv.scm" . 168970))
 (set.gloc.of special?)
 (ret.const.unspec))
((close
   (2 0 . unexpected-unquote)
   (push.car.iloc (0 . 0) "./boot/macro/synenv.scm" . 173079)
   (push.const . "unquote appear outside of quasiquote")
   (push.iloc.0 . 0)
   (apply.gloc.of syntax-violation "./boot/macro/synenv.scm" . 173061))
 (set.gloc.of unexpected-unquote)
 (ret.const.unspec))
((close
   (2 0 . unexpected-unquote-splicing)
   (push.car.iloc (0 . 0) "./boot/macro/synenv.scm" . 177175)
   (push.const . "unquote-splicing appear outside of quasiquote")
   (push.iloc.0 . 0)
   (apply.gloc.of syntax-violation "./boot/macro/synenv.scm" . 177157))
 (set.gloc.of unexpected-unquote-splicing)
 (ret.const.unspec))
((close
   (2 0 . unexpected-auxiliary-syntax)
   (push.car.iloc (0 . 0) "./boot/macro/synenv.scm" . 181271)
   (push.const . "misplaced auxiliary syntactic keyword")
   (push.iloc.0 . 0)
   (apply.gloc.of syntax-violation "./boot/macro/synenv.scm" . 181253))
 (set.gloc.of unexpected-auxiliary-syntax)
 (ret.const.unspec))
((close
   (2 0 . unexpected-syntax)
   (push.car.iloc (0 . 0) "./boot/macro/synenv.scm" . 185367)
   (push.const . "misplaced syntactic keyword")
   (push.iloc.0 . 0)
   (apply.gloc.of syntax-violation "./boot/macro/synenv.scm" . 185349))
 (set.gloc.of unexpected-syntax)
 (ret.const.unspec))
((subr.gloc.of make-core-hashtable 0 "./boot/macro/synenv.scm" . 187410)
 (set.gloc.of core-env)
 (ret.const.unspec))
((close
   (2 0 . init-core-macro)
   (push.gloc.of core-env)
   (push.iloc.0 . 0)
   (push.iloc.0 . 1)
   (subr.gloc.of core-hashtable-set! 3 "./boot/macro/synenv.scm" . 193543)
   (push.gloc.of core-env)
   (call
     (touch.gloc.of core-primitive-name)
     (push.iloc.0 . 0)
     (apply.gloc.of core-primitive-name "./boot/macro/synenv.scm" . 194597))
   (push)
   (push.iloc.0 . 1)
   (ret.subr.gloc.of core-hashtable-set! "./boot/macro/synenv.scm" . 194567))
 (set.gloc.of |init-core-macro`2707*|)
 (call
   (touch.gloc.of |init-core-macro`2707*|)
   (push.const . lambda)
   (call
     (touch.gloc.of make-special)
     (push.gloc.of expand-lambda)
     (apply.gloc.of make-special "./boot/macro/synenv.scm" . 196647))
   (push)
   (apply.gloc.of |init-core-macro`2707*| "./boot/macro/synenv.scm" . 196611))
 (call
   (touch.gloc.of |init-core-macro`2707*|)
   (push.const . quote)
   (call
     (touch.gloc.of make-special)
     (push.gloc.of expand-quote)
     (apply.gloc.of make-special "./boot/macro/synenv.scm" . 197671))
   (push)
   (apply.gloc.of |init-core-macro`2707*| "./boot/macro/synenv.scm" . 197635))
 (call
   (touch.gloc.of |init-core-macro`2707*|)
   (push.const . if)
   (call
     (touch.gloc.of make-special)
     (push.gloc.of expand-if)
     (apply.gloc.of make-special "./boot/macro/synenv.scm" . 198695))
   (push)
   (apply.gloc.of |init-core-macro`2707*| "./boot/macro/synenv.scm" . 198659))
 (call
   (touch.gloc.of |init-core-macro`2707*|)
   (push.const . set!)
   (call
     (touch.gloc.of make-special)
     (push.gloc.of expand-set!)
     (apply.gloc.of make-special "./boot/macro/synenv.scm" . 199719))
   (push)
   (apply.gloc.of |init-core-macro`2707*| "./boot/macro/synenv.scm" . 199683))
 (call
   (touch.gloc.of |init-core-macro`2707*|)
   (push.const . define-syntax)
   (call
     (touch.gloc.of make-special)
     (push.gloc.of expand-define-syntax)
     (apply.gloc.of make-special "./boot/macro/synenv.scm" . 200743))
   (push)
   (apply.gloc.of |init-core-macro`2707*| "./boot/macro/synenv.scm" . 200707))
 (call
   (touch.gloc.of |init-core-macro`2707*|)
   (push.const . let-syntax)
   (call
     (touch.gloc.of make-special)
     (push.gloc.of expand-let-syntax)
     (apply.gloc.of make-special "./boot/macro/synenv.scm" . 201767))
   (push)
   (apply.gloc.of |init-core-macro`2707*| "./boot/macro/synenv.scm" . 201731))
 (call
   (touch.gloc.of |init-core-macro`2707*|)
   (push.const . letrec-syntax)
   (call
     (touch.gloc.of make-special)
     (push.gloc.of expand-letrec-syntax)
     (apply.gloc.of make-special "./boot/macro/synenv.scm" . 202791))
   (push)
   (apply.gloc.of |init-core-macro`2707*| "./boot/macro/synenv.scm" . 202755))
 (call
   (touch.gloc.of |init-core-macro`2707*|)
   (push.const . begin)
   (call
     (touch.gloc.of make-special)
     (push.gloc.of expand-begin)
     (apply.gloc.of make-special "./boot/macro/synenv.scm" . 203815))
   (push)
   (apply.gloc.of |init-core-macro`2707*| "./boot/macro/synenv.scm" . 203779))
 (call
   (touch.gloc.of |init-core-macro`2707*|)
   (push.const . define)
   (call
     (touch.gloc.of make-special)
     (push.gloc.of expand-define)
     (apply.gloc.of make-special "./boot/macro/synenv.scm" . 204839))
   (push)
   (apply.gloc.of |init-core-macro`2707*| "./boot/macro/synenv.scm" . 204803))
 (call
   (touch.gloc.of |init-core-macro`2707*|)
   (push.const . quasiquote)
   (call
     (touch.gloc.of make-special)
     (push.gloc.of expand-quasiquote)
     (apply.gloc.of make-special "./boot/macro/synenv.scm" . 205863))
   (push)
   (apply.gloc.of |init-core-macro`2707*| "./boot/macro/synenv.scm" . 205827))
 (call
   (touch.gloc.of |init-core-macro`2707*|)
   (push.const . let)
   (call
     (touch.gloc.of make-special)
     (push.gloc.of expand-let)
     (apply.gloc.of make-special "./boot/macro/synenv.scm" . 206887))
   (push)
   (apply.gloc.of |init-core-macro`2707*| "./boot/macro/synenv.scm" . 206851))
 (call
   (touch.gloc.of |init-core-macro`2707*|)
   (push.const . letrec)
   (call
     (touch.gloc.of make-special)
     (push.gloc.of expand-letrec)
     (apply.gloc.of make-special "./boot/macro/synenv.scm" . 207911))
   (push)
   (apply.gloc.of |init-core-macro`2707*| "./boot/macro/synenv.scm" . 207875))
 (call
   (touch.gloc.of |init-core-macro`2707*|)
   (push.const . let*)
   (call
     (touch.gloc.of make-special)
     (push.gloc.of expand-let*)
     (apply.gloc.of make-special "./boot/macro/synenv.scm" . 208935))
   (push)
   (apply.gloc.of |init-core-macro`2707*| "./boot/macro/synenv.scm" . 208899))
 (call
   (touch.gloc.of |init-core-macro`2707*|)
   (push.const . cond)
   (call
     (touch.gloc.of make-special)
     (push.gloc.of expand-cond)
     (apply.gloc.of make-special "./boot/macro/synenv.scm" . 209959))
   (push)
   (apply.gloc.of |init-core-macro`2707*| "./boot/macro/synenv.scm" . 209923))
 (call
   (touch.gloc.of |init-core-macro`2707*|)
   (push.const . case)
   (call
     (touch.gloc.of make-special)
     (push.gloc.of expand-case)
     (apply.gloc.of make-special "./boot/macro/synenv.scm" . 210983))
   (push)
   (apply.gloc.of |init-core-macro`2707*| "./boot/macro/synenv.scm" . 210947))
 (call
   (touch.gloc.of |init-core-macro`2707*|)
   (push.const . do)
   (call
     (touch.gloc.of make-special)
     (push.gloc.of expand-do)
     (apply.gloc.of make-special "./boot/macro/synenv.scm" . 212007))
   (push)
   (apply.gloc.of |init-core-macro`2707*| "./boot/macro/synenv.scm" . 211971))
 (call
   (touch.gloc.of |init-core-macro`2707*|)
   (push.const . and)
   (call
     (touch.gloc.of make-special)
     (push.gloc.of expand-and)
     (apply.gloc.of make-special "./boot/macro/synenv.scm" . 213031))
   (push)
   (apply.gloc.of |init-core-macro`2707*| "./boot/macro/synenv.scm" . 212995))
 (call
   (touch.gloc.of |init-core-macro`2707*|)
   (push.const . or)
   (call
     (touch.gloc.of make-special)
     (push.gloc.of expand-or)
     (apply.gloc.of make-special "./boot/macro/synenv.scm" . 214055))
   (push)
   (apply.gloc.of |init-core-macro`2707*| "./boot/macro/synenv.scm" . 214019))
 (call
   (touch.gloc.of |init-core-macro`2707*|)
   (push.const . letrec*)
   (call
     (touch.gloc.of make-special)
     (push.gloc.of expand-letrec*)
     (apply.gloc.of make-special "./boot/macro/synenv.scm" . 215079))
   (push)
   (apply.gloc.of |init-core-macro`2707*| "./boot/macro/synenv.scm" . 215043))
 (call
   (touch.gloc.of |init-core-macro`2707*|)
   (push.const . library)
   (call
     (touch.gloc.of make-special)
     (push.gloc.of expand-library)
     (apply.gloc.of make-special "./boot/macro/synenv.scm" . 216103))
   (push)
   (apply.gloc.of |init-core-macro`2707*| "./boot/macro/synenv.scm" . 216067))
 (call
   (touch.gloc.of |init-core-macro`2707*|)
   (push.const . let*-values)
   (call
     (touch.gloc.of make-special)
     (push.gloc.of expand-let*-values)
     (apply.gloc.of make-special "./boot/macro/synenv.scm" . 217127))
   (push)
   (apply.gloc.of |init-core-macro`2707*| "./boot/macro/synenv.scm" . 217091))
 (call
   (touch.gloc.of |init-core-macro`2707*|)
   (push.const . let-values)
   (call
     (touch.gloc.of make-special)
     (push.gloc.of expand-let-values)
     (apply.gloc.of make-special "./boot/macro/synenv.scm" . 218151))
   (push)
   (apply.gloc.of |init-core-macro`2707*| "./boot/macro/synenv.scm" . 218115))
 (call
   (touch.gloc.of |init-core-macro`2707*|)
   (push.const . syntax)
   (call
     (touch.gloc.of make-special)
     (push.gloc.of expand-syntax)
     (apply.gloc.of make-special "./boot/macro/synenv.scm" . 219175))
   (push)
   (apply.gloc.of |init-core-macro`2707*| "./boot/macro/synenv.scm" . 219139))
 (call
   (touch.gloc.of |init-core-macro`2707*|)
   (push.const . syntax-case)
   (call
     (touch.gloc.of make-special)
     (push.gloc.of expand-syntax-case)
     (apply.gloc.of make-special "./boot/macro/synenv.scm" . 220199))
   (push)
   (apply.gloc.of |init-core-macro`2707*| "./boot/macro/synenv.scm" . 220163))
 (call
   (touch.gloc.of |init-core-macro`2707*|)
   (push.const . identifier-syntax)
   (call
     (touch.gloc.of make-special)
     (push.gloc.of expand-identifier-syntax)
     (apply.gloc.of make-special "./boot/macro/synenv.scm" . 221223))
   (push)
   (apply.gloc.of |init-core-macro`2707*| "./boot/macro/synenv.scm" . 221187))
 (call
   (touch.gloc.of |init-core-macro`2707*|)
   (push.const . assert)
   (call
     (touch.gloc.of make-special)
     (push.gloc.of expand-assert)
     (apply.gloc.of make-special "./boot/macro/synenv.scm" . 222247))
   (push)
   (apply.gloc.of |init-core-macro`2707*| "./boot/macro/synenv.scm" . 222211))
 (call
   (touch.gloc.of |init-core-macro`2707*|)
   (push.const . unquote)
   (call
     (touch.gloc.of make-special)
     (push.gloc.of unexpected-unquote)
     (apply.gloc.of make-special "./boot/macro/synenv.scm" . 223271))
   (push)
   (apply.gloc.of |init-core-macro`2707*| "./boot/macro/synenv.scm" . 223235))
 (call
   (touch.gloc.of |init-core-macro`2707*|)
   (push.const . unquote-splicing)
   (call
     (touch.gloc.of make-special)
     (push.gloc.of unexpected-unquote-splicing)
     (apply.gloc.of make-special "./boot/macro/synenv.scm" . 224295))
   (push)
   (apply.gloc.of |init-core-macro`2707*| "./boot/macro/synenv.scm" . 224259))
 (call
   (touch.gloc.of |init-core-macro`2707*|)
   (push.const . syntax-rules)
   (call
     (touch.gloc.of make-special)
     (push.gloc.of unexpected-syntax)
     (apply.gloc.of make-special "./boot/macro/synenv.scm" . 225319))
   (push)
   (apply.gloc.of |init-core-macro`2707*| "./boot/macro/synenv.scm" . 225283))
 (call
   (touch.gloc.of |init-core-macro`2707*|)
   (push.const . else)
   (call
     (touch.gloc.of make-special)
     (push.gloc.of unexpected-auxiliary-syntax)
     (apply.gloc.of make-special "./boot/macro/synenv.scm" . 226343))
   (push)
   (apply.gloc.of |init-core-macro`2707*| "./boot/macro/synenv.scm" . 226307))
 (call
   (touch.gloc.of |init-core-macro`2707*|)
   (push.const . =>)
   (call
     (touch.gloc.of make-special)
     (push.gloc.of unexpected-auxiliary-syntax)
     (apply.gloc.of make-special "./boot/macro/synenv.scm" . 227367))
   (push)
   (apply.gloc.of |init-core-macro`2707*| "./boot/macro/synenv.scm" . 227331))
 (call
   (touch.gloc.of |init-core-macro`2707*|)
   (push.const . ...)
   (call
     (touch.gloc.of make-special)
     (push.gloc.of unexpected-auxiliary-syntax)
     (apply.gloc.of make-special "./boot/macro/synenv.scm" . 228391))
   (push)
   (apply.gloc.of |init-core-macro`2707*| "./boot/macro/synenv.scm" . 228355))
 (call
   (touch.gloc.of |init-core-macro`2707*|)
   (push.const . _)
   (call
     (touch.gloc.of make-special)
     (push.gloc.of unexpected-auxiliary-syntax)
     (apply.gloc.of make-special "./boot/macro/synenv.scm" . 229415))
   (push)
   (apply.gloc.of |init-core-macro`2707*| "./boot/macro/synenv.scm" . 229379))
 (touch.gloc.of |init-core-macro`2707*|)
 (push.const . import)
 (call
   (touch.gloc.of make-special)
   (push.gloc.of expand-import)
   (apply.gloc.of make-special "./boot/macro/synenv.scm" . 230439))
 (push)
 (apply.gloc.of |init-core-macro`2707*| "./boot/macro/synenv.scm" . 230403))
((push.gloc.of core-env)
 (push.const . lambda)
 (push.const . #f)
 (subr.gloc.of core-hashtable-ref 3 "./boot/macro/synenv.scm" . 232481)
 (set.gloc.of denote-lambda)
 (ret.const.unspec))
((push.gloc.of core-env)
 (push.const . begin)
 (push.const . #f)
 (subr.gloc.of core-hashtable-ref 3 "./boot/macro/synenv.scm" . 233505)
 (set.gloc.of denote-begin)
 (ret.const.unspec))
((push.gloc.of core-env)
 (push.const . define)
 (push.const . #f)
 (subr.gloc.of core-hashtable-ref 3 "./boot/macro/synenv.scm" . 234529)
 (set.gloc.of denote-define)
 (ret.const.unspec))
((push.gloc.of core-env)
 (push.const . define-syntax)
 (push.const . #f)
 (subr.gloc.of core-hashtable-ref 3 "./boot/macro/synenv.scm" . 235553)
 (set.gloc.of denote-define-syntax)
 (ret.const.unspec))
((push.gloc.of core-env)
 (push.const . let-syntax)
 (push.const . #f)
 (subr.gloc.of core-hashtable-ref 3 "./boot/macro/synenv.scm" . 236577)
 (set.gloc.of denote-let-syntax)
 (ret.const.unspec))
((push.gloc.of core-env)
 (push.const . letrec-syntax)
 (push.const . #f)
 (subr.gloc.of core-hashtable-ref 3 "./boot/macro/synenv.scm" . 237601)
 (set.gloc.of denote-letrec-syntax)
 (ret.const.unspec))
((push.gloc.of core-env)
 (push.const . library)
 (push.const . #f)
 (subr.gloc.of core-hashtable-ref 3 "./boot/macro/synenv.scm" . 238625)
 (set.gloc.of denote-library)
 (ret.const.unspec))
((push.gloc.of core-env)
 (push.const . quasiquote)
 (push.const . #f)
 (subr.gloc.of core-hashtable-ref 3 "./boot/macro/synenv.scm" . 239649)
 (set.gloc.of denote-quasiquote)
 (ret.const.unspec))
((push.gloc.of core-env)
 (push.const . quote)
 (push.const . #f)
 (subr.gloc.of core-hashtable-ref 3 "./boot/macro/synenv.scm" . 240673)
 (set.gloc.of denote-quote)
 (ret.const.unspec))
((push.gloc.of core-env)
 (push.const . if)
 (push.const . #f)
 (subr.gloc.of core-hashtable-ref 3 "./boot/macro/synenv.scm" . 241697)
 (set.gloc.of denote-if)
 (ret.const.unspec))
((push.gloc.of core-env)
 (push.const . set!)
 (push.const . #f)
 (subr.gloc.of core-hashtable-ref 3 "./boot/macro/synenv.scm" . 242721)
 (set.gloc.of denote-set!)
 (ret.const.unspec))
((push.gloc.of core-env)
 (push.const . unquote)
 (push.const . #f)
 (subr.gloc.of core-hashtable-ref 3 "./boot/macro/synenv.scm" . 243745)
 (set.gloc.of denote-unquote)
 (ret.const.unspec))
((push.gloc.of core-env)
 (push.const . unquote-splicing)
 (push.const . #f)
 (subr.gloc.of core-hashtable-ref 3 "./boot/macro/synenv.scm" . 244769)
 (set.gloc.of denote-unquote-splicing)
 (ret.const.unspec))
((push.gloc.of core-env)
 (push.const . let)
 (push.const . #f)
 (subr.gloc.of core-hashtable-ref 3 "./boot/macro/synenv.scm" . 245793)
 (set.gloc.of denote-let)
 (ret.const.unspec))
((push.gloc.of core-env)
 (push.const . letrec)
 (push.const . #f)
 (subr.gloc.of core-hashtable-ref 3 "./boot/macro/synenv.scm" . 246817)
 (set.gloc.of denote-letrec)
 (ret.const.unspec))
((push.gloc.of core-env)
 (push.const . let*)
 (push.const . #f)
 (subr.gloc.of core-hashtable-ref 3 "./boot/macro/synenv.scm" . 247841)
 (set.gloc.of denote-let*)
 (ret.const.unspec))
((push.gloc.of core-env)
 (push.const . cond)
 (push.const . #f)
 (subr.gloc.of core-hashtable-ref 3 "./boot/macro/synenv.scm" . 248865)
 (set.gloc.of denote-cond)
 (ret.const.unspec))
((push.gloc.of core-env)
 (push.const . case)
 (push.const . #f)
 (subr.gloc.of core-hashtable-ref 3 "./boot/macro/synenv.scm" . 249889)
 (set.gloc.of denote-case)
 (ret.const.unspec))
((push.gloc.of core-env)
 (push.const . do)
 (push.const . #f)
 (subr.gloc.of core-hashtable-ref 3 "./boot/macro/synenv.scm" . 250913)
 (set.gloc.of denote-do)
 (ret.const.unspec))
((push.gloc.of core-env)
 (push.const . and)
 (push.const . #f)
 (subr.gloc.of core-hashtable-ref 3 "./boot/macro/synenv.scm" . 251937)
 (set.gloc.of denote-and)
 (ret.const.unspec))
((push.gloc.of core-env)
 (push.const . or)
 (push.const . #f)
 (subr.gloc.of core-hashtable-ref 3 "./boot/macro/synenv.scm" . 252961)
 (set.gloc.of denote-or)
 (ret.const.unspec))
((push.gloc.of core-env)
 (push.const . letrec*)
 (push.const . #f)
 (subr.gloc.of core-hashtable-ref 3 "./boot/macro/synenv.scm" . 253985)
 (set.gloc.of denote-letrec*)
 (ret.const.unspec))
((push.gloc.of core-env)
 (push.const . let*-values)
 (push.const . #f)
 (subr.gloc.of core-hashtable-ref 3 "./boot/macro/synenv.scm" . 255009)
 (set.gloc.of denote-let*-values)
 (ret.const.unspec))
((push.gloc.of core-env)
 (push.const . let-values)
 (push.const . #f)
 (subr.gloc.of core-hashtable-ref 3 "./boot/macro/synenv.scm" . 256033)
 (set.gloc.of denote-let-values)
 (ret.const.unspec))
((push.gloc.of core-env)
 (push.const . syntax-quote)
 (push.const . #f)
 (subr.gloc.of core-hashtable-ref 3 "./boot/macro/synenv.scm" . 257057)
 (set.gloc.of denote-syntax-quote)
 (ret.const.unspec))
((push.gloc.of core-env)
 (push.const . syntax)
 (push.const . #f)
 (subr.gloc.of core-hashtable-ref 3 "./boot/macro/synenv.scm" . 258081)
 (set.gloc.of denote-syntax)
 (ret.const.unspec))
((push.gloc.of core-env)
 (push.const . syntax-case)
 (push.const . #f)
 (subr.gloc.of core-hashtable-ref 3 "./boot/macro/synenv.scm" . 259105)
 (set.gloc.of denote-syntax-case)
 (ret.const.unspec))
((push.gloc.of core-env)
 (push.const . syntax-rules)
 (push.const . #f)
 (subr.gloc.of core-hashtable-ref 3 "./boot/macro/synenv.scm" . 260129)
 (set.gloc.of denote-syntax-rules)
 (ret.const.unspec))
((push.gloc.of core-env)
 (push.const . else)
 (push.const . #f)
 (subr.gloc.of core-hashtable-ref 3 "./boot/macro/synenv.scm" . 261153)
 (set.gloc.of denote-else)
 (ret.const.unspec))
((push.gloc.of core-env)
 (push.const . =>)
 (push.const . #f)
 (subr.gloc.of core-hashtable-ref 3 "./boot/macro/synenv.scm" . 262177)
 (set.gloc.of denote-=>)
 (ret.const.unspec))
((push.gloc.of core-env)
 (push.const . _)
 (push.const . #f)
 (subr.gloc.of core-hashtable-ref 3 "./boot/macro/synenv.scm" . 263201)
 (set.gloc.of denote-_)
 (ret.const.unspec))
((push.gloc.of core-env)
 (push.const . import)
 (push.const . #f)
 (subr.gloc.of core-hashtable-ref 3 "./boot/macro/synenv.scm" . 264225)
 (set.gloc.of denote-import)
 (ret.const.unspec))
((close
   (2 0 . denote-macro?)
   (iloc.0 . 1)
   (if.not.symbol?.ret.const . #f)
   (touch.gloc.of macro?)
   (call
     (touch.gloc.of env-lookup)
     (push.iloc.0 . 0)
     (push.iloc.0 . 1)
     (apply.gloc.of env-lookup "./boot/macro/synenv.scm" . 269330))
   (push)
   (apply.gloc.of macro? "./boot/macro/synenv.scm" . 269322))
 (set.gloc.of denote-macro?)
 (ret.const.unspec))
((close
   (2 0 . denote-special?)
   (iloc.0 . 1)
   (if.not.symbol?.ret.const . #f)
   (touch.gloc.of special?)
   (call
     (touch.gloc.of env-lookup)
     (push.iloc.0 . 0)
     (push.iloc.0 . 1)
     (apply.gloc.of env-lookup "./boot/macro/synenv.scm" . 274452))
   (push)
   (apply.gloc.of special? "./boot/macro/synenv.scm" . 274442))
 (set.gloc.of denote-special?)
 (ret.const.unspec))
((close
   (2 0 . denote-lambda?)
   (iloc.0 . 1)
   (if.not.symbol?.ret.const . #f)
   (call
     (touch.gloc.of env-lookup)
     (push.iloc.0 . 0)
     (push.iloc.0 . 1)
     (apply.gloc.of env-lookup "./boot/macro/synenv.scm" . 279567))
   (push)
   (gloc.of denote-lambda)
   (ret.eq? "./boot/macro/synenv.scm" . 279562))
 (set.gloc.of denote-lambda?)
 (ret.const.unspec))
((close
   (2 0 . denote-begin?)
   (iloc.0 . 1)
   (if.not.symbol?.ret.const . #f)
   (call
     (touch.gloc.of env-lookup)
     (push.iloc.0 . 0)
     (push.iloc.0 . 1)
     (apply.gloc.of env-lookup "./boot/macro/synenv.scm" . 284687))
   (push)
   (gloc.of denote-begin)
   (ret.eq? "./boot/macro/synenv.scm" . 284682))
 (set.gloc.of denote-begin?)
 (ret.const.unspec))
((close
   (2 0 . denote-let?)
   (iloc.0 . 1)
   (if.not.symbol?.ret.const . #f)
   (call
     (touch.gloc.of env-lookup)
     (push.iloc.0 . 0)
     (push.iloc.0 . 1)
     (apply.gloc.of env-lookup "./boot/macro/synenv.scm" . 289807))
   (push)
   (gloc.of denote-let)
   (ret.eq? "./boot/macro/synenv.scm" . 289802))
 (set.gloc.of denote-let?)
 (ret.const.unspec))
((close
   (2 0 . denote-define-syntax?)
   (iloc.0 . 1)
   (if.not.symbol?.ret.const . #f)
   (call
     (touch.gloc.of env-lookup)
     (push.iloc.0 . 0)
     (push.iloc.0 . 1)
     (apply.gloc.of env-lookup "./boot/macro/synenv.scm" . 294927))
   (push)
   (gloc.of denote-define-syntax)
   (ret.eq? "./boot/macro/synenv.scm" . 294922))
 (set.gloc.of denote-define-syntax?)
 (ret.const.unspec))
((close
   (2 0 . denote-let-syntax?)
   (iloc.0 . 1)
   (if.not.symbol?.ret.const . #f)
   (call
     (touch.gloc.of env-lookup)
     (push.iloc.0 . 0)
     (push.iloc.0 . 1)
     (apply.gloc.of env-lookup "./boot/macro/synenv.scm" . 300047))
   (push)
   (gloc.of denote-let-syntax)
   (ret.eq? "./boot/macro/synenv.scm" . 300042))
 (set.gloc.of denote-let-syntax?)
 (ret.const.unspec))
((close
   (2 0 . denote-letrec-syntax?)
   (iloc.0 . 1)
   (if.not.symbol?.ret.const . #f)
   (call
     (touch.gloc.of env-lookup)
     (push.iloc.0 . 0)
     (push.iloc.0 . 1)
     (apply.gloc.of env-lookup "./boot/macro/synenv.scm" . 305167))
   (push)
   (gloc.of denote-letrec-syntax)
   (ret.eq? "./boot/macro/synenv.scm" . 305162))
 (set.gloc.of denote-letrec-syntax?)
 (ret.const.unspec))
((close
   (2 0 . denote-define?)
   (iloc.0 . 1)
   (if.not.symbol?.ret.const . #f)
   (call
     (touch.gloc.of env-lookup)
     (push.iloc.0 . 0)
     (push.iloc.0 . 1)
     (apply.gloc.of env-lookup "./boot/macro/synenv.scm" . 310287))
   (push)
   (gloc.of denote-define)
   (ret.eq? "./boot/macro/synenv.scm" . 310282))
 (set.gloc.of denote-define?)
 (ret.const.unspec))
((close
   (2 0 . denote-quote?)
   (iloc.0 . 1)
   (if.not.symbol?.ret.const . #f)
   (call
     (touch.gloc.of env-lookup)
     (push.iloc.0 . 0)
     (push.iloc.0 . 1)
     (apply.gloc.of env-lookup "./boot/macro/synenv.scm" . 315407))
   (push)
   (gloc.of denote-quote)
   (ret.eq? "./boot/macro/synenv.scm" . 315402))
 (set.gloc.of denote-quote?)
 (ret.const.unspec))
((close
   (2 0 . denote-quasiquote?)
   (iloc.0 . 1)
   (if.not.symbol?.ret.const . #f)
   (call
     (touch.gloc.of env-lookup)
     (push.iloc.0 . 0)
     (push.iloc.0 . 1)
     (apply.gloc.of env-lookup "./boot/macro/synenv.scm" . 320527))
   (push)
   (gloc.of denote-quasiquote)
   (ret.eq? "./boot/macro/synenv.scm" . 320522))
 (set.gloc.of denote-quasiquote?)
 (ret.const.unspec))
((close
   (2 0 . denote-unquote?)
   (iloc.0 . 1)
   (if.not.symbol?.ret.const . #f)
   (call
     (touch.gloc.of env-lookup)
     (push.iloc.0 . 0)
     (push.iloc.0 . 1)
     (apply.gloc.of env-lookup "./boot/macro/synenv.scm" . 325647))
   (push)
   (gloc.of denote-unquote)
   (ret.eq? "./boot/macro/synenv.scm" . 325642))
 (set.gloc.of denote-unquote?)
 (ret.const.unspec))
((close
   (2 0 . denote-unquote-splicing?)
   (iloc.0 . 1)
   (if.not.symbol?.ret.const . #f)
   (call
     (touch.gloc.of env-lookup)
     (push.iloc.0 . 0)
     (push.iloc.0 . 1)
     (apply.gloc.of env-lookup "./boot/macro/synenv.scm" . 330767))
   (push)
   (gloc.of denote-unquote-splicing)
   (ret.eq? "./boot/macro/synenv.scm" . 330762))
 (set.gloc.of denote-unquote-splicing?)
 (ret.const.unspec))
((close
   (2 0 . denote-syntax-rules?)
   (iloc.0 . 1)
   (if.not.symbol?.ret.const . #f)
   (call
     (touch.gloc.of env-lookup)
     (push.iloc.0 . 0)
     (push.iloc.0 . 1)
     (apply.gloc.of env-lookup "./boot/macro/synenv.scm" . 335887))
   (push)
   (gloc.of denote-syntax-rules)
   (ret.eq? "./boot/macro/synenv.scm" . 335882))
 (set.gloc.of denote-syntax-rules?)
 (ret.const.unspec))
((close
   (2 0 . denote-else?)
   (iloc.0 . 1)
   (if.not.symbol?.ret.const . #f)
   (call
     (touch.gloc.of env-lookup)
     (push.iloc.0 . 0)
     (push.iloc.0 . 1)
     (apply.gloc.of env-lookup "./boot/macro/synenv.scm" . 341007))
   (push)
   (gloc.of denote-else)
   (ret.eq? "./boot/macro/synenv.scm" . 341002))
 (set.gloc.of denote-else?)
 (ret.const.unspec))
((close
   (2 0 . denote-=>?)
   (iloc.0 . 1)
   (if.not.symbol?.ret.const . #f)
   (call
     (touch.gloc.of env-lookup)
     (push.iloc.0 . 0)
     (push.iloc.0 . 1)
     (apply.gloc.of env-lookup "./boot/macro/synenv.scm" . 346127))
   (push)
   (gloc.of denote-=>)
   (ret.eq? "./boot/macro/synenv.scm" . 346122))
 (set.gloc.of denote-=>?)
 (ret.const.unspec))
((close
   (2 0 . denote-set!?)
   (iloc.0 . 1)
   (if.not.symbol?.ret.const . #f)
   (call
     (touch.gloc.of env-lookup)
     (push.iloc.0 . 0)
     (push.iloc.0 . 1)
     (apply.gloc.of env-lookup "./boot/macro/synenv.scm" . 351247))
   (push)
   (gloc.of denote-set!)
   (ret.eq? "./boot/macro/synenv.scm" . 351242))
 (set.gloc.of denote-set!?)
 (ret.const.unspec))
((push.const . |.LIST|)
 (const . |.list|)
 (push.cons)
 (push.const . |.CONS|)
 (const . |.cons|)
 (push.cons)
 (push.const . |.CONS*|)
 (const . |.cons*|)
 (push.cons)
 (push.const . |.APPEND|)
 (const . |.append|)
 (push.cons)
 (push.const . |.VECTOR|)
 (const . |.vector|)
 (push.cons)
 (push.const . |.LIST->VECTOR|)
 (const . |.list->vector|)
 (push.cons)
 (push.const . |.EQ?|)
 (const . |.eq?|)
 (push.cons)
 (push.const . |.EQV?|)
 (const . |.eqv?|)
 (push.cons)
 (push.const . |.MEMQ|)
 (const . |.memq|)
 (push.cons)
 (push.const . |.MEMV|)
 (const . |.memv|)
 (push.cons)
 (push.const . |.CALL-WITH-VALUES|)
 (const . |.call-with-values|)
 (push.cons)
 (push.const . |.IDENTIFIER?|)
 (const . |.identifier?|)
 (push.cons)
 (push.const . |.MAKE-VARIABLE-TRANSFORMER|)
 (const . |.make-variable-transformer|)
 (push.cons)
 (push.const . |.UNSPECIFIED|)
 (const . |.unspecified|)
 (push.cons)
 (push.const . |.QUOTE|)
 (gloc.of denote-quote)
 (push.cons)
 (push.const . |.LET|)
 (gloc.of denote-let)
 (push.cons)
 (push.const . |.LETREC*|)
 (gloc.of denote-letrec*)
 (push.cons)
 (push.const . |.BEGIN|)
 (gloc.of denote-begin)
 (push.cons)
 (push.const . |.LAMBDA|)
 (gloc.of denote-lambda)
 (push.cons)
 (push.const . |.IF|)
 (gloc.of denote-if)
 (push.cons)
 (push.const . |.OR|)
 (gloc.of denote-or)
 (push.cons)
 (push.const . |.COND|)
 (gloc.of denote-cond)
 (push.cons)
 (push.const . |.ELSE|)
 (gloc.of denote-else)
 (push.cons)
 (push.const . |.SYNTAX|)
 (gloc.of denote-syntax)
 (push.cons)
 (push.const . |.SYNTAX-CASE|)
 (gloc.of denote-syntax-case)
 (push.cons)
 (subr.gloc.of list 25 "./boot/macro/synenv.scm" . 354307)
 (set.gloc.of private-primitives-environment)
 (ret.const.unspec))
((push.gloc.of core-env)
 (ret.subr.gloc.of current-macro-environment "./boot/macro/synenv.scm" . 381953))

;
((call (push.const . #f) (apply.gloc.of make-parameter "./boot/compile.scm" . 5147))
 (set.gloc.of ht-local-closures)
 (ret.const.unspec))
((close
   (1 0 . local-closure?)
   (call
     (call
       (touch.gloc.of current-closure-comments)
       (apply.gloc.of current-closure-comments "./boot/compile.scm" . 9233))
     (if.false.ret)
     (call
       (touch.gloc.of current-closure-comments)
       (apply.gloc.of current-closure-comments "./boot/compile.scm" . 9280))
     (push)
     (push.iloc.0 . 0)
     (push.const . #f)
     (ret.subr.gloc.of core-hashtable-ref "./boot/compile.scm" . 9260))
   (push)
   (extend . 1)
   (iloc.0 . 0)
   (if.false.ret)
   (push.car.iloc (0 . 0) "./boot/compile.scm" . 10273)
   (push.const stack)
   (ret.subr.gloc.of memq "./boot/compile.scm" . 10267))
 (set.gloc.of local-closure?)
 (ret.const.unspec))
((close
   (1 0)
   (cadr.iloc (0 . 0) "./boot/compile.scm" . 16413)
   (if.not.pair?.ret.const . #f)
   (push.iloc.0 . 0)
   (push.subr.gloc.of caadr 1 "./boot/compile.scm" . 17435)
   (const . lambda)
   (if.not.eq?.ret.const . #f)
   (call
     (touch.gloc.of local-closure?)
     (push.cadr.iloc (0 . 0) "./boot/compile.scm" . 18470)
     (apply.gloc.of local-closure? "./boot/compile.scm" . 18454))
   (if.false.ret)
   (call
     (touch.gloc.of ht-local-closures)
     (apply.gloc.of ht-local-closures "./boot/compile.scm" . 19499))
   (push)
   (push.car.iloc (0 . 0) "./boot/compile.scm" . 19519)
   (push.const . #t)
   (ret.subr.gloc.of core-hashtable-set! "./boot/compile.scm" . 19478))
 (set.gloc.of |.L784|)
 (close
   (1 0 . collect-local-closure)
   (push.gloc.of |.L784|)
   (push.iloc.0 . 0)
   (apply.gloc.of for-each "./boot/compile.scm" . 15365))
 (set.gloc.of collect-local-closure)
 (ret.const.unspec))
((close
   (1 0 . make-application-comment)
   (subr.gloc.of backtrace 0 "./boot/compile.scm" . 24585)
   (if.true
     (subr.gloc.of current-source-comments 0 "./boot/compile.scm" . 25616)
     (if.true
       (subr.gloc.of current-source-comments 0)
       (push)
       (push.iloc.0 . 0)
       (push.const . #f)
       (push.subr.gloc.of core-hashtable-ref 3 "./boot/compile.scm" . 27676)
       (extend . 1)
       (iloc.0 . 0)
       (if.true
         (<n.iloc (0 . 0) 0 "./boot/compile.scm" . 29733)
         (if.true
           (push.iloc.1 . 0)
           (subr.gloc.of current-source-comments 0)
           (push)
           (push.const . |.&SOURCE-PATH|)
           (push.const . #f)
           (push.subr.gloc.of core-hashtable-ref 3 "./boot/compile.scm" . 30766)
           (push.iloc.0 . 0)
           (push.subr.gloc.of - 1 "./boot/compile.scm" . 30834)
           (ret.subr.gloc.of |.cons*| "./boot/compile.scm" . 29729))
         (subr.gloc.of current-source-comments 0)
         (push)
         (push.const . |.&SOURCE-PATH|)
         (push.const . #f)
         (push.subr.gloc.of core-hashtable-ref 3 "./boot/compile.scm" . 31784)
         (iloc.0 . 0)
         (ret.cons "./boot/compile.scm" . 29729))
       (push.iloc.1 . 0)
       (ret.subr.gloc.of list "./boot/compile.scm" . 33820))
     (push.iloc.0 . 0)
     (ret.subr.gloc.of list "./boot/compile.scm" . 35856))
   (ret.const))
 (set.gloc.of make-application-comment)
 (ret.const.unspec))
((close
   (1 0 . make-closure-comment)
   (call
     (call
       (touch.gloc.of current-closure-comments)
       (apply.gloc.of current-closure-comments "./boot/compile.scm" . 40977))
     (if.false.ret)
     (call
       (touch.gloc.of current-closure-comments)
       (apply.gloc.of current-closure-comments "./boot/compile.scm" . 42021))
     (push)
     (push.iloc.0 . 0)
     (push.const . #f)
     (ret.subr.gloc.of core-hashtable-ref "./boot/compile.scm" . 42001))
   (push)
   (extend . 1)
   (iloc.0 . 0)
   (if.true (push.iloc.0 . 0) (ret.subr.gloc.of cdr "./boot/compile.scm" . 44043))
   (ret.const))
 (set.gloc.of make-closure-comment)
 (ret.const.unspec))
((close
   (1 0 . top-level-subr)
   (iloc.0 . 0)
   (if.not.symbol?.ret.const . #f)
   (push.iloc.0 . 0)
   (subr.gloc.of top-level-bound? 1 "./boot/compile.scm" . 49162)
   (if.false.ret)
   (push.iloc.0 . 0)
   (push.subr.gloc.of top-level-value 1 "./boot/compile.scm" . 50193)
   (subr.gloc.of subr? 1 "./boot/compile.scm" . 50186)
   (if.false.ret)
   (push.iloc.0 . 0)
   (ret.subr.gloc.of top-level-value "./boot/compile.scm" . 51210))
 (set.gloc.of top-level-subr)
 (ret.const.unspec))
((close
   (1 0 . top-level-value-or-false)
   (iloc.0 . 0)
   (if.not.symbol?.ret.const . #f)
   (push.iloc.0 . 0)
   (subr.gloc.of top-level-bound? 1 "./boot/compile.scm" . 56330)
   (if.false.ret)
   (push.iloc.0 . 0)
   (ret.subr.gloc.of top-level-value "./boot/compile.scm" . 57354))
 (set.gloc.of top-level-value-or-false)
 (ret.const.unspec))
((close
   (1 0 . formals->list)
   (iloc.0 . 0)
   (if.pair?
     (push.car.iloc (0 . 0) "./boot/compile.scm" . 62479)
     (call
       (touch.gloc.of formals->list)
       (push.cdr.iloc (0 . 0) "./boot/compile.scm" . 62504)
       (apply.gloc.of formals->list "./boot/compile.scm" . 62489))
     (ret.cons "./boot/compile.scm" . 62473))
   (iloc.0 . 0)
   (if.null?.ret.const)
   (push.iloc.0 . 0)
   (ret.subr.gloc.of list "./boot/compile.scm" . 64533))
 (set.gloc.of formals->list)
 (ret.const.unspec))
((close
   (2 0 . make-formals-operand)
   (push.iloc.0 . 1)
   (subr.gloc.of list? 1 "./boot/compile.scm" . 68620)
   (if.true
     (push.iloc.0 . 1)
     (push.subr.gloc.of length 1 "./boot/compile.scm" . 68642)
     (push.const . 0)
     (ret.subr.gloc.of list "./boot/compile.scm" . 68636))
   (iloc.0 . 1)
   (if.pair?
     (push.iloc.0 . 0)
     (push.subr.gloc.of length 1 "./boot/compile.scm" . 69669)
     (push.const . 1)
     (push.subr.gloc.of - 2 "./boot/compile.scm" . 69666)
     (push.const . 1)
     (ret.subr.gloc.of list "./boot/compile.scm" . 69660))
   (ret.const 0 1))
 (set.gloc.of make-formals-operand)
 (ret.const.unspec))
((close
   (2 0 . make-iloc-operand)
   (extend.enclose+
     (2 0 . loop1)
     (iloc.0 . 0)
     (if.not.pair?.ret.const . #f)
     (push.iloc 2 . 0)
     (push.car.iloc (0 . 0) "./boot/compile.scm" . 76824)
     (subr.gloc.of memq 2 "./boot/compile.scm" . 76816)
     (if.true
       (push.iloc.0 . 1)
       (call
         (extend.enclose+
           (2 0 . loop2)
           (push.car.iloc (0 . 0) "./boot/compile.scm" . 79905)
           (iloc 4 . 0)
           (if.eq? (ret.iloc 0 . 1))
           (push.cdr.iloc (0 . 0) "./boot/compile.scm" . 81955)
           (push.n+.iloc (0 . 1) 1 "./boot/compile.scm" . 81966)
           (apply.iloc+ (1 . 0) "./boot/compile.scm" . 81948))
         (push.car.iloc (1 . 0) "./boot/compile.scm" . 78888)
         (push.const . 0)
         (apply.iloc+ (0 . 0) "./boot/compile.scm" . 79896))
       (ret.cons
         (cons |level`2781*|
               (letrec* ((|loop2`2785*|
                           (lambda (|lst2`2786*| |index`2786*|)
                             (if (eq? (car |lst2`2786*|) |e`2776*|)
                                 |index`2786*|
                                 (|loop2`2785*| (cdr |lst2`2786*|) (+ |index`2786*| 1))))))
                 (|loop2`2785*| (car |lst1`2781*|) 0)))))
     (push.cdr.iloc (0 . 0) "./boot/compile.scm" . 82967)
     (push.n+.iloc (0 . 1) 1 "./boot/compile.scm" . 82978)
     (apply.iloc+ (1 . 0) "./boot/compile.scm" . 82960))
   (push.iloc.1 . 1)
   (push.const . 0)
   (apply.iloc+ (0 . 0) "./boot/compile.scm" . 75783))
 (set.gloc.of make-iloc-operand)
 (ret.const.unspec))
((close
   (3 0 . iloc-iota)
   (extend.enclose+
     (2 0 . loop)
     (<n.iloc (0 . 0) 0 "./boot/compile.scm" . 89102)
     (if.true (ret.iloc 0 . 1))
     (push.n+.iloc (0 . 0) -1 "./boot/compile.scm" . 90137)
     (push.iloc 2 . 0)
     (push.iloc 2 . 1)
     (push.iloc.0 . 0)
     (subr.gloc.of + 2 "./boot/compile.scm" . 90167)
     (push.cons)
     (iloc.0 . 1)
     (push.cons)
     (apply.iloc+ (1 . 0) "./boot/compile.scm" . 90131))
   (push.n+.iloc (1 . 2) -1 "./boot/compile.scm" . 88087)
   (push.const)
   (apply.iloc+ (0 . 0) "./boot/compile.scm" . 89095))
 (set.gloc.of iloc-iota)
 (ret.const.unspec))
((close
   (2 0 . cte-extend-iloc)
   (push.iloc.0 . 0)
   (iloc.0 . 1)
   (ret.cons "./boot/compile.scm" . 94213))
 (set.gloc.of cte-extend-iloc)
 (ret.const.unspec))
((close
   (2 0 . iloc?)
   (iloc.0 . 0)
   (if.not.symbol?.ret.const . #f)
   (extend.enclose+
     (1 0 . loop)
     (iloc.0 . 0)
     (if.not.pair?.ret.const . #f)
     (push.iloc 2 . 0)
     (push.car.iloc (0 . 0) "./boot/compile.scm" . 101405)
     (subr.gloc.of memq 2 "./boot/compile.scm" . 101397)
     (if.true.ret)
     (push.cdr.iloc (0 . 0) "./boot/compile.scm" . 102427)
     (apply.iloc+ (1 . 0) "./boot/compile.scm" . 102421))
   (push.iloc.1 . 1)
   (apply.iloc+ (0 . 0) "./boot/compile.scm" . 100364))
 (set.gloc.of iloc?)
 (ret.const.unspec))
((close
   (1 0 . immediate-literal?)
   (push.iloc.0 . 0)
   (subr.gloc.of fixnum? 1 "./boot/compile.scm" . 106505)
   (if.true.ret)
   (push.iloc.0 . 0)
   (subr.gloc.of char? 1 "./boot/compile.scm" . 106517)
   (if.true.ret)
   (push.iloc.0 . 0)
   (subr.gloc.of boolean? 1 "./boot/compile.scm" . 106527)
   (if.true.ret)
   (iloc.0 . 0)
   (if.null?.ret.const . #t)
   (iloc.0 . 0)
   (if.not.pair?.ret.const . #f)
   (push.car.iloc (0 . 0) "./boot/compile.scm" . 107549)
   (const . quote)
   (if.not.eq?.ret.const . #f)
   (push.cadr.iloc (0 . 0) "./boot/compile.scm" . 107574)
   (ret.subr.gloc.of symbol? "./boot/compile.scm" . 107565))
 (set.gloc.of immediate-literal?)
 (ret.const.unspec))
((close
   (2 0 . compile-touch)
   (call
     (iloc.0 . 0)
     (if.not.symbol?.ret.const . #f)
     (push.iloc.0 . 0)
     (subr.gloc.of top-level-bound? 1 "./boot/compile.scm" . 113686)
     (if.true.ret.const . #f)
     (call
       (touch.gloc.of iloc?)
       (push.iloc.0 . 0)
       (push.iloc.0 . 1)
       (apply.gloc.of iloc? "./boot/compile.scm" . 114710))
     (push)
     (ret.subr.gloc.of not "./boot/compile.scm" . 114705))
   (if.true
     (push.const . touch.gloc.of)
     (push.iloc.0 . 0)
     (push.subr.gloc.of |.list| 2 (|.list| 'touch.gloc.of |e`2810*|))
     (ret.subr.gloc.of |.list| "./boot/compile.scm" . 112651))
   (ret.const))
 (set.gloc.of compile-touch)
 (ret.const.unspec))
((close
   (4 0 . compile-lambda-helper)
   (call
     (touch.gloc.of formals->list)
     (push.iloc.0 . 0)
     (apply.gloc.of formals->list "./boot/compile.scm" . 120849))
   (push)
   (extend . 1)
   (call
     (touch.gloc.of cte-extend-iloc)
     (push.iloc.0 . 0)
     (push.iloc.1 . 3)
     (apply.gloc.of cte-extend-iloc "./boot/compile.scm" . 121874))
   (push)
   (extend . 1)
   (call
     (touch.gloc.of make-formals-operand)
     (push.iloc.1 . 0)
     (push.iloc 2 . 0)
     (apply.gloc.of make-formals-operand "./boot/compile.scm" . 122900))
   (push)
   (push.iloc 2 . 2)
   (push.subr.gloc.of append 2 "./boot/compile.scm" . 122892)
   (call
     (touch.gloc.of compile-expression-seq)
     (push.iloc 2 . 1)
     (push.iloc.0 . 0)
     (push.const . #f)
     (push.const . #t)
     (apply.gloc.of compile-expression-seq "./boot/compile.scm" . 123918))
   (ret.cons "./boot/compile.scm" . 121863))
 (set.gloc.of compile-lambda-helper)
 (ret.const.unspec))
((call
   (subr.gloc.of make-core-hashtable 0)
   (push)
   (extend . 1)
   (call
     (push.close
       (1 0)
       (push.iloc.1 . 0)
       (push.iloc.0 . 0)
       (push.const . #t)
       (ret.subr.gloc.of core-hashtable-set! "./boot/compile.scm" . 128027))
     (push.gloc.of unspecified)
     (push.gloc.of car)
     (push.gloc.of cdr)
     (push.gloc.of cadr)
     (push.gloc.of cddr)
     (push.gloc.of cons)
     (push.gloc.of =)
     (push.gloc.of <)
     (push.gloc.of <=)
     (push.gloc.of >)
     (push.gloc.of >=)
     (push.gloc.of eq?)
     (push.gloc.of null?)
     (push.gloc.of pair?)
     (push.gloc.of +)
     (push.gloc.of -)
     (push.gloc.of eqv?)
     (push.gloc.of equal?)
     (push.gloc.of vector-ref)
     (push.subr.gloc.of list 19 "./boot/compile.scm" . 129039)
     (apply.gloc.of for-each "./boot/compile.scm" . 128005))
   (push.iloc.0 . 0)
   (push.const . #t)
   (ret.subr.gloc.of core-hashtable-copy "./boot/compile.scm" . 130053))
 (set.gloc.of ht-special-subr-expression)
 (ret.const.unspec))
((push.gloc.of =)
 (const . =n.iloc)
 (push.cons)
 (push.gloc.of <)
 (const . <n.iloc)
 (push.cons)
 (push.gloc.of <=)
 (const . <=n.iloc)
 (push.cons)
 (push.gloc.of >)
 (const . >n.iloc)
 (push.cons)
 (push.gloc.of >=)
 (const . >=n.iloc)
 (push.cons)
 (subr.gloc.of list 5 "./boot/compile.scm" . 133123)
 (set.gloc.of alist-special-binary-subr)
 (ret.const.unspec))
((push.gloc.of =)
 (const . =n.iloc)
 (push.cons)
 (push.gloc.of <)
 (const . >n.iloc)
 (push.cons)
 (push.gloc.of <=)
 (const . >=n.iloc)
 (push.cons)
 (push.gloc.of >)
 (const . <n.iloc)
 (push.cons)
 (push.gloc.of >=)
 (const . <=n.iloc)
 (push.cons)
 (subr.gloc.of list 5 "./boot/compile.scm" . 136195)
 (set.gloc.of alist-special-binary-subr-negate)
 (ret.const.unspec))
((push.gloc.of =)
 (const . =.iloc)
 (push.cons)
 (push.gloc.of <)
 (const . <.iloc)
 (push.cons)
 (push.gloc.of <=)
 (const . <=.iloc)
 (push.cons)
 (push.gloc.of >)
 (const . >.iloc)
 (push.cons)
 (push.gloc.of >=)
 (const . >=.iloc)
 (push.cons)
 (subr.gloc.of list 5 "./boot/compile.scm" . 139267)
 (set.gloc.of alist-special-binary-subr-iloc)
 (ret.const.unspec))
((push.gloc.of =)
 (const . =.iloc)
 (push.cons)
 (push.gloc.of <)
 (const . >.iloc)
 (push.cons)
 (push.gloc.of <=)
 (const . >=.iloc)
 (push.cons)
 (push.gloc.of >)
 (const . <.iloc)
 (push.cons)
 (push.gloc.of >=)
 (const . <=.iloc)
 (push.cons)
 (subr.gloc.of list 5 "./boot/compile.scm" . 142339)
 (set.gloc.of alist-special-binary-subr-iloc-negate)
 (ret.const.unspec))
((close
   (4 0 . compile-anonymous)
   (iloc.0 . 2)
   (if.true
     (call
       (touch.gloc.of compile-argument-each)
       (push.cdr.iloc (0 . 0) "./boot/compile.scm" . 150568)
       (push.iloc.0 . 1)
       (apply.gloc.of compile-argument-each "./boot/compile.scm" . 150545))
     (push)
     (push.const . ret.subr.gloc.of)
     (push.car.iloc (0 . 0) "./boot/compile.scm" . 150603)
     (push.iloc.0 . 3)
     (push.subr.gloc.of |.cons*| 3 "./boot/compile.scm" . 150603)
     (push.subr.gloc.of |.list| 1 "./boot/compile.scm" . 150603)
     (ret.subr.gloc.of |.append| "./boot/compile.scm" . 149513))
   (call
     (touch.gloc.of compile-argument-each)
     (push.cdr.iloc (0 . 0) "./boot/compile.scm" . 151592)
     (push.iloc.0 . 1)
     (apply.gloc.of compile-argument-each "./boot/compile.scm" . 151569))
   (push)
   (push.const . subr.gloc.of)
   (push.car.iloc (0 . 0) "./boot/compile.scm" . 151623)
   (push.cdr.iloc (0 . 0) "./boot/compile.scm" . 151643)
   (push.subr.gloc.of length 1 "./boot/compile.scm" . 151635)
   (push.iloc.0 . 3)
   (push.subr.gloc.of |.cons*| 4 "./boot/compile.scm" . 151623)
   (push.subr.gloc.of |.list| 1 "./boot/compile.scm" . 151623)
   (ret.subr.gloc.of |.append| "./boot/compile.scm" . 149513))
 (set.gloc.of |compile-anonymous`2823*|)
 (close
   (4 0 . compile-subr-expression)
   (call
     (touch.gloc.of make-application-comment)
     (push.iloc.0 . 0)
     (apply.gloc.of make-application-comment "./boot/compile.scm" . 153620))
   (push)
   (extend . 1)
   (push.car.iloc (1 . 0) "./boot/compile.scm" . 154660)
   (push.subr.gloc.of top-level-value 1 "./boot/compile.scm" . 154643)
   (extend . 1)
   (push.gloc.of ht-special-subr-expression)
   (push.iloc.0 . 0)
   (subr.gloc.of core-hashtable-contains? 2 "./boot/compile.scm" . 155661)
   (if.true
     (cdr.iloc (2 . 0) "./boot/compile.scm" . 156699)
     (if.null?
       (push.iloc.0 . 0)
       (gloc.of unspecified)
       (if.eq?
         (iloc 2 . 2)
         (if.true.ret.const)
         (iloc 2 . 3)
         (if.true
           (push.const . ret.const.unspec)
           (push.subr.gloc.of list 1 "./boot/compile.scm" . 159789)
           (ret.subr.gloc.of list "./boot/compile.scm" . 159783))
         (push.const . const.unspec)
         (push.subr.gloc.of list 1 "./boot/compile.scm" . 160813)
         (ret.subr.gloc.of list "./boot/compile.scm" . 160807))
       (touch.gloc.of |compile-anonymous`2823*|)
       (push.iloc 2 . 0)
       (push.iloc 2 . 1)
       (push.iloc 2 . 3)
       (push.iloc.1 . 0)
       (apply.gloc.of |compile-anonymous`2823*| "./boot/compile.scm" . 161824))
     (cddr.iloc (2 . 0) "./boot/compile.scm" . 162843)
     (if.null?
       (iloc 2 . 3)
       (if.true
         (push.iloc.0 . 0)
         (gloc.of pair?)
         (if.eq?
           (call
             (touch.gloc.of compile-expression)
             (push.cadr.iloc (2 . 0) "./boot/compile.scm" . 165943)
             (push.iloc 2 . 1)
             (push.const . #f)
             (push.const . #f)
             (apply.gloc.of compile-expression "./boot/compile.scm" . 165923))
           (push)
           (push.const . ret.pair?)
           (iloc.1 . 0)
           (push.cons)
           (push.subr.gloc.of |.list| 1 "./boot/compile.scm" . 165967)
           (ret.subr.gloc.of |.append| "./boot/compile.scm" . 164894))
         (push.iloc.0 . 0)
         (gloc.of null?)
         (if.eq?
           (call
             (touch.gloc.of compile-expression)
             (push.cadr.iloc (2 . 0) "./boot/compile.scm" . 167991)
             (push.iloc 2 . 1)
             (push.const . #f)
             (push.const . #f)
             (apply.gloc.of compile-expression "./boot/compile.scm" . 167971))
           (push)
           (push.const . ret.null?)
           (iloc.1 . 0)
           (push.cons)
           (push.subr.gloc.of |.list| 1 "./boot/compile.scm" . 168015)
           (ret.subr.gloc.of |.append| "./boot/compile.scm" . 166942))
         (touch.gloc.of |compile-anonymous`2823*|)
         (push.iloc 2 . 0)
         (push.iloc 2 . 1)
         (push.iloc 2 . 3)
         (push.iloc.1 . 0)
         (apply.gloc.of |compile-anonymous`2823*| "./boot/compile.scm" . 170015))
       (call
         (touch.gloc.of iloc?)
         (push.cadr.iloc (2 . 0) "./boot/compile.scm" . 171043)
         (push.iloc 2 . 1)
         (apply.gloc.of iloc? "./boot/compile.scm" . 171036))
       (if.true
         (iloc 2 . 2)
         (if.true.ret.const)
         (push.iloc.0 . 0)
         (gloc.of car)
         (if.eq?
           (push.const . car.iloc)
           (call
             (touch.gloc.of make-iloc-operand)
             (push.cadr.iloc (2 . 0) "./boot/compile.scm" . 175178)
             (push.iloc 2 . 1)
             (apply.gloc.of make-iloc-operand "./boot/compile.scm" . 175159))
           (push)
           (push.iloc.1 . 0)
           (push.subr.gloc.of |.cons*| 3 "./boot/compile.scm" . 175159)
           (ret.subr.gloc.of |.list| "./boot/compile.scm" . 174121))
         (push.iloc.0 . 0)
         (gloc.of cdr)
         (if.eq?
           (push.const . cdr.iloc)
           (call
             (touch.gloc.of make-iloc-operand)
             (push.cadr.iloc (2 . 0) "./boot/compile.scm" . 177226)
             (push.iloc 2 . 1)
             (apply.gloc.of make-iloc-operand "./boot/compile.scm" . 177207))
           (push)
           (push.iloc.1 . 0)
           (push.subr.gloc.of |.cons*| 3 "./boot/compile.scm" . 177207)
           (ret.subr.gloc.of |.list| "./boot/compile.scm" . 176169))
         (push.iloc.0 . 0)
         (gloc.of cadr)
         (if.eq?
           (push.const . cadr.iloc)
           (call
             (touch.gloc.of make-iloc-operand)
             (push.cadr.iloc (2 . 0) "./boot/compile.scm" . 179275)
             (push.iloc 2 . 1)
             (apply.gloc.of make-iloc-operand "./boot/compile.scm" . 179256))
           (push)
           (push.iloc.1 . 0)
           (push.subr.gloc.of |.cons*| 3 "./boot/compile.scm" . 179256)
           (ret.subr.gloc.of |.list| "./boot/compile.scm" . 178217))
         (push.iloc.0 . 0)
         (gloc.of cddr)
         (if.eq?
           (push.const . cddr.iloc)
           (call
             (touch.gloc.of make-iloc-operand)
             (push.cadr.iloc (2 . 0) "./boot/compile.scm" . 181323)
             (push.iloc 2 . 1)
             (apply.gloc.of make-iloc-operand "./boot/compile.scm" . 181304))
           (push)
           (push.iloc.1 . 0)
           (push.subr.gloc.of |.cons*| 3 "./boot/compile.scm" . 181304)
           (ret.subr.gloc.of |.list| "./boot/compile.scm" . 180265))
         (touch.gloc.of |compile-anonymous`2823*|)
         (push.iloc 2 . 0)
         (push.iloc 2 . 1)
         (push.iloc 2 . 3)
         (push.iloc.1 . 0)
         (apply.gloc.of |compile-anonymous`2823*| "./boot/compile.scm" . 183338))
       (touch.gloc.of |compile-anonymous`2823*|)
       (push.iloc 2 . 0)
       (push.iloc 2 . 1)
       (push.iloc 2 . 3)
       (push.iloc.1 . 0)
       (apply.gloc.of |compile-anonymous`2823*| "./boot/compile.scm" . 184348))
     (push.iloc 2 . 0)
     (subr.gloc.of cdddr 1 "./boot/compile.scm" . 185371)
     (if.null?
       (iloc 2 . 3)
       (if.true
         (push.iloc.0 . 0)
         (gloc.of cons)
         (if.eq?
           (call
             (touch.gloc.of compile-argument)
             (push.cadr.iloc (2 . 0) "./boot/compile.scm" . 188469)
             (push.iloc 2 . 1)
             (apply.gloc.of compile-argument "./boot/compile.scm" . 188451))
           (push)
           (call
             (touch.gloc.of compile-expression)
             (push.iloc 2 . 0)
             (push.subr.gloc.of caddr 1 "./boot/compile.scm" . 188508)
             (push.iloc 2 . 1)
             (push.const . #f)
             (push.const . #f)
             (apply.gloc.of compile-expression "./boot/compile.scm" . 188488))
           (push)
           (push.const . ret.cons)
           (iloc.1 . 0)
           (push.cons)
           (push.subr.gloc.of |.list| 1 "./boot/compile.scm" . 188533)
           (push.subr.gloc.of |.append| 2 "./boot/compile.scm" . 188488)
           (ret.subr.gloc.of |.append| "./boot/compile.scm" . 187422))
         (push.iloc.0 . 0)
         (gloc.of eq?)
         (if.eq?
           (call
             (touch.gloc.of compile-argument)
             (push.cadr.iloc (2 . 0) "./boot/compile.scm" . 190517)
             (push.iloc 2 . 1)
             (apply.gloc.of compile-argument "./boot/compile.scm" . 190499))
           (push)
           (call
             (touch.gloc.of compile-expression)
             (push.iloc 2 . 0)
             (push.subr.gloc.of caddr 1 "./boot/compile.scm" . 190556)
             (push.iloc 2 . 1)
             (push.const . #f)
             (push.const . #f)
             (apply.gloc.of compile-expression "./boot/compile.scm" . 190536))
           (push)
           (push.const . ret.eq?)
           (iloc.1 . 0)
           (push.cons)
           (push.subr.gloc.of |.list| 1 "./boot/compile.scm" . 190581)
           (push.subr.gloc.of |.append| 2 "./boot/compile.scm" . 190536)
           (ret.subr.gloc.of |.append| "./boot/compile.scm" . 189470))
         (push.iloc.0 . 0)
         (gloc.of eqv?)
         (if.eq?
           (push.iloc 2 . 0)
           (push.subr.gloc.of caddr 1 "./boot/compile.scm" . 192574)
           (extend . 1)
           (call
             (call
               (touch.gloc.of immediate-literal?)
               (push.cadr.iloc (3 . 0) "./boot/compile.scm" . 192555)
               (apply.gloc.of immediate-literal? "./boot/compile.scm" . 193577))
             (if.true.ret)
             (touch.gloc.of immediate-literal?)
             (push.iloc.0 . 0)
             (apply.gloc.of immediate-literal? "./boot/compile.scm" . 193603))
           (if.true
             (call
               (touch.gloc.of compile-argument)
               (push.cadr.iloc (3 . 0) "./boot/compile.scm" . 194619)
               (push.iloc 3 . 1)
               (apply.gloc.of compile-argument "./boot/compile.scm" . 194601))
             (push)
             (call
               (touch.gloc.of compile-expression)
               (push.iloc 3 . 0)
               (push.subr.gloc.of caddr 1 "./boot/compile.scm" . 194658)
               (push.iloc 3 . 1)
               (push.const . #f)
               (push.const . #f)
               (apply.gloc.of compile-expression "./boot/compile.scm" . 194638))
             (push)
             (push.const . ret.eq?)
             (iloc 2 . 0)
             (push.cons)
             (push.subr.gloc.of |.list| 1 "./boot/compile.scm" . 194683)
             (push.subr.gloc.of |.append| 2 "./boot/compile.scm" . 194638)
             (ret.subr.gloc.of |.append| "./boot/compile.scm" . 193569))
           (touch.gloc.of |compile-anonymous`2823*|)
           (push.iloc 3 . 0)
           (push.iloc 3 . 1)
           (push.iloc 3 . 3)
           (push.iloc 2 . 0)
           (apply.gloc.of |compile-anonymous`2823*| "./boot/compile.scm" . 195621))
         (touch.gloc.of |compile-anonymous`2823*|)
         (push.iloc 2 . 0)
         (push.iloc 2 . 1)
         (push.iloc 2 . 3)
         (push.iloc.1 . 0)
         (apply.gloc.of |compile-anonymous`2823*| "./boot/compile.scm" . 197663))
       (push.iloc.0 . 0)
       (push.gloc.of alist-special-binary-subr)
       (subr.gloc.of assq 2 "./boot/compile.scm" . 198687)
       (if.true
         (push.cadr.iloc (2 . 0) "./boot/compile.scm" . 199723)
         (push.iloc 2 . 0)
         (push.subr.gloc.of caddr 1 "./boot/compile.scm" . 199742)
         (extend . 2)
         (push.close
           (0 0)
           (call
             (push.iloc.1 . 0)
             (subr.gloc.of fixnum? 1 "./boot/compile.scm" . 201787)
             (if.false.ret)
             (iloc.1 . 1)
             (if.not.symbol?.ret.const . #f)
             (touch.gloc.of iloc?)
             (push.iloc.1 . 1)
             (push.iloc 4 . 1)
             (apply.gloc.of iloc? "./boot/compile.scm" . 201817))
           (if.true
             (push.iloc.1 . 1)
             (push.iloc.1 . 0)
             (push.iloc 2 . 0)
             (push.gloc.of alist-special-binary-subr-negate)
             (push.subr.gloc.of assq 2 "./boot/compile.scm" . 201858)
             (push.subr.gloc.of cdr 1 "./boot/compile.scm" . 201853)
             (ret.subr.gloc.of values "./boot/compile.scm" . 201835))
           (call
             (push.iloc.1 . 1)
             (subr.gloc.of fixnum? 1 "./boot/compile.scm" . 202811)
             (if.false.ret)
             (iloc.1 . 0)
             (if.not.symbol?.ret.const . #f)
             (touch.gloc.of iloc?)
             (push.iloc.1 . 0)
             (push.iloc 4 . 1)
             (apply.gloc.of iloc? "./boot/compile.scm" . 202841))
           (if.true
             (push.iloc.1 . 0)
             (push.iloc.1 . 1)
             (push.iloc 2 . 0)
             (push.gloc.of alist-special-binary-subr)
             (push.subr.gloc.of assq 2 "./boot/compile.scm" . 202882)
             (push.subr.gloc.of cdr 1 "./boot/compile.scm" . 202877)
             (ret.subr.gloc.of values "./boot/compile.scm" . 202859))
           (push.const . #f)
           (push.const . #f)
           (push.const . #f)
           (ret.subr.gloc.of values "./boot/compile.scm" . 203835))
         (push.close
           (3 0)
           (iloc.0 . 2)
           (if.true
             (push.iloc.0 . 2)
             (call
               (touch.gloc.of make-iloc-operand)
               (push.iloc.0 . 0)
               (push.iloc 4 . 1)
               (apply.gloc.of make-iloc-operand "./boot/compile.scm" . 204857))
             (push)
             (push.iloc.0 . 1)
             (push.iloc 3 . 0)
             (push.subr.gloc.of |.cons*| 4 "./boot/compile.scm" . 204857)
             (ret.subr.gloc.of |.list| "./boot/compile.scm" . 204841))
           (call
             (touch.gloc.of iloc?)
             (push.iloc.1 . 1)
             (push.iloc 4 . 1)
             (apply.gloc.of iloc? "./boot/compile.scm" . 205866))
           (if.true
             (call
               (touch.gloc.of compile-expression)
               (push.iloc.1 . 0)
               (push.iloc 4 . 1)
               (push.const . #f)
               (push.const . #f)
               (apply.gloc.of compile-expression "./boot/compile.scm" . 206894))
             (push)
             (push.iloc 2 . 0)
             (push.gloc.of alist-special-binary-subr-iloc)
             (push.subr.gloc.of assq 2 "./boot/compile.scm" . 206937)
             (push.subr.gloc.of cdr 1 "./boot/compile.scm" . 206932)
             (call
               (touch.gloc.of make-iloc-operand)
               (push.iloc.1 . 1)
               (push.iloc 4 . 1)
               (apply.gloc.of make-iloc-operand "./boot/compile.scm" . 206982))
             (push)
             (push.iloc 3 . 0)
             (push.subr.gloc.of |.cons*| 3 "./boot/compile.scm" . 206932)
             (push.subr.gloc.of |.list| 1 "./boot/compile.scm" . 206932)
             (ret.subr.gloc.of |.append| "./boot/compile.scm" . 205865))
           (call
             (touch.gloc.of iloc?)
             (push.iloc.1 . 0)
             (push.iloc 4 . 1)
             (apply.gloc.of iloc? "./boot/compile.scm" . 207914))
           (if.true
             (call
               (touch.gloc.of compile-expression)
               (push.iloc.1 . 1)
               (push.iloc 4 . 1)
               (push.const . #f)
               (push.const . #f)
               (apply.gloc.of compile-expression "./boot/compile.scm" . 208942))
             (push)
             (push.iloc 2 . 0)
             (push.gloc.of alist-special-binary-subr-iloc-negate)
             (push.subr.gloc.of assq 2 "./boot/compile.scm" . 208985)
             (push.subr.gloc.of cdr 1 "./boot/compile.scm" . 208980)
             (call
               (touch.gloc.of make-iloc-operand)
               (push.iloc.1 . 0)
               (push.iloc 4 . 1)
               (apply.gloc.of make-iloc-operand "./boot/compile.scm" . 209037))
             (push)
             (push.iloc 3 . 0)
             (push.subr.gloc.of |.cons*| 3 "./boot/compile.scm" . 208980)
             (push.subr.gloc.of |.list| 1 "./boot/compile.scm" . 208980)
             (ret.subr.gloc.of |.append| "./boot/compile.scm" . 207913))
           (touch.gloc.of |compile-anonymous`2823*|)
           (push.iloc 4 . 0)
           (push.iloc 4 . 1)
           (push.iloc 4 . 3)
           (push.iloc 3 . 0)
           (apply.gloc.of |compile-anonymous`2823*| "./boot/compile.scm" . 209967))
         (apply.gloc.of
           |.call-with-values|
           (|.call-with-values|
             (lambda ()
               (if (and (fixnum? |opd1`2832*|)
                        (symbol? |opd2`2832*|)
                        (iloc? |opd2`2832*| |cte`2822*|))
                   (values
                     |opd2`2832*|
                     |opd1`2832*|
                     (cdr (assq |subr`2828*| alist-special-binary-subr-negate)))
                   (if (and (fixnum? |opd2`2832*|)
                            (symbol? |opd1`2832*|)
                            (iloc? |opd1`2832*| |cte`2822*|))
                       (values
                         |opd1`2832*|
                         |opd2`2832*|
                         (cdr (assq |subr`2828*| alist-special-binary-subr)))
                       (values #f #f #f))))
             (lambda (|lhs`2834*| |rhs`2834*| |inst`2834*|)
               (if |inst`2834*|
                   (|.list|
                     (|.cons*|
                       |inst`2834*|
                       (make-iloc-operand |lhs`2834*| |cte`2822*|)
                       |rhs`2834*|
                       |comment`2826*|))
                   (if (iloc? |opd2`2832*| |cte`2822*|)
                       (|.append|
                         (compile-expression |opd1`2832*| |cte`2822*| #f #f)
                         (|.list|
                           (|.cons*|
                             (cdr (assq |subr`2828*| alist-special-binary-subr-iloc))
                             (make-iloc-operand |opd2`2832*| |cte`2822*|)
                             |comment`2826*|)))
                       (if (iloc? |opd1`2832*| |cte`2822*|)
                           (|.append|
                             (compile-expression |opd2`2832*| |cte`2822*| #f #f)
                             (|.list|
                               (|.cons*|
                                 (cdr (assq |subr`2828*| alist-special-binary-subr-iloc-negate))
                                 (make-iloc-operand |opd1`2832*| |cte`2822*|)
                                 |comment`2826*|)))
                           (|compile-anonymous`2823*|
                             |form`2822*|
                             |cte`2822*|
                             |tail`2822*|
                             |comment`2826*|))))))))
       (push.iloc.0 . 0)
       (gloc.of +)
       (if.eq?
         (push.cadr.iloc (2 . 0) "./boot/compile.scm" . 212011)
         (push.iloc 2 . 0)
         (push.subr.gloc.of caddr 1 "./boot/compile.scm" . 212030)
         (extend . 2)
         (push.close
           (0 0)
           (call
             (push.iloc.1 . 0)
             (subr.gloc.of fixnum? 1 "./boot/compile.scm" . 213061)
             (if.false.ret)
             (iloc.1 . 1)
             (if.not.symbol?.ret.const . #f)
             (touch.gloc.of iloc?)
             (push.iloc.1 . 1)
             (push.iloc 4 . 1)
             (apply.gloc.of iloc? "./boot/compile.scm" . 213091))
           (if.true
             (push.iloc.1 . 1)
             (push.iloc.1 . 0)
             (ret.subr.gloc.of values "./boot/compile.scm" . 213109))
           (call
             (push.iloc.1 . 1)
             (subr.gloc.of fixnum? 1 "./boot/compile.scm" . 214085)
             (if.false.ret)
             (iloc.1 . 0)
             (if.not.symbol?.ret.const . #f)
             (touch.gloc.of iloc?)
             (push.iloc.1 . 0)
             (push.iloc 4 . 1)
             (apply.gloc.of iloc? "./boot/compile.scm" . 214115))
           (if.true
             (push.iloc.1 . 0)
             (push.iloc.1 . 1)
             (ret.subr.gloc.of values "./boot/compile.scm" . 214133))
           (push.const . #f)
           (push.const . #f)
           (ret.subr.gloc.of values "./boot/compile.scm" . 215109))
         (push.close
           (2 0)
           (iloc.0 . 0)
           (if.true
             (push.const . n+.iloc)
             (call
               (touch.gloc.of make-iloc-operand)
               (push.iloc.0 . 0)
               (push.iloc 4 . 1)
               (apply.gloc.of make-iloc-operand "./boot/compile.scm" . 217139))
             (push)
             (push.iloc.0 . 1)
             (push.iloc 3 . 0)
             (push.subr.gloc.of |.cons*| 4 "./boot/compile.scm" . 217139)
             (ret.subr.gloc.of |.list| "./boot/compile.scm" . 216099))
           (touch.gloc.of |compile-anonymous`2823*|)
           (push.iloc 4 . 0)
           (push.iloc 4 . 1)
           (push.iloc 4 . 3)
           (push.iloc 3 . 0)
           (apply.gloc.of |compile-anonymous`2823*| "./boot/compile.scm" . 218151))
         (apply.gloc.of
           |.call-with-values|
           (|.call-with-values|
             (lambda ()
               (if (and (fixnum? |opd1`2836*|)
                        (symbol? |opd2`2836*|)
                        (iloc? |opd2`2836*| |cte`2822*|))
                   (values |opd2`2836*| |opd1`2836*|)
                   (if (and (fixnum? |opd2`2836*|)
                            (symbol? |opd1`2836*|)
                            (iloc? |opd1`2836*| |cte`2822*|))
                       (values |opd1`2836*| |opd2`2836*|)
                       (values #f #f))))
             (lambda (|lhs`2838*| |rhs`2838*|)
               (if |lhs`2838*|
                   (|.list|
                     (|.cons*|
                       'n+.iloc
                       (make-iloc-operand |lhs`2838*| |cte`2822*|)
                       |rhs`2838*|
                       |comment`2826*|))
                   (|compile-anonymous`2823*|
                     |form`2822*|
                     |cte`2822*|
                     |tail`2822*|
                     |comment`2826*|))))))
       (push.iloc.0 . 0)
       (gloc.of -)
       (if.eq?
         (push.cadr.iloc (2 . 0) "./boot/compile.scm" . 220203)
         (push.iloc 2 . 0)
         (push.subr.gloc.of caddr 1 "./boot/compile.scm" . 220222)
         (extend . 2)
         (call
           (push.iloc.0 . 1)
           (subr.gloc.of fixnum? 1 "./boot/compile.scm" . 221226)
           (if.false.ret)
           (iloc.0 . 0)
           (if.not.symbol?.ret.const . #f)
           (touch.gloc.of iloc?)
           (push.iloc.0 . 0)
           (push.iloc 3 . 1)
           (apply.gloc.of iloc? "./boot/compile.scm" . 221256))
         (if.true
           (push.const . n+.iloc)
           (call
             (touch.gloc.of make-iloc-operand)
             (push.iloc.0 . 0)
             (push.iloc 3 . 1)
             (apply.gloc.of make-iloc-operand "./boot/compile.scm" . 222257))
           (push)
           (push.iloc.0 . 1)
           (push.subr.gloc.of - 1 "./boot/compile.scm" . 222287)
           (push.iloc 2 . 0)
           (push.subr.gloc.of |.cons*| 4 "./boot/compile.scm" . 222257)
           (ret.subr.gloc.of |.list| "./boot/compile.scm" . 221217))
         (touch.gloc.of |compile-anonymous`2823*|)
         (push.iloc 3 . 0)
         (push.iloc 3 . 1)
         (push.iloc 3 . 3)
         (push.iloc 2 . 0)
         (apply.gloc.of |compile-anonymous`2823*| "./boot/compile.scm" . 223269))
       (push.iloc.0 . 0)
       (gloc.of vector-ref)
       (if.eq?
         (push.cadr.iloc (2 . 0) "./boot/compile.scm" . 225323)
         (push.iloc 2 . 0)
         (push.subr.gloc.of caddr 1 "./boot/compile.scm" . 225342)
         (extend . 2)
         (call
           (touch.gloc.of iloc?)
           (push.iloc.0 . 0)
           (push.iloc 3 . 1)
           (apply.gloc.of iloc? "./boot/compile.scm" . 226341))
         (if.true
           (call
             (touch.gloc.of compile-expression)
             (push.iloc.0 . 1)
             (push.iloc 3 . 1)
             (push.const . #f)
             (push.const . #f)
             (apply.gloc.of compile-expression "./boot/compile.scm" . 227369))
           (push)
           (push.const . vector-ref.iloc)
           (call
             (touch.gloc.of make-iloc-operand)
             (push.iloc.0 . 0)
             (push.iloc 3 . 1)
             (apply.gloc.of make-iloc-operand "./boot/compile.scm" . 227423))
           (push)
           (push.iloc 2 . 0)
           (push.subr.gloc.of |.cons*| 3 "./boot/compile.scm" . 227423)
           (push.subr.gloc.of |.list| 1 "./boot/compile.scm" . 227423)
           (ret.subr.gloc.of |.append| "./boot/compile.scm" . 226337))
         (touch.gloc.of |compile-anonymous`2823*|)
         (push.iloc 3 . 0)
         (push.iloc 3 . 1)
         (push.iloc 3 . 3)
         (push.iloc 2 . 0)
         (apply.gloc.of |compile-anonymous`2823*| "./boot/compile.scm" . 228389))
       (touch.gloc.of |compile-anonymous`2823*|)
       (push.iloc 2 . 0)
       (push.iloc 2 . 1)
       (push.iloc 2 . 3)
       (push.iloc.1 . 0)
       (apply.gloc.of |compile-anonymous`2823*| "./boot/compile.scm" . 230431))
     (touch.gloc.of |compile-anonymous`2823*|)
     (push.iloc 2 . 0)
     (push.iloc 2 . 1)
     (push.iloc 2 . 3)
     (push.iloc.1 . 0)
     (apply.gloc.of |compile-anonymous`2823*| "./boot/compile.scm" . 232468))
   (touch.gloc.of |compile-anonymous`2823*|)
   (push.iloc 2 . 0)
   (push.iloc 2 . 1)
   (push.iloc 2 . 3)
   (push.iloc.1 . 0)
   (apply.gloc.of |compile-anonymous`2823*| "./boot/compile.scm" . 233485))
 (set.gloc.of compile-subr-expression)
 (ret.const.unspec))
((call
   (subr.gloc.of make-core-hashtable 0)
   (push)
   (extend . 1)
   (call
     (push.close
       (1 0)
       (push.iloc.1 . 0)
       (push.iloc.0 . 0)
       (push.const . #t)
       (ret.subr.gloc.of core-hashtable-set! "./boot/compile.scm" . 237595))
     (push.gloc.of unspecified)
     (push.gloc.of car)
     (push.gloc.of cdr)
     (push.gloc.of cadr)
     (push.gloc.of cddr)
     (push.gloc.of +)
     (push.gloc.of -)
     (push.gloc.of cons)
     (push.gloc.of vector-ref)
     (push.subr.gloc.of list 9 "./boot/compile.scm" . 238607)
     (apply.gloc.of for-each "./boot/compile.scm" . 237573))
   (push.iloc.0 . 0)
   (push.const . #t)
   (ret.subr.gloc.of core-hashtable-copy "./boot/compile.scm" . 239621))
 (set.gloc.of ht-special-subr-argument)
 (ret.const.unspec))
((close
   (3 0 . compile-anonymous)
   (call
     (touch.gloc.of compile-argument-each)
     (push.cdr.iloc (0 . 0) "./boot/compile.scm" . 246820)
     (push.iloc.0 . 1)
     (apply.gloc.of compile-argument-each "./boot/compile.scm" . 246797))
   (push)
   (push.const . push.subr.gloc.of)
   (push.car.iloc (0 . 0) "./boot/compile.scm" . 246856)
   (push.cdr.iloc (0 . 0) "./boot/compile.scm" . 246876)
   (push.subr.gloc.of length 1 "./boot/compile.scm" . 246868)
   (push.iloc.0 . 2)
   (push.subr.gloc.of |.cons*| 4 "./boot/compile.scm" . 246856)
   (push.subr.gloc.of |.list| 1 "./boot/compile.scm" . 246856)
   (ret.subr.gloc.of |.append| "./boot/compile.scm" . 245767))
 (set.gloc.of |compile-anonymous`2849*|)
 (close
   (2 0 . compile-subr-argument)
   (call
     (touch.gloc.of make-application-comment)
     (push.iloc.0 . 0)
     (apply.gloc.of make-application-comment "./boot/compile.scm" . 248852))
   (push)
   (extend . 1)
   (push.car.iloc (1 . 0) "./boot/compile.scm" . 249892)
   (push.subr.gloc.of top-level-value 1 "./boot/compile.scm" . 249875)
   (extend . 1)
   (push.gloc.of ht-special-subr-argument)
   (push.iloc.0 . 0)
   (subr.gloc.of core-hashtable-contains? 2 "./boot/compile.scm" . 250893)
   (if.true
     (cdr.iloc (2 . 0) "./boot/compile.scm" . 251931)
     (if.null?
       (push.iloc.0 . 0)
       (gloc.of unspecified)
       (if.eq?
         (push.const . push.const.unspec)
         (push.subr.gloc.of list 1 "./boot/compile.scm" . 252984)
         (ret.subr.gloc.of list "./boot/compile.scm" . 252978))
       (push.const . subr.gloc.of)
       (push.car.iloc (2 . 0) "./boot/compile.scm" . 255020)
       (push.const 0)
       (push.subr.gloc.of |.cons*| 3 "./boot/compile.scm" . 255020)
       (push.const . push)
       (push.subr.gloc.of list 1 "./boot/compile.scm" . 255035)
       (ret.subr.gloc.of |.list| "./boot/compile.scm" . 253978))
     (cddr.iloc (2 . 0) "./boot/compile.scm" . 256027)
     (if.null?
       (call
         (touch.gloc.of iloc?)
         (push.cadr.iloc (2 . 0) "./boot/compile.scm" . 257055)
         (push.iloc 2 . 1)
         (apply.gloc.of iloc? "./boot/compile.scm" . 257048))
       (if.true
         (push.iloc.0 . 0)
         (gloc.of car)
         (if.eq?
           (push.const . push.car.iloc)
           (call
             (touch.gloc.of make-iloc-operand)
             (push.cadr.iloc (2 . 0) "./boot/compile.scm" . 258131)
             (push.iloc 2 . 1)
             (apply.gloc.of make-iloc-operand "./boot/compile.scm" . 258112))
           (push)
           (push.iloc.1 . 0)
           (push.subr.gloc.of |.cons*| 3 "./boot/compile.scm" . 258112)
           (ret.subr.gloc.of |.list| "./boot/compile.scm" . 258078))
         (push.iloc.0 . 0)
         (gloc.of cdr)
         (if.eq?
           (push.const . push.cdr.iloc)
           (call
             (touch.gloc.of make-iloc-operand)
             (push.cadr.iloc (2 . 0) "./boot/compile.scm" . 259155)
             (push.iloc 2 . 1)
             (apply.gloc.of make-iloc-operand "./boot/compile.scm" . 259136))
           (push)
           (push.iloc.1 . 0)
           (push.subr.gloc.of |.cons*| 3 "./boot/compile.scm" . 259136)
           (ret.subr.gloc.of |.list| "./boot/compile.scm" . 259102))
         (push.iloc.0 . 0)
         (gloc.of cadr)
         (if.eq?
           (push.const . push.cadr.iloc)
           (call
             (touch.gloc.of make-iloc-operand)
             (push.cadr.iloc (2 . 0) "./boot/compile.scm" . 260181)
             (push.iloc 2 . 1)
             (apply.gloc.of make-iloc-operand "./boot/compile.scm" . 260162))
           (push)
           (push.iloc.1 . 0)
           (push.subr.gloc.of |.cons*| 3 "./boot/compile.scm" . 260162)
           (ret.subr.gloc.of |.list| "./boot/compile.scm" . 260126))
         (push.iloc.0 . 0)
         (gloc.of cddr)
         (if.eq?
           (push.const . push.cddr.iloc)
           (call
             (touch.gloc.of make-iloc-operand)
             (push.cadr.iloc (2 . 0) "./boot/compile.scm" . 261205)
             (push.iloc 2 . 1)
             (apply.gloc.of make-iloc-operand "./boot/compile.scm" . 261186))
           (push)
           (push.iloc.1 . 0)
           (push.subr.gloc.of |.cons*| 3 "./boot/compile.scm" . 261186)
           (ret.subr.gloc.of |.list| "./boot/compile.scm" . 261150))
         (touch.gloc.of |compile-anonymous`2849*|)
         (push.iloc 2 . 0)
         (push.iloc 2 . 1)
         (push.iloc.1 . 0)
         (apply.gloc.of |compile-anonymous`2849*| "./boot/compile.scm" . 262180))
       (touch.gloc.of |compile-anonymous`2849*|)
       (push.iloc 2 . 0)
       (push.iloc 2 . 1)
       (push.iloc.1 . 0)
       (apply.gloc.of |compile-anonymous`2849*| "./boot/compile.scm" . 263192))
     (push.iloc 2 . 0)
     (subr.gloc.of cdddr 1 "./boot/compile.scm" . 264219)
     (if.null?
       (push.iloc.0 . 0)
       (gloc.of cons)
       (if.eq?
         (call
           (touch.gloc.of compile-argument)
           (push.cadr.iloc (2 . 0) "./boot/compile.scm" . 266289)
           (push.iloc 2 . 1)
           (apply.gloc.of compile-argument "./boot/compile.scm" . 266271))
         (push)
         (call
           (touch.gloc.of compile-expression)
           (push.iloc 2 . 0)
           (push.subr.gloc.of caddr 1 "./boot/compile.scm" . 266328)
           (push.iloc 2 . 1)
           (push.const . #f)
           (push.const . #f)
           (apply.gloc.of compile-expression "./boot/compile.scm" . 266308))
         (push)
         (push.const . push.cons)
         (push.subr.gloc.of list 1 "./boot/compile.scm" . 266353)
         (push.subr.gloc.of |.list| 1 "./boot/compile.scm" . 266353)
         (push.subr.gloc.of |.append| 2 "./boot/compile.scm" . 266308)
         (ret.subr.gloc.of |.append| "./boot/compile.scm" . 265242))
       (push.iloc.0 . 0)
       (gloc.of +)
       (if.eq?
         (push.cadr.iloc (2 . 0) "./boot/compile.scm" . 268327)
         (push.iloc 2 . 0)
         (push.subr.gloc.of caddr 1 "./boot/compile.scm" . 268346)
         (extend . 2)
         (push.close
           (0 0)
           (call
             (call
               (touch.gloc.of iloc?)
               (push.iloc.1 . 0)
               (push.iloc 4 . 1)
               (apply.gloc.of iloc? "./boot/compile.scm" . 269377))
             (if.false.ret)
             (push.iloc.1 . 1)
             (ret.subr.gloc.of fixnum? "./boot/compile.scm" . 269394))
           (if.true
             (push.iloc.1 . 0)
             (push.iloc.1 . 1)
             (ret.subr.gloc.of values "./boot/compile.scm" . 269410))
           (call
             (call
               (touch.gloc.of iloc?)
               (push.iloc.1 . 1)
               (push.iloc 4 . 1)
               (apply.gloc.of iloc? "./boot/compile.scm" . 270401))
             (if.false.ret)
             (push.iloc.1 . 0)
             (ret.subr.gloc.of fixnum? "./boot/compile.scm" . 270418))
           (if.true
             (push.iloc.1 . 1)
             (push.iloc.1 . 0)
             (ret.subr.gloc.of values "./boot/compile.scm" . 270434))
           (push.const . #f)
           (push.const . #f)
           (ret.subr.gloc.of values "./boot/compile.scm" . 271425))
         (push.close
           (2 0)
           (iloc.0 . 0)
           (if.true
             (push.const . push.n+.iloc)
             (call
               (touch.gloc.of make-iloc-operand)
               (push.iloc.0 . 0)
               (push.iloc 4 . 1)
               (apply.gloc.of make-iloc-operand "./boot/compile.scm" . 273460))
             (push)
             (push.iloc.0 . 1)
             (push.iloc 3 . 0)
             (push.subr.gloc.of |.cons*| 4 "./boot/compile.scm" . 273460)
             (ret.subr.gloc.of |.list| "./boot/compile.scm" . 272415))
           (touch.gloc.of |compile-anonymous`2849*|)
           (push.iloc 4 . 0)
           (push.iloc 4 . 1)
           (push.iloc 3 . 0)
           (apply.gloc.of |compile-anonymous`2849*| "./boot/compile.scm" . 274467))
         (apply.gloc.of
           |.call-with-values|
           (|.call-with-values|
             (lambda ()
               (if (and (iloc? |opd1`2856*| |cte`2848*|) (fixnum? |opd2`2856*|))
                   (values |opd1`2856*| |opd2`2856*|)
                   (if (and (iloc? |opd2`2856*| |cte`2848*|) (fixnum? |opd1`2856*|))
                       (values |opd2`2856*| |opd1`2856*|)
                       (values #f #f))))
             (lambda (|lhs`2858*| |rhs`2858*|)
               (if |lhs`2858*|
                   (|.list|
                     (|.cons*|
                       'push.n+.iloc
                       (make-iloc-operand |lhs`2858*| |cte`2848*|)
                       |rhs`2858*|
                       |comment`2852*|))
                   (|compile-anonymous`2849*| |form`2848*| |cte`2848*| |comment`2852*|))))))
       (push.iloc.0 . 0)
       (gloc.of -)
       (if.eq?
         (push.cadr.iloc (2 . 0) "./boot/compile.scm" . 276519)
         (push.iloc 2 . 0)
         (push.subr.gloc.of caddr 1 "./boot/compile.scm" . 276538)
         (extend . 2)
         (call
           (call
             (touch.gloc.of iloc?)
             (push.iloc.0 . 0)
             (push.iloc 3 . 1)
             (apply.gloc.of iloc? "./boot/compile.scm" . 277542))
           (if.false.ret)
           (push.iloc.0 . 1)
           (ret.subr.gloc.of fixnum? "./boot/compile.scm" . 277559))
         (if.true
           (push.const . push.n+.iloc)
           (call
             (touch.gloc.of make-iloc-operand)
             (push.iloc.0 . 0)
             (push.iloc 3 . 1)
             (apply.gloc.of make-iloc-operand "./boot/compile.scm" . 278578))
           (push)
           (push.iloc.0 . 1)
           (push.subr.gloc.of - 1 "./boot/compile.scm" . 278608)
           (push.iloc 2 . 0)
           (push.subr.gloc.of |.cons*| 4 "./boot/compile.scm" . 278578)
           (ret.subr.gloc.of |.list| "./boot/compile.scm" . 277533))
         (touch.gloc.of |compile-anonymous`2849*|)
         (push.iloc 3 . 0)
         (push.iloc 3 . 1)
         (push.iloc 2 . 0)
         (apply.gloc.of |compile-anonymous`2849*| "./boot/compile.scm" . 279585))
       (push.iloc.0 . 0)
       (gloc.of vector-ref)
       (if.eq?
         (push.cadr.iloc (2 . 0) "./boot/compile.scm" . 282663)
         (push.iloc 2 . 0)
         (push.subr.gloc.of caddr 1 "./boot/compile.scm" . 282682)
         (extend . 2)
         (call
           (touch.gloc.of iloc?)
           (push.iloc.0 . 0)
           (push.iloc 3 . 1)
           (apply.gloc.of iloc? "./boot/compile.scm" . 283681))
         (if.true
           (call
             (touch.gloc.of compile-argument)
             (push.iloc.0 . 1)
             (push.iloc 3 . 1)
             (apply.gloc.of compile-argument "./boot/compile.scm" . 284709))
           (push)
           (push.const . push.vector-ref.iloc)
           (call
             (touch.gloc.of make-iloc-operand)
             (push.iloc.0 . 0)
             (push.iloc 3 . 1)
             (apply.gloc.of make-iloc-operand "./boot/compile.scm" . 284760))
           (push)
           (push.iloc 2 . 0)
           (push.subr.gloc.of |.cons*| 3 "./boot/compile.scm" . 284760)
           (push.subr.gloc.of |.list| 1 "./boot/compile.scm" . 284760)
           (ret.subr.gloc.of |.append| "./boot/compile.scm" . 283677))
         (touch.gloc.of |compile-anonymous`2849*|)
         (push.iloc 3 . 0)
         (push.iloc 3 . 1)
         (push.iloc 2 . 0)
         (apply.gloc.of |compile-anonymous`2849*| "./boot/compile.scm" . 285729))
       (touch.gloc.of |compile-anonymous`2849*|)
       (push.iloc 2 . 0)
       (push.iloc 2 . 1)
       (push.iloc.1 . 0)
       (apply.gloc.of |compile-anonymous`2849*| "./boot/compile.scm" . 288795))
     (touch.gloc.of |compile-anonymous`2849*|)
     (push.iloc 2 . 0)
     (push.iloc 2 . 1)
     (push.iloc.1 . 0)
     (apply.gloc.of |compile-anonymous`2849*| "./boot/compile.scm" . 290836))
   (cdr.iloc (2 . 0) "./boot/compile.scm" . 291864)
   (if.null?
     (push.const . subr.gloc.of)
     (push.car.iloc (2 . 0) "./boot/compile.scm" . 292898)
     (push.const 0)
     (push.subr.gloc.of |.cons*| 3 "./boot/compile.scm" . 292898)
     (push.const . push)
     (push.subr.gloc.of list 1 "./boot/compile.scm" . 292913)
     (ret.subr.gloc.of |.list| "./boot/compile.scm" . 291853))
   (touch.gloc.of |compile-anonymous`2849*|)
   (push.iloc 2 . 0)
   (push.iloc 2 . 1)
   (push.iloc.1 . 0)
   (apply.gloc.of |compile-anonymous`2849*| "./boot/compile.scm" . 293905))
 (set.gloc.of compile-subr-argument)
 (ret.const.unspec))
((close
   (2 0 . compile-argument-each)
   (extend.enclose+
     (2 0 . loop)
     (iloc.0 . 0)
     (if.null?
       (push.gloc.of append)
       (push.iloc.0 . 1)
       (push.subr.gloc.of reverse 1 "./boot/compile.scm" . 299048)
       (apply.gloc.of apply "./boot/compile.scm" . 299034))
     (push.cdr.iloc (0 . 0) "./boot/compile.scm" . 302102)
     (call
       (touch.gloc.of compile-argument)
       (push.car.iloc (0 . 0) "./boot/compile.scm" . 301097)
       (push.iloc 2 . 1)
       (apply.gloc.of compile-argument "./boot/compile.scm" . 301079))
     (push)
     (iloc.0 . 1)
     (push.cons)
     (apply.iloc+ (1 . 0) "./boot/compile.scm" . 302096))
   (push.iloc.1 . 0)
   (push.const)
   (apply.iloc+ (0 . 0) "./boot/compile.scm" . 299015))
 (set.gloc.of compile-argument-each)
 (ret.const.unspec))
((close
   (2 0 . compile-argument)
   (iloc.0 . 0)
   (if.pair?
     (call
       (touch.gloc.of top-level-subr)
       (push.car.iloc (0 . 0) "./boot/compile.scm" . 307235)
       (apply.gloc.of top-level-subr "./boot/compile.scm" . 307219))
     (if.true
       (touch.gloc.of compile-subr-argument)
       (push.iloc.0 . 0)
       (push.iloc.0 . 1)
       (apply.gloc.of compile-subr-argument "./boot/compile.scm" . 308243))
     (push.car.iloc (0 . 0) "./boot/compile.scm" . 309272)
     (const . lambda)
     (if.eq?
       (call
         (touch.gloc.of compile-lambda-helper)
         (push.cadr.iloc (0 . 0) "./boot/compile.scm" . 310326)
         (push.cddr.iloc (0 . 0) "./boot/compile.scm" . 310338)
         (call
           (touch.gloc.of make-closure-comment)
           (push.iloc.0 . 0)
           (apply.gloc.of make-closure-comment "./boot/compile.scm" . 310350))
         (push)
         (push.iloc.0 . 1)
         (apply.gloc.of compile-lambda-helper "./boot/compile.scm" . 310303))
       (push)
       (extend . 1)
       (call
         (touch.gloc.of local-closure?)
         (push.iloc.1 . 0)
         (apply.gloc.of local-closure? "./boot/compile.scm" . 311321))
       (if.true
         (push.const . push.close+)
         (iloc.0 . 0)
         (push.cons)
         (ret.subr.gloc.of list "./boot/compile.scm" . 312345))
       (push.const . push.close)
       (iloc.0 . 0)
       (push.cons)
       (ret.subr.gloc.of list "./boot/compile.scm" . 313369))
     (push.car.iloc (0 . 0) "./boot/compile.scm" . 314392)
     (const . quote)
     (if.eq?
       (push.const . push.const)
       (cadr.iloc (0 . 0) "./boot/compile.scm" . 315428)
       (push.cons)
       (ret.subr.gloc.of |.list| "./boot/compile.scm" . 314386))
     (call
       (touch.gloc.of compile-expression)
       (push.iloc.0 . 0)
       (push.iloc.0 . 1)
       (push.const . #f)
       (push.const . #f)
       (apply.gloc.of compile-expression "./boot/compile.scm" . 317463))
     (push)
     (push.const . push)
     (push.subr.gloc.of list 1 "./boot/compile.scm" . 317500)
     (push.subr.gloc.of |.list| 1 "./boot/compile.scm" . 317500)
     (ret.subr.gloc.of |.append| "./boot/compile.scm" . 316434))
   (iloc.0 . 0)
   (if.symbol?
     (push.iloc.0 . 0)
     (const . |.&UNDEF|)
     (if.eq?
       (push.const . push.const.undef)
       (push.subr.gloc.of list 1 "./boot/compile.scm" . 319533)
       (ret.subr.gloc.of list "./boot/compile.scm" . 319527))
     (call
       (touch.gloc.of iloc?)
       (push.iloc.0 . 0)
       (push.iloc.0 . 1)
       (apply.gloc.of iloc? "./boot/compile.scm" . 321559))
     (if.true
       (call
         (touch.gloc.of make-iloc-operand)
         (push.iloc.0 . 0)
         (push.iloc.0 . 1)
         (apply.gloc.of make-iloc-operand "./boot/compile.scm" . 322594))
       (push)
       (extend . 1)
       (push.car.iloc (0 . 0) "./boot/compile.scm" . 323615)
       (extend . 1)
       (push.iloc.0 . 0)
       (const . 0)
       (if.eq?
         (push.const . push.iloc.0)
         (cdr.iloc (1 . 0) "./boot/compile.scm" . 324658)
         (push.cons)
         (ret.subr.gloc.of |.list| "./boot/compile.scm" . 324635))
       (push.iloc.0 . 0)
       (const . 1)
       (if.eq?
         (push.const . push.iloc.1)
         (cdr.iloc (1 . 0) "./boot/compile.scm" . 325682)
         (push.cons)
         (ret.subr.gloc.of |.list| "./boot/compile.scm" . 325659))
       (push.const . push.iloc)
       (iloc.1 . 0)
       (push.cons)
       (ret.subr.gloc.of |.list| "./boot/compile.scm" . 326683))
     (push.const . push.gloc.of)
     (push.iloc.0 . 0)
     (push.subr.gloc.of |.list| 2 (|.list| 'push.gloc.of |form`2874*|))
     (ret.subr.gloc.of |.list| "./boot/compile.scm" . 321555))
   (push.const . push.const)
   (iloc.0 . 0)
   (push.cons)
   (ret.subr.gloc.of |.list| "./boot/compile.scm" . 328715))
 (set.gloc.of compile-argument)
 (ret.const.unspec))
((close
   (4 0 . compile-call)
   (iloc.0 . 0)
   (if.pair?
     (call
       (touch.gloc.of compile-expression)
       (push.iloc.0 . 0)
       (push.iloc.0 . 3)
       (push.const . #f)
       (push.const . #f)
       (apply.gloc.of compile-expression "./boot/compile.scm" . 334864))
     (push)
     (push.const . apply)
     (push.subr.gloc.of list 1 "./boot/compile.scm" . 334901)
     (push.subr.gloc.of |.list| 1 "./boot/compile.scm" . 334901)
     (ret.subr.gloc.of |.append| "./boot/compile.scm" . 333835))
   (iloc.0 . 0)
   (if.symbol?
     (call
       (touch.gloc.of iloc?)
       (push.iloc.0 . 0)
       (push.iloc.0 . 3)
       (apply.gloc.of iloc? "./boot/compile.scm" . 336915))
     (if.true
       (call
         (touch.gloc.of ht-local-closures)
         (apply.gloc.of ht-local-closures "./boot/compile.scm" . 337969))
       (push)
       (push.iloc.0 . 0)
       (subr.gloc.of core-hashtable-contains? 2 "./boot/compile.scm" . 337943)
       (if.true
         (push.const . apply.iloc+)
         (call
           (touch.gloc.of make-iloc-operand)
           (push.iloc.0 . 0)
           (push.iloc.0 . 3)
           (apply.gloc.of make-iloc-operand "./boot/compile.scm" . 338983))
         (push)
         (push.iloc.0 . 2)
         (push.subr.gloc.of |.cons*| 3 "./boot/compile.scm" . 338983)
         (ret.subr.gloc.of |.list| "./boot/compile.scm" . 337939))
       (push.const . apply.iloc)
       (call
         (touch.gloc.of make-iloc-operand)
         (push.iloc.0 . 0)
         (push.iloc.0 . 3)
         (apply.gloc.of make-iloc-operand "./boot/compile.scm" . 340006))
       (push)
       (push.iloc.0 . 2)
       (push.subr.gloc.of |.cons*| 3 "./boot/compile.scm" . 340006)
       (ret.subr.gloc.of |.list| "./boot/compile.scm" . 337939))
     (call
       (touch.gloc.of top-level-subr)
       (push.iloc.0 . 0)
       (apply.gloc.of top-level-subr "./boot/compile.scm" . 341011))
     (if.true
       (push.const . ret.subr.gloc.of)
       (push.iloc.0 . 0)
       (push.iloc.0 . 2)
       (push.subr.gloc.of |.cons*| 3 (|.cons*| 'ret.subr.gloc.of |proc`2882*| |comment`2882*|))
       (ret.subr.gloc.of |.list| "./boot/compile.scm" . 341010))
     (push.const . apply.gloc.of)
     (push.iloc.0 . 0)
     (push.iloc.0 . 2)
     (push.subr.gloc.of |.cons*| 3 (|.cons*| 'apply.gloc.of |proc`2882*| |comment`2882*|))
     (ret.subr.gloc.of |.list| "./boot/compile.scm" . 343058))
   (push.const . const)
   (iloc.0 . 0)
   (push.cons)
   (push.const . apply)
   (iloc.0 . 2)
   (push.cons)
   (ret.subr.gloc.of |.list| "./boot/compile.scm" . 345099))
 (set.gloc.of compile-call)
 (ret.const.unspec))
((close
   (4 0 . compile-expression-begin)
   (push.cdr.iloc (0 . 0) "./boot/compile.scm" . 350225)
   (extend . 1)
   (iloc.0 . 0)
   (if.null?
     (iloc.1 . 3)
     (if.true
       (push.const . ret.const.unspec)
       (push.subr.gloc.of list 1 "./boot/compile.scm" . 352285)
       (ret.subr.gloc.of list "./boot/compile.scm" . 352279))
     (ret.const))
   (cdr.iloc (0 . 0) "./boot/compile.scm" . 353301)
   (if.null?
     (touch.gloc.of compile-expression)
     (push.car.iloc (0 . 0) "./boot/compile.scm" . 354338)
     (push.iloc.1 . 1)
     (push.iloc.1 . 2)
     (push.iloc.1 . 3)
     (apply.gloc.of compile-expression "./boot/compile.scm" . 354318))
   (touch.gloc.of compile-expression-seq)
   (push.iloc.0 . 0)
   (push.iloc.1 . 1)
   (push.iloc.1 . 2)
   (push.iloc.1 . 3)
   (apply.gloc.of compile-expression-seq "./boot/compile.scm" . 356366))
 (set.gloc.of compile-expression-begin)
 (ret.const.unspec))
((close
   (4 0 . compile-expression-quote)
   (iloc.0 . 2)
   (if.true.ret.const)
   (iloc.0 . 3)
   (if.true
     (push.const . ret.const)
     (cadr.iloc (0 . 0) "./boot/compile.scm" . 360466)
     (push.cons)
     (ret.subr.gloc.of |.list| "./boot/compile.scm" . 362509))
   (push.const . const)
   (cadr.iloc (0 . 0) "./boot/compile.scm" . 360466)
   (push.cons)
   (ret.subr.gloc.of |.list| "./boot/compile.scm" . 363533))
 (set.gloc.of compile-expression-quote)
 (ret.const.unspec))
((close
   (4 0 . compile-expression-define)
   (call
     (touch.gloc.of compile-expression)
     (push.iloc.0 . 0)
     (push.subr.gloc.of caddr 1 "./boot/compile.scm" . 367653)
     (push.iloc.0 . 1)
     (push.const . #f)
     (push.const . #f)
     (apply.gloc.of compile-expression "./boot/compile.scm" . 367633))
   (push)
   (push.const . set.gloc.of)
   (push.cadr.iloc (0 . 0) "./boot/compile.scm" . 369694)
   (push.subr.gloc.of |.list| 2 "./boot/compile.scm" . 369694)
   (call
     (iloc.0 . 3)
     (if.true
       (push.const . ret.const.unspec)
       (push.subr.gloc.of list 1 "./boot/compile.scm" . 368674)
       (ret.subr.gloc.of list "./boot/compile.scm" . 368668))
     (ret.const))
   (push.cons)
   (ret.subr.gloc.of |.append| "./boot/compile.scm" . 367621))
 (set.gloc.of compile-expression-define)
 (ret.const.unspec))
((close
   (4 0 . compile-expression-set!)
   (call
     (touch.gloc.of compile-expression)
     (push.iloc.0 . 0)
     (push.subr.gloc.of caddr 1 "./boot/compile.scm" . 373797)
     (push.iloc.0 . 1)
     (push.const . #f)
     (push.const . #f)
     (apply.gloc.of compile-expression "./boot/compile.scm" . 373777))
   (push)
   (call
     (iloc.0 . 3)
     (if.true
       (push.const . ret.const.unspec)
       (push.subr.gloc.of list 1 "./boot/compile.scm" . 374818)
       (ret.subr.gloc.of list "./boot/compile.scm" . 374812))
     (ret.const))
   (push)
   (extend . 2)
   (call
     (touch.gloc.of iloc?)
     (push.cadr.iloc (1 . 0) "./boot/compile.scm" . 375829)
     (push.iloc.1 . 1)
     (apply.gloc.of iloc? "./boot/compile.scm" . 375822))
   (if.true
     (push.iloc.0 . 0)
     (push.const . set.iloc)
     (call
       (touch.gloc.of make-iloc-operand)
       (push.cadr.iloc (1 . 0) "./boot/compile.scm" . 376885)
       (push.iloc.1 . 1)
       (apply.gloc.of make-iloc-operand "./boot/compile.scm" . 376866))
     (push)
     (call
       (touch.gloc.of make-application-comment)
       (push.iloc.1 . 0)
       (apply.gloc.of make-application-comment "./boot/compile.scm" . 376905))
     (push)
     (push.subr.gloc.of |.cons*| 3 "./boot/compile.scm" . 376866)
     (iloc.0 . 1)
     (push.cons)
     (ret.subr.gloc.of |.append| "./boot/compile.scm" . 375821))
   (push.iloc.0 . 0)
   (call
     (subr.gloc.of backtrace 0 "./boot/compile.scm" . 378911)
     (if.true
       (touch.gloc.of compile-touch)
       (push.cadr.iloc (1 . 0) "./boot/compile.scm" . 378938)
       (push.iloc.1 . 1)
       (apply.gloc.of compile-touch "./boot/compile.scm" . 378923))
     (ret.const))
   (push)
   (push.const . set.gloc.of)
   (push.cadr.iloc (1 . 0) "./boot/compile.scm" . 379951)
   (call
     (touch.gloc.of make-application-comment)
     (push.iloc.1 . 0)
     (apply.gloc.of make-application-comment "./boot/compile.scm" . 379966))
   (push)
   (push.subr.gloc.of |.cons*| 3 "./boot/compile.scm" . 379951)
   (iloc.0 . 1)
   (push.cons)
   (push.subr.gloc.of |.append| 2 "./boot/compile.scm" . 379951)
   (ret.subr.gloc.of |.append| "./boot/compile.scm" . 378894))
 (set.gloc.of compile-expression-set!)
 (ret.const.unspec))
((close
   (4 0 . compile-expression-lambda)
   (call
     (touch.gloc.of compile-lambda-helper)
     (push.cadr.iloc (0 . 0) "./boot/compile.scm" . 384040)
     (push.cddr.iloc (0 . 0) "./boot/compile.scm" . 384052)
     (call
       (touch.gloc.of make-closure-comment)
       (push.iloc.0 . 0)
       (apply.gloc.of make-closure-comment "./boot/compile.scm" . 384064))
     (push)
     (push.iloc.0 . 1)
     (apply.gloc.of compile-lambda-helper "./boot/compile.scm" . 384017))
   (push)
   (extend . 1)
   (iloc.1 . 2)
   (if.true.ret.const)
   (iloc.1 . 3)
   (if.true
     (push.const . ret.close)
     (iloc.0 . 0)
     (push.cons)
     (ret.subr.gloc.of |.list| "./boot/compile.scm" . 386061))
   (push.const . close)
   (iloc.0 . 0)
   (push.cons)
   (ret.subr.gloc.of |.list| "./boot/compile.scm" . 387085))
 (set.gloc.of compile-expression-lambda)
 (ret.const.unspec))
((close
   (4 0 . compile-expression-let)
   (cadr.iloc (0 . 0) "./boot/compile.scm" . 391187)
   (if.null?
     (touch.gloc.of compile-expression-seq)
     (push.cddr.iloc (0 . 0) "./boot/compile.scm" . 392228)
     (push.iloc.0 . 1)
     (push.iloc.0 . 2)
     (push.iloc.0 . 3)
     (apply.gloc.of compile-expression-seq "./boot/compile.scm" . 392204))
   (call
     (touch.gloc.of collect-local-closure)
     (push.cadr.iloc (0 . 0) "./boot/compile.scm" . 394275)
     (apply.gloc.of collect-local-closure "./boot/compile.scm" . 394252))
   (call
     (push.gloc.of car)
     (push.cadr.iloc (0 . 0) "./boot/compile.scm" . 395297)
     (apply.gloc.of map "./boot/compile.scm" . 395288))
   (push)
   (extend . 1)
   (call
     (touch.gloc.of compile-argument-each)
     (call
       (push.gloc.of cadr)
       (push.cadr.iloc (1 . 0) "./boot/compile.scm" . 396351)
       (apply.gloc.of map "./boot/compile.scm" . 396341))
     (push)
     (push.iloc.1 . 1)
     (apply.gloc.of compile-argument-each "./boot/compile.scm" . 396318))
   (push)
   (push.const . extend)
   (push.iloc.0 . 0)
   (subr.gloc.of length 1 "./boot/compile.scm" . 397353)
   (push.cons)
   (call
     (touch.gloc.of compile-expression-seq)
     (push.cddr.iloc (1 . 0) "./boot/compile.scm" . 398392)
     (call
       (touch.gloc.of cte-extend-iloc)
       (push.iloc.0 . 0)
       (push.iloc.1 . 1)
       (apply.gloc.of cte-extend-iloc "./boot/compile.scm" . 398404))
     (push)
     (push.const . #f)
     (push.const . #t)
     (apply.gloc.of compile-expression-seq "./boot/compile.scm" . 398368))
   (push.cons)
   (push.subr.gloc.of |.append| 2 "./boot/compile.scm" . 396308)
   (extend . 1)
   (iloc 2 . 3)
   (if.true (ret.iloc 0 . 0))
   (push.const . call)
   (iloc.0 . 0)
   (push.cons)
   (ret.subr.gloc.of list "./boot/compile.scm" . 399390))
 (set.gloc.of compile-expression-let)
 (ret.const.unspec))
((close
   (2 0)
   (push.iloc.0 . 1)
   (push.const . set.iloc)
   (push.iloc.0 . 0)
   (push.subr.gloc.of |.list| 2 (|.list| 'set.iloc |iloc`2940*|))
   (push.subr.gloc.of |.list| 1 (|.list| (|.list| 'set.iloc |iloc`2940*|)))
   (ret.subr.gloc.of |.append| "./boot/compile.scm" . 436278))
 (set.gloc.of |.L845|)
 (close
   (4 0 . compile-expression-letrec*)
   (cadr.iloc (0 . 0) "./boot/compile.scm" . 403475)
   (if.null?
     (touch.gloc.of compile-expression-seq)
     (push.cddr.iloc (0 . 0) "./boot/compile.scm" . 404516)
     (push.iloc.0 . 1)
     (push.iloc.0 . 2)
     (push.iloc.0 . 3)
     (apply.gloc.of compile-expression-seq "./boot/compile.scm" . 404492))
   (push.iloc.0 . 0)
   (subr.gloc.of cdadr 1 "./boot/compile.scm" . 405523)
   (if.null?
     (push.iloc.0 . 0)
     (push.subr.gloc.of caadr 1 "./boot/compile.scm" . 406555)
     (extend . 1)
     (call
       (touch.gloc.of cte-extend-iloc)
       (push.car.iloc (0 . 0) "./boot/compile.scm" . 407600)
       (push.subr.gloc.of list 1 "./boot/compile.scm" . 407594)
       (push.iloc.1 . 1)
       (apply.gloc.of cte-extend-iloc "./boot/compile.scm" . 407577))
     (push)
     (extend . 1)
     (call
       (cadr.iloc (1 . 0) "./boot/compile.scm" . 408611)
       (if.not.pair?.ret.const . #f)
       (push.iloc.1 . 0)
       (push.subr.gloc.of caadr 1 "./boot/compile.scm" . 408632)
       (const . lambda)
       (ret.eq? "./boot/compile.scm" . 408627))
     (if.true
       (call
         (touch.gloc.of collect-local-closure)
         (push.cadr.iloc (2 . 0) "./boot/compile.scm" . 409646)
         (apply.gloc.of collect-local-closure "./boot/compile.scm" . 409623))
       (push.cadr.iloc (1 . 0) "./boot/compile.scm" . 410659)
       (extend . 1)
       (call
         (call
           (touch.gloc.of local-closure?)
           (push.iloc.0 . 0)
           (apply.gloc.of local-closure? "./boot/compile.scm" . 413737))
         (if.true (ret.const . extend.enclose+))
         (ret.const . extend.enclose))
       (push)
       (call
         (touch.gloc.of compile-lambda-helper)
         (push.cadr.iloc (0 . 0) "./boot/compile.scm" . 411713)
         (push.cddr.iloc (0 . 0) "./boot/compile.scm" . 411725)
         (call
           (touch.gloc.of make-closure-comment)
           (push.iloc.0 . 0)
           (apply.gloc.of make-closure-comment "./boot/compile.scm" . 411737))
         (push)
         (push.iloc.1 . 0)
         (apply.gloc.of compile-lambda-helper "./boot/compile.scm" . 411690))
       (push.cons)
       (call
         (touch.gloc.of compile-expression-seq)
         (push.cddr.iloc (3 . 0) "./boot/compile.scm" . 412738)
         (push.iloc.1 . 0)
         (push.const . #f)
         (push.const . #t)
         (apply.gloc.of compile-expression-seq "./boot/compile.scm" . 412714))
       (push.cons)
       (extend . 1)
       (iloc 4 . 3)
       (if.true (ret.iloc 0 . 0))
       (push.const . call)
       (iloc.0 . 0)
       (push.cons)
       (ret.subr.gloc.of list "./boot/compile.scm" . 415787))
     (push.const . extend.unbound)
     (const . 1)
     (push.cons)
     (call
       (touch.gloc.of compile-argument)
       (push.cadr.iloc (1 . 0) "./boot/compile.scm" . 418874)
       (push.iloc.0 . 0)
       (apply.gloc.of compile-argument "./boot/compile.scm" . 418856))
     (push)
     (push.const . enclose)
     (const . 1)
     (push.cons)
     (call
       (touch.gloc.of compile-expression-seq)
       (push.cddr.iloc (2 . 0) "./boot/compile.scm" . 420928)
       (push.iloc.0 . 0)
       (push.const . #f)
       (push.const . #t)
       (apply.gloc.of compile-expression-seq "./boot/compile.scm" . 420904))
     (push.cons)
     (subr.gloc.of |.append| 2 "./boot/compile.scm" . 418856)
     (push.cons)
     (extend . 1)
     (iloc 3 . 3)
     (if.true (ret.iloc 0 . 0))
     (push.const . call)
     (iloc.0 . 0)
     (push.cons)
     (ret.subr.gloc.of list "./boot/compile.scm" . 421927))
   (push.cadr.iloc (0 . 0) "./boot/compile.scm" . 423964)
   (extend . 1)
   (call
     (touch.gloc.of collect-local-closure)
     (push.iloc.0 . 0)
     (apply.gloc.of collect-local-closure "./boot/compile.scm" . 424974))
   (push.close
     (0 0)
     (extend.enclose+
       (2 0 . loop)
       (iloc.0 . 0)
       (if.null?
         (push.iloc 3 . 0)
         (push.const)
         (ret.subr.gloc.of values "./boot/compile.scm" . 429090))
       (push.iloc.0 . 0)
       (push.subr.gloc.of cadar 1 "./boot/compile.scm" . 430126)
       (extend . 1)
       (call
         (iloc.0 . 0)
         (if.pair?
           (push.car.iloc (0 . 0) "./boot/compile.scm" . 431167)
           (push.const quote lambda)
           (ret.subr.gloc.of memq "./boot/compile.scm" . 431161))
         (push.iloc.0 . 0)
         (push.subr.gloc.of symbol? 1 "./boot/compile.scm" . 431200)
         (ret.subr.gloc.of not "./boot/compile.scm" . 431195))
       (if.true
         (push.cdr.iloc (1 . 0) "./boot/compile.scm" . 432174)
         (push.car.iloc (1 . 0) "./boot/compile.scm" . 432190)
         (iloc.1 . 1)
         (push.cons)
         (apply.iloc+ (2 . 0) "./boot/compile.scm" . 432168))
       (push.iloc.1 . 1)
       (push.subr.gloc.of reverse 1 "./boot/compile.scm" . 433200)
       (push.iloc.1 . 0)
       (ret.subr.gloc.of values "./boot/compile.scm" . 433192))
     (push.iloc 2 . 0)
     (push.const)
     (apply.iloc+ (0 . 0) "./boot/compile.scm" . 428062))
   (push.close
     (2 0)
     (call
       (touch.gloc.of cte-extend-iloc)
       (call (push.gloc.of car) (push.iloc.1 . 0) (apply.gloc.of map "./boot/compile.scm" . 434220))
       (push)
       (push.iloc 2 . 1)
       (apply.gloc.of cte-extend-iloc "./boot/compile.scm" . 434203))
     (push)
     (extend . 1)
     (call
       (touch.gloc.of compile-argument-each)
       (call
         (push.gloc.of cadr)
         (push.iloc.1 . 0)
         (apply.gloc.of map "./boot/compile.scm" . 435259))
       (push)
       (push.iloc.0 . 0)
       (apply.gloc.of compile-argument-each "./boot/compile.scm" . 435236))
     (push)
     (call
       (push.gloc.of append)
       (call
         (push.gloc.of |.L845|)
         (call
           (touch.gloc.of iloc-iota)
           (push.const . 0)
           (push.iloc.1 . 0)
           (push.subr.gloc.of length 1 "./boot/compile.scm" . 437315)
           (push.iloc.1 . 1)
           (push.subr.gloc.of length 1 "./boot/compile.scm" . 437330)
           (apply.gloc.of iloc-iota "./boot/compile.scm" . 437302))
         (push)
         (call
           (push.close
             (1 0)
             (touch.gloc.of compile-expression)
             (push.cadr.iloc (0 . 0) "./boot/compile.scm" . 438363)
             (push.iloc.1 . 0)
             (push.const . #f)
             (push.const . #f)
             (apply.gloc.of compile-expression "./boot/compile.scm" . 438343))
           (push.iloc.1 . 1)
           (apply.gloc.of map "./boot/compile.scm" . 438326))
         (push)
         (apply.gloc.of map "./boot/compile.scm" . 436273))
       (push)
       (apply.gloc.of apply "./boot/compile.scm" . 436259))
     (push)
     (call
       (touch.gloc.of compile-expression-seq)
       (push.cddr.iloc (3 . 0) "./boot/compile.scm" . 439355)
       (push.iloc.0 . 0)
       (push.const . #f)
       (push.const . #t)
       (apply.gloc.of compile-expression-seq "./boot/compile.scm" . 439331))
     (push)
     (extend . 3)
     (call
       (iloc.0 . 0)
       (if.null?
         (push.const . extend.unbound)
         (push.iloc 3 . 0)
         (subr.gloc.of length 1 "./boot/compile.scm" . 441401)
         (push.cons)
         (push.iloc.0 . 1)
         (push.iloc.0 . 2)
         (subr.gloc.of |.append| 2 (|.append| |back-code`2944*| |body-code`2944*|))
         (ret.cons "./boot/compile.scm" . 440352))
       (push.const . extend.unbound)
       (push.iloc 3 . 0)
       (subr.gloc.of length 1 "./boot/compile.scm" . 442425)
       (push.cons)
       (push.iloc.0 . 0)
       (push.const . enclose)
       (push.iloc.0 . 0)
       (subr.gloc.of length 1 "./boot/compile.scm" . 442469)
       (push.cons)
       (push.iloc.0 . 1)
       (push.iloc.0 . 2)
       (subr.gloc.of |.append| 2 "./boot/compile.scm" . 442469)
       (push.cons)
       (subr.gloc.of |.append| 2 "./boot/compile.scm" . 442469)
       (ret.cons "./boot/compile.scm" . 440352))
     (push)
     (extend . 1)
     (iloc 5 . 3)
     (if.true (ret.iloc 0 . 0))
     (push.const . call)
     (iloc.0 . 0)
     (push.cons)
     (ret.subr.gloc.of list "./boot/compile.scm" . 443428))
   (apply.gloc.of
     |.call-with-values|
     (|.call-with-values|
       (lambda ()
         (letrec* ((|loop`2931*|
                     (lambda (|lst`2932*| |front`2932*|)
                       (if (null? |lst`2932*|)
                           (values |bindings`2926*| '())
                           (let ((|init`2934*| (cadar |lst`2932*|)))
                             (if (if (pair? |init`2934*|)
                                     (memq (car |init`2934*|) ''lambda)
                                     (not (symbol? |init`2934*|)))
                                 (|loop`2931*|
                                   (cdr |lst`2932*|)
                                   (cons (car |lst`2932*|) |front`2932*|))
                                 (values (reverse |front`2932*|) |lst`2932*|)))))))
           (|loop`2931*| |bindings`2926*| '())))
       (lambda (|front`2928*| |back`2928*|)
         (let ((|cte`2938*| (cte-extend-iloc (map car |bindings`2926*|) |cte`2912*|)))
           (let ((|front-code`2944*| (compile-argument-each (map cadr |front`2928*|) |cte`2938*|))
                 (|back-code`2944*|
                   (apply
                     append
                     (map |.L845|
                          (iloc-iota 0 (length |front`2928*|) (length |back`2928*|))
                          (map (lambda (|e`2942*|)
                                 (compile-expression (cadr |e`2942*|) |cte`2938*| #f #f))
                               |back`2928*|))))
                 (|body-code`2944*| (compile-expression-seq (cddr |form`2912*|) |cte`2938*| #f #t)))
             (let ((|code`2946*|
                     (if (null? |front-code`2944*|)
                         (|.cons|
                           (|.cons| 'extend.unbound (length |bindings`2926*|))
                           (|.append| |back-code`2944*| |body-code`2944*|))
                         (|.cons|
                           (|.cons| 'extend.unbound (length |bindings`2926*|))
                           (|.append|
                             |front-code`2944*|
                             (|.cons|
                               (|.cons| 'enclose (length |front-code`2944*|))
                               (|.append| |back-code`2944*| |body-code`2944*|)))))))
               (if |tail`2912*| |code`2946*| (list (cons 'call |code`2946*|))))))))))
 (set.gloc.of compile-expression-letrec*)
 (ret.const.unspec))
((close
   (4 0 . compile-anonymous)
   (call
     (touch.gloc.of compile-expression)
     (push.cadr.iloc (0 . 0) "./boot/compile.scm" . 451630)
     (push.iloc.0 . 1)
     (push.const . #f)
     (push.const . #f)
     (apply.gloc.of compile-expression "./boot/compile.scm" . 451610))
   (push)
   (extend . 1)
   (call
     (cdr.iloc (0 . 0) "./boot/compile.scm" . 452635)
     (if.not.null?.ret.const . #f)
     (push.iloc.0 . 0)
     (push.subr.gloc.of caar 1 "./boot/compile.scm" . 452657)
     (const . const)
     (ret.eq? "./boot/compile.scm" . 452652))
   (if.true
     (push.iloc.0 . 0)
     (subr.gloc.of cdar 1 "./boot/compile.scm" . 453651)
     (if.true
       (touch.gloc.of compile-expression)
       (push.iloc.1 . 0)
       (push.subr.gloc.of caddr 1 "./boot/compile.scm" . 454695)
       (push.iloc.1 . 1)
       (push.iloc.1 . 2)
       (push.iloc.1 . 3)
       (apply.gloc.of compile-expression "./boot/compile.scm" . 454675))
     (touch.gloc.of compile-expression)
     (push.iloc.1 . 0)
     (push.subr.gloc.of cadddr 1 "./boot/compile.scm" . 455719)
     (push.iloc.1 . 1)
     (push.iloc.1 . 2)
     (push.iloc.1 . 3)
     (apply.gloc.of compile-expression "./boot/compile.scm" . 455699))
   (call
     (touch.gloc.of compile-expression)
     (push.iloc.1 . 0)
     (push.subr.gloc.of cadddr 1 "./boot/compile.scm" . 456757)
     (push.iloc.1 . 1)
     (push.const . #f)
     (push.const . #t)
     (apply.gloc.of compile-expression "./boot/compile.scm" . 456737))
   (push)
   (call
     (touch.gloc.of compile-expression)
     (push.iloc.1 . 0)
     (push.subr.gloc.of caddr 1 "./boot/compile.scm" . 457780)
     (push.iloc.1 . 1)
     (push.const . #f)
     (push.const . #t)
     (apply.gloc.of compile-expression "./boot/compile.scm" . 457760))
   (push)
   (extend . 2)
   (call
     (cadr.iloc (2 . 0) "./boot/compile.scm" . 458787)
     (if.not.symbol?.ret.const . #f)
     (push.cadr.iloc (2 . 0) "./boot/compile.scm" . 458805)
     (push.iloc 2 . 0)
     (subr.gloc.of caddr 1 "./boot/compile.scm" . 458817)
     (ret.eq? "./boot/compile.scm" . 458800))
   (if.true
     (iloc 2 . 3)
     (if.true
       (push.iloc.1 . 0)
       (push.const . if.true.ret)
       (push.subr.gloc.of list 1 "./boot/compile.scm" . 459824)
       (iloc.0 . 0)
       (push.cons)
       (ret.subr.gloc.of |.append| "./boot/compile.scm" . 459803))
     (push.const . call)
     (push.iloc.1 . 0)
     (push.const . if.true)
     (iloc.0 . 1)
     (push.cons)
     (iloc.0 . 0)
     (push.cons)
     (subr.gloc.of
       |.append|
       2
       (|.append|
         |cond-code`2952*|
         (|.cons| (|.cons| 'if.true |true-code`2954*|) |false-code`2954*|)))
     (push.cons)
     (ret.subr.gloc.of |.list| "./boot/compile.scm" . 460827))
   (iloc 2 . 3)
   (if.true
     (call
       (cdr.iloc (0 . 1) "./boot/compile.scm" . 462892)
       (if.not.null?.ret.const . #f)
       (push.iloc.0 . 1)
       (push.subr.gloc.of caar 1 "./boot/compile.scm" . 462914)
       (const . ret.const)
       (ret.eq? "./boot/compile.scm" . 462909))
     (if.true
       (push.iloc.1 . 0)
       (push.const . if.true.ret.const)
       (push.iloc.0 . 1)
       (subr.gloc.of cdar 1 "./boot/compile.scm" . 463940)
       (push.cons)
       (iloc.0 . 0)
       (push.cons)
       (ret.subr.gloc.of |.append| "./boot/compile.scm" . 462876))
     (push.iloc.1 . 0)
     (push.const . if.true)
     (iloc.0 . 1)
     (push.cons)
     (iloc.0 . 0)
     (push.cons)
     (ret.subr.gloc.of |.append| "./boot/compile.scm" . 462876))
   (push.const . call)
   (push.iloc.1 . 0)
   (push.const . if.true)
   (iloc.0 . 1)
   (push.cons)
   (iloc.0 . 0)
   (push.cons)
   (subr.gloc.of
     |.append|
     2
     (|.append|
       |cond-code`2952*|
       (|.cons| (|.cons| 'if.true |true-code`2954*|) |false-code`2954*|)))
   (push.cons)
   (ret.subr.gloc.of |.list| "./boot/compile.scm" . 465947))
 (set.gloc.of |compile-anonymous`2949*|)
 (close
   (5 0 . compile-binary-special)
   (push.iloc.0 . 0)
   (push.subr.gloc.of cdadr 1 "./boot/compile.scm" . 488469)
   (push.iloc.0 . 0)
   (push.subr.gloc.of caddr 1 "./boot/compile.scm" . 489493)
   (extend . 2)
   (call
     (touch.gloc.of compile-argument)
     (push.car.iloc (0 . 0) "./boot/compile.scm" . 490549)
     (push.iloc.1 . 1)
     (apply.gloc.of compile-argument "./boot/compile.scm" . 490531))
   (push)
   (call
     (touch.gloc.of compile-expression)
     (push.cadr.iloc (0 . 0) "./boot/compile.scm" . 491575)
     (push.iloc.1 . 1)
     (push.const . #f)
     (push.const . #f)
     (apply.gloc.of compile-expression "./boot/compile.scm" . 491555))
   (push)
   (push.subr.gloc.of append 2 "./boot/compile.scm" . 490523)
   (call
     (touch.gloc.of compile-expression)
     (push.iloc.0 . 1)
     (push.iloc.1 . 1)
     (push.const . #f)
     (push.const . #t)
     (apply.gloc.of compile-expression "./boot/compile.scm" . 492572))
   (push)
   (call
     (touch.gloc.of compile-expression)
     (push.iloc.1 . 0)
     (push.subr.gloc.of cadddr 1 "./boot/compile.scm" . 493617)
     (push.iloc.1 . 1)
     (push.const . #f)
     (push.const . #t)
     (apply.gloc.of compile-expression "./boot/compile.scm" . 493597))
   (push)
   (extend . 3)
   (call
     (cdr.iloc (0 . 1) "./boot/compile.scm" . 494621)
     (if.not.null?.ret.const . #f)
     (push.iloc.0 . 1)
     (push.subr.gloc.of caar 1 "./boot/compile.scm" . 494644)
     (push.const const ret.const)
     (ret.subr.gloc.of memq "./boot/compile.scm" . 494638))
   (if.true
     (iloc 2 . 2)
     (if.true
       (push.iloc.0 . 0)
       (push.iloc 2 . 4)
       (push.iloc.0 . 1)
       (subr.gloc.of cdar 1 "./boot/compile.scm" . 495678)
       (push.cons)
       (iloc.0 . 2)
       (push.cons)
       (ret.subr.gloc.of |.append| "./boot/compile.scm" . 495639))
     (push.const . call)
     (push.iloc.0 . 0)
     (push.iloc 2 . 3)
     (iloc.0 . 1)
     (push.cons)
     (iloc.0 . 2)
     (push.cons)
     (subr.gloc.of
       |.append|
       2
       (|.append|
         |arg-code`2966*|
         (|.cons| (|.cons| |inst`2962*| |true-code`2966*|) |false-code`2966*|)))
     (push.cons)
     (ret.subr.gloc.of |.list| "./boot/compile.scm" . 496663))
   (iloc 2 . 2)
   (if.true
     (push.iloc.0 . 0)
     (push.iloc 2 . 3)
     (iloc.0 . 1)
     (push.cons)
     (iloc.0 . 2)
     (push.cons)
     (ret.subr.gloc.of |.append| "./boot/compile.scm" . 497687))
   (push.const . call)
   (push.iloc.0 . 0)
   (push.iloc 2 . 3)
   (iloc.0 . 1)
   (push.cons)
   (iloc.0 . 2)
   (push.cons)
   (subr.gloc.of
     |.append|
     2
     (|.append|
       |arg-code`2966*|
       (|.cons| (|.cons| |inst`2962*| |true-code`2966*|) |false-code`2966*|)))
   (push.cons)
   (ret.subr.gloc.of |.list| "./boot/compile.scm" . 498711))
 (set.gloc.of |compile-binary-special`2949*|)
 (close
   (5 0 . compile-unary-special)
   (push.iloc.0 . 0)
   (push.subr.gloc.of cadadr 1 "./boot/compile.scm" . 471060)
   (push.iloc.0 . 0)
   (push.subr.gloc.of caddr 1 "./boot/compile.scm" . 472085)
   (extend . 2)
   (call
     (touch.gloc.of compile-expression)
     (push.iloc.0 . 0)
     (push.iloc.1 . 1)
     (push.const . #f)
     (push.const . #f)
     (apply.gloc.of compile-expression "./boot/compile.scm" . 473115))
   (push)
   (call
     (touch.gloc.of compile-expression)
     (push.iloc.0 . 1)
     (push.iloc.1 . 1)
     (push.const . #f)
     (push.const . #t)
     (apply.gloc.of compile-expression "./boot/compile.scm" . 474140))
   (push)
   (call
     (touch.gloc.of compile-expression)
     (push.iloc.1 . 0)
     (push.subr.gloc.of cadddr 1 "./boot/compile.scm" . 475185)
     (push.iloc.1 . 1)
     (push.const . #f)
     (push.const . #t)
     (apply.gloc.of compile-expression "./boot/compile.scm" . 475165))
   (push)
   (extend . 3)
   (call
     (push.iloc 2 . 4)
     (const . if.null?.ret.const)
     (if.not.eq?.ret.const . #f)
     (iloc.1 . 0)
     (if.not.symbol?.ret.const . #f)
     (push.iloc.1 . 0)
     (iloc.1 . 1)
     (ret.eq? "./boot/compile.scm" . 476240))
   (if.true
     (iloc 2 . 2)
     (if.true
       (push.iloc.0 . 0)
       (push.iloc 2 . 4)
       (push.subr.gloc.of |.list| 1 (|.list| |inst-ret-const`2956*|))
       (iloc.0 . 2)
       (push.cons)
       (ret.subr.gloc.of |.append| "./boot/compile.scm" . 477210))
     (push.const . call)
     (push.iloc.0 . 0)
     (push.iloc 2 . 4)
     (push.subr.gloc.of |.list| 1 (|.list| |inst-ret-const`2956*|))
     (iloc.0 . 2)
     (push.cons)
     (subr.gloc.of
       |.append|
       2
       (|.append| |arg-code`2960*| (|.cons| (|.list| |inst-ret-const`2956*|) |false-code`2960*|)))
     (push.cons)
     (ret.subr.gloc.of |.list| "./boot/compile.scm" . 478234))
   (call
     (cdr.iloc (0 . 1) "./boot/compile.scm" . 480292)
     (if.not.null?.ret.const . #f)
     (push.iloc.0 . 1)
     (push.subr.gloc.of caar 1 "./boot/compile.scm" . 480315)
     (push.const const ret.const)
     (ret.subr.gloc.of memq "./boot/compile.scm" . 480309))
   (if.true
     (iloc 2 . 2)
     (if.true
       (push.iloc.0 . 0)
       (push.iloc 2 . 4)
       (push.iloc.0 . 1)
       (subr.gloc.of cdar 1 "./boot/compile.scm" . 481349)
       (push.cons)
       (iloc.0 . 2)
       (push.cons)
       (ret.subr.gloc.of |.append| "./boot/compile.scm" . 481310))
     (push.const . call)
     (push.iloc.0 . 0)
     (push.iloc 2 . 3)
     (iloc.0 . 1)
     (push.cons)
     (iloc.0 . 2)
     (push.cons)
     (subr.gloc.of
       |.append|
       2
       (|.append|
         |arg-code`2960*|
         (|.cons| (|.cons| |inst`2956*| |true-code`2960*|) |false-code`2960*|)))
     (push.cons)
     (ret.subr.gloc.of |.list| "./boot/compile.scm" . 482334))
   (iloc 2 . 2)
   (if.true
     (push.iloc.0 . 0)
     (push.iloc 2 . 3)
     (iloc.0 . 1)
     (push.cons)
     (iloc.0 . 2)
     (push.cons)
     (ret.subr.gloc.of |.append| "./boot/compile.scm" . 483358))
   (push.const . call)
   (push.iloc.0 . 0)
   (push.iloc 2 . 3)
   (iloc.0 . 1)
   (push.cons)
   (iloc.0 . 2)
   (push.cons)
   (subr.gloc.of
     |.append|
     2
     (|.append|
       |arg-code`2960*|
       (|.cons| (|.cons| |inst`2956*| |true-code`2960*|) |false-code`2960*|)))
   (push.cons)
   (ret.subr.gloc.of |.list| "./boot/compile.scm" . 484382))
 (set.gloc.of |compile-unary-special`2949*|)
 (close
   (4 0 . compile-expression-if)
   (push.iloc.0 . 0)
   (subr.gloc.of cdddr 1 "./boot/compile.scm" . 502803)
   (if.null?
     (iloc.0 . 2)
     (if.true
       (touch.gloc.of compile-expression)
       (push.const . and)
       (cdr.iloc (0 . 0) "./boot/compile.scm" . 504876)
       (push.cons)
       (push.iloc.0 . 1)
       (push.iloc.0 . 2)
       (push.iloc.0 . 3)
       (apply.gloc.of compile-expression "./boot/compile.scm" . 504848))
     (touch.gloc.of compile-expression)
     (push.const . if)
     (push.cdr.iloc (0 . 0) "./boot/compile.scm" . 505899)
     (push.const (|.unspecified|))
     (subr.gloc.of |.append| 2 "./boot/compile.scm" . 505899)
     (push.cons)
     (push.iloc.0 . 1)
     (push.iloc.0 . 2)
     (push.iloc.0 . 3)
     (apply.gloc.of compile-expression "./boot/compile.scm" . 505872))
   (call
     (cadr.iloc (0 . 0) "./boot/compile.scm" . 507935)
     (if.not.pair?.ret.const . #f)
     (touch.gloc.of top-level-subr)
     (push.iloc.0 . 0)
     (push.subr.gloc.of caadr 1 "./boot/compile.scm" . 507964)
     (apply.gloc.of top-level-subr "./boot/compile.scm" . 507948))
   (push)
   (extend . 1)
   (iloc.0 . 0)
   (if.true
     (push.cadr.iloc (1 . 0) "./boot/compile.scm" . 509990)
     (push.subr.gloc.of length 1 "./boot/compile.scm" . 509982)
     (extend . 1)
     (push.iloc.0 . 0)
     (const . 2)
     (if.eq?
       (push.iloc.1 . 0)
       (gloc.of null?)
       (if.eq?
         (touch.gloc.of |compile-unary-special`2949*|)
         (push.iloc 2 . 0)
         (push.iloc 2 . 1)
         (push.iloc 2 . 3)
         (push.const . if.null?)
         (push.const . if.null?.ret.const)
         (apply.gloc.of |compile-unary-special`2949*| "./boot/compile.scm" . 513058))
       (push.iloc.1 . 0)
       (gloc.of pair?)
       (if.eq?
         (touch.gloc.of |compile-unary-special`2949*|)
         (push.iloc 2 . 0)
         (push.iloc 2 . 1)
         (push.iloc 2 . 3)
         (push.const . if.pair?)
         (push.const . if.pair?.ret.const)
         (apply.gloc.of |compile-unary-special`2949*| "./boot/compile.scm" . 515106))
       (push.iloc.1 . 0)
       (gloc.of symbol?)
       (if.eq?
         (touch.gloc.of |compile-unary-special`2949*|)
         (push.iloc 2 . 0)
         (push.iloc 2 . 1)
         (push.iloc 2 . 3)
         (push.const . if.symbol?)
         (push.const . if.symbol?.ret.const)
         (apply.gloc.of |compile-unary-special`2949*| "./boot/compile.scm" . 517154))
       (touch.gloc.of |compile-anonymous`2949*|)
       (push.iloc 2 . 0)
       (push.iloc 2 . 1)
       (push.iloc 2 . 2)
       (push.iloc 2 . 3)
       (apply.gloc.of |compile-anonymous`2949*| "./boot/compile.scm" . 519202))
     (push.iloc.0 . 0)
     (const . 3)
     (if.eq?
       (push.iloc.1 . 0)
       (gloc.of eq?)
       (if.eq?
         (touch.gloc.of |compile-binary-special`2949*|)
         (push.iloc 2 . 0)
         (push.iloc 2 . 1)
         (push.iloc 2 . 3)
         (push.const . if.eq?)
         (push.const . if.eq?.ret.const)
         (apply.gloc.of |compile-binary-special`2949*| "./boot/compile.scm" . 522274))
       (call
         (push.iloc.1 . 0)
         (gloc.of eqv?)
         (if.eq?.ret.const . #t)
         (push.iloc.1 . 0)
         (gloc.of equal?)
         (ret.eq? "./boot/compile.scm" . 523318))
       (if.true
         (push.cadr.iloc (2 . 0) "./boot/compile.scm" . 524367)
         (push.subr.gloc.of caddr 1 "./boot/compile.scm" . 524360)
         (extend . 1)
         (call
           (call
             (touch.gloc.of immediate-literal?)
             (push.cadr.iloc (3 . 0) "./boot/compile.scm" . 524340)
             (push.subr.gloc.of cadr 1 "./boot/compile.scm" . 524334)
             (apply.gloc.of immediate-literal? "./boot/compile.scm" . 525356))
           (if.true.ret)
           (touch.gloc.of immediate-literal?)
           (push.iloc.0 . 0)
           (apply.gloc.of immediate-literal? "./boot/compile.scm" . 525382))
         (if.true
           (touch.gloc.of |compile-binary-special`2949*|)
           (push.iloc 3 . 0)
           (push.iloc 3 . 1)
           (push.iloc 3 . 3)
           (push.const . if.eq?)
           (push.const . if.eq?.ret.const)
           (apply.gloc.of |compile-binary-special`2949*| "./boot/compile.scm" . 526376))
         (touch.gloc.of |compile-anonymous`2949*|)
         (push.iloc 3 . 0)
         (push.iloc 3 . 1)
         (push.iloc 3 . 2)
         (push.iloc 3 . 3)
         (apply.gloc.of |compile-anonymous`2949*| "./boot/compile.scm" . 527400))
       (touch.gloc.of |compile-anonymous`2949*|)
       (push.iloc 2 . 0)
       (push.iloc 2 . 1)
       (push.iloc 2 . 2)
       (push.iloc 2 . 3)
       (apply.gloc.of |compile-anonymous`2949*| "./boot/compile.scm" . 529442))
     (touch.gloc.of |compile-anonymous`2949*|)
     (push.iloc 2 . 0)
     (push.iloc 2 . 1)
     (push.iloc 2 . 2)
     (push.iloc 2 . 3)
     (apply.gloc.of |compile-anonymous`2949*| "./boot/compile.scm" . 531483))
   (touch.gloc.of |compile-anonymous`2949*|)
   (push.iloc.1 . 0)
   (push.iloc.1 . 1)
   (push.iloc.1 . 2)
   (push.iloc.1 . 3)
   (apply.gloc.of |compile-anonymous`2949*| "./boot/compile.scm" . 533523))
 (set.gloc.of compile-expression-if)
 (ret.const.unspec))
((close
   (2 0 . compile-anonymous-negate)
   (call
     (touch.gloc.of compile-expression)
     (push.car.iloc (0 . 0) "./boot/compile.scm" . 547877)
     (push.iloc.0 . 1)
     (push.const . #f)
     (push.const . #f)
     (apply.gloc.of compile-expression "./boot/compile.scm" . 547857))
   (push)
   (push.const . if.false.ret.const)
   (const . #t)
   (push.cons)
   (call
     (touch.gloc.of |compile-clause`2977*|)
     (push.cdr.iloc (0 . 0) "./boot/compile.scm" . 547947)
     (push.iloc.0 . 1)
     (apply.gloc.of |compile-clause`2977*| "./boot/compile.scm" . 547931))
   (push.cons)
   (ret.subr.gloc.of |.append| "./boot/compile.scm" . 546827))
 (set.gloc.of |compile-anonymous-negate`2979*|)
 (close
   (3 0 . compile-binary-special)
   (call
     (touch.gloc.of compile-argument)
     (push.iloc.0 . 0)
     (push.subr.gloc.of cadar 1 "./boot/compile.scm" . 556067)
     (push.iloc.0 . 1)
     (apply.gloc.of compile-argument "./boot/compile.scm" . 556049))
   (push)
   (call
     (touch.gloc.of compile-expression)
     (push.iloc.0 . 0)
     (push.subr.gloc.of caddar 1 "./boot/compile.scm" . 556106)
     (push.iloc.0 . 1)
     (push.const . #f)
     (push.const . #f)
     (apply.gloc.of compile-expression "./boot/compile.scm" . 556086))
   (push)
   (push.iloc.0 . 2)
   (const . #t)
   (push.cons)
   (call
     (touch.gloc.of |compile-clause`2977*|)
     (push.cdr.iloc (0 . 0) "./boot/compile.scm" . 556164)
     (push.iloc.0 . 1)
     (apply.gloc.of |compile-clause`2977*| "./boot/compile.scm" . 556148))
   (push.cons)
   (push.subr.gloc.of |.append| 2 "./boot/compile.scm" . 556086)
   (ret.subr.gloc.of |.append| "./boot/compile.scm" . 555019))
 (set.gloc.of |compile-binary-special`2979*|)
 (close
   (2 0 . compile-anonymous)
   (call
     (touch.gloc.of compile-expression)
     (push.car.iloc (0 . 0) "./boot/compile.scm" . 543781)
     (push.iloc.0 . 1)
     (push.const . #f)
     (push.const . #f)
     (apply.gloc.of compile-expression "./boot/compile.scm" . 543761))
   (push)
   (push.const . if.true.ret)
   (push.subr.gloc.of list 1 "./boot/compile.scm" . 543803)
   (call
     (touch.gloc.of |compile-clause`2977*|)
     (push.cdr.iloc (0 . 0) "./boot/compile.scm" . 543841)
     (push.iloc.0 . 1)
     (apply.gloc.of |compile-clause`2977*| "./boot/compile.scm" . 543825))
   (push.cons)
   (ret.subr.gloc.of |.append| "./boot/compile.scm" . 542731))
 (set.gloc.of |compile-anonymous`2979*|)
 (close
   (3 0 . compile-unary-special)
   (call
     (touch.gloc.of compile-expression)
     (push.iloc.0 . 0)
     (push.subr.gloc.of cadar 1 "./boot/compile.scm" . 551973)
     (push.iloc.0 . 1)
     (push.const . #f)
     (push.const . #f)
     (apply.gloc.of compile-expression "./boot/compile.scm" . 551953))
   (push)
   (push.iloc.0 . 2)
   (const . #t)
   (push.cons)
   (call
     (touch.gloc.of |compile-clause`2977*|)
     (push.cdr.iloc (0 . 0) "./boot/compile.scm" . 552030)
     (push.iloc.0 . 1)
     (apply.gloc.of |compile-clause`2977*| "./boot/compile.scm" . 552014))
   (push.cons)
   (ret.subr.gloc.of |.append| "./boot/compile.scm" . 550923))
 (set.gloc.of |compile-unary-special`2979*|)
 (close
   (2 0 . compile-clause)
   (cdr.iloc (0 . 0) "./boot/compile.scm" . 558100)
   (if.null?
     (touch.gloc.of compile-expression)
     (push.car.iloc (0 . 0) "./boot/compile.scm" . 559137)
     (push.iloc.0 . 1)
     (push.const . #f)
     (push.const . #t)
     (apply.gloc.of compile-expression "./boot/compile.scm" . 559117))
   (call
     (car.iloc (0 . 0) "./boot/compile.scm" . 560160)
     (if.not.pair?.ret.const . #f)
     (touch.gloc.of top-level-subr)
     (push.iloc.0 . 0)
     (push.subr.gloc.of caar 1 "./boot/compile.scm" . 560187)
     (apply.gloc.of top-level-subr "./boot/compile.scm" . 560171))
   (push)
   (extend . 1)
   (iloc.0 . 0)
   (if.true
     (push.iloc.0 . 0)
     (gloc.of not)
     (if.eq?
       (push.iloc.1 . 0)
       (push.subr.gloc.of cadar 1 "./boot/compile.scm" . 563246)
       (cdr.iloc (1 . 0) "./boot/compile.scm" . 563258)
       (push.cons)
       (extend . 1)
       (call
         (car.iloc (0 . 0) "./boot/compile.scm" . 564274)
         (if.not.pair?.ret.const . #f)
         (touch.gloc.of top-level-subr)
         (push.iloc.0 . 0)
         (push.subr.gloc.of caar 1 "./boot/compile.scm" . 564301)
         (apply.gloc.of top-level-subr "./boot/compile.scm" . 564285))
       (push)
       (extend . 1)
       (iloc.0 . 0)
       (if.true
         (push.car.iloc (1 . 0) "./boot/compile.scm" . 566329)
         (push.subr.gloc.of length 1 "./boot/compile.scm" . 566321)
         (extend . 1)
         (push.iloc.0 . 0)
         (const . 2)
         (if.eq?
           (push.iloc.1 . 0)
           (gloc.of null?)
           (if.eq?
             (touch.gloc.of |compile-unary-special`2979*|)
             (push.iloc 2 . 0)
             (push.iloc 4 . 1)
             (push.const . if.not.null?.ret.const)
             (apply.gloc.of |compile-unary-special`2979*| "./boot/compile.scm" . 569397))
           (push.iloc.1 . 0)
           (gloc.of pair?)
           (if.eq?
             (touch.gloc.of |compile-unary-special`2979*|)
             (push.iloc 2 . 0)
             (push.iloc 4 . 1)
             (push.const . if.not.pair?.ret.const)
             (apply.gloc.of |compile-unary-special`2979*| "./boot/compile.scm" . 571445))
           (push.iloc.1 . 0)
           (gloc.of symbol?)
           (if.eq?
             (touch.gloc.of |compile-unary-special`2979*|)
             (push.iloc 2 . 0)
             (push.iloc 4 . 1)
             (push.const . if.not.symbol?.ret.const)
             (apply.gloc.of |compile-unary-special`2979*| "./boot/compile.scm" . 573493))
           (touch.gloc.of |compile-anonymous-negate`2979*|)
           (push.iloc 2 . 0)
           (push.iloc 4 . 1)
           (apply.gloc.of |compile-anonymous-negate`2979*| "./boot/compile.scm" . 575541))
         (push.iloc.0 . 0)
         (const . 3)
         (if.eq?
           (push.iloc.1 . 0)
           (gloc.of eq?)
           (if.eq?
             (touch.gloc.of |compile-binary-special`2979*|)
             (push.iloc 2 . 0)
             (push.iloc 4 . 1)
             (push.const . if.not.eq?.ret.const)
             (apply.gloc.of |compile-binary-special`2979*| "./boot/compile.scm" . 578613))
           (call
             (push.iloc.1 . 0)
             (gloc.of eqv?)
             (if.eq?.ret.const . #t)
             (push.iloc.1 . 0)
             (gloc.of equal?)
             (ret.eq? "./boot/compile.scm" . 579657))
           (if.true
             (push.car.iloc (2 . 0) "./boot/compile.scm" . 580704)
             (push.subr.gloc.of caddr 1 "./boot/compile.scm" . 580697)
             (extend . 1)
             (call
               (call
                 (touch.gloc.of immediate-literal?)
                 (push.car.iloc (3 . 0) "./boot/compile.scm" . 580679)
                 (push.subr.gloc.of cadr 1 "./boot/compile.scm" . 580673)
                 (apply.gloc.of immediate-literal? "./boot/compile.scm" . 581695))
               (if.true.ret)
               (touch.gloc.of immediate-literal?)
               (push.iloc.0 . 0)
               (apply.gloc.of immediate-literal? "./boot/compile.scm" . 581721))
             (if.true
               (touch.gloc.of |compile-binary-special`2979*|)
               (push.iloc 3 . 0)
               (push.iloc 5 . 1)
               (push.const . if.not.eq?.ret.const)
               (apply.gloc.of |compile-binary-special`2979*| "./boot/compile.scm" . 582715))
             (touch.gloc.of |compile-anonymous-negate`2979*|)
             (push.iloc 3 . 0)
             (push.iloc 5 . 1)
             (apply.gloc.of |compile-anonymous-negate`2979*| "./boot/compile.scm" . 583739))
           (touch.gloc.of |compile-anonymous-negate`2979*|)
           (push.iloc 2 . 0)
           (push.iloc 4 . 1)
           (apply.gloc.of |compile-anonymous-negate`2979*| "./boot/compile.scm" . 585781))
         (touch.gloc.of |compile-anonymous-negate`2979*|)
         (push.iloc 2 . 0)
         (push.iloc 4 . 1)
         (apply.gloc.of |compile-anonymous-negate`2979*| "./boot/compile.scm" . 587822))
       (touch.gloc.of |compile-anonymous-negate`2979*|)
       (push.iloc.1 . 0)
       (push.iloc 3 . 1)
       (apply.gloc.of |compile-anonymous-negate`2979*| "./boot/compile.scm" . 589862))
     (push.car.iloc (1 . 0) "./boot/compile.scm" . 590891)
     (push.subr.gloc.of length 1 "./boot/compile.scm" . 590883)
     (extend . 1)
     (push.iloc.0 . 0)
     (const . 2)
     (if.eq?
       (push.iloc.1 . 0)
       (gloc.of null?)
       (if.eq?
         (touch.gloc.of |compile-unary-special`2979*|)
         (push.iloc 2 . 0)
         (push.iloc 2 . 1)
         (push.const . if.null?.ret.const)
         (apply.gloc.of |compile-unary-special`2979*| "./boot/compile.scm" . 593959))
       (push.iloc.1 . 0)
       (gloc.of pair?)
       (if.eq?
         (touch.gloc.of |compile-unary-special`2979*|)
         (push.iloc 2 . 0)
         (push.iloc 2 . 1)
         (push.const . if.pair?.ret.const)
         (apply.gloc.of |compile-unary-special`2979*| "./boot/compile.scm" . 596007))
       (push.iloc.1 . 0)
       (gloc.of symbol?)
       (if.eq?
         (touch.gloc.of |compile-unary-special`2979*|)
         (push.iloc 2 . 0)
         (push.iloc 2 . 1)
         (push.const . if.symbol?.ret.const)
         (apply.gloc.of |compile-unary-special`2979*| "./boot/compile.scm" . 598055))
       (touch.gloc.of |compile-anonymous`2979*|)
       (push.iloc 2 . 0)
       (push.iloc 2 . 1)
       (apply.gloc.of |compile-anonymous`2979*| "./boot/compile.scm" . 600103))
     (push.iloc.0 . 0)
     (const . 3)
     (if.eq?
       (push.iloc.1 . 0)
       (gloc.of eq?)
       (if.eq?
         (touch.gloc.of |compile-binary-special`2979*|)
         (push.iloc 2 . 0)
         (push.iloc 2 . 1)
         (push.const . if.eq?.ret.const)
         (apply.gloc.of |compile-binary-special`2979*| "./boot/compile.scm" . 603175))
       (call
         (push.iloc.1 . 0)
         (gloc.of eqv?)
         (if.eq?.ret.const . #t)
         (push.iloc.1 . 0)
         (gloc.of equal?)
         (ret.eq? "./boot/compile.scm" . 604219))
       (if.true
         (push.car.iloc (2 . 0) "./boot/compile.scm" . 605266)
         (push.subr.gloc.of caddr 1 "./boot/compile.scm" . 605259)
         (extend . 1)
         (call
           (call
             (touch.gloc.of immediate-literal?)
             (push.car.iloc (3 . 0) "./boot/compile.scm" . 605241)
             (push.subr.gloc.of cadr 1 "./boot/compile.scm" . 605235)
             (apply.gloc.of immediate-literal? "./boot/compile.scm" . 606257))
           (if.true.ret)
           (touch.gloc.of immediate-literal?)
           (push.iloc.0 . 0)
           (apply.gloc.of immediate-literal? "./boot/compile.scm" . 606283))
         (if.true
           (touch.gloc.of |compile-binary-special`2979*|)
           (push.iloc 3 . 0)
           (push.iloc 3 . 1)
           (push.const . if.eq?.ret.const)
           (apply.gloc.of |compile-binary-special`2979*| "./boot/compile.scm" . 607277))
         (touch.gloc.of |compile-anonymous`2979*|)
         (push.iloc 3 . 0)
         (push.iloc 3 . 1)
         (apply.gloc.of |compile-anonymous`2979*| "./boot/compile.scm" . 608301))
       (touch.gloc.of |compile-anonymous`2979*|)
       (push.iloc 2 . 0)
       (push.iloc 2 . 1)
       (apply.gloc.of |compile-anonymous`2979*| "./boot/compile.scm" . 610343))
     (touch.gloc.of |compile-anonymous`2979*|)
     (push.iloc 2 . 0)
     (push.iloc 2 . 1)
     (apply.gloc.of |compile-anonymous`2979*| "./boot/compile.scm" . 612384))
   (touch.gloc.of |compile-anonymous`2979*|)
   (push.iloc.1 . 0)
   (push.iloc.1 . 1)
   (apply.gloc.of |compile-anonymous`2979*| "./boot/compile.scm" . 614420))
 (set.gloc.of |compile-clause`2977*|)
 (close
   (4 0 . compile-expression-or)
   (cdr.iloc (0 . 0) "./boot/compile.scm" . 616467)
   (if.null?
     (iloc.0 . 2)
     (if.true.ret.const)
     (iloc.0 . 3)
     (if.true
       (push.const . ret.const)
       (const . #f)
       (push.cons)
       (ret.subr.gloc.of list "./boot/compile.scm" . 618520))
     (push.const . const)
     (const . #f)
     (push.cons)
     (ret.subr.gloc.of list "./boot/compile.scm" . 619544))
   (cddr.iloc (0 . 0) "./boot/compile.scm" . 620563)
   (if.null?
     (touch.gloc.of compile-expression)
     (push.cadr.iloc (0 . 0) "./boot/compile.scm" . 621600)
     (push.iloc.0 . 1)
     (push.iloc.0 . 2)
     (push.iloc.0 . 3)
     (apply.gloc.of compile-expression "./boot/compile.scm" . 621580))
   (call
     (iloc.0 . 3)
     (if.true.ret.const . #f)
     (push.iloc.0 . 0)
     (subr.gloc.of cdddr 1 "./boot/compile.scm" . 623640)
     (if.not.null?.ret.const . #f)
     (push.iloc.0 . 0)
     (subr.gloc.of caddr 1 "./boot/compile.scm" . 624664)
     (if.not.pair?.ret.const . #f)
     (call
       (touch.gloc.of top-level-value-or-false)
       (push.iloc.0 . 0)
       (push.subr.gloc.of caaddr 1 "./boot/compile.scm" . 625712)
       (apply.gloc.of top-level-value-or-false "./boot/compile.scm" . 625686))
     (push)
     (gloc.of assertion-violation)
     (ret.eq? "./boot/compile.scm" . 625681))
   (if.true
     (call
       (touch.gloc.of compile-expression)
       (push.cadr.iloc (0 . 0) "./boot/compile.scm" . 626724)
       (push.iloc.0 . 1)
       (push.const . #f)
       (push.const . #f)
       (apply.gloc.of compile-expression "./boot/compile.scm" . 626704))
     (push)
     (push.const . if.false.call)
     (call
       (touch.gloc.of compile-expression)
       (push.iloc.0 . 0)
       (push.subr.gloc.of caddr 1 "./boot/compile.scm" . 626784)
       (push.iloc.0 . 1)
       (push.const . #f)
       (push.const . #t)
       (apply.gloc.of compile-expression "./boot/compile.scm" . 626764))
     (push.cons)
     (push.subr.gloc.of |.list| 1 "./boot/compile.scm" . 626764)
     (ret.subr.gloc.of |.append| "./boot/compile.scm" . 622603))
   (call
     (touch.gloc.of |compile-clause`2977*|)
     (push.cdr.iloc (0 . 0) "./boot/compile.scm" . 628776)
     (push.iloc.0 . 1)
     (apply.gloc.of |compile-clause`2977*| "./boot/compile.scm" . 628760))
   (push)
   (extend . 1)
   (iloc.1 . 3)
   (if.true (ret.iloc 0 . 0))
   (push.const . call)
   (iloc.0 . 0)
   (push.cons)
   (ret.subr.gloc.of list "./boot/compile.scm" . 629788))
 (set.gloc.of compile-expression-or)
 (ret.const.unspec))
((close
   (3 0 . compile-unary-special)
   (call
     (touch.gloc.of compile-expression)
     (push.iloc.0 . 0)
     (push.subr.gloc.of cadar 1 "./boot/compile.scm" . 648229)
     (push.iloc.0 . 1)
     (push.const . #f)
     (push.const . #f)
     (apply.gloc.of compile-expression "./boot/compile.scm" . 648209))
   (push)
   (push.iloc.0 . 2)
   (const . #f)
   (push.cons)
   (call
     (touch.gloc.of |compile-clause`3009*|)
     (push.cdr.iloc (0 . 0) "./boot/compile.scm" . 648286)
     (push.iloc.0 . 1)
     (apply.gloc.of |compile-clause`3009*| "./boot/compile.scm" . 648270))
   (push.cons)
   (ret.subr.gloc.of |.append| "./boot/compile.scm" . 647179))
 (set.gloc.of |compile-unary-special`3011*|)
 (close
   (2 0 . compile-anonymous-negate)
   (call
     (touch.gloc.of compile-expression)
     (push.car.iloc (0 . 0) "./boot/compile.scm" . 644133)
     (push.iloc.0 . 1)
     (push.const . #f)
     (push.const . #f)
     (apply.gloc.of compile-expression "./boot/compile.scm" . 644113))
   (push)
   (push.const . if.true.ret.const)
   (const . #f)
   (push.cons)
   (call
     (touch.gloc.of |compile-clause`3009*|)
     (push.cdr.iloc (0 . 0) "./boot/compile.scm" . 644202)
     (push.iloc.0 . 1)
     (apply.gloc.of |compile-clause`3009*| "./boot/compile.scm" . 644186))
   (push.cons)
   (ret.subr.gloc.of |.append| "./boot/compile.scm" . 643083))
 (set.gloc.of |compile-anonymous-negate`3011*|)
 (close
   (2 0 . compile-anonymous)
   (call
     (touch.gloc.of compile-expression)
     (push.car.iloc (0 . 0) "./boot/compile.scm" . 640037)
     (push.iloc.0 . 1)
     (push.const . #f)
     (push.const . #f)
     (apply.gloc.of compile-expression "./boot/compile.scm" . 640017))
   (push)
   (push.const . if.false.ret)
   (push.subr.gloc.of list 1 "./boot/compile.scm" . 640059)
   (call
     (touch.gloc.of |compile-clause`3009*|)
     (push.cdr.iloc (0 . 0) "./boot/compile.scm" . 640098)
     (push.iloc.0 . 1)
     (apply.gloc.of |compile-clause`3009*| "./boot/compile.scm" . 640082))
   (push.cons)
   (ret.subr.gloc.of |.append| "./boot/compile.scm" . 638987))
 (set.gloc.of |compile-anonymous`3011*|)
 (close
   (3 0 . compile-binary-special)
   (call
     (touch.gloc.of compile-argument)
     (push.iloc.0 . 0)
     (push.subr.gloc.of cadar 1 "./boot/compile.scm" . 652323)
     (push.iloc.0 . 1)
     (apply.gloc.of compile-argument "./boot/compile.scm" . 652305))
   (push)
   (call
     (touch.gloc.of compile-expression)
     (push.iloc.0 . 0)
     (push.subr.gloc.of caddar 1 "./boot/compile.scm" . 652362)
     (push.iloc.0 . 1)
     (push.const . #f)
     (push.const . #f)
     (apply.gloc.of compile-expression "./boot/compile.scm" . 652342))
   (push)
   (push.iloc.0 . 2)
   (const . #f)
   (push.cons)
   (call
     (touch.gloc.of |compile-clause`3009*|)
     (push.cdr.iloc (0 . 0) "./boot/compile.scm" . 652420)
     (push.iloc.0 . 1)
     (apply.gloc.of |compile-clause`3009*| "./boot/compile.scm" . 652404))
   (push.cons)
   (push.subr.gloc.of |.append| 2 "./boot/compile.scm" . 652342)
   (ret.subr.gloc.of |.append| "./boot/compile.scm" . 651275))
 (set.gloc.of |compile-binary-special`3011*|)
 (close
   (2 0 . compile-clause)
   (cdr.iloc (0 . 0) "./boot/compile.scm" . 654356)
   (if.null?
     (touch.gloc.of compile-expression)
     (push.car.iloc (0 . 0) "./boot/compile.scm" . 655393)
     (push.iloc.0 . 1)
     (push.const . #f)
     (push.const . #t)
     (apply.gloc.of compile-expression "./boot/compile.scm" . 655373))
   (call
     (car.iloc (0 . 0) "./boot/compile.scm" . 656416)
     (if.not.pair?.ret.const . #f)
     (touch.gloc.of top-level-subr)
     (push.iloc.0 . 0)
     (push.subr.gloc.of caar 1 "./boot/compile.scm" . 656443)
     (apply.gloc.of top-level-subr "./boot/compile.scm" . 656427))
   (push)
   (extend . 1)
   (iloc.0 . 0)
   (if.true
     (push.iloc.0 . 0)
     (gloc.of not)
     (if.eq?
       (push.iloc.1 . 0)
       (push.subr.gloc.of cadar 1 "./boot/compile.scm" . 659502)
       (cdr.iloc (1 . 0) "./boot/compile.scm" . 659514)
       (push.cons)
       (extend . 1)
       (call
         (car.iloc (0 . 0) "./boot/compile.scm" . 660530)
         (if.not.pair?.ret.const . #f)
         (touch.gloc.of top-level-subr)
         (push.iloc.0 . 0)
         (push.subr.gloc.of caar 1 "./boot/compile.scm" . 660557)
         (apply.gloc.of top-level-subr "./boot/compile.scm" . 660541))
       (push)
       (extend . 1)
       (iloc.0 . 0)
       (if.true
         (push.car.iloc (1 . 0) "./boot/compile.scm" . 662585)
         (push.subr.gloc.of length 1 "./boot/compile.scm" . 662577)
         (extend . 1)
         (push.iloc.0 . 0)
         (const . 2)
         (if.eq?
           (push.iloc.1 . 0)
           (gloc.of null?)
           (if.eq?
             (touch.gloc.of |compile-unary-special`3011*|)
             (push.iloc 2 . 0)
             (push.iloc 4 . 1)
             (push.const . if.null?.ret.const)
             (apply.gloc.of |compile-unary-special`3011*| "./boot/compile.scm" . 665653))
           (push.iloc.1 . 0)
           (gloc.of pair?)
           (if.eq?
             (touch.gloc.of |compile-unary-special`3011*|)
             (push.iloc 2 . 0)
             (push.iloc 4 . 1)
             (push.const . if.pair?.ret.const)
             (apply.gloc.of |compile-unary-special`3011*| "./boot/compile.scm" . 667701))
           (push.iloc.1 . 0)
           (gloc.of symbol?)
           (if.eq?
             (touch.gloc.of |compile-unary-special`3011*|)
             (push.iloc 2 . 0)
             (push.iloc 4 . 1)
             (push.const . if.symbol?.ret.const)
             (apply.gloc.of |compile-unary-special`3011*| "./boot/compile.scm" . 669749))
           (touch.gloc.of |compile-anonymous-negate`3011*|)
           (push.iloc 2 . 0)
           (push.iloc 4 . 1)
           (apply.gloc.of |compile-anonymous-negate`3011*| "./boot/compile.scm" . 671797))
         (push.iloc.0 . 0)
         (const . 3)
         (if.eq?
           (push.iloc.1 . 0)
           (gloc.of eq?)
           (if.eq?
             (touch.gloc.of |compile-binary-special`3011*|)
             (push.iloc 2 . 0)
             (push.iloc 4 . 1)
             (push.const . if.eq?.ret.const)
             (apply.gloc.of |compile-binary-special`3011*| "./boot/compile.scm" . 674869))
           (call
             (push.iloc.1 . 0)
             (gloc.of eqv?)
             (if.eq?.ret.const . #t)
             (push.iloc.1 . 0)
             (gloc.of equal?)
             (ret.eq? "./boot/compile.scm" . 675913))
           (if.true
             (push.car.iloc (2 . 0) "./boot/compile.scm" . 676960)
             (push.subr.gloc.of caddr 1 "./boot/compile.scm" . 676953)
             (extend . 1)
             (call
               (call
                 (touch.gloc.of immediate-literal?)
                 (push.car.iloc (3 . 0) "./boot/compile.scm" . 676935)
                 (push.subr.gloc.of cadr 1 "./boot/compile.scm" . 676929)
                 (apply.gloc.of immediate-literal? "./boot/compile.scm" . 677951))
               (if.true.ret)
               (touch.gloc.of immediate-literal?)
               (push.iloc.0 . 0)
               (apply.gloc.of immediate-literal? "./boot/compile.scm" . 677977))
             (if.true
               (touch.gloc.of |compile-binary-special`3011*|)
               (push.iloc 3 . 0)
               (push.iloc 5 . 1)
               (push.const . if.eq?.ret.const)
               (apply.gloc.of |compile-binary-special`3011*| "./boot/compile.scm" . 678971))
             (touch.gloc.of |compile-anonymous-negate`3011*|)
             (push.iloc 3 . 0)
             (push.iloc 5 . 1)
             (apply.gloc.of |compile-anonymous-negate`3011*| "./boot/compile.scm" . 679995))
           (touch.gloc.of |compile-anonymous-negate`3011*|)
           (push.iloc 2 . 0)
           (push.iloc 4 . 1)
           (apply.gloc.of |compile-anonymous-negate`3011*| "./boot/compile.scm" . 682037))
         (touch.gloc.of |compile-anonymous-negate`3011*|)
         (push.iloc 2 . 0)
         (push.iloc 4 . 1)
         (apply.gloc.of |compile-anonymous-negate`3011*| "./boot/compile.scm" . 684078))
       (touch.gloc.of |compile-anonymous-negate`3011*|)
       (push.iloc.1 . 0)
       (push.iloc 3 . 1)
       (apply.gloc.of |compile-anonymous-negate`3011*| "./boot/compile.scm" . 686118))
     (push.car.iloc (1 . 0) "./boot/compile.scm" . 687147)
     (push.subr.gloc.of length 1 "./boot/compile.scm" . 687139)
     (extend . 1)
     (push.iloc.0 . 0)
     (const . 2)
     (if.eq?
       (push.iloc.1 . 0)
       (gloc.of null?)
       (if.eq?
         (touch.gloc.of |compile-unary-special`3011*|)
         (push.iloc 2 . 0)
         (push.iloc 2 . 1)
         (push.const . if.not.null?.ret.const)
         (apply.gloc.of |compile-unary-special`3011*| "./boot/compile.scm" . 690215))
       (push.iloc.1 . 0)
       (gloc.of pair?)
       (if.eq?
         (touch.gloc.of |compile-unary-special`3011*|)
         (push.iloc 2 . 0)
         (push.iloc 2 . 1)
         (push.const . if.not.pair?.ret.const)
         (apply.gloc.of |compile-unary-special`3011*| "./boot/compile.scm" . 692263))
       (push.iloc.1 . 0)
       (gloc.of symbol?)
       (if.eq?
         (touch.gloc.of |compile-unary-special`3011*|)
         (push.iloc 2 . 0)
         (push.iloc 2 . 1)
         (push.const . if.not.symbol?.ret.const)
         (apply.gloc.of |compile-unary-special`3011*| "./boot/compile.scm" . 694311))
       (touch.gloc.of |compile-anonymous`3011*|)
       (push.iloc 2 . 0)
       (push.iloc 2 . 1)
       (apply.gloc.of |compile-anonymous`3011*| "./boot/compile.scm" . 696359))
     (push.iloc.0 . 0)
     (const . 3)
     (if.eq?
       (push.iloc.1 . 0)
       (gloc.of eq?)
       (if.eq?
         (touch.gloc.of |compile-binary-special`3011*|)
         (push.iloc 2 . 0)
         (push.iloc 2 . 1)
         (push.const . if.not.eq?.ret.const)
         (apply.gloc.of |compile-binary-special`3011*| "./boot/compile.scm" . 699431))
       (call
         (push.iloc.1 . 0)
         (gloc.of eqv?)
         (if.eq?.ret.const . #t)
         (push.iloc.1 . 0)
         (gloc.of equal?)
         (ret.eq? "./boot/compile.scm" . 700475))
       (if.true
         (push.car.iloc (2 . 0) "./boot/compile.scm" . 701522)
         (push.subr.gloc.of caddr 1 "./boot/compile.scm" . 701515)
         (extend . 1)
         (call
           (call
             (touch.gloc.of immediate-literal?)
             (push.car.iloc (3 . 0) "./boot/compile.scm" . 701497)
             (push.subr.gloc.of cadr 1 "./boot/compile.scm" . 701491)
             (apply.gloc.of immediate-literal? "./boot/compile.scm" . 702513))
           (if.true.ret)
           (touch.gloc.of immediate-literal?)
           (push.iloc.0 . 0)
           (apply.gloc.of immediate-literal? "./boot/compile.scm" . 702539))
         (if.true
           (touch.gloc.of |compile-binary-special`3011*|)
           (push.iloc 3 . 0)
           (push.iloc 3 . 1)
           (push.const . if.not.eq?.ret.const)
           (apply.gloc.of |compile-binary-special`3011*| "./boot/compile.scm" . 703533))
         (touch.gloc.of |compile-anonymous`3011*|)
         (push.iloc 3 . 0)
         (push.iloc 3 . 1)
         (apply.gloc.of |compile-anonymous`3011*| "./boot/compile.scm" . 704557))
       (touch.gloc.of |compile-anonymous`3011*|)
       (push.iloc 2 . 0)
       (push.iloc 2 . 1)
       (apply.gloc.of |compile-anonymous`3011*| "./boot/compile.scm" . 706599))
     (touch.gloc.of |compile-anonymous`3011*|)
     (push.iloc 2 . 0)
     (push.iloc 2 . 1)
     (apply.gloc.of |compile-anonymous`3011*| "./boot/compile.scm" . 708640))
   (touch.gloc.of |compile-anonymous`3011*|)
   (push.iloc.1 . 0)
   (push.iloc.1 . 1)
   (apply.gloc.of |compile-anonymous`3011*| "./boot/compile.scm" . 710676))
 (set.gloc.of |compile-clause`3009*|)
 (close
   (4 0 . compile-expression-and)
   (cdr.iloc (0 . 0) "./boot/compile.scm" . 712723)
   (if.null?
     (iloc.0 . 2)
     (if.true.ret.const)
     (iloc.0 . 3)
     (if.true
       (push.const . ret.const)
       (const . #t)
       (push.cons)
       (ret.subr.gloc.of list "./boot/compile.scm" . 714776))
     (push.const . const)
     (const . #t)
     (push.cons)
     (ret.subr.gloc.of list "./boot/compile.scm" . 715800))
   (cddr.iloc (0 . 0) "./boot/compile.scm" . 716819)
   (if.null?
     (touch.gloc.of compile-expression)
     (push.cadr.iloc (0 . 0) "./boot/compile.scm" . 717856)
     (push.iloc.0 . 1)
     (push.iloc.0 . 2)
     (push.iloc.0 . 3)
     (apply.gloc.of compile-expression "./boot/compile.scm" . 717836))
   (call
     (touch.gloc.of |compile-clause`3009*|)
     (push.cdr.iloc (0 . 0) "./boot/compile.scm" . 719912)
     (push.iloc.0 . 1)
     (apply.gloc.of |compile-clause`3009*| "./boot/compile.scm" . 719896))
   (push)
   (extend . 1)
   (iloc.1 . 3)
   (if.true (ret.iloc 0 . 0))
   (push.const . call)
   (iloc.0 . 0)
   (push.cons)
   (ret.subr.gloc.of list "./boot/compile.scm" . 720924))
 (set.gloc.of compile-expression-and)
 (ret.const.unspec))
((call
   (subr.gloc.of make-core-hashtable 0)
   (push)
   (extend . 1)
   (push.iloc.0 . 0)
   (push.const . begin)
   (push.gloc.of compile-expression-begin)
   (subr.gloc.of core-hashtable-set! 3 "./boot/compile.scm" . 724997)
   (push.iloc.0 . 0)
   (push.const . quote)
   (push.gloc.of compile-expression-quote)
   (subr.gloc.of core-hashtable-set! 3 "./boot/compile.scm" . 726021)
   (push.iloc.0 . 0)
   (push.const . define)
   (push.gloc.of compile-expression-define)
   (subr.gloc.of core-hashtable-set! 3 "./boot/compile.scm" . 727045)
   (push.iloc.0 . 0)
   (push.const . set!)
   (push.gloc.of compile-expression-set!)
   (subr.gloc.of core-hashtable-set! 3 "./boot/compile.scm" . 728069)
   (push.iloc.0 . 0)
   (push.const . lambda)
   (push.gloc.of compile-expression-lambda)
   (subr.gloc.of core-hashtable-set! 3 "./boot/compile.scm" . 729093)
   (push.iloc.0 . 0)
   (push.const . let)
   (push.gloc.of compile-expression-let)
   (subr.gloc.of core-hashtable-set! 3 "./boot/compile.scm" . 730117)
   (push.iloc.0 . 0)
   (push.const . letrec*)
   (push.gloc.of compile-expression-letrec*)
   (subr.gloc.of core-hashtable-set! 3 "./boot/compile.scm" . 731141)
   (push.iloc.0 . 0)
   (push.const . if)
   (push.gloc.of compile-expression-if)
   (subr.gloc.of core-hashtable-set! 3 "./boot/compile.scm" . 732165)
   (push.iloc.0 . 0)
   (push.const . or)
   (push.gloc.of compile-expression-or)
   (subr.gloc.of core-hashtable-set! 3 "./boot/compile.scm" . 733189)
   (push.iloc.0 . 0)
   (push.const . and)
   (push.gloc.of compile-expression-and)
   (subr.gloc.of core-hashtable-set! 3 "./boot/compile.scm" . 734213)
   (push.iloc.0 . 0)
   (push.const . #t)
   (ret.subr.gloc.of core-hashtable-copy "./boot/compile.scm" . 735237))
 (set.gloc.of ht-dispatch-expression)
 (ret.const.unspec))
((close
   (2 0 . loop)
   (iloc.0 . 0)
   (if.null? (ret.iloc 0 . 1))
   (touch.gloc.of |loop`3048*|)
   (push.cdr.iloc (0 . 0) "./boot/compile.scm" . 745496)
   (push.car.iloc (0 . 0) "./boot/compile.scm" . 745514)
   (push.iloc.0 . 1)
   (push.subr.gloc.of append 2 "./boot/compile.scm" . 745506)
   (apply.gloc.of |loop`3048*| "./boot/compile.scm" . 745490))
 (set.gloc.of |loop`3048*|)
 (close
   (1 0 . reverse-append)
   (touch.gloc.of |loop`3048*|)
   (push.iloc.0 . 0)
   (push.const)
   (apply.gloc.of |loop`3048*| "./boot/compile.scm" . 743435))
 (set.gloc.of |reverse-append`3043*|)
 (close
   (4 0 . compile-expression-seq)
   (extend.enclose+
     (2 0 . loop)
     (iloc.0 . 0)
     (if.null?
       (touch.gloc.of |reverse-append`3043*|)
       (push.iloc.0 . 1)
       (apply.gloc.of |reverse-append`3043*| "./boot/compile.scm" . 750618))
     (push.cdr.iloc (0 . 0) "./boot/compile.scm" . 757782)
     (call
       (touch.gloc.of compile-expression)
       (push.car.iloc (0 . 0) "./boot/compile.scm" . 753688)
       (push.iloc 2 . 1)
       (call
         (iloc 2 . 2)
         (if.true.ret)
         (cdr.iloc (0 . 0) "./boot/compile.scm" . 755755)
         (ret.pair? "./boot/compile.scm" . 755748))
       (push)
       (call
         (iloc 2 . 3)
         (if.false.ret)
         (cdr.iloc (0 . 0) "./boot/compile.scm" . 756777)
         (ret.null? "./boot/compile.scm" . 756770))
       (push)
       (apply.gloc.of compile-expression "./boot/compile.scm" . 752663))
     (push)
     (iloc.0 . 1)
     (push.cons)
     (apply.iloc+ (1 . 0) "./boot/compile.scm" . 757776))
   (push.iloc.1 . 0)
   (push.const)
   (apply.iloc+ (0 . 0) "./boot/compile.scm" . 750599))
 (set.gloc.of compile-expression-seq)
 (ret.const.unspec))
((close
   (4 0 . compile-expression)
   (iloc.0 . 0)
   (if.pair?
     (push.gloc.of ht-dispatch-expression)
     (push.car.iloc (0 . 0) "./boot/compile.scm" . 766014)
     (push.const . #f)
     (push.subr.gloc.of core-hashtable-ref 3 "./boot/compile.scm" . 765971)
     (extend . 1)
     (iloc.0 . 0)
     (if.true
       (push.iloc.1 . 0)
       (push.iloc.1 . 1)
       (push.iloc.1 . 2)
       (push.iloc.1 . 3)
       (apply.iloc (0 . 0) "./boot/compile.scm" . 767013))
     (call
       (touch.gloc.of top-level-subr)
       (push.car.iloc (1 . 0) "./boot/compile.scm" . 768035)
       (apply.gloc.of top-level-subr "./boot/compile.scm" . 768019))
     (if.true
       (touch.gloc.of compile-subr-expression)
       (push.iloc.1 . 0)
       (push.iloc.1 . 1)
       (push.iloc.1 . 2)
       (push.iloc.1 . 3)
       (apply.gloc.of compile-subr-expression "./boot/compile.scm" . 769043))
     (call
       (subr.gloc.of backtrace 0 "./boot/compile.scm" . 773156)
       (if.true
         (touch.gloc.of compile-touch)
         (push.car.iloc (1 . 0) "./boot/compile.scm" . 773183)
         (push.iloc.1 . 1)
         (apply.gloc.of compile-touch "./boot/compile.scm" . 773168))
       (ret.const))
     (push)
     (call
       (touch.gloc.of compile-argument-each)
       (push.cdr.iloc (1 . 0) "./boot/compile.scm" . 772150)
       (push.iloc.1 . 1)
       (apply.gloc.of compile-argument-each "./boot/compile.scm" . 772127))
     (push)
     (call
       (touch.gloc.of compile-call)
       (push.car.iloc (1 . 0) "./boot/compile.scm" . 771117)
       (push.cdr.iloc (1 . 0) "./boot/compile.scm" . 771136)
       (push.subr.gloc.of length 1 "./boot/compile.scm" . 771128)
       (call
         (touch.gloc.of make-application-comment)
         (push.iloc.1 . 0)
         (apply.gloc.of make-application-comment "./boot/compile.scm" . 771148))
       (push)
       (push.iloc.1 . 1)
       (apply.gloc.of compile-call "./boot/compile.scm" . 771103))
     (push)
     (push.subr.gloc.of
       |.append|
       2
       (|.append|
         (compile-argument-each (cdr |form`3060*|) |cte`3060*|)
         (compile-call
           (car |form`3060*|)
           (length (cdr |form`3060*|))
           (make-application-comment |form`3060*|)
           |cte`3060*|)))
     (push.subr.gloc.of |.append| 2 "./boot/compile.scm" . 774171)
     (extend . 1)
     (iloc 2 . 3)
     (if.true (ret.iloc 0 . 0))
     (push.const . call)
     (iloc.0 . 0)
     (push.cons)
     (ret.subr.gloc.of list "./boot/compile.scm" . 775205))
   (iloc.0 . 3)
   (if.true
     (push.iloc.0 . 0)
     (const . |.&UNDEF|)
     (if.eq?
       (push.const . ret.const.undef)
       (push.subr.gloc.of list 1 "./boot/compile.scm" . 779293)
       (ret.subr.gloc.of list "./boot/compile.scm" . 779287))
     (push.iloc.0 . 0)
     (subr.gloc.of unspecified? 1 "./boot/compile.scm" . 780311)
     (if.true
       (push.const . ret.const.unspec)
       (push.subr.gloc.of list 1 "./boot/compile.scm" . 781341)
       (ret.subr.gloc.of list "./boot/compile.scm" . 781335))
     (iloc.0 . 0)
     (if.symbol?
       (call
         (touch.gloc.of iloc?)
         (push.iloc.0 . 0)
         (push.iloc.0 . 1)
         (apply.gloc.of iloc? "./boot/compile.scm" . 783387))
       (if.true
         (push.const . ret.iloc)
         (call
           (touch.gloc.of make-iloc-operand)
           (push.iloc.0 . 0)
           (push.iloc.0 . 1)
           (apply.gloc.of make-iloc-operand "./boot/compile.scm" . 784425))
         (push.cons)
         (ret.subr.gloc.of |.list| "./boot/compile.scm" . 783383))
       (push.const . ret.gloc.of)
       (push.iloc.0 . 0)
       (push.subr.gloc.of |.list| 2 (|.list| 'ret.gloc.of |form`3060*|))
       (ret.subr.gloc.of |.list| "./boot/compile.scm" . 783383))
     (push.const . ret.const)
     (iloc.0 . 0)
     (push.cons)
     (ret.subr.gloc.of |.list| "./boot/compile.scm" . 786454))
   (iloc.0 . 2)
   (if.true.ret.const)
   (push.iloc.0 . 0)
   (const . |.&UNDEF|)
   (if.eq?
     (push.const . const.undef)
     (push.subr.gloc.of list 1 "./boot/compile.scm" . 790557)
     (ret.subr.gloc.of list "./boot/compile.scm" . 790551))
   (push.iloc.0 . 0)
   (subr.gloc.of unspecified? 1 "./boot/compile.scm" . 791575)
   (if.true
     (push.const . const.unspec)
     (push.subr.gloc.of list 1 "./boot/compile.scm" . 792605)
     (ret.subr.gloc.of list "./boot/compile.scm" . 792599))
   (iloc.0 . 0)
   (if.symbol?
     (call
       (touch.gloc.of iloc?)
       (push.iloc.0 . 0)
       (push.iloc.0 . 1)
       (apply.gloc.of iloc? "./boot/compile.scm" . 794651))
     (if.true
       (call
         (touch.gloc.of make-iloc-operand)
         (push.iloc.0 . 0)
         (push.iloc.0 . 1)
         (apply.gloc.of make-iloc-operand "./boot/compile.scm" . 795686))
       (push)
       (extend . 1)
       (push.car.iloc (0 . 0) "./boot/compile.scm" . 796707)
       (extend . 1)
       (push.iloc.0 . 0)
       (const . 0)
       (if.eq?
         (push.const . iloc.0)
         (cdr.iloc (1 . 0) "./boot/compile.scm" . 797745)
         (push.cons)
         (ret.subr.gloc.of |.list| "./boot/compile.scm" . 797727))
       (push.iloc.0 . 0)
       (const . 1)
       (if.eq?
         (push.const . iloc.1)
         (cdr.iloc (1 . 0) "./boot/compile.scm" . 798769)
         (push.cons)
         (ret.subr.gloc.of |.list| "./boot/compile.scm" . 798751))
       (push.const . iloc)
       (iloc.1 . 0)
       (push.cons)
       (ret.subr.gloc.of |.list| "./boot/compile.scm" . 799775))
     (push.const . gloc.of)
     (push.iloc.0 . 0)
     (push.subr.gloc.of |.list| 2 (|.list| 'gloc.of |form`3060*|))
     (ret.subr.gloc.of |.list| "./boot/compile.scm" . 794647))
   (push.const . const)
   (iloc.0 . 0)
   (push.cons)
   (ret.subr.gloc.of |.list| "./boot/compile.scm" . 801814))
 (set.gloc.of compile-expression)
 (ret.const.unspec))
((close
   (1 0 . compile-coreform)
   (push.const . #f)
   (subr.gloc.of make-core-hashtable 0)
   (push)
   (extend . 2)
   (push.close
     (0 0)
     (call
       (touch.gloc.of ht-local-closures)
       (apply.gloc.of ht-local-closures "./boot/compile.scm" . 807943))
     (set.iloc (1 . 0) "./boot/compile.scm" . 807943)
     (touch.gloc.of ht-local-closures)
     (push.iloc.1 . 1)
     (apply.gloc.of ht-local-closures "./boot/compile.scm" . 807943))
   (push.close
     (0 0)
     (touch.gloc.of compile-expression)
     (push.iloc 2 . 0)
     (push.const)
     (push.const . #f)
     (push.const . #t)
     (apply.gloc.of compile-expression "./boot/compile.scm" . 807943))
   (push.close
     (0 0)
     (touch.gloc.of ht-local-closures)
     (push.iloc.1 . 0)
     (apply.gloc.of ht-local-closures "./boot/compile.scm" . 807943))
   (apply.gloc.of |.dynamic-wind| "./boot/compile.scm" . 807943))
 (set.gloc.of compile-coreform)
 (ret.const.unspec))

;
((close
   (3 0 . dynamic-wind)
   (call (apply.iloc (0 . 0) "./boot/dynamic-wind.scm" . 11269))
   (call
     (touch.gloc.of current-dynamic-wind-record)
     (push.iloc.0 . 0)
     (iloc.0 . 2)
     (push.cons)
     (call
       (touch.gloc.of current-dynamic-wind-record)
       (apply.gloc.of current-dynamic-wind-record "./boot/dynamic-wind.scm" . 12342))
     (push.cons)
     (apply.gloc.of current-dynamic-wind-record "./boot/dynamic-wind.scm" . 12293))
   (push.iloc.0 . 1)
   (push.close
     (0 1)
     (call
       (touch.gloc.of current-dynamic-wind-record)
       (call
         (touch.gloc.of current-dynamic-wind-record)
         (apply.gloc.of current-dynamic-wind-record "./boot/dynamic-wind.scm" . 16429))
       (push)
       (push.subr.gloc.of cdr 1 "./boot/dynamic-wind.scm" . 16424)
       (apply.gloc.of current-dynamic-wind-record "./boot/dynamic-wind.scm" . 16395))
     (call (apply.iloc (1 . 2) "./boot/dynamic-wind.scm" . 17419))
     (push.gloc.of values)
     (push.iloc.0 . 0)
     (apply.gloc.of apply "./boot/dynamic-wind.scm" . 18443))
   (apply.gloc.of call-with-values "./boot/dynamic-wind.scm" . 13317))
 (set.gloc.of dynamic-wind)
 (ret.const.unspec))
((close
   (2 0 . |.L904|)
   (push.iloc.0 . 0)
   (iloc.0 . 1)
   (if.eq? (ret.iloc 0 . 0))
   (touch.gloc.of |.L904`3099*|)
   (push.cdr.iloc (0 . 0) "./boot/dynamic-wind.scm" . 26684)
   (push.cdr.iloc (0 . 1) "./boot/dynamic-wind.scm" . 27708)
   (apply.gloc.of |.L904`3099*| "./boot/dynamic-wind.scm" . 26684))
 (set.gloc.of |.L904`3099*|)
 (close
   (2 0 . common-tail)
   (push.iloc.0 . 0)
   (push.subr.gloc.of length 1 "./boot/dynamic-wind.scm" . 25619)
   (push.iloc.0 . 1)
   (push.subr.gloc.of length 1 "./boot/dynamic-wind.scm" . 25635)
   (extend . 2)
   (touch.gloc.of |.L904`3099*|)
   (call
     (iloc.0 . 0)
     (>.iloc (0 . 1) "./boot/dynamic-wind.scm" . 26647)
     (if.true
       (push.iloc.1 . 0)
       (push.iloc.0 . 0)
       (push.iloc.0 . 1)
       (push.subr.gloc.of - 2 "./boot/dynamic-wind.scm" . 26670)
       (ret.subr.gloc.of list-tail "./boot/dynamic-wind.scm" . 26657))
     (ret.iloc 1 . 0))
   (push)
   (call
     (iloc.0 . 1)
     (>.iloc (0 . 0) "./boot/dynamic-wind.scm" . 27671)
     (if.true
       (push.iloc.1 . 1)
       (push.iloc.0 . 1)
       (push.iloc.0 . 0)
       (push.subr.gloc.of - 2 "./boot/dynamic-wind.scm" . 27694)
       (ret.subr.gloc.of list-tail "./boot/dynamic-wind.scm" . 27681))
     (ret.iloc 1 . 1))
   (push)
   (apply.gloc.of |.L904`3099*| "./boot/dynamic-wind.scm" . 28688))
 (set.gloc.of |common-tail`3092*|)
 (close
   (3 0 . perform-dynamic-wind)
   (call
     (call
       (touch.gloc.of |common-tail`3092*|)
       (push.iloc.0 . 0)
       (call
         (touch.gloc.of current-dynamic-wind-record)
         (apply.gloc.of current-dynamic-wind-record "./boot/dynamic-wind.scm" . 30754))
       (push)
       (apply.gloc.of |common-tail`3092*| "./boot/dynamic-wind.scm" . 30737))
     (push)
     (extend . 1)
     (call
       (extend.enclose+
         (1 0 . loop)
         (push.iloc.0 . 0)
         (iloc 2 . 0)
         (if.eq? (ret.const.unspec))
         (call
           (touch.gloc.of current-dynamic-wind-record)
           (push.cdr.iloc (0 . 0) "./boot/dynamic-wind.scm" . 33837)
           (apply.gloc.of current-dynamic-wind-record "./boot/dynamic-wind.scm" . 33808))
         (call (push.iloc.0 . 0) (subr.gloc.of cdar 1 "./boot/dynamic-wind.scm" . 34833) (apply))
         (push.cdr.iloc (0 . 0) "./boot/dynamic-wind.scm" . 35862)
         (apply.iloc+ (1 . 0) "./boot/dynamic-wind.scm" . 35856))
       (call
         (touch.gloc.of current-dynamic-wind-record)
         (apply.gloc.of current-dynamic-wind-record "./boot/dynamic-wind.scm" . 31767))
       (push)
       (apply.iloc+ (0 . 0) "./boot/dynamic-wind.scm" . 32777))
     (extend.enclose
       (1 0 . loop)
       (push.iloc.0 . 0)
       (iloc 2 . 0)
       (if.eq? (ret.const.unspec))
       (call
         (push.cdr.iloc (0 . 0) "./boot/dynamic-wind.scm" . 38934)
         (apply.iloc (1 . 0) "./boot/dynamic-wind.scm" . 38928))
       (call (push.iloc.0 . 0) (subr.gloc.of caar 1 "./boot/dynamic-wind.scm" . 39953) (apply))
       (touch.gloc.of current-dynamic-wind-record)
       (push.iloc.0 . 0)
       (apply.gloc.of current-dynamic-wind-record "./boot/dynamic-wind.scm" . 40976))
     (push.iloc 2 . 0)
     (apply.iloc (0 . 0) "./boot/dynamic-wind.scm" . 37897))
   (push.iloc.0 . 1)
   (push.iloc.0 . 2)
   (apply.gloc.of apply "./boot/dynamic-wind.scm" . 41989))
 (set.gloc.of perform-dynamic-wind)
 (ret.const.unspec))

;
((call (push.const . #f) (apply.gloc.of make-parameter "./boot/exception.scm" . 5154))
 (set.gloc.of parent-exception-handler)
 (ret.const.unspec))
((close
   (1 0 . raise)
   (call
     (call
       (touch.gloc.of current-exception-handler)
       (apply.gloc.of current-exception-handler "./boot/exception.scm" . 9228))
     (push)
     (extend . 1)
     (iloc.0 . 0)
     (if.true
       (call (push.iloc.1 . 0) (apply.iloc (0 . 0) "./boot/exception.scm" . 11281))
       (call
         (call
           (touch.gloc.of parent-exception-handler)
           (apply.gloc.of parent-exception-handler "./boot/exception.scm" . 12312))
         (push)
         (extend . 1)
         (iloc.0 . 0)
         (if.true
           (call
             (call (apply.gloc.of make-non-continuable-violation "./boot/exception.scm" . 14382))
             (push)
             (call
               (push.const . raise)
               (apply.gloc.of make-who-condition "./boot/exception.scm" . 15406))
             (push)
             (call
               (push.const . "returned from non-continuable exception")
               (apply.gloc.of make-message-condition "./boot/exception.scm" . 16430))
             (push)
             (call
               (push.iloc 2 . 0)
               (push.subr.gloc.of list 1 "./boot/exception.scm" . 17480)
               (apply.gloc.of make-irritants-condition "./boot/exception.scm" . 17454))
             (push)
             (apply.gloc.of condition "./boot/exception.scm" . 14371))
           (push)
           (apply.iloc (0 . 0) "./boot/exception.scm" . 14365))
         (ret.const.unspec))
       (push.const . "error in raise: returned from non-continuable exception~%~%irritants:~%~a")
       (call
         (touch.gloc.of describe-condition)
         (push.const . #f)
         (push.iloc.1 . 0)
         (apply.gloc.of describe-condition "./boot/exception.scm" . 18539))
       (push)
       (apply.gloc.of scheme-error "./boot/exception.scm" . 18449))
     (ret.const.unspec))
   (push.const . "error in raise: unhandled exception has occurred~%~%irritants:~%~a")
   (call
     (touch.gloc.of describe-condition)
     (push.const . #f)
     (push.iloc.0 . 0)
     (apply.gloc.of describe-condition "./boot/exception.scm" . 19544))
   (push)
   (apply.gloc.of scheme-error "./boot/exception.scm" . 19461))
 (set.gloc.of raise)
 (ret.const.unspec))
((close
   (1 0 . raise-continuable)
   (call
     (touch.gloc.of current-exception-handler)
     (apply.gloc.of current-exception-handler "./boot/exception.scm" . 23564))
   (push)
   (extend . 1)
   (iloc.0 . 0)
   (if.true (push.iloc.1 . 0) (apply.iloc (0 . 0) "./boot/exception.scm" . 24606))
   (push.const . "error in raise-continuable: unhandled exception has occurred~%~%irritants:~%~a")
   (call
     (touch.gloc.of describe-condition)
     (push.const . #f)
     (push.iloc.1 . 0)
     (apply.gloc.of describe-condition "./boot/exception.scm" . 26731))
   (push)
   (apply.gloc.of scheme-error "./boot/exception.scm" . 26636))
 (set.gloc.of raise-continuable)
 (ret.const.unspec))
((close
   (2 0 . with-exception-handler)
   (call
     (touch.gloc.of current-exception-handler)
     (apply.gloc.of current-exception-handler "./boot/exception.scm" . 30739))
   (push)
   (extend . 1)
   (push.const . #f)
   (push.const . #f)
   (push.close
     (1 0 . tmp2)
     (push.const . #f)
     (extend . 1)
     (push.close
       (0 0)
       (call
         (touch.gloc.of current-exception-handler)
         (apply.gloc.of current-exception-handler "./boot/exception.scm" . 36881))
       (set.iloc (1 . 0) "./boot/exception.scm" . 36881)
       (touch.gloc.of current-exception-handler)
       (push.iloc 3 . 0)
       (apply.gloc.of current-exception-handler "./boot/exception.scm" . 36881))
     (push.close (0 0) (push.iloc 2 . 0) (apply.iloc (4 . 0) "./boot/exception.scm" . 36881))
     (push.close
       (0 0)
       (touch.gloc.of current-exception-handler)
       (push.iloc.1 . 0)
       (apply.gloc.of current-exception-handler "./boot/exception.scm" . 36881))
     (apply.gloc.of |.dynamic-wind| "./boot/exception.scm" . 36881))
   (extend . 3)
   (push.close
     (0 0)
     (call
       (touch.gloc.of parent-exception-handler)
       (apply.gloc.of parent-exception-handler "./boot/exception.scm" . 37897))
     (set.iloc (1 . 0) "./boot/exception.scm" . 37897)
     (call
       (touch.gloc.of current-exception-handler)
       (apply.gloc.of current-exception-handler "./boot/exception.scm" . 37897))
     (set.iloc (1 . 1) "./boot/exception.scm" . 37897)
     (call
       (touch.gloc.of parent-exception-handler)
       (push.iloc 2 . 0)
       (apply.gloc.of parent-exception-handler "./boot/exception.scm" . 37897))
     (touch.gloc.of current-exception-handler)
     (push.iloc.1 . 2)
     (apply.gloc.of current-exception-handler "./boot/exception.scm" . 37897))
   (push.close (0 0) (apply.iloc (3 . 1) "./boot/exception.scm" . 37897))
   (push.close
     (0 0)
     (call
       (touch.gloc.of parent-exception-handler)
       (push.iloc.1 . 0)
       (apply.gloc.of parent-exception-handler "./boot/exception.scm" . 37897))
     (touch.gloc.of current-exception-handler)
     (push.iloc.1 . 1)
     (apply.gloc.of current-exception-handler "./boot/exception.scm" . 37897))
   (apply.gloc.of |.dynamic-wind| "./boot/exception.scm" . 37897))
 (set.gloc.of with-exception-handler)
 (ret.const.unspec))
((close
   (2 1 . assertion-violation)
   (call
     (iloc.0 . 0)
     (if.false.ret.const . #t)
     (push.iloc.0 . 0)
     (subr.gloc.of string? 1 "./boot/exception.scm" . 42007)
     (if.true.ret)
     (iloc.0 . 0)
     (if.symbol?.ret.const . #t)
     (push.iloc.0 . 0)
     (apply.gloc.of identifier? "./boot/exception.scm" . 42035))
   (if.true
     (push.iloc.0 . 1)
     (subr.gloc.of string? 1 "./boot/exception.scm" . 43021)
     (if.true
       (call
         (push.gloc.of condition)
         (call
           (push.gloc.of values)
           (call (apply.gloc.of make-assertion-violation "./boot/exception.scm" . 47139))
           (push)
           (call
             (iloc.0 . 0)
             (if.false.ret)
             (push.iloc.0 . 0)
             (apply.gloc.of make-who-condition "./boot/exception.scm" . 48172))
           (push)
           (call
             (push.iloc.0 . 1)
             (apply.gloc.of make-message-condition "./boot/exception.scm" . 49187))
           (push)
           (call
             (push.iloc.0 . 2)
             (apply.gloc.of make-irritants-condition "./boot/exception.scm" . 50211))
           (push)
           (push.subr.gloc.of list 4 "./boot/exception.scm" . 47133)
           (apply.gloc.of filter "./boot/exception.scm" . 46101))
         (push)
         (apply.gloc.of apply "./boot/exception.scm" . 45070))
       (push)
       (apply.gloc.of raise "./boot/exception.scm" . 44045))
     (push.const . assertion-violation)
     (call
       (touch.gloc.of wrong-type-argument-message)
       (push.const . "string")
       (push.iloc.0 . 1)
       (push.const . 2)
       (apply.gloc.of wrong-type-argument-message "./boot/exception.scm" . 51255))
     (push)
     (apply.gloc.of assertion-violation "./boot/exception.scm" . 51213))
   (push.const . assertion-violation)
   (call
     (touch.gloc.of wrong-type-argument-message)
     (push.const . "string, symbol, or #f")
     (push.iloc.0 . 0)
     (push.const . 1)
     (apply.gloc.of wrong-type-argument-message "./boot/exception.scm" . 52275))
   (push)
   (apply.gloc.of assertion-violation "./boot/exception.scm" . 52233))
 (set.gloc.of assertion-violation)
 (ret.const.unspec))
((close
   (1 1 . undefined-violation)
   (call
     (push.gloc.of condition)
     (call
       (push.gloc.of values)
       (call (apply.gloc.of make-undefined-violation "./boot/exception.scm" . 59419))
       (push)
       (call
         (iloc.0 . 0)
         (if.false.ret)
         (push.iloc.0 . 0)
         (apply.gloc.of make-who-condition "./boot/exception.scm" . 60452))
       (push)
       (call
         (iloc.0 . 1)
         (if.not.pair?.ret.const . #f)
         (push.car.iloc (0 . 1) "./boot/exception.scm" . 61512)
         (apply.gloc.of make-message-condition "./boot/exception.scm" . 61488))
       (push)
       (push.subr.gloc.of list 3 "./boot/exception.scm" . 59413)
       (apply.gloc.of filter "./boot/exception.scm" . 58381))
     (push)
     (apply.gloc.of apply "./boot/exception.scm" . 57350))
   (push)
   (apply.gloc.of raise "./boot/exception.scm" . 56325))
 (set.gloc.of undefined-violation)
 (ret.const.unspec))
((close
   (1 1 . lexical-violation)
   (call
     (push.gloc.of condition)
     (call
       (push.gloc.of values)
       (call (apply.gloc.of make-lexical-violation "./boot/exception.scm" . 68635))
       (push)
       (call
         (iloc.0 . 0)
         (if.false.ret)
         (push.iloc.0 . 0)
         (apply.gloc.of make-who-condition "./boot/exception.scm" . 69668))
       (push)
       (call
         (iloc.0 . 1)
         (if.not.pair?.ret.const . #f)
         (push.car.iloc (0 . 1) "./boot/exception.scm" . 70728)
         (apply.gloc.of make-message-condition "./boot/exception.scm" . 70704))
       (push)
       (push.subr.gloc.of list 3 "./boot/exception.scm" . 68629)
       (apply.gloc.of filter "./boot/exception.scm" . 67597))
     (push)
     (apply.gloc.of apply "./boot/exception.scm" . 66566))
   (push)
   (apply.gloc.of raise "./boot/exception.scm" . 65541))
 (set.gloc.of lexical-violation)
 (ret.const.unspec))
((close
   (3 1 . syntax-violation)
   (call
     (iloc.0 . 0)
     (if.false.ret.const . #t)
     (push.iloc.0 . 0)
     (subr.gloc.of string? 1 "./boot/exception.scm" . 74775)
     (if.true.ret)
     (iloc.0 . 0)
     (if.symbol?.ret.const . #t)
     (push.iloc.0 . 0)
     (apply.gloc.of identifier? "./boot/exception.scm" . 74803))
   (if.true
     (push.iloc.0 . 1)
     (subr.gloc.of string? 1 "./boot/exception.scm" . 75789)
     (if.true
       (call
         (push.gloc.of condition)
         (call
           (push.gloc.of values)
           (call
             (push.iloc.0 . 2)
             (call
               (iloc.0 . 3)
               (if.not.pair?.ret.const . #f)
               (push.iloc.0 . 3)
               (ret.subr.gloc.of car "./boot/exception.scm" . 79956))
             (push)
             (apply.gloc.of make-syntax-violation "./boot/exception.scm" . 79907))
           (push)
           (call
             (iloc.0 . 0)
             (if.true
               (push.iloc.0 . 0)
               (apply.gloc.of make-who-condition "./boot/exception.scm" . 81959))
             (call
               (call
                 (call
                   (touch.gloc.of wrapped-syntax-object?)
                   (push.iloc.0 . 2)
                   (apply.gloc.of wrapped-syntax-object? "./boot/exception.scm" . 83005))
                 (if.true
                   (touch.gloc.of unwrap-syntax)
                   (push.iloc.0 . 2)
                   (apply.gloc.of unwrap-syntax "./boot/exception.scm" . 83035))
                 (ret.iloc 0 . 2))
               (push)
               (extend . 1)
               (call (push.iloc.0 . 0) (apply.gloc.of identifier? "./boot/exception.scm" . 84023))
               (if.true
                 (touch.gloc.of original-id)
                 (call
                   (touch.gloc.of syntax-object-expr)
                   (push.iloc.0 . 0)
                   (apply.gloc.of syntax-object-expr "./boot/exception.scm" . 84054))
                 (push)
                 (apply.gloc.of original-id "./boot/exception.scm" . 84041))
               (iloc.0 . 0)
               (if.not.pair?.ret.const . #f)
               (call
                 (push.car.iloc (0 . 0) "./boot/exception.scm" . 85077)
                 (apply.gloc.of identifier? "./boot/exception.scm" . 85064))
               (if.false.ret)
               (touch.gloc.of original-id)
               (call
                 (touch.gloc.of syntax-object-expr)
                 (push.car.iloc (0 . 0) "./boot/exception.scm" . 85122)
                 (apply.gloc.of syntax-object-expr "./boot/exception.scm" . 85102))
               (push)
               (apply.gloc.of original-id "./boot/exception.scm" . 85089))
             (push)
             (extend . 1)
             (iloc.0 . 0)
             (if.false.ret)
             (push.iloc.0 . 0)
             (apply.gloc.of make-who-condition (make-who-condition |.L925`3172*|)))
           (push)
           (call
             (push.iloc.0 . 1)
             (apply.gloc.of make-message-condition "./boot/exception.scm" . 89123))
           (push)
           (push.subr.gloc.of
             list
             3
             (list
               (make-syntax-violation
                 |form`3168*|
                 (and (pair? |subform`3168*|) (car |subform`3168*|)))
               (if |who`3168*|
                   (make-who-condition |who`3168*|)
                   (let ((|.L925`3172*|
                           (let ((|obj`3170*|
                                   (if (wrapped-syntax-object? |form`3168*|)
                                       (unwrap-syntax |form`3168*|)
                                       |form`3168*|)))
                             (if (identifier? |obj`3170*|)
                                 (original-id (syntax-object-expr |obj`3170*|))
                                 (and (pair? |obj`3170*|)
                                      (identifier? (car |obj`3170*|))
                                      (original-id (syntax-object-expr (car |obj`3170*|))))))))
                     (and |.L925`3172*| (make-who-condition |.L925`3172*|))))
               (make-message-condition |message`3168*|)))
           (apply.gloc.of
             filter
             (filter
               values
               (list
                 (make-syntax-violation
                   |form`3168*|
                   (and (pair? |subform`3168*|) (car |subform`3168*|)))
                 (if |who`3168*|
                     (make-who-condition |who`3168*|)
                     (let ((|.L925`3172*|
                             (let ((|obj`3170*|
                                     (if (wrapped-syntax-object? |form`3168*|)
                                         (unwrap-syntax |form`3168*|)
                                         |form`3168*|)))
                               (if (identifier? |obj`3170*|)
                                   (original-id (syntax-object-expr |obj`3170*|))
                                   (and (pair? |obj`3170*|)
                                        (identifier? (car |obj`3170*|))
                                        (original-id (syntax-object-expr (car |obj`3170*|))))))))
                       (and |.L925`3172*| (make-who-condition |.L925`3172*|))))
                 (make-message-condition |message`3168*|)))))
         (push)
         (apply.gloc.of
           apply
           (apply
             condition
             (filter
               values
               (list
                 (make-syntax-violation
                   |form`3168*|
                   (and (pair? |subform`3168*|) (car |subform`3168*|)))
                 (if |who`3168*|
                     (make-who-condition |who`3168*|)
                     (let ((|.L925`3172*|
                             (let ((|obj`3170*|
                                     (if (wrapped-syntax-object? |form`3168*|)
                                         (unwrap-syntax |form`3168*|)
                                         |form`3168*|)))
                               (if (identifier? |obj`3170*|)
                                   (original-id (syntax-object-expr |obj`3170*|))
                                   (and (pair? |obj`3170*|)
                                        (identifier? (car |obj`3170*|))
                                        (original-id (syntax-object-expr (car |obj`3170*|))))))))
                       (and |.L925`3172*| (make-who-condition |.L925`3172*|))))
                 (make-message-condition |message`3168*|))))))
       (push)
       (apply.gloc.of
         raise
         (raise
           (apply
             condition
             (filter
               values
               (list
                 (make-syntax-violation
                   |form`3168*|
                   (and (pair? |subform`3168*|) (car |subform`3168*|)))
                 (if |who`3168*|
                     (make-who-condition |who`3168*|)
                     (let ((|.L925`3172*|
                             (let ((|obj`3170*|
                                     (if (wrapped-syntax-object? |form`3168*|)
                                         (unwrap-syntax |form`3168*|)
                                         |form`3168*|)))
                               (if (identifier? |obj`3170*|)
                                   (original-id (syntax-object-expr |obj`3170*|))
                                   (and (pair? |obj`3170*|)
                                        (identifier? (car |obj`3170*|))
                                        (original-id (syntax-object-expr (car |obj`3170*|))))))))
                       (and |.L925`3172*| (make-who-condition |.L925`3172*|))))
                 (make-message-condition |message`3168*|)))))))
     (push.const . syntax-violation)
     (call
       (touch.gloc.of wrong-type-argument-message)
       (push.const . "string")
       (push.iloc.0 . 1)
       (push.const . 2)
       (apply.gloc.of wrong-type-argument-message "./boot/exception.scm" . 90164))
     (push)
     (apply.gloc.of assertion-violation "./boot/exception.scm" . 90125))
   (push.const . syntax-violation)
   (call
     (touch.gloc.of wrong-type-argument-message)
     (push.const . "string, symbol, or #f")
     (push.iloc.0 . 0)
     (push.const . 1)
     (apply.gloc.of wrong-type-argument-message "./boot/exception.scm" . 91184))
   (push)
   (apply.gloc.of assertion-violation "./boot/exception.scm" . 91145))
 (set.gloc.of syntax-violation)
 (ret.const.unspec))
((close
   (2 1 . error)
   (call
     (iloc.0 . 0)
     (if.false.ret.const . #t)
     (push.iloc.0 . 0)
     (subr.gloc.of string? 1 "./boot/exception.scm" . 95255)
     (if.true.ret)
     (iloc.0 . 0)
     (if.symbol?.ret.const . #t)
     (push.iloc.0 . 0)
     (apply.gloc.of identifier? "./boot/exception.scm" . 95283))
   (if.true
     (push.iloc.0 . 1)
     (subr.gloc.of string? 1 "./boot/exception.scm" . 96269)
     (if.true
       (call
         (push.gloc.of condition)
         (call
           (push.gloc.of values)
           (call (apply.gloc.of make-error "./boot/exception.scm" . 100387))
           (push)
           (call
             (iloc.0 . 0)
             (if.false.ret)
             (push.iloc.0 . 0)
             (apply.gloc.of make-who-condition "./boot/exception.scm" . 101420))
           (push)
           (call
             (push.iloc.0 . 1)
             (apply.gloc.of make-message-condition "./boot/exception.scm" . 102435))
           (push)
           (call
             (push.iloc.0 . 2)
             (apply.gloc.of make-irritants-condition "./boot/exception.scm" . 103459))
           (push)
           (push.subr.gloc.of list 4 "./boot/exception.scm" . 100381)
           (apply.gloc.of filter "./boot/exception.scm" . 99349))
         (push)
         (apply.gloc.of apply "./boot/exception.scm" . 98318))
       (push)
       (apply.gloc.of raise "./boot/exception.scm" . 97293))
     (push.const . error)
     (call
       (touch.gloc.of wrong-type-argument-message)
       (push.const . "string")
       (push.iloc.0 . 1)
       (push.const . 2)
       (apply.gloc.of wrong-type-argument-message "./boot/exception.scm" . 104489))
     (push)
     (apply.gloc.of assertion-violation "./boot/exception.scm" . 104461))
   (push.const . error)
   (call
     (touch.gloc.of wrong-type-argument-message)
     (push.const . "string, symbol, or #f")
     (push.iloc.0 . 0)
     (push.const . 1)
     (apply.gloc.of wrong-type-argument-message "./boot/exception.scm" . 105509))
   (push)
   (apply.gloc.of assertion-violation "./boot/exception.scm" . 105481))
 (set.gloc.of error)
 (ret.const.unspec))
((close
   (2 1 . implementation-restriction-violation)
   (call
     (push.gloc.of condition)
     (call
       (push.gloc.of values)
       (call
         (apply.gloc.of make-implementation-restriction-violation "./boot/exception.scm" . 112667))
       (push)
       (call
         (iloc.0 . 0)
         (if.false.ret)
         (push.iloc.0 . 0)
         (apply.gloc.of make-who-condition "./boot/exception.scm" . 113700))
       (push)
       (call
         (push.iloc.0 . 1)
         (apply.gloc.of make-message-condition "./boot/exception.scm" . 114715))
       (push)
       (call
         (iloc.0 . 2)
         (if.not.pair?.ret.const . #f)
         (push.iloc.0 . 2)
         (apply.gloc.of make-irritants-condition "./boot/exception.scm" . 115762))
       (push)
       (push.subr.gloc.of list 4 "./boot/exception.scm" . 112661)
       (apply.gloc.of filter "./boot/exception.scm" . 111629))
     (push)
     (apply.gloc.of apply "./boot/exception.scm" . 110598))
   (push)
   (apply.gloc.of raise "./boot/exception.scm" . 109573))
 (set.gloc.of implementation-restriction-violation)
 (ret.const.unspec))
((close
   (3 1 . undefined/syntax-violation)
   (call
     (push.gloc.of condition)
     (call
       (push.gloc.of values)
       (call
         (push.iloc.0 . 2)
         (call
           (iloc.0 . 3)
           (if.not.pair?.ret.const . #f)
           (push.iloc.0 . 3)
           (ret.subr.gloc.of car "./boot/exception.scm" . 122956))
         (push)
         (apply.gloc.of make-syntax-violation "./boot/exception.scm" . 122907))
       (push)
       (call (apply.gloc.of make-undefined-violation "./boot/exception.scm" . 123931))
       (push)
       (call
         (iloc.0 . 0)
         (if.false.ret)
         (push.iloc.0 . 0)
         (apply.gloc.of make-who-condition "./boot/exception.scm" . 124964))
       (push)
       (call
         (push.iloc.0 . 1)
         (apply.gloc.of make-message-condition "./boot/exception.scm" . 125979))
       (push)
       (push.subr.gloc.of list 4 "./boot/exception.scm" . 122901)
       (apply.gloc.of filter "./boot/exception.scm" . 121869))
     (push)
     (apply.gloc.of apply "./boot/exception.scm" . 120838))
   (push)
   (apply.gloc.of raise "./boot/exception.scm" . 119813))
 (set.gloc.of undefined/syntax-violation)
 (ret.const.unspec))
((close
   (3 1 . assertion/syntax-violation)
   (call
     (push.gloc.of condition)
     (call
       (push.gloc.of values)
       (call
         (push.iloc.0 . 2)
         (call
           (iloc.0 . 3)
           (if.not.pair?.ret.const . #f)
           (push.iloc.0 . 3)
           (ret.subr.gloc.of car "./boot/exception.scm" . 133196))
         (push)
         (apply.gloc.of make-syntax-violation "./boot/exception.scm" . 133147))
       (push)
       (call (apply.gloc.of make-assertion-violation "./boot/exception.scm" . 134171))
       (push)
       (call
         (iloc.0 . 0)
         (if.false.ret)
         (push.iloc.0 . 0)
         (apply.gloc.of make-who-condition "./boot/exception.scm" . 135204))
       (push)
       (call
         (push.iloc.0 . 1)
         (apply.gloc.of make-message-condition "./boot/exception.scm" . 136219))
       (push)
       (push.subr.gloc.of list 4 "./boot/exception.scm" . 133141)
       (apply.gloc.of filter "./boot/exception.scm" . 132109))
     (push)
     (apply.gloc.of apply "./boot/exception.scm" . 131078))
   (push)
   (apply.gloc.of raise "./boot/exception.scm" . 130053))
 (set.gloc.of assertion/syntax-violation)
 (ret.const.unspec))
((close
   (0 1 . scheme-error)
   (push.const . #t)
   (push.const . "~!")
   (subr.gloc.of format 2 "./boot/exception.scm" . 153605)
   (subr.gloc.of current-error-port 0)
   (push)
   (extend . 1)
   (push.iloc.0 . 0)
   (push.const . "~&~%")
   (subr.gloc.of format 2 "./boot/exception.scm" . 155655)
   (call
     (push.gloc.of format)
     (push.iloc.0 . 0)
     (push.iloc.1 . 0)
     (apply.gloc.of apply "./boot/exception.scm" . 156679))
   (push.iloc.0 . 0)
   (push.const . "~%")
   (subr.gloc.of format 2 "./boot/exception.scm" . 157703)
   (subr.gloc.of display-backtrace 0 "./boot/exception.scm" . 158727)
   (push.iloc.0 . 0)
   (push.const . "~%[exit]~%~!")
   (subr.gloc.of format 2 "./boot/exception.scm" . 159751)
   (push.const . #f)
   (ret.subr.gloc.of exit "./boot/exception.scm" . 160775))
 (set.gloc.of scheme-error)
 (ret.const.unspec))
((close
   (3 1 . raise-i/o-filename-error)
   (call
     (push.gloc.of condition)
     (call
       (push.gloc.of values)
       (call
         (push.iloc.0 . 2)
         (apply.gloc.of make-i/o-filename-error "./boot/exception.scm" . 167963))
       (push)
       (call
         (iloc.0 . 0)
         (if.false.ret)
         (push.iloc.0 . 0)
         (apply.gloc.of make-who-condition "./boot/exception.scm" . 168996))
       (push)
       (call
         (push.iloc.0 . 1)
         (apply.gloc.of make-message-condition "./boot/exception.scm" . 170011))
       (push)
       (call
         (iloc.0 . 3)
         (if.not.pair?.ret.const . #f)
         (push.iloc.0 . 3)
         (apply.gloc.of make-irritants-condition "./boot/exception.scm" . 171058))
       (push)
       (push.subr.gloc.of list 4 "./boot/exception.scm" . 167957)
       (apply.gloc.of filter "./boot/exception.scm" . 166925))
     (push)
     (apply.gloc.of apply "./boot/exception.scm" . 165894))
   (push)
   (apply.gloc.of raise "./boot/exception.scm" . 164869))
 (set.gloc.of raise-i/o-filename-error)
 (ret.const.unspec))
((close
   (2 1 . raise-i/o-error)
   (call
     (push.gloc.of condition)
     (call
       (push.gloc.of values)
       (call (apply.gloc.of make-i/o-error "./boot/exception.scm" . 178203))
       (push)
       (call
         (iloc.0 . 0)
         (if.false.ret)
         (push.iloc.0 . 0)
         (apply.gloc.of make-who-condition "./boot/exception.scm" . 179236))
       (push)
       (call
         (push.iloc.0 . 1)
         (apply.gloc.of make-message-condition "./boot/exception.scm" . 180251))
       (push)
       (call
         (iloc.0 . 2)
         (if.not.pair?.ret.const . #f)
         (push.iloc.0 . 2)
         (apply.gloc.of make-irritants-condition "./boot/exception.scm" . 181298))
       (push)
       (push.subr.gloc.of list 4 "./boot/exception.scm" . 178197)
       (apply.gloc.of filter "./boot/exception.scm" . 177165))
     (push)
     (apply.gloc.of apply "./boot/exception.scm" . 176134))
   (push)
   (apply.gloc.of raise "./boot/exception.scm" . 175109))
 (set.gloc.of raise-i/o-error)
 (ret.const.unspec))
((close
   (4 1 . raise-misc-i/o-error-with-port)
   (call
     (push.gloc.of condition)
     (call
       (push.gloc.of values)
       (call
         (push.iloc.0 . 0)
         (push.iloc.0 . 4)
         (apply.gloc.of apply "./boot/exception.scm" . 189467))
       (push)
       (call
         (iloc.0 . 1)
         (if.false.ret)
         (push.iloc.0 . 1)
         (apply.gloc.of make-who-condition "./boot/exception.scm" . 190500))
       (push)
       (call
         (push.iloc.0 . 2)
         (apply.gloc.of make-message-condition "./boot/exception.scm" . 191515))
       (push)
       (call
         (iloc.0 . 3)
         (if.false.ret)
         (push.iloc.0 . 3)
         (apply.gloc.of make-i/o-port-error "./boot/exception.scm" . 192549))
       (push)
       (call
         (push.iloc.0 . 3)
         (push.iloc.0 . 4)
         (push.subr.gloc.of cons* 2 "./boot/exception.scm" . 193589)
         (apply.gloc.of make-irritants-condition "./boot/exception.scm" . 193563))
       (push)
       (push.subr.gloc.of list 5 "./boot/exception.scm" . 189461)
       (apply.gloc.of filter "./boot/exception.scm" . 188429))
     (push)
     (apply.gloc.of apply "./boot/exception.scm" . 187398))
   (push)
   (apply.gloc.of raise "./boot/exception.scm" . 186373))
 (set.gloc.of raise-misc-i/o-error-with-port)
 (ret.const.unspec))
((close
   (3 1 . raise-misc-i/o-error)
   (call
     (push.gloc.of condition)
     (call
       (push.gloc.of values)
       (call
         (push.iloc.0 . 0)
         (push.iloc.0 . 3)
         (apply.gloc.of apply "./boot/exception.scm" . 200731))
       (push)
       (call
         (iloc.0 . 1)
         (if.false.ret)
         (push.iloc.0 . 1)
         (apply.gloc.of make-who-condition "./boot/exception.scm" . 201764))
       (push)
       (call
         (push.iloc.0 . 2)
         (apply.gloc.of make-message-condition "./boot/exception.scm" . 202779))
       (push)
       (call
         (iloc.0 . 3)
         (if.not.pair?.ret.const . #f)
         (push.iloc.0 . 3)
         (apply.gloc.of make-irritants-condition "./boot/exception.scm" . 204832))
       (push)
       (push.subr.gloc.of list 4 "./boot/exception.scm" . 200725)
       (apply.gloc.of filter "./boot/exception.scm" . 199693))
     (push)
     (apply.gloc.of apply "./boot/exception.scm" . 198662))
   (push)
   (apply.gloc.of raise "./boot/exception.scm" . 197637))
 (set.gloc.of raise-misc-i/o-error)
 (ret.const.unspec))
((close
   (3 0 . raise-i/o-read-error)
   (touch.gloc.of raise-misc-i/o-error-with-port)
   (push.gloc.of make-i/o-read-error)
   (push.iloc.0 . 0)
   (push.iloc.0 . 1)
   (push.iloc.0 . 2)
   (apply.gloc.of raise-misc-i/o-error-with-port "./boot/exception.scm" . 208901))
 (set.gloc.of raise-i/o-read-error)
 (ret.const.unspec))
((close
   (3 0 . raise-i/o-write-error)
   (touch.gloc.of raise-misc-i/o-error-with-port)
   (push.gloc.of make-i/o-write-error)
   (push.iloc.0 . 0)
   (push.iloc.0 . 1)
   (push.iloc.0 . 2)
   (apply.gloc.of raise-misc-i/o-error-with-port "./boot/exception.scm" . 212997))
 (set.gloc.of raise-i/o-write-error)
 (ret.const.unspec))
((close
   (3 0 . raise-i/o-file-protection-error)
   (touch.gloc.of raise-misc-i/o-error)
   (push.gloc.of make-i/o-file-protection-error)
   (push.iloc.0 . 0)
   (push.iloc.0 . 1)
   (push.iloc.0 . 2)
   (apply.gloc.of raise-misc-i/o-error "./boot/exception.scm" . 217093))
 (set.gloc.of raise-i/o-file-protection-error)
 (ret.const.unspec))
((close
   (3 0 . raise-i/o-file-is-read-only-error)
   (touch.gloc.of raise-misc-i/o-error-with-port)
   (push.gloc.of make-i/o-file-is-read-only-error)
   (push.iloc.0 . 0)
   (push.iloc.0 . 1)
   (push.iloc.0 . 2)
   (apply.gloc.of raise-misc-i/o-error-with-port "./boot/exception.scm" . 221189))
 (set.gloc.of raise-i/o-file-is-read-only-error)
 (ret.const.unspec))
((close
   (3 0 . raise-i/o-file-already-exists-error)
   (touch.gloc.of raise-misc-i/o-error)
   (push.gloc.of make-i/o-file-already-exists-error)
   (push.iloc.0 . 0)
   (push.iloc.0 . 1)
   (push.iloc.0 . 2)
   (apply.gloc.of raise-misc-i/o-error "./boot/exception.scm" . 225285))
 (set.gloc.of raise-i/o-file-already-exists-error)
 (ret.const.unspec))
((close
   (3 0 . raise-i/o-file-does-not-exist-error)
   (touch.gloc.of raise-misc-i/o-error)
   (push.gloc.of make-i/o-file-does-not-exist-error)
   (push.iloc.0 . 0)
   (push.iloc.0 . 1)
   (push.iloc.0 . 2)
   (apply.gloc.of raise-misc-i/o-error "./boot/exception.scm" . 229381))
 (set.gloc.of raise-i/o-file-does-not-exist-error)
 (ret.const.unspec))
((close
   (4 0 . raise-i/o-invalid-position-error)
   (touch.gloc.of raise-misc-i/o-error-with-port)
   (push.gloc.of make-i/o-invalid-position-error)
   (push.iloc.0 . 0)
   (push.iloc.0 . 1)
   (push.iloc.0 . 2)
   (push.iloc.0 . 3)
   (apply.gloc.of raise-misc-i/o-error-with-port "./boot/exception.scm" . 233477))
 (set.gloc.of raise-i/o-invalid-position-error)
 (ret.const.unspec))
((close
   (3 0 . raise-i/o-decoding-error)
   (touch.gloc.of raise-misc-i/o-error)
   (push.gloc.of make-i/o-decoding-error)
   (push.iloc.0 . 0)
   (push.iloc.0 . 1)
   (push.iloc.0 . 2)
   (apply.gloc.of raise-misc-i/o-error "./boot/exception.scm" . 237573))
 (set.gloc.of raise-i/o-decoding-error)
 (ret.const.unspec))
((close
   (4 0 . raise-i/o-encoding-error)
   (touch.gloc.of raise-misc-i/o-error)
   (push.gloc.of make-i/o-encoding-error)
   (push.iloc.0 . 0)
   (push.iloc.0 . 1)
   (push.iloc.0 . 2)
   (push.iloc.0 . 3)
   (apply.gloc.of raise-misc-i/o-error "./boot/exception.scm" . 241669))
 (set.gloc.of raise-i/o-encoding-error)
 (ret.const.unspec))

;
((subr.gloc.of make-core-hashtable 0 "./boot/record.scm" . 5156)
 (set.gloc.of nongenerative-record-types)
 (ret.const.unspec))
((close
   (6 0 . make-rtd)
   (push.const . type:record-type-descriptor)
   (push.iloc.0 . 0)
   (push.iloc.0 . 1)
   (push.iloc.0 . 2)
   (push.iloc.0 . 3)
   (push.iloc.0 . 4)
   (push.iloc.0 . 5)
   (ret.subr.gloc.of tuple "./boot/record.scm" . 9221))
 (set.gloc.of make-rtd)
 (ret.const.unspec))
((close
   (1 0 . record-type-descriptor?)
   (push.iloc.0 . 0)
   (push.const . 0)
   (push.subr.gloc.of tuple-ref 2 "./boot/record.scm" . 13322)
   (const . type:record-type-descriptor)
   (ret.eq? "./boot/record.scm" . 13317))
 (set.gloc.of record-type-descriptor?)
 (ret.const.unspec))
((close
   (1 0 . rtd-name)
   (push.iloc.0 . 0)
   (push.const . 1)
   (ret.subr.gloc.of tuple-ref "./boot/record.scm" . 15399))
 (set.gloc.of rtd-name)
 (ret.const.unspec))
((close
   (1 0 . rtd-parent)
   (push.iloc.0 . 0)
   (push.const . 2)
   (ret.subr.gloc.of tuple-ref "./boot/record.scm" . 16423))
 (set.gloc.of rtd-parent)
 (ret.const.unspec))
((close
   (1 0 . rtd-uid)
   (push.iloc.0 . 0)
   (push.const . 3)
   (ret.subr.gloc.of tuple-ref "./boot/record.scm" . 17447))
 (set.gloc.of rtd-uid)
 (ret.const.unspec))
((close
   (1 0 . rtd-sealed?)
   (push.iloc.0 . 0)
   (push.const . 4)
   (ret.subr.gloc.of tuple-ref "./boot/record.scm" . 18471))
 (set.gloc.of rtd-sealed?)
 (ret.const.unspec))
((close
   (1 0 . rtd-opaque?)
   (push.iloc.0 . 0)
   (push.const . 5)
   (ret.subr.gloc.of tuple-ref "./boot/record.scm" . 19495))
 (set.gloc.of rtd-opaque?)
 (ret.const.unspec))
((close
   (1 0 . rtd-fields)
   (push.iloc.0 . 0)
   (push.const . 6)
   (ret.subr.gloc.of tuple-ref "./boot/record.scm" . 20519))
 (set.gloc.of rtd-fields)
 (ret.const.unspec))
((close
   (2 0 . rtd-ancestor?)
   (extend.enclose+
     (1 0 . loop)
     (push.iloc 2 . 0)
     (iloc.0 . 0)
     (if.eq?.ret.const . #t)
     (iloc.0 . 0)
     (if.false.ret)
     (call
       (touch.gloc.of rtd-parent)
       (push.iloc.0 . 0)
       (apply.gloc.of rtd-parent "./boot/record.scm" . 27670))
     (push)
     (apply.iloc+ (1 . 0) "./boot/record.scm" . 27664))
   (push.iloc.1 . 1)
   (apply.iloc+ (0 . 0) "./boot/record.scm" . 25607))
 (set.gloc.of rtd-ancestor?)
 (ret.const.unspec))
((close
   (2 0 . loop)
   (iloc.0 . 0)
   (if.true
     (touch.gloc.of |loop`3240*|)
     (call
       (touch.gloc.of rtd-parent)
       (push.iloc.0 . 0)
       (apply.gloc.of rtd-parent "./boot/record.scm" . 33812))
     (push)
     (push.iloc.0 . 1)
     (call
       (touch.gloc.of rtd-fields)
       (push.iloc.0 . 0)
       (apply.gloc.of rtd-fields "./boot/record.scm" . 34853))
     (push)
     (push.subr.gloc.of length 1 "./boot/record.scm" . 34845)
     (push.subr.gloc.of + 2 "./boot/record.scm" . 34836)
     (apply.gloc.of |loop`3240*| "./boot/record.scm" . 33806))
   (ret.iloc 0 . 1))
 (set.gloc.of |loop`3240*|)
 (close
   (1 0 . rtd-inherited-field-count)
   (touch.gloc.of |loop`3240*|)
   (call
     (touch.gloc.of rtd-parent)
     (push.iloc.0 . 0)
     (apply.gloc.of rtd-parent "./boot/record.scm" . 31765))
   (push)
   (push.const . 0)
   (apply.gloc.of |loop`3240*| "./boot/record.scm" . 32775))
 (set.gloc.of rtd-inherited-field-count)
 (ret.const.unspec))
((close
   (1 0 . rtd-total-field-count)
   (call
     (touch.gloc.of rtd-inherited-field-count)
     (push.iloc.0 . 0)
     (apply.gloc.of rtd-inherited-field-count "./boot/record.scm" . 40968))
   (push)
   (call
     (touch.gloc.of rtd-fields)
     (push.iloc.0 . 0)
     (apply.gloc.of rtd-fields "./boot/record.scm" . 41008))
   (push)
   (push.subr.gloc.of length 1 "./boot/record.scm" . 41000)
   (ret.subr.gloc.of + "./boot/record.scm" . 40965))
 (set.gloc.of rtd-total-field-count)
 (ret.const.unspec))
((close
   (1 0 . record-type-name)
   (call (push.iloc.0 . 0) (apply.gloc.of record-type-descriptor? "./boot/record.scm" . 45065))
   (if.false.call
     (push.const . record-type-name)
     (call
       (touch.gloc.of wrong-type-argument-message)
       (push.const . "record-type-descriptor")
       (push.iloc.0 . 0)
       (apply.gloc.of wrong-type-argument-message "./boot/record.scm" . 46128))
     (push)
     (apply.gloc.of assertion-violation "./boot/record.scm" . 46089))
   (touch.gloc.of rtd-name)
   (push.iloc.0 . 0)
   (apply.gloc.of rtd-name "./boot/record.scm" . 47109))
 (set.gloc.of record-type-name)
 (ret.const.unspec))
((close
   (1 0 . record-type-parent)
   (call (push.iloc.0 . 0) (apply.gloc.of record-type-descriptor? "./boot/record.scm" . 51209))
   (if.false.call
     (push.const . record-type-name)
     (call
       (touch.gloc.of wrong-type-argument-message)
       (push.const . "record-type-descriptor")
       (push.iloc.0 . 0)
       (apply.gloc.of wrong-type-argument-message "./boot/record.scm" . 52272))
     (push)
     (apply.gloc.of assertion-violation "./boot/record.scm" . 52233))
   (touch.gloc.of rtd-parent)
   (push.iloc.0 . 0)
   (apply.gloc.of rtd-parent "./boot/record.scm" . 53253))
 (set.gloc.of record-type-parent)
 (ret.const.unspec))
((close
   (1 0 . record-type-uid)
   (call (push.iloc.0 . 0) (apply.gloc.of record-type-descriptor? "./boot/record.scm" . 57353))
   (if.false.call
     (push.const . record-type-name)
     (call
       (touch.gloc.of wrong-type-argument-message)
       (push.const . "record-type-descriptor")
       (push.iloc.0 . 0)
       (apply.gloc.of wrong-type-argument-message "./boot/record.scm" . 58416))
     (push)
     (apply.gloc.of assertion-violation "./boot/record.scm" . 58377))
   (touch.gloc.of rtd-uid)
   (push.iloc.0 . 0)
   (apply.gloc.of rtd-uid "./boot/record.scm" . 59397))
 (set.gloc.of record-type-uid)
 (ret.const.unspec))
((close
   (1 0 . record-type-generative?)
   (call (push.iloc.0 . 0) (apply.gloc.of record-type-descriptor? "./boot/record.scm" . 63497))
   (if.false.call
     (push.const . record-type-name)
     (call
       (touch.gloc.of wrong-type-argument-message)
       (push.const . "record-type-descriptor")
       (push.iloc.0 . 0)
       (apply.gloc.of wrong-type-argument-message "./boot/record.scm" . 64560))
     (push)
     (apply.gloc.of assertion-violation "./boot/record.scm" . 64521))
   (call
     (touch.gloc.of rtd-uid)
     (push.iloc.0 . 0)
     (apply.gloc.of rtd-uid "./boot/record.scm" . 65546))
   (push)
   (ret.subr.gloc.of not "./boot/record.scm" . 65541))
 (set.gloc.of record-type-generative?)
 (ret.const.unspec))
((close
   (1 0 . record-type-sealed?)
   (call (push.iloc.0 . 0) (apply.gloc.of record-type-descriptor? "./boot/record.scm" . 69641))
   (if.false.call
     (push.const . record-type-name)
     (call
       (touch.gloc.of wrong-type-argument-message)
       (push.const . "record-type-descriptor")
       (push.iloc.0 . 0)
       (apply.gloc.of wrong-type-argument-message "./boot/record.scm" . 70704))
     (push)
     (apply.gloc.of assertion-violation "./boot/record.scm" . 70665))
   (touch.gloc.of rtd-sealed?)
   (push.iloc.0 . 0)
   (apply.gloc.of rtd-sealed? "./boot/record.scm" . 71685))
 (set.gloc.of record-type-sealed?)
 (ret.const.unspec))
((close
   (1 0 . record-type-opaque?)
   (call (push.iloc.0 . 0) (apply.gloc.of record-type-descriptor? "./boot/record.scm" . 75785))
   (if.false.call
     (push.const . record-type-name)
     (call
       (touch.gloc.of wrong-type-argument-message)
       (push.const . "record-type-descriptor")
       (push.iloc.0 . 0)
       (apply.gloc.of wrong-type-argument-message "./boot/record.scm" . 76848))
     (push)
     (apply.gloc.of assertion-violation "./boot/record.scm" . 76809))
   (touch.gloc.of rtd-opaque?)
   (push.iloc.0 . 0)
   (apply.gloc.of rtd-opaque? "./boot/record.scm" . 77829))
 (set.gloc.of record-type-opaque?)
 (ret.const.unspec))
((close
   (1 0 . record-type-field-names)
   (call (push.iloc.0 . 0) (apply.gloc.of record-type-descriptor? "./boot/record.scm" . 81929))
   (if.false.call
     (push.const . record-type-name)
     (call
       (touch.gloc.of wrong-type-argument-message)
       (push.const . "record-type-descriptor")
       (push.iloc.0 . 0)
       (apply.gloc.of wrong-type-argument-message "./boot/record.scm" . 82992))
     (push)
     (apply.gloc.of assertion-violation "./boot/record.scm" . 82953))
   (call
     (push.gloc.of cdr)
     (call
       (touch.gloc.of rtd-fields)
       (push.iloc.0 . 0)
       (apply.gloc.of rtd-fields "./boot/record.scm" . 83996))
     (push)
     (apply.gloc.of map "./boot/record.scm" . 83987))
   (push)
   (ret.subr.gloc.of list->vector "./boot/record.scm" . 83973))
 (set.gloc.of record-type-field-names)
 (ret.const.unspec))
((close
   (2 0 . record-field-mutable?)
   (call (push.iloc.0 . 0) (apply.gloc.of record-type-descriptor? "./boot/record.scm" . 88073))
   (if.false.call
     (push.const . record-type-name)
     (call
       (touch.gloc.of wrong-type-argument-message)
       (push.const . "record-type-descriptor")
       (push.iloc.0 . 0)
       (push.const . 1)
       (apply.gloc.of wrong-type-argument-message "./boot/record.scm" . 89136))
     (push)
     (push.iloc.0 . 0)
     (push.iloc.0 . 1)
     (push.subr.gloc.of list 2 "./boot/record.scm" . 89197)
     (apply.gloc.of assertion-violation "./boot/record.scm" . 89097))
   (call
     (touch.gloc.of rtd-fields)
     (push.iloc.0 . 0)
     (apply.gloc.of rtd-fields "./boot/record.scm" . 90132))
   (push)
   (push.iloc.0 . 1)
   (push.subr.gloc.of list-ref 2 "./boot/record.scm" . 90122)
   (ret.subr.gloc.of car "./boot/record.scm" . 90117))
 (set.gloc.of record-field-mutable?)
 (ret.const.unspec))
((close
   (6 0 . make-record-type-descriptor)
   (push.iloc.0 . 0)
   (subr.gloc.of symbol? 1 "./boot/record.scm" . 94217)
   (if.false.call
     (push.const . make-record-type-descriptor)
     (call
       (touch.gloc.of wrong-type-argument-message)
       (push.const . "symbol")
       (push.iloc.0 . 0)
       (push.const . 1)
       (apply.gloc.of wrong-type-argument-message "./boot/record.scm" . 96286))
     (push)
     (push.iloc.0 . 0)
     (push.iloc.0 . 1)
     (push.iloc.0 . 2)
     (push.iloc.0 . 3)
     (push.iloc.0 . 4)
     (push.iloc.0 . 5)
     (push.subr.gloc.of list 6 "./boot/record.scm" . 97310)
     (apply.gloc.of assertion-violation "./boot/record.scm" . 95241))
   (push.iloc.0 . 5)
   (subr.gloc.of vector? 1 "./boot/record.scm" . 98313)
   (if.false.call
     (push.const . make-record-type-descriptor)
     (call
       (touch.gloc.of wrong-type-argument-message)
       (push.const . "vector")
       (push.iloc.0 . 5)
       (push.const . 6)
       (apply.gloc.of wrong-type-argument-message "./boot/record.scm" . 100382))
     (push)
     (push.iloc.0 . 0)
     (push.iloc.0 . 1)
     (push.iloc.0 . 2)
     (push.iloc.0 . 3)
     (push.iloc.0 . 4)
     (push.iloc.0 . 5)
     (push.subr.gloc.of list 6 "./boot/record.scm" . 101406)
     (apply.gloc.of assertion-violation "./boot/record.scm" . 99337))
   (call
     (iloc.0 . 1)
     (if.false.ret)
     (call (push.iloc.0 . 1) (apply.gloc.of record-type-descriptor? "./boot/record.scm" . 103438))
     (if.false.call
       (push.const . make-record-type-descriptor)
       (call
         (touch.gloc.of wrong-type-argument-message)
         (push.const . "record-type descriptor or #f")
         (push.iloc.0 . 1)
         (push.const . 2)
         (apply.gloc.of wrong-type-argument-message "./boot/record.scm" . 105507))
       (push)
       (push.iloc.0 . 0)
       (push.iloc.0 . 1)
       (push.iloc.0 . 2)
       (push.iloc.0 . 3)
       (push.iloc.0 . 4)
       (push.iloc.0 . 5)
       (push.subr.gloc.of list 6 "./boot/record.scm" . 106531)
       (apply.gloc.of assertion-violation "./boot/record.scm" . 104462))
     (if.false.ret)
     (call
       (touch.gloc.of rtd-sealed?)
       (push.iloc.0 . 1)
       (apply.gloc.of rtd-sealed? "./boot/record.scm" . 107535))
     (if.false.ret)
     (push.const . make-record-type-descriptor)
     (push.const . "attempt to extend a sealed record-type")
     (push.iloc.0 . 1)
     (apply.gloc.of assertion-violation "./boot/record.scm" . 108559))
   (call
     (iloc.0 . 4)
     (if.true.ret)
     (iloc.0 . 1)
     (if.false.ret)
     (touch.gloc.of rtd-opaque?)
     (push.iloc.0 . 1)
     (apply.gloc.of rtd-opaque? "./boot/record.scm" . 111645))
   (push)
   (call
     (push.close
       (1 0)
       (call
         (iloc.0 . 0)
         (if.not.pair?.ret.const . #f)
         (cdr.iloc (0 . 0) "./boot/record.scm" . 113690)
         (if.not.pair?.ret.const . #f)
         (cddr.iloc (0 . 0) "./boot/record.scm" . 113690)
         (ret.null? "./boot/record.scm" . 113690))
       (push)
       (extend . 1)
       (call
         (iloc.0 . 0)
         (if.false.ret)
         (push.car.iloc (1 . 0) "./boot/record.scm" . 113690)
         (const . mutable)
         (ret.eq? "./boot/record.scm" . 113690))
       (if.true
         (push.const . #t)
         (cadr.iloc (1 . 0) "./boot/record.scm" . 113690)
         (ret.cons "./boot/record.scm" . 113690))
       (call
         (iloc.0 . 0)
         (if.false.ret)
         (push.car.iloc (1 . 0) "./boot/record.scm" . 113690)
         (const . immutable)
         (ret.eq? "./boot/record.scm" . 113690))
       (if.true
         (push.const . #f)
         (cadr.iloc (1 . 0) "./boot/record.scm" . 113690)
         (ret.cons "./boot/record.scm" . 113690))
       (push.const . make-record-type-descriptor)
       (push.const . "malformed field specifiers")
       (push.iloc 2 . 5)
       (apply.gloc.of assertion-violation "./boot/record.scm" . 113690))
     (push.iloc.0 . 5)
     (push.subr.gloc.of vector->list 1 "./boot/record.scm" . 120856)
     (apply.gloc.of
       map
       (map (lambda (|field`3264*|)
              (let ((|.L1005`3266`3269*|
                      (and (pair? |field`3264*|)
                           (pair? (cdr |field`3264*|))
                           (null? (cddr |field`3264*|)))))
                (if (and |.L1005`3266`3269*| (eq? (car |field`3264*|) 'mutable))
                    (cons #t (cadr |field`3264*|))
                    (if (and |.L1005`3266`3269*| (eq? (car |field`3264*|) 'immutable))
                        (cons #f (cadr |field`3264*|))
                        (assertion-violation
                          'make-record-type-descriptor
                          "malformed field specifiers"
                          |fields`3262*|)))))
            (vector->list |fields`3262*|))))
   (push)
   (extend . 2)
   (iloc.1 . 2)
   (if.true
     (push.gloc.of nongenerative-record-types)
     (push.iloc.1 . 2)
     (push.const . #f)
     (push.subr.gloc.of core-hashtable-ref 3 "./boot/record.scm" . 123918)
     (extend . 1)
     (iloc.0 . 0)
     (if.true
       (call
         (push.iloc 2 . 2)
         (call
           (touch.gloc.of rtd-uid)
           (push.iloc.0 . 0)
           (apply.gloc.of rtd-uid "./boot/record.scm" . 125990))
         (push)
         (subr.gloc.of eqv? 2 "./boot/record.scm" . 125980)
         (if.false.ret)
         (push.iloc 2 . 1)
         (call
           (touch.gloc.of rtd-parent)
           (push.iloc.0 . 0)
           (apply.gloc.of rtd-parent "./boot/record.scm" . 127017))
         (push)
         (subr.gloc.of eqv? 2 "./boot/record.scm" . 127004)
         (if.false.ret)
         (push.iloc.1 . 1)
         (call
           (touch.gloc.of rtd-fields)
           (push.iloc.0 . 0)
           (apply.gloc.of rtd-fields "./boot/record.scm" . 128043))
         (push)
         (ret.subr.gloc.of equal? "./boot/record.scm" . 128028))
       (if.true (ret.iloc 0 . 0))
       (push.const . make-record-type-descriptor)
       (push.const . "mismatched subsequent call for nongenerative record-type")
       (push.iloc 2 . 0)
       (push.iloc 2 . 1)
       (push.iloc 2 . 2)
       (push.iloc 2 . 3)
       (push.iloc.1 . 0)
       (push.iloc.1 . 1)
       (push.subr.gloc.of list 6 "./boot/record.scm" . 132140)
       (apply.gloc.of assertion-violation "./boot/record.scm" . 130071))
     (subr.gloc.of on-primordial-thread? 0 "./boot/record.scm" . 134162)
     (if.false.call
       (push.const . thread)
       (push.const . "child thread attempt to create nongenerative record-type")
       (push.iloc 2 . 0)
       (push.iloc 2 . 1)
       (push.iloc 2 . 2)
       (push.iloc 2 . 3)
       (push.iloc.1 . 0)
       (push.iloc.1 . 1)
       (push.subr.gloc.of list 6 "./boot/record.scm" . 137255)
       (apply.gloc.of assertion-violation "./boot/record.scm" . 135186))
     (call
       (touch.gloc.of make-rtd)
       (push.iloc 2 . 0)
       (push.iloc 2 . 1)
       (push.iloc 2 . 2)
       (push.iloc 2 . 3)
       (push.iloc.1 . 0)
       (push.iloc.1 . 1)
       (apply.gloc.of make-rtd "./boot/record.scm" . 138265))
     (push)
     (extend . 1)
     (push.gloc.of nongenerative-record-types)
     (push.iloc 3 . 2)
     (push.iloc.0 . 0)
     (subr.gloc.of core-hashtable-set! 3 "./boot/record.scm" . 139280)
     (ret.iloc 0 . 0))
   (touch.gloc.of make-rtd)
   (push.iloc.1 . 0)
   (push.iloc.1 . 1)
   (push.const . #f)
   (push.iloc.1 . 3)
   (push.iloc.0 . 0)
   (push.iloc.0 . 1)
   (apply.gloc.of make-rtd "./boot/record.scm" . 122894))
 (set.gloc.of make-record-type-descriptor)
 (ret.const.unspec))
((close
   (4 0 . make-rcd)
   (push.const . type:record-constructor-descriptor)
   (push.iloc.0 . 0)
   (push.iloc.0 . 1)
   (push.iloc.0 . 2)
   (push.iloc.0 . 3)
   (ret.subr.gloc.of tuple "./boot/record.scm" . 143365))
 (set.gloc.of make-rcd)
 (ret.const.unspec))
((close
   (1 0 . record-constructor-descriptor?)
   (push.iloc.0 . 0)
   (push.const . 0)
   (push.subr.gloc.of tuple-ref 2 "./boot/record.scm" . 147466)
   (const . type:record-constructor-descriptor)
   (ret.eq? "./boot/record.scm" . 147461))
 (set.gloc.of record-constructor-descriptor?)
 (ret.const.unspec))
((close
   (1 0 . rcd-rtd)
   (push.iloc.0 . 0)
   (push.const . 1)
   (ret.subr.gloc.of tuple-ref "./boot/record.scm" . 149548))
 (set.gloc.of rcd-rtd)
 (ret.const.unspec))
((close
   (1 0 . rcd-protocol)
   (push.iloc.0 . 0)
   (push.const . 2)
   (ret.subr.gloc.of tuple-ref "./boot/record.scm" . 150572))
 (set.gloc.of rcd-protocol)
 (ret.const.unspec))
((close
   (1 0 . rcd-custom-protocol?)
   (push.iloc.0 . 0)
   (push.const . 3)
   (ret.subr.gloc.of tuple-ref "./boot/record.scm" . 151596))
 (set.gloc.of rcd-custom-protocol?)
 (ret.const.unspec))
((close
   (1 0 . rcd-parent)
   (push.iloc.0 . 0)
   (push.const . 4)
   (ret.subr.gloc.of tuple-ref "./boot/record.scm" . 152620))
 (set.gloc.of rcd-parent)
 (ret.const.unspec))
((close
   (1 0)
   (ret.close
     (0 1)
     (push.iloc.1 . 0)
     (push.iloc.0 . 0)
     (apply.gloc.of apply "./boot/record.scm" . 165903)))
 (set.gloc.of |.L1021|)
 (close
   (1 0 . default-protocol)
   (call
     (touch.gloc.of rtd-parent)
     (push.iloc.0 . 0)
     (apply.gloc.of rtd-parent "./boot/record.scm" . 156691))
   (push)
   (extend . 1)
   (iloc.0 . 0)
   (if.true
     (call
       (touch.gloc.of rtd-total-field-count)
       (push.iloc.0 . 0)
       (apply.gloc.of rtd-total-field-count "./boot/record.scm" . 158757))
     (push)
     (extend . 1)
     (ret.close
       (1 0)
       (ret.close
         (0 1)
         (push.close
           (0 0)
           (touch.gloc.of split-at)
           (push.iloc.1 . 0)
           (push.iloc 3 . 0)
           (apply.gloc.of split-at "./boot/record.scm" . 161863))
         (push.close
           (2 0)
           (call
             (push.iloc 2 . 0)
             (push.iloc.0 . 0)
             (apply.gloc.of apply "./boot/record.scm" . 162842))
           (push)
           (push.iloc.0 . 1)
           (apply.gloc.of apply "./boot/record.scm" . 162835))
         (apply.gloc.of
           |.call-with-values|
           (|.call-with-values|
             (lambda () (split-at |field-values`3305*| |parent-field-count`3301*|))
             (lambda (|parent-field-values`3307*| |this-field-values`3307*|)
               (apply (apply |p`3303*| |parent-field-values`3307*|) |this-field-values`3307*|)))))))
   (ret.gloc.of |.L1021|))
 (set.gloc.of default-protocol)
 (ret.const.unspec))
((close
   (3 0 . make-record-constructor-descriptor)
   (call (push.iloc.0 . 0) (apply.gloc.of record-type-descriptor? "./boot/record.scm" . 169993))
   (if.false.call
     (push.const . make-record-constructor-descriptor)
     (call
       (touch.gloc.of wrong-type-argument-message)
       (push.const . "record-type-descriptor")
       (push.iloc.0 . 0)
       (push.const . 1)
       (apply.gloc.of wrong-type-argument-message "./boot/record.scm" . 172062))
     (push)
     (push.iloc.0 . 0)
     (push.iloc.0 . 1)
     (push.iloc.0 . 2)
     (push.subr.gloc.of list 3 "./boot/record.scm" . 173086)
     (apply.gloc.of assertion-violation "./boot/record.scm" . 171017))
   (call
     (iloc.0 . 1)
     (if.false.ret)
     (call
       (touch.gloc.of record-constructor-descriptor?)
       (push.iloc.0 . 1)
       (apply.gloc.of record-constructor-descriptor? "./boot/record.scm" . 175118))
     (if.true.ret)
     (push.const . make-record-constructor-descriptor)
     (call
       (touch.gloc.of wrong-type-argument-message)
       (push.const . "record-constructor-descriptor or #f")
       (push.iloc.0 . 1)
       (push.const . 2)
       (apply.gloc.of wrong-type-argument-message "./boot/record.scm" . 177187))
     (push)
     (push.iloc.0 . 0)
     (push.iloc.0 . 1)
     (push.iloc.0 . 2)
     (push.subr.gloc.of list 3 "./boot/record.scm" . 178211)
     (apply.gloc.of assertion-violation "./boot/record.scm" . 176142))
   (call
     (iloc.0 . 2)
     (if.false.ret)
     (push.iloc.0 . 2)
     (subr.gloc.of procedure? 1 "./boot/record.scm" . 180238)
     (if.true.ret)
     (push.const . make-record-constructor-descriptor)
     (call
       (touch.gloc.of wrong-type-argument-message)
       (push.const . "procedure or #f")
       (push.iloc.0 . 2)
       (push.const . 3)
       (apply.gloc.of wrong-type-argument-message "./boot/record.scm" . 182307))
     (push)
     (push.iloc.0 . 0)
     (push.iloc.0 . 1)
     (push.iloc.0 . 2)
     (push.subr.gloc.of list 3 "./boot/record.scm" . 183331)
     (apply.gloc.of assertion-violation "./boot/record.scm" . 181262))
   (call
     (iloc.0 . 1)
     (if.false.ret)
     (call
       (touch.gloc.of rtd-parent)
       (push.iloc.0 . 0)
       (apply.gloc.of rtd-parent "./boot/record.scm" . 185358))
     (if.true.ret)
     (push.const . make-record-constructor-descriptor)
     (push.const . "mismatch between rtd and parent constructor descriptor")
     (push.iloc.0 . 0)
     (push.iloc.0 . 1)
     (push.iloc.0 . 2)
     (apply.gloc.of assertion-violation "./boot/record.scm" . 186382))
   (call
     (iloc.0 . 1)
     (if.false.ret)
     (call
       (touch.gloc.of rtd-parent)
       (push.iloc.0 . 0)
       (apply.gloc.of rtd-parent "./boot/record.scm" . 191498))
     (if.false.ret)
     (call
       (touch.gloc.of rcd-rtd)
       (push.iloc.0 . 1)
       (apply.gloc.of rcd-rtd "./boot/record.scm" . 192531))
     (push)
     (call
       (touch.gloc.of rtd-parent)
       (push.iloc.0 . 0)
       (apply.gloc.of rtd-parent "./boot/record.scm" . 192548))
     (if.eq?.ret.const . #t)
     (push.const . make-record-constructor-descriptor)
     (push.const . "mismatch between rtd and parent constructor descriptor")
     (push.iloc.0 . 0)
     (push.iloc.0 . 1)
     (push.iloc.0 . 2)
     (apply.gloc.of assertion-violation "./boot/record.scm" . 193550))
   (call
     (iloc.0 . 2)
     (if.false.ret)
     (call
       (touch.gloc.of rtd-parent)
       (push.iloc.0 . 0)
       (apply.gloc.of rtd-parent "./boot/record.scm" . 198666))
     (if.false.ret)
     (iloc.0 . 1)
     (if.true.ret)
     (push.const . make-record-constructor-descriptor)
     (push.const . "expected #f for protocol since no parent constructor descriptor is provided")
     (push.iloc.0 . 0)
     (push.iloc.0 . 1)
     (push.iloc.0 . 2)
     (apply.gloc.of assertion-violation "./boot/record.scm" . 200718))
   (call
     (iloc.0 . 1)
     (if.false.ret)
     (call
       (touch.gloc.of rcd-custom-protocol?)
       (push.iloc.0 . 1)
       (apply.gloc.of rcd-custom-protocol? "./boot/record.scm" . 205834))
     (if.false.ret)
     (iloc.0 . 2)
     (if.true.ret)
     (push.const . make-record-constructor-descriptor)
     (push.const
       .
       "expected procedure for protocol since parent constructor descriptor have custom one")
     (push.iloc.0 . 0)
     (push.iloc.0 . 1)
     (push.iloc.0 . 2)
     (apply.gloc.of assertion-violation "./boot/record.scm" . 207886))
   (touch.gloc.of make-rcd)
   (push.iloc.0 . 0)
   (call
     (iloc.0 . 2)
     (if.true.ret)
     (touch.gloc.of default-protocol)
     (push.iloc.0 . 0)
     (apply.gloc.of default-protocol "./boot/record.scm" . 214050))
   (push)
   (call (iloc.0 . 2) (if.false.ret) (ret.const . #t))
   (push)
   (call
     (iloc.0 . 1)
     (if.true.ret)
     (call
       (touch.gloc.of rtd-parent)
       (push.iloc.0 . 0)
       (apply.gloc.of rtd-parent "./boot/record.scm" . 216094))
     (push)
     (extend . 1)
     (iloc.0 . 0)
     (if.false.ret)
     (push.iloc.0 . 0)
     (push.const . #f)
     (push.const . #f)
     (apply.gloc.of make-record-constructor-descriptor "./boot/record.scm" . 218147))
   (push)
   (apply.gloc.of
     make-rcd
     (make-rcd
       |rtd`3313*|
       (or |protocol`3313*| (default-protocol |rtd`3313*|))
       (and |protocol`3313*| #t)
       (or |parent`3313*|
           (let ((|.L1025`3315*| (rtd-parent |rtd`3313*|)))
             (and |.L1025`3315*| (make-record-constructor-descriptor |.L1025`3315*| #f #f)))))))
 (set.gloc.of make-record-constructor-descriptor)
 (ret.const.unspec))
((close
   (1 0 . record?)
   (call
     (push.iloc.0 . 0)
     (push.const . 0)
     (push.subr.gloc.of tuple-ref 2 "./boot/record.scm" . 224291)
     (apply.gloc.of record-type-descriptor? "./boot/record.scm" . 224266))
   (if.false.ret)
   (call
     (push.iloc.0 . 0)
     (push.const . 0)
     (push.subr.gloc.of tuple-ref 2 "./boot/record.scm" . 225316)
     (apply.gloc.of record-type-opaque? "./boot/record.scm" . 225295))
   (push)
   (ret.subr.gloc.of not "./boot/record.scm" . 225290))
 (set.gloc.of record?)
 (ret.const.unspec))
((close
   (1 0 . record-rtd)
   (call (push.iloc.0 . 0) (apply.gloc.of record? "./boot/record.scm" . 229385))
   (if.true
     (push.iloc.0 . 0)
     (push.const . 0)
     (ret.subr.gloc.of tuple-ref "./boot/record.scm" . 230409))
   (push.const . record-rtd)
   (call
     (touch.gloc.of wrong-type-argument-message)
     (push.const . "non-opaque record")
     (push.iloc.0 . 0)
     (apply.gloc.of wrong-type-argument-message "./boot/record.scm" . 231466))
   (push)
   (apply.gloc.of assertion-violation "./boot/record.scm" . 231433))
 (set.gloc.of record-rtd)
 (ret.const.unspec))
((close
   (3 0 . make-nested-conser)
   (call
     (call
       (extend.enclose
         (1 0 . loop)
         (call
           (touch.gloc.of rcd-parent)
           (push.iloc.0 . 0)
           (apply.gloc.of rcd-parent "./boot/record.scm" . 237584))
         (push)
         (extend . 1)
         (iloc.0 . 0)
         (if.true
           (ret.close
             (0 1)
             (ret.close
               (0 1)
               (ret.close
                 (0 1)
                 (call
                   (call
                     (call (push.iloc 3 . 0) (apply.iloc (5 . 0) "./boot/record.scm" . 243754))
                     (push)
                     (push.iloc.0 . 0)
                     (push.iloc 2 . 0)
                     (push.subr.gloc.of append 2 "./boot/record.scm" . 244778)
                     (apply.gloc.of apply "./boot/record.scm" . 243747))
                   (push)
                   (call
                     (touch.gloc.of rcd-protocol)
                     (push.iloc 3 . 0)
                     (apply.gloc.of rcd-protocol "./boot/record.scm" . 242723))
                   (apply))
                 (push)
                 (push.iloc.1 . 0)
                 (apply.gloc.of apply "./boot/record.scm" . 242715)))))
         (ret.close
           (0 1)
           (ret.close
             (0 1)
             (push.iloc.0 . 0)
             (push.iloc.1 . 0)
             (push.subr.gloc.of append 2 "./boot/record.scm" . 249896)
             (extend . 1)
             (push.iloc.0 . 0)
             (subr.gloc.of length 1 "./boot/record.scm" . 250909)
             (=.iloc (6 . 2) "./boot/record.scm" . 250906)
             (if.true
               (push.gloc.of tuple)
               (push.iloc 6 . 1)
               (push.iloc.0 . 0)
               (apply.gloc.of apply "./boot/record.scm" . 251930))
             (push.const . "record constructor")
             (push.const . "wrong number of arguments")
             (push.iloc.0 . 0)
             (apply.gloc.of assertion-violation "./boot/record.scm" . 252954))))
       (push.iloc.1 . 0)
       (apply.iloc (0 . 0) "./boot/record.scm" . 237577))
     (apply))
   (push)
   (call
     (touch.gloc.of rcd-protocol)
     (push.iloc.0 . 0)
     (apply.gloc.of rcd-protocol "./boot/record.scm" . 235526))
   (apply))
 (set.gloc.of make-nested-conser)
 (ret.const.unspec))
((close
   (3 0 . make-simple-conser)
   (push.close
     (0 1)
     (push.iloc.0 . 0)
     (subr.gloc.of length 1 "./boot/record.scm" . 259087)
     (=.iloc (1 . 2) "./boot/record.scm" . 259084)
     (if.true
       (push.gloc.of tuple)
       (push.iloc.1 . 1)
       (push.iloc.0 . 0)
       (apply.gloc.of apply "./boot/record.scm" . 260108))
     (push.const . "record constructor")
     (push.const . "wrong number of arguments")
     (push.iloc.0 . 0)
     (apply.gloc.of assertion-violation "./boot/record.scm" . 261132))
   (call
     (touch.gloc.of rcd-protocol)
     (push.iloc.0 . 0)
     (apply.gloc.of rcd-protocol "./boot/record.scm" . 257030))
   (apply))
 (set.gloc.of make-simple-conser)
 (ret.const.unspec))
((close
   (2 0 . flat-field-offset)
   (call
     (touch.gloc.of rtd-inherited-field-count)
     (push.iloc.0 . 0)
     (apply.gloc.of rtd-inherited-field-count "./boot/record.scm" . 265224))
   (push)
   (push.iloc.0 . 1)
   (push.const . 1)
   (ret.subr.gloc.of + "./boot/record.scm" . 265221))
 (set.gloc.of flat-field-offset)
 (ret.const.unspec))
((close
   (2 0 . make-accessor)
   (ret.close
     (1 0)
     (push.iloc.1 . 0)
     (push.iloc.0 . 0)
     (push.const . 0)
     (subr.gloc.of tuple-ref 2 "./boot/record.scm" . 270359)
     (if.eq?
       (push.iloc.0 . 0)
       (push.iloc.1 . 1)
       (ret.subr.gloc.of tuple-ref "./boot/record.scm" . 270378))
     (call
       (touch.gloc.of rtd-ancestor?)
       (push.iloc.1 . 0)
       (push.iloc.0 . 0)
       (push.const . 0)
       (push.subr.gloc.of tuple-ref 2 "./boot/record.scm" . 271393)
       (apply.gloc.of rtd-ancestor? "./boot/record.scm" . 271374))
     (if.true
       (push.iloc.0 . 0)
       (push.iloc.1 . 1)
       (ret.subr.gloc.of tuple-ref "./boot/record.scm" . 271412))
     (push.const . "record accessor")
     (call
       (touch.gloc.of wrong-type-argument-message)
       (push.const . "record of type ~a")
       (call
         (touch.gloc.of rtd-name)
         (push.iloc.1 . 0)
         (apply.gloc.of rtd-name "./boot/record.scm" . 273518))
       (push)
       (push.subr.gloc.of format 2 "./boot/record.scm" . 273490)
       (push.iloc.0 . 0)
       (apply.gloc.of wrong-type-argument-message "./boot/record.scm" . 273461))
     (push)
     (apply.gloc.of assertion-violation "./boot/record.scm" . 273422)))
 (set.gloc.of make-accessor)
 (ret.const.unspec))
((close
   (2 0 . make-mutator)
   (ret.close
     (2 0)
     (push.iloc.1 . 0)
     (push.iloc.0 . 0)
     (push.const . 0)
     (subr.gloc.of tuple-ref 2 "./boot/record.scm" . 278551)
     (if.eq?
       (push.iloc.0 . 0)
       (push.iloc.1 . 1)
       (push.iloc.0 . 1)
       (ret.subr.gloc.of tuple-set! "./boot/record.scm" . 278570))
     (call
       (touch.gloc.of rtd-ancestor?)
       (push.iloc.1 . 0)
       (push.iloc.0 . 0)
       (push.const . 0)
       (push.subr.gloc.of tuple-ref 2 "./boot/record.scm" . 279585)
       (apply.gloc.of rtd-ancestor? "./boot/record.scm" . 279566))
     (if.true
       (push.iloc.0 . 0)
       (push.iloc.1 . 1)
       (push.iloc.0 . 1)
       (ret.subr.gloc.of tuple-set! "./boot/record.scm" . 279604))
     (push.const . "record mutator")
     (call
       (touch.gloc.of wrong-type-argument-message)
       (push.const . "record of type ~a")
       (call
         (touch.gloc.of rtd-name)
         (push.iloc.1 . 0)
         (apply.gloc.of rtd-name "./boot/record.scm" . 281709))
       (push)
       (push.subr.gloc.of format 2 "./boot/record.scm" . 281681)
       (push.iloc.0 . 0)
       (push.iloc.0 . 1)
       (push.subr.gloc.of list 2 "./boot/record.scm" . 281725)
       (apply.gloc.of wrong-type-argument-message "./boot/record.scm" . 281652))
     (push)
     (apply.gloc.of assertion-violation "./boot/record.scm" . 281614)))
 (set.gloc.of make-mutator)
 (ret.const.unspec))
((close
   (1 0 . make-predicate)
   (ret.close
     (1 0)
     (push.iloc.1 . 0)
     (push.iloc.0 . 0)
     (push.const . 0)
     (subr.gloc.of tuple-ref 2 "./boot/record.scm" . 286740)
     (if.eq?.ret.const . #t)
     (touch.gloc.of rtd-ancestor?)
     (push.iloc.1 . 0)
     (push.iloc.0 . 0)
     (push.const . 0)
     (push.subr.gloc.of tuple-ref 2 "./boot/record.scm" . 287774)
     (apply.gloc.of rtd-ancestor? "./boot/record.scm" . 287755)))
 (set.gloc.of make-predicate)
 (ret.const.unspec))
((close
   (1 0 . record-constructor)
   (call
     (touch.gloc.of record-constructor-descriptor?)
     (push.iloc.0 . 0)
     (apply.gloc.of record-constructor-descriptor? "./boot/record.scm" . 291849))
   (if.false.call
     (push.const . record-constructor)
     (call
       (touch.gloc.of wrong-type-argument-message)
       (push.const . "record-constructor-descriptor")
       (push.iloc.0 . 0)
       (apply.gloc.of wrong-type-argument-message "./boot/record.scm" . 292914))
     (push)
     (apply.gloc.of assertion-violation "./boot/record.scm" . 292873))
   (call
     (touch.gloc.of rcd-rtd)
     (push.iloc.0 . 0)
     (apply.gloc.of rcd-rtd "./boot/record.scm" . 293904))
   (push)
   (extend . 1)
   (call
     (touch.gloc.of rcd-parent)
     (push.iloc.1 . 0)
     (apply.gloc.of rcd-parent "./boot/record.scm" . 294923))
   (if.true
     (touch.gloc.of make-nested-conser)
     (push.iloc.1 . 0)
     (push.iloc.0 . 0)
     (call
       (touch.gloc.of rtd-total-field-count)
       (push.iloc.0 . 0)
       (apply.gloc.of rtd-total-field-count "./boot/record.scm" . 295976))
     (push)
     (apply.gloc.of make-nested-conser "./boot/record.scm" . 295947))
   (touch.gloc.of make-simple-conser)
   (push.iloc.1 . 0)
   (push.iloc.0 . 0)
   (call
     (touch.gloc.of rtd-fields)
     (push.iloc.0 . 0)
     (apply.gloc.of rtd-fields "./boot/record.scm" . 297008))
   (push)
   (push.subr.gloc.of length 1 "./boot/record.scm" . 297000)
   (apply.gloc.of make-simple-conser "./boot/record.scm" . 296971))
 (set.gloc.of record-constructor)
 (ret.const.unspec))
((close
   (1 0 . record-predicate)
   (call (push.iloc.0 . 0) (apply.gloc.of record-type-descriptor? "./boot/record.scm" . 301065))
   (if.false.call
     (push.const . record-predicate)
     (call
       (touch.gloc.of wrong-type-argument-message)
       (push.const . "record-type-descriptor")
       (push.iloc.0 . 0)
       (apply.gloc.of wrong-type-argument-message "./boot/record.scm" . 302128))
     (push)
     (apply.gloc.of assertion-violation "./boot/record.scm" . 302089))
   (touch.gloc.of make-predicate)
   (push.iloc.0 . 0)
   (apply.gloc.of make-predicate "./boot/record.scm" . 303109))
 (set.gloc.of record-predicate)
 (ret.const.unspec))
((close
   (2 0 . record-accessor)
   (call (push.iloc.0 . 0) (apply.gloc.of record-type-descriptor? "./boot/record.scm" . 307209))
   (if.false.call
     (push.const . record-accssor)
     (call
       (touch.gloc.of wrong-type-argument-message)
       (push.const . "record-type-descriptor")
       (push.iloc.0 . 0)
       (apply.gloc.of wrong-type-argument-message "./boot/record.scm" . 308270))
     (push)
     (push.iloc.0 . 0)
     (push.iloc.0 . 1)
     (push.subr.gloc.of list 2 "./boot/record.scm" . 308329)
     (apply.gloc.of assertion-violation "./boot/record.scm" . 308233))
   (push.const . -1)
   (push.iloc.0 . 1)
   (call
     (touch.gloc.of rtd-fields)
     (push.iloc.0 . 0)
     (apply.gloc.of rtd-fields "./boot/record.scm" . 309273))
   (push)
   (push.subr.gloc.of length 1 "./boot/record.scm" . 309265)
   (subr.gloc.of < 3 "./boot/record.scm" . 309257)
   (if.false.call
     (push.const . record-accssor)
     (push.const . "field index out of range")
     (apply.gloc.of assertion-violation "./boot/record.scm" . 310281))
   (touch.gloc.of make-accessor)
   (push.iloc.0 . 0)
   (call
     (touch.gloc.of flat-field-offset)
     (push.iloc.0 . 0)
     (push.iloc.0 . 1)
     (apply.gloc.of flat-field-offset "./boot/record.scm" . 311320))
   (push)
   (apply.gloc.of make-accessor "./boot/record.scm" . 311301))
 (set.gloc.of record-accessor)
 (ret.const.unspec))
((close
   (2 0 . record-mutator)
   (call (push.iloc.0 . 0) (apply.gloc.of record-type-descriptor? "./boot/record.scm" . 315401))
   (if.false.call
     (push.const . record-mutator)
     (call
       (touch.gloc.of wrong-type-argument-message)
       (push.const . "record-type-descriptor")
       (push.iloc.0 . 0)
       (apply.gloc.of wrong-type-argument-message "./boot/record.scm" . 316462))
     (push)
     (push.iloc.0 . 0)
     (push.iloc.0 . 1)
     (push.subr.gloc.of list 2 "./boot/record.scm" . 316521)
     (apply.gloc.of assertion-violation "./boot/record.scm" . 316425))
   (push.const . -1)
   (push.iloc.0 . 1)
   (call
     (touch.gloc.of rtd-fields)
     (push.iloc.0 . 0)
     (apply.gloc.of rtd-fields "./boot/record.scm" . 317465))
   (push)
   (push.subr.gloc.of length 1 "./boot/record.scm" . 317457)
   (subr.gloc.of < 3 "./boot/record.scm" . 317449)
   (if.false.call
     (push.const . record-mutator)
     (push.const . "field index out of range")
     (push.iloc.0 . 0)
     (push.iloc.0 . 1)
     (push.subr.gloc.of list 2 "./boot/record.scm" . 318537)
     (apply.gloc.of assertion-violation "./boot/record.scm" . 318473))
   (call
     (push.iloc.0 . 0)
     (push.iloc.0 . 1)
     (apply.gloc.of record-field-mutable? "./boot/record.scm" . 319497))
   (if.false.call
     (push.const . record-mutator)
     (push.const . "specified field is immutable")
     (push.iloc.0 . 0)
     (push.iloc.0 . 1)
     (push.subr.gloc.of list 2 "./boot/record.scm" . 320589)
     (apply.gloc.of assertion-violation "./boot/record.scm" . 320521))
   (touch.gloc.of make-mutator)
   (push.iloc.0 . 0)
   (call
     (touch.gloc.of flat-field-offset)
     (push.iloc.0 . 0)
     (push.iloc.0 . 1)
     (apply.gloc.of flat-field-offset "./boot/record.scm" . 321559))
   (push)
   (apply.gloc.of make-mutator "./boot/record.scm" . 321541))
 (set.gloc.of record-mutator)
 (ret.const.unspec))
((close
   (3 0 . make-record-type)
   (push.const . type:record-type)
   (push.iloc.0 . 0)
   (push.iloc.0 . 1)
   (push.iloc.0 . 2)
   (ret.subr.gloc.of tuple "./boot/record.scm" . 325637))
 (set.gloc.of make-record-type)
 (ret.const.unspec))
((close
   (1 0 . record-type?)
   (push.iloc.0 . 0)
   (push.const . 0)
   (push.subr.gloc.of tuple-ref 2 "./boot/record.scm" . 329738)
   (const . type:record-type)
   (ret.eq? "./boot/record.scm" . 329733))
 (set.gloc.of record-type?)
 (ret.const.unspec))
((close
   (1 0 . record-type-rtd)
   (call (push.iloc.0 . 0) (apply.gloc.of record-type? "./boot/record.scm" . 333833))
   (if.false.call
     (push.const . record-type-rtd)
     (call
       (touch.gloc.of wrong-type-argument-message)
       (push.const . "record-type")
       (push.iloc.0 . 0)
       (apply.gloc.of wrong-type-argument-message "./boot/record.scm" . 334895))
     (push)
     (apply.gloc.of assertion-violation "./boot/record.scm" . 334857))
   (push.iloc.0 . 0)
   (push.const . 2)
   (ret.subr.gloc.of tuple-ref "./boot/record.scm" . 335877))
 (set.gloc.of record-type-rtd)
 (ret.const.unspec))
((close
   (1 0 . record-type-rcd)
   (call (push.iloc.0 . 0) (apply.gloc.of record-type? "./boot/record.scm" . 339977))
   (if.false.call
     (push.const . record-type-rcd)
     (call
       (touch.gloc.of wrong-type-argument-message)
       (push.const . "record-type")
       (push.iloc.0 . 0)
       (apply.gloc.of wrong-type-argument-message "./boot/record.scm" . 341039))
     (push)
     (apply.gloc.of assertion-violation "./boot/record.scm" . 341001))
   (push.iloc.0 . 0)
   (push.const . 3)
   (ret.subr.gloc.of tuple-ref "./boot/record.scm" . 342021))
 (set.gloc.of record-type-rcd)
 (ret.const.unspec))

;
((close
   (0 0 . make-condition-uid)
   (push.const . "<~a>")
   (subr.gloc.of make-uuid 0)
   (push)
   (push.subr.gloc.of format 2 "./boot/condition.scm" . 5175)
   (ret.subr.gloc.of string->symbol "./boot/condition.scm" . 5159))
 (set.gloc.of make-condition-uid)
 (ret.const.unspec))
((call
   (call
     (push.const . &condition)
     (push.const . #f)
     (call
       (touch.gloc.of make-condition-uid)
       (apply.gloc.of make-condition-uid "./boot/condition.scm" . 8251))
     (push)
     (push.const . #f)
     (push.const . #f)
     (push.const . #())
     (apply.gloc.of make-record-type-descriptor "./boot/condition.scm" . 8207))
   (push)
   (extend . 1)
   (push.const . &condition)
   (push.iloc.0 . 0)
   (call
     (push.iloc.0 . 0)
     (push.const . #f)
     (push.const . #f)
     (apply.gloc.of make-record-constructor-descriptor "./boot/condition.scm" . 9231))
   (push)
   (apply.gloc.of make-record-type "./boot/condition.scm" . 10245))
 (set.gloc.of &condition)
 (ret.const.unspec))
((close
   (1 0 . compound-condition-component)
   (push.iloc.0 . 0)
   (push.const . 1)
   (ret.subr.gloc.of tuple-ref "./boot/condition.scm" . 12340))
 (set.gloc.of compound-condition-component)
 (ret.const.unspec))
((close
   (0 1 . condition)
   (push.const . type:condition)
   (call
     (push.gloc.of append)
     (call
       (push.close
         (1 0)
         (call (push.iloc.0 . 0) (apply.gloc.of condition? "./boot/condition.scm" . 19486))
         (if.false.call
           (push.const . condition)
           (push.const . "expected condition, but got ~r")
           (push.iloc.0 . 0)
           (push.subr.gloc.of format 2 "./boot/condition.scm" . 20542)
           (push.iloc.1 . 0)
           (apply.gloc.of assertion-violation "./boot/condition.scm" . 20510))
         (push.iloc.0 . 0)
         (apply.gloc.of simple-conditions "./boot/condition.scm" . 21530))
       (push.iloc.0 . 0)
       (apply.gloc.of map "./boot/condition.scm" . 18451))
     (push)
     (apply.gloc.of apply "./boot/condition.scm" . 17420))
   (push)
   (ret.subr.gloc.of tuple "./boot/condition.scm" . 16389))
 (set.gloc.of condition)
 (ret.const.unspec))
((close
   (1 0 . compound-condition?)
   (push.iloc.0 . 0)
   (subr.gloc.of tuple? 1 "./boot/condition.scm" . 26634)
   (if.false.ret)
   (push.const . type:condition)
   (push.iloc.0 . 0)
   (push.const . 0)
   (subr.gloc.of tuple-ref 2 "./boot/condition.scm" . 27679)
   (ret.eq? "./boot/condition.scm" . 27658))
 (set.gloc.of compound-condition?)
 (ret.const.unspec))
((close
   (1 0 . simple-condition?)
   (call (push.iloc.0 . 0) (apply.gloc.of record? "./boot/condition.scm" . 31754))
   (if.false.ret)
   (touch.gloc.of rtd-ancestor?)
   (call (push.gloc.of &condition) (apply.gloc.of record-type-rtd "./boot/condition.scm" . 32793))
   (push)
   (call (push.iloc.0 . 0) (apply.gloc.of record-rtd "./boot/condition.scm" . 32822))
   (push)
   (apply.gloc.of rtd-ancestor? "./boot/condition.scm" . 32778))
 (set.gloc.of simple-condition?)
 (ret.const.unspec))
((close
   (1 0 . condition?)
   (call
     (touch.gloc.of simple-condition?)
     (push.iloc.0 . 0)
     (apply.gloc.of simple-condition? "./boot/condition.scm" . 36873))
   (if.true.ret)
   (touch.gloc.of compound-condition?)
   (push.iloc.0 . 0)
   (apply.gloc.of compound-condition? "./boot/condition.scm" . 37897))
 (set.gloc.of condition?)
 (ret.const.unspec))
((close
   (1 0 . simple-conditions)
   (call
     (touch.gloc.of simple-condition?)
     (push.iloc.0 . 0)
     (apply.gloc.of simple-condition? "./boot/condition.scm" . 41996))
   (if.true (push.iloc.0 . 0) (ret.subr.gloc.of list "./boot/condition.scm" . 42018))
   (call
     (touch.gloc.of compound-condition?)
     (push.iloc.0 . 0)
     (apply.gloc.of compound-condition? "./boot/condition.scm" . 43020))
   (if.true
     (touch.gloc.of compound-condition-component)
     (push.iloc.0 . 0)
     (apply.gloc.of compound-condition-component "./boot/condition.scm" . 43044))
   (push.const . simple-conditions)
   (push.const . "expected condition, but got ~r")
   (push.iloc.0 . 0)
   (push.subr.gloc.of format 2 "./boot/condition.scm" . 45108)
   (apply.gloc.of assertion-violation "./boot/condition.scm" . 45068))
 (set.gloc.of simple-conditions)
 (ret.const.unspec))
((close
   (1 0 . condition-predicate)
   (call
     (touch.gloc.of rtd-ancestor?)
     (call (push.gloc.of &condition) (apply.gloc.of record-type-rtd "./boot/condition.scm" . 49176))
     (push)
     (push.iloc.0 . 0)
     (apply.gloc.of rtd-ancestor? "./boot/condition.scm" . 49161))
   (if.false.call
     (push.const . condition-predicate)
     (push.const . "expected record-type-descriptor of a subtype of &condition, but got ~r")
     (push.iloc.0 . 0)
     (push.subr.gloc.of format 2 "./boot/condition.scm" . 50227)
     (apply.gloc.of assertion-violation "./boot/condition.scm" . 50185))
   (ret.close
     (1 0)
     (call
       (touch.gloc.of simple-condition?)
       (push.iloc.0 . 0)
       (apply.gloc.of simple-condition? "./boot/condition.scm" . 52238))
     (if.true
       (touch.gloc.of rtd-ancestor?)
       (push.iloc.1 . 0)
       (call (push.iloc.0 . 0) (apply.gloc.of record-rtd "./boot/condition.scm" . 53281))
       (push)
       (apply.gloc.of rtd-ancestor? "./boot/condition.scm" . 53262))
     (call
       (touch.gloc.of compound-condition?)
       (push.iloc.0 . 0)
       (apply.gloc.of compound-condition? "./boot/condition.scm" . 54286))
     (if.false.ret)
     (touch.gloc.of any1)
     (push.close
       (1 0)
       (touch.gloc.of rtd-ancestor?)
       (push.iloc 2 . 0)
       (call (push.iloc.0 . 0) (apply.gloc.of record-rtd "./boot/condition.scm" . 55355))
       (push)
       (apply.gloc.of rtd-ancestor? "./boot/condition.scm" . 55336))
     (call
       (touch.gloc.of compound-condition-component)
       (push.iloc.0 . 0)
       (apply.gloc.of compound-condition-component "./boot/condition.scm" . 56340))
     (push)
     (apply.gloc.of any1 "./boot/condition.scm" . 55310)))
 (set.gloc.of condition-predicate)
 (ret.const.unspec))
((close
   (2 0 . wrong-type)
   (push.const . "condition accessor")
   (push.const . "expected condition of a subtype of ~s, but got ~r")
   (push.iloc.0 . 0)
   (push.iloc.0 . 1)
   (push.subr.gloc.of format 3 "./boot/condition.scm" . 64563)
   (push.iloc.0 . 0)
   (push.iloc.0 . 1)
   (apply.gloc.of assertion-violation "./boot/condition.scm" . 64521))
 (set.gloc.of |wrong-type`3413*|)
 (close
   (2 0 . condition-accessor)
   (call
     (touch.gloc.of rtd-ancestor?)
     (call (push.gloc.of &condition) (apply.gloc.of record-type-rtd "./boot/condition.scm" . 66584))
     (push)
     (push.iloc.0 . 0)
     (apply.gloc.of rtd-ancestor? "./boot/condition.scm" . 66569))
   (if.false.call
     (push.const . condition-accessor)
     (push.const . "expected record-type-descriptor of a subtype of &condition, but got ~r")
     (push.iloc.0 . 0)
     (push.subr.gloc.of format 2 "./boot/condition.scm" . 67634)
     (push.iloc.0 . 0)
     (push.iloc.0 . 1)
     (apply.gloc.of assertion-violation "./boot/condition.scm" . 67593))
   (ret.close
     (1 0)
     (call
       (touch.gloc.of simple-condition?)
       (push.iloc.0 . 0)
       (apply.gloc.of simple-condition? "./boot/condition.scm" . 70670))
     (if.true
       (call
         (call
           (touch.gloc.of rtd-ancestor?)
           (push.iloc.1 . 0)
           (call (push.iloc.0 . 0) (apply.gloc.of record-rtd "./boot/condition.scm" . 71717))
           (push)
           (apply.gloc.of rtd-ancestor? "./boot/condition.scm" . 71698))
         (if.true.ret)
         (touch.gloc.of |wrong-type`3413*|)
         (push.iloc.1 . 0)
         (push.iloc.0 . 0)
         (apply.gloc.of |wrong-type`3413*| "./boot/condition.scm" . 71735))
       (push.iloc.0 . 0)
       (apply.iloc (1 . 1) "./boot/condition.scm" . 72718))
     (call
       (touch.gloc.of compound-condition?)
       (push.iloc.0 . 0)
       (apply.gloc.of compound-condition? "./boot/condition.scm" . 73742))
     (if.true
       (call
         (touch.gloc.of any1)
         (push.close
           (1 0)
           (call
             (touch.gloc.of rtd-ancestor?)
             (push.iloc 2 . 0)
             (call (push.iloc.0 . 0) (apply.gloc.of record-rtd "./boot/condition.scm" . 74823))
             (push)
             (apply.gloc.of rtd-ancestor? "./boot/condition.scm" . 74804))
           (if.false.ret)
           (ret.iloc 0 . 0))
         (call
           (touch.gloc.of compound-condition-component)
           (push.iloc.0 . 0)
           (apply.gloc.of compound-condition-component "./boot/condition.scm" . 75803))
         (push)
         (apply.gloc.of any1 "./boot/condition.scm" . 74773))
       (push)
       (extend . 1)
       (iloc.0 . 0)
       (if.true (push.iloc.0 . 0) (apply.iloc (2 . 1) "./boot/condition.scm" . 78869))
       (touch.gloc.of |wrong-type`3413*|)
       (push.iloc 2 . 0)
       (push.iloc.1 . 0)
       (apply.gloc.of |wrong-type`3413*| "./boot/condition.scm" . 78869))
     (touch.gloc.of |wrong-type`3413*|)
     (push.iloc.1 . 0)
     (push.iloc.0 . 0)
     (apply.gloc.of |wrong-type`3413*| "./boot/condition.scm" . 80910)))
 (set.gloc.of condition-accessor)
 (ret.const.unspec))
((close
   (2 0 . loop)
   (call (push.iloc.0 . 0) (apply.gloc.of record-type-parent "./boot/condition.scm" . 89106))
   (push)
   (extend . 1)
   (iloc.0 . 0)
   (if.true
     (touch.gloc.of |loop`3428*|)
     (push.iloc.0 . 0)
     (call (push.iloc.0 . 0) (apply.gloc.of record-type-name "./boot/condition.scm" . 90159))
     (push)
     (iloc.1 . 1)
     (push.cons)
     (apply.gloc.of |loop`3428*| "./boot/condition.scm" . 90145))
   (push.cdr.iloc (1 . 1) "./boot/condition.scm" . 91168)
   (ret.subr.gloc.of reverse "./boot/condition.scm" . 91159))
 (set.gloc.of |loop`3428*|)
 (close
   (1 0 . list-parents)
   (touch.gloc.of |loop`3428*|)
   (push.iloc.0 . 0)
   (push.const)
   (apply.gloc.of |loop`3428*| "./boot/condition.scm" . 89099))
 (set.gloc.of |list-parents`3423*|)
 (close
   (2 0 . describe-condition)
   (call (push.iloc.0 . 1) (apply.gloc.of condition? "./boot/condition.scm" . 93196))
   (if.true
     (subr.gloc.of make-string-output-port 0)
     (push)
     (extend . 1)
     (push.iloc.0 . 0)
     (push.const . "  #<condition~!")
     (subr.gloc.of format 2 "./boot/condition.scm" . 95246)
     (call
       (push.close
         (1 0)
         (call (push.iloc.0 . 0) (apply.gloc.of record-rtd "./boot/condition.scm" . 98343))
         (push)
         (extend . 1)
         (call
           (touch.gloc.of |list-parents`3423*|)
           (push.iloc.0 . 0)
           (apply.gloc.of |list-parents`3423*| "./boot/condition.scm" . 100397))
         (push)
         (call
           (push.iloc.0 . 0)
           (apply.gloc.of record-type-field-names "./boot/condition.scm" . 101434))
         (push)
         (push.subr.gloc.of vector-length 1 "./boot/condition.scm" . 101419)
         (extend . 2)
         (push.iloc 3 . 0)
         (push.const . "~%    ~a")
         (call (push.iloc.1 . 0) (apply.gloc.of record-type-name "./boot/condition.scm" . 99370))
         (push)
         (subr.gloc.of format 3 "./boot/condition.scm" . 102432)
         (call
           (iloc.0 . 0)
           (if.not.pair?.ret.const . #f)
           (push.iloc 3 . 0)
           (push.const . " ~r")
           (push.iloc.0 . 0)
           (ret.subr.gloc.of format "./boot/condition.scm" . 103477))
         (=n.iloc (0 . 1) 1 "./boot/condition.scm" . 104487)
         (if.true
           (call
             (push.iloc 2 . 0)
             (call
               (push.iloc.1 . 0)
               (push.const . 0)
               (apply.gloc.of record-accessor "./boot/condition.scm" . 105523))
             (apply))
           (push)
           (subr.gloc.of string? 1 "./boot/condition.scm" . 106541)
           (if.true
             (push.iloc 3 . 0)
             (push.const . ": ~a")
             (call
               (push.iloc 2 . 0)
               (call
                 (push.iloc.1 . 0)
                 (push.const . 0)
                 (apply.gloc.of record-accessor "./boot/condition.scm" . 107585))
               (apply))
             (push)
             (ret.subr.gloc.of format "./boot/condition.scm" . 107565))
           (push.iloc 3 . 0)
           (push.const . ": ~r")
           (call
             (push.iloc 2 . 0)
             (call
               (push.iloc.1 . 0)
               (push.const . 0)
               (apply.gloc.of record-accessor "./boot/condition.scm" . 108609))
             (apply))
           (push)
           (ret.subr.gloc.of format "./boot/condition.scm" . 108589))
         (>n.iloc (0 . 1) 1 "./boot/condition.scm" . 109607)
         (if.true
           (extend.enclose+
             (2 0 . loop)
             (iloc.0 . 1)
             (if.not.pair?.ret.const . #f)
             (call
               (push.iloc 4 . 0)
               (call
                 (push.iloc 3 . 0)
                 (push.iloc.0 . 0)
                 (apply.gloc.of record-accessor "./boot/condition.scm" . 113724))
               (apply))
             (push)
             (extend . 1)
             (call
               (push.iloc.0 . 0)
               (subr.gloc.of string? 1 "./boot/condition.scm" . 114742)
               (if.true
                 (push.iloc 6 . 0)
                 (push.const . "~%     ~a: ~a")
                 (push.car.iloc (1 . 1) "./boot/condition.scm" . 115794)
                 (push.iloc.0 . 0)
                 (ret.subr.gloc.of format "./boot/condition.scm" . 115766))
               (push.iloc 6 . 0)
               (push.const . "~%     ~a: ~r")
               (push.car.iloc (1 . 1) "./boot/condition.scm" . 116818)
               (push.iloc.0 . 0)
               (ret.subr.gloc.of format "./boot/condition.scm" . 116790))
             (push.n+.iloc (1 . 0) 1 "./boot/condition.scm" . 117816)
             (push.cdr.iloc (1 . 1) "./boot/condition.scm" . 117824)
             (apply.iloc+ (2 . 0) "./boot/condition.scm" . 117810))
           (push.const . 0)
           (call
             (push.iloc 2 . 0)
             (apply.gloc.of record-type-field-names "./boot/condition.scm" . 110656))
           (push)
           (push.subr.gloc.of vector->list 1 "./boot/condition.scm" . 110642)
           (apply.iloc+ (0 . 0) "./boot/condition.scm" . 112683))
         (ret.const.unspec))
       (call (push.iloc.1 . 1) (apply.gloc.of simple-conditions "./boot/condition.scm" . 96281))
       (push)
       (apply.gloc.of
         for-each
         (for-each (lambda (|rec`3440*|)
                     (let ((|rtd`3442*| (record-rtd |rec`3440*|)))
                       (let ((|parents`3444*| (|list-parents`3423*| |rtd`3442*|))
                             (|count`3444*| (vector-length (record-type-field-names |rtd`3442*|))))
                         (format |buf`3436*| "~%    ~a" (record-type-name |rtd`3442*|))
                         (and (pair? |parents`3444*|) (format |buf`3436*| " ~r" |parents`3444*|))
                         (if (= |count`3444*| 1)
                             (if (string? ((record-accessor |rtd`3442*| 0) |rec`3440*|))
                                 (format
                                   |buf`3436*|
                                   ": ~a"
                                   ((record-accessor |rtd`3442*| 0) |rec`3440*|))
                                 (format
                                   |buf`3436*|
                                   ": ~r"
                                   ((record-accessor |rtd`3442*| 0) |rec`3440*|)))
                             (if (> |count`3444*| 1)
                                 (letrec* ((|loop`3452*|
                                             (lambda (|i`3453*| |lst`3453*|)
                                               (and (pair? |lst`3453*|)
                                                    (let ((|obj`3455*|
                                                            ((record-accessor |rtd`3442*| |i`3453*|)
                                                             |rec`3440*|)))
                                                      (if (string? |obj`3455*|)
                                                          (format
                                                            |buf`3436*|
                                                            "~%     ~a: ~a"
                                                            (car |lst`3453*|)
                                                            |obj`3455*|)
                                                          (format
                                                            |buf`3436*|
                                                            "~%     ~a: ~r"
                                                            (car |lst`3453*|)
                                                            |obj`3455*|))
                                                      (|loop`3452*|
                                                        (+ |i`3453*| 1)
                                                        (cdr |lst`3453*|)))))))
                                   (|loop`3452*|
                                     0
                                     (vector->list (record-type-field-names |rtd`3442*|))))
                                 (|.unspecified|))))))
                   (simple-conditions |c`3422*|))))
     (push.iloc.0 . 0)
     (push.const . "~%   >")
     (subr.gloc.of format 2 "./boot/condition.scm" . 119822)
     (push.iloc.1 . 0)
     (push.const . "~a~!")
     (push.iloc.0 . 0)
     (push.subr.gloc.of extract-accumulated-string 1 "./boot/condition.scm" . 120866)
     (ret.subr.gloc.of format "./boot/condition.scm" . 120846))
   (push.iloc.0 . 0)
   (push.const . "~r~!")
   (push.iloc.0 . 1)
   (ret.subr.gloc.of format "./boot/condition.scm" . 122892))
 (set.gloc.of describe-condition)
 (ret.const.unspec))
((call
   (call
     (push.const . &message)
     (call
       (push.gloc.of &condition)
       (apply.gloc.of record-type-rtd "./boot/condition.scm" . 126005))
     (push)
     (call
       (touch.gloc.of make-condition-uid)
       (apply.gloc.of make-condition-uid "./boot/condition.scm" . 126034))
     (push)
     (push.const . #f)
     (push.const . #f)
     (push.const . #((immutable message)))
     (apply.gloc.of make-record-type-descriptor "./boot/condition.scm" . 125966))
   (push)
   (extend . 1)
   (push.const . &message)
   (push.iloc.0 . 0)
   (call
     (push.iloc.0 . 0)
     (call
       (push.gloc.of &condition)
       (apply.gloc.of record-type-rcd "./boot/condition.scm" . 127032))
     (push)
     (push.const . #f)
     (apply.gloc.of make-record-constructor-descriptor "./boot/condition.scm" . 126992))
   (push)
   (apply.gloc.of make-record-type "./boot/condition.scm" . 128007))
 (set.gloc.of &message)
 (ret.const.unspec))
((call
   (call (push.gloc.of &message) (apply.gloc.of record-type-rcd "./boot/condition.scm" . 129076))
   (push)
   (apply.gloc.of record-constructor "./boot/condition.scm" . 129056))
 (set.gloc.of make-message-condition)
 (ret.const.unspec))
((call
   (call (push.gloc.of &message) (apply.gloc.of record-type-rtd "./boot/condition.scm" . 130097))
   (push)
   (apply.gloc.of condition-predicate "./boot/condition.scm" . 130076))
 (set.gloc.of message-condition?)
 (ret.const.unspec))
((call
   (call (push.gloc.of &message) (apply.gloc.of record-type-rtd "./boot/condition.scm" . 131119))
   (push)
   (call
     (call (push.gloc.of &message) (apply.gloc.of record-type-rtd "./boot/condition.scm" . 131163))
     (push)
     (push.const . 0)
     (apply.gloc.of record-accessor "./boot/condition.scm" . 131146))
   (push)
   (apply.gloc.of condition-accessor "./boot/condition.scm" . 131099))
 (set.gloc.of condition-message)
 (ret.const.unspec))
((call
   (call
     (push.const . &warning)
     (call
       (push.gloc.of &condition)
       (apply.gloc.of record-type-rtd "./boot/condition.scm" . 134197))
     (push)
     (call
       (touch.gloc.of make-condition-uid)
       (apply.gloc.of make-condition-uid "./boot/condition.scm" . 134226))
     (push)
     (push.const . #f)
     (push.const . #f)
     (push.const . #())
     (apply.gloc.of make-record-type-descriptor "./boot/condition.scm" . 134158))
   (push)
   (extend . 1)
   (push.const . &warning)
   (push.iloc.0 . 0)
   (call
     (push.iloc.0 . 0)
     (call
       (push.gloc.of &condition)
       (apply.gloc.of record-type-rcd "./boot/condition.scm" . 135224))
     (push)
     (push.const . #f)
     (apply.gloc.of make-record-constructor-descriptor "./boot/condition.scm" . 135184))
   (push)
   (apply.gloc.of make-record-type "./boot/condition.scm" . 136199))
 (set.gloc.of &warning)
 (ret.const.unspec))
((call
   (call (push.gloc.of &warning) (apply.gloc.of record-type-rcd "./boot/condition.scm" . 137258))
   (push)
   (apply.gloc.of record-constructor "./boot/condition.scm" . 137238))
 (set.gloc.of make-warning)
 (ret.const.unspec))
((call
   (call (push.gloc.of &warning) (apply.gloc.of record-type-rtd "./boot/condition.scm" . 138279))
   (push)
   (apply.gloc.of condition-predicate "./boot/condition.scm" . 138258))
 (set.gloc.of warning?)
 (ret.const.unspec))
((call
   (call
     (push.const . &serious)
     (call
       (push.gloc.of &condition)
       (apply.gloc.of record-type-rtd "./boot/condition.scm" . 141365))
     (push)
     (call
       (touch.gloc.of make-condition-uid)
       (apply.gloc.of make-condition-uid "./boot/condition.scm" . 141394))
     (push)
     (push.const . #f)
     (push.const . #f)
     (push.const . #())
     (apply.gloc.of make-record-type-descriptor "./boot/condition.scm" . 141326))
   (push)
   (extend . 1)
   (push.const . &serious)
   (push.iloc.0 . 0)
   (call
     (push.iloc.0 . 0)
     (call
       (push.gloc.of &condition)
       (apply.gloc.of record-type-rcd "./boot/condition.scm" . 142392))
     (push)
     (push.const . #f)
     (apply.gloc.of make-record-constructor-descriptor "./boot/condition.scm" . 142352))
   (push)
   (apply.gloc.of make-record-type "./boot/condition.scm" . 143367))
 (set.gloc.of &serious)
 (ret.const.unspec))
((call
   (call (push.gloc.of &serious) (apply.gloc.of record-type-rcd "./boot/condition.scm" . 144436))
   (push)
   (apply.gloc.of record-constructor "./boot/condition.scm" . 144416))
 (set.gloc.of make-serious-condition)
 (ret.const.unspec))
((call
   (call (push.gloc.of &serious) (apply.gloc.of record-type-rtd "./boot/condition.scm" . 145457))
   (push)
   (apply.gloc.of condition-predicate "./boot/condition.scm" . 145436))
 (set.gloc.of serious-condition?)
 (ret.const.unspec))
((call
   (call
     (push.const . &error)
     (call (push.gloc.of &serious) (apply.gloc.of record-type-rtd "./boot/condition.scm" . 148531))
     (push)
     (call
       (touch.gloc.of make-condition-uid)
       (apply.gloc.of make-condition-uid "./boot/condition.scm" . 148558))
     (push)
     (push.const . #f)
     (push.const . #f)
     (push.const . #())
     (apply.gloc.of make-record-type-descriptor "./boot/condition.scm" . 148494))
   (push)
   (extend . 1)
   (push.const . &error)
   (push.iloc.0 . 0)
   (call
     (push.iloc.0 . 0)
     (call (push.gloc.of &serious) (apply.gloc.of record-type-rcd "./boot/condition.scm" . 149560))
     (push)
     (push.const . #f)
     (apply.gloc.of make-record-constructor-descriptor "./boot/condition.scm" . 149520))
   (push)
   (apply.gloc.of make-record-type "./boot/condition.scm" . 150535))
 (set.gloc.of &error)
 (ret.const.unspec))
((call
   (call (push.gloc.of &error) (apply.gloc.of record-type-rcd "./boot/condition.scm" . 151592))
   (push)
   (apply.gloc.of record-constructor "./boot/condition.scm" . 151572))
 (set.gloc.of make-error)
 (ret.const.unspec))
((call
   (call (push.gloc.of &error) (apply.gloc.of record-type-rtd "./boot/condition.scm" . 152613))
   (push)
   (apply.gloc.of condition-predicate "./boot/condition.scm" . 152592))
 (set.gloc.of error?)
 (ret.const.unspec))
((call
   (call
     (push.const . &violation)
     (call (push.gloc.of &serious) (apply.gloc.of record-type-rtd "./boot/condition.scm" . 155703))
     (push)
     (call
       (touch.gloc.of make-condition-uid)
       (apply.gloc.of make-condition-uid "./boot/condition.scm" . 155730))
     (push)
     (push.const . #f)
     (push.const . #f)
     (push.const . #())
     (apply.gloc.of make-record-type-descriptor "./boot/condition.scm" . 155662))
   (push)
   (extend . 1)
   (push.const . &violation)
   (push.iloc.0 . 0)
   (call
     (push.iloc.0 . 0)
     (call (push.gloc.of &serious) (apply.gloc.of record-type-rcd "./boot/condition.scm" . 156728))
     (push)
     (push.const . #f)
     (apply.gloc.of make-record-constructor-descriptor "./boot/condition.scm" . 156688))
   (push)
   (apply.gloc.of make-record-type "./boot/condition.scm" . 157703))
 (set.gloc.of &violation)
 (ret.const.unspec))
((call
   (call (push.gloc.of &violation) (apply.gloc.of record-type-rcd "./boot/condition.scm" . 158764))
   (push)
   (apply.gloc.of record-constructor "./boot/condition.scm" . 158744))
 (set.gloc.of make-violation)
 (ret.const.unspec))
((call
   (call (push.gloc.of &violation) (apply.gloc.of record-type-rtd "./boot/condition.scm" . 159785))
   (push)
   (apply.gloc.of condition-predicate "./boot/condition.scm" . 159764))
 (set.gloc.of violation?)
 (ret.const.unspec))
((call
   (call
     (push.const . &assertion)
     (call
       (push.gloc.of &violation)
       (apply.gloc.of record-type-rtd "./boot/condition.scm" . 162871))
     (push)
     (call
       (touch.gloc.of make-condition-uid)
       (apply.gloc.of make-condition-uid "./boot/condition.scm" . 162900))
     (push)
     (push.const . #f)
     (push.const . #f)
     (push.const . #())
     (apply.gloc.of make-record-type-descriptor "./boot/condition.scm" . 162830))
   (push)
   (extend . 1)
   (push.const . &assertion)
   (push.iloc.0 . 0)
   (call
     (push.iloc.0 . 0)
     (call
       (push.gloc.of &violation)
       (apply.gloc.of record-type-rcd "./boot/condition.scm" . 163896))
     (push)
     (push.const . #f)
     (apply.gloc.of make-record-constructor-descriptor "./boot/condition.scm" . 163856))
   (push)
   (apply.gloc.of make-record-type "./boot/condition.scm" . 164871))
 (set.gloc.of &assertion)
 (ret.const.unspec))
((call
   (call (push.gloc.of &assertion) (apply.gloc.of record-type-rcd "./boot/condition.scm" . 165942))
   (push)
   (apply.gloc.of record-constructor "./boot/condition.scm" . 165922))
 (set.gloc.of make-assertion-violation)
 (ret.const.unspec))
((call
   (call (push.gloc.of &assertion) (apply.gloc.of record-type-rtd "./boot/condition.scm" . 166963))
   (push)
   (apply.gloc.of condition-predicate "./boot/condition.scm" . 166942))
 (set.gloc.of assertion-violation?)
 (ret.const.unspec))
((call
   (call
     (push.const . &irritants)
     (call
       (push.gloc.of &condition)
       (apply.gloc.of record-type-rtd "./boot/condition.scm" . 170039))
     (push)
     (call
       (touch.gloc.of make-condition-uid)
       (apply.gloc.of make-condition-uid "./boot/condition.scm" . 170068))
     (push)
     (push.const . #f)
     (push.const . #f)
     (push.const . #((immutable irritants)))
     (apply.gloc.of make-record-type-descriptor "./boot/condition.scm" . 169998))
   (push)
   (extend . 1)
   (push.const . &irritants)
   (push.iloc.0 . 0)
   (call
     (push.iloc.0 . 0)
     (call
       (push.gloc.of &condition)
       (apply.gloc.of record-type-rcd "./boot/condition.scm" . 171064))
     (push)
     (push.const . #f)
     (apply.gloc.of make-record-constructor-descriptor "./boot/condition.scm" . 171024))
   (push)
   (apply.gloc.of make-record-type "./boot/condition.scm" . 172039))
 (set.gloc.of &irritants)
 (ret.const.unspec))
((call
   (call (push.gloc.of &irritants) (apply.gloc.of record-type-rtd "./boot/condition.scm" . 173103))
   (push)
   (push.const . 0)
   (apply.gloc.of record-accessor "./boot/condition.scm" . 173086))
 (set.gloc.of &irritants-irritants)
 (ret.const.unspec))
((call
   (call (push.gloc.of &irritants) (apply.gloc.of record-type-rcd "./boot/condition.scm" . 174134))
   (push)
   (apply.gloc.of record-constructor "./boot/condition.scm" . 174114))
 (set.gloc.of make-irritants-condition)
 (ret.const.unspec))
((call
   (call (push.gloc.of &irritants) (apply.gloc.of record-type-rtd "./boot/condition.scm" . 175155))
   (push)
   (apply.gloc.of condition-predicate "./boot/condition.scm" . 175134))
 (set.gloc.of irritants-condition?)
 (ret.const.unspec))
((call
   (call (push.gloc.of &irritants) (apply.gloc.of record-type-rtd "./boot/condition.scm" . 176177))
   (push)
   (push.gloc.of &irritants-irritants)
   (apply.gloc.of condition-accessor "./boot/condition.scm" . 176157))
 (set.gloc.of condition-irritants)
 (ret.const.unspec))
((call
   (call
     (push.const . &who)
     (call
       (push.gloc.of &condition)
       (apply.gloc.of record-type-rtd "./boot/condition.scm" . 179249))
     (push)
     (call
       (touch.gloc.of make-condition-uid)
       (apply.gloc.of make-condition-uid "./boot/condition.scm" . 179278))
     (push)
     (push.const . #f)
     (push.const . #f)
     (push.const . #((immutable who)))
     (apply.gloc.of make-record-type-descriptor "./boot/condition.scm" . 179214))
   (push)
   (extend . 1)
   (push.const . &who)
   (push.iloc.0 . 0)
   (call
     (push.iloc.0 . 0)
     (call
       (push.gloc.of &condition)
       (apply.gloc.of record-type-rcd "./boot/condition.scm" . 180280))
     (push)
     (push.const . #f)
     (apply.gloc.of make-record-constructor-descriptor "./boot/condition.scm" . 180240))
   (push)
   (apply.gloc.of make-record-type "./boot/condition.scm" . 181255))
 (set.gloc.of &who)
 (ret.const.unspec))
((call
   (call (push.gloc.of &who) (apply.gloc.of record-type-rtd "./boot/condition.scm" . 182307))
   (push)
   (push.const . 0)
   (apply.gloc.of record-accessor "./boot/condition.scm" . 182290))
 (set.gloc.of &who-who)
 (ret.const.unspec))
((call
   (call (push.gloc.of &who) (apply.gloc.of record-type-rcd "./boot/condition.scm" . 183344))
   (push)
   (apply.gloc.of record-constructor "./boot/condition.scm" . 183324))
 (set.gloc.of make-who-condition)
 (ret.const.unspec))
((call
   (call (push.gloc.of &who) (apply.gloc.of record-type-rtd "./boot/condition.scm" . 184365))
   (push)
   (apply.gloc.of condition-predicate "./boot/condition.scm" . 184344))
 (set.gloc.of who-condition?)
 (ret.const.unspec))
((call
   (call (push.gloc.of &who) (apply.gloc.of record-type-rtd "./boot/condition.scm" . 185387))
   (push)
   (push.gloc.of &who-who)
   (apply.gloc.of condition-accessor "./boot/condition.scm" . 185367))
 (set.gloc.of condition-who)
 (ret.const.unspec))
((call
   (call
     (push.const . &non-continuable)
     (call
       (push.gloc.of &violation)
       (apply.gloc.of record-type-rtd "./boot/condition.scm" . 188477))
     (push)
     (call
       (touch.gloc.of make-condition-uid)
       (apply.gloc.of make-condition-uid "./boot/condition.scm" . 188506))
     (push)
     (push.const . #f)
     (push.const . #f)
     (push.const . #())
     (apply.gloc.of make-record-type-descriptor "./boot/condition.scm" . 188430))
   (push)
   (extend . 1)
   (push.const . &non-continuable)
   (push.iloc.0 . 0)
   (call
     (push.iloc.0 . 0)
     (call
       (push.gloc.of &violation)
       (apply.gloc.of record-type-rcd "./boot/condition.scm" . 189496))
     (push)
     (push.const . #f)
     (apply.gloc.of make-record-constructor-descriptor "./boot/condition.scm" . 189456))
   (push)
   (apply.gloc.of make-record-type "./boot/condition.scm" . 190471))
 (set.gloc.of &non-continuable)
 (ret.const.unspec))
((call
   (call
     (push.gloc.of &non-continuable)
     (apply.gloc.of record-type-rcd "./boot/condition.scm" . 191548))
   (push)
   (apply.gloc.of record-constructor "./boot/condition.scm" . 191528))
 (set.gloc.of make-non-continuable-violation)
 (ret.const.unspec))
((call
   (call
     (push.gloc.of &non-continuable)
     (apply.gloc.of record-type-rtd "./boot/condition.scm" . 192569))
   (push)
   (apply.gloc.of condition-predicate "./boot/condition.scm" . 192548))
 (set.gloc.of non-continuable-violation?)
 (ret.const.unspec))
((call
   (call
     (push.const . &implementation-restriction)
     (call
       (push.gloc.of &violation)
       (apply.gloc.of record-type-rtd "./boot/condition.scm" . 195656))
     (push)
     (call
       (touch.gloc.of make-condition-uid)
       (apply.gloc.of make-condition-uid "./boot/condition.scm" . 195685))
     (push)
     (push.const . #f)
     (push.const . #f)
     (push.const . #())
     (apply.gloc.of make-record-type-descriptor "./boot/condition.scm" . 195598))
   (push)
   (extend . 1)
   (push.const . &implementation-restriction)
   (push.iloc.0 . 0)
   (call
     (push.iloc.0 . 0)
     (call
       (push.gloc.of &violation)
       (apply.gloc.of record-type-rcd "./boot/condition.scm" . 196664))
     (push)
     (push.const . #f)
     (apply.gloc.of make-record-constructor-descriptor "./boot/condition.scm" . 196624))
   (push)
   (apply.gloc.of make-record-type "./boot/condition.scm" . 197639))
 (set.gloc.of &implementation-restriction)
 (ret.const.unspec))
((call
   (call
     (push.gloc.of &implementation-restriction)
     (apply.gloc.of record-type-rcd "./boot/condition.scm" . 199703))
   (push)
   (apply.gloc.of record-constructor "./boot/condition.scm" . 199683))
 (set.gloc.of make-implementation-restriction-violation)
 (ret.const.unspec))
((call
   (call
     (push.gloc.of &implementation-restriction)
     (apply.gloc.of record-type-rtd "./boot/condition.scm" . 201752))
   (push)
   (apply.gloc.of condition-predicate "./boot/condition.scm" . 201731))
 (set.gloc.of implementation-restriction-violation?)
 (ret.const.unspec))
((call
   (call
     (push.const . &lexical)
     (call
       (push.gloc.of &violation)
       (apply.gloc.of record-type-rtd "./boot/condition.scm" . 204853))
     (push)
     (call
       (touch.gloc.of make-condition-uid)
       (apply.gloc.of make-condition-uid "./boot/condition.scm" . 204882))
     (push)
     (push.const . #f)
     (push.const . #f)
     (push.const . #())
     (apply.gloc.of make-record-type-descriptor "./boot/condition.scm" . 204814))
   (push)
   (extend . 1)
   (push.const . &lexical)
   (push.iloc.0 . 0)
   (call
     (push.iloc.0 . 0)
     (call
       (push.gloc.of &violation)
       (apply.gloc.of record-type-rcd "./boot/condition.scm" . 205880))
     (push)
     (push.const . #f)
     (apply.gloc.of make-record-constructor-descriptor "./boot/condition.scm" . 205840))
   (push)
   (apply.gloc.of make-record-type "./boot/condition.scm" . 206855))
 (set.gloc.of &lexical)
 (ret.const.unspec))
((call
   (call (push.gloc.of &lexical) (apply.gloc.of record-type-rcd "./boot/condition.scm" . 207924))
   (push)
   (apply.gloc.of record-constructor "./boot/condition.scm" . 207904))
 (set.gloc.of make-lexical-violation)
 (ret.const.unspec))
((call
   (call (push.gloc.of &lexical) (apply.gloc.of record-type-rtd "./boot/condition.scm" . 208945))
   (push)
   (apply.gloc.of condition-predicate "./boot/condition.scm" . 208924))
 (set.gloc.of lexical-violation?)
 (ret.const.unspec))
((call
   (call
     (push.const . &syntax)
     (call
       (push.gloc.of &violation)
       (apply.gloc.of record-type-rtd "./boot/condition.scm" . 212020))
     (push)
     (call
       (touch.gloc.of make-condition-uid)
       (apply.gloc.of make-condition-uid "./boot/condition.scm" . 212049))
     (push)
     (push.const . #f)
     (push.const . #f)
     (push.const . #((immutable form) (immutable subform)))
     (apply.gloc.of make-record-type-descriptor "./boot/condition.scm" . 211982))
   (push)
   (extend . 1)
   (push.const . &syntax)
   (push.iloc.0 . 0)
   (call
     (push.iloc.0 . 0)
     (call
       (push.gloc.of &violation)
       (apply.gloc.of record-type-rcd "./boot/condition.scm" . 213048))
     (push)
     (push.const . #f)
     (apply.gloc.of make-record-constructor-descriptor "./boot/condition.scm" . 213008))
   (push)
   (apply.gloc.of make-record-type "./boot/condition.scm" . 214023))
 (set.gloc.of &syntax)
 (ret.const.unspec))
((call
   (call (push.gloc.of &syntax) (apply.gloc.of record-type-rtd "./boot/condition.scm" . 215079))
   (push)
   (push.const . 0)
   (apply.gloc.of record-accessor "./boot/condition.scm" . 215062))
 (set.gloc.of &syntax-form)
 (ret.const.unspec))
((call
   (call (push.gloc.of &syntax) (apply.gloc.of record-type-rtd "./boot/condition.scm" . 216106))
   (push)
   (push.const . 1)
   (apply.gloc.of record-accessor "./boot/condition.scm" . 216089))
 (set.gloc.of &syntax-subform)
 (ret.const.unspec))
((call
   (call (push.gloc.of &syntax) (apply.gloc.of record-type-rcd "./boot/condition.scm" . 217139))
   (push)
   (apply.gloc.of record-constructor "./boot/condition.scm" . 217119))
 (set.gloc.of make-syntax-violation)
 (ret.const.unspec))
((call
   (call (push.gloc.of &syntax) (apply.gloc.of record-type-rtd "./boot/condition.scm" . 218160))
   (push)
   (apply.gloc.of condition-predicate "./boot/condition.scm" . 218139))
 (set.gloc.of syntax-violation?)
 (ret.const.unspec))
((call
   (call (push.gloc.of &syntax) (apply.gloc.of record-type-rtd "./boot/condition.scm" . 219187))
   (push)
   (push.gloc.of &syntax-form)
   (apply.gloc.of condition-accessor "./boot/condition.scm" . 219167))
 (set.gloc.of syntax-violation-form)
 (ret.const.unspec))
((call
   (call (push.gloc.of &syntax) (apply.gloc.of record-type-rtd "./boot/condition.scm" . 220214))
   (push)
   (push.gloc.of &syntax-subform)
   (apply.gloc.of condition-accessor "./boot/condition.scm" . 220194))
 (set.gloc.of syntax-violation-subform)
 (ret.const.unspec))
((call
   (call
     (push.const . &undefined)
     (call
       (push.gloc.of &violation)
       (apply.gloc.of record-type-rtd "./boot/condition.scm" . 223287))
     (push)
     (call
       (touch.gloc.of make-condition-uid)
       (apply.gloc.of make-condition-uid "./boot/condition.scm" . 223316))
     (push)
     (push.const . #f)
     (push.const . #f)
     (push.const . #())
     (apply.gloc.of make-record-type-descriptor "./boot/condition.scm" . 223246))
   (push)
   (extend . 1)
   (push.const . &undefined)
   (push.iloc.0 . 0)
   (call
     (push.iloc.0 . 0)
     (call
       (push.gloc.of &violation)
       (apply.gloc.of record-type-rcd "./boot/condition.scm" . 224312))
     (push)
     (push.const . #f)
     (apply.gloc.of make-record-constructor-descriptor "./boot/condition.scm" . 224272))
   (push)
   (apply.gloc.of make-record-type "./boot/condition.scm" . 225287))
 (set.gloc.of &undefined)
 (ret.const.unspec))
((call
   (call (push.gloc.of &undefined) (apply.gloc.of record-type-rcd "./boot/condition.scm" . 226358))
   (push)
   (apply.gloc.of record-constructor "./boot/condition.scm" . 226338))
 (set.gloc.of make-undefined-violation)
 (ret.const.unspec))
((call
   (call (push.gloc.of &undefined) (apply.gloc.of record-type-rtd "./boot/condition.scm" . 227379))
   (push)
   (apply.gloc.of condition-predicate "./boot/condition.scm" . 227358))
 (set.gloc.of undefined-violation?)
 (ret.const.unspec))
((call
   (call
     (push.const . &i/o)
     (call (push.gloc.of &error) (apply.gloc.of record-type-rtd "./boot/condition.scm" . 230449))
     (push)
     (call
       (touch.gloc.of make-condition-uid)
       (apply.gloc.of make-condition-uid "./boot/condition.scm" . 230474))
     (push)
     (push.const . #f)
     (push.const . #f)
     (push.const . #())
     (apply.gloc.of make-record-type-descriptor "./boot/condition.scm" . 230414))
   (push)
   (extend . 1)
   (push.const . &i/o)
   (push.iloc.0 . 0)
   (call
     (push.iloc.0 . 0)
     (call (push.gloc.of &error) (apply.gloc.of record-type-rcd "./boot/condition.scm" . 231480))
     (push)
     (push.const . #f)
     (apply.gloc.of make-record-constructor-descriptor "./boot/condition.scm" . 231440))
   (push)
   (apply.gloc.of make-record-type "./boot/condition.scm" . 232455))
 (set.gloc.of &i/o)
 (ret.const.unspec))
((call
   (call (push.gloc.of &i/o) (apply.gloc.of record-type-rcd "./boot/condition.scm" . 233516))
   (push)
   (apply.gloc.of record-constructor "./boot/condition.scm" . 233496))
 (set.gloc.of make-i/o-error)
 (ret.const.unspec))
((call
   (call (push.gloc.of &i/o) (apply.gloc.of record-type-rtd "./boot/condition.scm" . 234537))
   (push)
   (apply.gloc.of condition-predicate "./boot/condition.scm" . 234516))
 (set.gloc.of i/o-error?)
 (ret.const.unspec))
((call
   (call
     (push.const . &i/o-read)
     (call (push.gloc.of &i/o) (apply.gloc.of record-type-rtd "./boot/condition.scm" . 237622))
     (push)
     (call
       (touch.gloc.of make-condition-uid)
       (apply.gloc.of make-condition-uid "./boot/condition.scm" . 237645))
     (push)
     (push.const . #f)
     (push.const . #f)
     (push.const . #())
     (apply.gloc.of make-record-type-descriptor "./boot/condition.scm" . 237582))
   (push)
   (extend . 1)
   (push.const . &i/o-read)
   (push.iloc.0 . 0)
   (call
     (push.iloc.0 . 0)
     (call (push.gloc.of &i/o) (apply.gloc.of record-type-rcd "./boot/condition.scm" . 238648))
     (push)
     (push.const . #f)
     (apply.gloc.of make-record-constructor-descriptor "./boot/condition.scm" . 238608))
   (push)
   (apply.gloc.of make-record-type "./boot/condition.scm" . 239623))
 (set.gloc.of &i/o-read)
 (ret.const.unspec))
((call
   (call (push.gloc.of &i/o-read) (apply.gloc.of record-type-rcd "./boot/condition.scm" . 240689))
   (push)
   (apply.gloc.of record-constructor "./boot/condition.scm" . 240669))
 (set.gloc.of make-i/o-read-error)
 (ret.const.unspec))
((call
   (call (push.gloc.of &i/o-read) (apply.gloc.of record-type-rtd "./boot/condition.scm" . 241710))
   (push)
   (apply.gloc.of condition-predicate "./boot/condition.scm" . 241689))
 (set.gloc.of i/o-read-error?)
 (ret.const.unspec))
((call
   (call
     (push.const . &i/o-write)
     (call (push.gloc.of &i/o) (apply.gloc.of record-type-rtd "./boot/condition.scm" . 244791))
     (push)
     (call
       (touch.gloc.of make-condition-uid)
       (apply.gloc.of make-condition-uid "./boot/condition.scm" . 244814))
     (push)
     (push.const . #f)
     (push.const . #f)
     (push.const . #())
     (apply.gloc.of make-record-type-descriptor "./boot/condition.scm" . 244750))
   (push)
   (extend . 1)
   (push.const . &i/o-write)
   (push.iloc.0 . 0)
   (call
     (push.iloc.0 . 0)
     (call (push.gloc.of &i/o) (apply.gloc.of record-type-rcd "./boot/condition.scm" . 245816))
     (push)
     (push.const . #f)
     (apply.gloc.of make-record-constructor-descriptor "./boot/condition.scm" . 245776))
   (push)
   (apply.gloc.of make-record-type "./boot/condition.scm" . 246791))
 (set.gloc.of &i/o-write)
 (ret.const.unspec))
((call
   (call (push.gloc.of &i/o-write) (apply.gloc.of record-type-rcd "./boot/condition.scm" . 247858))
   (push)
   (apply.gloc.of record-constructor "./boot/condition.scm" . 247838))
 (set.gloc.of make-i/o-write-error)
 (ret.const.unspec))
((call
   (call (push.gloc.of &i/o-write) (apply.gloc.of record-type-rtd "./boot/condition.scm" . 248879))
   (push)
   (apply.gloc.of condition-predicate "./boot/condition.scm" . 248858))
 (set.gloc.of i/o-write-error?)
 (ret.const.unspec))
((call
   (call
     (push.const . &i/o-invalid-position)
     (call (push.gloc.of &i/o) (apply.gloc.of record-type-rtd "./boot/condition.scm" . 251970))
     (push)
     (call
       (touch.gloc.of make-condition-uid)
       (apply.gloc.of make-condition-uid "./boot/condition.scm" . 251993))
     (push)
     (push.const . #f)
     (push.const . #f)
     (push.const . #((immutable position)))
     (apply.gloc.of make-record-type-descriptor "./boot/condition.scm" . 251918))
   (push)
   (extend . 1)
   (push.const . &i/o-invalid-position)
   (push.iloc.0 . 0)
   (call
     (push.iloc.0 . 0)
     (call (push.gloc.of &i/o) (apply.gloc.of record-type-rcd "./boot/condition.scm" . 252984))
     (push)
     (push.const . #f)
     (apply.gloc.of make-record-constructor-descriptor "./boot/condition.scm" . 252944))
   (push)
   (apply.gloc.of make-record-type "./boot/condition.scm" . 253959))
 (set.gloc.of &i/o-invalid-position)
 (ret.const.unspec))
((call
   (call
     (push.gloc.of &i/o-invalid-position)
     (apply.gloc.of record-type-rtd "./boot/condition.scm" . 256020))
   (push)
   (push.const . 0)
   (apply.gloc.of record-accessor "./boot/condition.scm" . 256003))
 (set.gloc.of &i/o-invalid-position-position)
 (ret.const.unspec))
((call
   (call
     (push.gloc.of &i/o-invalid-position)
     (apply.gloc.of record-type-rcd "./boot/condition.scm" . 258071))
   (push)
   (apply.gloc.of record-constructor "./boot/condition.scm" . 258051))
 (set.gloc.of make-i/o-invalid-position-error)
 (ret.const.unspec))
((call
   (call
     (push.gloc.of &i/o-invalid-position)
     (apply.gloc.of record-type-rtd "./boot/condition.scm" . 259130))
   (push)
   (apply.gloc.of condition-predicate "./boot/condition.scm" . 259109))
 (set.gloc.of i/o-invalid-position-error?)
 (ret.const.unspec))
((call
   (call
     (push.gloc.of &i/o-invalid-position)
     (apply.gloc.of record-type-rtd "./boot/condition.scm" . 261143))
   (push)
   (push.gloc.of &i/o-invalid-position-position)
   (apply.gloc.of condition-accessor "./boot/condition.scm" . 261123))
 (set.gloc.of i/o-error-position)
 (ret.const.unspec))
((call
   (call
     (push.const . &i/o-filename)
     (call (push.gloc.of &i/o) (apply.gloc.of record-type-rtd "./boot/condition.scm" . 264250))
     (push)
     (call
       (touch.gloc.of make-condition-uid)
       (apply.gloc.of make-condition-uid "./boot/condition.scm" . 264273))
     (push)
     (push.const . #f)
     (push.const . #f)
     (push.const . #((immutable filename)))
     (apply.gloc.of make-record-type-descriptor "./boot/condition.scm" . 264206))
   (push)
   (extend . 1)
   (push.const . &i/o-filename)
   (push.iloc.0 . 0)
   (call
     (push.iloc.0 . 0)
     (call (push.gloc.of &i/o) (apply.gloc.of record-type-rcd "./boot/condition.scm" . 265272))
     (push)
     (push.const . #f)
     (apply.gloc.of make-record-constructor-descriptor "./boot/condition.scm" . 265232))
   (push)
   (apply.gloc.of make-record-type "./boot/condition.scm" . 266247))
 (set.gloc.of &i/o-filename)
 (ret.const.unspec))
((call
   (call
     (push.gloc.of &i/o-filename)
     (apply.gloc.of record-type-rtd "./boot/condition.scm" . 267313))
   (push)
   (push.const . 0)
   (apply.gloc.of record-accessor "./boot/condition.scm" . 267296))
 (set.gloc.of &i/o-filename-filename)
 (ret.const.unspec))
((call
   (call
     (push.gloc.of &i/o-filename)
     (apply.gloc.of record-type-rcd "./boot/condition.scm" . 268341))
   (push)
   (apply.gloc.of record-constructor "./boot/condition.scm" . 268321))
 (set.gloc.of make-i/o-filename-error)
 (ret.const.unspec))
((call
   (call
     (push.gloc.of &i/o-filename)
     (apply.gloc.of record-type-rtd "./boot/condition.scm" . 269362))
   (push)
   (apply.gloc.of condition-predicate "./boot/condition.scm" . 269341))
 (set.gloc.of i/o-filename-error?)
 (ret.const.unspec))
((call
   (call
     (push.gloc.of &i/o-filename)
     (apply.gloc.of record-type-rtd "./boot/condition.scm" . 270384))
   (push)
   (push.gloc.of &i/o-filename-filename)
   (apply.gloc.of condition-accessor "./boot/condition.scm" . 270364))
 (set.gloc.of i/o-error-filename)
 (ret.const.unspec))
((call
   (call
     (push.const . &i/o-file-protection)
     (call
       (push.gloc.of &i/o-filename)
       (apply.gloc.of record-type-rtd "./boot/condition.scm" . 273473))
     (push)
     (call
       (touch.gloc.of make-condition-uid)
       (apply.gloc.of make-condition-uid "./boot/condition.scm" . 273505))
     (push)
     (push.const . #f)
     (push.const . #f)
     (push.const . #())
     (apply.gloc.of make-record-type-descriptor "./boot/condition.scm" . 273422))
   (push)
   (extend . 1)
   (push.const . &i/o-file-protection)
   (push.iloc.0 . 0)
   (call
     (push.iloc.0 . 0)
     (call
       (push.gloc.of &i/o-filename)
       (apply.gloc.of record-type-rcd "./boot/condition.scm" . 274488))
     (push)
     (push.const . #f)
     (apply.gloc.of make-record-constructor-descriptor "./boot/condition.scm" . 274448))
   (push)
   (apply.gloc.of make-record-type "./boot/condition.scm" . 275463))
 (set.gloc.of &i/o-file-protection)
 (ret.const.unspec))
((call
   (call
     (push.gloc.of &i/o-file-protection)
     (apply.gloc.of record-type-rcd "./boot/condition.scm" . 277527))
   (push)
   (apply.gloc.of record-constructor "./boot/condition.scm" . 277507))
 (set.gloc.of make-i/o-file-protection-error)
 (ret.const.unspec))
((call
   (call
     (push.gloc.of &i/o-file-protection)
     (apply.gloc.of record-type-rtd "./boot/condition.scm" . 278585))
   (push)
   (apply.gloc.of condition-predicate "./boot/condition.scm" . 278564))
 (set.gloc.of i/o-file-protection-error?)
 (ret.const.unspec))
((call
   (call
     (push.const . &i/o-file-is-read-only)
     (call
       (push.gloc.of &i/o-file-protection)
       (apply.gloc.of record-type-rtd "./boot/condition.scm" . 281667))
     (push)
     (call
       (touch.gloc.of make-condition-uid)
       (apply.gloc.of make-condition-uid "./boot/condition.scm" . 281706))
     (push)
     (push.const . #f)
     (push.const . #f)
     (push.const . #())
     (apply.gloc.of make-record-type-descriptor "./boot/condition.scm" . 281614))
   (push)
   (extend . 1)
   (push.const . &i/o-file-is-read-only)
   (push.iloc.0 . 0)
   (call
     (push.iloc.0 . 0)
     (call
       (push.gloc.of &i/o-file-protection)
       (apply.gloc.of record-type-rcd "./boot/condition.scm" . 282680))
     (push)
     (push.const . #f)
     (apply.gloc.of make-record-constructor-descriptor "./boot/condition.scm" . 282640))
   (push)
   (apply.gloc.of make-record-type "./boot/condition.scm" . 283655))
 (set.gloc.of &i/o-file-is-read-only)
 (ret.const.unspec))
((call
   (call
     (push.gloc.of &i/o-file-is-read-only)
     (apply.gloc.of record-type-rcd "./boot/condition.scm" . 284734))
   (push)
   (apply.gloc.of record-constructor "./boot/condition.scm" . 284714))
 (set.gloc.of make-i/o-file-is-read-only-error)
 (ret.const.unspec))
((call
   (call
     (push.gloc.of &i/o-file-is-read-only)
     (apply.gloc.of record-type-rtd "./boot/condition.scm" . 285755))
   (push)
   (apply.gloc.of condition-predicate "./boot/condition.scm" . 285734))
 (set.gloc.of i/o-file-is-read-only-error?)
 (ret.const.unspec))
((call
   (call
     (push.const . &i/o-file-already-exists)
     (call
       (push.gloc.of &i/o-filename)
       (apply.gloc.of record-type-rtd "./boot/condition.scm" . 288837))
     (push)
     (call
       (touch.gloc.of make-condition-uid)
       (apply.gloc.of make-condition-uid "./boot/condition.scm" . 288869))
     (push)
     (push.const . #f)
     (push.const . #f)
     (push.const . #())
     (apply.gloc.of make-record-type-descriptor "./boot/condition.scm" . 288782))
   (push)
   (extend . 1)
   (push.const . &i/o-file-already-exists)
   (push.iloc.0 . 0)
   (call
     (push.iloc.0 . 0)
     (call
       (push.gloc.of &i/o-filename)
       (apply.gloc.of record-type-rcd "./boot/condition.scm" . 289848))
     (push)
     (push.const . #f)
     (apply.gloc.of make-record-constructor-descriptor "./boot/condition.scm" . 289808))
   (push)
   (apply.gloc.of make-record-type "./boot/condition.scm" . 290823))
 (set.gloc.of &i/o-file-already-exists)
 (ret.const.unspec))
((call
   (call
     (push.gloc.of &i/o-file-already-exists)
     (apply.gloc.of record-type-rcd "./boot/condition.scm" . 291904))
   (push)
   (apply.gloc.of record-constructor "./boot/condition.scm" . 291884))
 (set.gloc.of make-i/o-file-already-exists-error)
 (ret.const.unspec))
((call
   (call
     (push.gloc.of &i/o-file-already-exists)
     (apply.gloc.of record-type-rtd "./boot/condition.scm" . 292925))
   (push)
   (apply.gloc.of condition-predicate "./boot/condition.scm" . 292904))
 (set.gloc.of i/o-file-already-exists-error?)
 (ret.const.unspec))
((call
   (call
     (push.const . &i/o-file-does-not-exist)
     (call
       (push.gloc.of &i/o-filename)
       (apply.gloc.of record-type-rtd "./boot/condition.scm" . 296005))
     (push)
     (call
       (touch.gloc.of make-condition-uid)
       (apply.gloc.of make-condition-uid "./boot/condition.scm" . 296037))
     (push)
     (push.const . #f)
     (push.const . #f)
     (push.const . #())
     (apply.gloc.of make-record-type-descriptor "./boot/condition.scm" . 295950))
   (push)
   (extend . 1)
   (push.const . &i/o-file-does-not-exist)
   (push.iloc.0 . 0)
   (call
     (push.iloc.0 . 0)
     (call
       (push.gloc.of &i/o-filename)
       (apply.gloc.of record-type-rcd "./boot/condition.scm" . 297016))
     (push)
     (push.const . #f)
     (apply.gloc.of make-record-constructor-descriptor "./boot/condition.scm" . 296976))
   (push)
   (apply.gloc.of make-record-type "./boot/condition.scm" . 297991))
 (set.gloc.of &i/o-file-does-not-exist)
 (ret.const.unspec))
((call
   (call
     (push.gloc.of &i/o-file-does-not-exist)
     (apply.gloc.of record-type-rcd "./boot/condition.scm" . 299072))
   (push)
   (apply.gloc.of record-constructor "./boot/condition.scm" . 299052))
 (set.gloc.of make-i/o-file-does-not-exist-error)
 (ret.const.unspec))
((call
   (call
     (push.gloc.of &i/o-file-does-not-exist)
     (apply.gloc.of record-type-rtd "./boot/condition.scm" . 300093))
   (push)
   (apply.gloc.of condition-predicate "./boot/condition.scm" . 300072))
 (set.gloc.of i/o-file-does-not-exist-error?)
 (ret.const.unspec))
((call
   (call
     (push.const . &i/o-port)
     (call (push.gloc.of &i/o) (apply.gloc.of record-type-rtd "./boot/condition.scm" . 303158))
     (push)
     (call
       (touch.gloc.of make-condition-uid)
       (apply.gloc.of make-condition-uid "./boot/condition.scm" . 303181))
     (push)
     (push.const . #f)
     (push.const . #f)
     (push.const . #((immutable port)))
     (apply.gloc.of make-record-type-descriptor "./boot/condition.scm" . 303118))
   (push)
   (extend . 1)
   (push.const . &i/o-port)
   (push.iloc.0 . 0)
   (call
     (push.iloc.0 . 0)
     (call (push.gloc.of &i/o) (apply.gloc.of record-type-rcd "./boot/condition.scm" . 304184))
     (push)
     (push.const . #f)
     (apply.gloc.of make-record-constructor-descriptor "./boot/condition.scm" . 304144))
   (push)
   (apply.gloc.of make-record-type "./boot/condition.scm" . 305159))
 (set.gloc.of &i/o-port)
 (ret.const.unspec))
((call
   (call (push.gloc.of &i/o-port) (apply.gloc.of record-type-rtd "./boot/condition.scm" . 306217))
   (push)
   (push.const . 0)
   (apply.gloc.of record-accessor "./boot/condition.scm" . 306200))
 (set.gloc.of &i/o-port-port)
 (ret.const.unspec))
((call
   (call (push.gloc.of &i/o-port) (apply.gloc.of record-type-rcd "./boot/condition.scm" . 307249))
   (push)
   (apply.gloc.of record-constructor "./boot/condition.scm" . 307229))
 (set.gloc.of make-i/o-port-error)
 (ret.const.unspec))
((call
   (call (push.gloc.of &i/o-port) (apply.gloc.of record-type-rtd "./boot/condition.scm" . 308270))
   (push)
   (apply.gloc.of condition-predicate "./boot/condition.scm" . 308249))
 (set.gloc.of i/o-port-error?)
 (ret.const.unspec))
((call
   (call (push.gloc.of &i/o-port) (apply.gloc.of record-type-rtd "./boot/condition.scm" . 309292))
   (push)
   (push.gloc.of &i/o-port-port)
   (apply.gloc.of condition-accessor "./boot/condition.scm" . 309272))
 (set.gloc.of i/o-error-port)
 (ret.const.unspec))
((call
   (call
     (push.const . &i/o-decoding)
     (call (push.gloc.of &i/o-port) (apply.gloc.of record-type-rtd "./boot/condition.scm" . 312378))
     (push)
     (call
       (touch.gloc.of make-condition-uid)
       (apply.gloc.of make-condition-uid "./boot/condition.scm" . 312406))
     (push)
     (push.const . #f)
     (push.const . #f)
     (push.const . #())
     (apply.gloc.of make-record-type-descriptor "./boot/condition.scm" . 312334))
   (push)
   (extend . 1)
   (push.const . &i/o-decoding)
   (push.iloc.0 . 0)
   (call
     (push.iloc.0 . 0)
     (call (push.gloc.of &i/o-port) (apply.gloc.of record-type-rcd "./boot/condition.scm" . 313400))
     (push)
     (push.const . #f)
     (apply.gloc.of make-record-constructor-descriptor "./boot/condition.scm" . 313360))
   (push)
   (apply.gloc.of make-record-type "./boot/condition.scm" . 314375))
 (set.gloc.of &i/o-decoding)
 (ret.const.unspec))
((call
   (call
     (push.gloc.of &i/o-decoding)
     (apply.gloc.of record-type-rcd "./boot/condition.scm" . 315445))
   (push)
   (apply.gloc.of record-constructor "./boot/condition.scm" . 315425))
 (set.gloc.of make-i/o-decoding-error)
 (ret.const.unspec))
((call
   (call
     (push.gloc.of &i/o-decoding)
     (apply.gloc.of record-type-rtd "./boot/condition.scm" . 316466))
   (push)
   (apply.gloc.of condition-predicate "./boot/condition.scm" . 316445))
 (set.gloc.of i/o-decoding-error?)
 (ret.const.unspec))
((call
   (call
     (push.const . &i/o-encoding)
     (call (push.gloc.of &i/o-port) (apply.gloc.of record-type-rtd "./boot/condition.scm" . 319546))
     (push)
     (call
       (touch.gloc.of make-condition-uid)
       (apply.gloc.of make-condition-uid "./boot/condition.scm" . 319574))
     (push)
     (push.const . #f)
     (push.const . #f)
     (push.const . #((immutable char)))
     (apply.gloc.of make-record-type-descriptor "./boot/condition.scm" . 319502))
   (push)
   (extend . 1)
   (push.const . &i/o-encoding)
   (push.iloc.0 . 0)
   (call
     (push.iloc.0 . 0)
     (call (push.gloc.of &i/o-port) (apply.gloc.of record-type-rcd "./boot/condition.scm" . 320568))
     (push)
     (push.const . #f)
     (apply.gloc.of make-record-constructor-descriptor "./boot/condition.scm" . 320528))
   (push)
   (apply.gloc.of make-record-type "./boot/condition.scm" . 321543))
 (set.gloc.of &i/o-encoding)
 (ret.const.unspec))
((call
   (call
     (push.gloc.of &i/o-encoding)
     (apply.gloc.of record-type-rtd "./boot/condition.scm" . 322605))
   (push)
   (push.const . 0)
   (apply.gloc.of record-accessor "./boot/condition.scm" . 322588))
 (set.gloc.of &i/o-encoding-char)
 (ret.const.unspec))
((call
   (call
     (push.gloc.of &i/o-encoding)
     (apply.gloc.of record-type-rcd "./boot/condition.scm" . 323637))
   (push)
   (apply.gloc.of record-constructor "./boot/condition.scm" . 323617))
 (set.gloc.of make-i/o-encoding-error)
 (ret.const.unspec))
((call
   (call
     (push.gloc.of &i/o-encoding)
     (apply.gloc.of record-type-rtd "./boot/condition.scm" . 324658))
   (push)
   (apply.gloc.of condition-predicate "./boot/condition.scm" . 324637))
 (set.gloc.of i/o-encoding-error?)
 (ret.const.unspec))
((call
   (call
     (push.gloc.of &i/o-encoding)
     (apply.gloc.of record-type-rtd "./boot/condition.scm" . 325685))
   (push)
   (push.gloc.of &i/o-encoding-char)
   (apply.gloc.of condition-accessor "./boot/condition.scm" . 325665))
 (set.gloc.of i/o-encoding-error-char)
 (ret.const.unspec))
((call
   (call
     (push.const . &no-infinities)
     (call
       (push.gloc.of &implementation-restriction)
       (apply.gloc.of record-type-rtd "./boot/condition.scm" . 328763))
     (push)
     (call
       (touch.gloc.of make-condition-uid)
       (apply.gloc.of make-condition-uid "./boot/condition.scm" . 328809))
     (push)
     (push.const . #f)
     (push.const . #f)
     (push.const . #())
     (apply.gloc.of make-record-type-descriptor "./boot/condition.scm" . 328718))
   (push)
   (extend . 1)
   (push.const . &no-infinities)
   (push.iloc.0 . 0)
   (call
     (push.iloc.0 . 0)
     (call
       (push.gloc.of &implementation-restriction)
       (apply.gloc.of record-type-rcd "./boot/condition.scm" . 329784))
     (push)
     (push.const . #f)
     (apply.gloc.of make-record-constructor-descriptor "./boot/condition.scm" . 329744))
   (push)
   (apply.gloc.of make-record-type "./boot/condition.scm" . 330759))
 (set.gloc.of &no-infinities)
 (ret.const.unspec))
((call
   (call
     (push.gloc.of &no-infinities)
     (apply.gloc.of record-type-rcd "./boot/condition.scm" . 331834))
   (push)
   (apply.gloc.of record-constructor "./boot/condition.scm" . 331814))
 (set.gloc.of make-no-infinities-violation)
 (ret.const.unspec))
((call
   (call
     (push.gloc.of &no-infinities)
     (apply.gloc.of record-type-rtd "./boot/condition.scm" . 332855))
   (push)
   (apply.gloc.of condition-predicate "./boot/condition.scm" . 332834))
 (set.gloc.of no-infinities-violation?)
 (ret.const.unspec))
((call
   (call
     (push.const . &no-nans)
     (call
       (push.gloc.of &implementation-restriction)
       (apply.gloc.of record-type-rtd "./boot/condition.scm" . 335925))
     (push)
     (call
       (touch.gloc.of make-condition-uid)
       (apply.gloc.of make-condition-uid "./boot/condition.scm" . 335971))
     (push)
     (push.const . #f)
     (push.const . #f)
     (push.const . #())
     (apply.gloc.of make-record-type-descriptor "./boot/condition.scm" . 335886))
   (push)
   (extend . 1)
   (push.const . &no-nans)
   (push.iloc.0 . 0)
   (call
     (push.iloc.0 . 0)
     (call
       (push.gloc.of &implementation-restriction)
       (apply.gloc.of record-type-rcd "./boot/condition.scm" . 336952))
     (push)
     (push.const . #f)
     (apply.gloc.of make-record-constructor-descriptor "./boot/condition.scm" . 336912))
   (push)
   (apply.gloc.of make-record-type "./boot/condition.scm" . 337927))
 (set.gloc.of &no-nans)
 (ret.const.unspec))
((call
   (call (push.gloc.of &no-nans) (apply.gloc.of record-type-rcd "./boot/condition.scm" . 338996))
   (push)
   (apply.gloc.of record-constructor "./boot/condition.scm" . 338976))
 (set.gloc.of make-no-nans-violation)
 (ret.const.unspec))
((call
   (call (push.gloc.of &no-nans) (apply.gloc.of record-type-rtd "./boot/condition.scm" . 340017))
   (push)
   (apply.gloc.of condition-predicate "./boot/condition.scm" . 339996))
 (set.gloc.of no-nans-violation?)
 (ret.const.unspec))

;
((call (push.const . 100) (apply.gloc.of make-parameter "./boot/pp.scm" . 62498))
 (set.gloc.of pretty-print-line-length)
 (ret.const.unspec))
((call (push.const . 0) (apply.gloc.of make-parameter "./boot/pp.scm" . 63525))
 (set.gloc.of pretty-print-initial-indent)
 (ret.const.unspec))
((call (push.const . #f) (apply.gloc.of make-parameter "./boot/pp.scm" . 64548))
 (set.gloc.of pretty-print-maximum-lines)
 (ret.const.unspec))
((call (push.const . #f) (apply.gloc.of make-parameter "./boot/pp.scm" . 65572))
 (set.gloc.of pretty-print-unwrap-syntax)
 (ret.const.unspec))
((close
   (1 0 . parse)
   (iloc.0 . 0)
   (if.pair?
     (call
       (iloc.0 . 0)
       (if.not.pair?.ret.const . #f)
       (cdr.iloc (0 . 0) (cdr |obj`3644*|))
       (ret.pair? (pair? (cdr |obj`3644*|))))
     (push)
     (extend . 1)
     (call
       (iloc.0 . 0)
       (if.false.ret)
       (cddr.iloc (1 . 0) (cddr |obj`3644*|))
       (ret.null? (null? (cddr |obj`3644*|))))
     (push)
     (extend . 1)
     (call
       (iloc.1 . 0)
       (if.false.ret)
       (cddr.iloc (2 . 0) (cddr |obj`3644*|))
       (ret.pair? (pair? (cddr |obj`3644*|))))
     (push)
     (extend . 1)
     (call
       (iloc.1 . 0)
       (if.false.ret)
       (push.car.iloc (3 . 0) (car |obj`3644*|))
       (const . quote)
       (ret.eq? (eq? (car |obj`3644*|) 'quote)))
     (if.true
       (push.const . "'")
       (push.const . |.&NEST|)
       (push.const . 1)
       (call
         (touch.gloc.of |parse`3569*|)
         (push.cadr.iloc (3 . 0) (cadr |obj`3644*|))
         (apply.gloc.of |parse`3569*| (|parse`3569*| (cadr |obj`3644*|))))
       (push)
       (push.subr.gloc.of |.list| 3 (|.list| '|.&NEST| 1 (|parse`3569*| (cadr |obj`3644*|))))
       (ret.subr.gloc.of
         |.list|
         (|.list| "'" (|.list| '|.&NEST| 1 (|parse`3569*| (cadr |obj`3644*|))))))
     (call
       (iloc.1 . 0)
       (if.false.ret)
       (push.car.iloc (3 . 0) (car |obj`3644*|))
       (const . unquote)
       (ret.eq? (eq? (car |obj`3644*|) 'unquote)))
     (if.true
       (push.const . ",")
       (push.const . |.&NEST|)
       (push.const . 1)
       (call
         (touch.gloc.of |parse`3569*|)
         (push.cadr.iloc (3 . 0) (cadr |obj`3644*|))
         (apply.gloc.of |parse`3569*| (|parse`3569*| (cadr |obj`3644*|))))
       (push)
       (push.subr.gloc.of |.list| 3 (|.list| '|.&NEST| 1 (|parse`3569*| (cadr |obj`3644*|))))
       (ret.subr.gloc.of
         |.list|
         (|.list| "," (|.list| '|.&NEST| 1 (|parse`3569*| (cadr |obj`3644*|))))))
     (call
       (iloc.1 . 0)
       (if.false.ret)
       (push.car.iloc (3 . 0) (car |obj`3644*|))
       (const . quasiquote)
       (ret.eq? (eq? (car |obj`3644*|) 'quasiquote)))
     (if.true
       (push.const . "`")
       (push.const . |.&NEST|)
       (push.const . 1)
       (call
         (touch.gloc.of |parse`3569*|)
         (push.cadr.iloc (3 . 0) (cadr |obj`3644*|))
         (apply.gloc.of |parse`3569*| (|parse`3569*| (cadr |obj`3644*|))))
       (push)
       (push.subr.gloc.of |.list| 3 (|.list| '|.&NEST| 1 (|parse`3569*| (cadr |obj`3644*|))))
       (ret.subr.gloc.of
         |.list|
         (|.list| "`" (|.list| '|.&NEST| 1 (|parse`3569*| (cadr |obj`3644*|))))))
     (call
       (iloc.1 . 0)
       (if.false.ret)
       (push.car.iloc (3 . 0) (car |obj`3644*|))
       (const . unquote-splicing)
       (ret.eq? (eq? (car |obj`3644*|) 'unquote-splicing)))
     (if.true
       (push.const . ",@")
       (push.const . |.&NEST|)
       (push.const . 2)
       (call
         (touch.gloc.of |parse`3569*|)
         (push.cadr.iloc (3 . 0) (cadr |obj`3644*|))
         (apply.gloc.of |parse`3569*| (|parse`3569*| (cadr |obj`3644*|))))
       (push)
       (push.subr.gloc.of |.list| 3 (|.list| '|.&NEST| 2 (|parse`3569*| (cadr |obj`3644*|))))
       (ret.subr.gloc.of
         |.list|
         (|.list| ",@" (|.list| '|.&NEST| 2 (|parse`3569*| (cadr |obj`3644*|))))))
     (call
       (iloc.0 . 0)
       (if.false.ret)
       (push.car.iloc (3 . 0) (car |obj`3644*|))
       (const . let)
       (if.not.eq?.ret.const . #f)
       (cadr.iloc (3 . 0) (cadr |obj`3644*|))
       (if.not.symbol?.ret.const . #f)
       (push.iloc 3 . 0)
       (subr.gloc.of cdddr 1 (cdddr |obj`3644*|))
       (ret.pair? (pair? (cdddr |obj`3644*|))))
     (if.true
       (push.iloc 3 . 0)
       (push.subr.gloc.of cdddr 1 (cdddr |obj`3644*|))
       (push.iloc 3 . 0)
       (push.subr.gloc.of caddr 1 (caddr |obj`3644*|))
       (push.cadr.iloc (3 . 0) (cadr |obj`3644*|))
       (extend . 3)
       (push.const . |.&GROUP|)
       (push.const . "(let ~a ")
       (push.iloc.0 . 2)
       (push.subr.gloc.of format 2 (format "(let ~a " |e1`3664*|))
       (push.const . |.&NEST|)
       (push.const . 2)
       (push.const . |.&NEST|)
       (call
         (touch.gloc.of |symbol->length`3569*|)
         (push.iloc.0 . 2)
         (apply.gloc.of |symbol->length`3569*| (|symbol->length`3569*| |e1`3664*|)))
       (push)
       (push.const . 4)
       (push.subr.gloc.of + 2 (+ (|symbol->length`3569*| |e1`3664*|) 4))
       (call
         (touch.gloc.of |parse`3569*|)
         (push.iloc.0 . 1)
         (apply.gloc.of |parse`3569*| (|parse`3569*| |e2`3664*|)))
       (push)
       (push.subr.gloc.of
         |.list|
         3
         (|.list| '|.&NEST| (+ (|symbol->length`3569*| |e1`3664*|) 4) (|parse`3569*| |e2`3664*|)))
       (push.const . #\;)
       (call
         (touch.gloc.of |parse-list`3569*|)
         (push.iloc.0 . 0)
         (apply.gloc.of |parse-list`3569*| (|parse-list`3569*| |e3`3664*|)))
       (push)
       (push.const ")")
       (push.subr.gloc.of |.append| 2 (|.append| (|parse-list`3569*| |e3`3664*|) '(")")))
       (push.subr.gloc.of
         |.cons*|
         5
         (|.cons*|
           '|.&NEST|
           2
           (|.list| '|.&NEST| (+ (|symbol->length`3569*| |e1`3664*|) 4) (|parse`3569*| |e2`3664*|))
           #\;
           (|.append| (|parse-list`3569*| |e3`3664*|) '(")"))))
       (ret.subr.gloc.of
         |.list|
         (|.list|
           '|.&GROUP|
           (format "(let ~a " |e1`3664*|)
           (|.cons*|
             '|.&NEST|
             2
             (|.list|
               '|.&NEST|
               (+ (|symbol->length`3569*| |e1`3664*|) 4)
               (|parse`3569*| |e2`3664*|))
             #\;
             (|.append| (|parse-list`3569*| |e3`3664*|) '(")"))))))
     (call
       (iloc 2 . 0)
       (if.false.ret)
       (call
         (touch.gloc.of |indent-type1?`3569*|)
         (push.car.iloc (3 . 0) (car |obj`3644*|))
         (apply.gloc.of |indent-type1?`3569*| (|indent-type1?`3569*| (car |obj`3644*|))))
       (if.false.ret)
       (cddr.iloc (3 . 0) (cddr |obj`3644*|))
       (ret.pair? (pair? (cddr |obj`3644*|))))
     (if.true
       (push.cddr.iloc (3 . 0) (cddr |obj`3644*|))
       (push.cadr.iloc (3 . 0) (cadr |obj`3644*|))
       (push.car.iloc (3 . 0) (car |obj`3644*|))
       (extend . 3)
       (push.const . |.&GROUP|)
       (push.const . "(~a ")
       (push.iloc.0 . 2)
       (push.subr.gloc.of format 2 (format "(~a " |e1`3666*|))
       (push.const . |.&NEST|)
       (push.const . 2)
       (push.const . |.&NEST|)
       (call
         (touch.gloc.of |symbol->length`3569*|)
         (push.iloc.0 . 2)
         (apply.gloc.of |symbol->length`3569*| (|symbol->length`3569*| |e1`3666*|)))
       (push)
       (call
         (touch.gloc.of |parse`3569*|)
         (push.iloc.0 . 1)
         (apply.gloc.of |parse`3569*| (|parse`3569*| |e2`3666*|)))
       (push)
       (push.subr.gloc.of
         |.list|
         3
         (|.list| '|.&NEST| (|symbol->length`3569*| |e1`3666*|) (|parse`3569*| |e2`3666*|)))
       (push.const . #\;)
       (call
         (touch.gloc.of |parse-list`3569*|)
         (push.iloc.0 . 0)
         (apply.gloc.of |parse-list`3569*| (|parse-list`3569*| |e3`3666*|)))
       (push)
       (push.const ")")
       (push.subr.gloc.of |.append| 2 (|.append| (|parse-list`3569*| |e3`3666*|) '(")")))
       (push.subr.gloc.of
         |.cons*|
         5
         (|.cons*|
           '|.&NEST|
           2
           (|.list| '|.&NEST| (|symbol->length`3569*| |e1`3666*|) (|parse`3569*| |e2`3666*|))
           #\;
           (|.append| (|parse-list`3569*| |e3`3666*|) '(")"))))
       (ret.subr.gloc.of
         |.list|
         (|.list|
           '|.&GROUP|
           (format "(~a " |e1`3666*|)
           (|.cons*|
             '|.&NEST|
             2
             (|.list| '|.&NEST| (|symbol->length`3569*| |e1`3666*|) (|parse`3569*| |e2`3666*|))
             #\;
             (|.append| (|parse-list`3569*| |e3`3666*|) '(")"))))))
     (call
       (iloc 2 . 0)
       (if.false.ret)
       (call
         (touch.gloc.of |indent-type2?`3569*|)
         (push.car.iloc (3 . 0) (car |obj`3644*|))
         (apply.gloc.of |indent-type2?`3569*| (|indent-type2?`3569*| (car |obj`3644*|))))
       (if.false.ret)
       (cddr.iloc (3 . 0) (cddr |obj`3644*|))
       (ret.pair? (pair? (cddr |obj`3644*|))))
     (if.true
       (push.cddr.iloc (3 . 0) (cddr |obj`3644*|))
       (push.cadr.iloc (3 . 0) (cadr |obj`3644*|))
       (push.car.iloc (3 . 0) (car |obj`3644*|))
       (extend . 3)
       (push.const . |.&GROUP|)
       (push.const . "(~a ")
       (push.iloc.0 . 2)
       (push.subr.gloc.of format 2 (format "(~a " |e1`3668*|))
       (push.const . |.&NEST|)
       (call
         (touch.gloc.of |symbol->length`3569*|)
         (push.iloc.0 . 2)
         (apply.gloc.of |symbol->length`3569*| (|symbol->length`3569*| |e1`3668*|)))
       (push)
       (push.const . 2)
       (push.subr.gloc.of + 2 (+ (|symbol->length`3569*| |e1`3668*|) 2))
       (call
         (touch.gloc.of |parse`3569*|)
         (push.iloc.0 . 1)
         (apply.gloc.of |parse`3569*| (|parse`3569*| |e2`3668*|)))
       (push)
       (push.const . #\;)
       (call
         (touch.gloc.of |parse-list`3569*|)
         (push.iloc.0 . 0)
         (apply.gloc.of |parse-list`3569*| (|parse-list`3569*| |e3`3668*|)))
       (push)
       (push.subr.gloc.of
         |.cons*|
         5
         (|.cons*|
           '|.&NEST|
           (+ (|symbol->length`3569*| |e1`3668*|) 2)
           (|parse`3569*| |e2`3668*|)
           #\;
           (|parse-list`3569*| |e3`3668*|)))
       (push.const ")")
       (ret.subr.gloc.of
         |.cons*|
         (|.cons*|
           '|.&GROUP|
           (format "(~a " |e1`3668*|)
           (|.cons*|
             '|.&NEST|
             (+ (|symbol->length`3569*| |e1`3668*|) 2)
             (|parse`3569*| |e2`3668*|)
             #\;
             (|parse-list`3569*| |e3`3668*|))
           '(")"))))
     (call
       (iloc.0 . 0)
       (if.false.ret)
       (call
         (touch.gloc.of |indent-type3?`3569*|)
         (push.car.iloc (3 . 0) (car |obj`3644*|))
         (apply.gloc.of |indent-type3?`3569*| (|indent-type3?`3569*| (car |obj`3644*|))))
       (if.false.ret)
       (push.iloc 3 . 0)
       (subr.gloc.of cdddr 1 (cdddr |obj`3644*|))
       (ret.pair? (pair? (cdddr |obj`3644*|))))
     (if.true
       (push.iloc 3 . 0)
       (push.subr.gloc.of cdddr 1 (cdddr |obj`3644*|))
       (push.iloc 3 . 0)
       (push.subr.gloc.of caddr 1 (caddr |obj`3644*|))
       (push.cadr.iloc (3 . 0) (cadr |obj`3644*|))
       (extend . 3)
       (push.const . |.&GROUP|)
       (push.const . "(~a ")
       (push.car.iloc (4 . 0) (car |obj`3644*|))
       (push.subr.gloc.of format 2 (format "(~a " (car |obj`3644*|)))
       (push.const . |.&NEST|)
       (push.const . 2)
       (push.const . |.&NEST|)
       (push.const . 2)
       (call
         (touch.gloc.of |parse`3569*|)
         (push.iloc.0 . 2)
         (apply.gloc.of |parse`3569*| (|parse`3569*| |e2`3670*|)))
       (push)
       (push.const . #\;)
       (call
         (touch.gloc.of |parse`3569*|)
         (push.iloc.0 . 1)
         (apply.gloc.of |parse`3569*| (|parse`3569*| |e3`3670*|)))
       (push)
       (push.subr.gloc.of
         |.list|
         5
         (|.list| '|.&NEST| 2 (|parse`3569*| |e2`3670*|) #\; (|parse`3569*| |e3`3670*|)))
       (push.const . #\;)
       (call
         (touch.gloc.of |parse-list`3569*|)
         (push.iloc.0 . 0)
         (apply.gloc.of |parse-list`3569*| (|parse-list`3569*| |e4`3670*|)))
       (push)
       (push.const ")")
       (push.subr.gloc.of |.append| 2 (|.append| (|parse-list`3569*| |e4`3670*|) '(")")))
       (push.subr.gloc.of
         |.cons*|
         5
         (|.cons*|
           '|.&NEST|
           2
           (|.list| '|.&NEST| 2 (|parse`3569*| |e2`3670*|) #\; (|parse`3569*| |e3`3670*|))
           #\;
           (|.append| (|parse-list`3569*| |e4`3670*|) '(")"))))
       (ret.subr.gloc.of
         |.list|
         (|.list|
           '|.&GROUP|
           (format "(~a " (car |obj`3644*|))
           (|.cons*|
             '|.&NEST|
             2
             (|.list| '|.&NEST| 2 (|parse`3569*| |e2`3670*|) #\; (|parse`3569*| |e3`3670*|))
             #\;
             (|.append| (|parse-list`3569*| |e4`3670*|) '(")"))))))
     (call
       (iloc 3 . 0)
       (if.not.pair?.ret.const . #f)
       (push.car.iloc (3 . 0) (car |obj`3644*|))
       (ret.subr.gloc.of symbol? (symbol? (car |obj`3644*|))))
     (if.true
       (push.const . |.&GROUP|)
       (push.const . "(")
       (push.const . |.&NEST|)
       (push.const . 2)
       (call
         (touch.gloc.of |parse-list`3569*|)
         (push.iloc 3 . 0)
         (apply.gloc.of |parse-list`3569*| (|parse-list`3569*| |obj`3644*|)))
       (push)
       (push.subr.gloc.of |.cons*| 3 (|.cons*| '|.&NEST| 2 (|parse-list`3569*| |obj`3644*|)))
       (push.const ")")
       (ret.subr.gloc.of
         |.cons*|
         (|.cons*| '|.&GROUP| "(" (|.cons*| '|.&NEST| 2 (|parse-list`3569*| |obj`3644*|)) '(")"))))
     (push.const . |.&GROUP|)
     (push.const . "(")
     (push.const . |.&NEST|)
     (push.const . 1)
     (call
       (touch.gloc.of |parse-list`3569*|)
       (push.iloc 3 . 0)
       (apply.gloc.of |parse-list`3569*| (|parse-list`3569*| |obj`3644*|)))
     (push)
     (push.subr.gloc.of |.cons*| 3 (|.cons*| '|.&NEST| 1 (|parse-list`3569*| |obj`3644*|)))
     (push.const ")")
     (ret.subr.gloc.of
       |.cons*|
       (|.cons*| '|.&GROUP| "(" (|.cons*| '|.&NEST| 1 (|parse-list`3569*| |obj`3644*|)) '(")"))))
   (push.iloc.0 . 0)
   (subr.gloc.of vector? 1 "./boot/pp.scm" . 184338)
   (if.true
     (push.iloc.0 . 0)
     (push.subr.gloc.of vector-length 1 "./boot/pp.scm" . 185369)
     (push.const . 0)
     (subr.gloc.of = 2 "./boot/pp.scm" . 185366)
     (if.true.ret.const . "#()")
     (push.const . |.&GROUP|)
     (push.const . "#(")
     (push.const . |.&NEST|)
     (push.const . 2)
     (call
       (touch.gloc.of |parse-list`3569*|)
       (push.iloc.0 . 0)
       (push.subr.gloc.of vector->list 1 "./boot/pp.scm" . 187453)
       (apply.gloc.of |parse-list`3569*| "./boot/pp.scm" . 187441))
     (push)
     (push.subr.gloc.of |.cons*| 3 "./boot/pp.scm" . 187441)
     (push.const ")")
     (ret.subr.gloc.of |.cons*| "./boot/pp.scm" . 185362))
   (push.iloc.0 . 0)
   (subr.gloc.of tuple? 1 "./boot/pp.scm" . 188434)
   (if.true
     (push.const . "~w")
     (push.iloc.0 . 0)
     (ret.subr.gloc.of format "./boot/pp.scm" . 189458))
   (call (apply.gloc.of pretty-print-unwrap-syntax "./boot/pp.scm" . 190482))
   (if.true
     (push.const . "~u")
     (push.iloc.0 . 0)
     (ret.subr.gloc.of format "./boot/pp.scm" . 191506))
   (push.const . "~s")
   (push.iloc.0 . 0)
   (ret.subr.gloc.of format "./boot/pp.scm" . 193554))
 (set.gloc.of |parse`3569*|)
 (close
   (1 0 . symbol->length)
   (push.iloc.0 . 0)
   (push.subr.gloc.of symbol->string 1 "./boot/pp.scm" . 134170)
   (ret.subr.gloc.of string-length "./boot/pp.scm" . 134155))
 (set.gloc.of |symbol->length`3569*|)
 (close
   (1 0 . indent-type1?)
   (push.iloc.0 . 0)
   (push.const
     library
     define
     define-syntax
     define-macro
     define-inline
     define-constant
     syntax-rules
     syntax-case
     with-syntax
     lambda
     let-syntax
     letrec-syntax
     let
     letrec
     let*
     letrec
     letrec*
     let-values
     let*-values
     destructuring-match
     parameterize)
   (ret.subr.gloc.of memq "./boot/pp.scm" . 74763))
 (set.gloc.of |indent-type1?`3569*|)
 (close
   (2 0 . fits?)
   (>=n.iloc (0 . 0) 0 "./boot/pp.scm" . 91152)
   (if.false.ret)
   (iloc.0 . 1)
   (if.null?.ret.const . #t)
   (call
     (iloc.0 . 1)
     (if.not.pair?.ret.const . #f)
     (car.iloc (0 . 1) (car |lst`3576*|))
     (if.not.pair?.ret.const . #f)
     (push.iloc.0 . 1)
     (subr.gloc.of cdar 1 (cdar |lst`3576*|))
     (if.not.pair?.ret.const . #f)
     (push.iloc.0 . 1)
     (subr.gloc.of cddar 1 (cddar |lst`3576*|))
     (ret.pair? (pair? (cddar |lst`3576*|))))
   (push)
   (extend . 1)
   (call
     (iloc.0 . 0)
     (if.false.ret)
     (push.iloc.1 . 1)
     (subr.gloc.of cdddar 1 (cdddar |lst`3576*|))
     (ret.null? (null? (cdddar |lst`3576*|))))
   (push)
   (extend . 1)
   (call
     (iloc.1 . 0)
     (if.false.ret)
     (push.iloc 2 . 1)
     (subr.gloc.of caddar 1 (caddar |lst`3576*|))
     (ret.pair? (pair? (caddar |lst`3576*|))))
   (push)
   (extend . 1)
   (call
     (iloc.0 . 0)
     (if.false.ret)
     (push.iloc 3 . 1)
     (subr.gloc.of cdddar 1 (cdddar |lst`3576*|))
     (ret.null? (null? (cdddar |lst`3576*|))))
   (push)
   (extend . 1)
   (call
     (iloc 3 . 0)
     (if.false.ret)
     (push.iloc 4 . 1)
     (subr.gloc.of caddar 1 (caddar |lst`3576*|))
     (if.not.null?.ret.const . #f)
     (push.iloc 4 . 1)
     (subr.gloc.of cdddar 1 (cdddar |lst`3576*|))
     (ret.null? (null? (cdddar |lst`3576*|))))
   (if.true
     (touch.gloc.of |fits?`3569*|)
     (push.iloc 4 . 0)
     (push.cdr.iloc (4 . 1) (cdr |lst`3576*|))
     (apply.gloc.of |fits?`3569*| (|fits?`3569*| |w`3576*| (cdr |lst`3576*|))))
   (call
     (iloc 2 . 0)
     (if.false.ret)
     (push.iloc 4 . 1)
     (push.subr.gloc.of cadar 1 (cadar |lst`3576*|))
     (const . |.&BREAK|)
     (if.not.eq?.ret.const . #f)
     (push.iloc 4 . 1)
     (push.subr.gloc.of caddar 1 (caddar |lst`3576*|))
     (const . #\;)
     (ret.eq? (eq? (caddar |lst`3576*|) #\;)))
   (if.true.ret.const . #t)
   (call
     (iloc 2 . 0)
     (if.false.ret)
     (push.iloc 4 . 1)
     (push.subr.gloc.of cadar 1 (cadar |lst`3576*|))
     (const . |.&FLAT|)
     (if.not.eq?.ret.const . #f)
     (push.iloc 4 . 1)
     (push.subr.gloc.of caddar 1 (caddar |lst`3576*|))
     (const . #\;)
     (ret.eq? (eq? (caddar |lst`3576*|) #\;)))
   (if.true
     (touch.gloc.of |fits?`3569*|)
     (push.n+.iloc (4 . 0) -1 (- |w`3576*| 1))
     (push.cdr.iloc (4 . 1) (cdr |lst`3576*|))
     (apply.gloc.of |fits?`3569*| (|fits?`3569*| (- |w`3576*| 1) (cdr |lst`3576*|))))
   (call
     (iloc 2 . 0)
     (if.false.ret)
     (push.iloc 4 . 1)
     (push.subr.gloc.of caddar 1 (caddar |lst`3576*|))
     (ret.subr.gloc.of string? (string? (caddar |lst`3576*|))))
   (if.true
     (touch.gloc.of |fits?`3569*|)
     (push.iloc 4 . 0)
     (push.iloc 4 . 1)
     (push.subr.gloc.of caddar 1 (caddar |lst`3576*|))
     (push.subr.gloc.of string-length 1 (string-length (caddar |lst`3576*|)))
     (push.subr.gloc.of - 2 (- |w`3576*| (string-length (caddar |lst`3576*|))))
     (push.cdr.iloc (4 . 1) (cdr |lst`3576*|))
     (apply.gloc.of
       |fits?`3569*|
       (|fits?`3569*| (- |w`3576*| (string-length (caddar |lst`3576*|))) (cdr |lst`3576*|))))
   (call
     (iloc.0 . 0)
     (if.false.ret)
     (push.iloc 4 . 1)
     (push.subr.gloc.of caddar 1 (caddar |lst`3576*|))
     (push.subr.gloc.of car 1 (car (caddar |lst`3576*|)))
     (const . |.&GROUP|)
     (ret.eq? (eq? (car (caddar |lst`3576*|)) '|.&GROUP|)))
   (if.true
     (touch.gloc.of |fits?`3569*|)
     (push.iloc 4 . 0)
     (push.iloc 4 . 1)
     (push.subr.gloc.of caar 1 (caar |lst`3576*|))
     (push.const . |.&FLAT|)
     (push.iloc 4 . 1)
     (push.subr.gloc.of caddar 1 (caddar |lst`3576*|))
     (push.subr.gloc.of cdr 1 (cdr (caddar |lst`3576*|)))
     (push.subr.gloc.of |.list| 3 (|.list| (caar |lst`3576*|) '|.&FLAT| (cdr (caddar |lst`3576*|))))
     (cdr.iloc (4 . 1) (cdr |lst`3576*|))
     (push.cons)
     (apply.gloc.of
       |fits?`3569*|
       (|fits?`3569*|
         |w`3576*|
         (|.cons|
           (|.list| (caar |lst`3576*|) '|.&FLAT| (cdr (caddar |lst`3576*|)))
           (cdr |lst`3576*|)))))
   (call
     (iloc.1 . 0)
     (if.false.ret)
     (push.iloc 4 . 1)
     (push.subr.gloc.of caddar 1 (caddar |lst`3576*|))
     (subr.gloc.of cdr 1 (cdr (caddar |lst`3576*|)))
     (if.not.pair?.ret.const . #f)
     (push.iloc 4 . 1)
     (subr.gloc.of cdddar 1 (cdddar |lst`3576*|))
     (if.not.null?.ret.const . #f)
     (push.iloc 4 . 1)
     (push.subr.gloc.of caddar 1 (caddar |lst`3576*|))
     (push.subr.gloc.of car 1 (car (caddar |lst`3576*|)))
     (const . |.&NEST|)
     (ret.eq? (eq? (car (caddar |lst`3576*|)) '|.&NEST|)))
   (if.true
     (touch.gloc.of |fits?`3569*|)
     (push.iloc 4 . 0)
     (push.iloc 4 . 1)
     (push.subr.gloc.of caar 1 (caar |lst`3576*|))
     (push.iloc 4 . 1)
     (push.subr.gloc.of caddar 1 (caddar |lst`3576*|))
     (push.subr.gloc.of cadr 1 (cadr (caddar |lst`3576*|)))
     (push.subr.gloc.of + 2 (+ (caar |lst`3576*|) (cadr (caddar |lst`3576*|))))
     (push.iloc 4 . 1)
     (push.subr.gloc.of cadar 1 (cadar |lst`3576*|))
     (push.iloc 4 . 1)
     (push.subr.gloc.of caddar 1 (caddar |lst`3576*|))
     (push.subr.gloc.of cddr 1 (cddr (caddar |lst`3576*|)))
     (push.subr.gloc.of
       |.list|
       3
       (|.list|
         (+ (caar |lst`3576*|) (cadr (caddar |lst`3576*|)))
         (cadar |lst`3576*|)
         (cddr (caddar |lst`3576*|))))
     (cdr.iloc (4 . 1) (cdr |lst`3576*|))
     (push.cons)
     (apply.gloc.of
       |fits?`3569*|
       (|fits?`3569*|
         |w`3576*|
         (|.cons|
           (|.list|
             (+ (caar |lst`3576*|) (cadr (caddar |lst`3576*|)))
             (cadar |lst`3576*|)
             (cddr (caddar |lst`3576*|)))
           (cdr |lst`3576*|)))))
   (iloc.0 . 0)
   (if.false.ret)
   (push.iloc 4 . 1)
   (push.subr.gloc.of cadar 1 (cadar |lst`3576*|))
   (push.iloc 4 . 1)
   (push.subr.gloc.of caar 1 (caar |lst`3576*|))
   (extend . 2)
   (touch.gloc.of |fits?`3569*|)
   (push.iloc 5 . 0)
   (push.iloc.0 . 1)
   (push.iloc.0 . 0)
   (push.iloc 5 . 1)
   (push.subr.gloc.of caddar 1 (caddar |lst`3576*|))
   (push.subr.gloc.of car 1 (car (caddar |lst`3576*|)))
   (push.subr.gloc.of |.list| 3 (|.list| |i`3602*| |m`3602*| (car (caddar |lst`3576*|))))
   (push.iloc.0 . 1)
   (push.iloc.0 . 0)
   (push.iloc 5 . 1)
   (push.subr.gloc.of caddar 1 (caddar |lst`3576*|))
   (push.subr.gloc.of cdr 1 (cdr (caddar |lst`3576*|)))
   (push.subr.gloc.of |.list| 3 (|.list| |i`3602*| |m`3602*| (cdr (caddar |lst`3576*|))))
   (push.cdr.iloc (5 . 1) (cdr |lst`3576*|))
   (push.subr.gloc.of
     |.cons*|
     3
     (|.cons*|
       (|.list| |i`3602*| |m`3602*| (car (caddar |lst`3576*|)))
       (|.list| |i`3602*| |m`3602*| (cdr (caddar |lst`3576*|)))
       (cdr |lst`3576*|)))
   (apply.gloc.of
     |fits?`3569*|
     (|fits?`3569*|
       |w`3576*|
       (|.cons*|
         (|.list| |i`3602*| |m`3602*| (car (caddar |lst`3576*|)))
         (|.list| |i`3602*| |m`3602*| (cdr (caddar |lst`3576*|)))
         (cdr |lst`3576*|)))))
 (set.gloc.of |fits?`3569*|)
 (close
   (1 0 . indent-type3?)
   (push.iloc.0 . 0)
   (push.const do let-optionals)
   (ret.subr.gloc.of memq "./boot/pp.scm" . 87051))
 (set.gloc.of |indent-type3?`3569*|)
 (close
   (1 0 . parse-list)
   (iloc.0 . 0)
   (if.null?.ret.const)
   (cdr.iloc (0 . 0) "./boot/pp.scm" . 139289)
   (if.null?
     (call
       (touch.gloc.of |parse`3569*|)
       (push.car.iloc (0 . 0) "./boot/pp.scm" . 140319)
       (apply.gloc.of |parse`3569*| "./boot/pp.scm" . 140312))
     (push)
     (ret.subr.gloc.of list "./boot/pp.scm" . 140306))
   (cdr.iloc (0 . 0) "./boot/pp.scm" . 141337)
   (if.pair?
     (call
       (touch.gloc.of |parse`3569*|)
       (push.car.iloc (0 . 0) "./boot/pp.scm" . 142368)
       (apply.gloc.of |parse`3569*| "./boot/pp.scm" . 142361))
     (push)
     (push.const . #\;)
     (call
       (touch.gloc.of |parse-list`3569*|)
       (push.cdr.iloc (0 . 0) "./boot/pp.scm" . 142395)
       (apply.gloc.of |parse-list`3569*| "./boot/pp.scm" . 142383))
     (push)
     (ret.subr.gloc.of cons* "./boot/pp.scm" . 142354))
   (call
     (touch.gloc.of |parse`3569*|)
     (push.car.iloc (0 . 0) "./boot/pp.scm" . 144415)
     (apply.gloc.of |parse`3569*| "./boot/pp.scm" . 144408))
   (push)
   (push.const . #\;)
   (push.const . ".")
   (push.const . #\;)
   (call
     (touch.gloc.of |parse`3569*|)
     (push.cdr.iloc (0 . 0) "./boot/pp.scm" . 144445)
     (apply.gloc.of |parse`3569*| "./boot/pp.scm" . 144438))
   (push)
   (ret.subr.gloc.of list "./boot/pp.scm" . 144402))
 (set.gloc.of |parse-list`3569*|)
 (close
   (1 0 . indent-type2?)
   (push.iloc.0 . 0)
   (push.const if cond case and or set! import export cons map for-each exists for-all)
   (ret.subr.gloc.of memq "./boot/pp.scm" . 82955))
 (set.gloc.of |indent-type2?`3569*|)
 (close
   (1 1 . pretty-print)
   (call
     (iloc.0 . 1)
     (if.pair? (push.iloc.0 . 1) (ret.subr.gloc.of car "./boot/pp.scm" . 69666))
     (ret.subr.gloc.of current-output-port "./boot/pp.scm" . 69677))
   (push)
   (call
     (call (apply.gloc.of pretty-print-maximum-lines "./boot/pp.scm" . 70686))
     (if.false.ret)
     (call (apply.gloc.of pretty-print-maximum-lines "./boot/pp.scm" . 70718))
     (push)
     (push.const . 1)
     (ret.subr.gloc.of - "./boot/pp.scm" . 70715))
   (push)
   (extend . 2)
   (extend.enclose
     (3 0 . print)
     (iloc.0 . 2)
     (if.null?.ret.const . #t)
     (push.gloc.of string?)
     (extend . 1)
     (call
       (iloc.1 . 2)
       (if.not.pair?.ret.const . #f)
       (car.iloc (1 . 2) (car |lst`3604*|))
       (if.not.pair?.ret.const . #f)
       (push.iloc.1 . 2)
       (subr.gloc.of cdar 1 (cdar |lst`3604*|))
       (if.not.pair?.ret.const . #f)
       (push.iloc.1 . 2)
       (subr.gloc.of cddar 1 (cddar |lst`3604*|))
       (ret.pair? (pair? (cddar |lst`3604*|))))
     (push)
     (extend . 1)
     (call
       (iloc.0 . 0)
       (if.false.ret)
       (push.iloc 2 . 2)
       (subr.gloc.of cdddar 1 (cdddar |lst`3604*|))
       (ret.null? (null? (cdddar |lst`3604*|))))
     (push)
     (extend . 1)
     (call
       (iloc.1 . 0)
       (if.false.ret)
       (push.iloc 3 . 2)
       (subr.gloc.of caddar 1 (caddar |lst`3604*|))
       (ret.pair? (pair? (caddar |lst`3604*|))))
     (push)
     (extend . 1)
     (call
       (iloc.0 . 0)
       (if.false.ret)
       (push.iloc 4 . 2)
       (subr.gloc.of cdddar 1 (cdddar |lst`3604*|))
       (ret.null? (null? (cdddar |lst`3604*|))))
     (push)
     (extend . 1)
     (call
       (iloc 3 . 0)
       (if.false.ret)
       (push.iloc 5 . 2)
       (subr.gloc.of caddar 1 (caddar |lst`3604*|))
       (if.not.null?.ret.const . #f)
       (push.iloc 5 . 2)
       (subr.gloc.of cdddar 1 (cdddar |lst`3604*|))
       (ret.null? (null? (cdddar |lst`3604*|))))
     (if.true
       (push.iloc 5 . 0)
       (push.iloc 5 . 1)
       (push.cdr.iloc (5 . 2) (cdr |lst`3604*|))
       (apply.iloc (6 . 0) (|print`3569*| |w`3604*| |k`3604*| (cdr |lst`3604*|))))
     (call
       (iloc 2 . 0)
       (if.false.ret)
       (push.iloc 5 . 2)
       (push.subr.gloc.of cadar 1 (cadar |lst`3604*|))
       (const . |.&BREAK|)
       (if.not.eq?.ret.const . #f)
       (push.iloc 5 . 2)
       (push.subr.gloc.of caddar 1 (caddar |lst`3604*|))
       (const . #\;)
       (ret.eq? (eq? (caddar |lst`3604*|) #\;)))
     (if.true
       (push.cdr.iloc (5 . 2) (cdr |lst`3604*|))
       (push.iloc 5 . 2)
       (push.subr.gloc.of caar 1 (caar |lst`3604*|))
       (extend . 2)
       (call
         (push.iloc 8 . 1)
         (const . #f)
         (if.eq?.ret.const . #t)
         (push.iloc 8 . 1)
         (push.const . 0)
         (ret.subr.gloc.of > (> |n-more-lines`3568*| 0)))
       (if.true
         (call
           (iloc 8 . 1)
           (if.false.ret)
           (n+.iloc (8 . 1) -1 (- |n-more-lines`3568*| 1))
           (set.iloc (8 . 1) (set! |n-more-lines`3568*| (- |n-more-lines`3568*| 1)))
           (ret.const.unspec))
         (push.iloc 8 . 0)
         (push.const . #\linefeed)
         (subr.gloc.of put-char 2 (put-char |port`3568*| #\linefeed))
         (call
           (extend.enclose+
             (1 0 . loop)
             (>n.iloc (0 . 0) 0 (> |i`3625*| 0))
             (if.false.ret)
             (push.iloc 10 . 0)
             (push.const . #\space)
             (subr.gloc.of put-char 2 (put-char |port`3568*| #\space))
             (if.false.ret)
             (push.n+.iloc (0 . 0) -1 (- |i`3625*| 1))
             (apply.iloc+ (1 . 0) (|loop`3624*| (- |i`3625*| 1))))
           (push.iloc.1 . 1)
           (apply.iloc+ (0 . 0) (|loop`3624*| |i`3620*|)))
         (push.iloc 6 . 0)
         (push.iloc.0 . 1)
         (push.iloc.0 . 0)
         (apply.iloc (7 . 0) (|print`3569*| |w`3604*| |i`3620*| |z`3620*|)))
       (ret.const.unspec))
     (call
       (iloc 2 . 0)
       (if.false.ret)
       (push.iloc 5 . 2)
       (push.subr.gloc.of cadar 1 (cadar |lst`3604*|))
       (const . |.&FLAT|)
       (if.not.eq?.ret.const . #f)
       (push.iloc 5 . 2)
       (push.subr.gloc.of caddar 1 (caddar |lst`3604*|))
       (const . #\;)
       (ret.eq? (eq? (caddar |lst`3604*|) #\;)))
     (if.true
       (push.cdr.iloc (5 . 2) (cdr |lst`3604*|))
       (extend . 1)
       (push.iloc 8 . 0)
       (push.const . #\space)
       (subr.gloc.of put-char 2 (put-char |port`3568*| #\space))
       (push.iloc 6 . 0)
       (push.n+.iloc (6 . 1) 1 (+ |k`3604*| 1))
       (push.iloc.0 . 0)
       (apply.iloc (7 . 0) (|print`3569*| |w`3604*| (+ |k`3604*| 1) |z`3628*|)))
     (call
       (iloc 2 . 0)
       (if.false.ret)
       (push.iloc 5 . 2)
       (push.subr.gloc.of caddar 1 (caddar |lst`3604*|))
       (apply.iloc (4 . 0) (|.L1099`3606`3607*| (caddar |lst`3604*|))))
     (if.true
       (push.cdr.iloc (5 . 2) (cdr |lst`3604*|))
       (push.iloc 5 . 2)
       (push.subr.gloc.of caddar 1 (caddar |lst`3604*|))
       (extend . 2)
       (push.iloc 8 . 0)
       (push.iloc.0 . 1)
       (subr.gloc.of put-string 2 (put-string |port`3568*| |s`3630*|))
       (push.iloc 6 . 0)
       (push.iloc 6 . 1)
       (push.iloc.0 . 1)
       (push.subr.gloc.of string-length 1 (string-length |s`3630*|))
       (push.subr.gloc.of + 2 (+ |k`3604*| (string-length |s`3630*|)))
       (push.iloc.0 . 0)
       (apply.iloc
         (7 . 0)
         (|print`3569*| |w`3604*| (+ |k`3604*| (string-length |s`3630*|)) |z`3630*|)))
     (call
       (iloc.0 . 0)
       (if.false.ret)
       (push.iloc 5 . 2)
       (push.subr.gloc.of caddar 1 (caddar |lst`3604*|))
       (push.subr.gloc.of car 1 (car (caddar |lst`3604*|)))
       (const . |.&GROUP|)
       (ret.eq? (eq? (car (caddar |lst`3604*|)) '|.&GROUP|)))
     (if.true
       (push.cdr.iloc (5 . 2) (cdr |lst`3604*|))
       (push.iloc 5 . 2)
       (push.subr.gloc.of caddar 1 (caddar |lst`3604*|))
       (push.subr.gloc.of cdr 1 (cdr (caddar |lst`3604*|)))
       (push.iloc 5 . 2)
       (push.subr.gloc.of caar 1 (caar |lst`3604*|))
       (extend . 3)
       (push.iloc.0 . 2)
       (push.const . |.&FLAT|)
       (push.iloc.0 . 1)
       (push.subr.gloc.of |.list| 3 (|.list| |i`3632*| '|.&FLAT| |x`3632*|))
       (iloc.0 . 0)
       (push.cons)
       (extend . 1)
       (call
         (touch.gloc.of |fits?`3569*|)
         (push.iloc 7 . 0)
         (push.iloc 7 . 1)
         (push.subr.gloc.of - 2 (- |w`3604*| |k`3604*|))
         (push.iloc.0 . 0)
         (apply.gloc.of |fits?`3569*| (|fits?`3569*| (- |w`3604*| |k`3604*|) |flat`3634*|)))
       (if.true
         (push.iloc 7 . 0)
         (push.iloc 7 . 1)
         (push.iloc.0 . 0)
         (apply.iloc (8 . 0) (|print`3569*| |w`3604*| |k`3604*| |flat`3634*|)))
       (push.iloc 7 . 0)
       (push.iloc 7 . 1)
       (push.iloc.1 . 2)
       (push.const . |.&BREAK|)
       (push.iloc.1 . 1)
       (push.subr.gloc.of |.list| 3 (|.list| |i`3632*| '|.&BREAK| |x`3632*|))
       (iloc.1 . 0)
       (push.cons)
       (apply.iloc
         (8 . 0)
         (|print`3569*|
           |w`3604*|
           |k`3604*|
           (|.cons| (|.list| |i`3632*| '|.&BREAK| |x`3632*|) |z`3632*|))))
     (call
       (iloc.1 . 0)
       (if.false.ret)
       (push.iloc 5 . 2)
       (push.subr.gloc.of caddar 1 (caddar |lst`3604*|))
       (subr.gloc.of cdr 1 (cdr (caddar |lst`3604*|)))
       (if.not.pair?.ret.const . #f)
       (push.iloc 5 . 2)
       (subr.gloc.of cdddar 1 (cdddar |lst`3604*|))
       (if.not.null?.ret.const . #f)
       (push.iloc 5 . 2)
       (push.subr.gloc.of caddar 1 (caddar |lst`3604*|))
       (push.subr.gloc.of car 1 (car (caddar |lst`3604*|)))
       (const . |.&NEST|)
       (ret.eq? (eq? (car (caddar |lst`3604*|)) '|.&NEST|)))
     (if.true
       (push.iloc 5 . 0)
       (push.iloc 5 . 1)
       (push.iloc 5 . 2)
       (push.subr.gloc.of caar 1 (caar |lst`3604*|))
       (push.iloc 5 . 2)
       (push.subr.gloc.of caddar 1 (caddar |lst`3604*|))
       (push.subr.gloc.of cadr 1 (cadr (caddar |lst`3604*|)))
       (push.subr.gloc.of + 2 (+ (caar |lst`3604*|) (cadr (caddar |lst`3604*|))))
       (push.iloc 5 . 2)
       (push.subr.gloc.of cadar 1 (cadar |lst`3604*|))
       (push.iloc 5 . 2)
       (push.subr.gloc.of caddar 1 (caddar |lst`3604*|))
       (push.subr.gloc.of cddr 1 (cddr (caddar |lst`3604*|)))
       (push.subr.gloc.of
         |.list|
         3
         (|.list|
           (+ (caar |lst`3604*|) (cadr (caddar |lst`3604*|)))
           (cadar |lst`3604*|)
           (cddr (caddar |lst`3604*|))))
       (cdr.iloc (5 . 2) (cdr |lst`3604*|))
       (push.cons)
       (apply.iloc
         (6 . 0)
         (|print`3569*|
           |w`3604*|
           |k`3604*|
           (|.cons|
             (|.list|
               (+ (caar |lst`3604*|) (cadr (caddar |lst`3604*|)))
               (cadar |lst`3604*|)
               (cddr (caddar |lst`3604*|)))
             (cdr |lst`3604*|)))))
     (iloc.0 . 0)
     (if.false.ret)
     (push.iloc 5 . 2)
     (push.subr.gloc.of cadar 1 (cadar |lst`3604*|))
     (push.iloc 5 . 2)
     (push.subr.gloc.of caar 1 (caar |lst`3604*|))
     (extend . 2)
     (push.iloc 6 . 0)
     (push.iloc 6 . 1)
     (push.iloc.0 . 1)
     (push.iloc.0 . 0)
     (push.iloc 6 . 2)
     (push.subr.gloc.of caddar 1 (caddar |lst`3604*|))
     (push.subr.gloc.of car 1 (car (caddar |lst`3604*|)))
     (push.subr.gloc.of |.list| 3 (|.list| |i`3638*| |m`3638*| (car (caddar |lst`3604*|))))
     (push.iloc.0 . 1)
     (push.iloc.0 . 0)
     (push.iloc 6 . 2)
     (push.subr.gloc.of caddar 1 (caddar |lst`3604*|))
     (push.subr.gloc.of cdr 1 (cdr (caddar |lst`3604*|)))
     (push.subr.gloc.of |.list| 3 (|.list| |i`3638*| |m`3638*| (cdr (caddar |lst`3604*|))))
     (push.cdr.iloc (6 . 2) (cdr |lst`3604*|))
     (push.subr.gloc.of
       |.cons*|
       3
       (|.cons*|
         (|.list| |i`3638*| |m`3638*| (car (caddar |lst`3604*|)))
         (|.list| |i`3638*| |m`3638*| (cdr (caddar |lst`3604*|)))
         (cdr |lst`3604*|)))
     (apply.iloc
       (7 . 0)
       (|print`3569*|
         |w`3604*|
         |k`3604*|
         (|.cons*|
           (|.list| |i`3638*| |m`3638*| (car (caddar |lst`3604*|)))
           (|.list| |i`3638*| |m`3638*| (cdr (caddar |lst`3604*|)))
           (cdr |lst`3604*|)))))
   (call
     (push.iloc 2 . 0)
     (subr.gloc.of cyclic-object? 1 "./boot/pp.scm" . 195595)
     (if.true
       (push.iloc.1 . 0)
       (push.const . "~w")
       (push.iloc 2 . 0)
       (ret.subr.gloc.of format "./boot/pp.scm" . 196619))
     (call (apply.gloc.of pretty-print-line-length "./boot/pp.scm" . 197656))
     (push)
     (extend . 1)
     (push.const . #f)
     (extend . 1)
     (push.close
       (0 0)
       (subr.gloc.of collect-notify 0 "./boot/pp.scm" . 199695)
       (set.iloc (1 . 0) "./boot/pp.scm" . 199695)
       (push.const . #f)
       (ret.subr.gloc.of collect-notify (collect-notify #f)))
     (push.close
       (0 0)
       (push.iloc 2 . 0)
       (push.const . 0)
       (call (apply.gloc.of pretty-print-initial-indent "./boot/pp.scm" . 199714))
       (push)
       (push.const . |.&FLAT|)
       (call
         (touch.gloc.of |parse`3569*|)
         (push.iloc 5 . 0)
         (apply.gloc.of |parse`3569*| "./boot/pp.scm" . 199752))
       (push)
       (push.subr.gloc.of |.list| 3 "./boot/pp.scm" . 199714)
       (push.subr.gloc.of |.list| 1 "./boot/pp.scm" . 199695)
       (apply.iloc (3 . 0) "./boot/pp.scm" . 199695))
     (push.close (0 0) (push.iloc.1 . 0) (ret.subr.gloc.of collect-notify "./boot/pp.scm" . 199695))
     (apply.gloc.of
       |.dynamic-wind|
       (|.dynamic-wind|
         (lambda () (set! |tmp1`3677`3679*| (collect-notify)) (collect-notify #f))
         (lambda ()
           (|print`3569*|
             |width`3674*|
             0
             (|.list|
               (|.list| (pretty-print-initial-indent) '|.&FLAT| (|parse`3569*| |expr`3566*|)))))
         (lambda () (collect-notify |tmp1`3677`3679*|)))))
   (call
     (iloc.1 . 1)
     (if.false.ret)
     (push.iloc.1 . 1)
     (push.const . 0)
     (ret.subr.gloc.of <= "./boot/pp.scm" . 200736))
   (if.true
     (push.iloc.1 . 0)
     (push.const . #\linefeed)
     (subr.gloc.of put-char 2 "./boot/pp.scm" . 201742)
     (call
       (extend.enclose+
         (1 0 . loop)
         (>n.iloc (0 . 0) 0 "./boot/pp.scm" . 202817)
         (if.false.ret)
         (push.iloc 3 . 0)
         (push.const . #\space)
         (subr.gloc.of put-char 2 "./boot/pp.scm" . 202825)
         (if.false.ret)
         (push.n+.iloc (0 . 0) -1 "./boot/pp.scm" . 202855)
         (apply.iloc+ (1 . 0) "./boot/pp.scm" . 202849))
       (call (apply.gloc.of pretty-print-initial-indent "./boot/pp.scm" . 202780))
       (push)
       (apply.iloc+ (0 . 0) "./boot/pp.scm" . 202812))
     (push.iloc.1 . 0)
     (push.const . "  ...")
     (ret.subr.gloc.of put-string "./boot/pp.scm" . 203790))
   (ret.const.unspec))
 (set.gloc.of pretty-print)
 (ret.const.unspec))

;
((push.const . "ypsilon-0.9.6/r~a")
 (push.const . ypsilon-revision)
 (push.subr.gloc.of architecture-feature 1 "./boot/eval.scm" . 5213)
 (push.subr.gloc.of format 2 "./boot/eval.scm" . 5185)
 (subr.gloc.of string->symbol 1 "./boot/eval.scm" . 5169)
 (set.gloc.of auto-compile-cache-validation-signature)
 (ret.const.unspec))
((call (push.const . #f) (apply.gloc.of make-parameter "./boot/eval.scm" . 6174))
 (set.gloc.of auto-compile-verbose)
 (ret.const.unspec))
((call (push.const . #f) (apply.gloc.of make-parameter "./boot/eval.scm" . 7197))
 (set.gloc.of scheme-load-verbose)
 (ret.const.unspec))
((call (push.const) (apply.gloc.of make-parameter "./boot/eval.scm" . 8219))
 (set.gloc.of scheme-load-paths)
 (ret.const.unspec))
((call (push.const . #t) (apply.gloc.of make-parameter "./boot/eval.scm" . 9256))
 (set.gloc.of library-contains-implicit-main)
 (ret.const.unspec))
((call (push.const . #f) (apply.gloc.of make-parameter "./boot/eval.scm" . 10271))
 (set.gloc.of current-include-files)
 (ret.const.unspec))
((subr.gloc.of make-core-hashtable 0 "./boot/eval.scm" . 11302)
 (set.gloc.of library-include-dependencies)
 (ret.const.unspec))
((close
   (1 0 . track-file-open)
   (call
     (touch.gloc.of current-include-files)
     (apply.gloc.of current-include-files "./boot/eval.scm" . 15370))
   (if.false.ret)
   (call
     (touch.gloc.of current-include-files)
     (apply.gloc.of current-include-files "./boot/eval.scm" . 16415))
   (push)
   (push.iloc.0 . 0)
   (push.const . #t)
   (ret.subr.gloc.of core-hashtable-set! "./boot/eval.scm" . 16394))
 (set.gloc.of track-file-open)
 (ret.const.unspec))
((close
   (1 0)
   (call
     (push.iloc.0 . 0)
     (subr.gloc.of list? 1 "./boot/eval.scm" . 27663)
     (if.false.ret)
     (touch.gloc.of every1)
     (push.gloc.of string?)
     (push.iloc.0 . 0)
     (apply.gloc.of every1 "./boot/eval.scm" . 27677))
   (if.true (ret.iloc 0 . 0))
   (push.const . library-extensions)
   (push.const . "expected list of strings, but got ~s")
   (push.iloc.0 . 0)
   (push.subr.gloc.of format 2 "./boot/eval.scm" . 29747)
   (apply.gloc.of assertion-violation "./boot/eval.scm" . 29706))
 (set.gloc.of |.L1139|)
 (call
   (push.const . ".ypsilon.sls")
   (push.const . ".ypsilon.ss")
   (push.const . ".ypsilon.scm")
   (push.const . ".sls")
   (push.const . ".ss")
   (push.const . ".scm")
   (push.subr.gloc.of list 6 "./boot/eval.scm" . 20484)
   (push.gloc.of |.L1139|)
   (apply.gloc.of make-parameter "./boot/eval.scm" . 19459))
 (set.gloc.of library-extensions)
 (ret.const.unspec))
((close
   (1 0)
   (iloc.0 . 0)
   (if.true
     (call
       (push.iloc.0 . 0)
       (subr.gloc.of string? 1 "./boot/eval.scm" . 36882)
       (if.false.ret)
       (push.const . "~//.")
       (push.iloc.0 . 0)
       (push.subr.gloc.of format 2 "./boot/eval.scm" . 36908)
       (ret.subr.gloc.of file-exists? "./boot/eval.scm" . 36894))
     (if.true
       (push.const . "~/")
       (push.iloc.0 . 0)
       (ret.subr.gloc.of format "./boot/eval.scm" . 36928))
     (subr.gloc.of current-error-port 0)
     (push)
     (push.const
       .
       "~&;; warning in auto-compile-cache: directory ~s not exist (temporary disable caching)~!~%")
     (push.iloc.0 . 0)
     (subr.gloc.of format 3 "./boot/eval.scm" . 38925)
     (ret.const . #f))
   (ret.iloc 0 . 0))
 (set.gloc.of |.L1141|)
 (call
   (push.const . #f)
   (push.gloc.of |.L1141|)
   (apply.gloc.of make-parameter "./boot/eval.scm" . 34820))
 (set.gloc.of auto-compile-cache)
 (ret.const.unspec))
((close
   (1 0 . core-eval)
   (push.const . #f)
   (extend . 1)
   (push.close
     (0 0)
     (subr.gloc.of backtrace 0 "./boot/eval.scm" . 45063)
     (set.iloc (1 . 0) "./boot/eval.scm" . 45063)
     (push.const . #f)
     (ret.subr.gloc.of backtrace (backtrace #f)))
   (push.close
     (0 0)
     (touch.gloc.of interpret-coreform)
     (push.iloc 2 . 0)
     (apply.gloc.of interpret-coreform "./boot/eval.scm" . 45063))
   (push.close (0 0) (push.iloc.1 . 0) (ret.subr.gloc.of backtrace "./boot/eval.scm" . 45063))
   (apply.gloc.of
     |.dynamic-wind|
     (|.dynamic-wind|
       (lambda () (set! |tmp1`3702`3704*| (backtrace)) (backtrace #f))
       (lambda () (interpret-coreform |form`3699*|))
       (lambda () (backtrace |tmp1`3702`3704*|)))))
 (set.gloc.of core-eval)
 (ret.const.unspec))
((close
   (1 0 . compile)
   (push.const . #f)
   (subr.gloc.of make-core-hashtable 0)
   (push)
   (extend . 2)
   (push.close
     (0 0)
     (call
       (touch.gloc.of current-closure-comments)
       (apply.gloc.of current-closure-comments "./boot/eval.scm" . 51207))
     (set.iloc (1 . 0) "./boot/eval.scm" . 51207)
     (touch.gloc.of current-closure-comments)
     (push.iloc.1 . 1)
     (apply.gloc.of current-closure-comments "./boot/eval.scm" . 51207))
   (push.close
     (0 0)
     (call (push.iloc 2 . 0) (apply.gloc.of macro-expand "./boot/eval.scm" . 51225))
     (push)
     (apply.gloc.of compile-coreform "./boot/eval.scm" . 51207))
   (push.close
     (0 0)
     (touch.gloc.of current-closure-comments)
     (push.iloc.1 . 0)
     (apply.gloc.of current-closure-comments "./boot/eval.scm" . 51207))
   (apply.gloc.of |.dynamic-wind| "./boot/eval.scm" . 51207))
 (set.gloc.of compile)
 (ret.const.unspec))
((close
   (1 0 . interpret)
   (touch.gloc.of run-vmi)
   (push.const 1 . 0)
   (call
     (push.const . #f)
     (subr.gloc.of make-core-hashtable 0)
     (push)
     (extend . 2)
     (push.close
       (0 0)
       (call
         (touch.gloc.of current-closure-comments)
         (apply.gloc.of current-closure-comments "./boot/eval.scm" . 58382))
       (set.iloc (1 . 0) "./boot/eval.scm" . 58382)
       (touch.gloc.of current-closure-comments)
       (push.iloc.1 . 1)
       (apply.gloc.of current-closure-comments "./boot/eval.scm" . 58382))
     (push.close
       (0 0)
       (call (push.iloc 2 . 0) (apply.gloc.of macro-expand "./boot/eval.scm" . 58400))
       (push)
       (apply.gloc.of compile-coreform "./boot/eval.scm" . 58382))
     (push.close
       (0 0)
       (touch.gloc.of current-closure-comments)
       (push.iloc.1 . 0)
       (apply.gloc.of current-closure-comments "./boot/eval.scm" . 58382))
     (apply.gloc.of |.dynamic-wind| "./boot/eval.scm" . 58382))
   (push.cons)
   (apply.gloc.of run-vmi "./boot/eval.scm" . 59399))
 (set.gloc.of interpret)
 (ret.const.unspec))
((close
   (1 0 . interpret-coreform)
   (touch.gloc.of run-vmi)
   (push.const 1 . 0)
   (call (push.iloc.0 . 0) (apply.gloc.of compile-coreform "./boot/eval.scm" . 63520))
   (push.cons)
   (apply.gloc.of run-vmi "./boot/eval.scm" . 64519))
 (set.gloc.of interpret-coreform)
 (ret.const.unspec))
((close
   (0 1 . environment)
   (call
     (touch.gloc.of parse-imports)
     (push.const . environment)
     (iloc.0 . 0)
     (push.cons)
     (push.iloc.0 . 0)
     (apply.gloc.of parse-imports "./boot/eval.scm" . 68613))
   (push.const . type:eval-environment)
   (push.iloc.0 . 0)
   (ret.subr.gloc.of tuple "./boot/eval.scm" . 69637))
 (set.gloc.of environment)
 (ret.const.unspec))
((close
   (2 0 . eval)
   (subr.gloc.of on-primordial-thread? 0 "./boot/eval.scm" . 73737)
   (if.false.call
     (push.const . thread)
     (push.const . "invalid use of eval")
     (push.iloc.0 . 0)
     (push.iloc.0 . 1)
     (apply.gloc.of assertion-violation "./boot/eval.scm" . 73761))
   (call
     (touch.gloc.of environment?)
     (push.iloc.0 . 1)
     (apply.gloc.of environment? "./boot/eval.scm" . 74764))
   (if.true
     (push.const . #f)
     (extend . 1)
     (push.close
       (0 0)
       (subr.gloc.of current-environment 0 "./boot/eval.scm" . 76814)
       (set.iloc (1 . 0) "./boot/eval.scm" . 76814)
       (push.iloc 2 . 1)
       (ret.subr.gloc.of current-environment "./boot/eval.scm" . 76814))
     (push.close
       (0 0)
       (touch.gloc.of interpret)
       (push.iloc 2 . 0)
       (apply.gloc.of interpret "./boot/eval.scm" . 76814))
     (push.close
       (0 0)
       (push.iloc.1 . 0)
       (ret.subr.gloc.of current-environment "./boot/eval.scm" . 76814))
     (apply.gloc.of |.dynamic-wind| "./boot/eval.scm" . 76814))
   (push.iloc.0 . 1)
   (push.const . 0)
   (push.subr.gloc.of tuple-ref 2 "./boot/eval.scm" . 78869)
   (push.const . type:eval-environment)
   (subr.gloc.of eq? 2 "./boot/eval.scm" . 78864)
   (if.false.call
     (push.const . eval)
     (push.const . "expected environment, but got ~r, as argument 2")
     (push.iloc.0 . 1)
     (push.subr.gloc.of format 2 "./boot/eval.scm" . 79915)
     (apply.gloc.of assertion-violation "./boot/eval.scm" . 79888))
   (touch.gloc.of interpret)
   (push.const . begin)
   (push.const . library)
   (push.const |.R6RS-EVAL|)
   (push.const export)
   (push.const . import)
   (push.const
     rename
     (only (core primitives) set-top-level-value! string->symbol)
     (set-top-level-value! |.SET-TOP-LEVEL-VALUE!|)
     (string->symbol |.STRING->SYMBOL|))
   (push.iloc.0 . 1)
   (push.const . 1)
   (push.subr.gloc.of tuple-ref 2 "./boot/eval.scm" . 89126)
   (push.subr.gloc.of |.cons*| 3 "./boot/eval.scm" . 89126)
   (push.const . |.SET-TOP-LEVEL-VALUE!|)
   (push.const |.STRING->SYMBOL| ".R6RS-EVAL-RESULT")
   (push.iloc.0 . 0)
   (push.subr.gloc.of |.list| 3 "./boot/eval.scm" . 89126)
   (push.subr.gloc.of |.list| 5 "./boot/eval.scm" . 89126)
   (push.const . let)
   (push.const (result |.R6RS-EVAL-RESULT|))
   (push.const |.set-top-level-value!| '|.R6RS-EVAL-RESULT| |.&UNDEF|)
   (push.const . |.unintern-scheme-library|)
   (push.const . quote)
   (call
     (touch.gloc.of generate-library-id)
     (push.const |.R6RS-EVAL|)
     (apply.gloc.of generate-library-id "./boot/eval.scm" . 93240))
   (push)
   (push.subr.gloc.of |.list| 2 "./boot/eval.scm" . 93240)
   (push.subr.gloc.of |.list| 2 "./boot/eval.scm" . 93240)
   (push.const result)
   (push.subr.gloc.of |.cons*| 5 "./boot/eval.scm" . 93240)
   (push.subr.gloc.of |.list| 3 "./boot/eval.scm" . 80908)
   (apply.gloc.of interpret "./boot/eval.scm" . 80908))
 (set.gloc.of eval)
 (ret.const.unspec))
((close
   (1 0 . expand-path)
   (call
     (push.iloc.0 . 0)
     (push.subr.gloc.of string-length 1 "./boot/eval.scm" . 98332)
     (push.const . 1)
     (subr.gloc.of > 2 "./boot/eval.scm" . 98329)
     (if.false.ret)
     (push.iloc.0 . 0)
     (push.const . 1)
     (push.subr.gloc.of string-ref 2 "./boot/eval.scm" . 98362)
     (push.const #\/ #\\)
     (ret.subr.gloc.of memq "./boot/eval.scm" . 98356))
   (push)
   (extend . 1)
   (call
     (iloc.0 . 0)
     (if.false.ret)
     (call (apply.gloc.of home-directory "./boot/eval.scm" . 99355))
     (if.false.ret)
     (push.iloc.1 . 0)
     (push.const . 0)
     (push.subr.gloc.of string-ref 2 "./boot/eval.scm" . 99380)
     (push.const . #\~)
     (ret.subr.gloc.of char=? "./boot/eval.scm" . 99372))
   (if.true
     (push.const . "~a~/")
     (call (apply.gloc.of home-directory "./boot/eval.scm" . 100381))
     (push)
     (push.iloc.1 . 0)
     (push.const . 1)
     (push.iloc.1 . 0)
     (push.subr.gloc.of string-length 1 "./boot/eval.scm" . 100416)
     (push.subr.gloc.of substring 3 "./boot/eval.scm" . 100398)
     (ret.subr.gloc.of format "./boot/eval.scm" . 100366))
   (call
     (iloc.0 . 0)
     (if.false.ret)
     (push.iloc.1 . 0)
     (push.const . 0)
     (push.subr.gloc.of string-ref 2 "./boot/eval.scm" . 101411)
     (push.const . #\.)
     (ret.subr.gloc.of char=? "./boot/eval.scm" . 101403))
   (if.true
     (push.const . "~a~/")
     (subr.gloc.of current-directory 0)
     (push)
     (push.iloc.1 . 0)
     (push.const . 1)
     (push.iloc.1 . 0)
     (push.subr.gloc.of string-length 1 "./boot/eval.scm" . 102467)
     (push.subr.gloc.of substring 3 "./boot/eval.scm" . 102449)
     (ret.subr.gloc.of format "./boot/eval.scm" . 102414))
   (push.iloc.1 . 0)
   (push.const . ".")
   (subr.gloc.of string=? 2 "./boot/eval.scm" . 103438)
   (if.true
     (push.const . "~/")
     (subr.gloc.of current-directory 0)
     (push)
     (ret.subr.gloc.of format "./boot/eval.scm" . 104462))
   (call
     (call (apply.gloc.of home-directory "./boot/eval.scm" . 105491))
     (if.false.ret)
     (push.iloc.1 . 0)
     (push.const . "~")
     (ret.subr.gloc.of string=? "./boot/eval.scm" . 105508))
   (if.true
     (push.const . "~/")
     (call (apply.gloc.of home-directory "./boot/eval.scm" . 106523))
     (push)
     (ret.subr.gloc.of format "./boot/eval.scm" . 106510))
   (push.const . "~/")
   (push.iloc.1 . 0)
   (ret.subr.gloc.of format "./boot/eval.scm" . 108558))
 (set.gloc.of expand-path)
 (ret.const.unspec))
((close
   (1 0 . confirm-path)
   (push.iloc.0 . 0)
   (subr.gloc.of file-exists? 1 "./boot/eval.scm" . 119822)
   (if.false.ret)
   (ret.iloc 0 . 0))
 (set.gloc.of |confirm-path`3764*|)
 (close
   (1 0 . path-not-found)
   (push.const . load)
   (push.const . "~a~/~a not found")
   (push.const . #\")
   (push.iloc.0 . 0)
   (push.const . #\")
   (push.subr.gloc.of format 4 "./boot/eval.scm" . 115748)
   (apply.gloc.of assertion-violation "./boot/eval.scm" . 115721))
 (set.gloc.of |path-not-found`3764*|)
 (close
   (1 0 . locate-load-file)
   (push.iloc.0 . 0)
   (push.subr.gloc.of string-length 1 "./boot/eval.scm" . 121871)
   (push.const . 0)
   (subr.gloc.of = 2 "./boot/eval.scm" . 121868)
   (if.true
     (touch.gloc.of |path-not-found`3764*|)
     (push.iloc.0 . 0)
     (apply.gloc.of |path-not-found`3764*| "./boot/eval.scm" . 122892))
   (call
     (push.iloc.0 . 0)
     (push.const . ":")
     (subr.gloc.of string-contains 2 "./boot/eval.scm" . 123920)
     (if.true.ret)
     (push.iloc.0 . 0)
     (push.const . 0)
     (push.subr.gloc.of string-ref 2 "./boot/eval.scm" . 123953)
     (push.const #\/ #\\)
     (ret.subr.gloc.of memq "./boot/eval.scm" . 123947))
   (if.true
     (call
       (touch.gloc.of |confirm-path`3764*|)
       (push.iloc.0 . 0)
       (apply.gloc.of |confirm-path`3764*| "./boot/eval.scm" . 124944))
     (if.true.ret)
     (touch.gloc.of |path-not-found`3764*|)
     (push.iloc.0 . 0)
     (apply.gloc.of |path-not-found`3764*| "./boot/eval.scm" . 124964))
   (push.iloc.0 . 0)
   (push.const . 0)
   (push.subr.gloc.of string-ref 2 "./boot/eval.scm" . 125970)
   (push.const #\. #\~)
   (subr.gloc.of memq 2 "./boot/eval.scm" . 125964)
   (if.true
     (call
       (touch.gloc.of |confirm-path`3764*|)
       (call
         (touch.gloc.of expand-path)
         (push.iloc.0 . 0)
         (apply.gloc.of expand-path "./boot/eval.scm" . 127006))
       (push)
       (apply.gloc.of |confirm-path`3764*| "./boot/eval.scm" . 126992))
     (if.true.ret)
     (touch.gloc.of |path-not-found`3764*|)
     (push.iloc.0 . 0)
     (apply.gloc.of |path-not-found`3764*| "./boot/eval.scm" . 127026))
   (call
     (touch.gloc.of any1)
     (push.close
       (1 0)
       (touch.gloc.of |confirm-path`3764*|)
       (call
         (touch.gloc.of expand-path)
         (push.iloc.0 . 0)
         (push.const . "/")
         (push.iloc.1 . 0)
         (push.subr.gloc.of string-append 3 "./boot/eval.scm" . 128057)
         (apply.gloc.of expand-path "./boot/eval.scm" . 128044))
       (push)
       (apply.gloc.of |confirm-path`3764*| "./boot/eval.scm" . 128030))
     (push.const . ".")
     (call (apply.gloc.of scheme-load-paths "./boot/eval.scm" . 129052))
     (push.cons)
     (apply.gloc.of any1 "./boot/eval.scm" . 128012))
   (if.true.ret)
   (touch.gloc.of |path-not-found`3764*|)
   (push.iloc.0 . 0)
   (apply.gloc.of |path-not-found`3764*| "./boot/eval.scm" . 131084))
 (set.gloc.of locate-load-file)
 (ret.const.unspec))
((close
   (1 0 . load-file-has-r6rs-comment?)
   (push.const . #f)
   (push.const . #f)
   (extend . 2)
   (push.close
     (0 0)
     (call
       (touch.gloc.of extend-lexical-syntax)
       (apply.gloc.of extend-lexical-syntax "./boot/eval.scm" . 136199))
     (set.iloc (1 . 0) "./boot/eval.scm" . 136199)
     (call
       (touch.gloc.of mutable-literals)
       (apply.gloc.of mutable-literals "./boot/eval.scm" . 136199))
     (set.iloc (1 . 1) "./boot/eval.scm" . 136199)
     (call
       (touch.gloc.of extend-lexical-syntax)
       (push.const . #t)
       (apply.gloc.of extend-lexical-syntax "./boot/eval.scm" . 136199))
     (touch.gloc.of mutable-literals)
     (push.const . #f)
     (apply.gloc.of mutable-literals (mutable-literals #f)))
   (push.close
     (0 0)
     (call
       (touch.gloc.of open-script-input-port)
       (call
         (touch.gloc.of locate-load-file)
         (push.iloc 2 . 0)
         (apply.gloc.of locate-load-file "./boot/eval.scm" . 136235))
       (push)
       (apply.gloc.of open-script-input-port "./boot/eval.scm" . 136211))
     (push)
     (extend . 1)
     (push.iloc.0 . 0)
     (push.const . #f)
     (push.const . load)
     (subr.gloc.of core-read 3 "./boot/eval.scm" . 137225)
     (push.iloc.0 . 0)
     (subr.gloc.of close-port 1 "./boot/eval.scm" . 138249)
     (call
       (touch.gloc.of extend-lexical-syntax)
       (apply.gloc.of extend-lexical-syntax "./boot/eval.scm" . 139278))
     (push)
     (ret.subr.gloc.of not "./boot/eval.scm" . 139273))
   (push.close
     (0 0)
     (call
       (touch.gloc.of extend-lexical-syntax)
       (push.iloc.1 . 0)
       (apply.gloc.of extend-lexical-syntax "./boot/eval.scm" . 136199))
     (touch.gloc.of mutable-literals)
     (push.iloc.1 . 1)
     (apply.gloc.of mutable-literals "./boot/eval.scm" . 136199))
   (apply.gloc.of
     |.dynamic-wind|
     (|.dynamic-wind|
       (lambda ()
         (set! |tmp1`3774`3777*| (extend-lexical-syntax))
         (set! |tmp1`3775`3777*| (mutable-literals))
         (extend-lexical-syntax #t)
         (mutable-literals #f))
       (lambda ()
         (let ((|port`3783*| (open-script-input-port (locate-load-file |path`3771*|))))
           (core-read |port`3783*| #f 'load)
           (close-port |port`3783*|)
           (not (extend-lexical-syntax))))
       (lambda () (extend-lexical-syntax |tmp1`3774`3777*|) (mutable-literals |tmp1`3775`3777*|)))))
 (set.gloc.of load-file-has-r6rs-comment?)
 (ret.const.unspec))
((close
   (1 0 . load)
   (subr.gloc.of on-primordial-thread? 0 "./boot/eval.scm" . 143369)
   (if.false.call
     (push.const . thread)
     (push.const . "invalid use of load")
     (push.iloc.0 . 0)
     (apply.gloc.of assertion-violation "./boot/eval.scm" . 143393))
   (push.iloc.0 . 0)
   (subr.gloc.of list? 1 "./boot/eval.scm" . 144396)
   (if.true
     (call
       (touch.gloc.of auto-compile-cache-update)
       (apply.gloc.of auto-compile-cache-update "./boot/eval.scm" . 145420))
     (touch.gloc.of load-scheme-library)
     (push.iloc.0 . 0)
     (apply.gloc.of load-scheme-library "./boot/eval.scm" . 146444))
   (call
     (touch.gloc.of locate-load-file)
     (push.iloc.0 . 0)
     (apply.gloc.of locate-load-file "./boot/eval.scm" . 148508))
   (push)
   (extend . 1)
   (call
     (call (apply.gloc.of scheme-load-verbose "./boot/eval.scm" . 149523))
     (if.false.ret)
     (push.const . #t)
     (push.const . "~&;; loading ~s~%~!")
     (push.iloc.0 . 0)
     (ret.subr.gloc.of format "./boot/eval.scm" . 149545))
   (call
     (touch.gloc.of open-script-input-port)
     (push.iloc.0 . 0)
     (apply.gloc.of open-script-input-port "./boot/eval.scm" . 150554))
   (push)
   (extend . 1)
   (push.close
     (1 0)
     (call (push.iloc.0 . 0) (apply.gloc.of serious-condition? "./boot/eval.scm" . 153626))
     (if.true
       (push.iloc.1 . 0)
       (subr.gloc.of close-port 1 "./boot/eval.scm" . 154650)
       (push.iloc.0 . 0)
       (apply.gloc.of raise "./boot/eval.scm" . 155674))
     (push.iloc.0 . 0)
     (apply.gloc.of raise-continuable "./boot/eval.scm" . 157722))
   (push.close
     (0 0)
     (push.const . #f)
     (push.const . #f)
     (push.const . #f)
     (push.const . #f)
     (push.const . #f)
     (push.const . #f)
     (subr.gloc.of current-source-comments 0)
     (push)
     (call
       (touch.gloc.of current-temporaries)
       (apply.gloc.of current-temporaries "./boot/eval.scm" . 161837))
     (push)
     (subr.gloc.of current-environment 0)
     (push)
     (call
       (touch.gloc.of extend-lexical-syntax)
       (apply.gloc.of extend-lexical-syntax "./boot/eval.scm" . 163887))
     (push)
     (call
       (touch.gloc.of mutable-literals)
       (apply.gloc.of mutable-literals "./boot/eval.scm" . 164906))
     (push)
     (subr.gloc.of backtrace 0)
     (push)
     (extend . 12)
     (push.close
       (0 0)
       (subr.gloc.of current-source-comments 0 "./boot/eval.scm" . 166933)
       (set.iloc (1 . 0) "./boot/eval.scm" . 166933)
       (call
         (touch.gloc.of current-temporaries)
         (apply.gloc.of current-temporaries "./boot/eval.scm" . 166933))
       (set.iloc (1 . 1) "./boot/eval.scm" . 166933)
       (subr.gloc.of current-environment 0 "./boot/eval.scm" . 166933)
       (set.iloc (1 . 2) "./boot/eval.scm" . 166933)
       (call
         (touch.gloc.of extend-lexical-syntax)
         (apply.gloc.of extend-lexical-syntax "./boot/eval.scm" . 166933))
       (set.iloc (1 . 3) "./boot/eval.scm" . 166933)
       (call
         (touch.gloc.of mutable-literals)
         (apply.gloc.of mutable-literals "./boot/eval.scm" . 166933))
       (set.iloc (1 . 4) "./boot/eval.scm" . 166933)
       (subr.gloc.of backtrace 0 "./boot/eval.scm" . 166933)
       (set.iloc (1 . 5) "./boot/eval.scm" . 166933)
       (push.iloc.1 . 6)
       (subr.gloc.of current-source-comments 1 "./boot/eval.scm" . 166933)
       (call
         (touch.gloc.of current-temporaries)
         (push.iloc.1 . 7)
         (apply.gloc.of current-temporaries "./boot/eval.scm" . 166933))
       (push.iloc.1 . 8)
       (subr.gloc.of current-environment 1 "./boot/eval.scm" . 166933)
       (call
         (touch.gloc.of extend-lexical-syntax)
         (push.iloc.1 . 9)
         (apply.gloc.of extend-lexical-syntax "./boot/eval.scm" . 166933))
       (call
         (touch.gloc.of mutable-literals)
         (push.iloc.1 . 10)
         (apply.gloc.of mutable-literals "./boot/eval.scm" . 166933))
       (push.iloc.1 . 11)
       (ret.subr.gloc.of backtrace "./boot/eval.scm" . 166933))
     (push.close
       (0 0)
       (call
         (touch.gloc.of current-temporaries)
         (push.const . string=?)
         (push.subr.gloc.of make-core-hashtable 1 "./boot/eval.scm" . 166954)
         (apply.gloc.of current-temporaries "./boot/eval.scm" . 166933))
       (call
         (touch.gloc.of current-rename-count)
         (push.const . 0)
         (apply.gloc.of current-rename-count "./boot/eval.scm" . 167957))
       (extend.enclose+
         (0 0 . loop)
         (call
           (subr.gloc.of backtrace 0 "./boot/eval.scm" . 170037)
           (if.false.ret)
           (ret.subr.gloc.of make-core-hashtable "./boot/eval.scm" . 170049))
         (push)
         (subr.gloc.of current-source-comments 1 "./boot/eval.scm" . 170007)
         (push.iloc 5 . 0)
         (subr.gloc.of current-source-comments 0)
         (push)
         (push.const . load)
         (push.subr.gloc.of core-read 3 "./boot/eval.scm" . 171043)
         (extend . 1)
         (push.iloc.0 . 0)
         (subr.gloc.of eof-object? 1 "./boot/eval.scm" . 172064)
         (if.true (push.iloc 6 . 0) (ret.subr.gloc.of close-port "./boot/eval.scm" . 173088))
         (call
           (touch.gloc.of interpret)
           (push.iloc.0 . 0)
           (apply.gloc.of interpret "./boot/eval.scm" . 175136))
         (apply.iloc+ (2 . 0) "./boot/eval.scm" . 176160))
       (apply.iloc+ (0 . 0) "./boot/eval.scm" . 170007))
     (push.close
       (0 0)
       (push.iloc.1 . 0)
       (subr.gloc.of current-source-comments 1 "./boot/eval.scm" . 166933)
       (call
         (touch.gloc.of current-temporaries)
         (push.iloc.1 . 1)
         (apply.gloc.of current-temporaries "./boot/eval.scm" . 166933))
       (push.iloc.1 . 2)
       (subr.gloc.of current-environment 1 "./boot/eval.scm" . 166933)
       (call
         (touch.gloc.of extend-lexical-syntax)
         (push.iloc.1 . 3)
         (apply.gloc.of extend-lexical-syntax "./boot/eval.scm" . 166933))
       (call
         (touch.gloc.of mutable-literals)
         (push.iloc.1 . 4)
         (apply.gloc.of mutable-literals "./boot/eval.scm" . 166933))
       (push.iloc.1 . 5)
       (ret.subr.gloc.of backtrace "./boot/eval.scm" . 166933))
     (apply.gloc.of
       |.dynamic-wind|
       (|.dynamic-wind|
         (lambda ()
           (set! |tmp1`3798`3805*| (current-source-comments))
           (set! |tmp1`3799`3805*| (current-temporaries))
           (set! |tmp1`3800`3805*| (current-environment))
           (set! |tmp1`3801`3805*| (extend-lexical-syntax))
           (set! |tmp1`3802`3805*| (mutable-literals))
           (set! |tmp1`3803`3805*| (backtrace))
           (current-source-comments |tmp2`3798`3805*|)
           (current-temporaries |tmp2`3799`3805*|)
           (current-environment |tmp2`3800`3805*|)
           (extend-lexical-syntax |tmp2`3801`3805*|)
           (mutable-literals |tmp2`3802`3805*|)
           (backtrace |tmp2`3803`3805*|))
         (lambda ()
           (current-temporaries (make-core-hashtable 'string=?))
           (current-rename-count 0)
           (letrec* ((|loop`3812*|
                       (lambda ()
                         (current-source-comments (and (backtrace) (make-core-hashtable)))
                         (let ((|form`3815*|
                                 (core-read |port`3791*| (current-source-comments) 'load)))
                           (if (eof-object? |form`3815*|)
                               (close-port |port`3791*|)
                               (begin (interpret |form`3815*|) (|loop`3812*|)))))))
             (|loop`3812*|)))
         (lambda ()
           (current-source-comments |tmp1`3798`3805*|)
           (current-temporaries |tmp1`3799`3805*|)
           (current-environment |tmp1`3800`3805*|)
           (extend-lexical-syntax |tmp1`3801`3805*|)
           (mutable-literals |tmp1`3802`3805*|)
           (backtrace |tmp1`3803`3805*|)))))
   (apply.gloc.of
     with-exception-handler
     (with-exception-handler
       (lambda (|c`3793*|)
         (if (serious-condition? |c`3793*|)
             (begin (close-port |port`3791*|) (raise |c`3793*|))
             (raise-continuable |c`3793*|)))
       (lambda ()
         (let ((|tmp1`3798`3805*| #f)
               (|tmp1`3799`3805*| #f)
               (|tmp1`3800`3805*| #f)
               (|tmp1`3801`3805*| #f)
               (|tmp1`3802`3805*| #f)
               (|tmp1`3803`3805*| #f)
               (|tmp2`3798`3805*| (current-source-comments))
               (|tmp2`3799`3805*| (current-temporaries))
               (|tmp2`3800`3805*| (current-environment))
               (|tmp2`3801`3805*| (extend-lexical-syntax))
               (|tmp2`3802`3805*| (mutable-literals))
               (|tmp2`3803`3805*| (backtrace)))
           (|.dynamic-wind|
             (lambda ()
               (set! |tmp1`3798`3805*| (current-source-comments))
               (set! |tmp1`3799`3805*| (current-temporaries))
               (set! |tmp1`3800`3805*| (current-environment))
               (set! |tmp1`3801`3805*| (extend-lexical-syntax))
               (set! |tmp1`3802`3805*| (mutable-literals))
               (set! |tmp1`3803`3805*| (backtrace))
               (current-source-comments |tmp2`3798`3805*|)
               (current-temporaries |tmp2`3799`3805*|)
               (current-environment |tmp2`3800`3805*|)
               (extend-lexical-syntax |tmp2`3801`3805*|)
               (mutable-literals |tmp2`3802`3805*|)
               (backtrace |tmp2`3803`3805*|))
             (lambda ()
               (current-temporaries (make-core-hashtable 'string=?))
               (current-rename-count 0)
               (letrec* ((|loop`3812*|
                           (lambda ()
                             (current-source-comments (and (backtrace) (make-core-hashtable)))
                             (let ((|form`3815*|
                                     (core-read |port`3791*| (current-source-comments) 'load)))
                               (if (eof-object? |form`3815*|)
                                   (close-port |port`3791*|)
                                   (begin (interpret |form`3815*|) (|loop`3812*|)))))))
                 (|loop`3812*|)))
             (lambda ()
               (current-source-comments |tmp1`3798`3805*|)
               (current-temporaries |tmp1`3799`3805*|)
               (current-environment |tmp1`3800`3805*|)
               (extend-lexical-syntax |tmp1`3801`3805*|)
               (mutable-literals |tmp1`3802`3805*|)
               (backtrace |tmp1`3803`3805*|))))))))
 (set.gloc.of load)
 (ret.const.unspec))
((close
   (1 0 . load-r6rs)
   (call
     (touch.gloc.of locate-load-file)
     (push.iloc.0 . 0)
     (apply.gloc.of locate-load-file "./boot/eval.scm" . 180245))
   (push)
   (extend . 1)
   (call
     (call (apply.gloc.of scheme-load-verbose "./boot/eval.scm" . 181260))
     (if.false.ret)
     (push.const . #t)
     (push.const . "~&;; loading ~s~%~!")
     (push.iloc.0 . 0)
     (ret.subr.gloc.of format "./boot/eval.scm" . 181282))
   (call
     (touch.gloc.of open-script-input-port)
     (push.iloc.0 . 0)
     (apply.gloc.of open-script-input-port "./boot/eval.scm" . 182291))
   (push)
   (extend . 1)
   (push.close
     (1 0)
     (call (push.iloc.0 . 0) (apply.gloc.of serious-condition? "./boot/eval.scm" . 185363))
     (if.true
       (push.iloc.1 . 0)
       (subr.gloc.of close-port 1 "./boot/eval.scm" . 186387)
       (push.iloc.0 . 0)
       (apply.gloc.of raise "./boot/eval.scm" . 187411))
     (push.iloc.0 . 0)
     (apply.gloc.of raise-continuable "./boot/eval.scm" . 189459))
   (push.close
     (0 0)
     (push.const . #f)
     (push.const . #f)
     (push.const . #f)
     (push.const . #f)
     (push.const . #f)
     (push.const . #f)
     (subr.gloc.of current-source-comments 0)
     (push)
     (call
       (touch.gloc.of current-temporaries)
       (apply.gloc.of current-temporaries "./boot/eval.scm" . 193574))
     (push)
     (subr.gloc.of current-environment 0)
     (push)
     (call
       (touch.gloc.of extend-lexical-syntax)
       (apply.gloc.of extend-lexical-syntax "./boot/eval.scm" . 195624))
     (push)
     (call
       (touch.gloc.of mutable-literals)
       (apply.gloc.of mutable-literals "./boot/eval.scm" . 196643))
     (push)
     (subr.gloc.of backtrace 0)
     (push)
     (extend . 12)
     (push.close
       (0 0)
       (subr.gloc.of current-source-comments 0 "./boot/eval.scm" . 198670)
       (set.iloc (1 . 0) "./boot/eval.scm" . 198670)
       (call
         (touch.gloc.of current-temporaries)
         (apply.gloc.of current-temporaries "./boot/eval.scm" . 198670))
       (set.iloc (1 . 1) "./boot/eval.scm" . 198670)
       (subr.gloc.of current-environment 0 "./boot/eval.scm" . 198670)
       (set.iloc (1 . 2) "./boot/eval.scm" . 198670)
       (call
         (touch.gloc.of extend-lexical-syntax)
         (apply.gloc.of extend-lexical-syntax "./boot/eval.scm" . 198670))
       (set.iloc (1 . 3) "./boot/eval.scm" . 198670)
       (call
         (touch.gloc.of mutable-literals)
         (apply.gloc.of mutable-literals "./boot/eval.scm" . 198670))
       (set.iloc (1 . 4) "./boot/eval.scm" . 198670)
       (subr.gloc.of backtrace 0 "./boot/eval.scm" . 198670)
       (set.iloc (1 . 5) "./boot/eval.scm" . 198670)
       (push.iloc.1 . 6)
       (subr.gloc.of current-source-comments 1 "./boot/eval.scm" . 198670)
       (call
         (touch.gloc.of current-temporaries)
         (push.iloc.1 . 7)
         (apply.gloc.of current-temporaries "./boot/eval.scm" . 198670))
       (push.iloc.1 . 8)
       (subr.gloc.of current-environment 1 "./boot/eval.scm" . 198670)
       (call
         (touch.gloc.of extend-lexical-syntax)
         (push.iloc.1 . 9)
         (apply.gloc.of extend-lexical-syntax "./boot/eval.scm" . 198670))
       (call
         (touch.gloc.of mutable-literals)
         (push.iloc.1 . 10)
         (apply.gloc.of mutable-literals "./boot/eval.scm" . 198670))
       (push.iloc.1 . 11)
       (ret.subr.gloc.of backtrace "./boot/eval.scm" . 198670))
     (push.close
       (0 0)
       (call
         (subr.gloc.of backtrace 0 "./boot/eval.scm" . 198700)
         (if.false.ret)
         (ret.subr.gloc.of make-core-hashtable "./boot/eval.scm" . 198712))
       (push)
       (subr.gloc.of current-source-comments 1 "./boot/eval.scm" . 198670)
       (call
         (touch.gloc.of current-temporaries)
         (push.const . string=?)
         (push.subr.gloc.of make-core-hashtable 1 "./boot/eval.scm" . 199715)
         (apply.gloc.of current-temporaries "./boot/eval.scm" . 199694))
       (call
         (touch.gloc.of current-rename-count)
         (push.const . 0)
         (apply.gloc.of current-rename-count "./boot/eval.scm" . 200718))
       (extend.enclose+
         (1 0 . loop)
         (push.iloc 5 . 0)
         (subr.gloc.of current-source-comments 0)
         (push)
         (push.const . load)
         (push.subr.gloc.of core-read 3 "./boot/eval.scm" . 202780)
         (extend . 1)
         (push.iloc.0 . 0)
         (subr.gloc.of eof-object? 1 "./boot/eval.scm" . 203801)
         (if.true
           (push.iloc 6 . 0)
           (subr.gloc.of close-port 1 "./boot/eval.scm" . 204825)
           (call
             (touch.gloc.of expand-top-level-program)
             (push.iloc.1 . 0)
             (push.subr.gloc.of reverse 1 "./boot/eval.scm" . 205890)
             (push.const)
             (apply.gloc.of expand-top-level-program "./boot/eval.scm" . 205864))
           (push)
           (extend . 1)
           (call
             (touch.gloc.of current-macro-expression)
             (push.const . #f)
             (apply.gloc.of current-macro-expression "./boot/eval.scm" . 206875))
           (touch.gloc.of interpret)
           (push.iloc.0 . 0)
           (apply.gloc.of interpret "./boot/eval.scm" . 207899))
         (push.iloc.0 . 0)
         (iloc.1 . 0)
         (push.cons)
         (apply.iloc+ (2 . 0) "./boot/eval.scm" . 209945))
       (push.const)
       (apply.iloc+ (0 . 0) "./boot/eval.scm" . 202768))
     (push.close
       (0 0)
       (push.iloc.1 . 0)
       (subr.gloc.of current-source-comments 1 "./boot/eval.scm" . 198670)
       (call
         (touch.gloc.of current-temporaries)
         (push.iloc.1 . 1)
         (apply.gloc.of current-temporaries "./boot/eval.scm" . 198670))
       (push.iloc.1 . 2)
       (subr.gloc.of current-environment 1 "./boot/eval.scm" . 198670)
       (call
         (touch.gloc.of extend-lexical-syntax)
         (push.iloc.1 . 3)
         (apply.gloc.of extend-lexical-syntax "./boot/eval.scm" . 198670))
       (call
         (touch.gloc.of mutable-literals)
         (push.iloc.1 . 4)
         (apply.gloc.of mutable-literals "./boot/eval.scm" . 198670))
       (push.iloc.1 . 5)
       (ret.subr.gloc.of backtrace "./boot/eval.scm" . 198670))
     (apply.gloc.of
       |.dynamic-wind|
       (|.dynamic-wind|
         (lambda ()
           (set! |tmp1`3831`3838*| (current-source-comments))
           (set! |tmp1`3832`3838*| (current-temporaries))
           (set! |tmp1`3833`3838*| (current-environment))
           (set! |tmp1`3834`3838*| (extend-lexical-syntax))
           (set! |tmp1`3835`3838*| (mutable-literals))
           (set! |tmp1`3836`3838*| (backtrace))
           (current-source-comments |tmp2`3831`3838*|)
           (current-temporaries |tmp2`3832`3838*|)
           (current-environment |tmp2`3833`3838*|)
           (extend-lexical-syntax |tmp2`3834`3838*|)
           (mutable-literals |tmp2`3835`3838*|)
           (backtrace |tmp2`3836`3838*|))
         (lambda ()
           (current-source-comments (and (backtrace) (make-core-hashtable)))
           (current-temporaries (make-core-hashtable 'string=?))
           (current-rename-count 0)
           (letrec* ((|loop`3846*|
                       (lambda (|acc`3847*|)
                         (let ((|form`3849*|
                                 (core-read |port`3824*| (current-source-comments) 'load)))
                           (if (eof-object? |form`3849*|)
                               (begin
                                 (close-port |port`3824*|)
                                 (let ((|program`3851*|
                                         (expand-top-level-program (reverse |acc`3847*|) '())))
                                   (current-macro-expression #f)
                                   (interpret |program`3851*|)))
                               (|loop`3846*| (cons |form`3849*| |acc`3847*|)))))))
             (|loop`3846*| '())))
         (lambda ()
           (current-source-comments |tmp1`3831`3838*|)
           (current-temporaries |tmp1`3832`3838*|)
           (current-environment |tmp1`3833`3838*|)
           (extend-lexical-syntax |tmp1`3834`3838*|)
           (mutable-literals |tmp1`3835`3838*|)
           (backtrace |tmp1`3836`3838*|)))))
   (apply.gloc.of
     with-exception-handler
     (with-exception-handler
       (lambda (|c`3826*|)
         (if (serious-condition? |c`3826*|)
             (begin (close-port |port`3824*|) (raise |c`3826*|))
             (raise-continuable |c`3826*|)))
       (lambda ()
         (let ((|tmp1`3831`3838*| #f)
               (|tmp1`3832`3838*| #f)
               (|tmp1`3833`3838*| #f)
               (|tmp1`3834`3838*| #f)
               (|tmp1`3835`3838*| #f)
               (|tmp1`3836`3838*| #f)
               (|tmp2`3831`3838*| (current-source-comments))
               (|tmp2`3832`3838*| (current-temporaries))
               (|tmp2`3833`3838*| (current-environment))
               (|tmp2`3834`3838*| (extend-lexical-syntax))
               (|tmp2`3835`3838*| (mutable-literals))
               (|tmp2`3836`3838*| (backtrace)))
           (|.dynamic-wind|
             (lambda ()
               (set! |tmp1`3831`3838*| (current-source-comments))
               (set! |tmp1`3832`3838*| (current-temporaries))
               (set! |tmp1`3833`3838*| (current-environment))
               (set! |tmp1`3834`3838*| (extend-lexical-syntax))
               (set! |tmp1`3835`3838*| (mutable-literals))
               (set! |tmp1`3836`3838*| (backtrace))
               (current-source-comments |tmp2`3831`3838*|)
               (current-temporaries |tmp2`3832`3838*|)
               (current-environment |tmp2`3833`3838*|)
               (extend-lexical-syntax |tmp2`3834`3838*|)
               (mutable-literals |tmp2`3835`3838*|)
               (backtrace |tmp2`3836`3838*|))
             (lambda ()
               (current-source-comments (and (backtrace) (make-core-hashtable)))
               (current-temporaries (make-core-hashtable 'string=?))
               (current-rename-count 0)
               (letrec* ((|loop`3846*|
                           (lambda (|acc`3847*|)
                             (let ((|form`3849*|
                                     (core-read |port`3824*| (current-source-comments) 'load)))
                               (if (eof-object? |form`3849*|)
                                   (begin
                                     (close-port |port`3824*|)
                                     (let ((|program`3851*|
                                             (expand-top-level-program (reverse |acc`3847*|) '())))
                                       (current-macro-expression #f)
                                       (interpret |program`3851*|)))
                                   (|loop`3846*| (cons |form`3849*| |acc`3847*|)))))))
                 (|loop`3846*| '())))
             (lambda ()
               (current-source-comments |tmp1`3831`3838*|)
               (current-temporaries |tmp1`3832`3838*|)
               (current-environment |tmp1`3833`3838*|)
               (extend-lexical-syntax |tmp1`3834`3838*|)
               (mutable-literals |tmp1`3835`3838*|)
               (backtrace |tmp1`3836`3838*|))))))))
 (set.gloc.of load-r6rs)
 (ret.const.unspec))
((close
   (1 0 . load-cache)
   (call
     (call (apply.gloc.of scheme-load-verbose "./boot/eval.scm" . 214026))
     (if.false.ret)
     (push.const . #t)
     (push.const . "~&;; loading ~s~%~!")
     (push.iloc.0 . 0)
     (ret.subr.gloc.of format "./boot/eval.scm" . 214048))
   (call
     (touch.gloc.of open-script-input-port)
     (push.iloc.0 . 0)
     (apply.gloc.of open-script-input-port "./boot/eval.scm" . 215057))
   (push)
   (extend . 1)
   (push.close
     (1 0)
     (push.iloc.1 . 0)
     (subr.gloc.of close-port 1 "./boot/eval.scm" . 218122)
     (push.iloc.0 . 0)
     (apply.gloc.of raise "./boot/eval.scm" . 219146))
   (push.close
     (0 0)
     (push.const . #f)
     (push.const . #f)
     (push.const . #f)
     (push.const . #f)
     (push.const . #f)
     (push.const . string=?)
     (push.subr.gloc.of make-core-hashtable 1 "./boot/eval.scm" . 224292)
     (subr.gloc.of current-environment 0)
     (push)
     (extend . 7)
     (push.close
       (0 0)
       (subr.gloc.of backtrace 0 "./boot/eval.scm" . 227340)
       (set.iloc (1 . 0) "./boot/eval.scm" . 227340)
       (subr.gloc.of current-source-comments 0 "./boot/eval.scm" . 227340)
       (set.iloc (1 . 1) "./boot/eval.scm" . 227340)
       (call
         (touch.gloc.of current-temporaries)
         (apply.gloc.of current-temporaries "./boot/eval.scm" . 227340))
       (set.iloc (1 . 2) "./boot/eval.scm" . 227340)
       (call
         (touch.gloc.of current-rename-count)
         (apply.gloc.of current-rename-count "./boot/eval.scm" . 227340))
       (set.iloc (1 . 3) "./boot/eval.scm" . 227340)
       (subr.gloc.of current-environment 0 "./boot/eval.scm" . 227340)
       (set.iloc (1 . 4) "./boot/eval.scm" . 227340)
       (push.const . #f)
       (subr.gloc.of backtrace 1 (backtrace #f))
       (push.const . #f)
       (subr.gloc.of current-source-comments 1 (current-source-comments #f))
       (call
         (touch.gloc.of current-temporaries)
         (push.iloc.1 . 5)
         (apply.gloc.of current-temporaries "./boot/eval.scm" . 227340))
       (call
         (touch.gloc.of current-rename-count)
         (push.const . 0)
         (apply.gloc.of current-rename-count "./boot/eval.scm" . 227340))
       (push.iloc.1 . 6)
       (ret.subr.gloc.of current-environment "./boot/eval.scm" . 227340))
     (push.close
       (0 0)
       (extend.enclose+
         (0 0 . loop)
         (push.iloc 5 . 0)
         (push.const . #f)
         (push.const . load)
         (push.subr.gloc.of core-read 3 "./boot/eval.scm" . 228378)
         (extend . 1)
         (push.iloc.0 . 0)
         (subr.gloc.of eof-object? 1 "./boot/eval.scm" . 229399)
         (if.true (push.iloc 6 . 0) (ret.subr.gloc.of close-port "./boot/eval.scm" . 230423))
         (call
           (touch.gloc.of run-vmi)
           (push.const 1 . 0)
           (iloc.0 . 0)
           (push.cons)
           (apply.gloc.of run-vmi "./boot/eval.scm" . 232471))
         (apply.iloc+ (2 . 0) "./boot/eval.scm" . 233495))
       (apply.iloc+ (0 . 0) "./boot/eval.scm" . 228366))
     (push.close
       (0 0)
       (push.iloc.1 . 0)
       (subr.gloc.of backtrace 1 "./boot/eval.scm" . 227340)
       (push.iloc.1 . 1)
       (subr.gloc.of current-source-comments 1 "./boot/eval.scm" . 227340)
       (call
         (touch.gloc.of current-temporaries)
         (push.iloc.1 . 2)
         (apply.gloc.of current-temporaries "./boot/eval.scm" . 227340))
       (call
         (touch.gloc.of current-rename-count)
         (push.iloc.1 . 3)
         (apply.gloc.of current-rename-count "./boot/eval.scm" . 227340))
       (push.iloc.1 . 4)
       (ret.subr.gloc.of current-environment "./boot/eval.scm" . 227340))
     (apply.gloc.of
       |.dynamic-wind|
       (|.dynamic-wind|
         (lambda ()
           (set! |tmp1`3865`3871*| (backtrace))
           (set! |tmp1`3866`3871*| (current-source-comments))
           (set! |tmp1`3867`3871*| (current-temporaries))
           (set! |tmp1`3868`3871*| (current-rename-count))
           (set! |tmp1`3869`3871*| (current-environment))
           (backtrace #f)
           (current-source-comments #f)
           (current-temporaries |tmp2`3867`3871*|)
           (current-rename-count 0)
           (current-environment |tmp2`3869`3871*|))
         (lambda ()
           (letrec* ((|loop`3878*|
                       (lambda ()
                         (let ((|form`3881*| (core-read |port`3858*| #f 'load)))
                           (if (eof-object? |form`3881*|)
                               (close-port |port`3858*|)
                               (begin (run-vmi (cons '(1 . 0) |form`3881*|)) (|loop`3878*|)))))))
             (|loop`3878*|)))
         (lambda ()
           (backtrace |tmp1`3865`3871*|)
           (current-source-comments |tmp1`3866`3871*|)
           (current-temporaries |tmp1`3867`3871*|)
           (current-rename-count |tmp1`3868`3871*|)
           (current-environment |tmp1`3869`3871*|)))))
   (apply.gloc.of
     with-exception-handler
     (with-exception-handler
       (lambda (|c`3860*|) (close-port |port`3858*|) (raise |c`3860*|))
       (lambda ()
         (let ((|tmp1`3865`3871*| #f)
               (|tmp1`3866`3871*| #f)
               (|tmp1`3867`3871*| #f)
               (|tmp1`3868`3871*| #f)
               (|tmp1`3869`3871*| #f)
               (|tmp2`3867`3871*| (make-core-hashtable 'string=?))
               (|tmp2`3869`3871*| (current-environment)))
           (|.dynamic-wind|
             (lambda ()
               (set! |tmp1`3865`3871*| (backtrace))
               (set! |tmp1`3866`3871*| (current-source-comments))
               (set! |tmp1`3867`3871*| (current-temporaries))
               (set! |tmp1`3868`3871*| (current-rename-count))
               (set! |tmp1`3869`3871*| (current-environment))
               (backtrace #f)
               (current-source-comments #f)
               (current-temporaries |tmp2`3867`3871*|)
               (current-rename-count 0)
               (current-environment |tmp2`3869`3871*|))
             (lambda ()
               (letrec* ((|loop`3878*|
                           (lambda ()
                             (let ((|form`3881*| (core-read |port`3858*| #f 'load)))
                               (if (eof-object? |form`3881*|)
                                   (close-port |port`3858*|)
                                   (begin
                                     (run-vmi (cons '(1 . 0) |form`3881*|))
                                     (|loop`3878*|)))))))
                 (|loop`3878*|)))
             (lambda ()
               (backtrace |tmp1`3865`3871*|)
               (current-source-comments |tmp1`3866`3871*|)
               (current-temporaries |tmp1`3867`3871*|)
               (current-rename-count |tmp1`3868`3871*|)
               (current-environment |tmp1`3869`3871*|))))))))
 (set.gloc.of load-cache)
 (ret.const.unspec))
((close
   (1 0)
   (push.iloc.0 . 0)
   (push.const . ".cache")
   (subr.gloc.of string-contains 2 "./boot/eval.scm" . 240693)
   (if.false.ret)
   (push.iloc.0 . 0)
   (push.const . ".cache")
   (push.subr.gloc.of string-contains 2 "./boot/eval.scm" . 241720)
   (push.iloc.0 . 0)
   (push.subr.gloc.of string-length 1 "./boot/eval.scm" . 241752)
   (push.const . 6)
   (push.subr.gloc.of - 2 "./boot/eval.scm" . 241749)
   (ret.subr.gloc.of = "./boot/eval.scm" . 241717))
 (set.gloc.of |.L1173|)
 (close
   (1 0)
   (call (apply.gloc.of auto-compile-cache "./boot/eval.scm" . 244801))
   (push)
   (push.const . "/")
   (push.iloc.0 . 0)
   (push.subr.gloc.of string-append 3 "./boot/eval.scm" . 244786)
   (extend . 1)
   (push.iloc.0 . 0)
   (push.const . ".time")
   (push.subr.gloc.of string-append 2 "./boot/eval.scm" . 245814)
   (extend . 1)
   (call
     (push.iloc.1 . 0)
     (subr.gloc.of file-exists? 1 "./boot/eval.scm" . 246822)
     (if.false.ret)
     (push.iloc.1 . 0)
     (ret.subr.gloc.of delete-file "./boot/eval.scm" . 246848))
   (call
     (push.iloc.0 . 0)
     (subr.gloc.of file-exists? 1 "./boot/eval.scm" . 247846)
     (if.false.ret)
     (push.iloc.0 . 0)
     (ret.subr.gloc.of delete-file "./boot/eval.scm" . 247876))
   (call (apply.gloc.of auto-compile-verbose "./boot/eval.scm" . 248870))
   (if.false.ret)
   (push.const . #t)
   (push.const . "~&;; clean ~s~%")
   (push.iloc.1 . 0)
   (ret.subr.gloc.of format "./boot/eval.scm" . 248893))
 (set.gloc.of |.L1174|)
 (close
   (0 0 . auto-compile-cache-clean)
   (call (apply.gloc.of auto-compile-cache "./boot/eval.scm" . 237580))
   (push)
   (extend . 1)
   (iloc.0 . 0)
   (if.true
     (push.gloc.of |.L1174|)
     (call
       (push.gloc.of |.L1173|)
       (push.iloc.0 . 0)
       (push.subr.gloc.of directory-list 1 "./boot/eval.scm" . 242730)
       (apply.gloc.of filter "./boot/eval.scm" . 239650))
     (push)
     (apply.gloc.of for-each "./boot/eval.scm" . 243741))
   (ret.const.unspec))
 (set.gloc.of auto-compile-cache-clean)
 (ret.const.unspec))
((close
   (1 0)
   (call (apply.gloc.of auto-compile-cache "./boot/eval.scm" . 260151))
   (push)
   (push.const . "/")
   (push.iloc.0 . 0)
   (push.subr.gloc.of string-append 3 "./boot/eval.scm" . 260136)
   (extend . 1)
   (push.iloc.0 . 0)
   (push.const . ".time")
   (push.subr.gloc.of string-append 2 "./boot/eval.scm" . 261164)
   (extend . 1)
   (call
     (push.iloc.1 . 0)
     (subr.gloc.of file-exists? 1 "./boot/eval.scm" . 262172)
     (if.false.ret)
     (push.iloc.1 . 0)
     (ret.subr.gloc.of delete-file "./boot/eval.scm" . 262198))
   (call
     (push.iloc.0 . 0)
     (subr.gloc.of file-exists? 1 "./boot/eval.scm" . 263196)
     (if.false.ret)
     (push.iloc.0 . 0)
     (ret.subr.gloc.of delete-file "./boot/eval.scm" . 263226))
   (call (apply.gloc.of auto-compile-verbose "./boot/eval.scm" . 264220))
   (if.false.ret)
   (push.const . #t)
   (push.const . "~&;; clean ~s~%")
   (push.iloc.1 . 0)
   (ret.subr.gloc.of format "./boot/eval.scm" . 264243))
 (set.gloc.of |.L1183|)
 (close
   (1 0 . dependencies-exists?)
   (touch.gloc.of every1)
   (push.gloc.of |.L1180|)
   (push.iloc.0 . 0)
   (apply.gloc.of every1 "./boot/eval.scm" . 313389))
 (set.gloc.of |dependencies-exists?`3948*|)
 (close
   (1 0)
   (push.car.iloc (0 . 0) "./boot/eval.scm" . 321621)
   (push.subr.gloc.of file-stat-mtime 1 "./boot/eval.scm" . 321604)
   (push.cdr.iloc (0 . 0) "./boot/eval.scm" . 321630)
   (ret.subr.gloc.of = "./boot/eval.scm" . 321601))
 (set.gloc.of |.L1182|)
 (close
   (1 0 . dependencies-valid?)
   (touch.gloc.of every1)
   (push.gloc.of |.L1182|)
   (push.iloc.0 . 0)
   (apply.gloc.of every1 "./boot/eval.scm" . 321581))
 (set.gloc.of |dependencies-valid?`3948*|)
 (close
   (1 0 . inconsistent-cache-state)
   (call
     (call (apply.gloc.of auto-compile-verbose "./boot/eval.scm" . 257038))
     (if.false.ret)
     (subr.gloc.of current-error-port 0)
     (push)
     (push.const . "~&;; reset ~s~%")
     (call (apply.gloc.of auto-compile-cache "./boot/eval.scm" . 258109))
     (push)
     (ret.subr.gloc.of format "./boot/eval.scm" . 258062))
   (push.gloc.of |.L1183|)
   (push.iloc.0 . 0)
   (apply.gloc.of for-each "./boot/eval.scm" . 259091))
 (set.gloc.of |inconsistent-cache-state`3906*|)
 (close
   (1 0)
   (push.car.iloc (0 . 0) "./boot/eval.scm" . 314437)
   (subr.gloc.of string? 1 "./boot/eval.scm" . 314428)
   (if.false.ret)
   (push.cdr.iloc (0 . 0) "./boot/eval.scm" . 315461)
   (subr.gloc.of number? 1 "./boot/eval.scm" . 315452)
   (if.false.ret)
   (push.car.iloc (0 . 0) "./boot/eval.scm" . 316490)
   (ret.subr.gloc.of file-exists? "./boot/eval.scm" . 316476))
 (set.gloc.of |.L1180|)
 (close
   (1 0)
   (push.iloc.0 . 0)
   (push.const . ".cache")
   (subr.gloc.of string-contains 2 "./boot/eval.scm" . 270389)
   (if.false.ret)
   (push.iloc.0 . 0)
   (push.const . ".cache")
   (push.subr.gloc.of string-contains 2 "./boot/eval.scm" . 271416)
   (push.iloc.0 . 0)
   (push.subr.gloc.of string-length 1 "./boot/eval.scm" . 271448)
   (push.const . 6)
   (push.subr.gloc.of - 2 "./boot/eval.scm" . 271445)
   (ret.subr.gloc.of = "./boot/eval.scm" . 271413))
 (set.gloc.of |.L1184|)
 (close
   (0 0 . auto-compile-cache-update)
   (call (apply.gloc.of auto-compile-cache "./boot/eval.scm" . 267276))
   (push)
   (extend . 1)
   (iloc.0 . 0)
   (if.true
     (call
       (push.gloc.of |.L1184|)
       (push.iloc.0 . 0)
       (push.subr.gloc.of directory-list 1 "./boot/eval.scm" . 272426)
       (apply.gloc.of filter "./boot/eval.scm" . 269346))
     (push)
     (extend . 1)
     (extend.enclose
       (2 0 . loop)
       (iloc.0 . 0)
       (if.null?
         (call
           (iloc.0 . 1)
           (if.false.ret)
           (push.close
             (1 0)
             (call (apply.gloc.of auto-compile-cache "./boot/eval.scm" . 277583))
             (push)
             (push.const . "/")
             (push.iloc.0 . 0)
             (push.subr.gloc.of string-append 3 "./boot/eval.scm" . 277568)
             (extend . 1)
             (push.iloc.0 . 0)
             (push.const . ".time")
             (push.subr.gloc.of string-append 2 "./boot/eval.scm" . 278596)
             (extend . 1)
             (push.iloc.0 . 0)
             (subr.gloc.of file-exists? 1 "./boot/eval.scm" . 279606)
             (if.true
               (call
                 (touch.gloc.of make-file-input-port)
                 (push.iloc.0 . 0)
                 (apply.gloc.of make-file-input-port "./boot/eval.scm" . 281656))
               (push)
               (push.close
                 (1 0)
                 (push.iloc.0 . 0)
                 (push.subr.gloc.of get-datum 1 "./boot/eval.scm" . 283729)
                 (extend . 1)
                 (push.iloc.1 . 0)
                 (subr.gloc.of close-port 1 "./boot/eval.scm" . 284732)
                 (iloc.0 . 0)
                 (>=.iloc (5 . 1) "./boot/eval.scm" . 285763)
                 (if.true
                   (push.iloc 2 . 0)
                   (subr.gloc.of delete-file 1 "./boot/eval.scm" . 286787)
                   (push.iloc 3 . 0)
                   (subr.gloc.of delete-file 1 "./boot/eval.scm" . 287811)
                   (call (apply.gloc.of auto-compile-verbose "./boot/eval.scm" . 288840))
                   (if.false.ret)
                   (push.const . #t)
                   (push.const . "~&;; clean ~s~%")
                   (push.iloc 3 . 0)
                   (ret.subr.gloc.of format "./boot/eval.scm" . 288863))
                 (ret.const.unspec))
               (apply.gloc.of call-with-port "./boot/eval.scm" . 280630))
             (touch.gloc.of |inconsistent-cache-state`3906*|)
             (push.iloc 5 . 0)
             (apply.gloc.of |inconsistent-cache-state`3906*| "./boot/eval.scm" . 290870))
           (push.iloc 2 . 0)
           (apply.gloc.of
             for-each
             (for-each (lambda (|cache-name`3931*|)
                         (let ((|cache-path`3933*|
                                 (string-append (auto-compile-cache) "/" |cache-name`3931*|)))
                           (let ((|timestamp-path`3935*|
                                   (string-append |cache-path`3933*| ".time")))
                             (if (file-exists? |timestamp-path`3935*|)
                                 (call-with-port
                                   (make-file-input-port |timestamp-path`3935*|)
                                   (lambda (|timestamp-port`3938*|)
                                     (let ((|cache-timestamp`3940*|
                                             (get-datum |timestamp-port`3938*|)))
                                       (close-port |timestamp-port`3938*|)
                                       (if (>= |cache-timestamp`3940*| |expiration`3929*|)
                                           (begin
                                             (delete-file |timestamp-path`3935*|)
                                             (delete-file |cache-path`3933*|)
                                             (and (auto-compile-verbose)
                                                  (format #t "~&;; clean ~s~%" |cache-path`3933*|)))
                                           (|.unspecified|)))))
                                 (|inconsistent-cache-state`3906*| |cache-lst`3924*|)))))
                       |cache-lst`3924*|)))
         (ret.const.unspec))
       (call (apply.gloc.of auto-compile-cache "./boot/eval.scm" . 294974))
       (push)
       (push.const . "/")
       (push.car.iloc (0 . 0) "./boot/eval.scm" . 294999)
       (push.subr.gloc.of string-append 3 "./boot/eval.scm" . 294959)
       (extend . 1)
       (push.iloc.0 . 0)
       (push.const . ".time")
       (push.subr.gloc.of string-append 2 "./boot/eval.scm" . 295987)
       (extend . 1)
       (push.iloc.0 . 0)
       (subr.gloc.of file-exists? 1 "./boot/eval.scm" . 296997)
       (if.true
         (call
           (touch.gloc.of make-file-input-port)
           (push.iloc.0 . 0)
           (apply.gloc.of make-file-input-port "./boot/eval.scm" . 299047))
         (push)
         (push.close
           (1 0)
           (extend.enclose+
             (0 0 . get-dependencies-list)
             (extend.enclose+
               (1 0 . loop)
               (push.iloc 4 . 0)
               (push.subr.gloc.of get-datum 1 "./boot/eval.scm" . 305216)
               (extend . 1)
               (push.iloc 5 . 0)
               (push.subr.gloc.of get-datum 1 "./boot/eval.scm" . 306240)
               (extend . 1)
               (push.iloc.1 . 0)
               (subr.gloc.of eof-object? 1 "./boot/eval.scm" . 307253)
               (if.true (ret.iloc 2 . 0))
               (push.iloc.1 . 0)
               (iloc.0 . 0)
               (push.cons)
               (iloc 2 . 0)
               (push.cons)
               (apply.iloc+ (3 . 0) "./boot/eval.scm" . 309301))
             (push.const)
             (apply.iloc+ (0 . 0) "./boot/eval.scm" . 305199))
           (push.iloc.1 . 0)
           (push.subr.gloc.of get-datum 1 "./boot/eval.scm" . 323649)
           (extend . 1)
           (push.iloc 2 . 0)
           (push.subr.gloc.of get-datum 1 "./boot/eval.scm" . 324674)
           (extend . 1)
           (push.iloc 3 . 0)
           (push.subr.gloc.of get-datum 1 "./boot/eval.scm" . 325693)
           (extend . 1)
           (push.iloc 4 . 0)
           (push.subr.gloc.of get-datum 1 "./boot/eval.scm" . 326721)
           (extend . 1)
           (call (apply.iloc+ (4 . 0) "./boot/eval.scm" . 327742))
           (push)
           (extend . 1)
           (push.iloc 6 . 0)
           (subr.gloc.of close-port 1 "./boot/eval.scm" . 328747)
           (call
             (push.iloc 4 . 0)
             (subr.gloc.of number? 1 "./boot/eval.scm" . 329788)
             (if.false.ret)
             (push.iloc 3 . 0)
             (subr.gloc.of number? 1 "./boot/eval.scm" . 330812)
             (if.false.ret)
             (push.iloc 2 . 0)
             (subr.gloc.of string? 1 "./boot/eval.scm" . 331836)
             (if.false.ret)
             (push.iloc.1 . 0)
             (gloc.of auto-compile-cache-validation-signature)
             (if.not.eq?.ret.const . #f)
             (push.iloc 2 . 0)
             (subr.gloc.of file-exists? 1 "./boot/eval.scm" . 333884)
             (if.false.ret)
             (touch.gloc.of |dependencies-exists?`3948*|)
             (push.iloc.0 . 0)
             (apply.gloc.of |dependencies-exists?`3948*| "./boot/eval.scm" . 334908))
           (if.true
             (call
               (push.iloc 2 . 0)
               (subr.gloc.of file-stat-mtime 1 "./boot/eval.scm" . 336954)
               (=.iloc (3 . 0) "./boot/eval.scm" . 336951)
               (if.false.ret)
               (touch.gloc.of |dependencies-valid?`3948*|)
               (push.iloc.0 . 0)
               (apply.gloc.of |dependencies-valid?`3948*| "./boot/eval.scm" . 337975))
             (if.true
               (push.cdr.iloc (9 . 0) "./boot/eval.scm" . 339000)
               (push.iloc 9 . 1)
               (apply.iloc (10 . 0) "./boot/eval.scm" . 338994))
             (push.cdr.iloc (9 . 0) "./boot/eval.scm" . 341048)
             (call
               (iloc 9 . 1)
               (if.true
                 (iloc 4 . 0)
                 (<.iloc (9 . 1) "./boot/eval.scm" . 343103)
                 (if.true (ret.iloc 4 . 0))
                 (ret.iloc 9 . 1))
               (ret.iloc 4 . 0))
             (push)
             (apply.iloc
               (10 . 0)
               (|loop`3928*|
                 (cdr |lst`3929*|)
                 (if |expiration`3929*|
                     (if (< |cache-timestamp`3970*| |expiration`3929*|)
                         |cache-timestamp`3970*|
                         |expiration`3929*|)
                     |cache-timestamp`3970*|))))
           (touch.gloc.of |inconsistent-cache-state`3906*|)
           (push.iloc 11 . 0)
           (apply.gloc.of |inconsistent-cache-state`3906*| "./boot/eval.scm" . 335922))
         (apply.gloc.of
           call-with-port
           (call-with-port
             (make-file-input-port |timestamp-path`3944*|)
             (lambda (|timestamp-port`3947*|)
               (letrec* ((|get-dependencies-list`3948*|
                           (lambda ()
                             (letrec* ((|loop`3953*|
                                         (lambda (|lst`3954*|)
                                           (let ((|dep-path`3956*|
                                                   (get-datum |timestamp-port`3947*|)))
                                             (let ((|dep-time`3958*|
                                                     (get-datum |timestamp-port`3947*|)))
                                               (if (eof-object? |dep-path`3956*|)
                                                   |lst`3954*|
                                                   (|loop`3953*|
                                                     (cons (cons |dep-path`3956*| |dep-time`3958*|)
                                                           |lst`3954*|))))))))
                               (|loop`3953*| '())))))
                 (let ((|cache-timestamp`3970*| (get-datum |timestamp-port`3947*|)))
                   (let ((|source-timestamp`3972*| (get-datum |timestamp-port`3947*|)))
                     (let ((|source-path`3974*| (get-datum |timestamp-port`3947*|)))
                       (let ((|cache-signature`3976*| (get-datum |timestamp-port`3947*|)))
                         (let ((|dependencies`3978*| (|get-dependencies-list`3948*|)))
                           (close-port |timestamp-port`3947*|)
                           (if (and (number? |cache-timestamp`3970*|)
                                    (number? |source-timestamp`3972*|)
                                    (string? |source-path`3974*|)
                                    (eq?
                                      |cache-signature`3976*|
                                      auto-compile-cache-validation-signature)
                                    (file-exists? |source-path`3974*|)
                                    (|dependencies-exists?`3948*| |dependencies`3978*|))
                               (if (and (=
                                          (file-stat-mtime |source-path`3974*|)
                                          |source-timestamp`3972*|)
                                        (|dependencies-valid?`3948*| |dependencies`3978*|))
                                   (|loop`3928*| (cdr |lst`3929*|) |expiration`3929*|)
                                   (|loop`3928*|
                                     (cdr |lst`3929*|)
                                     (if |expiration`3929*|
                                         (if (< |cache-timestamp`3970*| |expiration`3929*|)
                                             |cache-timestamp`3970*|
                                             |expiration`3929*|)
                                         |cache-timestamp`3970*|)))
                               (|inconsistent-cache-state`3906*| |cache-lst`3924*|))))))))))))
       (push.iloc.1 . 0)
       (subr.gloc.of delete-file 1 "./boot/eval.scm" . 346149)
       (call
         (call (apply.gloc.of auto-compile-verbose "./boot/eval.scm" . 347178))
         (if.false.ret)
         (push.const . #t)
         (push.const . "~&;; clean ~s~%")
         (push.iloc.1 . 0)
         (ret.subr.gloc.of format "./boot/eval.scm" . 347201))
       (push.cdr.iloc (2 . 0) "./boot/eval.scm" . 348203)
       (push.iloc 2 . 1)
       (apply.iloc (3 . 0) "./boot/eval.scm" . 348197))
     (push.iloc.1 . 0)
     (push.const . #f)
     (apply.iloc (0 . 0) (|loop`3928*| |cache-lst`3924*| #f)))
   (ret.const.unspec))
 (set.gloc.of auto-compile-cache-update)
 (ret.const.unspec))
((close
   (1 0)
   (push.iloc.0 . 0)
   (push.subr.gloc.of symbol->string 1 "./boot/eval.scm" . 359468)
   (push.subr.gloc.of string->utf8 1 "./boot/eval.scm" . 359454)
   (extend . 1)
   (subr.gloc.of make-string-output-port 0)
   (push)
   (push.iloc.0 . 0)
   (push.subr.gloc.of bytevector-length 1 "./boot/eval.scm" . 361503)
   (extend . 2)
   (extend.enclose+
     (1 0 . loop)
     (iloc.0 . 0)
     (=.iloc (2 . 1) "./boot/eval.scm" . 363548)
     (if.true
       (push.iloc 2 . 0)
       (push.subr.gloc.of extract-accumulated-string 1 "./boot/eval.scm" . 364588)
       (ret.subr.gloc.of string->symbol "./boot/eval.scm" . 364572))
     (push.iloc 3 . 0)
     (push.iloc.0 . 0)
     (push.subr.gloc.of bytevector-u8-ref 2 "./boot/eval.scm" . 365605)
     (extend . 1)
     (call
       (call
         (>n.iloc (0 . 0) 96 "./boot/eval.scm" . 366638)
         (if.false.ret)
         (push.iloc.0 . 0)
         (push.const . 123)
         (ret.subr.gloc.of < "./boot/eval.scm" . 366649))
       (if.true.ret)
       (call
         (>n.iloc (0 . 0) 47 "./boot/eval.scm" . 367662)
         (if.false.ret)
         (push.iloc.0 . 0)
         (push.const . 58)
         (ret.subr.gloc.of < "./boot/eval.scm" . 367673))
       (if.true.ret)
       (call
         (>n.iloc (0 . 0) 64 "./boot/eval.scm" . 368686)
         (if.false.ret)
         (push.iloc.0 . 0)
         (push.const . 91)
         (ret.subr.gloc.of < "./boot/eval.scm" . 368697))
       (if.true.ret)
       (=n.iloc (0 . 0) 43 "./boot/eval.scm" . 369705)
       (if.true.ret)
       (=n.iloc (0 . 0) 45 "./boot/eval.scm" . 369716)
       (if.true.ret)
       (push.iloc.0 . 0)
       (push.const . 95)
       (ret.subr.gloc.of = "./boot/eval.scm" . 369727))
     (if.true
       (push.iloc 3 . 0)
       (push.iloc.0 . 0)
       (subr.gloc.of put-byte 2 "./boot/eval.scm" . 370725)
       (push.n+.iloc (1 . 0) 1 "./boot/eval.scm" . 371755)
       (apply.iloc+ (2 . 0) "./boot/eval.scm" . 371749))
     (push.iloc 3 . 0)
     (push.const . "%~x~x")
     (push.iloc.0 . 0)
     (push.const . 16)
     (push.subr.gloc.of div 2 "./boot/eval.scm" . 373817)
     (call (push.iloc.0 . 0) (push.const . 16) (apply.gloc.of mod "./boot/eval.scm" . 373828))
     (push)
     (subr.gloc.of format 4 "./boot/eval.scm" . 373797)
     (push.n+.iloc (1 . 0) 1 "./boot/eval.scm" . 374827)
     (apply.iloc+ (2 . 0) "./boot/eval.scm" . 374821))
   (push.const . 0)
   (apply.iloc+ (0 . 0) "./boot/eval.scm" . 363544))
 (set.gloc.of |.L1201|)
 (close
   (1 0 . encode-library-ref)
   (push.gloc.of |.L1201|)
   (push.iloc.0 . 0)
   (apply.gloc.of map "./boot/eval.scm" . 358411))
 (set.gloc.of |encode-library-ref`3985*|)
 (close
   (1 0 . reorder-scheme-library-paths)
   (push.iloc.0 . 0)
   (call
     (extend.enclose+
       (1 0 . loop)
       (iloc.0 . 0)
       (if.null?.ret.const)
       (push.car.iloc (0 . 0) "./boot/eval.scm" . 468002)
       (push.iloc 2 . 0)
       (subr.gloc.of equal? 2 "./boot/eval.scm" . 467994)
       (if.true (push.iloc.0 . 0) (ret.subr.gloc.of cdr "./boot/eval.scm" . 468022))
       (push.car.iloc (0 . 0) "./boot/eval.scm" . 470048)
       (call
         (push.cdr.iloc (0 . 0) "./boot/eval.scm" . 471078)
         (apply.iloc+ (1 . 0) "./boot/eval.scm" . 471072))
       (ret.cons "./boot/eval.scm" . 470042))
     (call (apply.gloc.of scheme-library-paths "./boot/eval.scm" . 465953))
     (push)
     (apply.iloc+ (0 . 0) "./boot/eval.scm" . 466963))
   (ret.cons
     (cons |top-path`4072*|
           (letrec* ((|loop`4076*|
                       (lambda (|lst`4077*|)
                         (if (null? |lst`4077*|)
                             '()
                             (if (equal? (car |lst`4077*|) |top-path`4072*|)
                                 (cdr |lst`4077*|)
                                 (cons (car |lst`4077*|) (|loop`4076*| (cdr |lst`4077*|))))))))
             (|loop`4076*| (scheme-library-paths))))))
 (set.gloc.of |reorder-scheme-library-paths`3985*|)
 (close
   (2 0 . locate-cache)
   (call (apply.gloc.of auto-compile-cache "./boot/eval.scm" . 448528))
   (if.false.ret)
   (push.const . "~a/~a.cache")
   (call (apply.gloc.of auto-compile-cache "./boot/eval.scm" . 449592))
   (push)
   (call
     (touch.gloc.of symbol-list->string)
     (call
       (touch.gloc.of |encode-library-ref`3985*|)
       (push.iloc.0 . 0)
       (apply.gloc.of |encode-library-ref`3985*| "./boot/eval.scm" . 449634))
     (push)
     (push.const . ".")
     (apply.gloc.of symbol-list->string "./boot/eval.scm" . 449613))
   (push)
   (push.subr.gloc.of format 3 "./boot/eval.scm" . 449570)
   (extend . 1)
   (push.iloc.0 . 0)
   (subr.gloc.of file-exists? 1 "./boot/eval.scm" . 450583)
   (if.false.ret)
   (call
     (push.iloc.0 . 0)
     (push.const . ".time")
     (push.subr.gloc.of string-append 2 "./boot/eval.scm" . 451629)
     (extend . 1)
     (push.iloc.0 . 0)
     (subr.gloc.of file-exists? 1 "./boot/eval.scm" . 452638)
     (if.false.ret)
     (call
       (touch.gloc.of make-file-input-port)
       (push.iloc.0 . 0)
       (apply.gloc.of make-file-input-port "./boot/eval.scm" . 454688))
     (push)
     (push.close
       (1 0)
       (push.iloc.0 . 0)
       (subr.gloc.of get-datum 1 "./boot/eval.scm" . 456738)
       (push.iloc.0 . 0)
       (subr.gloc.of get-datum 1 "./boot/eval.scm" . 457762)
       (push.iloc 3 . 1)
       (push.iloc.0 . 0)
       (push.subr.gloc.of get-datum 1 "./boot/eval.scm" . 458813)
       (subr.gloc.of equal? 2 "./boot/eval.scm" . 458793)
       (if.true (ret.iloc 2 . 0))
       (push.iloc.0 . 0)
       (subr.gloc.of close-port 1 "./boot/eval.scm" . 459822)
       (call
         (touch.gloc.of auto-compile-cache-clean)
         (apply.gloc.of auto-compile-cache-clean "./boot/eval.scm" . 459850))
       (ret.const . #f))
     (apply.gloc.of
       call-with-port
       (call-with-port
         (make-file-input-port |timestamp-path`4068*|)
         (lambda (|timestamp-port`4070*|)
           (get-datum |timestamp-port`4070*|)
           (get-datum |timestamp-port`4070*|)
           (if (equal? |source-path`4064*| (get-datum |timestamp-port`4070*|))
               |cache-path`4066*|
               (begin (close-port |timestamp-port`4070*|) (auto-compile-cache-clean) #f))))))
   (if.false.ret)
   (ret.iloc 0 . 0))
 (set.gloc.of |locate-cache`3985*|)
 (close
   (1 0 . locate)
   (call
     (touch.gloc.of symbol-list->string)
     (push.iloc.0 . 0)
     (push.const . "/")
     (apply.gloc.of symbol-list->string "./boot/eval.scm" . 430107))
   (push)
   (extend . 1)
   (touch.gloc.of any1)
   (push.close
     (1 0)
     (touch.gloc.of any1)
     (push.close
       (1 0)
       (push.const . "~a/~a~a")
       (push.iloc.1 . 0)
       (push.iloc 2 . 0)
       (push.iloc.0 . 0)
       (push.subr.gloc.of format 4 "./boot/eval.scm" . 433203)
       (extend . 1)
       (push.iloc.0 . 0)
       (subr.gloc.of file-exists? 1 "./boot/eval.scm" . 434216)
       (if.false.ret)
       (push.iloc.0 . 0)
       (push.iloc 2 . 0)
       (ret.subr.gloc.of list "./boot/eval.scm" . 434242))
     (call (apply.gloc.of library-extensions "./boot/eval.scm" . 435231))
     (push)
     (apply.gloc.of any1 "./boot/eval.scm" . 432153))
   (call (apply.gloc.of scheme-library-paths "./boot/eval.scm" . 436247))
   (push)
   (apply.gloc.of any1 "./boot/eval.scm" . 431121))
 (set.gloc.of |locate`4051*|)
 (close
   (4 0 . make-cache)
   (push.const . #f)
   (extend . 1)
   (call
     (call
       (touch.gloc.of make-file-output-port)
       (push.iloc.1 . 1)
       (apply.gloc.of make-file-output-port "./boot/eval.scm" . 381967))
     (push)
     (push.close
       (1 0)
       (call
         (touch.gloc.of open-script-input-port)
         (push.iloc 2 . 0)
         (apply.gloc.of open-script-input-port "./boot/eval.scm" . 385043))
       (push)
       (push.close
         (1 0)
         (push.close
           (1 0)
           (push.iloc.1 . 0)
           (subr.gloc.of close-port 1 "./boot/eval.scm" . 389144)
           (push.iloc 2 . 0)
           (subr.gloc.of close-port 1 "./boot/eval.scm" . 390168)
           (call
             (push.iloc 4 . 1)
             (subr.gloc.of file-exists? 1 "./boot/eval.scm" . 391197)
             (if.false.ret)
             (push.iloc 4 . 1)
             (ret.subr.gloc.of delete-file "./boot/eval.scm" . 391216))
           (push.iloc.0 . 0)
           (apply.gloc.of raise "./boot/eval.scm" . 392216))
         (push.close
           (0 0)
           (push.const . #f)
           (push.const . #f)
           (push.const . #f)
           (push.const . #f)
           (push.const . #f)
           (push.const . #f)
           (subr.gloc.of current-source-comments 0)
           (push)
           (call
             (touch.gloc.of current-temporaries)
             (apply.gloc.of current-temporaries "./boot/eval.scm" . 396338))
           (push)
           (subr.gloc.of current-environment 0)
           (push)
           (call
             (touch.gloc.of extend-lexical-syntax)
             (apply.gloc.of extend-lexical-syntax "./boot/eval.scm" . 398388))
           (push)
           (call
             (touch.gloc.of mutable-literals)
             (apply.gloc.of mutable-literals "./boot/eval.scm" . 399407))
           (push)
           (subr.gloc.of backtrace 0)
           (push)
           (extend . 12)
           (push.close
             (0 0)
             (subr.gloc.of current-source-comments 0 "./boot/eval.scm" . 401434)
             (set.iloc (1 . 0) "./boot/eval.scm" . 401434)
             (call
               (touch.gloc.of current-temporaries)
               (apply.gloc.of current-temporaries "./boot/eval.scm" . 401434))
             (set.iloc (1 . 1) "./boot/eval.scm" . 401434)
             (subr.gloc.of current-environment 0 "./boot/eval.scm" . 401434)
             (set.iloc (1 . 2) "./boot/eval.scm" . 401434)
             (call
               (touch.gloc.of extend-lexical-syntax)
               (apply.gloc.of extend-lexical-syntax "./boot/eval.scm" . 401434))
             (set.iloc (1 . 3) "./boot/eval.scm" . 401434)
             (call
               (touch.gloc.of mutable-literals)
               (apply.gloc.of mutable-literals "./boot/eval.scm" . 401434))
             (set.iloc (1 . 4) "./boot/eval.scm" . 401434)
             (subr.gloc.of backtrace 0 "./boot/eval.scm" . 401434)
             (set.iloc (1 . 5) "./boot/eval.scm" . 401434)
             (push.iloc.1 . 6)
             (subr.gloc.of current-source-comments 1 "./boot/eval.scm" . 401434)
             (call
               (touch.gloc.of current-temporaries)
               (push.iloc.1 . 7)
               (apply.gloc.of current-temporaries "./boot/eval.scm" . 401434))
             (push.iloc.1 . 8)
             (subr.gloc.of current-environment 1 "./boot/eval.scm" . 401434)
             (call
               (touch.gloc.of extend-lexical-syntax)
               (push.iloc.1 . 9)
               (apply.gloc.of extend-lexical-syntax "./boot/eval.scm" . 401434))
             (call
               (touch.gloc.of mutable-literals)
               (push.iloc.1 . 10)
               (apply.gloc.of mutable-literals "./boot/eval.scm" . 401434))
             (push.iloc.1 . 11)
             (ret.subr.gloc.of backtrace "./boot/eval.scm" . 401434))
           (push.close
             (0 0)
             (extend.enclose+
               (0 0 . loop)
               (call
                 (subr.gloc.of backtrace 0 "./boot/eval.scm" . 402490)
                 (if.false.ret)
                 (ret.subr.gloc.of make-core-hashtable "./boot/eval.scm" . 402502))
               (push)
               (subr.gloc.of current-source-comments 1 "./boot/eval.scm" . 402460)
               (call
                 (touch.gloc.of current-temporaries)
                 (push.const . string=?)
                 (push.subr.gloc.of make-core-hashtable 1 "./boot/eval.scm" . 403505)
                 (apply.gloc.of current-temporaries "./boot/eval.scm" . 403484))
               (call
                 (touch.gloc.of current-rename-count)
                 (push.const . 0)
                 (apply.gloc.of current-rename-count "./boot/eval.scm" . 404508))
               (push.iloc 5 . 0)
               (subr.gloc.of current-source-comments 0)
               (push)
               (push.const . load)
               (push.subr.gloc.of core-read 3 "./boot/eval.scm" . 405543)
               (extend . 1)
               (push.iloc.0 . 0)
               (subr.gloc.of eof-object? 1 "./boot/eval.scm" . 406565)
               (if.true
                 (iloc 8 . 0)
                 (if.true.ret)
                 (push.iloc 7 . 0)
                 (push.const . "~%")
                 (ret.subr.gloc.of format "./boot/eval.scm" . 407605))
               (call
                 (push.const . #f)
                 (subr.gloc.of make-core-hashtable 0)
                 (push)
                 (extend . 2)
                 (push.close
                   (0 0)
                   (call
                     (touch.gloc.of current-closure-comments)
                     (apply.gloc.of current-closure-comments "./boot/eval.scm" . 411694))
                   (set.iloc (1 . 0) "./boot/eval.scm" . 411694)
                   (touch.gloc.of current-closure-comments)
                   (push.iloc.1 . 1)
                   (apply.gloc.of current-closure-comments "./boot/eval.scm" . 411694))
                 (push.close
                   (0 0)
                   (call (push.iloc 2 . 0) (apply.gloc.of macro-expand "./boot/eval.scm" . 411712))
                   (push)
                   (apply.gloc.of compile-coreform "./boot/eval.scm" . 411694))
                 (push.close
                   (0 0)
                   (touch.gloc.of current-closure-comments)
                   (push.iloc.1 . 0)
                   (apply.gloc.of current-closure-comments "./boot/eval.scm" . 411694))
                 (apply.gloc.of |.dynamic-wind| "./boot/eval.scm" . 411694))
               (push)
               (extend . 1)
               (call
                 (iloc 9 . 0)
                 (if.true.ret)
                 (push.iloc.0 . 0)
                 (subr.gloc.of cyclic-object? 1 "./boot/eval.scm" . 413746)
                 (if.true
                   (push.iloc 8 . 0)
                   (subr.gloc.of close-port 1 "./boot/eval.scm" . 414770)
                   (call
                     (push.iloc 10 . 1)
                     (subr.gloc.of file-exists? 1 "./boot/eval.scm" . 415799)
                     (if.false.ret)
                     (push.iloc 10 . 1)
                     (ret.subr.gloc.of delete-file "./boot/eval.scm" . 415818))
                   (const . #t)
                   (set.iloc (9 . 0) "./boot/eval.scm" . 416818)
                   (ret.const.unspec))
                 (call
                   (touch.gloc.of put-fasl)
                   (push.iloc 8 . 0)
                   (push.iloc.0 . 0)
                   (apply.gloc.of put-fasl "./boot/eval.scm" . 418866))
                 (push.iloc 8 . 0)
                 (push.const . "~%")
                 (ret.subr.gloc.of format "./boot/eval.scm" . 419890))
               (call
                 (touch.gloc.of run-vmi)
                 (push.const 1 . 0)
                 (iloc.0 . 0)
                 (push.cons)
                 (apply.gloc.of run-vmi "./boot/eval.scm" . 420903))
               (apply.iloc+ (3 . 0) "./boot/eval.scm" . 421927))
             (apply.iloc+ (0 . 0) "./boot/eval.scm" . 402460))
           (push.close
             (0 0)
             (push.iloc.1 . 0)
             (subr.gloc.of current-source-comments 1 "./boot/eval.scm" . 401434)
             (call
               (touch.gloc.of current-temporaries)
               (push.iloc.1 . 1)
               (apply.gloc.of current-temporaries "./boot/eval.scm" . 401434))
             (push.iloc.1 . 2)
             (subr.gloc.of current-environment 1 "./boot/eval.scm" . 401434)
             (call
               (touch.gloc.of extend-lexical-syntax)
               (push.iloc.1 . 3)
               (apply.gloc.of extend-lexical-syntax "./boot/eval.scm" . 401434))
             (call
               (touch.gloc.of mutable-literals)
               (push.iloc.1 . 4)
               (apply.gloc.of mutable-literals "./boot/eval.scm" . 401434))
             (push.iloc.1 . 5)
             (ret.subr.gloc.of backtrace "./boot/eval.scm" . 401434))
           (apply.gloc.of
             |.dynamic-wind|
             (|.dynamic-wind|
               (lambda ()
                 (set! |tmp1`4015`4022*| (current-source-comments))
                 (set! |tmp1`4016`4022*| (current-temporaries))
                 (set! |tmp1`4017`4022*| (current-environment))
                 (set! |tmp1`4018`4022*| (extend-lexical-syntax))
                 (set! |tmp1`4019`4022*| (mutable-literals))
                 (set! |tmp1`4020`4022*| (backtrace))
                 (current-source-comments |tmp2`4015`4022*|)
                 (current-temporaries |tmp2`4016`4022*|)
                 (current-environment |tmp2`4017`4022*|)
                 (extend-lexical-syntax |tmp2`4018`4022*|)
                 (mutable-literals |tmp2`4019`4022*|)
                 (backtrace |tmp2`4020`4022*|))
               (lambda ()
                 (letrec* ((|loop`4029*|
                             (lambda ()
                               (current-source-comments (and (backtrace) (make-core-hashtable)))
                               (current-temporaries (make-core-hashtable 'string=?))
                               (current-rename-count 0)
                               (let ((|obj`4032*|
                                       (core-read |input`4008*| (current-source-comments) 'load)))
                                 (if (eof-object? |obj`4032*|)
                                     (or |cyclic-code`4004*| (format |output`4006*| "~%"))
                                     (let ((|code`4045*|
                                             (let ((|tmp1`4035`4037*| #f)
                                                   (|tmp2`4035`4037*| (make-core-hashtable)))
                                               (|.dynamic-wind|
                                                 (lambda ()
                                                   (set! |tmp1`4035`4037*|
                                                         (current-closure-comments))
                                                   (current-closure-comments |tmp2`4035`4037*|))
                                                 (lambda ()
                                                   (compile-coreform (macro-expand |obj`4032*|)))
                                                 (lambda ()
                                                   (current-closure-comments |tmp1`4035`4037*|))))))
                                       (or |cyclic-code`4004*|
                                           (if (cyclic-object? |code`4045*|)
                                               (begin
                                                 (close-port |output`4006*|)
                                                 (and (file-exists? |dst`4002*|)
                                                      (delete-file |dst`4002*|))
                                                 (set! |cyclic-code`4004*| #t))
                                               (begin
                                                 (put-fasl |output`4006*| |code`4045*|)
                                                 (format |output`4006*| "~%"))))
                                       (run-vmi (cons '(1 . 0) |code`4045*|))
                                       (|loop`4029*|)))))))
                   (|loop`4029*|)))
               (lambda ()
                 (current-source-comments |tmp1`4015`4022*|)
                 (current-temporaries |tmp1`4016`4022*|)
                 (current-environment |tmp1`4017`4022*|)
                 (extend-lexical-syntax |tmp1`4018`4022*|)
                 (mutable-literals |tmp1`4019`4022*|)
                 (backtrace |tmp1`4020`4022*|)))))
         (apply.gloc.of
           with-exception-handler
           (with-exception-handler
             (lambda (|c`4010*|)
               (close-port |input`4008*|)
               (close-port |output`4006*|)
               (and (file-exists? |dst`4002*|) (delete-file |dst`4002*|))
               (raise |c`4010*|))
             (lambda ()
               (let ((|tmp1`4015`4022*| #f)
                     (|tmp1`4016`4022*| #f)
                     (|tmp1`4017`4022*| #f)
                     (|tmp1`4018`4022*| #f)
                     (|tmp1`4019`4022*| #f)
                     (|tmp1`4020`4022*| #f)
                     (|tmp2`4015`4022*| (current-source-comments))
                     (|tmp2`4016`4022*| (current-temporaries))
                     (|tmp2`4017`4022*| (current-environment))
                     (|tmp2`4018`4022*| (extend-lexical-syntax))
                     (|tmp2`4019`4022*| (mutable-literals))
                     (|tmp2`4020`4022*| (backtrace)))
                 (|.dynamic-wind|
                   (lambda ()
                     (set! |tmp1`4015`4022*| (current-source-comments))
                     (set! |tmp1`4016`4022*| (current-temporaries))
                     (set! |tmp1`4017`4022*| (current-environment))
                     (set! |tmp1`4018`4022*| (extend-lexical-syntax))
                     (set! |tmp1`4019`4022*| (mutable-literals))
                     (set! |tmp1`4020`4022*| (backtrace))
                     (current-source-comments |tmp2`4015`4022*|)
                     (current-temporaries |tmp2`4016`4022*|)
                     (current-environment |tmp2`4017`4022*|)
                     (extend-lexical-syntax |tmp2`4018`4022*|)
                     (mutable-literals |tmp2`4019`4022*|)
                     (backtrace |tmp2`4020`4022*|))
                   (lambda ()
                     (letrec* ((|loop`4029*|
                                 (lambda ()
                                   (current-source-comments (and (backtrace) (make-core-hashtable)))
                                   (current-temporaries (make-core-hashtable 'string=?))
                                   (current-rename-count 0)
                                   (let ((|obj`4032*|
                                           (core-read
                                             |input`4008*|
                                             (current-source-comments)
                                             'load)))
                                     (if (eof-object? |obj`4032*|)
                                         (or |cyclic-code`4004*| (format |output`4006*| "~%"))
                                         (let ((|code`4045*|
                                                 (let ((|tmp1`4035`4037*| #f)
                                                       (|tmp2`4035`4037*| (make-core-hashtable)))
                                                   (|.dynamic-wind|
                                                     (lambda ()
                                                       (set! |tmp1`4035`4037*|
                                                             (current-closure-comments))
                                                       (current-closure-comments |tmp2`4035`4037*|))
                                                     (lambda ()
                                                       (compile-coreform
                                                         (macro-expand |obj`4032*|)))
                                                     (lambda ()
                                                       (current-closure-comments
                                                         |tmp1`4035`4037*|))))))
                                           (or |cyclic-code`4004*|
                                               (if (cyclic-object? |code`4045*|)
                                                   (begin
                                                     (close-port |output`4006*|)
                                                     (and (file-exists? |dst`4002*|)
                                                          (delete-file |dst`4002*|))
                                                     (set! |cyclic-code`4004*| #t))
                                                   (begin
                                                     (put-fasl |output`4006*| |code`4045*|)
                                                     (format |output`4006*| "~%"))))
                                           (run-vmi (cons '(1 . 0) |code`4045*|))
                                           (|loop`4029*|)))))))
                       (|loop`4029*|)))
                   (lambda ()
                     (current-source-comments |tmp1`4015`4022*|)
                     (current-temporaries |tmp1`4016`4022*|)
                     (current-environment |tmp1`4017`4022*|)
                     (extend-lexical-syntax |tmp1`4018`4022*|)
                     (mutable-literals |tmp1`4019`4022*|)
                     (backtrace |tmp1`4020`4022*|))))))))
       (apply.gloc.of
         call-with-port
         (call-with-port
           (open-script-input-port |src`4002*|)
           (lambda (|input`4008*|)
             (with-exception-handler
               (lambda (|c`4010*|)
                 (close-port |input`4008*|)
                 (close-port |output`4006*|)
                 (and (file-exists? |dst`4002*|) (delete-file |dst`4002*|))
                 (raise |c`4010*|))
               (lambda ()
                 (let ((|tmp1`4015`4022*| #f)
                       (|tmp1`4016`4022*| #f)
                       (|tmp1`4017`4022*| #f)
                       (|tmp1`4018`4022*| #f)
                       (|tmp1`4019`4022*| #f)
                       (|tmp1`4020`4022*| #f)
                       (|tmp2`4015`4022*| (current-source-comments))
                       (|tmp2`4016`4022*| (current-temporaries))
                       (|tmp2`4017`4022*| (current-environment))
                       (|tmp2`4018`4022*| (extend-lexical-syntax))
                       (|tmp2`4019`4022*| (mutable-literals))
                       (|tmp2`4020`4022*| (backtrace)))
                   (|.dynamic-wind|
                     (lambda ()
                       (set! |tmp1`4015`4022*| (current-source-comments))
                       (set! |tmp1`4016`4022*| (current-temporaries))
                       (set! |tmp1`4017`4022*| (current-environment))
                       (set! |tmp1`4018`4022*| (extend-lexical-syntax))
                       (set! |tmp1`4019`4022*| (mutable-literals))
                       (set! |tmp1`4020`4022*| (backtrace))
                       (current-source-comments |tmp2`4015`4022*|)
                       (current-temporaries |tmp2`4016`4022*|)
                       (current-environment |tmp2`4017`4022*|)
                       (extend-lexical-syntax |tmp2`4018`4022*|)
                       (mutable-literals |tmp2`4019`4022*|)
                       (backtrace |tmp2`4020`4022*|))
                     (lambda ()
                       (letrec* ((|loop`4029*|
                                   (lambda ()
                                     (current-source-comments
                                       (and (backtrace) (make-core-hashtable)))
                                     (current-temporaries (make-core-hashtable 'string=?))
                                     (current-rename-count 0)
                                     (let ((|obj`4032*|
                                             (core-read
                                               |input`4008*|
                                               (current-source-comments)
                                               'load)))
                                       (if (eof-object? |obj`4032*|)
                                           (or |cyclic-code`4004*| (format |output`4006*| "~%"))
                                           (let ((|code`4045*|
                                                   (let ((|tmp1`4035`4037*| #f)
                                                         (|tmp2`4035`4037*| (make-core-hashtable)))
                                                     (|.dynamic-wind|
                                                       (lambda ()
                                                         (set! |tmp1`4035`4037*|
                                                               (current-closure-comments))
                                                         (current-closure-comments
                                                           |tmp2`4035`4037*|))
                                                       (lambda ()
                                                         (compile-coreform
                                                           (macro-expand |obj`4032*|)))
                                                       (lambda ()
                                                         (current-closure-comments
                                                           |tmp1`4035`4037*|))))))
                                             (or |cyclic-code`4004*|
                                                 (if (cyclic-object? |code`4045*|)
                                                     (begin
                                                       (close-port |output`4006*|)
                                                       (and (file-exists? |dst`4002*|)
                                                            (delete-file |dst`4002*|))
                                                       (set! |cyclic-code`4004*| #t))
                                                     (begin
                                                       (put-fasl |output`4006*| |code`4045*|)
                                                       (format |output`4006*| "~%"))))
                                             (run-vmi (cons '(1 . 0) |code`4045*|))
                                             (|loop`4029*|)))))))
                         (|loop`4029*|)))
                     (lambda ()
                       (current-source-comments |tmp1`4015`4022*|)
                       (current-temporaries |tmp1`4016`4022*|)
                       (current-environment |tmp1`4017`4022*|)
                       (extend-lexical-syntax |tmp1`4018`4022*|)
                       (mutable-literals |tmp1`4019`4022*|)
                       (backtrace |tmp1`4020`4022*|))))))))))
     (apply.gloc.of
       call-with-port
       (call-with-port
         (make-file-output-port |dst`4002*|)
         (lambda (|output`4006*|)
           (call-with-port
             (open-script-input-port |src`4002*|)
             (lambda (|input`4008*|)
               (with-exception-handler
                 (lambda (|c`4010*|)
                   (close-port |input`4008*|)
                   (close-port |output`4006*|)
                   (and (file-exists? |dst`4002*|) (delete-file |dst`4002*|))
                   (raise |c`4010*|))
                 (lambda ()
                   (let ((|tmp1`4015`4022*| #f)
                         (|tmp1`4016`4022*| #f)
                         (|tmp1`4017`4022*| #f)
                         (|tmp1`4018`4022*| #f)
                         (|tmp1`4019`4022*| #f)
                         (|tmp1`4020`4022*| #f)
                         (|tmp2`4015`4022*| (current-source-comments))
                         (|tmp2`4016`4022*| (current-temporaries))
                         (|tmp2`4017`4022*| (current-environment))
                         (|tmp2`4018`4022*| (extend-lexical-syntax))
                         (|tmp2`4019`4022*| (mutable-literals))
                         (|tmp2`4020`4022*| (backtrace)))
                     (|.dynamic-wind|
                       (lambda ()
                         (set! |tmp1`4015`4022*| (current-source-comments))
                         (set! |tmp1`4016`4022*| (current-temporaries))
                         (set! |tmp1`4017`4022*| (current-environment))
                         (set! |tmp1`4018`4022*| (extend-lexical-syntax))
                         (set! |tmp1`4019`4022*| (mutable-literals))
                         (set! |tmp1`4020`4022*| (backtrace))
                         (current-source-comments |tmp2`4015`4022*|)
                         (current-temporaries |tmp2`4016`4022*|)
                         (current-environment |tmp2`4017`4022*|)
                         (extend-lexical-syntax |tmp2`4018`4022*|)
                         (mutable-literals |tmp2`4019`4022*|)
                         (backtrace |tmp2`4020`4022*|))
                       (lambda ()
                         (letrec* ((|loop`4029*|
                                     (lambda ()
                                       (current-source-comments
                                         (and (backtrace) (make-core-hashtable)))
                                       (current-temporaries (make-core-hashtable 'string=?))
                                       (current-rename-count 0)
                                       (let ((|obj`4032*|
                                               (core-read
                                                 |input`4008*|
                                                 (current-source-comments)
                                                 'load)))
                                         (if (eof-object? |obj`4032*|)
                                             (or |cyclic-code`4004*| (format |output`4006*| "~%"))
                                             (let ((|code`4045*|
                                                     (let ((|tmp1`4035`4037*| #f)
                                                           (|tmp2`4035`4037*|
                                                             (make-core-hashtable)))
                                                       (|.dynamic-wind|
                                                         (lambda ()
                                                           (set! |tmp1`4035`4037*|
                                                                 (current-closure-comments))
                                                           (current-closure-comments
                                                             |tmp2`4035`4037*|))
                                                         (lambda ()
                                                           (compile-coreform
                                                             (macro-expand |obj`4032*|)))
                                                         (lambda ()
                                                           (current-closure-comments
                                                             |tmp1`4035`4037*|))))))
                                               (or |cyclic-code`4004*|
                                                   (if (cyclic-object? |code`4045*|)
                                                       (begin
                                                         (close-port |output`4006*|)
                                                         (and (file-exists? |dst`4002*|)
                                                              (delete-file |dst`4002*|))
                                                         (set! |cyclic-code`4004*| #t))
                                                       (begin
                                                         (put-fasl |output`4006*| |code`4045*|)
                                                         (format |output`4006*| "~%"))))
                                               (run-vmi (cons '(1 . 0) |code`4045*|))
                                               (|loop`4029*|)))))))
                           (|loop`4029*|)))
                       (lambda ()
                         (current-source-comments |tmp1`4015`4022*|)
                         (current-temporaries |tmp1`4016`4022*|)
                         (current-environment |tmp1`4017`4022*|)
                         (extend-lexical-syntax |tmp1`4018`4022*|)
                         (mutable-literals |tmp1`4019`4022*|)
                         (backtrace |tmp1`4020`4022*|))))))))))))
   (ret.iloc 0 . 0))
 (set.gloc.of |make-cache`3985*|)
 (close
   (1 1 . load-scheme-library)
   (call
     (iloc.0 . 1)
     (if.not.pair?.ret.const . #t)
     (push.iloc.0 . 1)
     (ret.subr.gloc.of car "./boot/eval.scm" . 354346))
   (push)
   (extend . 1)
   (extend.enclose
     (1 0 . locate-source)
     (call
       (touch.gloc.of |encode-library-ref`3985*|)
       (push.iloc.0 . 0)
       (apply.gloc.of |encode-library-ref`3985*| "./boot/eval.scm" . 438299))
     (push)
     (extend . 1)
     (call
       (call
         (touch.gloc.of library-contains-implicit-main)
         (apply.gloc.of library-contains-implicit-main "./boot/eval.scm" . 439317))
       (if.true
         (push.iloc.0 . 0)
         (push.iloc.0 . 0)
         (push.subr.gloc.of length 1 "./boot/eval.scm" . 440372)
         (push.const . 1)
         (push.subr.gloc.of - 2 "./boot/eval.scm" . 440369)
         (push.subr.gloc.of list-ref 2 "./boot/eval.scm" . 440350)
         (const . main)
         (if.eq?
           (call
             (touch.gloc.of |locate`4051*|)
             (push.iloc.0 . 0)
             (push.const main)
             (push.subr.gloc.of append 2 "./boot/eval.scm" . 441381)
             (apply.gloc.of |locate`4051*| "./boot/eval.scm" . 441373))
           (if.true.ret)
           (touch.gloc.of |locate`4051*|)
           (push.iloc.0 . 0)
           (apply.gloc.of |locate`4051*| "./boot/eval.scm" . 441408))
         (call
           (touch.gloc.of |locate`4051*|)
           (push.iloc.0 . 0)
           (apply.gloc.of |locate`4051*| "./boot/eval.scm" . 442397))
         (if.true.ret)
         (touch.gloc.of |locate`4051*|)
         (push.iloc.0 . 0)
         (push.const main)
         (push.subr.gloc.of append 2 "./boot/eval.scm" . 442423)
         (apply.gloc.of |locate`4051*| "./boot/eval.scm" . 442415))
       (touch.gloc.of |locate`4051*|)
       (push.iloc.0 . 0)
       (apply.gloc.of |locate`4051*| "./boot/eval.scm" . 443413))
     (if.true.ret)
     (iloc 3 . 0)
     (if.false.ret)
     (push.const . load-scheme-library)
     (push.const . "~s not found in scheme-library-paths: ~s")
     (push.gloc.of path)
     (call (apply.gloc.of scheme-library-paths "./boot/eval.scm" . 444528))
     (push)
     (push.subr.gloc.of format 3 "./boot/eval.scm" . 444472)
     (apply.gloc.of error "./boot/eval.scm" . 444444))
   (call
     (push.iloc 2 . 0)
     (subr.gloc.of list? 1 "./boot/eval.scm" . 473099)
     (if.true.ret)
     (push.const . "internal error in load-scheme-library: unrecognized argument: ~s")
     (push.iloc 2 . 0)
     (apply.gloc.of scheme-error "./boot/eval.scm" . 473111))
   (call (push.iloc 2 . 0) (apply.iloc (0 . 0) "./boot/eval.scm" . 474126))
   (push)
   (extend . 1)
   (iloc.0 . 0)
   (if.true
     (push.car.iloc (0 . 0) (car |.L1195`4080*|))
     (extend . 1)
     (push.const . #f)
     (call
       (touch.gloc.of |reorder-scheme-library-paths`3985*|)
       (push.cadr.iloc (1 . 0) (cadr |.L1195`4080*|))
       (apply.gloc.of
         |reorder-scheme-library-paths`3985*|
         (|reorder-scheme-library-paths`3985*| (cadr |.L1195`4080*|))))
     (push)
     (extend . 2)
     (push.close
       (0 0)
       (call (apply.gloc.of scheme-library-paths (scheme-library-paths)))
       (set.iloc (1 . 0) (set! |tmp1`4090`4092*| (scheme-library-paths)))
       (push.iloc.1 . 1)
       (apply.gloc.of scheme-library-paths (scheme-library-paths |tmp2`4090`4092*|)))
     (push.close
       (0 0)
       (call (apply.gloc.of auto-compile-cache (auto-compile-cache)))
       (if.true
         (call
           (touch.gloc.of |locate-cache`3985*|)
           (push.iloc 6 . 0)
           (push.iloc 2 . 0)
           (apply.gloc.of
             |locate-cache`3985*|
             (|locate-cache`3985*| |ref`3982*| |source-path`4087*|)))
         (push)
         (extend . 1)
         (iloc.0 . 0)
         (if.true
           (touch.gloc.of load-cache)
           (push.iloc.0 . 0)
           (apply.gloc.of load-cache (load-cache |cache-path`4098*|)))
         (call
           (touch.gloc.of |encode-library-ref`3985*|)
           (push.iloc 7 . 0)
           (apply.gloc.of |encode-library-ref`3985*| (|encode-library-ref`3985*| |ref`3982*|)))
         (push)
         (call
           (touch.gloc.of generate-library-id)
           (push.iloc 7 . 0)
           (apply.gloc.of generate-library-id (generate-library-id |ref`3982*|)))
         (push)
         (extend . 2)
         (push.const . "~a/~a.cache")
         (call (apply.gloc.of auto-compile-cache (auto-compile-cache)))
         (push)
         (call
           (touch.gloc.of symbol-list->string)
           (push.iloc.0 . 0)
           (push.const . ".")
           (apply.gloc.of symbol-list->string (symbol-list->string |ref`4100*| ".")))
         (push)
         (push.subr.gloc.of
           format
           3
           (format "~a/~a.cache" (auto-compile-cache) (symbol-list->string |ref`4100*| ".")))
         (extend . 1)
         (call
           (call (apply.gloc.of auto-compile-verbose (auto-compile-verbose)))
           (if.false.ret)
           (push.const . #t)
           (push.const . "~&;; compile ~s~%~!")
           (push.iloc 5 . 0)
           (ret.subr.gloc.of format (format #t "~&;; compile ~s~%~!" |source-path`4087*|)))
         (call
           (touch.gloc.of |make-cache`3985*|)
           (push.iloc 5 . 0)
           (push.iloc.0 . 0)
           (push.iloc.1 . 0)
           (push.iloc 5 . 0)
           (push.subr.gloc.of file-stat-mtime 1 (file-stat-mtime |source-path`4087*|))
           (apply.gloc.of
             |make-cache`3985*|
             (|make-cache`3985*|
               |source-path`4087*|
               |cache-path`4102*|
               |ref`4100*|
               (file-stat-mtime |source-path`4087*|))))
         (if.true
           (call (apply.gloc.of auto-compile-verbose (auto-compile-verbose)))
           (if.false.ret)
           (push.const . #t)
           (push.const . "~&;; delete ~s~%~!")
           (push.iloc.0 . 0)
           (ret.subr.gloc.of format (format #t "~&;; delete ~s~%~!" |cache-path`4102*|)))
         (call
           (touch.gloc.of make-file-output-port)
           (push.iloc.0 . 0)
           (push.const . ".time")
           (push.subr.gloc.of string-append 2 (string-append |cache-path`4102*| ".time"))
           (apply.gloc.of
             make-file-output-port
             (make-file-output-port (string-append |cache-path`4102*| ".time"))))
         (push)
         (push.close
           (1 0)
           (push.iloc.0 . 0)
           (push.const . "~s ~s ~s ~s~%")
           (subr.gloc.of microsecond 0)
           (push)
           (push.iloc 6 . 0)
           (push.subr.gloc.of file-stat-mtime 1 (file-stat-mtime |source-path`4087*|))
           (push.iloc 6 . 0)
           (push.gloc.of auto-compile-cache-validation-signature)
           (subr.gloc.of
             format
             6
             (format
               |output`4106*|
               "~s ~s ~s ~s~%"
               (microsecond)
               (file-stat-mtime |source-path`4087*|)
               |source-path`4087*|
               auto-compile-cache-validation-signature))
           (push.gloc.of library-include-dependencies)
           (push.iloc 2 . 1)
           (push.const . #f)
           (push.subr.gloc.of
             core-hashtable-ref
             3
             (core-hashtable-ref library-include-dependencies |library-id`4100*| #f))
           (extend . 1)
           (iloc.0 . 0)
           (if.true
             (call
               (push.close
                 (1 0)
                 (push.iloc 2 . 0)
                 (push.const . "~s ~s~%")
                 (push.car.iloc (0 . 0) (car |dep`4112*|))
                 (push.car.iloc (0 . 0) (car |dep`4112*|))
                 (push.subr.gloc.of file-stat-mtime 1 (file-stat-mtime (car |dep`4112*|)))
                 (ret.subr.gloc.of
                   format
                   (format
                     |output`4106*|
                     "~s ~s~%"
                     (car |dep`4112*|)
                     (file-stat-mtime (car |dep`4112*|)))))
               (push.iloc.0 . 0)
               (push.subr.gloc.of core-hashtable->alist 1 (core-hashtable->alist |.L1197`4108*|))
               (apply.gloc.of
                 for-each
                 (for-each (lambda (|dep`4112*|)
                             (format
                               |output`4106*|
                               "~s ~s~%"
                               (car |dep`4112*|)
                               (file-stat-mtime (car |dep`4112*|))))
                           (core-hashtable->alist |.L1197`4108*|))))
             (push.gloc.of library-include-dependencies)
             (push.iloc 3 . 1)
             (ret.subr.gloc.of
               core-hashtable-delete!
               (core-hashtable-delete! library-include-dependencies |library-id`4100*|)))
           (ret.const.unspec))
         (apply.gloc.of
           call-with-port
           (call-with-port
             (make-file-output-port (string-append |cache-path`4102*| ".time"))
             (lambda (|output`4106*|)
               (format
                 |output`4106*|
                 "~s ~s ~s ~s~%"
                 (microsecond)
                 (file-stat-mtime |source-path`4087*|)
                 |source-path`4087*|
                 auto-compile-cache-validation-signature)
               (let ((|.L1197`4108*|
                       (core-hashtable-ref library-include-dependencies |library-id`4100*| #f)))
                 (if |.L1197`4108*|
                     (begin
                       (for-each (lambda (|dep`4112*|)
                                   (format
                                     |output`4106*|
                                     "~s ~s~%"
                                     (car |dep`4112*|)
                                     (file-stat-mtime (car |dep`4112*|))))
                                 (core-hashtable->alist |.L1197`4108*|))
                       (core-hashtable-delete! library-include-dependencies |library-id`4100*|))
                     (|.unspecified|)))))))
       (push.iloc 2 . 0)
       (apply.gloc.of load (load |source-path`4087*|)))
     (push.close
       (0 0)
       (push.iloc.1 . 0)
       (apply.gloc.of scheme-library-paths (scheme-library-paths |tmp1`4090`4092*|)))
     (apply.gloc.of
       |.dynamic-wind|
       (|.dynamic-wind|
         (lambda ()
           (set! |tmp1`4090`4092*| (scheme-library-paths))
           (scheme-library-paths |tmp2`4090`4092*|))
         (lambda ()
           (if (auto-compile-cache)
               (let ((|cache-path`4098*| (|locate-cache`3985*| |ref`3982*| |source-path`4087*|)))
                 (if |cache-path`4098*|
                     (load-cache |cache-path`4098*|)
                     (let ((|ref`4100*| (|encode-library-ref`3985*| |ref`3982*|))
                           (|library-id`4100*| (generate-library-id |ref`3982*|)))
                       (let ((|cache-path`4102*|
                               (format
                                 "~a/~a.cache"
                                 (auto-compile-cache)
                                 (symbol-list->string |ref`4100*| "."))))
                         (and (auto-compile-verbose)
                              (format #t "~&;; compile ~s~%~!" |source-path`4087*|))
                         (if (|make-cache`3985*|
                               |source-path`4087*|
                               |cache-path`4102*|
                               |ref`4100*|
                               (file-stat-mtime |source-path`4087*|))
                             (and (auto-compile-verbose)
                                  (format #t "~&;; delete ~s~%~!" |cache-path`4102*|))
                             (call-with-port
                               (make-file-output-port (string-append |cache-path`4102*| ".time"))
                               (lambda (|output`4106*|)
                                 (format
                                   |output`4106*|
                                   "~s ~s ~s ~s~%"
                                   (microsecond)
                                   (file-stat-mtime |source-path`4087*|)
                                   |source-path`4087*|
                                   auto-compile-cache-validation-signature)
                                 (let ((|.L1197`4108*|
                                         (core-hashtable-ref
                                           library-include-dependencies
                                           |library-id`4100*|
                                           #f)))
                                   (if |.L1197`4108*|
                                       (begin
                                         (for-each (lambda (|dep`4112*|)
                                                     (format
                                                       |output`4106*|
                                                       "~s ~s~%"
                                                       (car |dep`4112*|)
                                                       (file-stat-mtime (car |dep`4112*|))))
                                                   (core-hashtable->alist |.L1197`4108*|))
                                         (core-hashtable-delete!
                                           library-include-dependencies
                                           |library-id`4100*|))
                                       (|.unspecified|))))))))))
               (load |source-path`4087*|)))
         (lambda () (scheme-library-paths |tmp1`4090`4092*|)))))
   (ret.const.unspec))
 (set.gloc.of load-scheme-library)
 (ret.const.unspec))

;
((call (push.const . #f) (apply.gloc.of make-parameter "./boot/interaction.scm" . 5144))
 (set.gloc.of dump-condition)
 (ret.const.unspec))
((close
   (1 0)
   (push.const . "~r")
   (push.iloc.0 . 0)
   (ret.subr.gloc.of format "./boot/interaction.scm" . 34890))
 (set.gloc.of |.L1221|)
 (close
   (1 1 . default-exception-printer)
   (call
     (iloc.0 . 1)
     (if.pair? (push.iloc.0 . 1) (ret.subr.gloc.of car "./boot/interaction.scm" . 9248))
     (ret.subr.gloc.of current-error-port "./boot/interaction.scm" . 9258))
   (push)
   (extend . 1)
   (call
     (touch.gloc.of current-exception-handler)
     (push.const . #f)
     (apply.gloc.of current-exception-handler "./boot/interaction.scm" . 10247))
   (subr.gloc.of make-string-output-port 0)
   (push)
   (extend . 1)
   (call
     (push.const . #f)
     (push.const . #f)
     (push.const . #f)
     (subr.gloc.of backtrace-line-length 0)
     (push)
     (extend . 4)
     (push.close
       (0 0)
       (call (apply.gloc.of pretty-print-line-length "./boot/interaction.scm" . 16395))
       (set.iloc (1 . 0) "./boot/interaction.scm" . 16395)
       (call (apply.gloc.of pretty-print-maximum-lines "./boot/interaction.scm" . 16395))
       (set.iloc (1 . 1) "./boot/interaction.scm" . 16395)
       (call (apply.gloc.of pretty-print-unwrap-syntax "./boot/interaction.scm" . 16395))
       (set.iloc (1 . 2) "./boot/interaction.scm" . 16395)
       (call
         (push.iloc.1 . 3)
         (apply.gloc.of pretty-print-line-length "./boot/interaction.scm" . 16395))
       (call
         (push.const . 5)
         (apply.gloc.of pretty-print-maximum-lines "./boot/interaction.scm" . 16395))
       (push.const . #t)
       (apply.gloc.of pretty-print-unwrap-syntax "./boot/interaction.scm" . 16395))
     (push.close
       (0 0)
       (extend.unbound . 4)
       (push.close
         (0 0 . output-who-message)
         (push.iloc 4 . 0)
         (push.const . "error")
         (subr.gloc.of format 2 "./boot/interaction.scm" . 18447)
         (call
           (call (push.iloc 6 . 0) (apply.gloc.of who-condition? "./boot/interaction.scm" . 19476))
           (if.false.ret)
           (call (push.iloc 6 . 0) (apply.gloc.of condition-who "./boot/interaction.scm" . 20513))
           (push)
           (subr.gloc.of string? 1 "./boot/interaction.scm" . 20504)
           (if.true
             (push.iloc 4 . 0)
             (push.const . " in ~a")
             (call (push.iloc 6 . 0) (apply.gloc.of condition-who "./boot/interaction.scm" . 21550))
             (push)
             (ret.subr.gloc.of format "./boot/interaction.scm" . 21528))
           (push.iloc 4 . 0)
           (push.const . " in ~u")
           (call (push.iloc 6 . 0) (apply.gloc.of condition-who "./boot/interaction.scm" . 22574))
           (push)
           (ret.subr.gloc.of format "./boot/interaction.scm" . 22552))
         (call
           (push.iloc 6 . 0)
           (apply.gloc.of message-condition? "./boot/interaction.scm" . 23572))
         (if.false.ret)
         (push.iloc 4 . 0)
         (push.const . ": ~a")
         (call (push.iloc 6 . 0) (apply.gloc.of condition-message "./boot/interaction.scm" . 24616))
         (push)
         (ret.subr.gloc.of format "./boot/interaction.scm" . 24596))
       (push.close
         (0 0 . output-irritants)
         (call
           (call
             (push.iloc 6 . 0)
             (apply.gloc.of irritants-condition? "./boot/interaction.scm" . 28699))
           (if.false.ret)
           (call
             (push.iloc 6 . 0)
             (apply.gloc.of condition-irritants "./boot/interaction.scm" . 28731))
           (ret.pair? "./boot/interaction.scm" . 28724))
         (if.true
           (push.iloc 4 . 0)
           (push.const . "~%~%irritants:")
           (subr.gloc.of format 2 "./boot/interaction.scm" . 29718)
           (push.close
             (1 0)
             (push.iloc 5 . 0)
             (push.const . "~% ")
             (subr.gloc.of format 2 "./boot/interaction.scm" . 31778)
             (push.iloc.0 . 0)
             (subr.gloc.of list? 1 "./boot/interaction.scm" . 32809)
             (if.true
               (push.iloc 5 . 0)
               (push.const . " (")
               (subr.gloc.of format 2 "./boot/interaction.scm" . 33833)
               (call
                 (extend.enclose+
                   (1 0 . loop)
                   (iloc.0 . 0)
                   (if.pair?
                     (push.iloc 7 . 0)
                     (push.const . "~a")
                     (push.car.iloc (0 . 0) "./boot/interaction.scm" . 36932)
                     (subr.gloc.of format 3 "./boot/interaction.scm" . 36914)
                     (cdr.iloc (0 . 0) "./boot/interaction.scm" . 37952)
                     (if.pair?
                       (push.iloc 7 . 0)
                       (push.const . " ")
                       (subr.gloc.of format 2 "./boot/interaction.scm" . 38969)
                       (push.cdr.iloc (0 . 0) "./boot/interaction.scm" . 39999)
                       (apply.iloc+ (1 . 0) "./boot/interaction.scm" . 39993))
                     (ret.const.unspec))
                   (ret.const.unspec))
                 (call
                   (push.gloc.of |.L1221|)
                   (push.iloc.1 . 0)
                   (apply.gloc.of map "./boot/interaction.scm" . 34873))
                 (push)
                 (apply.iloc+ (0 . 0) "./boot/interaction.scm" . 35883))
               (push.iloc 5 . 0)
               (push.const . ")")
               (ret.subr.gloc.of format "./boot/interaction.scm" . 41001))
             (push.iloc 5 . 0)
             (push.const . " ~r")
             (push.iloc.0 . 0)
             (ret.subr.gloc.of format "./boot/interaction.scm" . 42030))
           (call
             (push.iloc 6 . 0)
             (apply.gloc.of condition-irritants "./boot/interaction.scm" . 43040))
           (push)
           (apply.gloc.of
             for-each
             (for-each (lambda (|e`4137*|)
                         (format |port`4120*| "~% ")
                         (if (list? |e`4137*|)
                             (begin
                               (format |port`4120*| " (")
                               (letrec* ((|loop`4143*|
                                           (lambda (|lst`4144*|)
                                             (if (pair? |lst`4144*|)
                                                 (begin
                                                   (format |port`4120*| "~a" (car |lst`4144*|))
                                                   (if (pair? (cdr |lst`4144*|))
                                                       (begin
                                                         (format |port`4120*| " ")
                                                         (|loop`4143*| (cdr |lst`4144*|)))
                                                       (|.unspecified|)))
                                                 (|.unspecified|)))))
                                 (|loop`4143*| (map |.L1221| |e`4137*|)))
                               (format |port`4120*| ")"))
                             (format |port`4120*| " ~r" |e`4137*|)))
                       (condition-irritants |c`4116*|))))
         (ret.const.unspec))
       (push.close+
         (0 0 . output-expansion)
         (call (apply.gloc.of expansion-backtrace "./boot/interaction.scm" . 47124))
         (if.false.ret)
         (call
           (touch.gloc.of current-macro-expression)
           (apply.gloc.of current-macro-expression "./boot/interaction.scm" . 48148))
         (if.false.ret)
         (push.const . #f)
         (push.const . #f)
         (extend . 2)
         (push.close
           (0 0)
           (call (apply.gloc.of pretty-print-initial-indent "./boot/interaction.scm" . 51222))
           (set.iloc (1 . 0) "./boot/interaction.scm" . 51222)
           (call (apply.gloc.of pretty-print-maximum-lines "./boot/interaction.scm" . 51222))
           (set.iloc (1 . 1) "./boot/interaction.scm" . 51222)
           (call
             (push.const . 5)
             (apply.gloc.of pretty-print-initial-indent "./boot/interaction.scm" . 51222))
           (push.const . 10)
           (apply.gloc.of pretty-print-maximum-lines "./boot/interaction.scm" . 51222))
         (push.close
           (0 0)
           (push.iloc 6 . 0)
           (push.const . "~%~%expanding:~%  >  ")
           (subr.gloc.of format 2 "./boot/interaction.scm" . 51222)
           (call
             (call
               (touch.gloc.of unrename-private-primitives)
               (call
                 (touch.gloc.of current-macro-expression)
                 (apply.gloc.of current-macro-expression "./boot/interaction.scm" . 52289))
               (push)
               (apply.gloc.of unrename-private-primitives "./boot/interaction.scm" . 52260))
             (push)
             (push.iloc 6 . 0)
             (apply.gloc.of pretty-print "./boot/interaction.scm" . 52246))
           (push.iloc 6 . 0)
           (push.const . "~%  ~n")
           (call
             (touch.gloc.of current-macro-expression)
             (apply.gloc.of current-macro-expression "./boot/interaction.scm" . 53292))
           (push)
           (subr.gloc.of format 3 "./boot/interaction.scm" . 53270)
           (call
             (call
               (touch.gloc.of expansion-trace-level)
               (apply.gloc.of expansion-trace-level "./boot/interaction.scm" . 54303))
             (push)
             (call (apply.gloc.of expansion-backtrace "./boot/interaction.scm" . 54327))
             (push)
             (subr.gloc.of >= 2 "./boot/interaction.scm" . 54299)
             (if.false.ret)
             (push.iloc 6 . 0)
             (push.const . "~%  *  ...")
             (ret.subr.gloc.of format "./boot/interaction.scm" . 55323))
           (push.close
             (1 0)
             (push.iloc 7 . 0)
             (push.const . "~%  *  ")
             (subr.gloc.of format 2 "./boot/interaction.scm" . 57378)
             (call
               (call
                 (touch.gloc.of unrename-private-primitives)
                 (push.iloc.0 . 0)
                 (apply.gloc.of unrename-private-primitives "./boot/interaction.scm" . 58416))
               (push)
               (push.iloc 7 . 0)
               (apply.gloc.of pretty-print "./boot/interaction.scm" . 58402))
             (push.iloc 7 . 0)
             (push.const . "~%  ~n")
             (push.iloc.0 . 0)
             (ret.subr.gloc.of format "./boot/interaction.scm" . 59426))
           (call
             (touch.gloc.of expansion-trace-stack)
             (apply.gloc.of expansion-trace-stack "./boot/interaction.scm" . 60448))
           (push)
           (apply.gloc.of for-each "./boot/interaction.scm" . 56342))
         (push.close
           (0 0)
           (call
             (push.iloc.1 . 0)
             (apply.gloc.of pretty-print-initial-indent "./boot/interaction.scm" . 51222))
           (push.iloc.1 . 1)
           (apply.gloc.of pretty-print-maximum-lines "./boot/interaction.scm" . 51222))
         (apply.gloc.of |.dynamic-wind| "./boot/interaction.scm" . 51222))
       (push.close
         (1 0 . output-condition)
         (call
           (touch.gloc.of dump-condition)
           (apply.gloc.of dump-condition "./boot/interaction.scm" . 64532))
         (if.false.ret)
         (push.iloc 4 . 0)
         (push.const . "~%~%")
         (subr.gloc.of format 2 "./boot/interaction.scm" . 65556)
         (if.false.ret)
         (touch.gloc.of describe-condition)
         (push.iloc 4 . 0)
         (push.iloc.0 . 0)
         (apply.gloc.of describe-condition "./boot/interaction.scm" . 66580))
       (enclose . 4)
       (call (push.iloc 5 . 0) (apply.gloc.of syntax-violation? "./boot/interaction.scm" . 68626))
       (if.true
         (call (apply.iloc (0 . 0) "./boot/interaction.scm" . 69650))
         (call
           (call
             (push.iloc 5 . 0)
             (apply.gloc.of syntax-violation-form "./boot/interaction.scm" . 70681))
           (push)
           (extend . 1)
           (iloc.0 . 0)
           (if.true
             (call
               (call
                 (push.iloc 6 . 0)
                 (apply.gloc.of who-condition? "./boot/interaction.scm" . 72748))
               (if.false.ret)
               (push.iloc 6 . 0)
               (apply.gloc.of condition-who "./boot/interaction.scm" . 72767))
             (push)
             (call (push.iloc.0 . 0) (apply.gloc.of syntax->datum "./boot/interaction.scm" . 72786))
             (if.eq?.ret.const . #t)
             (push.const . #f)
             (extend . 1)
             (push.close
               (0 0)
               (call (apply.gloc.of pretty-print-initial-indent "./boot/interaction.scm" . 74788))
               (set.iloc (1 . 0) "./boot/interaction.scm" . 74788)
               (push.const . 5)
               (apply.gloc.of pretty-print-initial-indent "./boot/interaction.scm" . 74788))
             (push.close
               (0 0)
               (push.iloc 6 . 0)
               (push.const . "~%  >  ")
               (subr.gloc.of format 2 "./boot/interaction.scm" . 74788)
               (call
                 (call
                   (touch.gloc.of unrename-private-primitives)
                   (call
                     (push.iloc 2 . 0)
                     (apply.gloc.of syntax->datum "./boot/interaction.scm" . 75855))
                   (push)
                   (apply.gloc.of unrename-private-primitives "./boot/interaction.scm" . 75826))
                 (push)
                 (push.iloc 6 . 0)
                 (apply.gloc.of pretty-print "./boot/interaction.scm" . 75812))
               (call
                 (call
                   (touch.gloc.of wrapped-syntax-object?)
                   (push.iloc 2 . 0)
                   (apply.gloc.of wrapped-syntax-object? "./boot/interaction.scm" . 76852))
                 (if.true
                   (touch.gloc.of syntax-object-expr)
                   (push.iloc 2 . 0)
                   (apply.gloc.of syntax-object-expr "./boot/interaction.scm" . 76882))
                 (ret.iloc 2 . 0))
               (push)
               (extend . 1)
               (iloc.0 . 0)
               (if.not.pair?.ret.const . #f)
               (push.iloc 7 . 0)
               (push.const . "~%  ~n")
               (push.iloc.0 . 0)
               (ret.subr.gloc.of format "./boot/interaction.scm" . 77880))
             (push.close
               (0 0)
               (push.iloc.1 . 0)
               (apply.gloc.of pretty-print-initial-indent "./boot/interaction.scm" . 74788))
             (apply.gloc.of |.dynamic-wind| "./boot/interaction.scm" . 74788))
           (ret.const.unspec))
         (call
           (call
             (push.iloc 5 . 0)
             (apply.gloc.of syntax-violation-subform "./boot/interaction.scm" . 78873))
           (push)
           (extend . 1)
           (iloc.0 . 0)
           (if.true
             (call
               (call
                 (push.iloc 6 . 0)
                 (apply.gloc.of who-condition? "./boot/interaction.scm" . 80940))
               (if.false.ret)
               (push.iloc 6 . 0)
               (apply.gloc.of condition-who "./boot/interaction.scm" . 80959))
             (push)
             (call (push.iloc.0 . 0) (apply.gloc.of syntax->datum "./boot/interaction.scm" . 80978))
             (if.eq?.ret.const . #t)
             (push.const . #f)
             (extend . 1)
             (push.close
               (0 0)
               (call (apply.gloc.of pretty-print-initial-indent "./boot/interaction.scm" . 82980))
               (set.iloc (1 . 0) "./boot/interaction.scm" . 82980)
               (push.const . 5)
               (apply.gloc.of pretty-print-initial-indent "./boot/interaction.scm" . 82980))
             (push.close
               (0 0)
               (push.iloc 6 . 0)
               (push.const . "~%  @  ")
               (subr.gloc.of format 2 "./boot/interaction.scm" . 82980)
               (call
                 (call
                   (touch.gloc.of unrename-private-primitives)
                   (call
                     (push.iloc 2 . 0)
                     (apply.gloc.of syntax->datum "./boot/interaction.scm" . 84047))
                   (push)
                   (apply.gloc.of unrename-private-primitives "./boot/interaction.scm" . 84018))
                 (push)
                 (push.iloc 6 . 0)
                 (apply.gloc.of pretty-print "./boot/interaction.scm" . 84004))
               (call
                 (call
                   (touch.gloc.of wrapped-syntax-object?)
                   (push.iloc 2 . 0)
                   (apply.gloc.of wrapped-syntax-object? "./boot/interaction.scm" . 85044))
                 (if.true
                   (touch.gloc.of syntax-object-expr)
                   (push.iloc 2 . 0)
                   (apply.gloc.of syntax-object-expr "./boot/interaction.scm" . 85074))
                 (ret.iloc 2 . 0))
               (push)
               (extend . 1)
               (iloc.0 . 0)
               (if.not.pair?.ret.const . #f)
               (push.iloc 7 . 0)
               (push.const . "~%  ~n")
               (push.iloc.0 . 0)
               (ret.subr.gloc.of format "./boot/interaction.scm" . 86072))
             (push.close
               (0 0)
               (push.iloc.1 . 0)
               (apply.gloc.of pretty-print-initial-indent "./boot/interaction.scm" . 82980))
             (apply.gloc.of |.dynamic-wind| "./boot/interaction.scm" . 82980))
           (ret.const.unspec))
         (call (push.iloc 5 . 0) (apply.iloc (0 . 3) "./boot/interaction.scm" . 87058))
         (call
           (push.iloc 5 . 0)
           (apply.gloc.of syntax-violation-form "./boot/interaction.scm" . 88092))
         (push)
         (call
           (push.iloc 5 . 0)
           (apply.gloc.of syntax-violation-subform "./boot/interaction.scm" . 88123))
         (push)
         (extend . 2)
         (call
           (call
             (touch.gloc.of wrapped-syntax-object?)
             (push.iloc.0 . 0)
             (apply.gloc.of wrapped-syntax-object? "./boot/interaction.scm" . 89122))
           (if.true
             (touch.gloc.of syntax-object-expr)
             (push.iloc.0 . 0)
             (apply.gloc.of syntax-object-expr "./boot/interaction.scm" . 89150))
           (ret.iloc 0 . 0))
         (push)
         (call
           (call
             (touch.gloc.of wrapped-syntax-object?)
             (push.iloc.0 . 1)
             (apply.gloc.of wrapped-syntax-object? "./boot/interaction.scm" . 90146))
           (if.true
             (touch.gloc.of syntax-object-expr)
             (push.iloc.0 . 1)
             (apply.gloc.of syntax-object-expr "./boot/interaction.scm" . 90174))
           (ret.iloc 0 . 1))
         (push)
         (extend . 2)
         (call
           (call
             (touch.gloc.of expansion-trace-stack)
             (apply.gloc.of expansion-trace-stack "./boot/interaction.scm" . 91174))
           (if.not.null?.ret.const . #f)
           (call
             (touch.gloc.of current-macro-expression)
             (apply.gloc.of current-macro-expression "./boot/interaction.scm" . 92200))
           (push)
           (iloc.0 . 0)
           (if.eq?.ret.const . #t)
           (call
             (touch.gloc.of current-macro-expression)
             (apply.gloc.of current-macro-expression "./boot/interaction.scm" . 93224))
           (push)
           (iloc.0 . 1)
           (ret.eq? "./boot/interaction.scm" . 93219))
         (if.true.ret)
         (apply.iloc+ (2 . 2) "./boot/interaction.scm" . 94234))
       (call
         (push.iloc 5 . 0)
         (apply.gloc.of undefined-violation? "./boot/interaction.scm" . 96274))
       (if.true
         (push.iloc 3 . 0)
         (push.const . "error: unbound variable")
         (subr.gloc.of format 2 "./boot/interaction.scm" . 97298)
         (call
           (call (push.iloc 5 . 0) (apply.gloc.of who-condition? "./boot/interaction.scm" . 98327))
           (if.false.ret)
           (push.iloc 3 . 0)
           (push.const . " ~u")
           (call (push.iloc 5 . 0) (apply.gloc.of condition-who "./boot/interaction.scm" . 99370))
           (push)
           (ret.subr.gloc.of format "./boot/interaction.scm" . 99351))
         (call
           (call
             (push.iloc 5 . 0)
             (apply.gloc.of message-condition? "./boot/interaction.scm" . 100375))
           (if.false.ret)
           (push.iloc 3 . 0)
           (push.const . ", ~a")
           (call
             (push.iloc 5 . 0)
             (apply.gloc.of condition-message "./boot/interaction.scm" . 101419))
           (push)
           (ret.subr.gloc.of format "./boot/interaction.scm" . 101399))
         (call (apply.iloc (0 . 1) "./boot/interaction.scm" . 102418))
         (call (push.iloc 5 . 0) (apply.iloc (0 . 3) "./boot/interaction.scm" . 103442))
         (apply.iloc+ (0 . 2) "./boot/interaction.scm" . 104466))
       (call (push.iloc 5 . 0) (apply.gloc.of error? "./boot/interaction.scm" . 106514))
       (if.true
         (call (apply.iloc (0 . 0) "./boot/interaction.scm" . 107538))
         (call (apply.iloc (0 . 1) "./boot/interaction.scm" . 108562))
         (call (push.iloc 5 . 0) (apply.iloc (0 . 3) "./boot/interaction.scm" . 109586))
         (apply.iloc+ (0 . 2) "./boot/interaction.scm" . 110610))
       (call (push.iloc 5 . 0) (apply.gloc.of violation? "./boot/interaction.scm" . 112658))
       (if.true
         (call (apply.iloc (0 . 0) "./boot/interaction.scm" . 113682))
         (call (apply.iloc (0 . 1) "./boot/interaction.scm" . 114706))
         (call (push.iloc 5 . 0) (apply.iloc (0 . 3) "./boot/interaction.scm" . 115730))
         (apply.iloc+ (0 . 2) "./boot/interaction.scm" . 116754))
       (call (push.iloc 5 . 0) (apply.gloc.of warning? "./boot/interaction.scm" . 118802))
       (if.true
         (push.iloc 3 . 0)
         (push.const . "warning")
         (subr.gloc.of format 2 "./boot/interaction.scm" . 119826)
         (call
           (call (push.iloc 5 . 0) (apply.gloc.of who-condition? "./boot/interaction.scm" . 120855))
           (if.false.ret)
           (push.iloc 3 . 0)
           (push.const . " in ~u")
           (call (push.iloc 5 . 0) (apply.gloc.of condition-who "./boot/interaction.scm" . 121901))
           (push)
           (ret.subr.gloc.of format "./boot/interaction.scm" . 121879))
         (call
           (call
             (push.iloc 5 . 0)
             (apply.gloc.of message-condition? "./boot/interaction.scm" . 122903))
           (if.false.ret)
           (push.iloc 3 . 0)
           (push.const . ": ~a")
           (call
             (push.iloc 5 . 0)
             (apply.gloc.of condition-message "./boot/interaction.scm" . 123947))
           (push)
           (ret.subr.gloc.of format "./boot/interaction.scm" . 123927))
         (call (apply.iloc (0 . 1) "./boot/interaction.scm" . 124946))
         (call (push.iloc 5 . 0) (apply.iloc (0 . 3) "./boot/interaction.scm" . 125970))
         (apply.iloc+ (0 . 2) "./boot/interaction.scm" . 126994))
       (call (push.iloc 5 . 0) (apply.gloc.of condition? "./boot/interaction.scm" . 129042))
       (if.true
         (push.iloc 3 . 0)
         (push.const . "error: unknown type of exception caught~%~%irritants:~%~a")
         (call
           (touch.gloc.of describe-condition)
           (push.const . #f)
           (push.iloc 5 . 0)
           (apply.gloc.of describe-condition "./boot/interaction.scm" . 130139))
         (push)
         (subr.gloc.of format 3 "./boot/interaction.scm" . 130066)
         (call (apply.iloc (0 . 1) "./boot/interaction.scm" . 131090))
         (apply.iloc+ (0 . 2) "./boot/interaction.scm" . 132114))
       (push.iloc 3 . 0)
       (push.const . "error: unknown type of exception caught, ~a")
       (push.iloc 5 . 0)
       (subr.gloc.of format 3 "./boot/interaction.scm" . 135186)
       (call (apply.iloc (0 . 1) "./boot/interaction.scm" . 136210))
       (apply.iloc+ (0 . 2) "./boot/interaction.scm" . 137234))
     (push.close
       (0 0)
       (call
         (push.iloc.1 . 0)
         (apply.gloc.of pretty-print-line-length "./boot/interaction.scm" . 16395))
       (call
         (push.iloc.1 . 1)
         (apply.gloc.of pretty-print-maximum-lines "./boot/interaction.scm" . 16395))
       (push.iloc.1 . 2)
       (apply.gloc.of pretty-print-unwrap-syntax "./boot/interaction.scm" . 16395))
     (apply.gloc.of
       |.dynamic-wind|
       (|.dynamic-wind|
         (lambda ()
           (set! |tmp1`4123`4127*| (pretty-print-line-length))
           (set! |tmp1`4124`4127*| (pretty-print-maximum-lines))
           (set! |tmp1`4125`4127*| (pretty-print-unwrap-syntax))
           (pretty-print-line-length |tmp2`4123`4127*|)
           (pretty-print-maximum-lines 5)
           (pretty-print-unwrap-syntax #t))
         (lambda ()
           (letrec* ((|output-who-message`4132*|
                       (lambda ()
                         (format |port`4120*| "error")
                         (and (who-condition? |c`4116*|)
                              (if (string? (condition-who |c`4116*|))
                                  (format |port`4120*| " in ~a" (condition-who |c`4116*|))
                                  (format |port`4120*| " in ~u" (condition-who |c`4116*|))))
                         (and (message-condition? |c`4116*|)
                              (format |port`4120*| ": ~a" (condition-message |c`4116*|)))))
                     (|output-irritants`4132*|
                       (lambda ()
                         (if (and (irritants-condition? |c`4116*|)
                                  (pair? (condition-irritants |c`4116*|)))
                             (begin
                               (format |port`4120*| "~%~%irritants:")
                               (for-each (lambda (|e`4137*|)
                                           (format |port`4120*| "~% ")
                                           (if (list? |e`4137*|)
                                               (begin
                                                 (format |port`4120*| " (")
                                                 (letrec* ((|loop`4143*|
                                                             (lambda (|lst`4144*|)
                                                               (if (pair? |lst`4144*|)
                                                                   (begin
                                                                     (format
                                                                       |port`4120*|
                                                                       "~a"
                                                                       (car |lst`4144*|))
                                                                     (if (pair? (cdr |lst`4144*|))
                                                                         (begin
                                                                           (format |port`4120*| " ")
                                                                           (|loop`4143*|
                                                                             (cdr |lst`4144*|)))
                                                                         (|.unspecified|)))
                                                                   (|.unspecified|)))))
                                                   (|loop`4143*| (map |.L1221| |e`4137*|)))
                                                 (format |port`4120*| ")"))
                                               (format |port`4120*| " ~r" |e`4137*|)))
                                         (condition-irritants |c`4116*|)))
                             (|.unspecified|))))
                     (|output-expansion`4132*|
                       (lambda ()
                         (and (expansion-backtrace)
                              (current-macro-expression)
                              (let ((|tmp1`4150`4153*| #f) (|tmp1`4151`4153*| #f))
                                (|.dynamic-wind|
                                  (lambda ()
                                    (set! |tmp1`4150`4153*| (pretty-print-initial-indent))
                                    (set! |tmp1`4151`4153*| (pretty-print-maximum-lines))
                                    (pretty-print-initial-indent 5)
                                    (pretty-print-maximum-lines 10))
                                  (lambda ()
                                    (format |port`4120*| "~%~%expanding:~%  >  ")
                                    (pretty-print
                                      (unrename-private-primitives (current-macro-expression))
                                      |port`4120*|)
                                    (format |port`4120*| "~%  ~n" (current-macro-expression))
                                    (and (>= (expansion-trace-level) (expansion-backtrace))
                                         (format |port`4120*| "~%  *  ..."))
                                    (for-each (lambda (|e`4159*|)
                                                (format |port`4120*| "~%  *  ")
                                                (pretty-print
                                                  (unrename-private-primitives |e`4159*|)
                                                  |port`4120*|)
                                                (format |port`4120*| "~%  ~n" |e`4159*|))
                                              (expansion-trace-stack)))
                                  (lambda ()
                                    (pretty-print-initial-indent |tmp1`4150`4153*|)
                                    (pretty-print-maximum-lines |tmp1`4151`4153*|)))))))
                     (|output-condition`4132*|
                       (lambda (|c`4163*|)
                         (and (dump-condition)
                              (format |port`4120*| "~%~%")
                              (describe-condition |port`4120*| |c`4163*|)))))
             (if (syntax-violation? |c`4116*|)
                 (begin
                   (|output-who-message`4132*|)
                   (let ((|.L1219`4165*| (syntax-violation-form |c`4116*|)))
                     (if |.L1219`4165*|
                         (or (eq?
                               (and (who-condition? |c`4116*|) (condition-who |c`4116*|))
                               (syntax->datum |.L1219`4165*|))
                             (let ((|tmp1`4170`4172*| #f))
                               (|.dynamic-wind|
                                 (lambda ()
                                   (set! |tmp1`4170`4172*| (pretty-print-initial-indent))
                                   (pretty-print-initial-indent 5))
                                 (lambda ()
                                   (format |port`4120*| "~%  >  ")
                                   (pretty-print
                                     (unrename-private-primitives (syntax->datum |.L1219`4165*|))
                                     |port`4120*|)
                                   (let ((|form`4178*|
                                           (if (wrapped-syntax-object? |.L1219`4165*|)
                                               (syntax-object-expr |.L1219`4165*|)
                                               |.L1219`4165*|)))
                                     (and (pair? |form`4178*|)
                                          (format |port`4120*| "~%  ~n" |form`4178*|))))
                                 (lambda () (pretty-print-initial-indent |tmp1`4170`4172*|)))))
                         (|.unspecified|)))
                   (let ((|.L1220`4182*| (syntax-violation-subform |c`4116*|)))
                     (if |.L1220`4182*|
                         (or (eq?
                               (and (who-condition? |c`4116*|) (condition-who |c`4116*|))
                               (syntax->datum |.L1220`4182*|))
                             (let ((|tmp1`4187`4189*| #f))
                               (|.dynamic-wind|
                                 (lambda ()
                                   (set! |tmp1`4187`4189*| (pretty-print-initial-indent))
                                   (pretty-print-initial-indent 5))
                                 (lambda ()
                                   (format |port`4120*| "~%  @  ")
                                   (pretty-print
                                     (unrename-private-primitives (syntax->datum |.L1220`4182*|))
                                     |port`4120*|)
                                   (let ((|form`4195*|
                                           (if (wrapped-syntax-object? |.L1220`4182*|)
                                               (syntax-object-expr |.L1220`4182*|)
                                               |.L1220`4182*|)))
                                     (and (pair? |form`4195*|)
                                          (format |port`4120*| "~%  ~n" |form`4195*|))))
                                 (lambda () (pretty-print-initial-indent |tmp1`4187`4189*|)))))
                         (|.unspecified|)))
                   (|output-condition`4132*| |c`4116*|)
                   (let ((|e1`4199*| (syntax-violation-form |c`4116*|))
                         (|e2`4199*| (syntax-violation-subform |c`4116*|)))
                     (let ((|e1`4201*|
                             (if (wrapped-syntax-object? |e1`4199*|)
                                 (syntax-object-expr |e1`4199*|)
                                 |e1`4199*|))
                           (|e2`4201*|
                             (if (wrapped-syntax-object? |e2`4199*|)
                                 (syntax-object-expr |e2`4199*|)
                                 |e2`4199*|)))
                       (or (and (null? (expansion-trace-stack))
                                (or (eq? (current-macro-expression) |e1`4201*|)
                                    (eq? (current-macro-expression) |e2`4201*|)))
                           (|output-expansion`4132*|)))))
                 (if (undefined-violation? |c`4116*|)
                     (begin
                       (format |port`4120*| "error: unbound variable")
                       (and (who-condition? |c`4116*|)
                            (format |port`4120*| " ~u" (condition-who |c`4116*|)))
                       (and (message-condition? |c`4116*|)
                            (format |port`4120*| ", ~a" (condition-message |c`4116*|)))
                       (|output-irritants`4132*|)
                       (|output-condition`4132*| |c`4116*|)
                       (|output-expansion`4132*|))
                     (if (error? |c`4116*|)
                         (begin
                           (|output-who-message`4132*|)
                           (|output-irritants`4132*|)
                           (|output-condition`4132*| |c`4116*|)
                           (|output-expansion`4132*|))
                         (if (violation? |c`4116*|)
                             (begin
                               (|output-who-message`4132*|)
                               (|output-irritants`4132*|)
                               (|output-condition`4132*| |c`4116*|)
                               (|output-expansion`4132*|))
                             (if (warning? |c`4116*|)
                                 (begin
                                   (format |port`4120*| "warning")
                                   (and (who-condition? |c`4116*|)
                                        (format |port`4120*| " in ~u" (condition-who |c`4116*|)))
                                   (and (message-condition? |c`4116*|)
                                        (format |port`4120*| ": ~a" (condition-message |c`4116*|)))
                                   (|output-irritants`4132*|)
                                   (|output-condition`4132*| |c`4116*|)
                                   (|output-expansion`4132*|))
                                 (if (condition? |c`4116*|)
                                     (begin
                                       (format
                                         |port`4120*|
                                         "error: unknown type of exception caught~%~%irritants:~%~a"
                                         (describe-condition #f |c`4116*|))
                                       (|output-irritants`4132*|)
                                       (|output-expansion`4132*|))
                                     (begin
                                       (format
                                         |port`4120*|
                                         "error: unknown type of exception caught, ~a"
                                         |c`4116*|)
                                       (|output-irritants`4132*|)
                                       (|output-expansion`4132*|))))))))))
         (lambda ()
           (pretty-print-line-length |tmp1`4123`4127*|)
           (pretty-print-maximum-lines |tmp1`4124`4127*|)
           (pretty-print-unwrap-syntax |tmp1`4125`4127*|)))))
   (push.iloc.0 . 0)
   (push.const . "~%")
   (subr.gloc.of format 2 "./boot/interaction.scm" . 139273)
   (call
     (push.const . "EMACS")
     (subr.gloc.of lookup-process-environment 1 "./boot/interaction.scm" . 140316)
     (if.true.ret)
     (subr.gloc.of current-input-port 0)
     (push)
     (push.subr.gloc.of port-device-subtype 1 "./boot/interaction.scm" . 140363)
     (push.const . char)
     (push.subr.gloc.of eq? 2 "./boot/interaction.scm" . 140358)
     (ret.subr.gloc.of not "./boot/interaction.scm" . 140353))
   (push)
   (extend . 1)
   (call
     (call (push.iloc 3 . 0) (apply.gloc.of serious-condition? "./boot/interaction.scm" . 141328))
     (if.false.ret)
     (push.iloc.1 . 0)
     (ret.subr.gloc.of display-backtrace "./boot/interaction.scm" . 141351))
   (iloc.0 . 0)
   (if.true
     (push.iloc 2 . 0)
     (push.const . "~a~!")
     (push.iloc.1 . 0)
     (push.subr.gloc.of extract-accumulated-string 1 "./boot/interaction.scm" . 143394)
     (ret.subr.gloc.of format "./boot/interaction.scm" . 143375))
   (push.iloc 2 . 0)
   (push.const . "~%~a~%~!")
   (push.iloc.1 . 0)
   (push.subr.gloc.of extract-accumulated-string 1 "./boot/interaction.scm" . 144422)
   (ret.subr.gloc.of format "./boot/interaction.scm" . 144399))
 (set.gloc.of default-exception-printer)
 (ret.const.unspec))
((close
   (1 0)
   (iloc.0 . 0)
   (if.true
     (push.iloc.0 . 0)
     (subr.gloc.of procedure? 1 "./boot/interaction.scm" . 150556)
     (if.true (ret.iloc 0 . 0))
     (push.const . current-exception-printer)
     (push.const . "expected procedure or #f, but got ~s")
     (push.iloc.0 . 0)
     (push.subr.gloc.of format 2 "./boot/interaction.scm" . 154653)
     (apply.gloc.of assertion-violation "./boot/interaction.scm" . 152604))
   (ret.gloc.of values))
 (set.gloc.of |.L1225|)
 (call
   (push.gloc.of default-exception-printer)
   (push.gloc.of |.L1225|)
   (apply.gloc.of make-parameter "./boot/interaction.scm" . 148499))
 (set.gloc.of current-exception-printer)
 (ret.const.unspec))
((close
   (1 0 . add-load-path)
   (push.iloc.0 . 0)
   (subr.gloc.of string? 1 "./boot/interaction.scm" . 158732)
   (if.true
     (call
       (push.iloc.0 . 0)
       (push.const . "")
       (subr.gloc.of string=? 2 "./boot/interaction.scm" . 159760)
       (if.true.ret)
       (call
         (touch.gloc.of expand-path)
         (push.iloc.0 . 0)
         (apply.gloc.of expand-path "./boot/interaction.scm" . 160796))
       (push)
       (extend . 1)
       (push.iloc.0 . 0)
       (call (apply.gloc.of scheme-load-paths "./boot/interaction.scm" . 161827))
       (push)
       (subr.gloc.of member 2 "./boot/interaction.scm" . 161814)
       (if.true.ret)
       (push.iloc.0 . 0)
       (call (apply.gloc.of scheme-load-paths "./boot/interaction.scm" . 162868))
       (push.cons)
       (apply.gloc.of scheme-load-paths "./boot/interaction.scm" . 162838))
     (apply.gloc.of scheme-load-paths "./boot/interaction.scm" . 163852))
   (push.const . add-load-path)
   (push.const . "expected string, but got ~s")
   (push.iloc.0 . 0)
   (push.subr.gloc.of format 2 "./boot/interaction.scm" . 165936)
   (apply.gloc.of assertion-violation "./boot/interaction.scm" . 165900))
 (set.gloc.of add-load-path)
 (ret.const.unspec))
((close
   (1 0 . add-library-path)
   (push.iloc.0 . 0)
   (subr.gloc.of string? 1 "./boot/interaction.scm" . 169996)
   (if.true
     (call
       (push.iloc.0 . 0)
       (push.const . "")
       (subr.gloc.of string=? 2 "./boot/interaction.scm" . 171024)
       (if.true.ret)
       (call
         (touch.gloc.of expand-path)
         (push.iloc.0 . 0)
         (apply.gloc.of expand-path "./boot/interaction.scm" . 172060))
       (push)
       (extend . 1)
       (push.iloc.0 . 0)
       (call (apply.gloc.of scheme-library-paths "./boot/interaction.scm" . 173091))
       (push)
       (subr.gloc.of member 2 "./boot/interaction.scm" . 173078)
       (if.true.ret)
       (push.iloc.0 . 0)
       (call (apply.gloc.of scheme-library-paths "./boot/interaction.scm" . 174135))
       (push.cons)
       (apply.gloc.of scheme-library-paths "./boot/interaction.scm" . 174102))
     (apply.gloc.of scheme-library-paths "./boot/interaction.scm" . 175116))
   (push.const . add-library-path)
   (push.const . "expected string, but got ~s")
   (push.iloc.0 . 0)
   (push.subr.gloc.of format 2 "./boot/interaction.scm" . 177203)
   (apply.gloc.of assertion-violation "./boot/interaction.scm" . 177164))
 (set.gloc.of add-library-path)
 (ret.const.unspec))
((close
   (0 0 . home-directory)
   (push.const . "~/")
   (call
     (push.const . operating-system)
     (push.subr.gloc.of architecture-feature 1 "./boot/interaction.scm" . 183335)
     (push.const . "windows")
     (subr.gloc.of string-contains 2 "./boot/interaction.scm" . 183318)
     (if.true
       (call
         (push.const . "HOMEDRIVE")
         (subr.gloc.of lookup-process-environment 1 "./boot/interaction.scm" . 184361)
         (if.true.ret)
         (ret.const . ""))
       (push)
       (call
         (push.const . "HOMEPATH")
         (subr.gloc.of lookup-process-environment 1 "./boot/interaction.scm" . 185385)
         (if.true.ret)
         (ret.const . ""))
       (push)
       (ret.subr.gloc.of string-append "./boot/interaction.scm" . 184342))
     (push.const . "HOME")
     (subr.gloc.of lookup-process-environment 1 "./boot/interaction.scm" . 186394)
     (if.true.ret)
     (ret.const . ""))
   (push)
   (push.subr.gloc.of format 2 "./boot/interaction.scm" . 181265)
   (extend . 1)
   (push.iloc.0 . 0)
   (subr.gloc.of file-exists? 1 "./boot/interaction.scm" . 187404)
   (if.false.ret)
   (ret.iloc 0 . 0))
 (set.gloc.of home-directory)
 (ret.const.unspec))
((close
   (0 1 . process)
   (push.gloc.of process-spawn)
   (push.const . #t)
   (push.const . #f)
   (push.const . #f)
   (push.const . #f)
   (push.const . #f)
   (push.iloc.0 . 0)
   (apply.gloc.of apply "./boot/interaction.scm" . 189470))
 (set.gloc.of process)
 (ret.const.unspec))
((close
   (1 0 . process-shell-command)
   (push.const . operating-system)
   (push.subr.gloc.of architecture-feature 1 "./boot/interaction.scm" . 193565)
   (push.const . "windows")
   (subr.gloc.of string-contains 2 "./boot/interaction.scm" . 193548)
   (if.true
     (call
       (push.const . "COMSPEC")
       (subr.gloc.of getenv 1 "./boot/interaction.scm" . 194585)
       (if.true.ret)
       (ret.const . "cmd.exe"))
     (push)
     (push.const . "/c")
     (push.iloc.0 . 0)
     (apply.gloc.of process "./boot/interaction.scm" . 194572))
   (call
     (push.const . "SHELL")
     (subr.gloc.of getenv 1 "./boot/interaction.scm" . 196633)
     (if.true.ret)
     (ret.const . "/bin/sh"))
   (push)
   (push.const . "-c")
   (push.iloc.0 . 0)
   (apply.gloc.of process "./boot/interaction.scm" . 196620))
 (set.gloc.of process-shell-command)
 (ret.const.unspec))
((close
   (1 1 . apply-scheme-proc-assistant)
   (push.const . #f)
   (call
     (touch.gloc.of recursion-level)
     (apply.gloc.of recursion-level "./boot/interaction.scm" . 200733))
   (push)
   (extend . 2)
   (push.close
     (0 0)
     (call
       (touch.gloc.of recursion-level)
       (apply.gloc.of recursion-level "./boot/interaction.scm" . 203799))
     (=.iloc (1 . 1) "./boot/interaction.scm" . 203790)
     (if.false.call
       (push.const . #f)
       (push.const . "scheme continuation interleave with c/c++ continuation")
       (apply.gloc.of assertion-violation "./boot/interaction.scm" . 204814))
     (const . #f)
     (set.iloc (1 . 0) "./boot/interaction.scm" . 205834)
     (ret.const.unspec))
   (push.close
     (0 0)
     (push.close
       (1 0)
       (const . #t)
       (set.iloc (2 . 0) "./boot/interaction.scm" . 209933)
       (push.iloc.0 . 0)
       (apply.gloc.of raise "./boot/interaction.scm" . 210957))
     (push.close
       (0 0)
       (push.iloc 3 . 0)
       (push.iloc 3 . 1)
       (apply.gloc.of apply "./boot/interaction.scm" . 213005))
     (apply.gloc.of with-exception-handler "./boot/interaction.scm" . 207882))
   (push.close
     (0 0)
     (iloc.1 . 0)
     (if.false.ret)
     (touch.gloc.of escape)
     (apply.gloc.of escape "./boot/interaction.scm" . 215061))
   (apply.gloc.of dynamic-wind "./boot/interaction.scm" . 201735))
 (set.gloc.of apply-scheme-proc-assistant)
 (ret.const.unspec))
((close
   (0 0 . nonblock-skip-whitespace)
   (subr.gloc.of current-input-port 0)
   (push)
   (subr.gloc.of nonblock-byte-ready? 1 "./boot/interaction.scm" . 219146)
   (if.false.ret)
   (call
     (subr.gloc.of current-input-port 0)
     (push)
     (push.subr.gloc.of lookahead-char 1 "./boot/interaction.scm" . 220180)
     (extend . 1)
     (push.iloc.0 . 0)
     (subr.gloc.of eof-object? 1 "./boot/interaction.scm" . 221206)
     (if.true.ret.const . #f)
     (push.iloc.0 . 0)
     (ret.subr.gloc.of char-whitespace? "./boot/interaction.scm" . 222225))
   (if.false.ret)
   (subr.gloc.of current-input-port 0)
   (push)
   (subr.gloc.of get-char 1 "./boot/interaction.scm" . 223242)
   (if.false.ret)
   (touch.gloc.of nonblock-skip-whitespace)
   (apply.gloc.of nonblock-skip-whitespace "./boot/interaction.scm" . 224266))
 (set.gloc.of nonblock-skip-whitespace)
 (ret.const.unspec))
((close
   (0 0)
   (touch.gloc.of |loop`4255*|)
   (apply.gloc.of |loop`4255*| "./boot/interaction.scm" . 230409))
 (set.gloc.of |.L1240|)
 (close
   (0 0 . loop)
   (subr.gloc.of current-input-port 0)
   (push)
   (subr.gloc.of nonblock-byte-ready? 1 "./boot/interaction.scm" . 230416)
   (if.true.ret)
   (push.const . 10000)
   (subr.gloc.of usleep 1 "./boot/interaction.scm" . 232464)
   (touch.gloc.of |loop`4255*|)
   (apply.gloc.of |loop`4255*| "./boot/interaction.scm" . 233488))
 (set.gloc.of |loop`4255*|)
 (close
   (0 0 . nonblock-input-wait)
   (push.const . #f)
   (extend . 1)
   (push.close
     (0 0)
     (subr.gloc.of collect-stack-notify 0 "./boot/interaction.scm" . 229383)
     (set.iloc (1 . 0) "./boot/interaction.scm" . 229383)
     (push.const . #f)
     (ret.subr.gloc.of collect-stack-notify (collect-stack-notify #f)))
   (push.gloc.of |.L1240|)
   (push.close
     (0 0)
     (push.iloc.1 . 0)
     (ret.subr.gloc.of collect-stack-notify "./boot/interaction.scm" . 229383))
   (apply.gloc.of
     |.dynamic-wind|
     (|.dynamic-wind|
       (lambda () (set! |tmp1`4246`4248*| (collect-stack-notify)) (collect-stack-notify #f))
       |.L1240|
       (lambda () (collect-stack-notify |tmp1`4246`4248*|)))))
 (set.gloc.of nonblock-input-wait)
 (ret.const.unspec))
((close
   (0 0 . read-eval-print-loop)
   (call
     (push.const . "EMACS")
     (subr.gloc.of lookup-process-environment 1 "./boot/interaction.scm" . 237592)
     (if.true.ret)
     (subr.gloc.of current-input-port 0)
     (push)
     (push.subr.gloc.of port-device-subtype 1 "./boot/interaction.scm" . 237639)
     (push.const . char)
     (push.subr.gloc.of eq? 2 "./boot/interaction.scm" . 237634)
     (ret.subr.gloc.of not "./boot/interaction.scm" . 237629))
   (push)
   (extend . 1)
   (extend.enclose
     (0 0 . loop)
     (call
       (push.close
         (1 0)
         (push.close
           (1 0)
           (subr.gloc.of current-output-port 0)
           (push)
           (subr.gloc.of flush-output-port 1 "./boot/interaction.scm" . 243727)
           (call
             (push.iloc.0 . 0)
             (call (apply.gloc.of current-exception-printer "./boot/interaction.scm" . 244752))
             (apply))
           (call
             (push.iloc.0 . 0)
             (apply.gloc.of serious-condition? "./boot/interaction.scm" . 245780))
           (if.false.ret)
           (apply.iloc (1 . 0) "./boot/interaction.scm" . 245803))
         (push.close
           (0 0)
           (call
             (touch.gloc.of nonblock-skip-whitespace)
             (apply.gloc.of nonblock-skip-whitespace "./boot/interaction.scm" . 247823))
           (call
             (subr.gloc.of current-environment 0)
             (push)
             (subr.gloc.of interaction-environment 0 "./boot/interaction.scm" . 248878)
             (if.eq?
               (push.const . #t)
               (push.const . "~&> ~!")
               (ret.subr.gloc.of format "./boot/interaction.scm" . 249875))
             (push.const . #t)
             (push.const . "~&~a: ~!")
             (subr.gloc.of current-environment 0)
             (push)
             (ret.subr.gloc.of format "./boot/interaction.scm" . 250899))
           (call
             (touch.gloc.of nonblock-input-wait)
             (apply.gloc.of nonblock-input-wait "./boot/interaction.scm" . 251919))
           (call
             (touch.gloc.of current-macro-expression)
             (push.const . #f)
             (apply.gloc.of current-macro-expression "./boot/interaction.scm" . 252943))
           (subr.gloc.of make-core-hashtable 0)
           (push)
           (subr.gloc.of current-source-comments 1 "./boot/interaction.scm" . 253967)
           (call
             (touch.gloc.of current-temporaries)
             (push.const . string=?)
             (push.subr.gloc.of make-core-hashtable 1 "./boot/interaction.scm" . 255012)
             (apply.gloc.of current-temporaries "./boot/interaction.scm" . 254991))
           (call
             (touch.gloc.of set-port-current-line!)
             (subr.gloc.of current-input-port 0)
             (push)
             (push.const . 1)
             (apply.gloc.of set-port-current-line! "./boot/interaction.scm" . 256015))
           (call
             (touch.gloc.of set-port-current-column!)
             (subr.gloc.of current-output-port 0)
             (push)
             (push.const . 1)
             (apply.gloc.of set-port-current-column! "./boot/interaction.scm" . 257039))
           (call
             (touch.gloc.of set-port-current-column!)
             (subr.gloc.of current-error-port 0)
             (push)
             (push.const . 1)
             (apply.gloc.of set-port-current-column! "./boot/interaction.scm" . 258063))
           (subr.gloc.of current-input-port 0)
           (push)
           (subr.gloc.of current-source-comments 0)
           (push)
           (push.const . read)
           (push.subr.gloc.of core-read 3 "./boot/interaction.scm" . 259099)
           (extend . 1)
           (call
             (push.iloc.0 . 0)
             (subr.gloc.of eof-object? 1 "./boot/interaction.scm" . 260118)
             (if.false.ret)
             (push.const . 0)
             (ret.subr.gloc.of exit "./boot/interaction.scm" . 260137))
           (call
             (iloc 5 . 0)
             (if.false.ret)
             (push.const . #t)
             (push.const . "~%~!")
             (ret.subr.gloc.of format "./boot/interaction.scm" . 261150))
           (call
             (touch.gloc.of interpret)
             (push.iloc.0 . 0)
             (apply.gloc.of interpret "./boot/interaction.scm" . 262172))
           (push)
           (extend . 1)
           (push.iloc.0 . 0)
           (subr.gloc.of unspecified? 1 "./boot/interaction.scm" . 263194)
           (if.true.ret)
           (call (push.iloc.0 . 0) (apply.gloc.of pretty-print "./boot/interaction.scm" . 265242))
           (subr.gloc.of current-output-port 0)
           (push)
           (ret.subr.gloc.of flush-output-port "./boot/interaction.scm" . 266266))
         (apply.gloc.of with-exception-handler "./boot/interaction.scm" . 241676))
       (apply.gloc.of call-with-current-continuation "./boot/interaction.scm" . 239625))
     (apply.iloc (1 . 0) "./boot/interaction.scm" . 267273))
   (apply.iloc (0 . 0) "./boot/interaction.scm" . 239625))
 (set.gloc.of read-eval-print-loop)
 (ret.const.unspec))
((close
   (0 0)
   (call
     (touch.gloc.of nonblock-skip-whitespace)
     (apply.gloc.of nonblock-skip-whitespace "./boot/interaction.scm" . 280589))
   (call
     (touch.gloc.of nonblock-input-wait)
     (apply.gloc.of nonblock-input-wait "./boot/interaction.scm" . 281613))
   (call
     (touch.gloc.of current-macro-expression)
     (push.const . #f)
     (apply.gloc.of current-macro-expression "./boot/interaction.scm" . 282637))
   (subr.gloc.of make-core-hashtable 0)
   (push)
   (subr.gloc.of current-source-comments 1 "./boot/interaction.scm" . 283661)
   (call
     (touch.gloc.of current-temporaries)
     (push.const . string=?)
     (push.subr.gloc.of make-core-hashtable 1 "./boot/interaction.scm" . 284706)
     (apply.gloc.of current-temporaries "./boot/interaction.scm" . 284685))
   (subr.gloc.of current-input-port 0)
   (push)
   (subr.gloc.of current-source-comments 0)
   (push)
   (push.const . read)
   (push.subr.gloc.of core-read 3 "./boot/interaction.scm" . 285721)
   (extend . 1)
   (push.iloc.0 . 0)
   (subr.gloc.of eof-object? 1 "./boot/interaction.scm" . 286742)
   (if.true (push.const . 0) (ret.subr.gloc.of exit "./boot/interaction.scm" . 286761))
   (call
     (touch.gloc.of interpret)
     (push.iloc.0 . 0)
     (apply.gloc.of interpret "./boot/interaction.scm" . 288790))
   (subr.gloc.of current-output-port 0)
   (push)
   (ret.subr.gloc.of flush-output-port "./boot/interaction.scm" . 289814))
 (set.gloc.of |.L1249|)
 (close
   (1 0)
   (subr.gloc.of current-output-port 0)
   (push)
   (subr.gloc.of flush-output-port 1 "./boot/interaction.scm" . 276493)
   (call
     (push.iloc.0 . 0)
     (call (apply.gloc.of current-exception-printer "./boot/interaction.scm" . 277518))
     (apply))
   (call (push.iloc.0 . 0) (apply.gloc.of serious-condition? "./boot/interaction.scm" . 278546))
   (if.false.ret)
   (push.const . #f)
   (ret.subr.gloc.of exit "./boot/interaction.scm" . 278569))
 (set.gloc.of |.L1251|)
 (close
   (0 0 . loop)
   (call
     (push.gloc.of |.L1252|)
     (apply.gloc.of call-with-current-continuation "./boot/interaction.scm" . 273416))
   (touch.gloc.of |loop`4283*|)
   (apply.gloc.of |loop`4283*| "./boot/interaction.scm" . 290823))
 (set.gloc.of |loop`4283*|)
 (close
   (1 0)
   (push.gloc.of |.L1251|)
   (push.gloc.of |.L1249|)
   (apply.gloc.of with-exception-handler "./boot/interaction.scm" . 275467))
 (set.gloc.of |.L1252|)
 (close
   (0 0 . quiet-read-eval-print-loop)
   (touch.gloc.of |loop`4283*|)
   (apply.gloc.of |loop`4283*| "./boot/interaction.scm" . 272391))
 (set.gloc.of quiet-read-eval-print-loop)
 (ret.const.unspec))
((call
   (push.const
     (|.LIST| . |.list|)
     (|.CONS| . |.cons|)
     (|.CONS*| . |.cons*|)
     (|.APPEND| . |.append|)
     (|.VECTOR| . |.vector|)
     (|.LIST->VECTOR| . |.list->vector|)
     (|.EQ?| . |.eq?|)
     (|.EQV?| . |.eqv?|)
     (|.MEMQ| . |.memq|)
     (|.MEMV| . |.memv|)
     (|.CALL-WITH-VALUES| . |.call-with-values|)
     (|.APPLY| . |.apply|)
     (|.CDR| . |.cdr|)
     (|.IDENTIFIER?| . |.identifier?|)
     (|.MAKE-VARIABLE-TRANSFORMER| . |.make-variable-transformer|)
     (|.ASSERTION-VIOLATION| . |.assertion-violation|)
     (|.UNSPECIFIED| . |.unspecified|)
     (|.QUOTE| . quote)
     (|.LET| . let)
     (|.LETREC*| . letrec*)
     (|.BEGIN| . begin)
     (|.LAMBDA| . lambda)
     (|.IF| . if)
     (|.SET!| . set!)
     (|.OR| . or)
     (|.COND| . cond)
     (|.ELSE| . else)
     (|.DEFINE-SYNTAX| . define-syntax)
     (|.SYNTAX| . syntax)
     (|.SYNTAX-CASE| . syntax-case))
   (extend . 1)
   (ret.close
     (1 0 . unrename-private-primitives)
     (extend.enclose
       (1 0 . loop)
       (iloc.0 . 0)
       (if.pair?
         (call
           (push.car.iloc (0 . 0) "./boot/interaction.scm" . 327708)
           (apply.iloc (1 . 0) "./boot/interaction.scm" . 327702))
         (push)
         (call
           (push.cdr.iloc (0 . 0) "./boot/interaction.scm" . 327725)
           (apply.iloc (1 . 0) "./boot/interaction.scm" . 327719))
         (ret.cons "./boot/interaction.scm" . 327696))
       (iloc.0 . 0)
       (if.symbol?
         (push.iloc.0 . 0)
         (push.iloc 3 . 0)
         (push.subr.gloc.of assq 2 "./boot/interaction.scm" . 329751)
         (extend . 1)
         (iloc.0 . 0)
         (if.true (push.iloc.0 . 0) (ret.subr.gloc.of cdr (cdr |.L1258`4304*|)))
         (ret.iloc 1 . 0))
       (push.iloc.0 . 0)
       (subr.gloc.of vector? 1 "./boot/interaction.scm" . 331792)
       (if.true
         (call
           (push.iloc.1 . 0)
           (push.iloc.0 . 0)
           (push.subr.gloc.of vector->list 1 "./boot/interaction.scm" . 332840)
           (apply.gloc.of map "./boot/interaction.scm" . 332830))
         (push)
         (ret.subr.gloc.of list->vector "./boot/interaction.scm" . 332816))
       (ret.iloc 0 . 0))
     (push.iloc.1 . 0)
     (apply.iloc (0 . 0) "./boot/interaction.scm" . 326665)))
 (set.gloc.of unrename-private-primitives)
 (ret.const.unspec))
((close
   (3 0 . display-warning)
   (subr.gloc.of make-string-output-port 0)
   (push)
   (extend . 1)
   (push.iloc.0 . 0)
   (push.const . "~a")
   (push.iloc.1 . 0)
   (subr.gloc.of format 3 "./boot/interaction.scm" . 338951)
   (push.const . #f)
   (push.const . #f)
   (push.const . #f)
   (push.const . #f)
   (subr.gloc.of backtrace-line-length 0)
   (push)
   (extend . 5)
   (push.close
     (0 0)
     (call (apply.gloc.of pretty-print-line-length "./boot/interaction.scm" . 344073))
     (set.iloc (1 . 0) "./boot/interaction.scm" . 344073)
     (call (apply.gloc.of pretty-print-maximum-lines "./boot/interaction.scm" . 344073))
     (set.iloc (1 . 1) "./boot/interaction.scm" . 344073)
     (call (apply.gloc.of pretty-print-unwrap-syntax "./boot/interaction.scm" . 344073))
     (set.iloc (1 . 2) "./boot/interaction.scm" . 344073)
     (call (apply.gloc.of pretty-print-initial-indent "./boot/interaction.scm" . 344073))
     (set.iloc (1 . 3) "./boot/interaction.scm" . 344073)
     (call
       (push.iloc.1 . 4)
       (apply.gloc.of pretty-print-line-length "./boot/interaction.scm" . 344073))
     (call
       (push.const . 10)
       (apply.gloc.of pretty-print-maximum-lines "./boot/interaction.scm" . 344073))
     (call
       (push.const . #t)
       (apply.gloc.of pretty-print-unwrap-syntax "./boot/interaction.scm" . 344073))
     (push.const . 5)
     (apply.gloc.of pretty-print-initial-indent "./boot/interaction.scm" . 344073))
   (push.close
     (0 0)
     (call
       (iloc 3 . 1)
       (if.true
         (push.iloc 2 . 0)
         (push.const . "~%  >  ")
         (subr.gloc.of format 2 "./boot/interaction.scm" . 345104)
         (call
           (call
             (touch.gloc.of unrename-private-primitives)
             (push.iloc 3 . 1)
             (apply.gloc.of unrename-private-primitives "./boot/interaction.scm" . 346142))
           (push)
           (push.iloc 2 . 0)
           (apply.gloc.of pretty-print "./boot/interaction.scm" . 346128))
         (iloc 3 . 1)
         (if.not.pair?.ret.const . #f)
         (push.iloc 2 . 0)
         (push.const . "~%  ~n")
         (push.iloc 3 . 1)
         (ret.subr.gloc.of format "./boot/interaction.scm" . 347170))
       (ret.const.unspec))
     (call
       (iloc 3 . 2)
       (if.true
         (push.iloc 2 . 0)
         (push.const . "~%  >  ")
         (subr.gloc.of format 2 "./boot/interaction.scm" . 349200)
         (call
           (call
             (touch.gloc.of unrename-private-primitives)
             (push.iloc 3 . 2)
             (apply.gloc.of unrename-private-primitives "./boot/interaction.scm" . 350238))
           (push)
           (push.iloc 2 . 0)
           (apply.gloc.of pretty-print "./boot/interaction.scm" . 350224))
         (iloc 3 . 2)
         (if.not.pair?.ret.const . #f)
         (push.iloc 2 . 0)
         (push.const . "~%  ~n")
         (push.iloc 3 . 2)
         (ret.subr.gloc.of format "./boot/interaction.scm" . 351269))
       (ret.const.unspec))
     (push.iloc 2 . 0)
     (push.const . "~%")
     (subr.gloc.of format 2 "./boot/interaction.scm" . 352265)
     (call
       (push.const . "EMACS")
       (subr.gloc.of lookup-process-environment 1 "./boot/interaction.scm" . 353308)
       (if.true.ret)
       (subr.gloc.of current-input-port 0)
       (push)
       (push.subr.gloc.of port-device-subtype 1 "./boot/interaction.scm" . 353355)
       (push.const . char)
       (push.subr.gloc.of eq? 2 "./boot/interaction.scm" . 353350)
       (ret.subr.gloc.of not "./boot/interaction.scm" . 353345))
     (if.true
       (subr.gloc.of current-error-port 0)
       (push)
       (push.const . "~a~!")
       (push.iloc 2 . 0)
       (push.subr.gloc.of extract-accumulated-string 1 "./boot/interaction.scm" . 355379)
       (ret.subr.gloc.of format "./boot/interaction.scm" . 355343))
     (subr.gloc.of current-error-port 0)
     (push)
     (push.const . "~%~a~!")
     (push.iloc 2 . 0)
     (push.subr.gloc.of extract-accumulated-string 1 "./boot/interaction.scm" . 356405)
     (ret.subr.gloc.of format "./boot/interaction.scm" . 356367))
   (push.close
     (0 0)
     (call
       (push.iloc.1 . 0)
       (apply.gloc.of pretty-print-line-length "./boot/interaction.scm" . 344073))
     (call
       (push.iloc.1 . 1)
       (apply.gloc.of pretty-print-maximum-lines "./boot/interaction.scm" . 344073))
     (call
       (push.iloc.1 . 2)
       (apply.gloc.of pretty-print-unwrap-syntax "./boot/interaction.scm" . 344073))
     (push.iloc.1 . 3)
     (apply.gloc.of pretty-print-initial-indent "./boot/interaction.scm" . 344073))
   (apply.gloc.of
     |.dynamic-wind|
     (|.dynamic-wind|
       (lambda ()
         (set! |tmp1`4312`4317*| (pretty-print-line-length))
         (set! |tmp1`4313`4317*| (pretty-print-maximum-lines))
         (set! |tmp1`4314`4317*| (pretty-print-unwrap-syntax))
         (set! |tmp1`4315`4317*| (pretty-print-initial-indent))
         (pretty-print-line-length |tmp2`4312`4317*|)
         (pretty-print-maximum-lines 10)
         (pretty-print-unwrap-syntax #t)
         (pretty-print-initial-indent 5))
       (lambda ()
         (if |form`4307*|
             (begin
               (format |port`4309*| "~%  >  ")
               (pretty-print (unrename-private-primitives |form`4307*|) |port`4309*|)
               (and (pair? |form`4307*|) (format |port`4309*| "~%  ~n" |form`4307*|)))
             (|.unspecified|))
         (if |subform`4307*|
             (begin
               (format |port`4309*| "~%  >  ")
               (pretty-print (unrename-private-primitives |subform`4307*|) |port`4309*|)
               (and (pair? |subform`4307*|) (format |port`4309*| "~%  ~n" |subform`4307*|)))
             (|.unspecified|))
         (format |port`4309*| "~%")
         (if (or (lookup-process-environment "EMACS")
                 (not (eq? (port-device-subtype (current-input-port)) 'char)))
             (format (current-error-port) "~a~!" (extract-accumulated-string |port`4309*|))
             (format (current-error-port) "~%~a~!" (extract-accumulated-string |port`4309*|))))
       (lambda ()
         (pretty-print-line-length |tmp1`4312`4317*|)
         (pretty-print-maximum-lines |tmp1`4313`4317*|)
         (pretty-print-unwrap-syntax |tmp1`4314`4317*|)
         (pretty-print-initial-indent |tmp1`4315`4317*|)))))
 (set.gloc.of display-warning)
 (ret.const.unspec))
((close
   (1 0 . bad-option)
   (subr.gloc.of current-error-port 0)
   (push)
   (push.const . "** ERROR in option '~a'~%")
   (push.iloc.0 . 0)
   (subr.gloc.of format 3 "./boot/interaction.scm" . 458761)
   (call
     (touch.gloc.of |show-usage`4328*|)
     (apply.gloc.of |show-usage`4328*| "./boot/interaction.scm" . 459785))
   (push.const . #f)
   (ret.subr.gloc.of exit "./boot/interaction.scm" . 460809))
 (set.gloc.of |bad-option`4328*|)
 (close
   (1 0 . add-opt-sitelib)
   (push.close
     (1 0)
     (call
       (touch.gloc.of |directory-exists?`4328*|)
       (call
         (touch.gloc.of expand-path)
         (push.iloc.0 . 0)
         (apply.gloc.of expand-path "./boot/interaction.scm" . 427055))
       (push)
       (apply.gloc.of |directory-exists?`4328*| "./boot/interaction.scm" . 427036))
     (if.true
       (call
         (touch.gloc.of expand-path)
         (push.iloc.0 . 0)
         (apply.gloc.of expand-path "./boot/interaction.scm" . 428078))
       (push)
       (apply.gloc.of add-library-path "./boot/interaction.scm" . 428060))
     (subr.gloc.of current-error-port 0)
     (push)
     (push.const . "** ERROR in option '--sitelib=~a': directory ~s not exist~%")
     (push.iloc.1 . 0)
     (push.iloc.0 . 0)
     (subr.gloc.of format 4 "./boot/interaction.scm" . 430108)
     (push.const . #f)
     (ret.subr.gloc.of exit "./boot/interaction.scm" . 431132))
   (call
     (push.const . operating-system)
     (push.subr.gloc.of architecture-feature 1 "./boot/interaction.scm" . 432177)
     (push.const . "windows")
     (subr.gloc.of string-contains 2 "./boot/interaction.scm" . 432160)
     (if.true
       (touch.gloc.of string-split)
       (push.iloc.0 . 0)
       (push.const . #\;)
       (apply.gloc.of string-split "./boot/interaction.scm" . 433184))
     (touch.gloc.of string-split)
     (push.iloc.0 . 0)
     (push.const . #\:)
     (apply.gloc.of string-split "./boot/interaction.scm" . 434208))
   (push)
   (push.subr.gloc.of reverse 1 "./boot/interaction.scm" . 432147)
   (apply.gloc.of
     for-each
     (for-each (lambda (|path`4369*|)
                 (if (|directory-exists?`4328*| (expand-path |path`4369*|))
                     (add-library-path (expand-path |path`4369*|))
                     (begin
                       (format
                         (current-error-port)
                         "** ERROR in option '--sitelib=~a': directory ~s not exist~%"
                         |paths`4367*|
                         |path`4369*|)
                       (exit #f))))
               (reverse
                 (if (string-contains (architecture-feature 'operating-system) "windows")
                     (string-split |paths`4367*| #\;)
                     (string-split |paths`4367*| #\:))))))
 (set.gloc.of |add-opt-sitelib`4328*|)
 (close
   (0 0 . init-env-acc)
   (push.const . "YPSILON_ACC")
   (push.subr.gloc.of lookup-process-environment 1 "./boot/interaction.scm" . 387088)
   (extend . 1)
   (iloc.0 . 0)
   (if.true
     (call
       (touch.gloc.of |directory-exists?`4328*|)
       (call
         (touch.gloc.of expand-path)
         (push.iloc.0 . 0)
         (apply.gloc.of expand-path "./boot/interaction.scm" . 389167))
       (push)
       (apply.gloc.of |directory-exists?`4328*| "./boot/interaction.scm" . 389148))
     (if.true
       (call
         (touch.gloc.of expand-path)
         (push.iloc.0 . 0)
         (apply.gloc.of expand-path "./boot/interaction.scm" . 390192))
       (push)
       (apply.gloc.of auto-compile-cache "./boot/interaction.scm" . 390172))
     (subr.gloc.of current-error-port 0)
     (push)
     (push.const . "** ERROR in environment variable 'YPSILON_ACC': directory ~s not exist~%")
     (push.iloc.0 . 0)
     (subr.gloc.of format 3 "./boot/interaction.scm" . 392220)
     (push.const . #f)
     (apply.gloc.of auto-compile-cache "./boot/interaction.scm" . 393244))
   (ret.const.unspec))
 (set.gloc.of |init-env-acc`4328*|)
 (close
   (0 0 . show-info)
   (call
     (touch.gloc.of |show-banner`4328*|)
     (apply.gloc.of |show-banner`4328*| "./boot/interaction.scm" . 491529))
   (call
     (push.const . "YPSILON_ACC")
     (push.subr.gloc.of lookup-process-environment 1 "./boot/interaction.scm" . 492560)
     (extend . 1)
     (iloc.0 . 0)
     (if.true
       (push.const . #t)
       (push.const . ";; YPSILON_ACC=~a~%")
       (push.iloc.0 . 0)
       (ret.subr.gloc.of format "./boot/interaction.scm" . 493602))
     (push.const . #t)
     (push.const . ";; YPSILON_ACC unspecified~%")
     (ret.subr.gloc.of format "./boot/interaction.scm" . 494613))
   (call
     (push.const . "YPSILON_SITELIB")
     (push.subr.gloc.of lookup-process-environment 1 "./boot/interaction.scm" . 495632)
     (extend . 1)
     (iloc.0 . 0)
     (if.true
       (push.const . #t)
       (push.const . ";; YPSILON_SITELIB=~a~%")
       (push.iloc.0 . 0)
       (ret.subr.gloc.of format "./boot/interaction.scm" . 496674))
     (push.const . #t)
     (push.const . ";; YPSILON_SITELIB unspecified~%")
     (ret.subr.gloc.of format "./boot/interaction.scm" . 497685))
   (call
     (push.const . "YPSILON_LOADPATH")
     (push.subr.gloc.of lookup-process-environment 1 "./boot/interaction.scm" . 498704)
     (extend . 1)
     (iloc.0 . 0)
     (if.true
       (push.const . #t)
       (push.const . ";; YPSILON_LOADPATH=~a~%")
       (push.iloc.0 . 0)
       (ret.subr.gloc.of format "./boot/interaction.scm" . 499746))
     (push.const . #t)
     (push.const . ";; YPSILON_LOADPATH unspecified~%")
     (ret.subr.gloc.of format "./boot/interaction.scm" . 500757))
   (push.const . #t)
   (push.const . ";; (auto-compile-cache) => ~s~%")
   (call (apply.gloc.of auto-compile-cache "./boot/interaction.scm" . 501814))
   (push)
   (subr.gloc.of format 3 "./boot/interaction.scm" . 501769)
   (push.const . #t)
   (push.const . ";; (scheme-library-paths) => ~s~%")
   (call (apply.gloc.of scheme-library-paths "./boot/interaction.scm" . 502840))
   (push)
   (subr.gloc.of format 3 "./boot/interaction.scm" . 502793)
   (push.const . #t)
   (push.const . ";; (scheme-load-paths) => ~s~%")
   (call (apply.gloc.of scheme-load-paths "./boot/interaction.scm" . 503861))
   (push)
   (ret.subr.gloc.of format "./boot/interaction.scm" . 503817))
 (set.gloc.of |show-info`4328*|)
 (close
   (0 0 . init-env-loadpath)
   (push.const . "YPSILON_LOADPATH")
   (push.subr.gloc.of lookup-process-environment 1 "./boot/interaction.scm" . 411664)
   (extend . 1)
   (iloc.0 . 0)
   (if.true
     (push.gloc.of |.L1283|)
     (call
       (push.const . operating-system)
       (push.subr.gloc.of architecture-feature 1 "./boot/interaction.scm" . 419892)
       (push.const . "windows")
       (subr.gloc.of string-contains 2 "./boot/interaction.scm" . 419875)
       (if.true
         (touch.gloc.of string-split)
         (push.iloc.0 . 0)
         (push.const . #\;)
         (apply.gloc.of string-split "./boot/interaction.scm" . 420899))
       (touch.gloc.of string-split)
       (push.iloc.0 . 0)
       (push.const . #\:)
       (apply.gloc.of string-split "./boot/interaction.scm" . 421923))
     (push)
     (push.subr.gloc.of reverse 1 "./boot/interaction.scm" . 419862)
     (apply.gloc.of for-each "./boot/interaction.scm" . 414742))
   (ret.const.unspec))
 (set.gloc.of |init-env-loadpath`4328*|)
 (close
   (1 0 . add-opt-loadpath)
   (push.close
     (1 0)
     (call
       (touch.gloc.of |directory-exists?`4328*|)
       (call
         (touch.gloc.of expand-path)
         (push.iloc.0 . 0)
         (apply.gloc.of expand-path "./boot/interaction.scm" . 439343))
       (push)
       (apply.gloc.of |directory-exists?`4328*| "./boot/interaction.scm" . 439324))
     (if.true
       (call
         (touch.gloc.of expand-path)
         (push.iloc.0 . 0)
         (apply.gloc.of expand-path "./boot/interaction.scm" . 440363))
       (push)
       (apply.gloc.of add-load-path "./boot/interaction.scm" . 440348))
     (subr.gloc.of current-error-port 0)
     (push)
     (push.const . "** ERROR in option '--loadpath=~a': directory ~s not exist~%")
     (push.iloc.1 . 0)
     (push.iloc.0 . 0)
     (subr.gloc.of format 4 "./boot/interaction.scm" . 442396)
     (push.const . #f)
     (ret.subr.gloc.of exit "./boot/interaction.scm" . 443420))
   (call
     (push.const . operating-system)
     (push.subr.gloc.of architecture-feature 1 "./boot/interaction.scm" . 444465)
     (push.const . "windows")
     (subr.gloc.of string-contains 2 "./boot/interaction.scm" . 444448)
     (if.true
       (touch.gloc.of string-split)
       (push.iloc.0 . 0)
       (push.const . #\;)
       (apply.gloc.of string-split "./boot/interaction.scm" . 445472))
     (touch.gloc.of string-split)
     (push.iloc.0 . 0)
     (push.const . #\:)
     (apply.gloc.of string-split "./boot/interaction.scm" . 446496))
   (push)
   (push.subr.gloc.of reverse 1 "./boot/interaction.scm" . 444435)
   (apply.gloc.of
     for-each
     (for-each (lambda (|path`4373*|)
                 (if (|directory-exists?`4328*| (expand-path |path`4373*|))
                     (add-load-path (expand-path |path`4373*|))
                     (begin
                       (format
                         (current-error-port)
                         "** ERROR in option '--loadpath=~a': directory ~s not exist~%"
                         |paths`4371*|
                         |path`4373*|)
                       (exit #f))))
               (reverse
                 (if (string-contains (architecture-feature 'operating-system) "windows")
                     (string-split |paths`4371*| #\;)
                     (string-split |paths`4371*| #\:))))))
 (set.gloc.of |add-opt-loadpath`4328*|)
 (close
   (0 0 . init-sys-acc)
   (push.const . operating-system)
   (push.subr.gloc.of architecture-feature 1 "./boot/interaction.scm" . 372769)
   (push.const . "windows")
   (subr.gloc.of string-contains 2 "./boot/interaction.scm" . 372752)
   (if.true
     (push.const . "TEMP")
     (push.subr.gloc.of lookup-process-environment 1 "./boot/interaction.scm" . 373783)
     (extend . 1)
     (iloc.0 . 0)
     (if.true
       (call
         (touch.gloc.of |directory-exists?`4328*|)
         (push.iloc.0 . 0)
         (apply.gloc.of |directory-exists?`4328*| "./boot/interaction.scm" . 375843))
       (if.true
         (call
           (call
             (touch.gloc.of |directory-exists?`4328*|)
             (push.const . "~//Ypsilon")
             (push.iloc.0 . 0)
             (push.subr.gloc.of format 2 "./boot/interaction.scm" . 376890)
             (apply.gloc.of |directory-exists?`4328*| "./boot/interaction.scm" . 376871))
           (if.true.ret)
           (push.const . "~//Ypsilon")
           (push.iloc.0 . 0)
           (push.subr.gloc.of format 2 "./boot/interaction.scm" . 377913)
           (ret.subr.gloc.of create-directory "./boot/interaction.scm" . 377895))
         (push.const . "~//Ypsilon")
         (push.iloc.0 . 0)
         (push.subr.gloc.of format 2 "./boot/interaction.scm" . 378935)
         (apply.gloc.of auto-compile-cache "./boot/interaction.scm" . 378915))
       (ret.const.unspec))
     (ret.const.unspec))
   (call (apply.gloc.of home-directory "./boot/interaction.scm" . 379920))
   (push)
   (extend . 1)
   (iloc.0 . 0)
   (if.true
     (call
       (touch.gloc.of |directory-exists?`4328*|)
       (push.const . "~//.ypsilon")
       (push.iloc.0 . 0)
       (push.subr.gloc.of format 2 "./boot/interaction.scm" . 381997)
       (apply.gloc.of |directory-exists?`4328*| "./boot/interaction.scm" . 381978))
     (if.false.ret)
     (push.const . "~//.ypsilon")
     (push.iloc.0 . 0)
     (push.subr.gloc.of format 2 "./boot/interaction.scm" . 383022)
     (apply.gloc.of auto-compile-cache "./boot/interaction.scm" . 383002))
   (ret.const.unspec))
 (set.gloc.of |init-sys-acc`4328*|)
 (close
   (0 0 . show-usage)
   (push.const . #t)
   (push.const . "usage: ypsilon [options] [--] [file] [arguments]~%")
   (subr.gloc.of format 2 "./boot/interaction.scm" . 464905)
   (push.const . #t)
   (push.const . "options:~%")
   (subr.gloc.of format 2 "./boot/interaction.scm" . 465929)
   (push.const . #t)
   (push.const . "  --r6rs (-6)            conforms r6rs top-level program syntax and semantics~%")
   (subr.gloc.of format 2 "./boot/interaction.scm" . 466953)
   (push.const . #t)
   (push.const . "  --mute (-m)            suppresses greeting~%")
   (subr.gloc.of format 2 "./boot/interaction.scm" . 467977)
   (push.const . #t)
   (push.const . "  --quiet (-q)           suppresses greeting, repl prompt, and repl output~%")
   (subr.gloc.of format 2 "./boot/interaction.scm" . 469001)
   (push.const . #t)
   (push.const . "  --verbose (-v)         prints load and compile activities~%")
   (subr.gloc.of format 2 "./boot/interaction.scm" . 470025)
   (push.const . #t)
   (push.const . "  --warning (-w)         prints warnings~%")
   (subr.gloc.of format 2 "./boot/interaction.scm" . 471049)
   (push.const . #t)
   (push.const . "  --interactive (-i)     enters repl after running the script file~%")
   (subr.gloc.of format 2 "./boot/interaction.scm" . 472073)
   (push.const . #t)
   (push.const . "  --compatible (-c)      extends lexical syntax for compatibility~%")
   (subr.gloc.of format 2 "./boot/interaction.scm" . 473097)
   (push.const . #t)
   (push.const . "  --sitelib=path         adds sitelib path (YPSILON_SITELIB)~%")
   (subr.gloc.of format 2 "./boot/interaction.scm" . 474121)
   (push.const . #t)
   (push.const . "  --loadpath=path        adds load search path (YPSILON_LOADPATH)~%")
   (subr.gloc.of format 2 "./boot/interaction.scm" . 475145)
   (push.const . #t)
   (push.const . "  --acc=dir              sets a auto-compile-cache directory (YPSILON_ACC)~%")
   (subr.gloc.of format 2 "./boot/interaction.scm" . 476169)
   (push.const . #t)
   (push.const . "  --heap-limit=mbytes    sets a total heap limit in MBytes~%")
   (subr.gloc.of format 2 "./boot/interaction.scm" . 477193)
   (push.const . #t)
   (push.const . "  --dump-condition       default exception handler dumps condition~%")
   (subr.gloc.of format 2 "./boot/interaction.scm" . 478217)
   (push.const . #t)
   (push.const . "  --disable-acc          disables auto-compile-cache~%")
   (subr.gloc.of format 2 "./boot/interaction.scm" . 479241)
   (push.const . #t)
   (push.const . "  --clean-acc            cleans auto-compile-cache~%")
   (subr.gloc.of format 2 "./boot/interaction.scm" . 480265)
   (push.const . #t)
   (push.const . "  --version              prints version and exit~%")
   (subr.gloc.of format 2 "./boot/interaction.scm" . 481289)
   (push.const . #t)
   (push.const . "  --help                 prints help and exit~%")
   (subr.gloc.of format 2 "./boot/interaction.scm" . 482313)
   (push.const . #t)
   (push.const . "  --                     indicates no more option to proceed~%")
   (ret.subr.gloc.of format "./boot/interaction.scm" . 483337))
 (set.gloc.of |show-usage`4328*|)
 (close
   (1 0 . directory-exists?)
   (push.const . "~a/.")
   (push.iloc.0 . 0)
   (push.subr.gloc.of format 2 "./boot/interaction.scm" . 363543)
   (ret.subr.gloc.of file-exists? "./boot/interaction.scm" . 363529))
 (set.gloc.of |directory-exists?`4328*|)
 (close
   (1 0)
   (call
     (touch.gloc.of |directory-exists?`4328*|)
     (call
       (touch.gloc.of expand-path)
       (push.iloc.0 . 0)
       (apply.gloc.of expand-path "./boot/interaction.scm" . 415794))
     (push)
     (apply.gloc.of |directory-exists?`4328*| "./boot/interaction.scm" . 415775))
   (if.true
     (call
       (touch.gloc.of expand-path)
       (push.iloc.0 . 0)
       (apply.gloc.of expand-path "./boot/interaction.scm" . 416814))
     (push)
     (apply.gloc.of add-load-path "./boot/interaction.scm" . 416799))
   (subr.gloc.of current-error-port 0)
   (push)
   (push.const . "** ERROR in environment variable 'YPSILON_LOADPATH': directory ~s not exist~%")
   (push.iloc.0 . 0)
   (ret.subr.gloc.of format "./boot/interaction.scm" . 418847))
 (set.gloc.of |.L1283|)
 (close
   (0 0 . show-banner)
   (push.const . #t)
   (push.const . "ypsilon-digamma r~a~%")
   (push.const . ypsilon-revision)
   (push.subr.gloc.of architecture-feature 1 "./boot/interaction.scm" . 487467)
   (ret.subr.gloc.of format "./boot/interaction.scm" . 487432))
 (set.gloc.of |show-banner`4328*|)
 (close
   (1 0)
   (call
     (touch.gloc.of |directory-exists?`4328*|)
     (call
       (touch.gloc.of expand-path)
       (push.iloc.0 . 0)
       (apply.gloc.of expand-path "./boot/interaction.scm" . 401458))
     (push)
     (apply.gloc.of |directory-exists?`4328*| "./boot/interaction.scm" . 401439))
   (if.true
     (call
       (touch.gloc.of expand-path)
       (push.iloc.0 . 0)
       (apply.gloc.of expand-path "./boot/interaction.scm" . 402481))
     (push)
     (apply.gloc.of add-library-path "./boot/interaction.scm" . 402463))
   (subr.gloc.of current-error-port 0)
   (push)
   (push.const . "** ERROR in environment variable 'YPSILON_SITELIB': directory ~s not exist~%")
   (push.iloc.0 . 0)
   (ret.subr.gloc.of format "./boot/interaction.scm" . 404511))
 (set.gloc.of |.L1284|)
 (close
   (0 0 . init-env-sitelib)
   (push.const . "YPSILON_SITELIB")
   (push.subr.gloc.of lookup-process-environment 1 "./boot/interaction.scm" . 397328)
   (extend . 1)
   (iloc.0 . 0)
   (if.true
     (push.gloc.of |.L1284|)
     (call
       (push.const . operating-system)
       (push.subr.gloc.of architecture-feature 1 "./boot/interaction.scm" . 405556)
       (push.const . "windows")
       (subr.gloc.of string-contains 2 "./boot/interaction.scm" . 405539)
       (if.true
         (touch.gloc.of string-split)
         (push.iloc.0 . 0)
         (push.const . #\;)
         (apply.gloc.of string-split "./boot/interaction.scm" . 406563))
       (touch.gloc.of string-split)
       (push.iloc.0 . 0)
       (push.const . #\:)
       (apply.gloc.of string-split "./boot/interaction.scm" . 407587))
     (push)
     (push.subr.gloc.of reverse 1 "./boot/interaction.scm" . 405526)
     (apply.gloc.of for-each "./boot/interaction.scm" . 400406))
   (ret.const.unspec))
 (set.gloc.of |init-env-sitelib`4328*|)
 (close
   (1 0 . set-opt-acc)
   (call
     (touch.gloc.of |directory-exists?`4328*|)
     (call
       (touch.gloc.of expand-path)
       (push.iloc.0 . 0)
       (apply.gloc.of expand-path "./boot/interaction.scm" . 450595))
     (push)
     (apply.gloc.of |directory-exists?`4328*| "./boot/interaction.scm" . 450576))
   (if.true
     (call
       (touch.gloc.of expand-path)
       (push.iloc.0 . 0)
       (apply.gloc.of expand-path "./boot/interaction.scm" . 451620))
     (push)
     (apply.gloc.of auto-compile-cache "./boot/interaction.scm" . 451600))
   (subr.gloc.of current-error-port 0)
   (push)
   (push.const . "** ERROR in option '--acc=~a': directory ~s not exist~%")
   (push.iloc.0 . 0)
   (push.iloc.0 . 0)
   (subr.gloc.of format 4 "./boot/interaction.scm" . 453648)
   (push.const . #f)
   (ret.subr.gloc.of exit "./boot/interaction.scm" . 454672))
 (set.gloc.of |set-opt-acc`4328*|)
 (close
   (1 0)
   (subr.gloc.of current-output-port 0)
   (push)
   (subr.gloc.of flush-output-port 1 "./boot/interaction.scm" . 522261)
   (call
     (push.iloc.0 . 0)
     (call (apply.gloc.of current-exception-printer "./boot/interaction.scm" . 523286))
     (apply))
   (call (push.iloc.0 . 0) (apply.gloc.of serious-condition? "./boot/interaction.scm" . 524314))
   (if.false.ret)
   (push.const . #f)
   (ret.subr.gloc.of exit "./boot/interaction.scm" . 524337))
 (set.gloc.of |.L1277|)
 (close
   (0 0 . init-sys-sitelib)
   (push.const . "~a/sitelib")
   (subr.gloc.of system-share-path 0)
   (push)
   (push.subr.gloc.of format 2 "./boot/interaction.scm" . 367637)
   (extend . 1)
   (call
     (touch.gloc.of |directory-exists?`4328*|)
     (push.iloc.0 . 0)
     (apply.gloc.of |directory-exists?`4328*| "./boot/interaction.scm" . 368656))
   (if.false.ret)
   (push.iloc.0 . 0)
   (apply.gloc.of add-library-path "./boot/interaction.scm" . 368681))
 (set.gloc.of |init-sys-sitelib`4328*|)
 (close
   (0 0 . start-scheme-session)
   (extend.unbound . 9)
   (push.close
     (1 0 . exec-script)
     (subr.gloc.of command-line 0)
     (push)
     (push.subr.gloc.of length 1 "./boot/interaction.scm" . 507936)
     (push.iloc.0 . 0)
     (push.subr.gloc.of length 1 "./boot/interaction.scm" . 507960)
     (push.subr.gloc.of - 2 "./boot/interaction.scm" . 507933)
     (subr.gloc.of command-line-shift 1 "./boot/interaction.scm" . 507913)
     (push.car.iloc (0 . 0) "./boot/interaction.scm" . 508949)
     (extend . 1)
     (iloc 2 . 4)
     (if.true
       (push.close
         (1 0)
         (subr.gloc.of current-output-port 0)
         (push)
         (subr.gloc.of flush-output-port 1 "./boot/interaction.scm" . 513045)
         (call
           (push.iloc.0 . 0)
           (call (apply.gloc.of current-exception-printer "./boot/interaction.scm" . 514070))
           (apply))
         (call
           (push.iloc.0 . 0)
           (apply.gloc.of serious-condition? "./boot/interaction.scm" . 515098))
         (if.false.ret)
         (apply.iloc (3 . 1) "./boot/interaction.scm" . 515121))
       (push.close
         (0 0)
         (call
           (touch.gloc.of auto-compile-cache-update)
           (apply.gloc.of auto-compile-cache-update "./boot/interaction.scm" . 517141))
         (push.iloc.1 . 0)
         (apply.gloc.of load "./boot/interaction.scm" . 518165))
       (apply.gloc.of with-exception-handler "./boot/interaction.scm" . 510994))
     (push.gloc.of |.L1277|)
     (push.close
       (0 0)
       (call
         (touch.gloc.of auto-compile-cache-update)
         (apply.gloc.of auto-compile-cache-update "./boot/interaction.scm" . 526357))
       (call
         (call
           (iloc 3 . 7)
           (if.true.ret)
           (touch.gloc.of load-file-has-r6rs-comment?)
           (push.iloc.1 . 0)
           (apply.gloc.of load-file-has-r6rs-comment? "./boot/interaction.scm" . 527405))
         (if.true
           (touch.gloc.of load-r6rs)
           (push.iloc.1 . 0)
           (apply.gloc.of load-r6rs "./boot/interaction.scm" . 528412))
         (call
           (touch.gloc.of interpret)
           (push.const import (core) (rnrs))
           (apply.gloc.of interpret "./boot/interaction.scm" . 530460))
         (push.iloc.1 . 0)
         (apply.gloc.of load "./boot/interaction.scm" . 531484))
       (subr.gloc.of current-error-port 0)
       (push)
       (subr.gloc.of flush-output-port 1 "./boot/interaction.scm" . 532501)
       (subr.gloc.of current-output-port 0)
       (push)
       (subr.gloc.of flush-output-port 1 "./boot/interaction.scm" . 533525)
       (ret.subr.gloc.of exit "./boot/interaction.scm" . 534549))
     (apply.gloc.of with-exception-handler "./boot/interaction.scm" . 521235))
   (push.close
     (0 0 . exec-repl)
     (call
       (iloc.1 . 6)
       (if.true.ret)
       (iloc.1 . 2)
       (if.true
         (touch.gloc.of |show-info`4328*|)
         (apply.gloc.of |show-info`4328*| "./boot/interaction.scm" . 539672))
       (touch.gloc.of |show-banner`4328*|)
       (apply.gloc.of |show-banner`4328*| "./boot/interaction.scm" . 540693))
     (call
       (iloc.1 . 5)
       (if.true.ret)
       (touch.gloc.of interpret)
       (push.const import (core) (rnrs))
       (apply.gloc.of interpret "./boot/interaction.scm" . 541716))
     (iloc.1 . 3)
     (if.true
       (touch.gloc.of quiet-read-eval-print-loop)
       (apply.gloc.of quiet-read-eval-print-loop "./boot/interaction.scm" . 543757))
     (touch.gloc.of read-eval-print-loop)
     (apply.gloc.of read-eval-print-loop "./boot/interaction.scm" . 544781))
   (push.const . #f)
   (push.const . #f)
   (push.const . #f)
   (push.const . #f)
   (push.const . #f)
   (push.const . #f)
   (enclose . 8)
   (subr.gloc.of command-line 0 "./boot/interaction.scm" . 554018)
   (set.iloc (0 . 8))
   (call
     (touch.gloc.of |init-sys-acc`4328*|)
     (apply.gloc.of |init-sys-acc`4328*| "./boot/interaction.scm" . 556037))
   (call
     (touch.gloc.of |init-env-acc`4328*|)
     (apply.gloc.of |init-env-acc`4328*| "./boot/interaction.scm" . 557061))
   (call
     (touch.gloc.of |init-sys-sitelib`4328*|)
     (apply.gloc.of |init-sys-sitelib`4328*| "./boot/interaction.scm" . 558085))
   (call
     (touch.gloc.of |init-env-sitelib`4328*|)
     (apply.gloc.of |init-env-sitelib`4328*| "./boot/interaction.scm" . 559109))
   (call
     (touch.gloc.of |init-env-loadpath`4328*|)
     (apply.gloc.of |init-env-loadpath`4328*| "./boot/interaction.scm" . 560133))
   (iloc.0 . 8)
   (if.not.pair?.ret.const . #f)
   (extend.enclose+
     (1 0 . loop)
     (iloc.0 . 0)
     (if.null?
       (iloc 2 . 4)
       (if.true (apply.iloc (2 . 1) "./boot/interaction.scm" . 567321))
       (iloc 2 . 5)
       (if.true.ret)
       (apply.iloc (2 . 1) "./boot/interaction.scm" . 568356))
     (push.car.iloc (0 . 0) "./boot/interaction.scm" . 570400)
     (extend . 1)
     (extend.enclose
       (2 0 . opt?)
       (push.iloc 2 . 0)
       (push.iloc.0 . 0)
       (push.subr.gloc.of string-contains 2 "./boot/interaction.scm" . 574500)
       (extend . 1)
       (iloc.0 . 0)
       (if.false.ret)
       (=n.iloc (0 . 0) 0 "./boot/interaction.scm" . 576553)
       (if.false.ret)
       (push.iloc 3 . 0)
       (push.iloc.1 . 0)
       (subr.gloc.of string=? 2 "./boot/interaction.scm" . 577572)
       (if.true.ret.const . "")
       (iloc.1 . 1)
       (if.false.ret)
       (push.iloc 3 . 0)
       (push.iloc.1 . 0)
       (push.subr.gloc.of string-length 1 "./boot/interaction.scm" . 578630)
       (push.subr.gloc.of string-ref 2 "./boot/interaction.scm" . 578614)
       (push.const . #\=)
       (subr.gloc.of char=? 2 "./boot/interaction.scm" . 578606)
       (if.false.ret)
       (push.iloc 3 . 0)
       (push.iloc.1 . 0)
       (push.subr.gloc.of string-length 1 "./boot/interaction.scm" . 579638)
       (push.const . 1)
       (push.subr.gloc.of + 2 "./boot/interaction.scm" . 579635)
       (push.iloc 3 . 0)
       (push.subr.gloc.of string-length 1 "./boot/interaction.scm" . 579662)
       (ret.subr.gloc.of substring "./boot/interaction.scm" . 579620))
     (call
       (push.const . "--heap-limit")
       (push.const . #f)
       (apply.iloc (0 . 0) "./boot/interaction.scm" . 582686))
     (if.true
       (push.cddr.iloc (2 . 0) "./boot/interaction.scm" . 582717)
       (apply.iloc+ (3 . 0) "./boot/interaction.scm" . 582711))
     (call
       (push.const . "--heap-limit")
       (push.const . #t)
       (apply.iloc (0 . 0) "./boot/interaction.scm" . 583710))
     (if.true
       (push.cdr.iloc (2 . 0) "./boot/interaction.scm" . 583741)
       (apply.iloc+ (3 . 0) "./boot/interaction.scm" . 583735))
     (call
       (push.const . "--no-letrec-check")
       (push.const . #f)
       (apply.iloc (0 . 0) "./boot/interaction.scm" . 584734))
     (if.true
       (subr.gloc.of current-error-port 0)
       (push)
       (push.const . "** WARNING: '--no-letrec-check' option is deprecated~%")
       (subr.gloc.of format 2 "./boot/interaction.scm" . 585758)
       (push.cdr.iloc (2 . 0) "./boot/interaction.scm" . 586788)
       (apply.iloc+ (3 . 0) "./boot/interaction.scm" . 586782))
     (call
       (call
         (push.const . "--warning")
         (push.const . #f)
         (apply.iloc (0 . 0) "./boot/interaction.scm" . 587810))
       (if.true.ret)
       (push.const . "-w")
       (push.const . #f)
       (apply.iloc (0 . 0) "./boot/interaction.scm" . 587832))
     (if.true
       (push.const . #t)
       (subr.gloc.of warning-level 1 "./boot/interaction.scm" . 588830)
       (push.cdr.iloc (2 . 0) "./boot/interaction.scm" . 589860)
       (apply.iloc+ (3 . 0) "./boot/interaction.scm" . 589854))
     (call
       (push.const . "--version")
       (push.const . #f)
       (apply.iloc (0 . 0) "./boot/interaction.scm" . 590878))
     (if.true
       (call
         (touch.gloc.of |show-banner`4328*|)
         (apply.gloc.of |show-banner`4328*| "./boot/interaction.scm" . 591902))
       (ret.subr.gloc.of exit "./boot/interaction.scm" . 592926))
     (call
       (push.const . "--help")
       (push.const . #f)
       (apply.iloc (0 . 0) "./boot/interaction.scm" . 593950))
     (if.true
       (call
         (touch.gloc.of |show-usage`4328*|)
         (apply.gloc.of |show-usage`4328*| "./boot/interaction.scm" . 594974))
       (ret.subr.gloc.of exit "./boot/interaction.scm" . 595998))
     (call
       (call
         (push.const . "--r6rs")
         (push.const . #f)
         (apply.iloc (0 . 0) "./boot/interaction.scm" . 597026))
       (if.true.ret)
       (push.const . "-6")
       (push.const . #f)
       (apply.iloc (0 . 0) "./boot/interaction.scm" . 597045))
     (if.true
       (call
         (touch.gloc.of extend-lexical-syntax)
         (push.const . #f)
         (apply.gloc.of extend-lexical-syntax "./boot/interaction.scm" . 598046))
       (call
         (touch.gloc.of mutable-literals)
         (push.const . #f)
         (apply.gloc.of mutable-literals "./boot/interaction.scm" . 599070))
       (const . #t)
       (set.iloc (4 . 7) "./boot/interaction.scm" . 600094)
       (push.cdr.iloc (2 . 0) "./boot/interaction.scm" . 601124)
       (apply.iloc+ (3 . 0) "./boot/interaction.scm" . 601118))
     (call
       (call
         (push.const . "--compatible")
         (push.const . #f)
         (apply.iloc (0 . 0) "./boot/interaction.scm" . 602146))
       (if.true.ret)
       (push.const . "-c")
       (push.const . #f)
       (apply.iloc (0 . 0) "./boot/interaction.scm" . 602171))
     (if.true
       (call
         (touch.gloc.of extend-lexical-syntax)
         (push.const . #t)
         (apply.gloc.of extend-lexical-syntax "./boot/interaction.scm" . 603166))
       (call
         (touch.gloc.of mutable-literals)
         (push.const . #t)
         (apply.gloc.of mutable-literals "./boot/interaction.scm" . 604190))
       (push.cdr.iloc (2 . 0) "./boot/interaction.scm" . 606244)
       (apply.iloc+ (3 . 0) "./boot/interaction.scm" . 606238))
     (call
       (call
         (push.const . "--verbose")
         (push.const . #f)
         (apply.iloc (0 . 0) "./boot/interaction.scm" . 607266))
       (if.true.ret)
       (push.const . "-v")
       (push.const . #f)
       (apply.iloc (0 . 0) "./boot/interaction.scm" . 607288))
     (if.true
       (call
         (push.const . #t)
         (apply.gloc.of scheme-load-verbose "./boot/interaction.scm" . 608286))
       (call
         (push.const . #t)
         (apply.gloc.of auto-compile-verbose "./boot/interaction.scm" . 609310))
       (const . #t)
       (set.iloc (4 . 2) "./boot/interaction.scm" . 610334)
       (const . #f)
       (set.iloc (4 . 6) "./boot/interaction.scm" . 611358)
       (push.cdr.iloc (2 . 0) "./boot/interaction.scm" . 612388)
       (apply.iloc+ (3 . 0) "./boot/interaction.scm" . 612382))
     (call
       (call
         (push.const . "--mute")
         (push.const . #f)
         (apply.iloc (0 . 0) "./boot/interaction.scm" . 613410))
       (if.true.ret)
       (push.const . "-m")
       (push.const . #f)
       (apply.iloc (0 . 0) "./boot/interaction.scm" . 613429))
     (if.true
       (const . #f)
       (set.iloc (4 . 2) "./boot/interaction.scm" . 614430)
       (const . #t)
       (set.iloc (4 . 6) "./boot/interaction.scm" . 615454)
       (push.cdr.iloc (2 . 0) "./boot/interaction.scm" . 616484)
       (apply.iloc+ (3 . 0) "./boot/interaction.scm" . 616478))
     (call
       (call
         (push.const . "--quiet")
         (push.const . #f)
         (apply.iloc (0 . 0) "./boot/interaction.scm" . 617506))
       (if.true.ret)
       (push.const . "-q")
       (push.const . #f)
       (apply.iloc (0 . 0) "./boot/interaction.scm" . 617526))
     (if.true
       (const . #f)
       (set.iloc (4 . 2) "./boot/interaction.scm" . 618526)
       (const . #t)
       (set.iloc (4 . 6) "./boot/interaction.scm" . 619550)
       (const . #t)
       (set.iloc (4 . 3) "./boot/interaction.scm" . 620574)
       (push.cdr.iloc (2 . 0) "./boot/interaction.scm" . 621604)
       (apply.iloc+ (3 . 0) "./boot/interaction.scm" . 621598))
     (call
       (call
         (push.const . "--interactive")
         (push.const . #f)
         (apply.iloc (0 . 0) "./boot/interaction.scm" . 622626))
       (if.true.ret)
       (push.const . "-i")
       (push.const . #f)
       (apply.iloc (0 . 0) "./boot/interaction.scm" . 622652))
     (if.true
       (const . #t)
       (set.iloc (4 . 4) "./boot/interaction.scm" . 623646)
       (push.cdr.iloc (2 . 0) "./boot/interaction.scm" . 624676)
       (apply.iloc+ (3 . 0) "./boot/interaction.scm" . 624670))
     (call
       (push.const . "--dump-condition")
       (push.const . #f)
       (apply.iloc (0 . 0) "./boot/interaction.scm" . 625694))
     (if.true
       (call
         (touch.gloc.of dump-condition)
         (push.const . #t)
         (apply.gloc.of dump-condition "./boot/interaction.scm" . 626718))
       (push.cdr.iloc (2 . 0) "./boot/interaction.scm" . 627748)
       (apply.iloc+ (3 . 0) "./boot/interaction.scm" . 627742))
     (call
       (push.const . "--acc")
       (push.const . #f)
       (apply.iloc (0 . 0) "./boot/interaction.scm" . 628766))
     (if.true
       (call
         (cdr.iloc (2 . 0) "./boot/interaction.scm" . 629801)
         (if.pair?.ret.const . #t)
         (touch.gloc.of |bad-option`4328*|)
         (push.iloc.1 . 0)
         (apply.gloc.of |bad-option`4328*| "./boot/interaction.scm" . 629812))
       (call
         (touch.gloc.of |set-opt-acc`4328*|)
         (push.cadr.iloc (2 . 0) "./boot/interaction.scm" . 630827)
         (apply.gloc.of |set-opt-acc`4328*| "./boot/interaction.scm" . 630814))
       (push.cddr.iloc (2 . 0) "./boot/interaction.scm" . 631844)
       (apply.iloc+ (3 . 0) "./boot/interaction.scm" . 631838))
     (call
       (push.const . "--acc")
       (push.const . #t)
       (apply.iloc (0 . 0) "./boot/interaction.scm" . 632862))
     (push)
     (extend . 1)
     (iloc.0 . 0)
     (if.true
       (push.iloc.0 . 0)
       (push.const . "")
       (subr.gloc.of string=? 2 "./boot/interaction.scm" . 634922)
       (if.true
         (touch.gloc.of |bad-option`4328*|)
         (push.iloc 2 . 0)
         (apply.gloc.of |bad-option`4328*| "./boot/interaction.scm" . 635946))
       (call
         (touch.gloc.of |set-opt-acc`4328*|)
         (push.iloc.0 . 0)
         (apply.gloc.of |set-opt-acc`4328*| "./boot/interaction.scm" . 637994))
       (push.cdr.iloc (3 . 0) "./boot/interaction.scm" . 639024)
       (apply.iloc+ (4 . 0) "./boot/interaction.scm" . 639018))
     (call
       (push.const . "--disable-acc")
       (push.const . #f)
       (apply.iloc (1 . 0) "./boot/interaction.scm" . 640030))
     (if.true
       (call (push.const . #f) (apply.gloc.of auto-compile-cache "./boot/interaction.scm" . 641054))
       (push.cdr.iloc (3 . 0) "./boot/interaction.scm" . 642084)
       (apply.iloc+ (4 . 0) "./boot/interaction.scm" . 642078))
     (call
       (push.const . "--clean-acc")
       (push.const . #f)
       (apply.iloc (1 . 0) "./boot/interaction.scm" . 643102))
     (if.true
       (call
         (touch.gloc.of auto-compile-cache-clean)
         (apply.gloc.of auto-compile-cache-clean "./boot/interaction.scm" . 644126))
       (push.cdr.iloc (3 . 0) "./boot/interaction.scm" . 645156)
       (apply.iloc+ (4 . 0) "./boot/interaction.scm" . 645150))
     (call
       (push.const . "--sitelib")
       (push.const . #f)
       (apply.iloc (1 . 0) "./boot/interaction.scm" . 646174))
     (if.true
       (call
         (cdr.iloc (3 . 0) "./boot/interaction.scm" . 647209)
         (if.pair?.ret.const . #t)
         (touch.gloc.of |bad-option`4328*|)
         (push.iloc 2 . 0)
         (apply.gloc.of |bad-option`4328*| "./boot/interaction.scm" . 647220))
       (call
         (touch.gloc.of |add-opt-sitelib`4328*|)
         (push.cadr.iloc (3 . 0) "./boot/interaction.scm" . 648239)
         (apply.gloc.of |add-opt-sitelib`4328*| "./boot/interaction.scm" . 648222))
       (push.cddr.iloc (3 . 0) "./boot/interaction.scm" . 649252)
       (apply.iloc+ (4 . 0) "./boot/interaction.scm" . 649246))
     (call
       (push.const . "--sitelib")
       (push.const . #t)
       (apply.iloc (1 . 0) "./boot/interaction.scm" . 650270))
     (push)
     (extend . 1)
     (iloc.0 . 0)
     (if.true
       (push.iloc.0 . 0)
       (push.const . "")
       (subr.gloc.of string=? 2 "./boot/interaction.scm" . 652330)
       (if.true
         (touch.gloc.of |bad-option`4328*|)
         (push.iloc 3 . 0)
         (apply.gloc.of |bad-option`4328*| "./boot/interaction.scm" . 653354))
       (call
         (touch.gloc.of |add-opt-sitelib`4328*|)
         (push.iloc.0 . 0)
         (apply.gloc.of |add-opt-sitelib`4328*| "./boot/interaction.scm" . 655402))
       (push.cdr.iloc (4 . 0) "./boot/interaction.scm" . 656432)
       (apply.iloc+ (5 . 0) "./boot/interaction.scm" . 656426))
     (call
       (push.const . "--loadpath")
       (push.const . #f)
       (apply.iloc (2 . 0) "./boot/interaction.scm" . 657438))
     (if.true
       (call
         (cdr.iloc (4 . 0) "./boot/interaction.scm" . 658473)
         (if.pair?.ret.const . #t)
         (touch.gloc.of |bad-option`4328*|)
         (push.iloc 3 . 0)
         (apply.gloc.of |bad-option`4328*| "./boot/interaction.scm" . 658484))
       (call
         (touch.gloc.of |add-opt-loadpath`4328*|)
         (push.cadr.iloc (4 . 0) "./boot/interaction.scm" . 659504)
         (apply.gloc.of |add-opt-loadpath`4328*| "./boot/interaction.scm" . 659486))
       (push.cddr.iloc (4 . 0) "./boot/interaction.scm" . 660516)
       (apply.iloc+ (5 . 0) "./boot/interaction.scm" . 660510))
     (call
       (push.const . "--loadpath")
       (push.const . #t)
       (apply.iloc (2 . 0) "./boot/interaction.scm" . 661534))
     (push)
     (extend . 1)
     (iloc.0 . 0)
     (if.true
       (push.iloc.0 . 0)
       (push.const . "")
       (subr.gloc.of string=? 2 "./boot/interaction.scm" . 663594)
       (if.true
         (touch.gloc.of |bad-option`4328*|)
         (push.iloc 4 . 0)
         (apply.gloc.of |bad-option`4328*| "./boot/interaction.scm" . 664618))
       (call
         (touch.gloc.of |add-opt-loadpath`4328*|)
         (push.iloc.0 . 0)
         (apply.gloc.of |add-opt-loadpath`4328*| "./boot/interaction.scm" . 666666))
       (push.cdr.iloc (5 . 0) "./boot/interaction.scm" . 667696)
       (apply.iloc+ (6 . 0) "./boot/interaction.scm" . 667690))
     (call
       (push.const . "--")
       (push.const . #f)
       (apply.iloc (3 . 0) "./boot/interaction.scm" . 668702))
     (if.true
       (const . #t)
       (set.iloc (7 . 5) "./boot/interaction.scm" . 669726)
       (call
         (push.cdr.iloc (5 . 0) "./boot/interaction.scm" . 670763)
         (apply.iloc (7 . 0) "./boot/interaction.scm" . 670750))
       (iloc 7 . 4)
       (if.false.ret)
       (apply.iloc (7 . 1) "./boot/interaction.scm" . 671791))
     (push.iloc 4 . 0)
     (push.const . 0)
     (push.subr.gloc.of string-ref 2 "./boot/interaction.scm" . 672806)
     (push.const . #\-)
     (subr.gloc.of char=? 2 "./boot/interaction.scm" . 672798)
     (if.true
       (touch.gloc.of |bad-option`4328*|)
       (push.iloc 4 . 0)
       (apply.gloc.of |bad-option`4328*| "./boot/interaction.scm" . 673822))
     (const . #t)
     (set.iloc (7 . 5) "./boot/interaction.scm" . 675870)
     (call (push.iloc 5 . 0) (apply.iloc (7 . 0) "./boot/interaction.scm" . 676894))
     (iloc 7 . 4)
     (if.false.ret)
     (apply.iloc (7 . 1) "./boot/interaction.scm" . 677935))
   (push.cdr.iloc (1 . 8) "./boot/interaction.scm" . 564252)
   (apply.iloc+ (0 . 0) "./boot/interaction.scm" . 565262))
 (set.gloc.of start-scheme-session)
 (ret.const.unspec))

;
((subr.gloc.of make-core-hashtable 0 "./boot/libraries.scm" . 5150)
 (set.gloc.of immutable-primitives)
 (ret.const.unspec))
((const begin quote define set! lambda let letrec* if or and)
 (set.gloc.of coreform-primitives)
 (ret.const.unspec))
((close
   (2 0 . setup-intrinsic-procs)
   (subr.gloc.of system-environment 0)
   (push)
   (subr.gloc.of interaction-environment 0)
   (push)
   (push.iloc.0 . 1)
   (subr.gloc.of copy-environment-variables! 3 "./boot/libraries.scm" . 12295)
   (call (apply.gloc.of scheme-library-exports "./boot/libraries.scm" . 13329))
   (push)
   (call
     (touch.gloc.of generate-library-id)
     (push.iloc.0 . 0)
     (apply.gloc.of generate-library-id "./boot/libraries.scm" . 14353))
   (push)
   (call
     (push.gloc.of core-primitive-name)
     (push.iloc.0 . 1)
     (apply.gloc.of map "./boot/libraries.scm" . 15382))
   (push)
   (extend . 3)
   (call
     (push.gloc.of |.L1308|)
     (push.iloc.0 . 2)
     (push.iloc.1 . 1)
     (apply.gloc.of for-each "./boot/libraries.scm" . 16393))
   (subr.gloc.of system-environment 0)
   (push)
   (subr.gloc.of interaction-environment 0)
   (push)
   (push.iloc.0 . 2)
   (subr.gloc.of copy-environment-variables! 3 "./boot/libraries.scm" . 20489)
   (push.iloc.0 . 0)
   (push.iloc.0 . 1)
   (call
     (touch.gloc.of unify-import-bindings)
     (call
       (push.gloc.of |.L1312|)
       (push.iloc.0 . 2)
       (push.iloc.1 . 1)
       (apply.gloc.of map "./boot/libraries.scm" . 22573))
     (push)
     (push.iloc.0 . 0)
     (push.iloc.0 . 1)
     (push.const)
     (push.subr.gloc.of core-hashtable-ref 3 "./boot/libraries.scm" . 23597)
     (push.subr.gloc.of append 2 "./boot/libraries.scm" . 22565)
     (apply.gloc.of unify-import-bindings "./boot/libraries.scm" . 21540))
   (push)
   (ret.subr.gloc.of core-hashtable-set! "./boot/libraries.scm" . 21513))
 (set.gloc.of |setup-intrinsic-procs`4437*|)
 (close
   (2 0)
   (push.iloc.0 . 1)
   (call
     (touch.gloc.of make-import)
     (push.iloc.0 . 0)
     (apply.gloc.of make-import "./boot/libraries.scm" . 63560))
   (ret.cons "./boot/libraries.scm" . 63552))
 (set.gloc.of |.L1307|)
 (close
   (2 0)
   (push.iloc.0 . 0)
   (push.iloc.0 . 1)
   (push.subr.gloc.of top-level-value 1 "./boot/libraries.scm" . 17453)
   (subr.gloc.of set-top-level-value! 2 "./boot/libraries.scm" . 17429)
   (push.gloc.of immutable-primitives)
   (push.iloc.0 . 0)
   (push.const . #t)
   (ret.subr.gloc.of core-hashtable-set! "./boot/libraries.scm" . 18453))
 (set.gloc.of |.L1308|)
 (close
   (2 0 . setup-core-primitive-procs)
   (call (apply.gloc.of scheme-library-exports "./boot/libraries.scm" . 38929))
   (push)
   (call
     (touch.gloc.of generate-library-id)
     (push.iloc.0 . 0)
     (apply.gloc.of generate-library-id "./boot/libraries.scm" . 39953))
   (push)
   (call
     (push.gloc.of core-primitive-name)
     (push.iloc.0 . 1)
     (apply.gloc.of map "./boot/libraries.scm" . 40982))
   (push)
   (extend . 3)
   (call
     (push.gloc.of |.L1311|)
     (push.iloc.0 . 2)
     (push.iloc.1 . 1)
     (apply.gloc.of for-each "./boot/libraries.scm" . 41993))
   (subr.gloc.of system-environment 0)
   (push)
   (subr.gloc.of interaction-environment 0)
   (push)
   (push.iloc.0 . 2)
   (subr.gloc.of copy-environment-variables! 3 "./boot/libraries.scm" . 46089)
   (push.iloc.0 . 0)
   (push.iloc.0 . 1)
   (call
     (touch.gloc.of unify-import-bindings)
     (call
       (push.gloc.of |.L1315|)
       (push.iloc.0 . 2)
       (push.iloc.1 . 1)
       (apply.gloc.of map "./boot/libraries.scm" . 48173))
     (push)
     (push.iloc.0 . 0)
     (push.iloc.0 . 1)
     (push.const)
     (push.subr.gloc.of core-hashtable-ref 3 "./boot/libraries.scm" . 49197)
     (push.subr.gloc.of append 2 "./boot/libraries.scm" . 48165)
     (apply.gloc.of unify-import-bindings "./boot/libraries.scm" . 47140))
   (push)
   (ret.subr.gloc.of core-hashtable-set! "./boot/libraries.scm" . 47113))
 (set.gloc.of |setup-core-primitive-procs`4437*|)
 (close
   (2 0)
   (push.iloc.0 . 0)
   (push.iloc.0 . 1)
   (push.subr.gloc.of top-level-value 1 "./boot/libraries.scm" . 43053)
   (subr.gloc.of set-top-level-value! 2 "./boot/libraries.scm" . 43029)
   (push.gloc.of immutable-primitives)
   (push.iloc.0 . 0)
   (push.const . #t)
   (ret.subr.gloc.of core-hashtable-set! "./boot/libraries.scm" . 44053))
 (set.gloc.of |.L1311|)
 (close
   (2 0)
   (push.iloc.0 . 1)
   (call
     (touch.gloc.of make-import)
     (push.iloc.0 . 0)
     (apply.gloc.of make-import "./boot/libraries.scm" . 22600))
   (ret.cons "./boot/libraries.scm" . 22592))
 (set.gloc.of |.L1312|)
 (close
   (2 0 . setup-intrinsic-macros)
   (call (apply.gloc.of scheme-library-exports "./boot/libraries.scm" . 27665))
   (push)
   (call
     (touch.gloc.of generate-library-id)
     (push.iloc.0 . 0)
     (apply.gloc.of generate-library-id "./boot/libraries.scm" . 28689))
   (push)
   (call
     (push.gloc.of core-primitive-name)
     (push.iloc.0 . 1)
     (apply.gloc.of map "./boot/libraries.scm" . 29718))
   (push)
   (extend . 3)
   (subr.gloc.of system-environment 0)
   (push)
   (subr.gloc.of interaction-environment 0)
   (push)
   (push.iloc.1 . 1)
   (subr.gloc.of copy-environment-macros! 3 "./boot/libraries.scm" . 30729)
   (subr.gloc.of system-environment 0)
   (push)
   (subr.gloc.of interaction-environment 0)
   (push)
   (push.iloc.0 . 2)
   (subr.gloc.of copy-environment-macros! 3 "./boot/libraries.scm" . 31753)
   (push.iloc.0 . 0)
   (push.iloc.0 . 1)
   (call
     (touch.gloc.of unify-import-bindings)
     (call
       (push.gloc.of |.L1317|)
       (push.iloc.0 . 2)
       (push.iloc.1 . 1)
       (apply.gloc.of map "./boot/libraries.scm" . 33837))
     (push)
     (push.iloc.0 . 0)
     (push.iloc.0 . 1)
     (push.const)
     (push.subr.gloc.of core-hashtable-ref 3 "./boot/libraries.scm" . 34861)
     (push.subr.gloc.of append 2 "./boot/libraries.scm" . 33829)
     (apply.gloc.of unify-import-bindings "./boot/libraries.scm" . 32804))
   (push)
   (ret.subr.gloc.of core-hashtable-set! "./boot/libraries.scm" . 32777))
 (set.gloc.of |setup-intrinsic-macros`4437*|)
 (close
   (2 0 . compound-exports)
   (call (apply.gloc.of scheme-library-exports "./boot/libraries.scm" . 68625))
   (push)
   (call
     (touch.gloc.of generate-library-id)
     (push.iloc.0 . 0)
     (apply.gloc.of generate-library-id "./boot/libraries.scm" . 68655))
   (push)
   (extend . 2)
   (push.iloc.0 . 0)
   (push.iloc.0 . 1)
   (push.iloc.0 . 0)
   (push.iloc.0 . 1)
   (push.const)
   (push.subr.gloc.of core-hashtable-ref 3 "./boot/libraries.scm" . 69676)
   (push.iloc.0 . 0)
   (call
     (touch.gloc.of generate-library-id)
     (push.iloc.1 . 1)
     (apply.gloc.of generate-library-id "./boot/libraries.scm" . 68691))
   (push)
   (push.const)
   (push.subr.gloc.of core-hashtable-ref 3 "./boot/libraries.scm" . 70700)
   (push.subr.gloc.of append 2 "./boot/libraries.scm" . 69668)
   (ret.subr.gloc.of core-hashtable-set! "./boot/libraries.scm" . 69641))
 (set.gloc.of |compound-exports`4437*|)
 (close
   (2 0)
   (push.iloc.0 . 1)
   (call
     (touch.gloc.of make-import)
     (push.iloc.0 . 0)
     (apply.gloc.of make-import "./boot/libraries.scm" . 48200))
   (ret.cons "./boot/libraries.scm" . 48192))
 (set.gloc.of |.L1315|)
 (close
   (2 0)
   (subr.gloc.of current-macro-environment 0)
   (push)
   (push.iloc.0 . 1)
   (push.const . #f)
   (push.subr.gloc.of core-hashtable-ref 3 "./boot/libraries.scm" . 57372)
   (extend . 1)
   (iloc.0 . 0)
   (if.true
     (subr.gloc.of current-macro-environment 0)
     (push)
     (push.iloc.1 . 0)
     (push.iloc.0 . 0)
     (ret.subr.gloc.of core-hashtable-set! "./boot/libraries.scm" . 59425))
   (ret.const.unspec))
 (set.gloc.of |.L1316|)
 (close
   (2 0)
   (push.iloc.0 . 1)
   (call
     (touch.gloc.of make-import)
     (push.iloc.0 . 0)
     (apply.gloc.of make-import "./boot/libraries.scm" . 33864))
   (ret.cons "./boot/libraries.scm" . 33856))
 (set.gloc.of |.L1317|)
 (close
   (2 0 . setup-core-primitive-macros)
   (call (apply.gloc.of scheme-library-exports "./boot/libraries.scm" . 53265))
   (push)
   (call
     (touch.gloc.of generate-library-id)
     (push.iloc.0 . 0)
     (apply.gloc.of generate-library-id "./boot/libraries.scm" . 54289))
   (push)
   (call
     (push.gloc.of core-primitive-name)
     (push.iloc.0 . 1)
     (apply.gloc.of map "./boot/libraries.scm" . 55318))
   (push)
   (extend . 3)
   (call
     (push.gloc.of |.L1316|)
     (push.iloc.0 . 2)
     (push.iloc.1 . 1)
     (apply.gloc.of for-each "./boot/libraries.scm" . 56329))
   (subr.gloc.of system-environment 0)
   (push)
   (subr.gloc.of interaction-environment 0)
   (push)
   (push.iloc.0 . 2)
   (subr.gloc.of copy-environment-macros! 3 "./boot/libraries.scm" . 61449)
   (push.iloc.0 . 0)
   (push.iloc.0 . 1)
   (call
     (touch.gloc.of unify-import-bindings)
     (call
       (push.gloc.of |.L1307|)
       (push.iloc.0 . 2)
       (push.iloc.1 . 1)
       (apply.gloc.of map "./boot/libraries.scm" . 63533))
     (push)
     (push.iloc.0 . 0)
     (push.iloc.0 . 1)
     (push.const)
     (push.subr.gloc.of core-hashtable-ref 3 "./boot/libraries.scm" . 64557)
     (push.subr.gloc.of append 2 "./boot/libraries.scm" . 63525)
     (apply.gloc.of unify-import-bindings "./boot/libraries.scm" . 62500))
   (push)
   (ret.subr.gloc.of core-hashtable-set! "./boot/libraries.scm" . 62473))
 (set.gloc.of |setup-core-primitive-macros`4437*|)
 (call
   (touch.gloc.of |setup-intrinsic-macros`4437*|)
   (push.const core intrinsics)
   (push.const
     library
     define
     define-syntax
     quote
     lambda
     if
     set!
     cond
     case
     and
     or
     let
     let*
     letrec
     letrec*
     let-values
     let*-values
     begin
     quasiquote
     unquote
     unquote-splicing
     let-syntax
     letrec-syntax
     syntax-rules
     identifier-syntax
     assert
     else
     =>
     ...
     _)
   (apply.gloc.of |setup-intrinsic-macros`4437*| "./boot/libraries.scm" . 72707))
 (call
   (touch.gloc.of |setup-intrinsic-procs`4437*|)
   (push.const core intrinsics)
   (push.const
     eq?
     eqv?
     equal?
     procedure?
     number?
     complex?
     real?
     rational?
     integer?
     real-valued?
     rational-valued?
     integer-valued?
     exact?
     inexact?
     inexact
     exact
     =
     <
     >
     <=
     >=
     zero?
     positive?
     negative?
     odd?
     even?
     finite?
     infinite?
     nan?
     max
     min
     +
     *
     -
     /
     abs
     div-and-mod
     div
     mod
     div0-and-mod0
     div0
     mod0
     gcd
     lcm
     numerator
     denominator
     floor
     ceiling
     truncate
     round
     rationalize
     exp
     log
     sin
     cos
     tan
     asin
     acos
     atan
     sqrt
     exact-integer-sqrt
     expt
     make-rectangular
     make-polar
     real-part
     imag-part
     magnitude
     angle
     number->string
     string->number
     not
     boolean?
     boolean=?
     pair?
     cons
     car
     cdr
     caar
     cadr
     cdar
     cddr
     caaar
     caadr
     cadar
     caddr
     cdaar
     cdadr
     cddar
     cdddr
     caaaar
     caaadr
     caadar
     caaddr
     cadaar
     cadadr
     caddar
     cadddr
     cdaaar
     cdaadr
     cdadar
     cdaddr
     cddaar
     cddadr
     cdddar
     cddddr
     null?
     list?
     list
     length
     append
     reverse
     list-tail
     list-ref
     map
     for-each
     symbol?
     symbol=?
     symbol->string
     string->symbol
     char?
     char->integer
     integer->char
     char=?
     char<?
     char>?
     char<=?
     char>=?
     string?
     make-string
     string
     string-length
     string-ref
     string=?
     string<?
     string>?
     string<=?
     string>=?
     substring
     string-append
     string->list
     list->string
     string-copy
     string-for-each
     vector?
     make-vector
     vector
     vector-length
     vector-ref
     vector-set!
     vector->list
     list->vector
     vector-fill!
     vector-map
     vector-for-each
     error
     assertion-violation
     apply
     call-with-current-continuation
     call/cc
     values
     call-with-values
     dynamic-wind)
   (apply.gloc.of |setup-intrinsic-procs`4437*| "./boot/libraries.scm" . 84995))
 (call
   (touch.gloc.of |setup-core-primitive-macros`4437*|)
   (push.const core primitives)
   (push.const do syntax-case syntax)
   (apply.gloc.of |setup-core-primitive-macros`4437*| "./boot/libraries.scm" . 131075))
 (call
   (touch.gloc.of |setup-core-primitive-procs`4437*|)
   (push.const core primitives)
   (push.const
     environment
     eval
     flonum?
     real->flonum
     fl=?
     fl<?
     fl>?
     fl<=?
     fl>=?
     flinteger?
     flzero?
     flpositive?
     flnegative?
     flodd?
     fleven?
     flfinite?
     flinfinite?
     flnan?
     flmax
     flmin
     fl+
     fl*
     fl-
     fl/
     fldiv
     fldiv0
     flnumerator
     fldenominator
     flfloor
     flceiling
     fltruncate
     flround
     flexp
     flexpt
     fllog
     flsin
     flcos
     fltan
     flasin
     flacos
     flatan
     flabs
     flsqrt
     fixnum->flonum
     fixnum?
     fixnum-width
     least-fixnum
     greatest-fixnum
     fx=?
     fx<?
     fx>?
     fx<=?
     fx>=?
     fxzero?
     fxpositive?
     fxnegative?
     fxodd?
     fxeven?
     fxmax
     fxmin
     fx+
     fx*
     fx-
     fxdiv
     fxdiv0
     fxnot
     fxand
     fxior
     fxxor
     fxif
     fxbit-count
     fxlength
     fxfirst-bit-set
     fxbit-set?
     fxcopy-bit
     fxarithmetic-shift
     fxarithmetic-shift-left
     fxarithmetic-shift-right
     fxbit-field
     fxcopy-bit-field
     &no-infinities
     make-no-infinities-violation
     no-infinities-violation?
     &no-nans
     make-no-nans-violation
     no-nans-violation?
     bitwise-not
     bitwise-and
     bitwise-ior
     bitwise-xor
     bitwise-arithmetic-shift
     bitwise-first-bit-set
     bitwise-length
     bitwise-bit-count
     make-variable-transformer
     identifier?
     bound-identifier=?
     free-identifier=?
     datum->syntax
     syntax->datum
     generate-temporaries
     syntax-violation
     memq
     memv
     member
     assq
     assv
     assoc
     cons*
     list-head
     raise
     raise-continuable
     with-exception-handler
     record?
     record-rtd
     record-type-name
     record-type-parent
     record-type-uid
     record-type-generative?
     record-type-sealed?
     record-type-opaque?
     record-type-field-names
     record-field-mutable?
     make-record-type-descriptor
     record-type-descriptor?
     make-record-constructor-descriptor
     record-constructor
     record-predicate
     record-accessor
     record-mutator
     make-record-type
     record-type?
     record-type-rtd
     record-type-rcd
     condition
     simple-conditions
     condition?
     condition-predicate
     condition-accessor
     &condition
     &message
     make-message-condition
     message-condition?
     condition-message
     &warning
     make-warning
     warning?
     &serious
     make-serious-condition
     serious-condition?
     &error
     make-error
     error?
     &violation
     make-violation
     violation?
     &assertion
     make-assertion-violation
     assertion-violation?
     &irritants
     make-irritants-condition
     irritants-condition?
     condition-irritants
     &who
     make-who-condition
     who-condition?
     condition-who
     &non-continuable
     make-non-continuable-violation
     non-continuable-violation?
     &implementation-restriction
     make-implementation-restriction-violation
     implementation-restriction-violation?
     &lexical
     make-lexical-violation
     lexical-violation?
     &syntax
     make-syntax-violation
     syntax-violation?
     syntax-violation-form
     syntax-violation-subform
     &undefined
     make-undefined-violation
     undefined-violation?
     set-car!
     set-cdr!
     string-set!
     string-fill!
     quotient
     remainder
     modulo
     char-whitespace?
     display
     write
     newline
     read-char
     write-char
     call-with-port
     eof-object
     eof-object?
     standard-input-port
     standard-output-port
     standard-error-port
     current-input-port
     current-output-port
     current-error-port
     input-port?
     output-port?
     port?
     flush-output-port
     output-port-buffer-mode
     close-port
     native-transcoder-descriptor
     port-transcoder-descriptor
     extract-accumulated-bytevector
     extract-accumulated-string
     get-accumulated-string
     open-port
     nonblock-byte-ready?
     lookahead-char
     get-char
     port-has-port-position?
     port-position
     port-has-set-port-position!?
     set-port-position!
     port-eof?
     get-u8
     lookahead-u8
     get-bytevector-n
     get-bytevector-n!
     get-bytevector-all
     get-bytevector-some
     get-string-n
     get-string-n!
     get-string-all
     get-line
     get-datum
     put-u8
     put-bytevector
     put-char
     put-string
     put-datum
     &i/o
     make-i/o-error
     i/o-error?
     &i/o-read
     make-i/o-read-error
     i/o-read-error?
     &i/o-write
     make-i/o-write-error
     i/o-write-error?
     &i/o-invalid-position
     make-i/o-invalid-position-error
     i/o-invalid-position-error?
     i/o-error-position
     &i/o-filename
     make-i/o-filename-error
     i/o-filename-error?
     i/o-error-filename
     &i/o-file-protection
     make-i/o-file-protection-error
     i/o-file-protection-error?
     &i/o-file-is-read-only
     make-i/o-file-is-read-only-error
     i/o-file-is-read-only-error?
     &i/o-file-already-exists
     make-i/o-file-already-exists-error
     i/o-file-already-exists-error?
     &i/o-file-does-not-exist
     make-i/o-file-does-not-exist-error
     i/o-file-does-not-exist-error?
     &i/o-port
     make-i/o-port-error
     i/o-port-error?
     i/o-error-port
     &i/o-decoding
     make-i/o-decoding-error
     i/o-decoding-error?
     &i/o-encoding
     make-i/o-encoding-error
     i/o-encoding-error?
     i/o-encoding-error-char
     file-exists?
     delete-file
     string-hash
     symbol-hash
     equal-hash
     command-line
     exit
     native-endianness
     bytevector?
     make-bytevector
     bytevector-length
     bytevector=?
     bytevector-fill!
     bytevector-copy!
     bytevector-copy
     bytevector-u8-ref
     bytevector-s8-ref
     bytevector-u8-set!
     bytevector-s8-set!
     bytevector->u8-list
     u8-list->bytevector
     bytevector-u16-ref
     bytevector-s16-ref
     bytevector-u16-native-ref
     bytevector-s16-native-ref
     bytevector-u16-set!
     bytevector-s16-set!
     bytevector-u16-native-set!
     bytevector-s16-native-set!
     bytevector-u32-ref
     bytevector-s32-ref
     bytevector-u32-native-ref
     bytevector-s32-native-ref
     bytevector-u32-set!
     bytevector-s32-set!
     bytevector-u32-native-set!
     bytevector-s32-native-set!
     bytevector-u64-ref
     bytevector-s64-ref
     bytevector-u64-native-ref
     bytevector-s64-native-ref
     bytevector-u64-set!
     bytevector-s64-set!
     bytevector-u64-native-set!
     bytevector-s64-native-set!
     bytevector-ieee-single-ref
     bytevector-ieee-single-native-ref
     bytevector-ieee-single-set!
     bytevector-ieee-single-native-set!
     bytevector-ieee-double-ref
     bytevector-ieee-double-native-ref
     bytevector-ieee-double-set!
     bytevector-ieee-double-native-set!
     string->utf8
     utf8->string
     put-byte
     make-string-output-port
     make-string-input-port
     make-transcoded-port
     make-temporary-file-port
     port-device-subtype
     core-eval
     command-line-shift
     unspecified
     unspecified?
     generate-temporary-symbol
     circular-list?
     cyclic-object?
     list-transpose
     list-transpose+
     list-transpose*
     list-copy
     vector-copy
     make-parameter
     gensym
     format
     pretty-print
     pretty-print-line-length
     pretty-print-initial-indent
     pretty-print-maximum-lines
     pretty-print-unwrap-syntax
     peek-char
     read
     read-with-shared-structure
     write-with-shared-structure
     tuple
     tuple?
     make-tuple
     tuple-ref
     tuple-set!
     tuple-length
     tuple-index
     tuple->list
     make-weak-mapping
     weak-mapping?
     weak-mapping-key
     weak-mapping-value
     make-core-hashtable
     core-hashtable?
     make-shared-core-hashtable
     make-weak-core-hashtable
     weak-core-hashtable?
     make-weak-shared-core-hashtable
     core-hashtable-contains?
     core-hashtable-ref
     core-hashtable-set!
     core-hashtable-delete!
     core-hashtable-clear!
     core-hashtable->alist
     core-hashtable-size
     core-hashtable-copy
     core-hashtable-mutable?
     core-hashtable-equivalence-function
     core-hashtable-hash-function
     usleep
     scheme-error
     architecture-feature
     bytevector-c-short-ref
     bytevector-c-unsigned-short-ref
     bytevector-c-short-set!
     bytevector-c-int-ref
     bytevector-c-unsigned-int-ref
     bytevector-c-int-set!
     bytevector-c-long-ref
     bytevector-c-unsigned-long-ref
     bytevector-c-long-set!
     bytevector-c-long-long-ref
     bytevector-c-unsigned-long-long-ref
     bytevector-c-long-long-set!
     bytevector-c-void*-ref
     bytevector-c-void*-set!
     bytevector-c-int8-ref
     bytevector-c-int16-ref
     bytevector-c-int32-ref
     bytevector-c-int64-ref
     bytevector-c-uint8-ref
     bytevector-c-uint16-ref
     bytevector-c-uint32-ref
     bytevector-c-uint64-ref
     bytevector-c-float-ref
     bytevector-c-double-ref
     bytevector-c-int8-set!
     bytevector-c-int16-set!
     bytevector-c-int32-set!
     bytevector-c-int64-set!
     bytevector-c-float-set!
     bytevector-c-double-set!
     string->utf8/nul
     bytevector-c-strlen
     collect
     collect-notify
     collect-stack-notify
     collect-trip-bytes
     display-heap-statistics
     display-object-statistics
     backtrace
     expansion-backtrace
     backtrace-line-length
     display-backtrace
     warning-level
     restricted-print-line-length
     record-print-nesting-limit
     macro-expand
     compile
     compile-coreform
     closure-code
     current-environment
     current-macro-environment
     current-variable-environment
     current-dynamic-environment
     system-environment
     interaction-environment
     make-environment
     copy-environment-variables!
     copy-environment-macros!
     top-level-bound?
     top-level-value
     set-top-level-value!
     core-read
     current-source-comments
     current-after-expansion-hook
     string-contains
     symbol-contains
     subr?
     make-bytevector-mapping
     bytevector-mapping?
     scheme-library-exports
     scheme-library-paths
     scheme-load-paths
     scheme-load-verbose
     add-load-path
     add-library-path
     library-extensions
     auto-compile-verbose
     auto-compile-cache
     directory-list
     current-directory
     create-directory
     home-directory
     decode-flonum
     load
     system-share-path
     system-extension-path
     lookup-process-environment
     process-environment->alist
     set-current-input-port!
     set-current-output-port!
     set-current-error-port!
     open-builtin-data-input-port
     current-library-infix
     current-library-suffix
     current-primitive-prefix
     current-rename-delimiter
     string->uninterned-symbol
     uninterned-symbol?
     uninterned-symbol-prefix
     uninterned-symbol-suffix
     socket?
     make-socket
     socket-shutdown
     socket-close
     socket->port
     socket-port
     socket-send
     socket-recv
     socket-accept
     shutdown-output-port
     port-closed?
     track-file-open
     getenv
     gethostname
     system
     process
     process-spawn
     process-shell-command
     process-wait
     current-exception-printer
     make-shared-queue
     shared-queue?
     shared-queue-shutdown
     shared-queue-push!
     shared-queue-pop!
     make-shared-bag
     shared-bag?
     shared-bag-put!
     shared-bag-get!
     serializable?
     timeout-object?
     shutdown-object?
     spawn
     spawn-timeout
     spawn-heap-limit
     display-thread-status
     on-primordial-thread?
     local-heap-object?
     make-uuid
     time-usage
     microsecond
     microsecond->utc
     microsecond->string
     decode-microsecond
     encode-microsecond
     file-size-in-bytes
     file-regular?
     file-directory?
     file-symbolic-link?
     file-readable?
     file-writable?
     file-executable?
     file-stat-ctime
     file-stat-mtime
     file-stat-atime
     create-symbolic-link
     create-hard-link
     rename-file
     change-file-mode
     make-cmwc-random-state
     cmwc-random-u32
     cmwc-random-real)
   (apply.gloc.of |setup-core-primitive-procs`4437*| "./boot/libraries.scm" . 136195))
 (touch.gloc.of |compound-exports`4437*|)
 (push.const core primitives)
 (push.const core intrinsics)
 (apply.gloc.of |compound-exports`4437*| "./boot/libraries.scm" . 578563))
((gloc.of assertion-violation) (set.gloc.of |.@assertion-violation|) (ret.const.unspec))
((gloc.of undefined-violation) (set.gloc.of |.@undefined-violation|) (ret.const.unspec))
((gloc.of lexical-violation) (set.gloc.of |.@lexical-violation|) (ret.const.unspec))
((gloc.of error) (set.gloc.of |.@error|) (ret.const.unspec))
((gloc.of implementation-restriction-violation)
 (set.gloc.of |.@implementation-restriction-violation|)
 (ret.const.unspec))
((gloc.of raise-i/o-read-error) (set.gloc.of |.@raise-i/o-read-error|) (ret.const.unspec))
((gloc.of raise-i/o-write-error) (set.gloc.of |.@raise-i/o-write-error|) (ret.const.unspec))
((gloc.of raise-i/o-file-protection-error)
 (set.gloc.of |.@raise-i/o-file-protection-error|)
 (ret.const.unspec))
((gloc.of raise-i/o-file-is-read-only-error)
 (set.gloc.of |.@raise-i/o-file-is-read-only-error|)
 (ret.const.unspec))
((gloc.of raise-i/o-file-already-exists-error)
 (set.gloc.of |.@raise-i/o-file-already-exists-error|)
 (ret.const.unspec))
((gloc.of raise-i/o-file-does-not-exist-error)
 (set.gloc.of |.@raise-i/o-file-does-not-exist-error|)
 (ret.const.unspec))
((gloc.of raise-i/o-decoding-error) (set.gloc.of |.@raise-i/o-decoding-error|) (ret.const.unspec))
((gloc.of raise-i/o-encoding-error) (set.gloc.of |.@raise-i/o-encoding-error|) (ret.const.unspec))
((gloc.of raise-i/o-invalid-position-error)
 (set.gloc.of |.@raise-i/o-invalid-position-error|)
 (ret.const.unspec))
((gloc.of raise-i/o-filename-error) (set.gloc.of |.@raise-i/o-filename-error|) (ret.const.unspec))
((gloc.of raise-i/o-error) (set.gloc.of |.@raise-i/o-error|) (ret.const.unspec))
((gloc.of perform-dynamic-wind) (set.gloc.of |.@perform-dynamic-wind|) (ret.const.unspec))
((gloc.of start-scheme-session) (set.gloc.of |.@start-scheme-session|) (ret.const.unspec))
((gloc.of apply-scheme-proc-assistant)
 (set.gloc.of |.@apply-scheme-proc-assistant|)
 (ret.const.unspec))
((gloc.of pretty-print) (set.gloc.of |.@pretty-print|) (ret.const.unspec))
((gloc.of nongenerative-record-types)
 (set.gloc.of |.@nongenerative-record-types|)
 (ret.const.unspec))
((close
   (1 0)
   (push.gloc.of immutable-primitives)
   (push.iloc.0 . 0)
   (push.const . #t)
   (ret.subr.gloc.of core-hashtable-set! "./boot/libraries.scm" . 613401))
 (set.gloc.of |.L1331|)
 (push.const
   |.set-top-level-macro!|
   |.require-scheme-library|
   |.intern-scheme-library|
   |.unintern-scheme-library|
   |.vars|
   |.syntax-dispatch|
   |.flatten-syntax|
   |.transformer-thunk|
   |.syntax/i0n|
   |.syntax/i1n|
   |.syntax/i2n|
   |.syntax/i3n|
   |.syntax/c0n|
   |.syntax/c1n|
   |.syntax/c2n|
   |.syntax/c3n|
   |.syntax/i0e|
   |.syntax/i1e|
   |.syntax/i2e|
   |.syntax/i3e|
   |.syntax/c0e|
   |.syntax/c1e|
   |.syntax/c2e|
   |.syntax/c3e|)
 (extend . 1)
 (call
   (push.gloc.of |.L1331|)
   (push.iloc.0 . 0)
   (apply.gloc.of for-each "./boot/libraries.scm" . 613379))
 (subr.gloc.of system-environment 0)
 (push)
 (subr.gloc.of interaction-environment 0)
 (push)
 (push.iloc.0 . 0)
 (ret.subr.gloc.of copy-environment-variables! "./boot/libraries.scm" . 614403))
((subr.gloc.of system-environment 0)
 (push)
 (subr.gloc.of interaction-environment 0)
 (push)
 (push.const import)
 (ret.subr.gloc.of copy-environment-macros! "./boot/libraries.scm" . 617473))
((push.gloc.of immutable-primitives)
 (subr.gloc.of core-hashtable-copy 1 "./boot/libraries.scm" . 618524)
 (touch.gloc.of immutable-primitives)
 (set.gloc.of immutable-primitives "./boot/libraries.scm" . 618497)
 (ret.const.unspec))

;
