((push.const . |.list?|)
 (push.gloc.of list?)
 (subr.gloc.of set-top-level-value! 2 "./boot/first-load.scm" . 6147)
 (push.const . |.null?|)
 (push.gloc.of null?)
 (subr.gloc.of set-top-level-value! 2 "./boot/first-load.scm" . 7171)
 (push.const . |.pair?|)
 (push.gloc.of pair?)
 (subr.gloc.of set-top-level-value! 2 "./boot/first-load.scm" . 8195)
 (push.const . |.car|)
 (push.gloc.of car)
 (subr.gloc.of set-top-level-value! 2 "./boot/first-load.scm" . 9219)
 (push.const . |.cdr|)
 (push.gloc.of cdr)
 (subr.gloc.of set-top-level-value! 2 "./boot/first-load.scm" . 10243)
 (push.const . |.caar|)
 (push.gloc.of caar)
 (subr.gloc.of set-top-level-value! 2 "./boot/first-load.scm" . 11267)
 (push.const . |.cadr|)
 (push.gloc.of cadr)
 (subr.gloc.of set-top-level-value! 2 "./boot/first-load.scm" . 12291)
 (push.const . |.cdar|)
 (push.gloc.of cdar)
 (subr.gloc.of set-top-level-value! 2 "./boot/first-load.scm" . 13315)
 (push.const . |.cddr|)
 (push.gloc.of cddr)
 (subr.gloc.of set-top-level-value! 2 "./boot/first-load.scm" . 14339)
 (push.const . |.caaar|)
 (push.gloc.of caaar)
 (subr.gloc.of set-top-level-value! 2 "./boot/first-load.scm" . 15363)
 (push.const . |.caadr|)
 (push.gloc.of caadr)
 (subr.gloc.of set-top-level-value! 2 "./boot/first-load.scm" . 16387)
 (push.const . |.cadar|)
 (push.gloc.of cadar)
 (subr.gloc.of set-top-level-value! 2 "./boot/first-load.scm" . 17411)
 (push.const . |.caddr|)
 (push.gloc.of caddr)
 (subr.gloc.of set-top-level-value! 2 "./boot/first-load.scm" . 18435)
 (push.const . |.cdaar|)
 (push.gloc.of cdaar)
 (subr.gloc.of set-top-level-value! 2 "./boot/first-load.scm" . 19459)
 (push.const . |.cdadr|)
 (push.gloc.of cdadr)
 (subr.gloc.of set-top-level-value! 2 "./boot/first-load.scm" . 20483)
 (push.const . |.cddar|)
 (push.gloc.of cddar)
 (subr.gloc.of set-top-level-value! 2 "./boot/first-load.scm" . 21507)
 (push.const . |.cdddr|)
 (push.gloc.of cdddr)
 (subr.gloc.of set-top-level-value! 2 "./boot/first-load.scm" . 22531)
 (push.const . |.cdddar|)
 (push.gloc.of cdddar)
 (subr.gloc.of set-top-level-value! 2 "./boot/first-load.scm" . 23555)
 (push.const . |.caddar|)
 (push.gloc.of caddar)
 (subr.gloc.of set-top-level-value! 2 "./boot/first-load.scm" . 24579)
 (push.const . |.cddadr|)
 (push.gloc.of cddadr)
 (subr.gloc.of set-top-level-value! 2 "./boot/first-load.scm" . 25603)
 (push.const . |.cadadr|)
 (push.gloc.of cadadr)
 (subr.gloc.of set-top-level-value! 2 "./boot/first-load.scm" . 26627)
 (push.const . |.caaadr|)
 (push.gloc.of caaadr)
 (subr.gloc.of set-top-level-value! 2 "./boot/first-load.scm" . 27651)
 (push.const . |.cddddr|)
 (push.gloc.of cddddr)
 (subr.gloc.of set-top-level-value! 2 "./boot/first-load.scm" . 28675)
 (push.const . |.cadddr|)
 (push.gloc.of cadddr)
 (subr.gloc.of set-top-level-value! 2 "./boot/first-load.scm" . 29699)
 (push.const . |.cdaadr|)
 (push.gloc.of cdaadr)
 (subr.gloc.of set-top-level-value! 2 "./boot/first-load.scm" . 30723)
 (push.const . |.cdaddr|)
 (push.gloc.of cdaddr)
 (subr.gloc.of set-top-level-value! 2 "./boot/first-load.scm" . 31747)
 (push.const . |.caaddr|)
 (push.gloc.of caaddr)
 (subr.gloc.of set-top-level-value! 2 "./boot/first-load.scm" . 32771)
 (push.const . |.list|)
 (push.gloc.of list)
 (subr.gloc.of set-top-level-value! 2 "./boot/first-load.scm" . 33795)
 (push.const . |.cons*|)
 (push.gloc.of cons*)
 (subr.gloc.of set-top-level-value! 2 "./boot/first-load.scm" . 34819)
 (push.const . |.memq|)
 (push.gloc.of memq)
 (subr.gloc.of set-top-level-value! 2 "./boot/first-load.scm" . 35843)
 (push.const . |.append|)
 (push.gloc.of append)
 (subr.gloc.of set-top-level-value! 2 "./boot/first-load.scm" . 36867)
 (push.const . |.apply|)
 (push.gloc.of apply)
 (ret.subr.gloc.of set-top-level-value! "./boot/first-load.scm" . 37891))
((close
   (1 0 . loop)
   (cdr.iloc (0 . 0) "./boot/first-load.scm" . 54303)
   (if.pair?
     (push.car.iloc (0 . 0) "./boot/first-load.scm" . 54320)
     (call
       (touch.gloc.of |loop`38*|)
       (push.cdr.iloc (0 . 0) "./boot/first-load.scm" . 54336)
       (apply.gloc.of |loop`38*| "./boot/first-load.scm" . 54330))
     (ret.cons "./boot/first-load.scm" . 54314))
   (ret.const))
 (set.gloc.of |loop`38*|)
 (close
   (2 0 . loop)
   (<=n.iloc (0 . 1) 0 "./boot/first-load.scm" . 86041)
   (if.true.ret.const)
   (cdr.iloc (0 . 0) "./boot/first-load.scm" . 87073)
   (if.pair?
     (push.car.iloc (0 . 0) "./boot/first-load.scm" . 87090)
     (call
       (touch.gloc.of |loop`74*|)
       (push.cdr.iloc (0 . 0) "./boot/first-load.scm" . 87106)
       (push.n+.iloc (0 . 1) -1 "./boot/first-load.scm" . 87116)
       (apply.gloc.of |loop`74*| "./boot/first-load.scm" . 87100))
     (ret.cons "./boot/first-load.scm" . 87084))
   (ret.const))
 (set.gloc.of |loop`74*|)
 (close
   (2 0 . loop)
   (iloc.0 . 0)
   (if.pair?
     (touch.gloc.of |loop`62*|)
     (push.cdr.iloc (0 . 0) "./boot/first-load.scm" . 73764)
     (push.n+.iloc (0 . 1) 1 "./boot/first-load.scm" . 73774)
     (apply.gloc.of |loop`62*| "./boot/first-load.scm" . 73758))
   (ret.iloc 0 . 1))
 (set.gloc.of |loop`62*|)
 (close
   (1 0 . loop)
   (iloc.0 . 0)
   (if.pair?
     (push.car.iloc (0 . 0) "./boot/first-load.scm" . 47146)
     (call
       (touch.gloc.of |loop`30*|)
       (push.cdr.iloc (0 . 0) "./boot/first-load.scm" . 47162)
       (apply.gloc.of |loop`30*| "./boot/first-load.scm" . 47156))
     (ret.cons "./boot/first-load.scm" . 47140))
   (ret.const))
 (set.gloc.of |loop`30*|)
 (close
   (1 0 . loop)
   (cdr.iloc (0 . 0) "./boot/first-load.scm" . 67616)
   (if.pair?
     (touch.gloc.of |loop`54*|)
     (push.cdr.iloc (0 . 0) "./boot/first-load.scm" . 67633)
     (apply.gloc.of |loop`54*| "./boot/first-load.scm" . 67627))
   (push.iloc.0 . 0)
   (ret.subr.gloc.of cdr "./boot/first-load.scm" . 68638))
 (set.gloc.of |loop`54*|)
 (close
   (1 0 . loop)
   (cdr.iloc (0 . 0) "./boot/first-load.scm" . 61472)
   (if.pair?
     (touch.gloc.of |loop`46*|)
     (push.cdr.iloc (0 . 0) "./boot/first-load.scm" . 61489)
     (apply.gloc.of |loop`46*| "./boot/first-load.scm" . 61483))
   (ret.iloc 0 . 0))
 (set.gloc.of |loop`46*|)
 (close
   (1 0 . drop-last-cdr)
   (iloc.0 . 0)
   (if.null?.ret.const)
   (touch.gloc.of |loop`30*|)
   (push.iloc.0 . 0)
   (apply.gloc.of |loop`30*| "./boot/first-load.scm" . 47121))
 (set.gloc.of drop-last-cdr)
 (close
   (1 0 . drop-last-pair)
   (iloc.0 . 0)
   (if.null?.ret.const)
   (touch.gloc.of |loop`38*|)
   (push.iloc.0 . 0)
   (apply.gloc.of |loop`38*| "./boot/first-load.scm" . 54289))
 (set.gloc.of drop-last-pair)
 (close
   (1 0 . last-pair)
   (iloc.0 . 0)
   (if.null?.ret.const)
   (touch.gloc.of |loop`46*|)
   (push.iloc.0 . 0)
   (apply.gloc.of |loop`46*| "./boot/first-load.scm" . 61458))
 (set.gloc.of last-pair)
 (close
   (1 0 . last-cdr)
   (iloc.0 . 0)
   (if.pair?
     (touch.gloc.of |loop`54*|)
     (push.iloc.0 . 0)
     (apply.gloc.of |loop`54*| "./boot/first-load.scm" . 67602))
   (ret.iloc 0 . 0))
 (set.gloc.of last-cdr)
 (close
   (1 0 . count-pair)
   (touch.gloc.of |loop`62*|)
   (push.iloc.0 . 0)
   (push.const . 0)
   (apply.gloc.of |loop`62*| "./boot/first-load.scm" . 73739))
 (set.gloc.of count-pair)
 (close
   (2 0 . last-n-pair)
   (call (push.iloc.0 . 1) (apply.gloc.of count-pair "./boot/first-load.scm" . 77842))
   (push)
   (extend . 1)
   (iloc.0 . 0)
   (<.iloc (1 . 0) "./boot/first-load.scm" . 78866)
   (if.true.ret.const)
   (push.iloc.1 . 1)
   (push.iloc.0 . 0)
   (push.iloc.1 . 0)
   (push.subr.gloc.of - 2 "./boot/first-load.scm" . 79911)
   (ret.subr.gloc.of list-tail "./boot/first-load.scm" . 79896))
 (set.gloc.of last-n-pair)
 (close
   (2 0 . drop-last-n-pair)
   (iloc.0 . 1)
   (if.null?.ret.const)
   (touch.gloc.of |loop`74*|)
   (push.iloc.0 . 1)
   (call (push.iloc.0 . 1) (apply.gloc.of count-pair "./boot/first-load.scm" . 85035))
   (push)
   (push.iloc.0 . 0)
   (push.subr.gloc.of - 2 "./boot/first-load.scm" . 85032)
   (apply.gloc.of |loop`74*| "./boot/first-load.scm" . 86034))
 (set.gloc.of drop-last-n-pair)
 (ret.const.unspec))

;
((close
   (0 1 . max)
   (iloc.0 . 0)
   (if.null?
     (push.const . max)
     (push.const . "required at least 1, but 0 argument given")
     (apply.gloc.of assertion-violation "./boot/r6rs-aux.scm" . 7180))
   (push.car.iloc (0 . 0) "./boot/r6rs-aux.scm" . 8218)
   (subr.gloc.of real-valued? 1 "./boot/r6rs-aux.scm" . 8204)
   (if.true
     (extend.enclose+
       (3 0 . loop)
       (iloc.0 . 2)
       (if.null?
         (iloc.0 . 1)
         (if.true (push.iloc.0 . 0) (ret.subr.gloc.of inexact "./boot/r6rs-aux.scm" . 11292))
         (ret.iloc 0 . 0))
       (push.car.iloc (0 . 2) "./boot/r6rs-aux.scm" . 12323)
       (subr.gloc.of real-valued? 1 "./boot/r6rs-aux.scm" . 12309)
       (if.true
         (call
           (car.iloc (0 . 2) "./boot/r6rs-aux.scm" . 13346)
           (>.iloc (0 . 0) "./boot/r6rs-aux.scm" . 13343)
           (if.true (push.iloc.0 . 2) (ret.subr.gloc.of car "./boot/r6rs-aux.scm" . 13363))
           (ret.iloc 0 . 0))
         (push)
         (call
           (iloc.0 . 1)
           (if.true.ret)
           (push.car.iloc (0 . 2) "./boot/r6rs-aux.scm" . 14380)
           (ret.subr.gloc.of inexact? "./boot/r6rs-aux.scm" . 14370))
         (push)
         (push.cdr.iloc (0 . 2) "./boot/r6rs-aux.scm" . 15387)
         (apply.iloc+ (1 . 0) "./boot/r6rs-aux.scm" . 13333))
       (push.const . max)
       (push.const . "expected real, but got ~s")
       (push.car.iloc (0 . 2) "./boot/r6rs-aux.scm" . 17491)
       (push.subr.gloc.of format 2 "./boot/r6rs-aux.scm" . 17455)
       (push.iloc 2 . 0)
       (apply.gloc.of assertion-violation "./boot/r6rs-aux.scm" . 17429))
     (push.car.iloc (1 . 0) "./boot/r6rs-aux.scm" . 9246)
     (push.car.iloc (1 . 0) "./boot/r6rs-aux.scm" . 9272)
     (push.subr.gloc.of inexact? 1 "./boot/r6rs-aux.scm" . 9262)
     (push.cdr.iloc (1 . 0) "./boot/r6rs-aux.scm" . 9290)
     (apply.iloc+ (0 . 0) "./boot/r6rs-aux.scm" . 10254))
   (push.const . max)
   (push.const . "expected real, but got ~s")
   (push.car.iloc (0 . 0) "./boot/r6rs-aux.scm" . 19530)
   (push.subr.gloc.of format 2 "./boot/r6rs-aux.scm" . 19494)
   (push.iloc.0 . 0)
   (apply.gloc.of assertion-violation "./boot/r6rs-aux.scm" . 19468))
 (set.gloc.of max)
 (ret.const.unspec))
((close
   (0 1 . min)
   (iloc.0 . 0)
   (if.null?
     (push.const . min)
     (push.const . "required at least 1, but 0 argument given")
     (apply.gloc.of assertion-violation "./boot/r6rs-aux.scm" . 24588))
   (push.car.iloc (0 . 0) "./boot/r6rs-aux.scm" . 25626)
   (subr.gloc.of real-valued? 1 "./boot/r6rs-aux.scm" . 25612)
   (if.true
     (extend.enclose+
       (3 0 . loop)
       (iloc.0 . 2)
       (if.null?
         (iloc.0 . 1)
         (if.true (push.iloc.0 . 0) (ret.subr.gloc.of inexact "./boot/r6rs-aux.scm" . 28700))
         (ret.iloc 0 . 0))
       (push.car.iloc (0 . 2) "./boot/r6rs-aux.scm" . 29731)
       (subr.gloc.of real-valued? 1 "./boot/r6rs-aux.scm" . 29717)
       (if.true
         (call
           (car.iloc (0 . 2) "./boot/r6rs-aux.scm" . 30754)
           (<.iloc (0 . 0) "./boot/r6rs-aux.scm" . 30751)
           (if.true (push.iloc.0 . 2) (ret.subr.gloc.of car "./boot/r6rs-aux.scm" . 30771))
           (ret.iloc 0 . 0))
         (push)
         (call
           (iloc.0 . 1)
           (if.true.ret)
           (push.car.iloc (0 . 2) "./boot/r6rs-aux.scm" . 31788)
           (ret.subr.gloc.of inexact? "./boot/r6rs-aux.scm" . 31778))
         (push)
         (push.cdr.iloc (0 . 2) "./boot/r6rs-aux.scm" . 32795)
         (apply.iloc+ (1 . 0) "./boot/r6rs-aux.scm" . 30741))
       (push.const . min)
       (push.const . "expected real, but got ~s")
       (push.car.iloc (0 . 2) "./boot/r6rs-aux.scm" . 34899)
       (push.subr.gloc.of format 2 "./boot/r6rs-aux.scm" . 34863)
       (push.iloc 2 . 0)
       (apply.gloc.of assertion-violation "./boot/r6rs-aux.scm" . 34837))
     (push.car.iloc (1 . 0) "./boot/r6rs-aux.scm" . 26654)
     (push.car.iloc (1 . 0) "./boot/r6rs-aux.scm" . 26680)
     (push.subr.gloc.of inexact? 1 "./boot/r6rs-aux.scm" . 26670)
     (push.cdr.iloc (1 . 0) "./boot/r6rs-aux.scm" . 26698)
     (apply.iloc+ (0 . 0) "./boot/r6rs-aux.scm" . 27662))
   (push.const . min)
   (push.const . "expected real, but got ~s")
   (push.car.iloc (0 . 0) "./boot/r6rs-aux.scm" . 36938)
   (push.subr.gloc.of format 2 "./boot/r6rs-aux.scm" . 36902)
   (push.iloc.0 . 0)
   (apply.gloc.of assertion-violation "./boot/r6rs-aux.scm" . 36876))
 (set.gloc.of min)
 (ret.const.unspec))
((close
   (2 0 . gcd2)
   (=n.iloc (0 . 1) 0 "./boot/r6rs-aux.scm" . 40969)
   (if.true
     (call
       (push.iloc.0 . 1)
       (subr.gloc.of inexact? 1 "./boot/r6rs-aux.scm" . 42002)
       (if.true (push.iloc.0 . 0) (ret.subr.gloc.of inexact "./boot/r6rs-aux.scm" . 42015))
       (ret.iloc 0 . 0))
     (push)
     (ret.subr.gloc.of abs "./boot/r6rs-aux.scm" . 41993))
   (touch.gloc.of gcd2)
   (push.iloc.0 . 1)
   (push.iloc.0 . 0)
   (push.iloc.0 . 1)
   (push.subr.gloc.of remainder 2 "./boot/r6rs-aux.scm" . 43025)
   (apply.gloc.of gcd2 "./boot/r6rs-aux.scm" . 43017))
 (set.gloc.of gcd2)
 (ret.const.unspec))
((close
   (1 0 . loop)
   (push.iloc.0 . 0)
   (push.subr.gloc.of length 1 "./boot/r6rs-aux.scm" . 52237)
   (extend . 1)
   (push.iloc.0 . 0)
   (const . 2)
   (if.eq?
     (touch.gloc.of gcd2)
     (push.car.iloc (1 . 0) "./boot/r6rs-aux.scm" . 53268)
     (push.cadr.iloc (1 . 0) "./boot/r6rs-aux.scm" . 53278)
     (apply.gloc.of gcd2 "./boot/r6rs-aux.scm" . 53262))
   (push.iloc.0 . 0)
   (const . 1)
   (if.eq?
     (push.car.iloc (1 . 0) "./boot/r6rs-aux.scm" . 54291)
     (ret.subr.gloc.of abs "./boot/r6rs-aux.scm" . 54286))
   (push.iloc.0 . 0)
   (const . 0)
   (if.eq?.ret.const . 0)
   (touch.gloc.of |loop`102*|)
   (call
     (touch.gloc.of gcd2)
     (push.car.iloc (1 . 0) "./boot/r6rs-aux.scm" . 56353)
     (push.cadr.iloc (1 . 0) "./boot/r6rs-aux.scm" . 56363)
     (apply.gloc.of gcd2 "./boot/r6rs-aux.scm" . 56347))
   (push)
   (cddr.iloc (1 . 0) "./boot/r6rs-aux.scm" . 56375)
   (push.cons)
   (apply.gloc.of |loop`102*| "./boot/r6rs-aux.scm" . 56335))
 (set.gloc.of |loop`102*|)
 (close
   (0 1 . gcd)
   (call
     (push.close
       (1 0)
       (push.iloc.0 . 0)
       (subr.gloc.of integer-valued? 1 "./boot/r6rs-aux.scm" . 48149)
       (if.true.ret)
       (push.const . gcd)
       (push.const . "expected integer, but got ~s")
       (push.iloc.0 . 0)
       (push.subr.gloc.of format 2 "./boot/r6rs-aux.scm" . 49199)
       (push.iloc.1 . 0)
       (apply.gloc.of assertion-violation "./boot/r6rs-aux.scm" . 49173))
     (push.iloc.0 . 0)
     (apply.gloc.of for-each "./boot/r6rs-aux.scm" . 47109))
   (touch.gloc.of |loop`102*|)
   (push.iloc.0 . 0)
   (apply.gloc.of |loop`102*| "./boot/r6rs-aux.scm" . 52231))
 (set.gloc.of gcd)
 (ret.const.unspec))
((close
   (1 0 . loop)
   (push.iloc.0 . 0)
   (push.subr.gloc.of length 1 "./boot/r6rs-aux.scm" . 72717)
   (extend . 1)
   (push.iloc.0 . 0)
   (const . 2)
   (if.eq?
     (touch.gloc.of |lcm2`109*|)
     (push.car.iloc (1 . 0) "./boot/r6rs-aux.scm" . 73748)
     (push.cadr.iloc (1 . 0) "./boot/r6rs-aux.scm" . 73758)
     (apply.gloc.of |lcm2`109*| "./boot/r6rs-aux.scm" . 73742))
   (push.iloc.0 . 0)
   (const . 1)
   (if.eq?
     (push.car.iloc (1 . 0) "./boot/r6rs-aux.scm" . 74771)
     (ret.subr.gloc.of abs "./boot/r6rs-aux.scm" . 74766))
   (push.iloc.0 . 0)
   (const . 0)
   (if.eq?.ret.const . 1)
   (touch.gloc.of |loop`116*|)
   (call
     (touch.gloc.of |lcm2`109*|)
     (push.car.iloc (1 . 0) "./boot/r6rs-aux.scm" . 76833)
     (push.cadr.iloc (1 . 0) "./boot/r6rs-aux.scm" . 76843)
     (apply.gloc.of |lcm2`109*| "./boot/r6rs-aux.scm" . 76827))
   (push)
   (cddr.iloc (1 . 0) "./boot/r6rs-aux.scm" . 76855)
   (push.cons)
   (apply.gloc.of |loop`116*| "./boot/r6rs-aux.scm" . 76815))
 (set.gloc.of |loop`116*|)
 (close
   (2 0 . lcm2)
   (call
     (=n.iloc (0 . 0) 0 "./boot/r6rs-aux.scm" . 63505)
     (if.true.ret)
     (push.iloc.0 . 1)
     (push.const . 0)
     (ret.subr.gloc.of = "./boot/r6rs-aux.scm" . 63513))
   (if.true
     (call
       (push.iloc.0 . 0)
       (subr.gloc.of exact? 1 "./boot/r6rs-aux.scm" . 64534)
       (if.false.ret)
       (push.iloc.0 . 1)
       (ret.subr.gloc.of exact? "./boot/r6rs-aux.scm" . 64545))
     (if.true.ret.const . 0)
     (ret.const . 0.0))
   (push.iloc.0 . 0)
   (call
     (touch.gloc.of gcd2)
     (push.iloc.0 . 0)
     (push.iloc.0 . 1)
     (apply.gloc.of gcd2 "./boot/r6rs-aux.scm" . 65569))
   (push)
   (push.subr.gloc.of quotient 2 "./boot/r6rs-aux.scm" . 65557)
   (push.iloc.0 . 1)
   (push.subr.gloc.of * 2 "./boot/r6rs-aux.scm" . 65554)
   (ret.subr.gloc.of abs "./boot/r6rs-aux.scm" . 65549))
 (set.gloc.of |lcm2`109*|)
 (close
   (0 1 . lcm)
   (call
     (push.close
       (1 0)
       (push.iloc.0 . 0)
       (subr.gloc.of integer-valued? 1 "./boot/r6rs-aux.scm" . 68629)
       (if.true.ret)
       (push.const . lcm)
       (push.const . "expected integer, but got ~s")
       (push.iloc.0 . 0)
       (push.subr.gloc.of format 2 "./boot/r6rs-aux.scm" . 69679)
       (push.iloc.1 . 0)
       (apply.gloc.of assertion-violation "./boot/r6rs-aux.scm" . 69653))
     (push.iloc.0 . 0)
     (apply.gloc.of for-each "./boot/r6rs-aux.scm" . 67589))
   (touch.gloc.of |loop`116*|)
   (push.iloc.0 . 0)
   (apply.gloc.of |loop`116*| "./boot/r6rs-aux.scm" . 72711))
 (set.gloc.of lcm)
 (ret.const.unspec))
((close
   (2 0 . loop)
   (iloc.0 . 0)
   (=.iloc (0 . 1) "./boot/r6rs-aux.scm" . 92183)
   (if.true (ret.iloc 0 . 0))
   (push.iloc.0 . 0)
   (push.subr.gloc.of ceiling 1 "./boot/r6rs-aux.scm" . 94240)
   (extend . 1)
   (iloc.0 . 0)
   (<.iloc (1 . 1) "./boot/r6rs-aux.scm" . 95264)
   (if.true (ret.iloc 0 . 0))
   (push.n+.iloc (0 . 0) -1 "./boot/r6rs-aux.scm" . 97321)
   (extend . 1)
   (push.iloc.0 . 0)
   (push.const . 1)
   (call
     (touch.gloc.of |loop`128*|)
     (push.const . 1)
     (push.iloc 2 . 1)
     (push.iloc.0 . 0)
     (push.subr.gloc.of - 2 "./boot/r6rs-aux.scm" . 98359)
     (push.subr.gloc.of / 2 "./boot/r6rs-aux.scm" . 98354)
     (push.const . 1)
     (push.iloc 2 . 0)
     (push.iloc.0 . 0)
     (push.subr.gloc.of - 2 "./boot/r6rs-aux.scm" . 98375)
     (push.subr.gloc.of / 2 "./boot/r6rs-aux.scm" . 98370)
     (apply.gloc.of |loop`128*| "./boot/r6rs-aux.scm" . 98348))
   (push)
   (push.subr.gloc.of / 2 "./boot/r6rs-aux.scm" . 98343)
   (ret.subr.gloc.of + "./boot/r6rs-aux.scm" . 98338))
 (set.gloc.of |loop`128*|)
 (close
   (2 0 . rationalize)
   (push.iloc.0 . 0)
   (subr.gloc.of real? 1 "./boot/r6rs-aux.scm" . 80905)
   (if.false.call
     (push.const . rationalize)
     (push.const . "expected real, but got ~s as argument 1")
     (push.iloc.0 . 0)
     (push.subr.gloc.of format 2 "./boot/r6rs-aux.scm" . 80949)
     (push.iloc.0 . 0)
     (push.iloc.0 . 1)
     (push.subr.gloc.of list 2 "./boot/r6rs-aux.scm" . 81002)
     (apply.gloc.of assertion-violation "./boot/r6rs-aux.scm" . 80915))
   (push.iloc.0 . 1)
   (subr.gloc.of real? 1 "./boot/r6rs-aux.scm" . 81929)
   (if.false.call
     (push.const . rationalize)
     (push.const . "expected real, but got ~s as argument 2")
     (push.iloc.0 . 1)
     (push.subr.gloc.of format 2 "./boot/r6rs-aux.scm" . 81973)
     (push.iloc.0 . 0)
     (push.iloc.0 . 1)
     (push.subr.gloc.of list 2 "./boot/r6rs-aux.scm" . 82026)
     (apply.gloc.of assertion-violation "./boot/r6rs-aux.scm" . 81939))
   (push.iloc.0 . 1)
   (subr.gloc.of infinite? 1 "./boot/r6rs-aux.scm" . 82956)
   (if.true
     (push.iloc.0 . 0)
     (subr.gloc.of infinite? 1 "./boot/r6rs-aux.scm" . 83984)
     (if.true.ret.const . +nan.0)
     (ret.const . 0.0))
   (=n.iloc (0 . 0) 0 "./boot/r6rs-aux.scm" . 85004)
   (if.true (ret.iloc 0 . 0))
   (iloc.0 . 0)
   (=.iloc (0 . 1) "./boot/r6rs-aux.scm" . 86028)
   (if.true (push.iloc.0 . 0) (push.iloc.0 . 1) (ret.subr.gloc.of - "./boot/r6rs-aux.scm" . 86036))
   (push.iloc.0 . 0)
   (subr.gloc.of negative? 1 "./boot/r6rs-aux.scm" . 87052)
   (if.true
     (call
       (push.iloc.0 . 0)
       (push.subr.gloc.of - 1 "./boot/r6rs-aux.scm" . 88092)
       (push.iloc.0 . 1)
       (apply.gloc.of rationalize "./boot/r6rs-aux.scm" . 88079))
     (push)
     (ret.subr.gloc.of - "./boot/r6rs-aux.scm" . 88076))
   (push.iloc.0 . 1)
   (push.subr.gloc.of abs 1 "./boot/r6rs-aux.scm" . 90133)
   (extend . 1)
   (touch.gloc.of |loop`128*|)
   (push.iloc.1 . 0)
   (push.iloc.0 . 0)
   (push.subr.gloc.of - 2 "./boot/r6rs-aux.scm" . 91169)
   (push.iloc.1 . 0)
   (push.iloc.0 . 0)
   (push.subr.gloc.of + 2 "./boot/r6rs-aux.scm" . 91183)
   (apply.gloc.of |loop`128*| "./boot/r6rs-aux.scm" . 92176))
 (set.gloc.of rationalize)
 (ret.const.unspec))
((close
   (1 0 . string->list)
   (push.iloc.0 . 0)
   (push.subr.gloc.of make-string-input-port 1 "./boot/r6rs-aux.scm" . 102417)
   (extend . 1)
   (extend.enclose+
     (1 0 . loop)
     (push.iloc 2 . 0)
     (push.subr.gloc.of get-char 1 "./boot/r6rs-aux.scm" . 104467)
     (extend . 1)
     (push.iloc.0 . 0)
     (subr.gloc.of eof-object? 1 "./boot/r6rs-aux.scm" . 105487)
     (if.true (push.iloc.1 . 0) (ret.subr.gloc.of reverse "./boot/r6rs-aux.scm" . 106511))
     (push.iloc.0 . 0)
     (iloc.1 . 0)
     (push.cons)
     (apply.iloc+ (2 . 0) "./boot/r6rs-aux.scm" . 107535))
   (push.const)
   (apply.iloc+ (0 . 0) "./boot/r6rs-aux.scm" . 104457))
 (set.gloc.of string->list)
 (ret.const.unspec))
((close
   (2 0 . map-n)
   (iloc.0 . 1)
   (if.null?.ret.const)
   (call
     (push.iloc.0 . 0)
     (push.car.iloc (0 . 1) "./boot/r6rs-aux.scm" . 123938)
     (apply.gloc.of apply "./boot/r6rs-aux.scm" . 123926))
   (push)
   (call
     (touch.gloc.of |map-n`149*|)
     (push.iloc.0 . 0)
     (push.cdr.iloc (0 . 1) "./boot/r6rs-aux.scm" . 124962)
     (apply.gloc.of |map-n`149*| "./boot/r6rs-aux.scm" . 124950))
   (ret.cons "./boot/r6rs-aux.scm" . 123920))
 (set.gloc.of |map-n`149*|)
 (close
   (2 0 . map-1)
   (iloc.0 . 1)
   (if.null?.ret.const)
   (call
     (push.car.iloc (0 . 1) "./boot/r6rs-aux.scm" . 116764)
     (apply.iloc (0 . 0) "./boot/r6rs-aux.scm" . 116758))
   (push)
   (call
     (touch.gloc.of |map-1`149*|)
     (push.iloc.0 . 0)
     (push.cdr.iloc (0 . 1) "./boot/r6rs-aux.scm" . 117794)
     (apply.gloc.of |map-1`149*| "./boot/r6rs-aux.scm" . 117782))
   (ret.cons "./boot/r6rs-aux.scm" . 116752))
 (set.gloc.of |map-1`149*|)
 (close
   (2 1 . map)
   (iloc.0 . 2)
   (if.null?
     (push.iloc.0 . 1)
     (subr.gloc.of list? 1 "./boot/r6rs-aux.scm" . 128013)
     (if.true
       (touch.gloc.of |map-1`149*|)
       (push.iloc.0 . 0)
       (push.iloc.0 . 1)
       (apply.gloc.of |map-1`149*| "./boot/r6rs-aux.scm" . 129037))
     (push.const . map)
     (call
       (touch.gloc.of wrong-type-argument-message)
       (push.const . "proper list")
       (push.iloc.0 . 1)
       (push.const . 2)
       (apply.gloc.of wrong-type-argument-message "./boot/r6rs-aux.scm" . 130087))
     (push)
     (push.iloc.0 . 0)
     (push.iloc.0 . 1)
     (push.iloc.0 . 2)
     (push.subr.gloc.of cons* 3 "./boot/r6rs-aux.scm" . 130138)
     (apply.gloc.of assertion-violation "./boot/r6rs-aux.scm" . 130061))
   (call
     (push.gloc.of list-transpose+)
     (push.iloc.0 . 1)
     (push.iloc.0 . 2)
     (apply.gloc.of apply "./boot/r6rs-aux.scm" . 131088))
   (push)
   (extend . 1)
   (iloc.0 . 0)
   (if.true
     (touch.gloc.of |map-n`149*|)
     (push.iloc.1 . 0)
     (push.iloc.0 . 0)
     (apply.gloc.of |map-n`149*| "./boot/r6rs-aux.scm" . 132129))
   (push.const . map)
   (push.const . "expected same length proper lists")
   (push.iloc.1 . 0)
   (push.iloc.1 . 1)
   (push.iloc.1 . 2)
   (push.subr.gloc.of cons* 3 "./boot/r6rs-aux.scm" . 134222)
   (apply.gloc.of assertion-violation "./boot/r6rs-aux.scm" . 134160))
 (set.gloc.of map)
 (ret.const.unspec))
((close
   (2 0 . for-each-n)
   (iloc.0 . 1)
   (if.null? (ret.const.unspec))
   (call
     (push.iloc.0 . 0)
     (push.car.iloc (0 . 1) "./boot/r6rs-aux.scm" . 147501)
     (apply.gloc.of apply "./boot/r6rs-aux.scm" . 147489))
   (touch.gloc.of |for-each-n`159*|)
   (push.iloc.0 . 0)
   (push.cdr.iloc (0 . 1) "./boot/r6rs-aux.scm" . 148530)
   (apply.gloc.of |for-each-n`159*| "./boot/r6rs-aux.scm" . 148513))
 (set.gloc.of |for-each-n`159*|)
 (close
   (2 0 . for-each-1)
   (iloc.0 . 1)
   (if.null? (ret.const.unspec))
   (call
     (push.car.iloc (0 . 1) "./boot/r6rs-aux.scm" . 142374)
     (apply.iloc (0 . 0) "./boot/r6rs-aux.scm" . 142368))
   (touch.gloc.of |for-each-1`159*|)
   (push.iloc.0 . 0)
   (push.cdr.iloc (0 . 1) "./boot/r6rs-aux.scm" . 143409)
   (apply.gloc.of |for-each-1`159*| "./boot/r6rs-aux.scm" . 143392))
 (set.gloc.of |for-each-1`159*|)
 (close
   (2 1 . for-each)
   (iloc.0 . 2)
   (if.null?
     (push.iloc.0 . 1)
     (subr.gloc.of list? 1 "./boot/r6rs-aux.scm" . 150541)
     (if.true
       (touch.gloc.of |for-each-1`159*|)
       (push.iloc.0 . 0)
       (push.iloc.0 . 1)
       (apply.gloc.of |for-each-1`159*| "./boot/r6rs-aux.scm" . 151565))
     (push.const . for-each)
     (call
       (touch.gloc.of wrong-type-argument-message)
       (push.const . "proper list")
       (push.iloc.0 . 1)
       (push.const . 2)
       (apply.gloc.of wrong-type-argument-message "./boot/r6rs-aux.scm" . 152620))
     (push)
     (push.iloc.0 . 0)
     (push.iloc.0 . 1)
     (push.iloc.0 . 2)
     (push.subr.gloc.of cons* 3 "./boot/r6rs-aux.scm" . 152671)
     (apply.gloc.of assertion-violation "./boot/r6rs-aux.scm" . 152589))
   (call
     (push.gloc.of list-transpose+)
     (push.iloc.0 . 1)
     (push.iloc.0 . 2)
     (apply.gloc.of apply "./boot/r6rs-aux.scm" . 153616))
   (push)
   (extend . 1)
   (iloc.0 . 0)
   (if.true
     (touch.gloc.of |for-each-n`159*|)
     (push.iloc.1 . 0)
     (push.iloc.0 . 0)
     (apply.gloc.of |for-each-n`159*| "./boot/r6rs-aux.scm" . 154657))
   (push.const . for-each)
   (push.const . "expected same length proper lists")
   (push.iloc.1 . 0)
   (push.iloc.1 . 1)
   (push.iloc.1 . 2)
   (push.subr.gloc.of cons* 3 "./boot/r6rs-aux.scm" . 156755)
   (apply.gloc.of assertion-violation "./boot/r6rs-aux.scm" . 156688))
 (set.gloc.of for-each)
 (ret.const.unspec))
((close
   (2 1 . vector-map)
   (call
     (push.gloc.of map)
     (push.iloc.0 . 0)
     (push.iloc.0 . 1)
     (push.subr.gloc.of vector->list 1 "./boot/r6rs-aux.scm" . 161814)
     (call
       (push.gloc.of vector->list)
       (push.iloc.0 . 2)
       (apply.gloc.of map "./boot/r6rs-aux.scm" . 162829))
     (push)
     (apply.gloc.of apply "./boot/r6rs-aux.scm" . 161798))
   (push)
   (ret.subr.gloc.of list->vector "./boot/r6rs-aux.scm" . 160773))
 (set.gloc.of vector-map)
 (ret.const.unspec))
((close
   (2 1 . vector-for-each)
   (push.gloc.of for-each)
   (push.iloc.0 . 0)
   (push.iloc.0 . 1)
   (push.subr.gloc.of vector->list 1 "./boot/r6rs-aux.scm" . 166938)
   (call
     (push.gloc.of vector->list)
     (push.iloc.0 . 2)
     (apply.gloc.of map "./boot/r6rs-aux.scm" . 167948))
   (push)
   (apply.gloc.of apply "./boot/r6rs-aux.scm" . 166917))
 (set.gloc.of vector-for-each)
 (ret.const.unspec))
((close
   (2 1 . string-for-each)
   (push.gloc.of for-each)
   (push.iloc.0 . 0)
   (call (push.iloc.0 . 1) (apply.gloc.of string->list "./boot/r6rs-aux.scm" . 172058))
   (push)
   (call
     (push.gloc.of string->list)
     (push.iloc.0 . 2)
     (apply.gloc.of map "./boot/r6rs-aux.scm" . 173068))
   (push)
   (apply.gloc.of apply "./boot/r6rs-aux.scm" . 172037))
 (set.gloc.of string-for-each)
 (ret.const.unspec))
((close
   (2 0 . call-with-values)
   (touch.gloc.of apply-values)
   (push.iloc.0 . 1)
   (call (apply.iloc (0 . 0) "./boot/r6rs-aux.scm" . 177180))
   (push)
   (apply.gloc.of apply-values "./boot/r6rs-aux.scm" . 177157))
 (set.gloc.of call-with-values)
 (ret.const.unspec))
((close
   (2 0 . call-with-port)
   (push.close (0 0) (push.iloc.1 . 0) (apply.iloc (1 . 1) "./boot/r6rs-aux.scm" . 182289))
   (push.close
     (0 1)
     (push.iloc.1 . 0)
     (subr.gloc.of close-port 1 "./boot/r6rs-aux.scm" . 184328)
     (push.gloc.of values)
     (push.iloc.0 . 0)
     (apply.gloc.of apply "./boot/r6rs-aux.scm" . 185352))
   (apply.gloc.of call-with-values "./boot/r6rs-aux.scm" . 181253))
 (set.gloc.of call-with-port)
 (ret.const.unspec))
((close
   (2 0 . mod)
   (push.iloc.0 . 0)
   (push.iloc.0 . 0)
   (push.iloc.0 . 1)
   (push.subr.gloc.of div 2 "./boot/r6rs-aux.scm" . 189453)
   (push.iloc.0 . 1)
   (push.subr.gloc.of * 2 "./boot/r6rs-aux.scm" . 189450)
   (ret.subr.gloc.of - "./boot/r6rs-aux.scm" . 189445))
 (set.gloc.of mod)
 (ret.const.unspec))
((close
   (2 0 . div-and-mod)
   (push.iloc.0 . 0)
   (push.iloc.0 . 1)
   (push.subr.gloc.of div 2 "./boot/r6rs-aux.scm" . 193550)
   (extend . 1)
   (push.iloc.0 . 0)
   (push.iloc.1 . 0)
   (push.iloc.0 . 0)
   (push.iloc.1 . 1)
   (push.subr.gloc.of * 2 "./boot/r6rs-aux.scm" . 194582)
   (push.subr.gloc.of - 2 "./boot/r6rs-aux.scm" . 194577)
   (ret.subr.gloc.of values "./boot/r6rs-aux.scm" . 194567))
 (set.gloc.of div-and-mod)
 (ret.const.unspec))
((close
   (2 0 . mod0)
   (push.iloc.0 . 0)
   (push.iloc.0 . 0)
   (push.iloc.0 . 1)
   (push.subr.gloc.of div0 2 "./boot/r6rs-aux.scm" . 198669)
   (push.iloc.0 . 1)
   (push.subr.gloc.of * 2 "./boot/r6rs-aux.scm" . 198666)
   (ret.subr.gloc.of - "./boot/r6rs-aux.scm" . 198661))
 (set.gloc.of mod0)
 (ret.const.unspec))
((close
   (2 0 . div0-and-mod0)
   (push.iloc.0 . 0)
   (push.iloc.0 . 1)
   (push.subr.gloc.of div0 2 "./boot/r6rs-aux.scm" . 202767)
   (extend . 1)
   (push.iloc.0 . 0)
   (push.iloc.1 . 0)
   (push.iloc.0 . 0)
   (push.iloc.1 . 1)
   (push.subr.gloc.of * 2 "./boot/r6rs-aux.scm" . 203799)
   (push.subr.gloc.of - 2 "./boot/r6rs-aux.scm" . 203794)
   (ret.subr.gloc.of values "./boot/r6rs-aux.scm" . 203783))
 (set.gloc.of div0-and-mod0)
 (ret.const.unspec))

;
((close
   (1 0 . top-level-unbound?)
   (push.iloc.0 . 0)
   (push.subr.gloc.of top-level-bound? 1 "./boot/common.scm" . 6154)
   (ret.subr.gloc.of not "./boot/common.scm" . 6149))
 (set.gloc.of top-level-unbound?)
 (ret.const.unspec))
((close
   (3 0 . acons)
   (push.iloc.0 . 0)
   (iloc.0 . 1)
   (push.cons)
   (iloc.0 . 2)
   (ret.cons "./boot/common.scm" . 10245))
 (set.gloc.of acons)
 (ret.const.unspec))
((close
   (2 0 . loop)
   (iloc.0 . 0)
   (if.pair?
     (touch.gloc.of |loop`202*|)
     (push.cdr.iloc (0 . 0) "./boot/common.scm" . 15389)
     (push.n+.iloc (0 . 1) 1 "./boot/common.scm" . 15399)
     (apply.gloc.of |loop`202*| "./boot/common.scm" . 15383))
   (ret.iloc 0 . 1))
 (set.gloc.of |loop`202*|)
 (close
   (1 0 . count-pair)
   (touch.gloc.of |loop`202*|)
   (push.iloc.0 . 0)
   (push.const . 0)
   (apply.gloc.of |loop`202*| "./boot/common.scm" . 15367))
 (set.gloc.of count-pair)
 (ret.const.unspec))
((close
   (2 0 . every1)
   (iloc.0 . 1)
   (if.null?.ret.const . #t)
   (extend.enclose+
     (2 0 . loop)
     (call (push.iloc.0 . 0) (apply.iloc (2 . 0) "./boot/common.scm" . 21520))
     (if.false.ret)
     (iloc.0 . 1)
     (if.null?.ret.const . #t)
     (push.car.iloc (0 . 1) "./boot/common.scm" . 23578)
     (push.cdr.iloc (0 . 1) "./boot/common.scm" . 23589)
     (apply.iloc+ (1 . 0) "./boot/common.scm" . 23572))
   (push.car.iloc (1 . 1) "./boot/common.scm" . 20506)
   (push.cdr.iloc (1 . 1) "./boot/common.scm" . 20523)
   (apply.iloc+ (0 . 0) "./boot/common.scm" . 21515))
 (set.gloc.of every1)
 (ret.const.unspec))
((close
   (3 0 . every2)
   (iloc.0 . 1)
   (if.null?.ret.const . #t)
   (iloc.0 . 2)
   (if.null?.ret.const . #t)
   (extend.enclose+
     (4 0 . loop)
     (call (push.iloc.0 . 0) (push.iloc.0 . 2) (apply.iloc (2 . 0) "./boot/common.scm" . 30736))
     (if.false.ret)
     (iloc.0 . 1)
     (if.null?.ret.const . #t)
     (iloc.0 . 3)
     (if.null?.ret.const . #t)
     (push.car.iloc (0 . 1) "./boot/common.scm" . 33818)
     (push.cdr.iloc (0 . 1) "./boot/common.scm" . 33830)
     (push.car.iloc (0 . 3) "./boot/common.scm" . 33842)
     (push.cdr.iloc (0 . 3) "./boot/common.scm" . 33854)
     (apply.iloc+ (1 . 0) "./boot/common.scm" . 33812))
   (push.car.iloc (1 . 1) "./boot/common.scm" . 29723)
   (push.cdr.iloc (1 . 1) "./boot/common.scm" . 29742)
   (push.car.iloc (1 . 2) "./boot/common.scm" . 29761)
   (push.cdr.iloc (1 . 2) "./boot/common.scm" . 29780)
   (apply.iloc+ (0 . 0) "./boot/common.scm" . 30731))
 (set.gloc.of every2)
 (ret.const.unspec))
((close
   (2 0 . any1)
   (iloc.0 . 1)
   (if.null?.ret.const . #f)
   (call
     (push.car.iloc (0 . 1) "./boot/common.scm" . 38932)
     (apply.iloc (0 . 0) "./boot/common.scm" . 38926))
   (if.true.ret)
   (touch.gloc.of any1)
   (push.iloc.0 . 0)
   (push.cdr.iloc (0 . 1) "./boot/common.scm" . 38954)
   (apply.gloc.of any1 "./boot/common.scm" . 38943))
 (set.gloc.of any1)
 (ret.const.unspec))
((close
   (3 0 . any2)
   (iloc.0 . 1)
   (if.null?.ret.const . #f)
   (iloc.0 . 2)
   (if.null?.ret.const . #f)
   (call
     (push.car.iloc (0 . 1) "./boot/common.scm" . 45076)
     (push.car.iloc (0 . 2) "./boot/common.scm" . 45087)
     (apply.iloc (0 . 0) "./boot/common.scm" . 45070))
   (if.true.ret)
   (touch.gloc.of any2)
   (push.iloc.0 . 0)
   (push.cdr.iloc (0 . 1) "./boot/common.scm" . 46105)
   (push.cdr.iloc (0 . 2) "./boot/common.scm" . 46116)
   (apply.gloc.of any2 "./boot/common.scm" . 46094))
 (set.gloc.of any2)
 (ret.const.unspec))
((close
   (2 0 . filter)
   (extend.enclose+
     (1 0 . loop)
     (iloc.0 . 0)
     (if.null?.ret.const)
     (call
       (push.car.iloc (0 . 0) "./boot/common.scm" . 52244)
       (apply.iloc (2 . 0) "./boot/common.scm" . 52238))
     (if.true
       (push.car.iloc (0 . 0) "./boot/common.scm" . 52261)
       (call
         (push.cdr.iloc (0 . 0) "./boot/common.scm" . 52277)
         (apply.iloc+ (1 . 0) "./boot/common.scm" . 52271))
       (ret.cons "./boot/common.scm" . 52255))
     (push.cdr.iloc (0 . 0) "./boot/common.scm" . 53273)
     (apply.iloc+ (1 . 0) "./boot/common.scm" . 53267))
   (push.iloc.1 . 1)
   (apply.iloc+ (0 . 0) "./boot/common.scm" . 51207))
 (set.gloc.of filter)
 (ret.const.unspec))
((close
   (2 0 . partition)
   (extend.enclose+
     (3 0 . loop)
     (iloc.0 . 0)
     (if.null?
       (push.iloc.0 . 1)
       (push.subr.gloc.of reverse 1 "./boot/common.scm" . 58402)
       (push.iloc.0 . 2)
       (push.subr.gloc.of reverse 1 "./boot/common.scm" . 58417)
       (ret.subr.gloc.of values "./boot/common.scm" . 58394))
     (call
       (push.car.iloc (0 . 0) "./boot/common.scm" . 59412)
       (apply.iloc (2 . 0) "./boot/common.scm" . 59406))
     (if.true
       (push.cdr.iloc (0 . 0) "./boot/common.scm" . 59429)
       (push.car.iloc (0 . 0) "./boot/common.scm" . 59445)
       (iloc.0 . 1)
       (push.cons)
       (push.iloc.0 . 2)
       (apply.iloc+ (1 . 0) "./boot/common.scm" . 59423))
     (push.cdr.iloc (0 . 0) "./boot/common.scm" . 60441)
     (push.iloc.0 . 1)
     (push.car.iloc (0 . 0) "./boot/common.scm" . 60462)
     (iloc.0 . 2)
     (push.cons)
     (apply.iloc+ (1 . 0) "./boot/common.scm" . 60435))
   (push.iloc.1 . 1)
   (push.const)
   (push.const)
   (apply.iloc+ (0 . 0) "./boot/common.scm" . 58375))
 (set.gloc.of partition)
 (ret.const.unspec))
((close
   (2 0 . loop)
   (iloc.0 . 0)
   (if.pair?
     (touch.gloc.of |loop`246*|)
     (push.cdr.iloc (0 . 0) "./boot/common.scm" . 66577)
     (push.n+.iloc (0 . 1) 1 "./boot/common.scm" . 66587)
     (apply.gloc.of |loop`246*| "./boot/common.scm" . 66571))
   (call (iloc.0 . 0) (if.not.null?.ret.const . #f) (ret.iloc 0 . 1))
   (if.true.ret)
   (ret.const . -1))
 (set.gloc.of |loop`246*|)
 (close
   (1 0 . safe-length)
   (touch.gloc.of |loop`246*|)
   (push.iloc.0 . 0)
   (push.const . 0)
   (apply.gloc.of |loop`246*| "./boot/common.scm" . 65543))
 (set.gloc.of safe-length)
 (ret.const.unspec))
((close
   (2 0 . split-at)
   (push.iloc.0 . 0)
   (push.iloc.0 . 1)
   (push.subr.gloc.of list-head 2 "./boot/common.scm" . 71693)
   (push.iloc.0 . 0)
   (push.iloc.0 . 1)
   (push.subr.gloc.of list-tail 2 "./boot/common.scm" . 71711)
   (ret.subr.gloc.of values "./boot/common.scm" . 71685))
 (set.gloc.of split-at)
 (ret.const.unspec))
((close
   (1 0 . loop)
   (iloc.0 . 0)
   (if.not.pair?.ret.const . #f)
   (car.iloc (0 . 0) "./boot/common.scm" . 78888)
   (if.not.symbol?.ret.const . #t)
   (push.car.iloc (0 . 0) "./boot/common.scm" . 79904)
   (push.cdr.iloc (0 . 0) "./boot/common.scm" . 79914)
   (subr.gloc.of memq 2 "./boot/common.scm" . 79898)
   (if.true.ret)
   (touch.gloc.of |loop`256*|)
   (push.cdr.iloc (0 . 0) "./boot/common.scm" . 80928)
   (apply.gloc.of |loop`256*| "./boot/common.scm" . 80922))
 (set.gloc.of |loop`256*|)
 (close
   (1 0 . unique-id-list?)
   (push.iloc.0 . 0)
   (subr.gloc.of list? 1 "./boot/common.scm" . 75786)
   (if.false.ret)
   (call
     (touch.gloc.of |loop`256*|)
     (push.iloc.0 . 0)
     (apply.gloc.of |loop`256*| "./boot/common.scm" . 77841))
   (push)
   (ret.subr.gloc.of not (not (|loop`256*| |lst`252*|))))
 (set.gloc.of unique-id-list?)
 (ret.const.unspec))
((close
   (1 0 . loop)
   (iloc.0 . 0)
   (if.not.pair?.ret.const . #f)
   (push.car.iloc (0 . 0) "./boot/common.scm" . 88091)
   (push.cdr.iloc (0 . 0) "./boot/common.scm" . 88101)
   (subr.gloc.of memq 2 "./boot/common.scm" . 88085)
   (if.true (push.iloc.0 . 0) (ret.subr.gloc.of car "./boot/common.scm" . 89109))
   (touch.gloc.of |loop`264*|)
   (push.cdr.iloc (0 . 0) "./boot/common.scm" . 90139)
   (apply.gloc.of |loop`264*| "./boot/common.scm" . 90133))
 (set.gloc.of |loop`264*|)
 (close
   (1 0 . find-duplicates)
   (push.iloc.0 . 0)
   (subr.gloc.of list? 1 "./boot/common.scm" . 85002)
   (if.false.ret)
   (touch.gloc.of |loop`264*|)
   (push.iloc.0 . 0)
   (apply.gloc.of |loop`264*| "./boot/common.scm" . 87052))
 (set.gloc.of find-duplicates)
 (ret.const.unspec))
((close
   (2 0 . split->list)
   (push.iloc.0 . 0)
   (push.subr.gloc.of make-string-input-port 1 "./boot/common.scm" . 97299)
   (subr.gloc.of make-string-output-port 0)
   (push)
   (extend . 2)
   (extend.enclose+
     (1 0 . loop1)
     (extend.enclose+
       (1 0 . loop2)
       (push.iloc.0 . 0)
       (subr.gloc.of eof-object? 1 "./boot/common.scm" . 101398)
       (if.true
         (push.iloc 4 . 1)
         (push.subr.gloc.of extract-accumulated-string 1 "./boot/common.scm" . 102431)
         (extend . 1)
         (push.iloc.0 . 0)
         (push.const . "")
         (subr.gloc.of string=? 2 "./boot/common.scm" . 103452)
         (if.true (push.iloc 3 . 0) (ret.subr.gloc.of reverse "./boot/common.scm" . 104476))
         (push.iloc.0 . 0)
         (iloc 3 . 0)
         (push.cons)
         (ret.subr.gloc.of reverse "./boot/common.scm" . 105500))
       (call (push.iloc.0 . 0) (apply.iloc (5 . 1) "./boot/common.scm" . 106518))
       (if.true
         (push.iloc 4 . 1)
         (push.subr.gloc.of extract-accumulated-string 1 "./boot/common.scm" . 107555)
         (iloc 2 . 0)
         (push.cons)
         (apply.iloc+ (3 . 0) "./boot/common.scm" . 107542))
       (push.iloc 4 . 1)
       (push.iloc.0 . 0)
       (subr.gloc.of put-char 2 "./boot/common.scm" . 109590)
       (push.iloc 4 . 0)
       (push.subr.gloc.of get-char 1 "./boot/common.scm" . 110621)
       (apply.iloc+ (1 . 0) "./boot/common.scm" . 110614))
     (push.iloc 3 . 0)
     (push.subr.gloc.of get-char 1 "./boot/common.scm" . 100380)
     (apply.iloc+ (0 . 0) "./boot/common.scm" . 101391))
   (push.const)
   (apply.iloc+ (0 . 0) "./boot/common.scm" . 100365))
 (set.gloc.of |split->list`269*|)
 (close
   (2 0 . string-split)
   (push.iloc.0 . 1)
   (subr.gloc.of char? 1 "./boot/common.scm" . 112652)
   (if.true
     (touch.gloc.of |split->list`269*|)
     (push.iloc.0 . 0)
     (push.close
       (1 0)
       (push.iloc.0 . 0)
       (push.iloc.1 . 1)
       (ret.subr.gloc.of char=? "./boot/common.scm" . 113705))
     (apply.gloc.of |split->list`269*| "./boot/common.scm" . 113676))
   (push.iloc.0 . 1)
   (subr.gloc.of string? 1 "./boot/common.scm" . 114700)
   (if.true
     (call (push.iloc.0 . 1) (apply.gloc.of string->list "./boot/common.scm" . 115735))
     (push)
     (extend . 1)
     (touch.gloc.of |split->list`269*|)
     (push.iloc.1 . 0)
     (push.close
       (1 0)
       (touch.gloc.of any1)
       (push.close
         (1 0)
         (push.iloc.1 . 0)
         (push.iloc.0 . 0)
         (ret.subr.gloc.of char=? "./boot/common.scm" . 116797))
       (push.iloc.1 . 0)
       (apply.gloc.of any1 "./boot/common.scm" . 116779))
     (apply.gloc.of |split->list`269*| "./boot/common.scm" . 116750))
   (push.iloc.0 . 1)
   (subr.gloc.of procedure? 1 "./boot/common.scm" . 117772)
   (if.true
     (touch.gloc.of |split->list`269*|)
     (push.iloc.0 . 0)
     (push.iloc.0 . 1)
     (apply.gloc.of |split->list`269*| "./boot/common.scm" . 118796))
   (ret.const.unspec))
 (set.gloc.of string-split)
 (ret.const.unspec))
((close
   (2 1 . wrong-type-argument-message)
   (iloc.0 . 2)
   (if.null?
     (push.const . "expected ~a, but got ~a")
     (push.iloc.0 . 0)
     (push.iloc.0 . 1)
     (ret.subr.gloc.of format "./boot/common.scm" . 123913))
   (push.const . "expected ~a, but got ~a, as argument ~a")
   (push.iloc.0 . 0)
   (push.iloc.0 . 1)
   (push.car.iloc (0 . 2) "./boot/common.scm" . 124998)
   (ret.subr.gloc.of format "./boot/common.scm" . 124937))
 (set.gloc.of wrong-type-argument-message)
 (ret.const.unspec))

;
((close
   (1 1 . make-parameter)
   (call
     (iloc.0 . 1)
     (if.null?
       (touch.gloc.of parameter-proc-0)
       (subr.gloc.of gensym 0)
       (push)
       (apply.gloc.of parameter-proc-0 "./boot/parameter.scm" . 7194))
     (touch.gloc.of parameter-proc-1)
     (subr.gloc.of gensym 0)
     (push)
     (push.car.iloc (0 . 1) "./boot/parameter.scm" . 8245)
     (apply.gloc.of parameter-proc-1 "./boot/parameter.scm" . 8218))
   (push)
   (extend . 1)
   (call (push.iloc.1 . 0) (apply.iloc (0 . 0) "./boot/parameter.scm" . 9230))
   (ret.iloc 0 . 0))
 (set.gloc.of make-parameter)
 (ret.const.unspec))
((close
   (1 0 . parameter-proc-0)
   (ret.close
     (0 1)
     (iloc.0 . 0)
     (if.null?
       (subr.gloc.of current-dynamic-environment 0)
       (push)
       (push.iloc.1 . 0)
       (push.const . #f)
       (ret.subr.gloc.of core-hashtable-ref "./boot/parameter.scm" . 15371))
     (subr.gloc.of current-dynamic-environment 0)
     (push)
     (push.iloc.1 . 0)
     (push.car.iloc (0 . 0) "./boot/parameter.scm" . 16450)
     (ret.subr.gloc.of core-hashtable-set! "./boot/parameter.scm" . 16395)))
 (set.gloc.of parameter-proc-0)
 (ret.const.unspec))
((close
   (2 0 . parameter-proc-1)
   (ret.close
     (0 1)
     (iloc.0 . 0)
     (if.null?
       (subr.gloc.of current-dynamic-environment 0)
       (push)
       (push.iloc.1 . 0)
       (push.const . #f)
       (ret.subr.gloc.of core-hashtable-ref "./boot/parameter.scm" . 22539))
     (subr.gloc.of current-dynamic-environment 0)
     (push)
     (push.iloc.1 . 0)
     (call
       (push.car.iloc (0 . 0) "./boot/parameter.scm" . 23624)
       (apply.iloc (1 . 1) "./boot/parameter.scm" . 23618))
     (push)
     (ret.subr.gloc.of core-hashtable-set! "./boot/parameter.scm" . 23563)))
 (set.gloc.of parameter-proc-1)
 (ret.const.unspec))

;
((call (push.const . 5) (apply.gloc.of make-parameter "./boot/macro/initial.scm" . 4125))
 (set.gloc.of expansion-backtrace)
 (ret.const.unspec))
((call (push.const) (apply.gloc.of make-parameter "./boot/macro/initial.scm" . 5151))
 (set.gloc.of expansion-trace-stack)
 (ret.const.unspec))
((call (push.const . 0) (apply.gloc.of make-parameter "./boot/macro/initial.scm" . 6175))
 (set.gloc.of expansion-trace-level)
 (ret.const.unspec))
((call (push.const . #f) (apply.gloc.of make-parameter "./boot/macro/initial.scm" . 7207))
 (set.gloc.of current-immutable-identifiers)
 (ret.const.unspec))
((call (push.const) (apply.gloc.of make-parameter "./boot/macro/initial.scm" . 8231))
 (set.gloc.of current-expansion-environment)
 (ret.const.unspec))
((call (push.const) (apply.gloc.of make-parameter "./boot/macro/initial.scm" . 9257))
 (set.gloc.of current-transformer-environment)
 (ret.const.unspec))
((call (push.const . #f) (apply.gloc.of make-parameter "./boot/macro/initial.scm" . 10278))
 (set.gloc.of current-template-environment)
 (ret.const.unspec))
((call (push.const) (apply.gloc.of make-parameter "./boot/macro/initial.scm" . 11296))
 (set.gloc.of current-expansion-mode)
 (ret.const.unspec))
((call (push.const . #f) (apply.gloc.of make-parameter "./boot/macro/initial.scm" . 12322))
 (set.gloc.of current-macro-expression)
 (ret.const.unspec))
((call (push.const . #f) (apply.gloc.of make-parameter "./boot/macro/initial.scm" . 13345))
 (set.gloc.of unexpect-top-level-form)
 (ret.const.unspec))
((close (3 0) (ret.iloc 0 . 0))
 (set.gloc.of |.L131|)
 (call (push.gloc.of |.L131|) (apply.gloc.of make-parameter "./boot/macro/initial.scm" . 14374))
 (set.gloc.of current-after-expansion-hook)
 (ret.const.unspec))
((call (push.const . 0) (apply.gloc.of make-parameter "./boot/macro/initial.scm" . 15393))
 (set.gloc.of current-temporary-count)
 (ret.const.unspec))
((call (push.const . 0) (apply.gloc.of make-parameter "./boot/macro/initial.scm" . 16414))
 (set.gloc.of current-rename-count)
 (ret.const.unspec))
((call (push.const . #f) (apply.gloc.of make-parameter "./boot/macro/initial.scm" . 17437))
 (set.gloc.of current-temporaries)
 (ret.const.unspec))
((call (push.const . #f) (apply.gloc.of make-parameter "./boot/macro/initial.scm" . 18466))
 (set.gloc.of current-closure-comments)
 (ret.const.unspec))
((call (push.const . #f) (apply.gloc.of make-parameter "./boot/macro/initial.scm" . 19492))
 (set.gloc.of current-top-level-exterior)
 (ret.const.unspec))
((call
   (subr.gloc.of make-core-hashtable 0)
   (push)
   (apply.gloc.of make-parameter "./boot/macro/initial.scm" . 20515))
 (set.gloc.of current-top-level-renames)
 (ret.const.unspec))
((close
   (4 0)
   (call
     (push.iloc.0 . 1)
     (subr.gloc.of top-level-bound? 1 "./boot/macro/initial.scm" . 24586)
     (if.false.ret)
     (push.iloc.0 . 1)
     (push.const.undef)
     (ret.subr.gloc.of set-top-level-value! "./boot/macro/initial.scm" . 24613))
   (subr.gloc.of current-macro-environment 0)
   (push)
   (push.iloc.0 . 1)
   (call
     (push.iloc.0 . 0)
     (const . syntax)
     (if.eq?
       (touch.gloc.of make-macro)
       (push.iloc.0 . 2)
       (push.iloc.0 . 3)
       (apply.gloc.of make-macro "./boot/macro/initial.scm" . 29725))
     (push.iloc.0 . 0)
     (const . variable)
     (if.eq?
       (push.iloc.0 . 2)
       (subr.gloc.of procedure? 1 "./boot/macro/initial.scm" . 31780)
       (if.true
         (touch.gloc.of make-macro-variable)
         (push.iloc.0 . 2)
         (push.iloc.0 . 3)
         (apply.gloc.of make-macro-variable "./boot/macro/initial.scm" . 32804))
       (call
         (touch.gloc.of variable-transformer-token?)
         (push.iloc.0 . 2)
         (apply.gloc.of variable-transformer-token? "./boot/macro/initial.scm" . 33828))
       (if.true
         (touch.gloc.of make-macro-variable)
         (push.iloc.0 . 2)
         (push.const . 1)
         (push.subr.gloc.of tuple-ref 2 "./boot/macro/initial.scm" . 34873)
         (push.iloc.0 . 3)
         (apply.gloc.of make-macro-variable "./boot/macro/initial.scm" . 34852))
       (push.const . "internal error: .set-top-level-macro! ~s")
       (push.iloc.0 . 0)
       (push.iloc.0 . 1)
       (push.iloc.0 . 2)
       (push.subr.gloc.of list 3 "./boot/macro/initial.scm" . 36957)
       (apply.gloc.of scheme-error "./boot/macro/initial.scm" . 36900))
     (push.const . "internal error: .set-top-level-macro! ~s")
     (push.iloc.0 . 0)
     (push.iloc.0 . 1)
     (push.iloc.0 . 2)
     (push.subr.gloc.of list 3 "./boot/macro/initial.scm" . 38998)
     (apply.gloc.of scheme-error "./boot/macro/initial.scm" . 38941))
   (push)
   (ret.subr.gloc.of
     core-hashtable-set!
     (core-hashtable-set!
       (current-macro-environment)
       |keyword`312*|
       (if (|.eq?| |type`312*| 'syntax)
           (make-macro |spec`312*| |env`312*|)
           (if (|.eq?| |type`312*| 'variable)
               (if (procedure? |spec`312*|)
                   (make-macro-variable |spec`312*| |env`312*|)
                   (if (variable-transformer-token? |spec`312*|)
                       (make-macro-variable (tuple-ref |spec`312*| 1) |env`312*|)
                       (scheme-error
                         "internal error: .set-top-level-macro! ~s"
                         (list |type`312*| |keyword`312*| |spec`312*|))))
               (scheme-error
                 "internal error: .set-top-level-macro! ~s"
                 (list |type`312*| |keyword`312*| |spec`312*|)))))))
 (set.gloc.of |.L134|)
 (push.const . |.set-top-level-macro!|)
 (push.gloc.of |.L134|)
 (ret.subr.gloc.of set-top-level-value! "./boot/macro/initial.scm" . 23555))
((close
   (1 0 . core-primitive-name?)
   (push.iloc.0 . 0)
   (const . ...)
   (if.eq?.ret.const . #f)
   (push.iloc.0 . 0)
   (push.subr.gloc.of symbol->string 1 "./boot/macro/initial.scm" . 45085)
   (push.const . 0)
   (push.subr.gloc.of string-ref 2 "./boot/macro/initial.scm" . 45073)
   (subr.gloc.of current-primitive-prefix 0 "./boot/macro/initial.scm" . 45107)
   (ret.eq? "./boot/macro/initial.scm" . 45068))
 (set.gloc.of core-primitive-name?)
 (ret.const.unspec))
((close
   (1 0 . core-primitive-name)
   (call
     (touch.gloc.of core-primitive-name?)
     (push.iloc.0 . 0)
     (apply.gloc.of core-primitive-name? "./boot/macro/initial.scm" . 49164))
   (if.true (ret.iloc 0 . 0))
   (push.const . "~a~a")
   (subr.gloc.of current-primitive-prefix 0)
   (push)
   (push.iloc.0 . 0)
   (push.subr.gloc.of format 3 "./boot/macro/initial.scm" . 51228)
   (ret.subr.gloc.of string->symbol "./boot/macro/initial.scm" . 51212))
 (set.gloc.of core-primitive-name)
 (ret.const.unspec))
((close
   (2 0 . generate-global-id)
   (push.const . "~a~a~a")
   (push.iloc.0 . 0)
   (subr.gloc.of current-library-suffix 0)
   (push)
   (push.iloc.0 . 1)
   (push.subr.gloc.of format 4 "./boot/macro/initial.scm" . 55317)
   (ret.subr.gloc.of string->symbol "./boot/macro/initial.scm" . 55301))
 (set.gloc.of generate-global-id)
 (ret.const.unspec))
((close
   (2 0 . make-temporary-symbol)
   (call
     (touch.gloc.of current-temporaries)
     (apply.gloc.of current-temporaries "./boot/macro/initial.scm" . 59410))
   (push)
   (extend . 1)
   (push.iloc.0 . 0)
   (push.iloc.1 . 0)
   (push.const . #f)
   (subr.gloc.of core-hashtable-ref 3 "./boot/macro/initial.scm" . 60427)
   (if.true.ret)
   (push.iloc.1 . 0)
   (push.iloc.1 . 1)
   (push.subr.gloc.of string->uninterned-symbol 2 "./boot/macro/initial.scm" . 61462)
   (extend . 1)
   (push.iloc.1 . 0)
   (push.iloc 2 . 0)
   (push.iloc.0 . 0)
   (subr.gloc.of core-hashtable-set! 3 "./boot/macro/initial.scm" . 62477)
   (ret.iloc 0 . 0))
 (set.gloc.of make-temporary-symbol)
 (ret.const.unspec))
((close
   (0 0 . generate-temporary-symbol)
   (call
     (touch.gloc.of current-temporary-count)
     (apply.gloc.of current-temporary-count "./boot/macro/initial.scm" . 67602))
   (push)
   (extend . 1)
   (call
     (touch.gloc.of current-temporary-count)
     (push.n+.iloc (0 . 0) 1 "./boot/macro/initial.scm" . 68640)
     (apply.gloc.of current-temporary-count "./boot/macro/initial.scm" . 68615))
   (push.const . ".L~a")
   (push.iloc.0 . 0)
   (push.subr.gloc.of format 2 "./boot/macro/initial.scm" . 69651)
   (extend . 1)
   (touch.gloc.of make-temporary-symbol)
   (push.iloc.0 . 0)
   (push.iloc.0 . 0)
   (push.subr.gloc.of string-length 1 "./boot/macro/initial.scm" . 70693)
   (apply.gloc.of make-temporary-symbol "./boot/macro/initial.scm" . 70665))
 (set.gloc.of generate-temporary-symbol)
 (ret.const.unspec))
((close
   (1 0 . generate-local-macro-symbol)
   (call
     (touch.gloc.of current-temporary-count)
     (apply.gloc.of current-temporary-count "./boot/macro/initial.scm" . 74770))
   (push)
   (extend . 1)
   (call
     (touch.gloc.of current-temporary-count)
     (push.n+.iloc (0 . 0) 1 "./boot/macro/initial.scm" . 75808)
     (apply.gloc.of current-temporary-count "./boot/macro/initial.scm" . 75783))
   (touch.gloc.of make-temporary-symbol)
   (push.const . ".MACRO~a.~a")
   (push.iloc.0 . 0)
   (push.iloc.1 . 0)
   (push.subr.gloc.of format 3 "./boot/macro/initial.scm" . 76830)
   (push.const . 6)
   (apply.gloc.of make-temporary-symbol "./boot/macro/initial.scm" . 76807))
 (set.gloc.of generate-local-macro-symbol)
 (ret.const.unspec))
((close
   (1 0 . local-macro-symbol?)
   (push.iloc.0 . 0)
   (subr.gloc.of uninterned-symbol? 1 "./boot/macro/initial.scm" . 80906)
   (if.false.ret)
   (push.iloc.0 . 0)
   (push.subr.gloc.of uninterned-symbol-prefix 1 "./boot/macro/initial.scm" . 80940)
   (push.const . ".MACRO")
   (ret.subr.gloc.of string=? "./boot/macro/initial.scm" . 80930))
 (set.gloc.of local-macro-symbol?)
 (ret.const.unspec))
((close
   (2 0 . rename-id)
   (push.iloc.0 . 0)
   (subr.gloc.of uninterned-symbol? 1 "./boot/macro/initial.scm" . 85001)
   (if.true
     (touch.gloc.of make-temporary-symbol)
     (push.const . "~a~a~a")
     (push.iloc.0 . 0)
     (subr.gloc.of current-rename-delimiter 0)
     (push)
     (push.iloc.0 . 1)
     (push.subr.gloc.of format 4 "./boot/macro/initial.scm" . 86048)
     (push.iloc.0 . 0)
     (push.subr.gloc.of uninterned-symbol-prefix 1 "./boot/macro/initial.scm" . 86117)
     (push.subr.gloc.of string-length 1 "./boot/macro/initial.scm" . 86102)
     (apply.gloc.of make-temporary-symbol "./boot/macro/initial.scm" . 86025))
   (touch.gloc.of make-temporary-symbol)
   (push.const . "~a~a~a")
   (push.iloc.0 . 0)
   (subr.gloc.of current-rename-delimiter 0)
   (push)
   (push.iloc.0 . 1)
   (push.subr.gloc.of format 4 "./boot/macro/initial.scm" . 87072)
   (push.iloc.0 . 0)
   (push.subr.gloc.of symbol->string 1 "./boot/macro/initial.scm" . 87141)
   (push.subr.gloc.of string-length 1 "./boot/macro/initial.scm" . 87126)
   (apply.gloc.of make-temporary-symbol "./boot/macro/initial.scm" . 87049))
 (set.gloc.of rename-id)
 (ret.const.unspec))
((close
   (1 0 . renamed-id?)
   (push.iloc.0 . 0)
   (subr.gloc.of uninterned-symbol? 1 "./boot/macro/initial.scm" . 91146)
   (if.false.ret)
   (push.iloc.0 . 0)
   (push.subr.gloc.of uninterned-symbol-suffix 1 "./boot/macro/initial.scm" . 92187)
   (subr.gloc.of current-rename-delimiter 0)
   (push)
   (ret.subr.gloc.of string-contains "./boot/macro/initial.scm" . 92170))
 (set.gloc.of renamed-id?)
 (ret.const.unspec))
((close
   (2 0 . rename-variable-id)
   (push.iloc.0 . 0)
   (subr.gloc.of uninterned-symbol? 1 "./boot/macro/initial.scm" . 96265)
   (if.true
     (touch.gloc.of make-temporary-symbol)
     (push.const . "~a~a~a*")
     (push.iloc.0 . 0)
     (subr.gloc.of current-rename-delimiter 0)
     (push)
     (push.iloc.0 . 1)
     (push.subr.gloc.of format 4 "./boot/macro/initial.scm" . 97312)
     (push.iloc.0 . 0)
     (push.subr.gloc.of uninterned-symbol-prefix 1 "./boot/macro/initial.scm" . 97382)
     (push.subr.gloc.of string-length 1 "./boot/macro/initial.scm" . 97367)
     (apply.gloc.of make-temporary-symbol "./boot/macro/initial.scm" . 97289))
   (touch.gloc.of make-temporary-symbol)
   (push.const . "~a~a~a*")
   (push.iloc.0 . 0)
   (subr.gloc.of current-rename-delimiter 0)
   (push)
   (push.iloc.0 . 1)
   (push.subr.gloc.of format 4 "./boot/macro/initial.scm" . 98336)
   (push.iloc.0 . 0)
   (push.subr.gloc.of symbol->string 1 "./boot/macro/initial.scm" . 98406)
   (push.subr.gloc.of string-length 1 "./boot/macro/initial.scm" . 98391)
   (apply.gloc.of make-temporary-symbol "./boot/macro/initial.scm" . 98313))
 (set.gloc.of rename-variable-id)
 (ret.const.unspec))
((close
   (1 0 . renamed-variable-id?)
   (push.iloc.0 . 0)
   (subr.gloc.of uninterned-symbol? 1 "./boot/macro/initial.scm" . 102410)
   (if.false.ret)
   (push.iloc.0 . 0)
   (push.subr.gloc.of uninterned-symbol-suffix 1 "./boot/macro/initial.scm" . 103451)
   (subr.gloc.of current-rename-delimiter 0)
   (push)
   (subr.gloc.of string-contains 2 "./boot/macro/initial.scm" . 103434)
   (if.false.ret)
   (push.iloc.0 . 0)
   (push.subr.gloc.of uninterned-symbol-suffix 1 "./boot/macro/initial.scm" . 104475)
   (push.const . #\*)
   (ret.subr.gloc.of string-contains "./boot/macro/initial.scm" . 104458))
 (set.gloc.of renamed-variable-id?)
 (ret.const.unspec))
((close
   (2 0 . compose-id)
   (push.iloc.0 . 0)
   (subr.gloc.of uninterned-symbol? 1 "./boot/macro/initial.scm" . 108553)
   (if.true
     (touch.gloc.of make-temporary-symbol)
     (push.const . "~a~a")
     (push.iloc.0 . 0)
     (push.iloc.0 . 1)
     (push.subr.gloc.of format 3 "./boot/macro/initial.scm" . 109600)
     (push.iloc.0 . 0)
     (push.subr.gloc.of uninterned-symbol-prefix 1 "./boot/macro/initial.scm" . 109641)
     (push.subr.gloc.of string-length 1 "./boot/macro/initial.scm" . 109626)
     (apply.gloc.of make-temporary-symbol "./boot/macro/initial.scm" . 109577))
   (touch.gloc.of make-temporary-symbol)
   (push.const . "~a~a")
   (push.iloc.0 . 0)
   (push.iloc.0 . 1)
   (push.subr.gloc.of format 3 "./boot/macro/initial.scm" . 110624)
   (push.iloc.0 . 0)
   (push.subr.gloc.of symbol->string 1 "./boot/macro/initial.scm" . 110665)
   (push.subr.gloc.of string-length 1 "./boot/macro/initial.scm" . 110650)
   (apply.gloc.of make-temporary-symbol "./boot/macro/initial.scm" . 110601))
 (set.gloc.of compose-id)
 (ret.const.unspec))
((close
   (1 0 . original-id)
   (call
     (touch.gloc.of renamed-id?)
     (push.iloc.0 . 0)
     (apply.gloc.of renamed-id? "./boot/macro/initial.scm" . 114697))
   (if.true
     (push.iloc.0 . 0)
     (push.subr.gloc.of uninterned-symbol-prefix 1 "./boot/macro/initial.scm" . 114730)
     (ret.subr.gloc.of string->symbol "./boot/macro/initial.scm" . 114714))
   (ret.iloc 0 . 0))
 (set.gloc.of original-id)
 (ret.const.unspec))
((close
   (1 0 . loop)
   (iloc.0 . 0)
   (if.pair?
     (call
       (touch.gloc.of |loop`356*|)
       (push.car.iloc (0 . 0) "./boot/macro/initial.scm" . 122913)
       (apply.gloc.of |loop`356*| "./boot/macro/initial.scm" . 122907))
     (push)
     (call
       (touch.gloc.of |loop`356*|)
       (push.cdr.iloc (0 . 0) "./boot/macro/initial.scm" . 122934)
       (apply.gloc.of |loop`356*| "./boot/macro/initial.scm" . 122928))
     (push)
     (extend . 2)
     (call
       (push.iloc.0 . 0)
       (car.iloc (1 . 0) "./boot/macro/initial.scm" . 123940)
       (if.not.eq?.ret.const . #f)
       (push.iloc.0 . 1)
       (cdr.iloc (1 . 0) "./boot/macro/initial.scm" . 123958)
       (ret.eq? "./boot/macro/initial.scm" . 123951))
     (if.true (ret.iloc 1 . 0))
     (push.iloc.0 . 0)
     (iloc.0 . 1)
     (ret.cons "./boot/macro/initial.scm" . 123974))
   (iloc.0 . 0)
   (if.symbol?
     (touch.gloc.of original-id)
     (push.iloc.0 . 0)
     (apply.gloc.of original-id "./boot/macro/initial.scm" . 125970))
   (push.iloc.0 . 0)
   (subr.gloc.of vector? 1 "./boot/macro/initial.scm" . 126994)
   (if.true
     (call
       (push.gloc.of |loop`356*|)
       (push.iloc.0 . 0)
       (push.subr.gloc.of vector->list 1 "./boot/macro/initial.scm" . 128042)
       (apply.gloc.of map "./boot/macro/initial.scm" . 128032))
     (push)
     (ret.subr.gloc.of list->vector "./boot/macro/initial.scm" . 128018))
   (ret.iloc 0 . 0))
 (set.gloc.of |loop`356*|)
 (close
   (1 0 . strip-rename-suffix)
   (push.iloc.0 . 0)
   (subr.gloc.of cyclic-object? 1 "./boot/macro/initial.scm" . 118793)
   (if.true (ret.iloc 0 . 0))
   (touch.gloc.of |loop`356*|)
   (push.iloc.0 . 0)
   (apply.gloc.of |loop`356*| "./boot/macro/initial.scm" . 121867))
 (set.gloc.of strip-rename-suffix)
 (ret.const.unspec))
((close
   (1 0 . retrieve-rename-suffix)
   (call
     (touch.gloc.of renamed-id?)
     (push.iloc.0 . 0)
     (apply.gloc.of renamed-id? "./boot/macro/initial.scm" . 133132))
   (if.true
     (push.iloc.0 . 0)
     (ret.subr.gloc.of uninterned-symbol-suffix "./boot/macro/initial.scm" . 133149))
   (ret.const . ""))
 (set.gloc.of retrieve-rename-suffix)
 (ret.const.unspec))
((close
   (0 0 . fresh-rename-count)
   (call
     (touch.gloc.of current-rename-count)
     (call
       (touch.gloc.of current-rename-count)
       (apply.gloc.of current-rename-count "./boot/macro/initial.scm" . 138270))
     (push)
     (push.const . 1)
     (push.subr.gloc.of + 2 "./boot/macro/initial.scm" . 138267)
     (apply.gloc.of current-rename-count "./boot/macro/initial.scm" . 138245))
   (touch.gloc.of current-rename-count)
   (apply.gloc.of current-rename-count "./boot/macro/initial.scm" . 139269))
 (set.gloc.of fresh-rename-count)
 (ret.const.unspec))
((close
   (2 0 . set-closure-comment!)
   (call
     (touch.gloc.of current-closure-comments)
     (apply.gloc.of current-closure-comments "./boot/macro/initial.scm" . 143370))
   (if.false.ret)
   (call
     (touch.gloc.of current-closure-comments)
     (apply.gloc.of current-closure-comments "./boot/macro/initial.scm" . 144415))
   (push)
   (push.iloc.0 . 0)
   (push.const . heap)
   (iloc.0 . 1)
   (push.cons)
   (ret.subr.gloc.of core-hashtable-set! "./boot/macro/initial.scm" . 144394))
 (set.gloc.of set-closure-comment!)
 (ret.const.unspec))
((close
   (2 1 . annotate-closure)
   (call
     (touch.gloc.of current-closure-comments)
     (apply.gloc.of current-closure-comments "./boot/macro/initial.scm" . 148490))
   (if.false.ret)
   (call
     (touch.gloc.of current-closure-comments)
     (apply.gloc.of current-closure-comments "./boot/macro/initial.scm" . 149541))
   (push)
   (push.iloc.0 . 1)
   (push.const . #f)
   (push.subr.gloc.of core-hashtable-ref 3 "./boot/macro/initial.scm" . 149521)
   (extend . 1)
   (iloc.0 . 0)
   (if.true
     (iloc.1 . 2)
     (if.null?
       (call
         (touch.gloc.of current-closure-comments)
         (apply.gloc.of current-closure-comments "./boot/macro/initial.scm" . 152623))
       (push)
       (push.iloc.1 . 0)
       (push.iloc.0 . 0)
       (ret.subr.gloc.of core-hashtable-set! "./boot/macro/initial.scm" . 152602))
     (call
       (touch.gloc.of current-closure-comments)
       (apply.gloc.of current-closure-comments "./boot/macro/initial.scm" . 153647))
     (push)
     (push.iloc.1 . 0)
     (push.car.iloc (1 . 2) "./boot/macro/initial.scm" . 153685)
     (cdr.iloc (0 . 0) "./boot/macro/initial.scm" . 153696)
     (push.cons)
     (ret.subr.gloc.of core-hashtable-set! "./boot/macro/initial.scm" . 153626))
   (ret.const.unspec))
 (set.gloc.of annotate-closure)
 (ret.const.unspec))
((close
   (1 0 . annotated?)
   (subr.gloc.of current-source-comments 0 "./boot/macro/initial.scm" . 157706)
   (if.false.ret)
   (subr.gloc.of current-source-comments 0)
   (push)
   (push.iloc.0 . 0)
   (push.const . #f)
   (subr.gloc.of core-hashtable-ref 3 "./boot/macro/initial.scm" . 158730)
   (if.false.ret)
   (ret.const . #t))
 (set.gloc.of annotated?)
 (ret.const.unspec))
((close
   (1 0 . get-annotation)
   (iloc.0 . 0)
   (if.not.pair?.ret.const . #f)
   (subr.gloc.of current-source-comments 0 "./boot/macro/initial.scm" . 164874)
   (if.false.ret)
   (subr.gloc.of current-source-comments 0)
   (push)
   (push.iloc.0 . 0)
   (push.const . #f)
   (ret.subr.gloc.of core-hashtable-ref "./boot/macro/initial.scm" . 165898))
 (set.gloc.of get-annotation)
 (ret.const.unspec))
((close
   (2 0 . put-annotation)
   (call
     (iloc.0 . 0)
     (if.not.pair?.ret.const . #f)
     (subr.gloc.of current-source-comments 0 "./boot/macro/initial.scm" . 171018)
     (if.false.ret)
     (subr.gloc.of current-source-comments 0)
     (push)
     (push.iloc.0 . 0)
     (push.iloc.0 . 1)
     (ret.subr.gloc.of core-hashtable-set! "./boot/macro/initial.scm" . 172042))
   (ret.iloc 0 . 0))
 (set.gloc.of put-annotation)
 (ret.const.unspec))
((close
   (2 0 . annotate)
   (call
     (subr.gloc.of current-source-comments 0)
     (push)
     (extend . 1)
     (extend.unbound . 2)
     (push.close+
       (2 0 . put-note!)
       (iloc.0 . 1)
       (if.false.ret)
       (extend.enclose
         (1 0 . loop)
         (push.iloc.0 . 0)
         (subr.gloc.of list? 1 "./boot/macro/initial.scm" . 183319)
         (if.false.ret)
         (push.iloc 4 . 0)
         (push.iloc.0 . 0)
         (push.const . #f)
         (subr.gloc.of core-hashtable-ref 3 "./boot/macro/initial.scm" . 184347)
         (if.true.ret)
         (push.iloc 4 . 0)
         (push.iloc.0 . 0)
         (push.iloc 2 . 1)
         (subr.gloc.of core-hashtable-set! 3 "./boot/macro/initial.scm" . 186397)
         (push.iloc.1 . 0)
         (push.iloc.0 . 0)
         (apply.gloc.of for-each "./boot/macro/initial.scm" . 187421))
       (push.iloc.1 . 0)
       (apply.iloc (0 . 0) "./boot/macro/initial.scm" . 183314))
     (push.close
       (1 0 . get-note)
       (extend.enclose
         (1 0 . loop)
         (iloc.0 . 0)
         (if.not.pair?.ret.const . #f)
         (push.iloc 4 . 0)
         (push.iloc.0 . 0)
         (push.const . #f)
         (subr.gloc.of core-hashtable-ref 3 "./boot/macro/initial.scm" . 193558)
         (if.true.ret)
         (call
           (push.car.iloc (0 . 0) "./boot/macro/initial.scm" . 194588)
           (apply.iloc (1 . 0) "./boot/macro/initial.scm" . 194582))
         (if.true.ret)
         (push.cdr.iloc (0 . 0) "./boot/macro/initial.scm" . 195612)
         (apply.iloc (1 . 0) "./boot/macro/initial.scm" . 195606))
       (push.iloc.1 . 0)
       (apply.iloc (0 . 0) "./boot/macro/initial.scm" . 192525))
     (enclose . 2)
     (iloc.1 . 0)
     (if.false.ret)
     (iloc 2 . 0)
     (if.not.pair?.ret.const . #f)
     (iloc 2 . 1)
     (if.not.pair?.ret.const . #f)
     (push.iloc 2 . 0)
     (iloc 2 . 1)
     (if.eq?.ret.const . #f)
     (push.iloc.1 . 0)
     (push.iloc 2 . 1)
     (push.const . #f)
     (push.subr.gloc.of core-hashtable-ref 3 "./boot/macro/initial.scm" . 201747)
     (extend . 1)
     (iloc.0 . 0)
     (if.true
       (push.iloc 2 . 0)
       (push.iloc 3 . 0)
       (push.iloc.0 . 0)
       (ret.subr.gloc.of core-hashtable-set! "./boot/macro/initial.scm" . 202786))
     (call (push.iloc 3 . 1) (apply.iloc (1 . 1) "./boot/macro/initial.scm" . 203795))
     (push)
     (extend . 1)
     (iloc.0 . 0)
     (if.true
       (push.iloc 4 . 0)
       (push.iloc.0 . 0)
       (apply.iloc+ (2 . 0) "./boot/macro/initial.scm" . 204834))
     (ret.const.unspec))
   (ret.iloc 0 . 0))
 (set.gloc.of annotate)
 (ret.const.unspec))
((close
   (2 0 . annotate-macro!)
   (call
     (subr.gloc.of current-source-comments 0 "./boot/macro/initial.scm" . 209930)
     (if.false.ret)
     (touch.gloc.of annotate)
     (call
       (call
         (touch.gloc.of wrapped-syntax-object?)
         (push.iloc.0 . 0)
         (apply.gloc.of wrapped-syntax-object? "./boot/macro/initial.scm" . 210968))
       (if.true
         (touch.gloc.of syntax-object-expr)
         (push.iloc.0 . 0)
         (apply.gloc.of syntax-object-expr "./boot/macro/initial.scm" . 210998))
       (ret.iloc 0 . 0))
     (push)
     (call
       (call
         (touch.gloc.of wrapped-syntax-object?)
         (push.iloc.0 . 1)
         (apply.gloc.of wrapped-syntax-object? "./boot/macro/initial.scm" . 211992))
       (if.true
         (touch.gloc.of syntax-object-expr)
         (push.iloc.0 . 1)
         (apply.gloc.of syntax-object-expr "./boot/macro/initial.scm" . 212024))
       (ret.iloc 0 . 1))
     (push)
     (apply.gloc.of annotate "./boot/macro/initial.scm" . 210954))
   (ret.const.unspec))
 (set.gloc.of annotate-macro!)
 (ret.const.unspec))
((close
   (2 0 . loop)
   (iloc.0 . 0)
   (if.pair?
     (<=n.iloc (0 . 1) 0 "./boot/macro/initial.scm" . 220175)
     (if.true (push.const . ...) (ret.subr.gloc.of list "./boot/macro/initial.scm" . 220184))
     (push.car.iloc (0 . 0) "./boot/macro/initial.scm" . 221210)
     (call
       (touch.gloc.of |loop`414*|)
       (push.cdr.iloc (0 . 0) "./boot/macro/initial.scm" . 221226)
       (push.n+.iloc (0 . 1) -1 "./boot/macro/initial.scm" . 221236)
       (apply.gloc.of |loop`414*| "./boot/macro/initial.scm" . 221220))
     (ret.cons "./boot/macro/initial.scm" . 221204))
   (ret.iloc 0 . 0))
 (set.gloc.of |loop`414*|)
 (close
   (2 0 . abbreviated-take)
   (touch.gloc.of annotate)
   (call
     (touch.gloc.of |loop`414*|)
     (push.iloc.0 . 0)
     (push.iloc.0 . 1)
     (apply.gloc.of |loop`414*| "./boot/macro/initial.scm" . 219144))
   (push)
   (push.iloc.0 . 0)
   (apply.gloc.of annotate (annotate (|loop`414*| |form`410*| |n`410*|) |form`410*|)))
 (set.gloc.of abbreviated-take)
 (ret.const.unspec))
((close
   (3 0 . abbreviated-take-form)
   (touch.gloc.of annotate)
   (call
     (extend.enclose+
       (3 0 . loop)
       (iloc.0 . 0)
       (if.pair?
         (call
           (<=n.iloc (0 . 1) 0 "./boot/macro/initial.scm" . 229395)
           (if.true.ret)
           (push.iloc.0 . 2)
           (push.const . 0)
           (ret.subr.gloc.of <= "./boot/macro/initial.scm" . 229405))
         (if.true (push.const . ...) (ret.subr.gloc.of list "./boot/macro/initial.scm" . 229416))
         (call
           (push.car.iloc (0 . 0) "./boot/macro/initial.scm" . 230432)
           (push.n+.iloc (0 . 1) -1 "./boot/macro/initial.scm" . 230442)
           (push.iloc.0 . 2)
           (apply.iloc+ (1 . 0) "./boot/macro/initial.scm" . 230426))
         (push)
         (call
           (push.cdr.iloc (0 . 0) "./boot/macro/initial.scm" . 230461)
           (push.iloc 2 . 1)
           (push.n+.iloc (0 . 2) -1 "./boot/macro/initial.scm" . 230476)
           (apply.iloc+ (1 . 0) "./boot/macro/initial.scm" . 230455))
         (ret.cons "./boot/macro/initial.scm" . 230420))
       (ret.iloc 0 . 0))
     (push.iloc.1 . 0)
     (push.iloc.1 . 1)
     (push.iloc.1 . 2)
     (apply.iloc+ (0 . 0) "./boot/macro/initial.scm" . 228360))
   (push)
   (push.iloc.0 . 0)
   (apply.gloc.of
     annotate
     (annotate
       (letrec* ((|loop`422*|
                   (lambda (|lst`423*| |na`423*| |nd`423*|)
                     (if (pair? |lst`423*|)
                         (if (or (<= |na`423*| 0) (<= |nd`423*| 0))
                             (list '...)
                             (cons (|loop`422*| (car |lst`423*|) (- |na`423*| 1) |nd`423*|)
                                   (|loop`422*| (cdr |lst`423*|) |ncar`418*| (- |nd`423*| 1))))
                         |lst`423*|))))
         (|loop`422*| |form`418*| |ncar`418*| |ncdr`418*|))
       |form`418*|)))
 (set.gloc.of abbreviated-take-form)
 (ret.const.unspec))

;
((close
   (1 0 . formals->list)
   (iloc.0 . 0)
   (if.null?.ret.const)
   (iloc.0 . 0)
   (if.pair?
     (push.car.iloc (0 . 0) "./boot/macro/expand.scm" . 8210)
     (call
       (touch.gloc.of formals->list)
       (push.cdr.iloc (0 . 0) "./boot/macro/expand.scm" . 8235)
       (apply.gloc.of formals->list "./boot/macro/expand.scm" . 8220))
     (ret.cons "./boot/macro/expand.scm" . 8204))
   (push.iloc.0 . 0)
   (ret.subr.gloc.of list "./boot/macro/expand.scm" . 10252))
 (set.gloc.of formals->list)
 (ret.const.unspec))
((close
   (2 0 . collect-lambda-formals)
   (call
     (touch.gloc.of formals->list)
     (push.iloc.0 . 0)
     (apply.gloc.of formals->list "./boot/macro/expand.scm" . 14353))
   (push)
   (extend . 1)
   (call
     (call
       (touch.gloc.of every1)
       (push.gloc.of symbol?)
       (push.iloc.0 . 0)
       (apply.gloc.of every1 "./boot/macro/expand.scm" . 15371))
     (if.true.ret)
     (push.car.iloc (1 . 1) "./boot/macro/expand.scm" . 16413)
     (push.const . "malformed formals")
     (push.iloc.1 . 1)
     (push.iloc.1 . 0)
     (apply.gloc.of syntax-violation "./boot/macro/expand.scm" . 16395))
   (call
     (call
       (touch.gloc.of unique-id-list?)
       (push.iloc.0 . 0)
       (apply.gloc.of unique-id-list? "./boot/macro/expand.scm" . 17419))
     (if.true.ret)
     (push.car.iloc (1 . 1) "./boot/macro/expand.scm" . 18461)
     (push.const . "duplicate formals")
     (push.iloc.1 . 1)
     (push.iloc.1 . 0)
     (apply.gloc.of syntax-violation "./boot/macro/expand.scm" . 18443))
   (ret.iloc 0 . 0))
 (set.gloc.of collect-lambda-formals)
 (ret.const.unspec))
((close
   (2 0 . rename-lambda-formals)
   (iloc.0 . 0)
   (if.null?.ret.const)
   (iloc.0 . 0)
   (if.pair?
     (push.car.iloc (0 . 0) "./boot/macro/expand.scm" . 25629)
     (push.iloc.0 . 1)
     (push.subr.gloc.of assq 2 "./boot/macro/expand.scm" . 25623)
     (push.subr.gloc.of cdr 1 "./boot/macro/expand.scm" . 25618)
     (call
       (touch.gloc.of rename-lambda-formals)
       (push.cdr.iloc (0 . 0) "./boot/macro/expand.scm" . 26665)
       (push.iloc.0 . 1)
       (apply.gloc.of rename-lambda-formals "./boot/macro/expand.scm" . 26642))
     (ret.cons "./boot/macro/expand.scm" . 25612))
   (push.iloc.0 . 0)
   (push.iloc.0 . 1)
   (push.subr.gloc.of assq 2 "./boot/macro/expand.scm" . 28689)
   (ret.subr.gloc.of cdr "./boot/macro/expand.scm" . 28684))
 (set.gloc.of rename-lambda-formals)
 (ret.const.unspec))
((close
   (3 0 . annotate-bindings)
   (push.close
     (2 0)
     (iloc.0 . 1)
     (if.not.pair?.ret.const . #f)
     (call
       (touch.gloc.of denote-lambda?)
       (push.iloc.1 . 2)
       (push.car.iloc (0 . 1) "./boot/macro/expand.scm" . 34858)
       (apply.gloc.of denote-lambda? "./boot/macro/expand.scm" . 34838))
     (if.false.ret)
     (touch.gloc.of set-closure-comment!)
     (push.iloc.0 . 1)
     (call
       (touch.gloc.of original-id)
       (push.iloc.0 . 0)
       (apply.gloc.of original-id "./boot/macro/expand.scm" . 35889))
     (push)
     (apply.gloc.of set-closure-comment! "./boot/macro/expand.scm" . 35862))
   (push.iloc.0 . 0)
   (push.iloc.0 . 1)
   (apply.gloc.of for-each "./boot/macro/expand.scm" . 32773))
 (set.gloc.of annotate-bindings)
 (ret.const.unspec))
((close
   (2 0 . check-let*-bindings)
   (call
     (push.iloc.0 . 1)
     (subr.gloc.of list? 1 "./boot/macro/expand.scm" . 40969)
     (if.true.ret)
     (push.car.iloc (0 . 0) "./boot/macro/expand.scm" . 42011)
     (push.const . "malformed bindings")
     (push.iloc.0 . 0)
     (push.iloc.0 . 1)
     (apply.gloc.of syntax-violation "./boot/macro/expand.scm" . 41993))
   (push.close
     (1 0)
     (call
       (call
         (touch.gloc.of safe-length)
         (push.iloc.0 . 0)
         (apply.gloc.of safe-length "./boot/macro/expand.scm" . 44061))
       (push)
       (push.const . 2)
       (subr.gloc.of = 2 "./boot/macro/expand.scm" . 44058)
       (if.false.ret)
       (push.car.iloc (0 . 0) "./boot/macro/expand.scm" . 44095)
       (ret.subr.gloc.of symbol? "./boot/macro/expand.scm" . 44086))
     (if.true.ret)
     (push.car.iloc (1 . 0) "./boot/macro/expand.scm" . 45095)
     (push.const . "expected each binding consist of symbol and expression")
     (push.iloc.1 . 0)
     (push.iloc.0 . 0)
     (apply.gloc.of syntax-violation "./boot/macro/expand.scm" . 45077))
   (push.iloc.0 . 1)
   (apply.gloc.of for-each "./boot/macro/expand.scm" . 43013))
 (set.gloc.of check-let*-bindings)
 (ret.const.unspec))
((close
   (2 0 . check-let-bindings)
   (call
     (push.iloc.0 . 1)
     (subr.gloc.of list? 1 "./boot/macro/expand.scm" . 50185)
     (if.true.ret)
     (push.car.iloc (0 . 0) "./boot/macro/expand.scm" . 51227)
     (push.const . "malformed bindings")
     (push.iloc.0 . 0)
     (push.iloc.0 . 1)
     (apply.gloc.of syntax-violation "./boot/macro/expand.scm" . 51209))
   (call
     (touch.gloc.of unique-id-list?)
     (call
       (push.close
         (1 0)
         (call
           (call
             (touch.gloc.of safe-length)
             (push.iloc.0 . 0)
             (apply.gloc.of safe-length "./boot/macro/expand.scm" . 54301))
           (push)
           (push.const . 2)
           (subr.gloc.of = 2 "./boot/macro/expand.scm" . 54298)
           (if.false.ret)
           (car.iloc (0 . 0) "./boot/macro/expand.scm" . 54335)
           (if.not.symbol?.ret.const . #f)
           (push.iloc.0 . 0)
           (ret.subr.gloc.of car "./boot/macro/expand.scm" . 54350))
         (if.true.ret)
         (push.car.iloc (1 . 0) "./boot/macro/expand.scm" . 55335)
         (push.const . "expected each binding consist of symbol and expression")
         (push.iloc.1 . 0)
         (push.iloc.0 . 0)
         (apply.gloc.of syntax-violation "./boot/macro/expand.scm" . 55317))
       (push.iloc.0 . 1)
       (apply.gloc.of map "./boot/macro/expand.scm" . 53258))
     (push)
     (apply.gloc.of unique-id-list? "./boot/macro/expand.scm" . 52233))
   (if.true.ret)
   (push.car.iloc (0 . 0) "./boot/macro/expand.scm" . 57371)
   (push.const . "duplicate bindings")
   (push.iloc.0 . 0)
   (apply.gloc.of syntax-violation "./boot/macro/expand.scm" . 57353))
 (set.gloc.of check-let-bindings)
 (ret.const.unspec))
((close
   (1 0 . loop)
   (iloc.0 . 0)
   (if.symbol? (ret.iloc 0 . 0))
   (call
     (iloc.0 . 0)
     (if.not.pair?.ret.const . #f)
     (push.car.iloc (0 . 0) "./boot/macro/expand.scm" . 79906)
     (push.const . quote)
     (push.subr.gloc.of eq? 2 "./boot/macro/expand.scm" . 79901)
     (ret.subr.gloc.of not "./boot/macro/expand.scm" . 79896))
   (if.true
     (push.gloc.of |loop`460*|)
     (push.iloc.0 . 0)
     (apply.gloc.of map "./boot/macro/expand.scm" . 80915))
   (ret.const))
 (set.gloc.of |loop`460*|)
 (close
   (1 0 . collect-ids)
   (touch.gloc.of |filter-unique-ids`447*|)
   (call
     (touch.gloc.of |loop`460*|)
     (push.iloc.0 . 0)
     (apply.gloc.of |loop`460*| "./boot/macro/expand.scm" . 77836))
   (push)
   (apply.gloc.of |filter-unique-ids`447*| (|filter-unique-ids`447*| (|loop`460*| |lst`456*|))))
 (set.gloc.of |collect-ids`447*|)
 (close
   (2 0 . loop)
   (iloc.0 . 0)
   (if.pair?
     (touch.gloc.of |loop`452*|)
     (push.cdr.iloc (0 . 0) "./boot/macro/expand.scm" . 66584)
     (call
       (touch.gloc.of |loop`452*|)
       (push.car.iloc (0 . 0) "./boot/macro/expand.scm" . 67614)
       (push.iloc.0 . 1)
       (apply.gloc.of |loop`452*| "./boot/macro/expand.scm" . 67608))
     (push)
     (apply.gloc.of |loop`452*| "./boot/macro/expand.scm" . 66578))
   (iloc.0 . 0)
   (if.symbol?
     (push.iloc.0 . 0)
     (push.iloc.0 . 1)
     (subr.gloc.of memq 2 "./boot/macro/expand.scm" . 69657)
     (if.true (ret.iloc 0 . 1))
     (push.iloc.0 . 0)
     (iloc.0 . 1)
     (ret.cons "./boot/macro/expand.scm" . 70686))
   (ret.iloc 0 . 1))
 (set.gloc.of |loop`452*|)
 (close
   (1 0 . filter-unique-ids)
   (touch.gloc.of |loop`452*|)
   (push.iloc.0 . 0)
   (push.const)
   (apply.gloc.of |loop`452*| "./boot/macro/expand.scm" . 65547))
 (set.gloc.of |filter-unique-ids`447*|)
 (close
   (2 0 . check-internal-def-contract-violation)
   (call
     (touch.gloc.of |collect-ids`447*|)
     (push.iloc.0 . 1)
     (apply.gloc.of |collect-ids`447*| "./boot/macro/expand.scm" . 83984))
   (push)
   (extend . 1)
   (touch.gloc.of any1)
   (push.close
     (1 0)
     (push.iloc.0 . 0)
     (push.iloc.1 . 0)
     (subr.gloc.of memq 2 "./boot/macro/expand.scm" . 85023)
     (if.false.ret)
     (ret.iloc 0 . 0))
   (push.iloc.1 . 0)
   (apply.gloc.of any1 "./boot/macro/expand.scm" . 84999))
 (set.gloc.of check-internal-def-contract-violation)
 (ret.const.unspec))
((close
   (1 0 . collect-ids)
   (touch.gloc.of |filter-unique-ids`469*|)
   (call
     (touch.gloc.of |loop`482*|)
     (push.iloc.0 . 0)
     (apply.gloc.of |loop`482*| "./boot/macro/expand.scm" . 105484))
   (push)
   (apply.gloc.of |filter-unique-ids`469*| (|filter-unique-ids`469*| (|loop`482*| |lst`478*|))))
 (set.gloc.of |collect-ids`469*|)
 (close
   (2 0 . loop)
   (iloc.0 . 0)
   (if.pair?
     (touch.gloc.of |loop`474*|)
     (push.cdr.iloc (0 . 0) "./boot/macro/expand.scm" . 94232)
     (call
       (touch.gloc.of |loop`474*|)
       (push.car.iloc (0 . 0) "./boot/macro/expand.scm" . 95262)
       (push.iloc.0 . 1)
       (apply.gloc.of |loop`474*| "./boot/macro/expand.scm" . 95256))
     (push)
     (apply.gloc.of |loop`474*| "./boot/macro/expand.scm" . 94226))
   (iloc.0 . 0)
   (if.symbol?
     (push.iloc.0 . 0)
     (push.iloc.0 . 1)
     (subr.gloc.of memq 2 "./boot/macro/expand.scm" . 97305)
     (if.true (ret.iloc 0 . 1))
     (push.iloc.0 . 0)
     (iloc.0 . 1)
     (ret.cons "./boot/macro/expand.scm" . 98334))
   (ret.iloc 0 . 1))
 (set.gloc.of |loop`474*|)
 (close
   (1 0 . filter-unique-ids)
   (touch.gloc.of |loop`474*|)
   (push.iloc.0 . 0)
   (push.const)
   (apply.gloc.of |loop`474*| "./boot/macro/expand.scm" . 93195))
 (set.gloc.of |filter-unique-ids`469*|)
 (close
   (1 0 . loop)
   (iloc.0 . 0)
   (if.symbol? (ret.iloc 0 . 0))
   (call
     (iloc.0 . 0)
     (if.not.pair?.ret.const . #f)
     (push.car.iloc (0 . 0) "./boot/macro/expand.scm" . 107555)
     (push.const lambda quote)
     (push.subr.gloc.of memq 2 "./boot/macro/expand.scm" . 107549)
     (ret.subr.gloc.of not "./boot/macro/expand.scm" . 107544))
   (if.true
     (push.gloc.of |loop`482*|)
     (push.iloc.0 . 0)
     (apply.gloc.of map "./boot/macro/expand.scm" . 108563))
   (ret.const))
 (set.gloc.of |loop`482*|)
 (close
   (2 0 . check-rec-contract-violation)
   (call
     (touch.gloc.of |collect-ids`469*|)
     (push.iloc.0 . 1)
     (apply.gloc.of |collect-ids`469*| "./boot/macro/expand.scm" . 111632))
   (push)
   (extend . 1)
   (extend.enclose+
     (2 0 . loop)
     (iloc.0 . 0)
     (if.pair?
       (push.car.iloc (0 . 0) "./boot/macro/expand.scm" . 114711)
       (push.iloc 2 . 0)
       (subr.gloc.of memq 2 "./boot/macro/expand.scm" . 114705)
       (if.true
         (push.cdr.iloc (0 . 0) "./boot/macro/expand.scm" . 115735)
         (push.car.iloc (0 . 0) "./boot/macro/expand.scm" . 115752)
         (iloc.0 . 1)
         (push.cons)
         (apply.iloc+ (1 . 0) "./boot/macro/expand.scm" . 115729))
       (push.cdr.iloc (0 . 0) "./boot/macro/expand.scm" . 116759)
       (push.iloc.0 . 1)
       (apply.iloc+ (1 . 0) "./boot/macro/expand.scm" . 116753))
     (iloc.0 . 1)
     (if.not.pair?.ret.const . #f)
     (push.iloc.0 . 1)
     (ret.subr.gloc.of reverse "./boot/macro/expand.scm" . 117790))
   (push.iloc 2 . 0)
   (push.const)
   (apply.iloc+ (0 . 0) "./boot/macro/expand.scm" . 113673))
 (set.gloc.of check-rec-contract-violation)
 (ret.const.unspec))
((close
   (3 0 . loop)
   (iloc.0 . 0)
   (if.pair?
     (call
       (touch.gloc.of check-rec-contract-violation)
       (push.iloc.0 . 0)
       (push.car.iloc (0 . 1) "./boot/macro/expand.scm" . 123954)
       (apply.gloc.of check-rec-contract-violation "./boot/macro/expand.scm" . 123919))
     (if.true
       (touch.gloc.of |loop`498*|)
       (push.cdr.iloc (0 . 0) "./boot/macro/expand.scm" . 124949)
       (push.cdr.iloc (0 . 1) "./boot/macro/expand.scm" . 124960)
       (push.car.iloc (0 . 0) "./boot/macro/expand.scm" . 124978)
       (iloc.0 . 2)
       (push.cons)
       (apply.gloc.of |loop`498*| "./boot/macro/expand.scm" . 124943))
     (touch.gloc.of |loop`498*|)
     (push.cdr.iloc (0 . 0) "./boot/macro/expand.scm" . 125973)
     (push.cdr.iloc (0 . 1) "./boot/macro/expand.scm" . 125984)
     (push.iloc.0 . 2)
     (apply.gloc.of |loop`498*| "./boot/macro/expand.scm" . 125967))
   (iloc.0 . 2)
   (if.not.pair?.ret.const . #f)
   (push.iloc.0 . 2)
   (ret.subr.gloc.of reverse "./boot/macro/expand.scm" . 127004))
 (set.gloc.of |loop`498*|)
 (close
   (2 0 . check-rec*-contract-violation)
   (touch.gloc.of |loop`498*|)
   (push.iloc.0 . 0)
   (push.iloc.0 . 1)
   (push.const)
   (apply.gloc.of |loop`498*| "./boot/macro/expand.scm" . 122887))
 (set.gloc.of check-rec*-contract-violation)
 (ret.const.unspec))
((close
   (2 0)
   (push.iloc.0 . 0)
   (push.iloc.0 . 1)
   (ret.subr.gloc.of append "./boot/macro/expand.scm" . 138247))
 (set.gloc.of |.L228|)
 (close
   (2 0 . rewrite-letrec*-bindings)
   (push.close
     (0 0)
     (push.close
       (1 0)
       (cadr.iloc (0 . 0) "./boot/macro/expand.scm" . 133163)
       (if.pair?
         (call
           (touch.gloc.of denote-quote?)
           (push.iloc 2 . 1)
           (push.iloc.0 . 0)
           (push.subr.gloc.of caadr 1 "./boot/macro/expand.scm" . 134203)
           (apply.gloc.of denote-quote? "./boot/macro/expand.scm" . 134184))
         (if.true.ret)
         (touch.gloc.of denote-lambda?)
         (push.iloc 2 . 1)
         (push.iloc.0 . 0)
         (push.subr.gloc.of caadr 1 "./boot/macro/expand.scm" . 135228)
         (apply.gloc.of denote-lambda? "./boot/macro/expand.scm" . 135208))
       (push.cadr.iloc (0 . 0) "./boot/macro/expand.scm" . 136242)
       (push.subr.gloc.of symbol? 1 "./boot/macro/expand.scm" . 136233)
       (ret.subr.gloc.of not "./boot/macro/expand.scm" . 136228))
     (push.iloc.1 . 0)
     (apply.gloc.of partition "./boot/macro/expand.scm" . 132115))
   (push.gloc.of |.L228|)
   (apply.gloc.of |.call-with-values| "./boot/macro/expand.scm" . 132115))
 (set.gloc.of rewrite-letrec*-bindings)
 (ret.const.unspec))
((close
   (2 0 . flatten-begin)
   (extend.enclose+
     (1 0 . concatenate?)
     (car.iloc (0 . 0) "./boot/macro/expand.scm" . 145429)
     (if.not.pair?.ret.const . #f)
     (touch.gloc.of denote-begin?)
     (push.iloc 2 . 1)
     (push.iloc.0 . 0)
     (push.subr.gloc.of caar 1 "./boot/macro/expand.scm" . 146465)
     (apply.gloc.of denote-begin? "./boot/macro/expand.scm" . 146446))
   (touch.gloc.of annotate)
   (call
     (extend.enclose+
       (2 0 . loop)
       (iloc.0 . 0)
       (if.null? (ret.iloc 0 . 1))
       (call (push.iloc.0 . 0) (apply.iloc+ (2 . 0) "./boot/macro/expand.scm" . 151567))
       (if.true
         (push.iloc.0 . 0)
         (push.subr.gloc.of cdar 1 "./boot/macro/expand.scm" . 152597)
         (call
           (push.cdr.iloc (0 . 0) "./boot/macro/expand.scm" . 153627)
           (push.iloc.0 . 1)
           (apply.iloc+ (1 . 0) "./boot/macro/expand.scm" . 153621))
         (push)
         (apply.iloc+ (1 . 0) "./boot/macro/expand.scm" . 152591))
       (iloc.0 . 1)
       (if.null? (ret.iloc 0 . 0))
       (push.iloc.0 . 0)
       (push.iloc.0 . 1)
       (ret.subr.gloc.of append "./boot/macro/expand.scm" . 157718))
     (push.iloc 2 . 0)
     (push.const)
     (apply.iloc+ (0 . 0) "./boot/macro/expand.scm" . 150536))
   (push)
   (push.iloc.1 . 0)
   (apply.gloc.of
     annotate
     (annotate
       (letrec* ((|loop`514*|
                   (lambda (|lst`515*| |ans`515*|)
                     (if (null? |lst`515*|)
                         |ans`515*|
                         (if (|concatenate?`509*| |lst`515*|)
                             (|loop`514*|
                               (cdar |lst`515*|)
                               (|loop`514*| (cdr |lst`515*|) |ans`515*|))
                             (if (null? |ans`515*|) |lst`515*| (append |lst`515*| |ans`515*|)))))))
         (|loop`514*| |form`508*| '()))
       |form`508*|)))
 (set.gloc.of flatten-begin)
 (ret.const.unspec))
((close
   (2 0 . flatten-top-level-begin)
   (extend.enclose+
     (1 0 . concatenate?)
     (car.iloc (0 . 0) "./boot/macro/expand.scm" . 165909)
     (if.not.pair?.ret.const . #f)
     (touch.gloc.of denote-begin?)
     (push.iloc 2 . 1)
     (push.iloc.0 . 0)
     (push.subr.gloc.of caar 1 "./boot/macro/expand.scm" . 166945)
     (apply.gloc.of denote-begin? "./boot/macro/expand.scm" . 166926))
   (touch.gloc.of annotate)
   (call
     (extend.enclose+
       (2 0 . loop)
       (iloc.0 . 0)
       (if.null? (ret.iloc 0 . 1))
       (call (push.iloc.0 . 0) (apply.iloc+ (2 . 0) "./boot/macro/expand.scm" . 172047))
       (if.true
         (push.iloc.0 . 0)
         (push.subr.gloc.of cdar 1 "./boot/macro/expand.scm" . 173077)
         (call
           (push.cdr.iloc (0 . 0) "./boot/macro/expand.scm" . 174107)
           (push.iloc.0 . 1)
           (apply.iloc+ (1 . 0) "./boot/macro/expand.scm" . 174101))
         (push)
         (apply.iloc+ (1 . 0) "./boot/macro/expand.scm" . 173071))
       (push.car.iloc (0 . 0) "./boot/macro/expand.scm" . 176149)
       (call
         (push.cdr.iloc (0 . 0) "./boot/macro/expand.scm" . 177179)
         (push.iloc.0 . 1)
         (apply.iloc+ (1 . 0) "./boot/macro/expand.scm" . 177173))
       (ret.cons "./boot/macro/expand.scm" . 176143))
     (push.iloc 2 . 0)
     (push.const)
     (apply.iloc+ (0 . 0) "./boot/macro/expand.scm" . 171016))
   (push)
   (push.iloc.1 . 0)
   (apply.gloc.of
     annotate
     (annotate
       (letrec* ((|loop`524*|
                   (lambda (|lst`525*| |ans`525*|)
                     (if (null? |lst`525*|)
                         |ans`525*|
                         (if (|concatenate?`519*| |lst`525*|)
                             (|loop`524*|
                               (cdar |lst`525*|)
                               (|loop`524*| (cdr |lst`525*|) |ans`525*|))
                             (cons (car |lst`525*|) (|loop`524*| (cdr |lst`525*|) |ans`525*|)))))))
         (|loop`524*| |form`518*| '()))
       |form`518*|)))
 (set.gloc.of flatten-top-level-begin)
 (ret.const.unspec))
((close
   (3 0 . compile-macro)
   (extend.unbound . 2)
   (push.close+
     (2 0 . compile-transformer)
     (call
       (touch.gloc.of expand-form)
       (push.iloc.0 . 0)
       (call
         (touch.gloc.of extend-env)
         (push.const |.vars| . |.vars|)
         (call
           (subr.gloc.of make-core-hashtable 0)
           (push)
           (call
             (touch.gloc.of make-out-of-context)
             (push.const . #f)
             (apply.gloc.of make-out-of-context "./boot/macro/expand.scm" . 186423))
           (push)
           (extend . 2)
           (call
             (push.close
               (1 0)
               (car.iloc (0 . 0) "./boot/macro/expand.scm" . 188460)
               (if.not.symbol?.ret.const . #f)
               (call
                 (touch.gloc.of renamed-id?)
                 (push.cdr.iloc (0 . 0) "./boot/macro/expand.scm" . 189488)
                 (apply.gloc.of renamed-id? "./boot/macro/expand.scm" . 189475))
               (if.false.ret)
               (push.iloc.1 . 0)
               (push.car.iloc (0 . 0) "./boot/macro/expand.scm" . 190526)
               (push.const . #f)
               (subr.gloc.of core-hashtable-ref 3 "./boot/macro/expand.scm" . 190503)
               (if.true.ret)
               (push.iloc.1 . 0)
               (push.car.iloc (0 . 0) "./boot/macro/expand.scm" . 191551)
               (push.iloc.1 . 1)
               (ret.subr.gloc.of core-hashtable-set! "./boot/macro/expand.scm" . 191527))
             (push.iloc.1 . 1)
             (apply.gloc.of for-each "./boot/macro/expand.scm" . 187410))
           (push.iloc.0 . 0)
           (ret.subr.gloc.of core-hashtable->alist "./boot/macro/expand.scm" . 193554))
         (push.cons)
         (push.iloc.0 . 1)
         (apply.gloc.of extend-env "./boot/macro/expand.scm" . 194608))
       (push)
       (apply.gloc.of expand-form "./boot/macro/expand.scm" . 194583))
     (push)
     (extend . 1)
     (call
       (touch.gloc.of interpret-coreform)
       (push.const . |.transformer-thunk|)
       (push.iloc.0 . 0)
       (push.subr.gloc.of |.list| 2 "./boot/macro/expand.scm" . 195609)
       (apply.gloc.of interpret-coreform "./boot/macro/expand.scm" . 195609))
     (push)
     (extend . 1)
     (push.iloc.0 . 0)
     (subr.gloc.of procedure? 1 "./boot/macro/expand.scm" . 196630)
     (if.true
       (push.iloc.0 . 0)
       (push.iloc.1 . 0)
       (ret.subr.gloc.of values "./boot/macro/expand.scm" . 196648))
     (call
       (touch.gloc.of variable-transformer-token?)
       (push.iloc.0 . 0)
       (apply.gloc.of variable-transformer-token? "./boot/macro/expand.scm" . 197654))
     (if.true
       (call
         (touch.gloc.of make-macro-variable)
         (push.iloc.0 . 0)
         (push.const . 1)
         (push.subr.gloc.of tuple-ref 2 "./boot/macro/expand.scm" . 198707)
         (push.iloc 2 . 1)
         (apply.gloc.of make-macro-variable "./boot/macro/expand.scm" . 198686))
       (push)
       (push.iloc.1 . 0)
       (ret.subr.gloc.of values "./boot/macro/expand.scm" . 198678))
     (push.car.iloc (4 . 0) "./boot/macro/expand.scm" . 200744)
     (push.const . "invalid transformer expression")
     (push.iloc 4 . 0)
     (push.iloc 2 . 0)
     (apply.gloc.of syntax-violation "./boot/macro/expand.scm" . 200726))
   (push.close
     (1 0 . syntax-rules?)
     (touch.gloc.of denote-syntax-rules?)
     (push.iloc 2 . 2)
     (push.iloc.0 . 0)
     (apply.gloc.of denote-syntax-rules? "./boot/macro/expand.scm" . 204809))
   (enclose . 2)
   (call
     (iloc.1 . 1)
     (if.not.pair?.ret.const . #f)
     (cdr.iloc (1 . 1) "./boot/macro/expand.scm" . 206853)
     (if.not.null?.ret.const . #f)
     (push.car.iloc (1 . 1) "./boot/macro/expand.scm" . 206853)
     (apply.iloc (0 . 1) "./boot/macro/expand.scm" . 206853))
   (if.true
     (push.const . syntax-rules)
     (push.const . "expected literals and rules")
     (push.iloc.1 . 1)
     (apply.gloc.of syntax-violation "./boot/macro/expand.scm" . 206853))
   (call
     (iloc.1 . 1)
     (if.not.pair?.ret.const . #f)
     (push.cdr.iloc (1 . 1) "./boot/macro/expand.scm" . 206853)
     (subr.gloc.of list? 1 "./boot/macro/expand.scm" . 206853)
     (if.false.ret)
     (push.car.iloc (1 . 1) "./boot/macro/expand.scm" . 206853)
     (apply.iloc (0 . 1) "./boot/macro/expand.scm" . 206853))
   (if.true
     (call
       (cdr.iloc (1 . 1) "./boot/macro/expand.scm" . 206853)
       (if.not.pair?.ret.const . #f)
       (push.cdr.iloc (1 . 1) "./boot/macro/expand.scm" . 206853)
       (subr.gloc.of car 1 "./boot/macro/expand.scm" . 206853)
       (if.not.symbol?.ret.const . #f)
       (push.cdr.iloc (1 . 1) "./boot/macro/expand.scm" . 206853)
       (ret.subr.gloc.of car "./boot/macro/expand.scm" . 206853))
     (push)
     (extend . 1)
     (call
       (iloc.0 . 0)
       (if.true
         (push.cdr.iloc (2 . 1) "./boot/macro/expand.scm" . 206853)
         (ret.subr.gloc.of cadr "./boot/macro/expand.scm" . 206853))
       (push.cdr.iloc (2 . 1) "./boot/macro/expand.scm" . 206853)
       (ret.subr.gloc.of car "./boot/macro/expand.scm" . 206853))
     (push)
     (extend . 1)
     (call
       (iloc.1 . 0)
       (if.true
         (push.cdr.iloc (3 . 1) "./boot/macro/expand.scm" . 206853)
         (ret.subr.gloc.of cddr "./boot/macro/expand.scm" . 206853))
       (push.cdr.iloc (3 . 1) "./boot/macro/expand.scm" . 206853)
       (ret.subr.gloc.of cdr "./boot/macro/expand.scm" . 206853))
     (push)
     (extend . 1)
     (call
       (call
         (push.iloc.1 . 0)
         (subr.gloc.of list? 1 "./boot/macro/expand.scm" . 206853)
         (if.false.ret)
         (touch.gloc.of every1)
         (push.gloc.of symbol?)
         (push.iloc.1 . 0)
         (apply.gloc.of every1 "./boot/macro/expand.scm" . 206853))
       (if.true.ret)
       (push.const . syntax-rules)
       (push.const . "invalid literals")
       (push.iloc 4 . 1)
       (push.iloc.1 . 0)
       (apply.gloc.of syntax-violation "./boot/macro/expand.scm" . 206853))
     (call
       (call
         (touch.gloc.of unique-id-list?)
         (push.iloc.1 . 0)
         (apply.gloc.of unique-id-list? "./boot/macro/expand.scm" . 206853))
       (if.true.ret)
       (push.const . syntax-rules)
       (push.const . "duplicate literals")
       (push.iloc 4 . 1)
       (push.iloc.1 . 0)
       (apply.gloc.of syntax-violation "./boot/macro/expand.scm" . 206853))
     (call
       (call
         (touch.gloc.of ellipsis/underscore-in-literal)
         (apply.gloc.of ellipsis/underscore-in-literal "./boot/macro/expand.scm" . 206853))
       (if.true.ret)
       (push.const . _)
       (push.iloc.1 . 0)
       (subr.gloc.of memq 2 "./boot/macro/expand.scm" . 206853)
       (if.false.ret)
       (push.const . syntax-rules)
       (push.const . "_ in literals")
       (push.iloc 4 . 1)
       (push.iloc.1 . 0)
       (apply.gloc.of syntax-violation "./boot/macro/expand.scm" . 206853))
     (call
       (call
         (touch.gloc.of ellipsis/underscore-in-literal)
         (apply.gloc.of ellipsis/underscore-in-literal "./boot/macro/expand.scm" . 206853))
       (if.true.ret)
       (iloc 2 . 0)
       (if.true
         (push.iloc 2 . 0)
         (push.iloc.1 . 0)
         (subr.gloc.of memq 2 "./boot/macro/expand.scm" . 206853)
         (if.false.ret)
         (push.const . syntax-rules)
         (push.const . "ellipsis in literals")
         (push.iloc 4 . 1)
         (push.iloc.1 . 0)
         (apply.gloc.of syntax-violation "./boot/macro/expand.scm" . 206853))
       (push.const . ...)
       (push.iloc.1 . 0)
       (subr.gloc.of memq 2 "./boot/macro/expand.scm" . 206853)
       (if.false.ret)
       (push.const . syntax-rules)
       (push.const . "ellipsis in literals")
       (push.iloc 4 . 1)
       (push.iloc.1 . 0)
       (apply.gloc.of syntax-violation "./boot/macro/expand.scm" . 206853))
     (call
       (push.close
         (1 0)
         (call
           (iloc.0 . 0)
           (if.not.pair?.ret.const . #f)
           (car.iloc (0 . 0) "./boot/macro/expand.scm" . 206853)
           (if.not.pair?.ret.const . #f)
           (cdr.iloc (0 . 0) "./boot/macro/expand.scm" . 206853)
           (if.not.pair?.ret.const . #f)
           (cddr.iloc (0 . 0) "./boot/macro/expand.scm" . 206853)
           (ret.null? "./boot/macro/expand.scm" . 206853))
         (push)
         (extend . 1)
         (call
           (iloc.0 . 0)
           (if.false.ret)
           (push.iloc.1 . 0)
           (push.subr.gloc.of caar 1 "./boot/macro/expand.scm" . 206853)
           (ret.subr.gloc.of symbol? "./boot/macro/expand.scm" . 206853))
         (if.true.ret.const . #t)
         (iloc.0 . 0)
         (if.true
           (push.const . syntax-rules)
           (push.const . "expected identifer for first subform of pattern")
           (push.iloc 6 . 1)
           (push.iloc.1 . 0)
           (apply.gloc.of syntax-violation "./boot/macro/expand.scm" . 206853))
         (call
           (iloc.1 . 0)
           (if.not.pair?.ret.const . #f)
           (cdr.iloc (1 . 0) "./boot/macro/expand.scm" . 206853)
           (if.not.pair?.ret.const . #f)
           (cddr.iloc (1 . 0) "./boot/macro/expand.scm" . 206853)
           (ret.null? "./boot/macro/expand.scm" . 206853))
         (if.true
           (push.const . syntax-rules)
           (push.const . "expected list for pattern")
           (push.iloc 6 . 1)
           (push.iloc.1 . 0)
           (apply.gloc.of syntax-violation "./boot/macro/expand.scm" . 206853))
         (push.const . syntax-rules)
         (push.const . "expected (pattern template) for each rule")
         (push.iloc 6 . 1)
         (push.iloc.1 . 0)
         (apply.gloc.of syntax-violation "./boot/macro/expand.scm" . 206853))
       (push.iloc.0 . 0)
       (apply.gloc.of
         for-each
         (for-each (lambda (|rule`558*|)
                     (let ((|.L239`560`563*|
                             (and (pair? |rule`558*|)
                                  (pair? (car |rule`558*|))
                                  (pair? (cdr |rule`558*|))
                                  (null? (cddr |rule`558*|)))))
                       (if (and |.L239`560`563*| (symbol? (caar |rule`558*|)))
                           #t
                           (if |.L239`560`563*|
                               (syntax-violation
                                 'syntax-rules
                                 "expected identifer for first subform of pattern"
                                 |transformer`528*|
                                 |rule`558*|)
                               (if (and (pair? |rule`558*|)
                                        (pair? (cdr |rule`558*|))
                                        (null? (cddr |rule`558*|)))
                                   (syntax-violation
                                     'syntax-rules
                                     "expected list for pattern"
                                     |transformer`528*|
                                     |rule`558*|)
                                   (syntax-violation
                                     'syntax-rules
                                     "expected (pattern template) for each rule"
                                     |transformer`528*|
                                     |rule`558*|))))))
                   |rules`555*|)))
     (touch.gloc.of compile-syntax-rules)
     (push.iloc 4 . 1)
     (push.iloc 2 . 0)
     (push.iloc.1 . 0)
     (push.iloc.0 . 0)
     (push.iloc 4 . 2)
     (apply.gloc.of compile-syntax-rules "./boot/macro/expand.scm" . 206853))
   (push.iloc.1 . 1)
   (push.iloc.1 . 2)
   (apply.iloc+ (0 . 0) "./boot/macro/expand.scm" . 206853))
 (set.gloc.of compile-macro)
 (ret.const.unspec))
((close
   (2 0)
   (push.iloc.0 . 0)
   (call
     (touch.gloc.of generate-local-macro-symbol)
     (push.iloc.0 . 1)
     (apply.gloc.of generate-local-macro-symbol "./boot/macro/expand.scm" . 248887))
   (ret.cons "./boot/macro/expand.scm" . 248875))
 (set.gloc.of |.L243|)
 (close
   (3 0 . expand-let-syntax-bindings)
   (call
     (push.gloc.of car)
     (push.iloc.0 . 1)
     (apply.gloc.of map "./boot/macro/expand.scm" . 240657))
   (push)
   (extend . 1)
   (touch.gloc.of extend-env)
   (call
     (call
       (push.close
         (1 0)
         (push.close
           (0 0)
           (touch.gloc.of compile-macro)
           (push.iloc 3 . 0)
           (push.iloc.1 . 0)
           (push.iloc 3 . 2)
           (apply.gloc.of compile-macro "./boot/macro/expand.scm" . 244790))
         (push.close
           (1 1)
           (call
             (touch.gloc.of macro-variable?)
             (push.iloc.0 . 0)
             (apply.gloc.of macro-variable? "./boot/macro/expand.scm" . 245798))
           (if.true (ret.iloc 0 . 0))
           (touch.gloc.of make-macro)
           (push.iloc.0 . 0)
           (push.iloc 3 . 2)
           (apply.gloc.of make-macro "./boot/macro/expand.scm" . 246827))
         (apply.gloc.of
           |.call-with-values|
           (|.call-with-values|
             (lambda () (compile-macro |form`571*| |spec`575*| |env`571*|))
             (lambda (|code`577*| . |_`577*|)
               (if (macro-variable? |code`577*|)
                   |code`577*|
                   (make-macro |code`577*| |env`571*|))))))
       (call
         (push.gloc.of cadr)
         (push.iloc.1 . 1)
         (apply.gloc.of map "./boot/macro/expand.scm" . 241682))
       (push)
       (apply.gloc.of map "./boot/macro/expand.scm" . 243739))
     (push)
     (extend . 1)
     (call
       (push.gloc.of |.L243|)
       (push.iloc.0 . 0)
       (push.iloc.1 . 0)
       (apply.gloc.of map "./boot/macro/expand.scm" . 248850))
     (push)
     (call
       (push.gloc.of cons)
       (push.iloc.1 . 0)
       (push.iloc.0 . 0)
       (apply.gloc.of map "./boot/macro/expand.scm" . 249874))
     (push)
     (ret.subr.gloc.of append "./boot/macro/expand.scm" . 248842))
   (push)
   (push.iloc.1 . 2)
   (apply.gloc.of extend-env "./boot/macro/expand.scm" . 243720))
 (set.gloc.of expand-let-syntax-bindings)
 (ret.const.unspec))
((close
   (2 0)
   (push.iloc.0 . 0)
   (call
     (touch.gloc.of generate-local-macro-symbol)
     (push.iloc.0 . 1)
     (apply.gloc.of generate-local-macro-symbol "./boot/macro/expand.scm" . 264274))
   (ret.cons "./boot/macro/expand.scm" . 264254))
 (set.gloc.of |.L247|)
 (close
   (3 0 . expand-letrec-syntax-bindings)
   (extend.enclose
     (1 0 . undefined-macro)
     (push.car.iloc (2 . 0) "./boot/macro/expand.scm" . 258075)
     (push.const . "attempt to reference uninitialized syntactic keyword")
     (push.iloc 2 . 0)
     (push.iloc.0 . 0)
     (apply.gloc.of syntax-violation "./boot/macro/expand.scm" . 258057))
   (call
     (push.gloc.of car)
     (push.iloc.1 . 1)
     (apply.gloc.of map "./boot/macro/expand.scm" . 260113))
   (push)
   (call
     (push.gloc.of cadr)
     (push.iloc.1 . 1)
     (apply.gloc.of map "./boot/macro/expand.scm" . 261138))
   (push)
   (extend . 2)
   (call
     (push.close
       (1 0)
       (touch.gloc.of make-macro)
       (push.iloc 2 . 0)
       (push.const)
       (apply.gloc.of make-macro "./boot/macro/expand.scm" . 262193))
     (push.iloc.0 . 1)
     (apply.gloc.of map "./boot/macro/expand.scm" . 262173))
   (push)
   (extend . 1)
   (call
     (touch.gloc.of extend-env)
     (call
       (push.gloc.of |.L247|)
       (push.iloc.0 . 0)
       (push.iloc.1 . 0)
       (apply.gloc.of map "./boot/macro/expand.scm" . 264221))
     (push)
     (call
       (push.gloc.of cons)
       (push.iloc.1 . 0)
       (push.iloc.0 . 0)
       (apply.gloc.of map "./boot/macro/expand.scm" . 265245))
     (push)
     (push.subr.gloc.of append 2 "./boot/macro/expand.scm" . 264213)
     (push.iloc 3 . 2)
     (apply.gloc.of extend-env "./boot/macro/expand.scm" . 263188))
   (push)
   (extend . 1)
   (call
     (push.close
       (2 0)
       (call
         (touch.gloc.of env-lookup)
         (push.iloc.1 . 0)
         (push.iloc.0 . 0)
         (apply.gloc.of env-lookup "./boot/macro/expand.scm" . 272437))
       (push)
       (push.cdr.iloc (0 . 1) "./boot/macro/expand.scm" . 272458)
       (ret.subr.gloc.of set-cdr! "./boot/macro/expand.scm" . 272427))
     (push.iloc 2 . 0)
     (call
       (push.close
         (1 0)
         (push.close
           (0 0)
           (touch.gloc.of compile-macro)
           (push.iloc 6 . 0)
           (push.iloc.1 . 0)
           (push.iloc 2 . 0)
           (apply.gloc.of compile-macro "./boot/macro/expand.scm" . 268345))
         (push.close
           (1 1)
           (call
             (touch.gloc.of macro-variable?)
             (push.iloc.0 . 0)
             (apply.gloc.of macro-variable? "./boot/macro/expand.scm" . 269353))
           (if.true (ret.iloc 0 . 0))
           (touch.gloc.of make-macro)
           (push.iloc.0 . 0)
           (push.iloc 2 . 0)
           (apply.gloc.of make-macro "./boot/macro/expand.scm" . 270382))
         (apply.gloc.of
           |.call-with-values|
           (|.call-with-values|
             (lambda () (compile-macro |form`583*| |spec`597*| |env`595*|))
             (lambda (|code`599*| . |_`599*|)
               (if (macro-variable? |code`599*|)
                   |code`599*|
                   (make-macro |code`599*| |env`595*|))))))
       (push.iloc 2 . 1)
       (apply.gloc.of
         map
         (map (lambda (|spec`597*|)
                (|.call-with-values|
                  (lambda () (compile-macro |form`583*| |spec`597*| |env`595*|))
                  (lambda (|code`599*| . |_`599*|)
                    (if (macro-variable? |code`599*|)
                        |code`599*|
                        (make-macro |code`599*| |env`595*|)))))
              |specs`587*|)))
     (push)
     (apply.gloc.of for-each "./boot/macro/expand.scm" . 272397))
   (ret.iloc 0 . 0))
 (set.gloc.of expand-letrec-syntax-bindings)
 (ret.const.unspec))
((close
   (3 0 . expand-macro-use)
   (call
     (touch.gloc.of fresh-rename-count)
     (apply.gloc.of fresh-rename-count "./boot/macro/expand.scm" . 278533))
   (call
     (touch.gloc.of current-macro-expression)
     (push.iloc.0 . 0)
     (apply.gloc.of current-macro-expression "./boot/macro/expand.scm" . 279557))
   (push.const . #f)
   (push.const . #f)
   (push.cddr.iloc (0 . 2) "./boot/macro/expand.scm" . 280665)
   (extend . 3)
   (push.close
     (0 0)
     (call
       (touch.gloc.of current-expansion-environment)
       (apply.gloc.of current-expansion-environment "./boot/macro/expand.scm" . 281607))
     (set.iloc (1 . 0) "./boot/macro/expand.scm" . 281607)
     (call
       (touch.gloc.of current-transformer-environment)
       (apply.gloc.of current-transformer-environment "./boot/macro/expand.scm" . 281607))
     (set.iloc (1 . 1) "./boot/macro/expand.scm" . 281607)
     (call
       (touch.gloc.of current-expansion-environment)
       (push.iloc 2 . 1)
       (apply.gloc.of current-expansion-environment "./boot/macro/expand.scm" . 281607))
     (touch.gloc.of current-transformer-environment)
     (push.iloc.1 . 2)
     (apply.gloc.of current-transformer-environment "./boot/macro/expand.scm" . 281607))
   (push.close
     (0 0)
     (push.cadr.iloc (2 . 2) "./boot/macro/expand.scm" . 281623)
     (subr.gloc.of procedure? 1 "./boot/macro/expand.scm" . 281611)
     (if.true
       (call
         (touch.gloc.of wrap-transformer-input)
         (push.iloc 2 . 0)
         (apply.gloc.of wrap-transformer-input "./boot/macro/expand.scm" . 282648))
       (push)
       (cadr.iloc (2 . 2) "./boot/macro/expand.scm" . 282636)
       (apply))
     (touch.gloc.of transcribe-syntax-rules)
     (push.iloc 2 . 0)
     (push.cadr.iloc (2 . 2) "./boot/macro/expand.scm" . 283689)
     (apply.gloc.of transcribe-syntax-rules "./boot/macro/expand.scm" . 283659))
   (push.close
     (0 0)
     (call
       (touch.gloc.of current-expansion-environment)
       (push.iloc.1 . 0)
       (apply.gloc.of current-expansion-environment "./boot/macro/expand.scm" . 281607))
     (touch.gloc.of current-transformer-environment)
     (push.iloc.1 . 1)
     (apply.gloc.of current-transformer-environment "./boot/macro/expand.scm" . 281607))
   (apply.gloc.of |.dynamic-wind| "./boot/macro/expand.scm" . 281607))
 (set.gloc.of expand-macro-use)
 (ret.const.unspec))
((close
   (2 0 . rewrite-let-syntax)
   (call
     (iloc.0 . 0)
     (if.not.pair?.ret.const . #f)
     (cdr.iloc (0 . 0) "./boot/macro/expand.scm" . 290825)
     (if.not.pair?.ret.const . #f)
     (push.cddr.iloc (0 . 0) "./boot/macro/expand.scm" . 290825)
     (ret.subr.gloc.of list? "./boot/macro/expand.scm" . 290825))
   (if.true
     (push.cddr.iloc (0 . 0) "./boot/macro/expand.scm" . 290825)
     (push.cadr.iloc (0 . 0) "./boot/macro/expand.scm" . 290825)
     (extend . 2)
     (call
       (touch.gloc.of check-let-bindings)
       (push.iloc.1 . 0)
       (push.iloc.0 . 1)
       (apply.gloc.of check-let-bindings "./boot/macro/expand.scm" . 290825))
     (call
       (touch.gloc.of fresh-rename-count)
       (apply.gloc.of fresh-rename-count "./boot/macro/expand.scm" . 290825))
     (push.const . |.BEGIN|)
     (iloc.0 . 0)
     (push.cons)
     (call
       (touch.gloc.of expand-let-syntax-bindings)
       (push.iloc.1 . 0)
       (push.iloc.0 . 1)
       (push.iloc.1 . 1)
       (apply.gloc.of expand-let-syntax-bindings "./boot/macro/expand.scm" . 290825))
     (push)
     (ret.subr.gloc.of values "./boot/macro/expand.scm" . 290825))
   (push.car.iloc (0 . 0) "./boot/macro/expand.scm" . 290825)
   (push.const . "missing clause")
   (push.iloc.0 . 0)
   (apply.gloc.of syntax-violation "./boot/macro/expand.scm" . 290825))
 (set.gloc.of |rewrite-let-syntax`620*|)
 (close
   (2 0 . rewrite-letrec-syntax)
   (call
     (iloc.0 . 0)
     (if.not.pair?.ret.const . #f)
     (cdr.iloc (0 . 0) "./boot/macro/expand.scm" . 302089)
     (if.not.pair?.ret.const . #f)
     (push.cddr.iloc (0 . 0) "./boot/macro/expand.scm" . 302089)
     (ret.subr.gloc.of list? "./boot/macro/expand.scm" . 302089))
   (if.true
     (push.cddr.iloc (0 . 0) "./boot/macro/expand.scm" . 302089)
     (push.cadr.iloc (0 . 0) "./boot/macro/expand.scm" . 302089)
     (extend . 2)
     (call
       (touch.gloc.of check-let-bindings)
       (push.iloc.1 . 0)
       (push.iloc.0 . 1)
       (apply.gloc.of check-let-bindings "./boot/macro/expand.scm" . 302089))
     (call
       (touch.gloc.of fresh-rename-count)
       (apply.gloc.of fresh-rename-count "./boot/macro/expand.scm" . 302089))
     (push.const . |.BEGIN|)
     (iloc.0 . 0)
     (push.cons)
     (call
       (touch.gloc.of expand-letrec-syntax-bindings)
       (push.iloc.1 . 0)
       (push.iloc.0 . 1)
       (push.iloc.1 . 1)
       (apply.gloc.of expand-letrec-syntax-bindings "./boot/macro/expand.scm" . 302089))
     (push)
     (ret.subr.gloc.of values "./boot/macro/expand.scm" . 302089))
   (push.car.iloc (0 . 0) "./boot/macro/expand.scm" . 302089)
   (push.const . "missing clause")
   (push.iloc.0 . 0)
   (apply.gloc.of syntax-violation "./boot/macro/expand.scm" . 302089))
 (set.gloc.of |rewrite-letrec-syntax`620*|)
 (close
   (2 0 . expand-initial-forms)
   (call
     (iloc.0 . 0)
     (if.not.pair?.ret.const . #f)
     (push.car.iloc (0 . 0) "./boot/macro/expand.scm" . 311335)
     (ret.subr.gloc.of symbol? "./boot/macro/expand.scm" . 311326))
   (if.true
     (call
       (touch.gloc.of env-lookup)
       (push.iloc.0 . 1)
       (push.car.iloc (0 . 0) "./boot/macro/expand.scm" . 312360)
       (apply.gloc.of env-lookup "./boot/macro/expand.scm" . 312344))
     (push)
     (extend . 1)
     (push.iloc.0 . 0)
     (gloc.of denote-let-syntax)
     (if.eq?
       (touch.gloc.of |rewrite-let-syntax`620*|)
       (push.iloc.1 . 0)
       (push.iloc.1 . 1)
       (apply.gloc.of |rewrite-let-syntax`620*| "./boot/macro/expand.scm" . 314389))
     (push.iloc.0 . 0)
     (gloc.of denote-letrec-syntax)
     (if.eq?
       (touch.gloc.of |rewrite-letrec-syntax`620*|)
       (push.iloc.1 . 0)
       (push.iloc.1 . 1)
       (apply.gloc.of |rewrite-letrec-syntax`620*| "./boot/macro/expand.scm" . 316437))
     (call
       (touch.gloc.of macro?)
       (push.iloc.0 . 0)
       (apply.gloc.of macro? "./boot/macro/expand.scm" . 317461))
     (if.true
       (push.close
         (0 0)
         (call
           (touch.gloc.of expansion-trace-level)
           (apply.gloc.of expansion-trace-level "./boot/macro/expand.scm" . 320546))
         (push)
         (call (apply.gloc.of expansion-backtrace "./boot/macro/expand.scm" . 320570))
         (push)
         (subr.gloc.of < 2 "./boot/macro/expand.scm" . 320543)
         (if.true
           (call
             (touch.gloc.of expansion-trace-stack)
             (push.iloc 2 . 0)
             (call
               (touch.gloc.of expansion-trace-stack)
               (apply.gloc.of expansion-trace-stack "./boot/macro/expand.scm" . 322627))
             (push.cons)
             (apply.gloc.of expansion-trace-stack "./boot/macro/expand.scm" . 322593))
           (call
             (touch.gloc.of expansion-trace-level)
             (push.const . 1)
             (call
               (touch.gloc.of expansion-trace-level)
               (apply.gloc.of expansion-trace-level "./boot/macro/expand.scm" . 323645))
             (push)
             (push.subr.gloc.of + 2 "./boot/macro/expand.scm" . 323640)
             (apply.gloc.of expansion-trace-level "./boot/macro/expand.scm" . 323617))
           (touch.gloc.of expand-macro-use)
           (push.iloc 2 . 0)
           (push.iloc 2 . 1)
           (push.iloc.1 . 0)
           (apply.gloc.of expand-macro-use "./boot/macro/expand.scm" . 324641))
         (touch.gloc.of expand-macro-use)
         (push.iloc 2 . 0)
         (push.iloc 2 . 1)
         (push.iloc.1 . 0)
         (apply.gloc.of expand-macro-use "./boot/macro/expand.scm" . 325663))
       (push.close
         (2 0)
         (call
           (touch.gloc.of annotate-macro!)
           (push.iloc.0 . 0)
           (push.iloc 2 . 0)
           (apply.gloc.of annotate-macro! "./boot/macro/expand.scm" . 326679))
         (push.iloc.0 . 0)
         (call
           (touch.gloc.of extend-env)
           (push.iloc.0 . 1)
           (push.iloc 2 . 1)
           (apply.gloc.of extend-env "./boot/macro/expand.scm" . 327716))
         (push)
         (ret.subr.gloc.of values "./boot/macro/expand.scm" . 327703))
       (apply.gloc.of
         |.call-with-values|
         (|.call-with-values|
           (lambda ()
             (if (< (expansion-trace-level) (expansion-backtrace))
                 (begin
                   (expansion-trace-stack (cons |form`619*| (expansion-trace-stack)))
                   (expansion-trace-level (+ 1 (expansion-trace-level)))
                   (expand-macro-use |form`619*| |env`619*| |deno`639*|))
                 (expand-macro-use |form`619*| |env`619*| |deno`639*|)))
           (lambda (|expr`641*| |renames`641*|)
             (annotate-macro! |expr`641*| |form`619*|)
             (values |expr`641*| (extend-env |renames`641*| |env`619*|))))))
     (push.iloc.1 . 0)
     (push.iloc.1 . 1)
     (ret.subr.gloc.of values "./boot/macro/expand.scm" . 329749))
   (push.iloc.0 . 0)
   (push.iloc.0 . 1)
   (ret.subr.gloc.of values "./boot/macro/expand.scm" . 331788))
 (set.gloc.of expand-initial-forms)
 (ret.const.unspec))
((close
   (3 0 . expand-body)
   (extend.unbound . 6)
   (push.const)
   (push.const)
   (push.const)
   (push.close
     (2 0 . extend-env!)
     (call
       (touch.gloc.of extend-env)
       (push.iloc.0 . 0)
       (iloc.0 . 1)
       (push.cons)
       (push.subr.gloc.of list 1 "./boot/macro/expand.scm" . 343071)
       (push.iloc 2 . 2)
       (apply.gloc.of extend-env "./boot/macro/expand.scm" . 343059))
     (set.iloc (2 . 2) "./boot/macro/expand.scm" . 343049)
     (call
       (call
         (touch.gloc.of macro?)
         (push.iloc.0 . 1)
         (apply.gloc.of macro? "./boot/macro/expand.scm" . 344078))
       (if.false.ret)
       (call
         (touch.gloc.of acons)
         (push.iloc.0 . 0)
         (push.iloc.0 . 1)
         (push.iloc.1 . 0)
         (apply.gloc.of acons "./boot/macro/expand.scm" . 346145))
       (set.iloc (1 . 0) "./boot/macro/expand.scm" . 346128)
       (call
         (touch.gloc.of extend-env)
         (push.iloc.0 . 1)
         (call
           (touch.gloc.of generate-local-macro-symbol)
           (push.iloc.0 . 0)
           (apply.gloc.of generate-local-macro-symbol "./boot/macro/expand.scm" . 347193))
         (push.cons)
         (push.subr.gloc.of list 1 "./boot/macro/expand.scm" . 347174)
         (push.iloc 2 . 2)
         (apply.gloc.of extend-env "./boot/macro/expand.scm" . 347162))
       (set.iloc (2 . 2) "./boot/macro/expand.scm" . 347152)
       (ret.const.unspec))
     (push.close
       (1 0)
       (push.cddr.iloc (0 . 0) "./boot/macro/expand.scm" . 348201)
       (push.iloc 3 . 2)
       (ret.subr.gloc.of set-cdr! "./boot/macro/expand.scm" . 348191))
     (push.iloc.1 . 0)
     (apply.gloc.of for-each "./boot/macro/expand.scm" . 348169))
   (push.close
     (1 0 . internal-definition?)
     (iloc.0 . 0)
     (if.not.pair?.ret.const . #f)
     (car.iloc (0 . 0) "./boot/macro/expand.scm" . 353301)
     (if.not.pair?.ret.const . #f)
     (push.iloc.0 . 0)
     (subr.gloc.of caar 1 "./boot/macro/expand.scm" . 354327)
     (if.not.symbol?.ret.const . #f)
     (call
       (touch.gloc.of env-lookup)
       (push.iloc 2 . 2)
       (push.iloc.0 . 0)
       (push.subr.gloc.of caar 1 "./boot/macro/expand.scm" . 355370)
       (apply.gloc.of env-lookup "./boot/macro/expand.scm" . 355354))
     (push)
     (extend . 1)
     (call
       (touch.gloc.of macro?)
       (push.iloc.0 . 0)
       (apply.gloc.of macro? "./boot/macro/expand.scm" . 356372))
     (if.true.ret)
     (push.gloc.of denote-define)
     (iloc.0 . 0)
     (if.eq?.ret.const . #t)
     (push.gloc.of denote-define-syntax)
     (iloc.0 . 0)
     (if.eq?.ret.const . #t)
     (push.gloc.of denote-let-syntax)
     (iloc.0 . 0)
     (if.eq?.ret.const . #t)
     (push.gloc.of denote-letrec-syntax)
     (iloc.0 . 0)
     (ret.eq? "./boot/macro/expand.scm" . 360468))
   (push.close
     (3 0 . rewrite-body)
     (iloc.0 . 0)
     (if.null?.ret.const)
     (iloc.0 . 1)
     (if.null?
       (touch.gloc.of annotate)
       (call
         (touch.gloc.of expand-each)
         (push.iloc.0 . 0)
         (push.iloc 2 . 2)
         (apply.gloc.of expand-each "./boot/macro/expand.scm" . 366618))
       (push)
       (push.iloc 2 . 1)
       (apply.gloc.of annotate "./boot/macro/expand.scm" . 366608))
     (call
       (call
         (touch.gloc.of unique-id-list?)
         (call
           (push.gloc.of car)
           (push.iloc.0 . 2)
           (apply.gloc.of map "./boot/macro/expand.scm" . 368677))
         (push)
         (apply.gloc.of unique-id-list? "./boot/macro/expand.scm" . 368660))
       (if.true.ret)
       (call
         (touch.gloc.of find-duplicates)
         (call
           (push.gloc.of car)
           (push.iloc.0 . 2)
           (apply.gloc.of map "./boot/macro/expand.scm" . 369711))
         (push)
         (apply.gloc.of find-duplicates "./boot/macro/expand.scm" . 369694))
       (push)
       (extend . 1)
       (push.const . define)
       (push.const . "duplicate definitions")
       (call
         (push.iloc.0 . 0)
         (push.iloc.1 . 1)
         (push.subr.gloc.of assq 2 "./boot/macro/expand.scm" . 372785)
         (extend . 1)
         (touch.gloc.of annotate)
         (push.const . define)
         (iloc.0 . 0)
         (push.cons)
         (push.iloc.0 . 0)
         (apply.gloc.of annotate "./boot/macro/expand.scm" . 372802))
       (push)
       (call
         (push.iloc.0 . 0)
         (push.iloc.1 . 1)
         (push.subr.gloc.of reverse 1 "./boot/macro/expand.scm" . 373818)
         (push.subr.gloc.of assq 2 "./boot/macro/expand.scm" . 373809)
         (extend . 1)
         (touch.gloc.of annotate)
         (push.const . define)
         (iloc.0 . 0)
         (push.cons)
         (push.iloc.0 . 0)
         (apply.gloc.of annotate "./boot/macro/expand.scm" . 373836))
       (push)
       (apply.gloc.of syntax-violation "./boot/macro/expand.scm" . 370710))
     (call
       (push.close
         (1 0)
         (push.car.iloc (0 . 0) "./boot/macro/expand.scm" . 374841)
         (push.iloc.1 . 2)
         (push.subr.gloc.of assq 2 "./boot/macro/expand.scm" . 374835)
         (ret.subr.gloc.of cdr "./boot/macro/expand.scm" . 374830))
       (push.iloc.0 . 1)
       (apply.gloc.of map "./boot/macro/expand.scm" . 374811))
     (push)
     (call
       (push.close
         (1 0)
         (touch.gloc.of expand-form)
         (push.cadr.iloc (0 . 0) "./boot/macro/expand.scm" . 375867)
         (push.iloc 3 . 2)
         (apply.gloc.of expand-form "./boot/macro/expand.scm" . 375854))
       (push.iloc.0 . 1)
       (apply.gloc.of map "./boot/macro/expand.scm" . 375835))
     (push)
     (extend . 2)
     (call
       (touch.gloc.of check-rec*-contract-violation)
       (push.iloc.0 . 0)
       (push.iloc.0 . 1)
       (apply.gloc.of check-rec*-contract-violation "./boot/macro/expand.scm" . 376857))
     (push)
     (extend . 1)
     (iloc.0 . 0)
     (if.true
       (call
         (touch.gloc.of any1)
         (push.close
           (1 0)
           (push.cdr.iloc (0 . 0) "./boot/macro/expand.scm" . 378948)
           (car.iloc (1 . 0) "./boot/macro/expand.scm" . 378956)
           (if.not.eq?.ret.const . #f)
           (push.iloc.0 . 0)
           (ret.subr.gloc.of car "./boot/macro/expand.scm" . 378967))
         (push.iloc 2 . 2)
         (apply.gloc.of any1 "./boot/macro/expand.scm" . 378920))
       (push)
       (extend . 1)
       (call
         (touch.gloc.of current-macro-expression)
         (push.iloc 5 . 0)
         (apply.gloc.of current-macro-expression "./boot/macro/expand.scm" . 379936))
       (push.const . define)
       (push.const . "attempt to reference uninitialized variable ~u")
       (push.iloc.0 . 0)
       (push.subr.gloc.of format 2 "./boot/macro/expand.scm" . 382002)
       (call
         (touch.gloc.of any1)
         (push.close
           (1 0)
           (call
             (touch.gloc.of check-rec-contract-violation)
             (push.iloc.1 . 0)
             (push.subr.gloc.of list 1 "./boot/macro/expand.scm" . 384093)
             (push.cdr.iloc (0 . 0) "./boot/macro/expand.scm" . 384103)
             (apply.gloc.of check-rec-contract-violation "./boot/macro/expand.scm" . 384063))
           (if.false.ret)
           (touch.gloc.of annotate)
           (push.const . define)
           (iloc.0 . 0)
           (push.cons)
           (push.iloc.0 . 0)
           (apply.gloc.of annotate "./boot/macro/expand.scm" . 385087))
         (push.iloc 3 . 1)
         (apply.gloc.of any1 "./boot/macro/expand.scm" . 383026))
       (push)
       (apply.gloc.of syntax-violation "./boot/macro/expand.scm" . 380960))
     (call
       (touch.gloc.of check-internal-def-contract-violation)
       (call
         (push.gloc.of car)
         (push.iloc 2 . 1)
         (apply.gloc.of map "./boot/macro/expand.scm" . 387136))
       (push)
       (push.iloc 3 . 1)
       (apply.gloc.of check-internal-def-contract-violation "./boot/macro/expand.scm" . 387097))
     (push)
     (extend . 1)
     (iloc.0 . 0)
     (if.true
       (call
         (touch.gloc.of current-macro-expression)
         (push.iloc 5 . 0)
         (apply.gloc.of current-macro-expression "./boot/macro/expand.scm" . 389150))
       (push.const . define)
       (push.const
         .
         "identifier ~u already used to determine the meaning of undeferred portions of definition")
       (push.iloc.0 . 0)
       (push.subr.gloc.of format 2 "./boot/macro/expand.scm" . 391216)
       (call
         (push.iloc.0 . 0)
         (push.iloc 3 . 1)
         (push.subr.gloc.of assq 2 "./boot/macro/expand.scm" . 392247)
         (extend . 1)
         (iloc.0 . 0)
         (if.false.ret)
         (touch.gloc.of annotate)
         (push.const . define)
         (iloc.0 . 0)
         (push.cons)
         (push.iloc.0 . 0)
         (apply.gloc.of annotate "./boot/macro/expand.scm" . 392277))
       (push)
       (apply.gloc.of
         syntax-violation
         (syntax-violation
           'define
           (format
             "identifier ~u already used to determine the meaning of undeferred portions of definition"
             |.L261`677*|)
           (let ((|.L262`681*| (assq |.L261`677*| |defs`653*|)))
             (and |.L262`681*| (annotate (|.cons| 'define |.L262`681*|) |.L262`681*|))))))
     (call
       (touch.gloc.of annotate-bindings)
       (push.iloc 2 . 0)
       (push.iloc 2 . 1)
       (push.iloc 5 . 2)
       (apply.gloc.of annotate-bindings "./boot/macro/expand.scm" . 395289))
     (touch.gloc.of annotate)
     (push.const . letrec*)
     (call
       (touch.gloc.of rewrite-letrec*-bindings)
       (call
         (push.gloc.of list)
         (push.iloc 2 . 0)
         (push.iloc 2 . 1)
         (apply.gloc.of map "./boot/macro/expand.scm" . 397376))
       (push)
       (push.iloc 5 . 2)
       (apply.gloc.of rewrite-letrec*-bindings "./boot/macro/expand.scm" . 397350))
     (push)
     (call
       (touch.gloc.of expand-each)
       (push.iloc 3 . 0)
       (push.iloc 5 . 2)
       (apply.gloc.of expand-each "./boot/macro/expand.scm" . 397402))
     (push)
     (push.subr.gloc.of |.cons*| 3 "./boot/macro/expand.scm" . 397350)
     (push.subr.gloc.of |.list| 1 "./boot/macro/expand.scm" . 396313)
     (push.iloc 5 . 1)
     (apply.gloc.of annotate "./boot/macro/expand.scm" . 396313))
   (enclose . 6)
   (call
     (touch.gloc.of fresh-rename-count)
     (apply.gloc.of fresh-rename-count "./boot/macro/expand.scm" . 400403))
   (push)
   (extend . 1)
   (extend.enclose
     (3 0 . loop)
     (iloc.0 . 0)
     (if.null?.ret.const)
     (call
       (car.iloc (0 . 0) "./boot/macro/expand.scm" . 403484)
       (if.not.pair?.ret.const . #f)
       (push.iloc.0 . 0)
       (push.subr.gloc.of caar 1 "./boot/macro/expand.scm" . 403505)
       (ret.subr.gloc.of symbol? "./boot/macro/expand.scm" . 403496))
     (if.true
       (push.iloc.0 . 0)
       (push.subr.gloc.of caar 1 "./boot/macro/expand.scm" . 404520)
       (push.iloc 3 . 2)
       (subr.gloc.of cons 2 "./boot/macro/expand.scm" . 404514)
       (set.iloc (3 . 2) "./boot/macro/expand.scm" . 404496)
       (call
         (touch.gloc.of env-lookup)
         (push.iloc 4 . 2)
         (push.iloc.0 . 0)
         (push.subr.gloc.of caar 1 "./boot/macro/expand.scm" . 405548)
         (apply.gloc.of env-lookup "./boot/macro/expand.scm" . 405532))
       (push)
       (extend . 1)
       (push.gloc.of denote-begin)
       (iloc.0 . 0)
       (if.eq?
         (call
           (touch.gloc.of flatten-begin)
           (push.iloc.1 . 0)
           (push.iloc 5 . 2)
           (apply.gloc.of flatten-begin "./boot/macro/expand.scm" . 407583))
         (push)
         (push.iloc.1 . 1)
         (push.iloc.1 . 2)
         (apply.iloc (2 . 0) "./boot/macro/expand.scm" . 407577))
       (push.gloc.of denote-define-syntax)
       (iloc.0 . 0)
       (if.eq?
         (call
           (iloc.1 . 0)
           (if.not.pair?.ret.const . #f)
           (car.iloc (1 . 0) (car |body`690*|))
           (if.not.pair?.ret.const . #f)
           (push.iloc.1 . 0)
           (subr.gloc.of cdar 1 (cdar |body`690*|))
           (if.not.pair?.ret.const . #f)
           (push.iloc.1 . 0)
           (subr.gloc.of cddar 1 (cddar |body`690*|))
           (if.not.pair?.ret.const . #f)
           (push.iloc.1 . 0)
           (subr.gloc.of cdddar 1 (cdddar |body`690*|))
           (if.not.null?.ret.const . #f)
           (push.cdr.iloc (1 . 0) (cdr |body`690*|))
           (ret.subr.gloc.of list? (list? (cdr |body`690*|))))
         (push)
         (extend . 1)
         (call
           (iloc.0 . 0)
           (if.false.ret)
           (push.iloc 2 . 0)
           (push.subr.gloc.of cadar 1 (cadar |body`690*|))
           (ret.subr.gloc.of symbol? (symbol? (cadar |body`690*|))))
         (if.true
           (push.cdr.iloc (2 . 0) (cdr |body`690*|))
           (push.iloc 2 . 0)
           (push.subr.gloc.of caddar 1 (caddar |body`690*|))
           (push.iloc 2 . 0)
           (push.subr.gloc.of cadar 1 (cadar |body`690*|))
           (extend . 3)
           (call
             (push.close
               (0 0)
               (touch.gloc.of compile-macro)
               (push.car.iloc (4 . 0) (car |body`690*|))
               (push.iloc.1 . 1)
               (push.iloc 8 . 2)
               (apply.gloc.of
                 compile-macro
                 (compile-macro (car |body`690*|) |clause`700*| |env`643*|)))
             (push.close
               (1 1)
               (call
                 (iloc.0 . 1)
                 (if.not.pair?.ret.const . #f)
                 (push.car.iloc (0 . 1) (car |expr`702*|))
                 (push.iloc 7 . 1)
                 (subr.gloc.of cons 2 (cons (car |expr`702*|) |macro-exprs`644*|))
                 (set.iloc
                   (7 . 1)
                   (set! |macro-exprs`644*| (cons (car |expr`702*|) |macro-exprs`644*|)))
                 (ret.const.unspec))
               (call
                 (touch.gloc.of macro-variable?)
                 (push.iloc.0 . 0)
                 (apply.gloc.of macro-variable? (macro-variable? |code`702*|)))
               (if.true
                 (push.iloc.1 . 2)
                 (push.iloc.0 . 0)
                 (apply.iloc (7 . 3) (|extend-env!`644*| |name`700*| |code`702*|)))
               (push.iloc.1 . 2)
               (call
                 (touch.gloc.of make-macro)
                 (push.iloc.0 . 0)
                 (push.iloc 8 . 2)
                 (apply.gloc.of make-macro (make-macro |code`702*| |env`643*|)))
               (push)
               (apply.iloc
                 (7 . 3)
                 (|extend-env!`644*| |name`700*| (make-macro |code`702*| |env`643*|))))
             (apply.gloc.of
               |.call-with-values|
               (|.call-with-values|
                 (lambda () (compile-macro (car |body`690*|) |clause`700*| |env`643*|))
                 (lambda (|code`702*| . |expr`702*|)
                   (and (pair? |expr`702*|)
                        (set! |macro-exprs`644*| (cons (car |expr`702*|) |macro-exprs`644*|)))
                   (if (macro-variable? |code`702*|)
                       (|extend-env!`644*| |name`700*| |code`702*|)
                       (|extend-env!`644*| |name`700*| (make-macro |code`702*| |env`643*|)))))))
           (push.iloc.0 . 0)
           (push.iloc 3 . 1)
           (call
             (touch.gloc.of acons)
             (push.iloc.0 . 2)
             (push.const . #f)
             (push.iloc 3 . 2)
             (apply.gloc.of acons (acons |name`700*| #f |renames`690*|)))
           (push)
           (apply.iloc
             (4 . 0)
             (|loop`689*| |more`700*| |defs`690*| (acons |name`700*| #f |renames`690*|))))
         (iloc.0 . 0)
         (if.true
           (push.iloc 2 . 0)
           (push.subr.gloc.of caar 1 (caar |body`690*|))
           (push.const . "expected symbol for first clause")
           (push.car.iloc (2 . 0) (car |body`690*|))
           (apply.gloc.of
             syntax-violation
             (syntax-violation
               (caar |body`690*|)
               "expected symbol for first clause"
               (car |body`690*|))))
         (push.iloc 2 . 0)
         (push.subr.gloc.of caar 1 (caar |body`690*|))
         (push.const . "expected symbol and transformer expression")
         (push.car.iloc (2 . 0) (car |body`690*|))
         (apply.gloc.of
           syntax-violation
           (syntax-violation
             (caar |body`690*|)
             "expected symbol and transformer expression"
             (car |body`690*|))))
       (push.gloc.of denote-define)
       (iloc.0 . 0)
       (if.eq?
         (call
           (touch.gloc.of annotate)
           (call
             (touch.gloc.of desugar-define)
             (push.car.iloc (1 . 0) "./boot/macro/expand.scm" . 425027)
             (apply.gloc.of desugar-define "./boot/macro/expand.scm" . 425011))
           (push)
           (push.subr.gloc.of cdr 1 "./boot/macro/expand.scm" . 425006)
           (push.car.iloc (1 . 0) "./boot/macro/expand.scm" . 425040)
           (apply.gloc.of annotate "./boot/macro/expand.scm" . 424996))
         (push)
         (extend . 1)
         (push.car.iloc (0 . 0) "./boot/macro/expand.scm" . 426022)
         (call
           (touch.gloc.of rename-variable-id)
           (push.car.iloc (0 . 0) "./boot/macro/expand.scm" . 426058)
           (push.iloc 4 . 0)
           (apply.gloc.of rename-variable-id "./boot/macro/expand.scm" . 426038))
         (push)
         (extend . 2)
         (call
           (push.iloc.0 . 0)
           (push.iloc 6 . 2)
           (subr.gloc.of memq 2 "./boot/macro/expand.scm" . 427044)
           (if.true
             (call
               (touch.gloc.of current-macro-expression)
               (push.iloc 7 . 0)
               (apply.gloc.of current-macro-expression "./boot/macro/expand.scm" . 429097))
             (push.const . define)
             (push.const
               .
               "identifier ~u already used to determine the meaning of undeferred portions of definition")
             (push.iloc.0 . 0)
             (push.subr.gloc.of format 2 "./boot/macro/expand.scm" . 431163)
             (push.car.iloc (3 . 0) "./boot/macro/expand.scm" . 432187)
             (apply.gloc.of syntax-violation "./boot/macro/expand.scm" . 430121))
           (ret.const.unspec))
         (call
           (push.iloc.0 . 0)
           (push.iloc.0 . 1)
           (apply.iloc (6 . 3) "./boot/macro/expand.scm" . 433181))
         (push.cdr.iloc (3 . 0) "./boot/macro/expand.scm" . 434211)
         (push.iloc.1 . 0)
         (iloc 3 . 1)
         (push.cons)
         (call
           (touch.gloc.of acons)
           (push.iloc.0 . 0)
           (push.iloc.0 . 1)
           (push.iloc 3 . 2)
           (apply.gloc.of acons "./boot/macro/expand.scm" . 434238))
         (push)
         (apply.iloc (4 . 0) "./boot/macro/expand.scm" . 434205))
       (call
         (call
           (touch.gloc.of macro?)
           (push.iloc.0 . 0)
           (apply.gloc.of macro? "./boot/macro/expand.scm" . 435229))
         (if.true.ret)
         (push.gloc.of denote-let-syntax)
         (iloc.0 . 0)
         (if.eq?.ret.const . #t)
         (push.gloc.of denote-letrec-syntax)
         (iloc.0 . 0)
         (ret.eq? "./boot/macro/expand.scm" . 437277))
       (if.true
         (push.close
           (0 0)
           (touch.gloc.of expand-initial-forms)
           (push.car.iloc (2 . 0) "./boot/macro/expand.scm" . 438344)
           (push.iloc 6 . 2)
           (apply.gloc.of expand-initial-forms "./boot/macro/expand.scm" . 438322))
         (push.close
           (2 0)
           (iloc.0 . 1)
           (set.iloc (6 . 2) "./boot/macro/expand.scm" . 439323)
           (call
             (touch.gloc.of flatten-begin)
             (push.iloc.0 . 0)
             (push.subr.gloc.of list 1 "./boot/macro/expand.scm" . 440379)
             (push.iloc 6 . 2)
             (apply.gloc.of flatten-begin "./boot/macro/expand.scm" . 440364))
           (push)
           (extend . 1)
           (iloc.0 . 0)
           (if.null?
             (push.cdr.iloc (3 . 0) "./boot/macro/expand.scm" . 442410)
             (push.iloc 3 . 1)
             (push.iloc 3 . 2)
             (apply.iloc (4 . 0) "./boot/macro/expand.scm" . 442404))
           (call (push.iloc.0 . 0) (apply.iloc (6 . 4) "./boot/macro/expand.scm" . 443428))
           (if.true
             (push.iloc.0 . 0)
             (push.cdr.iloc (3 . 0) "./boot/macro/expand.scm" . 444476)
             (push.subr.gloc.of append 2 "./boot/macro/expand.scm" . 444458)
             (push.iloc 3 . 1)
             (push.iloc 3 . 2)
             (apply.iloc (4 . 0) "./boot/macro/expand.scm" . 444452))
           (push.iloc.0 . 0)
           (push.cdr.iloc (3 . 0) "./boot/macro/expand.scm" . 446532)
           (push.subr.gloc.of append 2 "./boot/macro/expand.scm" . 446514)
           (push.iloc 3 . 1)
           (push.subr.gloc.of reverse 1 "./boot/macro/expand.scm" . 446544)
           (push.iloc 3 . 2)
           (apply.iloc (6 . 5) "./boot/macro/expand.scm" . 446500))
         (apply.gloc.of |.call-with-values| "./boot/macro/expand.scm" . 423961))
       (push.iloc.1 . 0)
       (push.iloc.1 . 1)
       (push.subr.gloc.of reverse 1 "./boot/macro/expand.scm" . 448556)
       (push.iloc.1 . 2)
       (apply.iloc (4 . 5) "./boot/macro/expand.scm" . 448537))
     (push.iloc.0 . 0)
     (push.iloc.0 . 1)
     (push.subr.gloc.of reverse 1 "./boot/macro/expand.scm" . 450595)
     (push.iloc.0 . 2)
     (apply.iloc (3 . 5) "./boot/macro/expand.scm" . 450576))
   (call
     (touch.gloc.of flatten-begin)
     (push.iloc 3 . 1)
     (push.iloc 3 . 2)
     (apply.gloc.of flatten-begin "./boot/macro/expand.scm" . 401432))
   (push)
   (push.const)
   (push.const)
   (apply.iloc (0 . 0) "./boot/macro/expand.scm" . 402441))
 (set.gloc.of expand-body)
 (ret.const.unspec))
((close
   (2 0 . expand-each)
   (call
     (touch.gloc.of current-macro-expression)
     (apply.gloc.of current-macro-expression "./boot/macro/expand.scm" . 454673))
   (push)
   (extend . 1)
   (touch.gloc.of annotate)
   (call
     (push.close
       (1 0)
       (call
         (touch.gloc.of current-macro-expression)
         (push.iloc.1 . 0)
         (apply.gloc.of current-macro-expression "./boot/macro/expand.scm" . 456728))
       (touch.gloc.of expand-form)
       (push.iloc.0 . 0)
       (push.iloc 2 . 1)
       (apply.gloc.of expand-form "./boot/macro/expand.scm" . 457752))
     (push.iloc.1 . 0)
     (apply.gloc.of map "./boot/macro/expand.scm" . 455697))
   (push)
   (push.iloc.1 . 0)
   (apply.gloc.of annotate "./boot/macro/expand.scm" . 455687))
 (set.gloc.of expand-each)
 (ret.const.unspec))
((close
   (2 0 . expand-form)
   (iloc.0 . 0)
   (if.symbol?
     (call
       (touch.gloc.of env-lookup)
       (push.iloc.0 . 1)
       (push.iloc.0 . 0)
       (apply.gloc.of env-lookup "./boot/macro/expand.scm" . 464920))
     (push)
     (extend . 1)
     (iloc.0 . 0)
     (if.symbol? (ret.iloc 0 . 0))
     (call
       (touch.gloc.of macro?)
       (push.iloc.0 . 0)
       (apply.gloc.of macro? "./boot/macro/expand.scm" . 466965))
     (if.true
       (push.close
         (0 0)
         (call
           (touch.gloc.of expansion-trace-level)
           (apply.gloc.of expansion-trace-level "./boot/macro/expand.scm" . 470050))
         (push)
         (call (apply.gloc.of expansion-backtrace "./boot/macro/expand.scm" . 470074))
         (push)
         (subr.gloc.of < 2 "./boot/macro/expand.scm" . 470047)
         (if.true
           (push.const . #f)
           (push.const . #f)
           (call
             (touch.gloc.of current-macro-expression)
             (apply.gloc.of current-macro-expression "./boot/macro/expand.scm" . 471115))
           (push)
           (call
             (touch.gloc.of expansion-trace-stack)
             (apply.gloc.of expansion-trace-stack "./boot/macro/expand.scm" . 471142))
           (push.cons)
           (push.const . 1)
           (call
             (touch.gloc.of expansion-trace-level)
             (apply.gloc.of expansion-trace-level "./boot/macro/expand.scm" . 472138))
           (push)
           (push.subr.gloc.of + 2 "./boot/macro/expand.scm" . 472133)
           (extend . 4)
           (push.close
             (0 0)
             (call
               (touch.gloc.of expansion-trace-stack)
               (apply.gloc.of expansion-trace-stack "./boot/macro/expand.scm" . 473121))
             (set.iloc (1 . 0) "./boot/macro/expand.scm" . 473121)
             (call
               (touch.gloc.of expansion-trace-level)
               (apply.gloc.of expansion-trace-level "./boot/macro/expand.scm" . 473121))
             (set.iloc (1 . 1) "./boot/macro/expand.scm" . 473121)
             (call
               (touch.gloc.of expansion-trace-stack)
               (push.iloc.1 . 2)
               (apply.gloc.of expansion-trace-stack "./boot/macro/expand.scm" . 473121))
             (touch.gloc.of expansion-trace-level)
             (push.iloc.1 . 3)
             (apply.gloc.of expansion-trace-level "./boot/macro/expand.scm" . 473121))
           (push.close
             (0 0)
             (touch.gloc.of expand-macro-use)
             (push.iloc 4 . 0)
             (push.iloc 4 . 1)
             (push.iloc 3 . 0)
             (apply.gloc.of expand-macro-use "./boot/macro/expand.scm" . 473121))
           (push.close
             (0 0)
             (call
               (touch.gloc.of expansion-trace-stack)
               (push.iloc.1 . 0)
               (apply.gloc.of expansion-trace-stack "./boot/macro/expand.scm" . 473121))
             (touch.gloc.of expansion-trace-level)
             (push.iloc.1 . 1)
             (apply.gloc.of expansion-trace-level "./boot/macro/expand.scm" . 473121))
           (apply.gloc.of |.dynamic-wind| "./boot/macro/expand.scm" . 473121))
         (touch.gloc.of expand-macro-use)
         (push.iloc 2 . 0)
         (push.iloc 2 . 1)
         (push.iloc.1 . 0)
         (apply.gloc.of expand-macro-use "./boot/macro/expand.scm" . 474143))
       (push.close
         (2 0)
         (call
           (touch.gloc.of annotate-macro!)
           (push.iloc.0 . 0)
           (push.iloc 2 . 0)
           (apply.gloc.of annotate-macro! "./boot/macro/expand.scm" . 475159))
         (touch.gloc.of expand-form)
         (push.iloc.0 . 0)
         (call
           (touch.gloc.of extend-env)
           (push.iloc.0 . 1)
           (push.iloc 2 . 1)
           (apply.gloc.of extend-env "./boot/macro/expand.scm" . 476201))
         (push)
         (apply.gloc.of expand-form "./boot/macro/expand.scm" . 476183))
       (apply.gloc.of
         |.call-with-values|
         (|.call-with-values|
           (lambda ()
             (if (< (expansion-trace-level) (expansion-backtrace))
                 (let ((|tmp1`731`734*| #f)
                       (|tmp1`732`734*| #f)
                       (|tmp2`731`734*| (cons (current-macro-expression) (expansion-trace-stack)))
                       (|tmp2`732`734*| (+ 1 (expansion-trace-level))))
                   (|.dynamic-wind|
                     (lambda ()
                       (set! |tmp1`731`734*| (expansion-trace-stack))
                       (set! |tmp1`732`734*| (expansion-trace-level))
                       (expansion-trace-stack |tmp2`731`734*|)
                       (expansion-trace-level |tmp2`732`734*|))
                     (lambda () (expand-macro-use |form`725*| |env`725*| |deno`727*|))
                     (lambda ()
                       (expansion-trace-stack |tmp1`731`734*|)
                       (expansion-trace-level |tmp1`732`734*|))))
                 (expand-macro-use |form`725*| |env`725*| |deno`727*|)))
           (lambda (|expr`729*| |renames`729*|)
             (annotate-macro! |expr`729*| |form`725*|)
             (expand-form |expr`729*| (extend-env |renames`729*| |env`725*|))))))
     (call
       (touch.gloc.of unbound?)
       (push.iloc.0 . 0)
       (apply.gloc.of unbound? "./boot/macro/expand.scm" . 477205))
     (if.true
       (touch.gloc.of undefined/syntax-violation)
       (push.const . #f)
       (push.const . "attempt to reference unbound identifier ~u")
       (push.iloc.1 . 0)
       (push.subr.gloc.of format 2 "./boot/macro/expand.scm" . 479281)
       (call
         (touch.gloc.of current-macro-expression)
         (apply.gloc.of current-macro-expression "./boot/macro/expand.scm" . 480305))
       (push)
       (apply.gloc.of undefined/syntax-violation "./boot/macro/expand.scm" . 478229))
     (call
       (touch.gloc.of out-of-context?)
       (push.iloc.0 . 0)
       (apply.gloc.of out-of-context? "./boot/macro/expand.scm" . 481301))
     (if.true
       (cdr.iloc (0 . 0) "./boot/macro/expand.scm" . 482329)
       (if.true
         (push.const . #f)
         (push.const . "identifer ~u out of context")
         (push.iloc.1 . 0)
         (push.subr.gloc.of format 2 "./boot/macro/expand.scm" . 484395)
         (call
           (touch.gloc.of current-macro-expression)
           (apply.gloc.of current-macro-expression "./boot/macro/expand.scm" . 485419))
         (push)
         (call
           (touch.gloc.of annotate)
           (push.const . syntax)
           (push.cdr.iloc (0 . 0) "./boot/macro/expand.scm" . 486467)
           (push.subr.gloc.of list 2 "./boot/macro/expand.scm" . 486453)
           (push.cdr.iloc (0 . 0) "./boot/macro/expand.scm" . 486479)
           (apply.gloc.of annotate "./boot/macro/expand.scm" . 486443))
         (push)
         (apply.gloc.of syntax-violation "./boot/macro/expand.scm" . 483353))
       (push.const . #f)
       (push.const . "identifer ~u out of context")
       (push.iloc.1 . 0)
       (push.subr.gloc.of format 2 "./boot/macro/expand.scm" . 488491)
       (call
         (touch.gloc.of current-macro-expression)
         (apply.gloc.of current-macro-expression "./boot/macro/expand.scm" . 489515))
       (push)
       (apply.gloc.of syntax-violation "./boot/macro/expand.scm" . 487449))
     (call
       (touch.gloc.of special?)
       (push.iloc.0 . 0)
       (apply.gloc.of special? "./boot/macro/expand.scm" . 490517))
     (if.true
       (push.cdr.iloc (0 . 0) "./boot/macro/expand.scm" . 491553)
       (gloc.of unexpected-unquote)
       (if.eq?
         (push.iloc.1 . 0)
         (push.const . "unquote appear outside of quasiquote")
         (call
           (touch.gloc.of current-macro-expression)
           (apply.gloc.of current-macro-expression "./boot/macro/expand.scm" . 492634))
         (push)
         (apply.gloc.of syntax-violation "./boot/macro/expand.scm" . 492572))
       (push.cdr.iloc (0 . 0) "./boot/macro/expand.scm" . 493601)
       (gloc.of unexpected-unquote-splicing)
       (if.eq?
         (push.iloc.1 . 0)
         (push.const . "unquote-splicing appear outside of quasiquote")
         (call
           (touch.gloc.of current-macro-expression)
           (apply.gloc.of current-macro-expression "./boot/macro/expand.scm" . 494691))
         (push)
         (apply.gloc.of syntax-violation "./boot/macro/expand.scm" . 494620))
       (push.cdr.iloc (0 . 0) "./boot/macro/expand.scm" . 495649)
       (gloc.of unexpected-syntax)
       (if.eq?
         (push.iloc.1 . 0)
         (push.const . "misplaced syntactic keyword")
         (call
           (touch.gloc.of current-macro-expression)
           (apply.gloc.of current-macro-expression "./boot/macro/expand.scm" . 496721))
         (push)
         (apply.gloc.of syntax-violation "./boot/macro/expand.scm" . 496668))
       (push.cdr.iloc (0 . 0) "./boot/macro/expand.scm" . 497697)
       (gloc.of unexpected-auxiliary-syntax)
       (if.eq?
         (push.iloc.1 . 0)
         (push.const . "misplaced auxiliary syntactic keyword")
         (call
           (touch.gloc.of current-macro-expression)
           (apply.gloc.of current-macro-expression "./boot/macro/expand.scm" . 498779))
         (push)
         (apply.gloc.of syntax-violation "./boot/macro/expand.scm" . 498716))
       (push.iloc.1 . 0)
       (push.const . "misplaced syntactic keyword")
       (call
         (touch.gloc.of current-macro-expression)
         (apply.gloc.of current-macro-expression "./boot/macro/expand.scm" . 500817))
       (push)
       (apply.gloc.of syntax-violation "./boot/macro/expand.scm" . 500764))
     (call
       (touch.gloc.of pattern-variable?)
       (push.iloc.0 . 0)
       (apply.gloc.of pattern-variable? "./boot/macro/expand.scm" . 501781))
     (if.true
       (push.const . #f)
       (push.const . "misplaced pattern variable ~u")
       (push.iloc.1 . 0)
       (push.subr.gloc.of format 2 "./boot/macro/expand.scm" . 502826)
       (call
         (touch.gloc.of current-macro-expression)
         (apply.gloc.of current-macro-expression "./boot/macro/expand.scm" . 502872))
       (push)
       (apply.gloc.of syntax-violation "./boot/macro/expand.scm" . 502805))
     (ret.iloc 1 . 0))
   (iloc.0 . 0)
   (if.null?
     (push.const . #f)
     (push.const . "invalid expression")
     (push.iloc.0 . 0)
     (apply.gloc.of syntax-violation "./boot/macro/expand.scm" . 505868))
   (iloc.0 . 0)
   (if.pair?
     (call
       (touch.gloc.of current-macro-expression)
       (push.iloc.0 . 0)
       (apply.gloc.of current-macro-expression "./boot/macro/expand.scm" . 507916))
     (car.iloc (0 . 0) "./boot/macro/expand.scm" . 508956)
     (if.symbol?
       (call
         (touch.gloc.of env-lookup)
         (push.iloc.0 . 1)
         (push.car.iloc (0 . 0) "./boot/macro/expand.scm" . 509999)
         (apply.gloc.of env-lookup "./boot/macro/expand.scm" . 509983))
       (push)
       (extend . 1)
       (call
         (touch.gloc.of macro?)
         (push.iloc.0 . 0)
         (apply.gloc.of macro? "./boot/macro/expand.scm" . 511004))
       (if.true
         (push.close
           (0 0)
           (touch.gloc.of expand-macro-use)
           (push.iloc 2 . 0)
           (push.iloc 2 . 1)
           (push.iloc.1 . 0)
           (apply.gloc.of expand-macro-use "./boot/macro/expand.scm" . 512057))
         (push.close
           (2 0)
           (call
             (touch.gloc.of annotate-macro!)
             (push.iloc.0 . 0)
             (push.iloc 2 . 0)
             (apply.gloc.of annotate-macro! "./boot/macro/expand.scm" . 513054))
           (call
             (touch.gloc.of expansion-trace-level)
             (apply.gloc.of expansion-trace-level "./boot/macro/expand.scm" . 514085))
           (push)
           (call (apply.gloc.of expansion-backtrace "./boot/macro/expand.scm" . 514109))
           (push)
           (subr.gloc.of < 2 "./boot/macro/expand.scm" . 514082)
           (if.true
             (push.const . #f)
             (push.const . #f)
             (push.iloc 2 . 0)
             (call
               (touch.gloc.of expansion-trace-stack)
               (apply.gloc.of expansion-trace-stack "./boot/macro/expand.scm" . 516169))
             (push.cons)
             (push.const . 1)
             (call
               (touch.gloc.of expansion-trace-level)
               (apply.gloc.of expansion-trace-level "./boot/macro/expand.scm" . 517187))
             (push)
             (push.subr.gloc.of + 2 "./boot/macro/expand.scm" . 517182)
             (extend . 4)
             (push.close
               (0 0)
               (call
                 (touch.gloc.of expansion-trace-stack)
                 (apply.gloc.of expansion-trace-stack "./boot/macro/expand.scm" . 518180))
               (set.iloc (1 . 0) "./boot/macro/expand.scm" . 518180)
               (call
                 (touch.gloc.of expansion-trace-level)
                 (apply.gloc.of expansion-trace-level "./boot/macro/expand.scm" . 518180))
               (set.iloc (1 . 1) "./boot/macro/expand.scm" . 518180)
               (call
                 (touch.gloc.of expansion-trace-stack)
                 (push.iloc.1 . 2)
                 (apply.gloc.of expansion-trace-stack "./boot/macro/expand.scm" . 518180))
               (touch.gloc.of expansion-trace-level)
               (push.iloc.1 . 3)
               (apply.gloc.of expansion-trace-level "./boot/macro/expand.scm" . 518180))
             (push.close
               (0 0)
               (touch.gloc.of expand-form)
               (push.iloc 2 . 0)
               (call
                 (touch.gloc.of extend-env)
                 (push.iloc 2 . 1)
                 (push.iloc 4 . 1)
                 (apply.gloc.of extend-env "./boot/macro/expand.scm" . 518198))
               (push)
               (apply.gloc.of expand-form "./boot/macro/expand.scm" . 518180))
             (push.close
               (0 0)
               (call
                 (touch.gloc.of expansion-trace-stack)
                 (push.iloc.1 . 0)
                 (apply.gloc.of expansion-trace-stack "./boot/macro/expand.scm" . 518180))
               (touch.gloc.of expansion-trace-level)
               (push.iloc.1 . 1)
               (apply.gloc.of expansion-trace-level "./boot/macro/expand.scm" . 518180))
             (apply.gloc.of |.dynamic-wind| "./boot/macro/expand.scm" . 518180))
           (touch.gloc.of expand-form)
           (push.iloc.0 . 0)
           (call
             (touch.gloc.of extend-env)
             (push.iloc.0 . 1)
             (push.iloc 2 . 1)
             (apply.gloc.of extend-env "./boot/macro/expand.scm" . 519220))
           (push)
           (apply.gloc.of expand-form "./boot/macro/expand.scm" . 519202))
         (apply.gloc.of |.call-with-values| "./boot/macro/expand.scm" . 511004))
       (call
         (touch.gloc.of special?)
         (push.iloc.0 . 0)
         (apply.gloc.of special? "./boot/macro/expand.scm" . 520220))
       (if.true
         (call
           (push.iloc.1 . 0)
           (subr.gloc.of list? 1 "./boot/macro/expand.scm" . 521248)
           (if.true.ret)
           (push.const . #f)
           (push.const . "expression is not a proper list")
           (push.iloc.1 . 0)
           (apply.gloc.of syntax-violation "./boot/macro/expand.scm" . 521261))
         (call
           (call
             (touch.gloc.of unexpect-top-level-form)
             (apply.gloc.of unexpect-top-level-form "./boot/macro/expand.scm" . 522276))
           (if.true.ret)
           (push.gloc.of denote-begin)
           (iloc.0 . 0)
           (if.eq?.ret.const . #t)
           (push.gloc.of denote-define)
           (iloc.0 . 0)
           (if.eq?.ret.const . #t)
           (push.gloc.of denote-import)
           (iloc.0 . 0)
           (if.eq?.ret.const . #t)
           (push.gloc.of denote-define-syntax)
           (iloc.0 . 0)
           (if.eq?.ret.const . #t)
           (push.gloc.of denote-let-syntax)
           (iloc.0 . 0)
           (if.eq?.ret.const . #t)
           (push.gloc.of denote-letrec-syntax)
           (iloc.0 . 0)
           (ret.eq? "./boot/macro/expand.scm" . 528420))
         (if.true
           (push.iloc.1 . 0)
           (push.iloc.1 . 1)
           (cdr.iloc (0 . 0) "./boot/macro/expand.scm" . 529441)
           (apply))
         (push.const . #f)
         (extend . 1)
         (push.close
           (0 0)
           (call
             (touch.gloc.of unexpect-top-level-form)
             (apply.gloc.of unexpect-top-level-form "./boot/macro/expand.scm" . 531490))
           (set.iloc (1 . 0) "./boot/macro/expand.scm" . 531490)
           (touch.gloc.of unexpect-top-level-form)
           (push.const . #t)
           (apply.gloc.of unexpect-top-level-form "./boot/macro/expand.scm" . 531490))
         (push.close
           (0 0)
           (push.iloc 3 . 0)
           (push.iloc 3 . 1)
           (cdr.iloc (2 . 0) "./boot/macro/expand.scm" . 531491)
           (apply))
         (push.close
           (0 0)
           (touch.gloc.of unexpect-top-level-form)
           (push.iloc.1 . 0)
           (apply.gloc.of unexpect-top-level-form "./boot/macro/expand.scm" . 531490))
         (apply.gloc.of |.dynamic-wind| "./boot/macro/expand.scm" . 531490))
       (call
         (push.iloc.1 . 0)
         (subr.gloc.of list? 1 "./boot/macro/expand.scm" . 533536)
         (if.true.ret)
         (push.const . #f)
         (push.const . "expression is not a proper list")
         (push.iloc.1 . 0)
         (apply.gloc.of syntax-violation "./boot/macro/expand.scm" . 533549))
       (call
         (touch.gloc.of unexpect-top-level-form)
         (apply.gloc.of unexpect-top-level-form "./boot/macro/expand.scm" . 534560))
       (if.true
         (touch.gloc.of expand-each)
         (push.iloc.1 . 0)
         (push.iloc.1 . 1)
         (apply.gloc.of expand-each "./boot/macro/expand.scm" . 535584))
       (push.const . #f)
       (extend . 1)
       (push.close
         (0 0)
         (call
           (touch.gloc.of unexpect-top-level-form)
           (apply.gloc.of unexpect-top-level-form "./boot/macro/expand.scm" . 537634))
         (set.iloc (1 . 0) "./boot/macro/expand.scm" . 537634)
         (touch.gloc.of unexpect-top-level-form)
         (push.const . #t)
         (apply.gloc.of unexpect-top-level-form "./boot/macro/expand.scm" . 537634))
       (push.close
         (0 0)
         (touch.gloc.of expand-each)
         (push.iloc 3 . 0)
         (push.iloc 3 . 1)
         (apply.gloc.of expand-each "./boot/macro/expand.scm" . 537634))
       (push.close
         (0 0)
         (touch.gloc.of unexpect-top-level-form)
         (push.iloc.1 . 0)
         (apply.gloc.of unexpect-top-level-form "./boot/macro/expand.scm" . 537634))
       (apply.gloc.of |.dynamic-wind| "./boot/macro/expand.scm" . 537634))
     (call
       (push.iloc.0 . 0)
       (subr.gloc.of list? 1 "./boot/macro/expand.scm" . 539671)
       (if.true.ret)
       (push.const . #f)
       (push.const . "expression is not a proper list")
       (push.iloc.0 . 0)
       (apply.gloc.of syntax-violation "./boot/macro/expand.scm" . 539684))
     (call
       (touch.gloc.of unexpect-top-level-form)
       (apply.gloc.of unexpect-top-level-form "./boot/macro/expand.scm" . 540695))
     (if.true
       (touch.gloc.of expand-each)
       (push.iloc.0 . 0)
       (push.iloc.0 . 1)
       (apply.gloc.of expand-each "./boot/macro/expand.scm" . 541719))
     (push.const . #f)
     (extend . 1)
     (push.close
       (0 0)
       (call
         (touch.gloc.of unexpect-top-level-form)
         (apply.gloc.of unexpect-top-level-form "./boot/macro/expand.scm" . 543769))
       (set.iloc (1 . 0) "./boot/macro/expand.scm" . 543769)
       (touch.gloc.of unexpect-top-level-form)
       (push.const . #t)
       (apply.gloc.of unexpect-top-level-form "./boot/macro/expand.scm" . 543769))
     (push.close
       (0 0)
       (touch.gloc.of expand-each)
       (push.iloc 2 . 0)
       (push.iloc 2 . 1)
       (apply.gloc.of expand-each "./boot/macro/expand.scm" . 543769))
     (push.close
       (0 0)
       (touch.gloc.of unexpect-top-level-form)
       (push.iloc.1 . 0)
       (apply.gloc.of unexpect-top-level-form "./boot/macro/expand.scm" . 543769))
     (apply.gloc.of |.dynamic-wind| "./boot/macro/expand.scm" . 543769))
   (call
     (push.iloc.0 . 0)
     (subr.gloc.of vector? 1 "./boot/macro/expand.scm" . 544785)
     (if.false.ret)
     (touch.gloc.of self-evaluating-vector-constants)
     (apply.gloc.of self-evaluating-vector-constants "./boot/macro/expand.scm" . 544800))
   (if.true (ret.iloc 0 . 0))
   (call
     (push.iloc.0 . 0)
     (subr.gloc.of boolean? 1 "./boot/macro/expand.scm" . 545808)
     (if.true.ret)
     (push.iloc.0 . 0)
     (subr.gloc.of number? 1 "./boot/macro/expand.scm" . 545824)
     (if.true.ret)
     (push.iloc.0 . 0)
     (subr.gloc.of char? 1 "./boot/macro/expand.scm" . 545839)
     (if.true.ret)
     (push.iloc.0 . 0)
     (subr.gloc.of string? 1 "./boot/macro/expand.scm" . 545852)
     (if.true.ret)
     (push.iloc.0 . 0)
     (ret.subr.gloc.of bytevector? "./boot/macro/expand.scm" . 545867))
   (if.true (ret.iloc 0 . 0))
   (push.const . #f)
   (push.const . "invalid expression")
   (push.iloc.0 . 0)
   (apply.gloc.of syntax-violation "./boot/macro/expand.scm" . 547852))
 (set.gloc.of expand-form)
 (ret.const.unspec))
((close
   (1 1 . macro-expand)
   (push.const . #f)
   (push.const . #f)
   (push.const . #f)
   (push.const . #f)
   (push.const . #f)
   (push.const . #f)
   (push.const)
   (extend . 7)
   (push.close
     (0 0)
     (call
       (touch.gloc.of current-expansion-mode)
       (apply.gloc.of current-expansion-mode "./boot/macro/expand.scm" . 558087))
     (set.iloc (1 . 0) "./boot/macro/expand.scm" . 558087)
     (call
       (touch.gloc.of current-macro-expression)
       (apply.gloc.of current-macro-expression "./boot/macro/expand.scm" . 558087))
     (set.iloc (1 . 1) "./boot/macro/expand.scm" . 558087)
     (call
       (touch.gloc.of current-top-level-exterior)
       (apply.gloc.of current-top-level-exterior "./boot/macro/expand.scm" . 558087))
     (set.iloc (1 . 2) "./boot/macro/expand.scm" . 558087)
     (call
       (touch.gloc.of unexpect-top-level-form)
       (apply.gloc.of unexpect-top-level-form "./boot/macro/expand.scm" . 558087))
     (set.iloc (1 . 3) "./boot/macro/expand.scm" . 558087)
     (call
       (touch.gloc.of expansion-trace-level)
       (apply.gloc.of expansion-trace-level "./boot/macro/expand.scm" . 558087))
     (set.iloc (1 . 4) "./boot/macro/expand.scm" . 558087)
     (call
       (touch.gloc.of expansion-trace-stack)
       (apply.gloc.of expansion-trace-stack "./boot/macro/expand.scm" . 558087))
     (set.iloc (1 . 5) "./boot/macro/expand.scm" . 558087)
     (call
       (touch.gloc.of current-expansion-mode)
       (push.iloc 2 . 1)
       (apply.gloc.of current-expansion-mode "./boot/macro/expand.scm" . 558087))
     (call
       (touch.gloc.of current-macro-expression)
       (push.const . #f)
       (apply.gloc.of current-macro-expression (current-macro-expression #f)))
     (call
       (touch.gloc.of current-top-level-exterior)
       (push.const . #f)
       (apply.gloc.of current-top-level-exterior (current-top-level-exterior #f)))
     (call
       (touch.gloc.of unexpect-top-level-form)
       (push.const . #f)
       (apply.gloc.of unexpect-top-level-form (unexpect-top-level-form #f)))
     (call
       (touch.gloc.of expansion-trace-level)
       (push.const . 0)
       (apply.gloc.of expansion-trace-level "./boot/macro/expand.scm" . 558087))
     (touch.gloc.of expansion-trace-stack)
     (push.iloc.1 . 6)
     (apply.gloc.of expansion-trace-stack "./boot/macro/expand.scm" . 558087))
   (push.close
     (0 0)
     (call
       (call
         (touch.gloc.of denote-begin?)
         (push.const)
         (push.const . begin)
         (apply.gloc.of denote-begin? "./boot/macro/expand.scm" . 558103))
       (if.true
         (touch.gloc.of flatten-top-level-begin)
         (push.const . begin)
         (push.iloc 2 . 0)
         (push.subr.gloc.of |.list| 2 "./boot/macro/expand.scm" . 559127)
         (push.gloc.of private-primitives-environment)
         (apply.gloc.of flatten-top-level-begin "./boot/macro/expand.scm" . 559127))
       (ret.iloc 2 . 0))
     (push)
     (extend . 1)
     (cdr.iloc (0 . 0) "./boot/macro/expand.scm" . 561172)
     (if.null? (ret.const.unspec))
     (call
       (touch.gloc.of expand-form)
       (push.iloc.0 . 0)
       (push.gloc.of private-primitives-environment)
       (apply.gloc.of expand-form "./boot/macro/expand.scm" . 563245))
     (push)
     (push.gloc.of annotate)
     (push.gloc.of annotate-closure)
     (call (apply.gloc.of current-after-expansion-hook "./boot/macro/expand.scm" . 563214))
     (apply))
   (push.close
     (0 0)
     (call
       (touch.gloc.of current-expansion-mode)
       (push.iloc.1 . 0)
       (apply.gloc.of current-expansion-mode "./boot/macro/expand.scm" . 558087))
     (call
       (touch.gloc.of current-macro-expression)
       (push.iloc.1 . 1)
       (apply.gloc.of current-macro-expression "./boot/macro/expand.scm" . 558087))
     (call
       (touch.gloc.of current-top-level-exterior)
       (push.iloc.1 . 2)
       (apply.gloc.of current-top-level-exterior "./boot/macro/expand.scm" . 558087))
     (call
       (touch.gloc.of unexpect-top-level-form)
       (push.iloc.1 . 3)
       (apply.gloc.of unexpect-top-level-form "./boot/macro/expand.scm" . 558087))
     (call
       (touch.gloc.of expansion-trace-level)
       (push.iloc.1 . 4)
       (apply.gloc.of expansion-trace-level "./boot/macro/expand.scm" . 558087))
     (touch.gloc.of expansion-trace-stack)
     (push.iloc.1 . 5)
     (apply.gloc.of expansion-trace-stack "./boot/macro/expand.scm" . 558087))
   (apply.gloc.of
     |.dynamic-wind|
     (|.dynamic-wind|
       (lambda ()
         (set! |tmp1`795`802*| (current-expansion-mode))
         (set! |tmp1`796`802*| (current-macro-expression))
         (set! |tmp1`797`802*| (current-top-level-exterior))
         (set! |tmp1`798`802*| (unexpect-top-level-form))
         (set! |tmp1`799`802*| (expansion-trace-level))
         (set! |tmp1`800`802*| (expansion-trace-stack))
         (current-expansion-mode |mode`792*|)
         (current-macro-expression #f)
         (current-top-level-exterior #f)
         (unexpect-top-level-form #f)
         (expansion-trace-level 0)
         (expansion-trace-stack |tmp2`800`802*|))
       (lambda ()
         (let ((|form`808*|
                 (if (denote-begin? '() 'begin)
                     (flatten-top-level-begin
                       (|.list| 'begin |form`792*|)
                       private-primitives-environment)
                     |form`792*|)))
           (if (null? (cdr |form`808*|))
               (unspecified)
               ((current-after-expansion-hook)
                (expand-form |form`808*| private-primitives-environment)
                annotate
                annotate-closure))))
       (lambda ()
         (current-expansion-mode |tmp1`795`802*|)
         (current-macro-expression |tmp1`796`802*|)
         (current-top-level-exterior |tmp1`797`802*|)
         (unexpect-top-level-form |tmp1`798`802*|)
         (expansion-trace-level |tmp1`799`802*|)
         (expansion-trace-stack |tmp1`800`802*|)))))
 (set.gloc.of macro-expand)
 (ret.const.unspec))

;
((close
   (2 0 . expand-lambda)
   (call
     (touch.gloc.of safe-length)
     (push.iloc.0 . 0)
     (apply.gloc.of safe-length "./boot/macro/base.scm" . 6159))
   (push)
   (push.const . 2)
   (subr.gloc.of > 2 "./boot/macro/base.scm" . 6156)
   (if.true
     (call
       (touch.gloc.of collect-lambda-formals)
       (push.cadr.iloc (0 . 0) "./boot/macro/base.scm" . 7216)
       (push.iloc.0 . 0)
       (apply.gloc.of collect-lambda-formals "./boot/macro/base.scm" . 7192))
     (push)
     (extend . 1)
     (call
       (touch.gloc.of fresh-rename-count)
       (apply.gloc.of fresh-rename-count "./boot/macro/base.scm" . 8221))
     (push)
     (extend . 1)
     (call
       (push.gloc.of cons)
       (push.iloc.1 . 0)
       (call
         (push.close
           (1 0)
           (touch.gloc.of rename-variable-id)
           (push.iloc.0 . 0)
           (push.iloc.1 . 0)
           (apply.gloc.of rename-variable-id "./boot/macro/base.scm" . 9279))
         (push.iloc.1 . 0)
         (apply.gloc.of map "./boot/macro/base.scm" . 9261))
       (push)
       (apply.gloc.of map "./boot/macro/base.scm" . 9246))
     (push)
     (extend . 1)
     (call
       (touch.gloc.of expand-body)
       (push.iloc 3 . 0)
       (push.cddr.iloc (3 . 0) "./boot/macro/base.scm" . 10285)
       (call
         (touch.gloc.of extend-env)
         (push.iloc.0 . 0)
         (push.iloc 3 . 1)
         (apply.gloc.of extend-env "./boot/macro/base.scm" . 10297))
       (push)
       (apply.gloc.of expand-body "./boot/macro/base.scm" . 10267))
     (push)
     (extend . 1)
     (iloc.0 . 0)
     (if.null?
       (push.const . lambda)
       (push.const . "empty body")
       (push.iloc 4 . 0)
       (apply.gloc.of syntax-violation "./boot/macro/base.scm" . 12308))
     (touch.gloc.of annotate)
     (push.const . lambda)
     (call
       (touch.gloc.of rename-lambda-formals)
       (push.cadr.iloc (4 . 0) "./boot/macro/base.scm" . 13375)
       (push.iloc.1 . 0)
       (apply.gloc.of rename-lambda-formals "./boot/macro/base.scm" . 13352))
     (push)
     (push.iloc.0 . 0)
     (push.subr.gloc.of |.cons*| 3 "./boot/macro/base.scm" . 13332)
     (push.iloc 4 . 0)
     (apply.gloc.of annotate "./boot/macro/base.scm" . 13332))
   (push.const . lambda)
   (push.const . "expected formals and body")
   (push.iloc.0 . 0)
   (apply.gloc.of syntax-violation "./boot/macro/base.scm" . 15372))
 (set.gloc.of expand-lambda)
 (ret.const.unspec))
((close
   (2 0 . expand-quote)
   (call
     (touch.gloc.of safe-length)
     (push.iloc.0 . 0)
     (apply.gloc.of safe-length "./boot/macro/base.scm" . 19468))
   (push)
   (push.const . 2)
   (subr.gloc.of = 2 "./boot/macro/base.scm" . 19465)
   (if.true
     (touch.gloc.of annotate)
     (push.const . quote)
     (call
       (touch.gloc.of strip-rename-suffix)
       (push.cadr.iloc (0 . 0) "./boot/macro/base.scm" . 20529)
       (apply.gloc.of strip-rename-suffix "./boot/macro/base.scm" . 20508))
     (push)
     (push.subr.gloc.of |.list| 2 "./boot/macro/base.scm" . 20489)
     (push.iloc.0 . 0)
     (apply.gloc.of annotate "./boot/macro/base.scm" . 20489))
   (push.const . quote)
   (push.const . "expected single datum")
   (push.iloc.0 . 0)
   (apply.gloc.of syntax-violation "./boot/macro/base.scm" . 21513))
 (set.gloc.of expand-quote)
 (ret.const.unspec))
((close
   (2 0 . expand-begin)
   (call
     (call
       (touch.gloc.of unexpect-top-level-form)
       (apply.gloc.of unexpect-top-level-form "./boot/macro/base.scm" . 25610))
     (if.false.ret)
     (cdr.iloc (0 . 0) "./boot/macro/base.scm" . 26645)
     (if.pair?.ret.const . #t)
     (push.const . begin)
     (push.const . "misplaced empty begin")
     (push.iloc.0 . 0)
     (apply.gloc.of syntax-violation "./boot/macro/base.scm" . 27662))
   (touch.gloc.of annotate)
   (push.const . begin)
   (call
     (touch.gloc.of flatten-begin)
     (call
       (touch.gloc.of expand-each)
       (push.cdr.iloc (0 . 0) "./boot/macro/base.scm" . 28725)
       (push.iloc.0 . 1)
       (apply.gloc.of expand-each "./boot/macro/base.scm" . 28712))
     (push)
     (push.iloc.0 . 1)
     (apply.gloc.of flatten-begin "./boot/macro/base.scm" . 28697))
   (push.cons)
   (push.iloc.0 . 0)
   (apply.gloc.of annotate "./boot/macro/base.scm" . 28677))
 (set.gloc.of expand-begin)
 (ret.const.unspec))
((close
   (2 0 . expand-if)
   (touch.gloc.of annotate)
   (call
     (call
       (iloc.0 . 0)
       (if.not.pair?.ret.const . #f)
       (cdr.iloc (0 . 0) (cdr |form`829*|))
       (if.not.pair?.ret.const . #f)
       (cddr.iloc (0 . 0) (cddr |form`829*|))
       (ret.pair? (pair? (cddr |form`829*|))))
     (push)
     (extend . 1)
     (call
       (iloc.0 . 0)
       (if.false.ret)
       (push.iloc.1 . 0)
       (subr.gloc.of cdddr 1 (cdddr |form`829*|))
       (ret.null? (null? (cdddr |form`829*|))))
     (if.true
       (push.iloc.1 . 0)
       (push.subr.gloc.of caddr 1 (caddr |form`829*|))
       (extend . 1)
       (push.const . if)
       (call
         (touch.gloc.of expand-form)
         (push.cadr.iloc (2 . 0) (cadr |form`829*|))
         (push.iloc 2 . 1)
         (apply.gloc.of expand-form (expand-form (cadr |form`829*|) |env`829*|)))
       (push)
       (call
         (touch.gloc.of expand-form)
         (push.iloc.0 . 0)
         (push.iloc 2 . 1)
         (apply.gloc.of expand-form (expand-form |expr`837*| |env`829*|)))
       (push)
       (ret.subr.gloc.of
         |.list|
         (|.list|
           'if
           (expand-form (cadr |form`829*|) |env`829*|)
           (expand-form |expr`837*| |env`829*|))))
     (call
       (iloc.0 . 0)
       (if.false.ret)
       (push.iloc.1 . 0)
       (subr.gloc.of cdddr 1 (cdddr |form`829*|))
       (if.not.pair?.ret.const . #f)
       (push.iloc.1 . 0)
       (subr.gloc.of cddddr 1 (cddddr |form`829*|))
       (ret.null? (null? (cddddr |form`829*|))))
     (if.true
       (push.iloc.1 . 0)
       (push.subr.gloc.of cadddr 1 (cadddr |form`829*|))
       (push.iloc.1 . 0)
       (push.subr.gloc.of caddr 1 (caddr |form`829*|))
       (extend . 2)
       (push.const . if)
       (call
         (touch.gloc.of expand-form)
         (push.cadr.iloc (2 . 0) (cadr |form`829*|))
         (push.iloc 2 . 1)
         (apply.gloc.of expand-form (expand-form (cadr |form`829*|) |env`829*|)))
       (push)
       (call
         (touch.gloc.of expand-form)
         (push.iloc.0 . 1)
         (push.iloc 2 . 1)
         (apply.gloc.of expand-form (expand-form |expr1`839*| |env`829*|)))
       (push)
       (call
         (touch.gloc.of expand-form)
         (push.iloc.0 . 0)
         (push.iloc 2 . 1)
         (apply.gloc.of expand-form (expand-form |expr2`839*| |env`829*|)))
       (push)
       (ret.subr.gloc.of
         |.list|
         (|.list|
           'if
           (expand-form (cadr |form`829*|) |env`829*|)
           (expand-form |expr1`839*| |env`829*|)
           (expand-form |expr2`839*| |env`829*|))))
     (push.const . if)
     (push.const . "expected 2 or 3 expressions")
     (push.iloc.1 . 0)
     (apply.gloc.of
       syntax-violation
       (syntax-violation 'if "expected 2 or 3 expressions" |form`829*|)))
   (push)
   (push.iloc.0 . 0)
   (apply.gloc.of
     annotate
     (annotate
       (let ((|.L283`831`834*|
               (and (pair? |form`829*|) (pair? (cdr |form`829*|)) (pair? (cddr |form`829*|)))))
         (if (and |.L283`831`834*| (null? (cdddr |form`829*|)))
             (let ((|expr`837*| (caddr |form`829*|)))
               (|.list|
                 'if
                 (expand-form (cadr |form`829*|) |env`829*|)
                 (expand-form |expr`837*| |env`829*|)))
             (if (and |.L283`831`834*| (pair? (cdddr |form`829*|)) (null? (cddddr |form`829*|)))
                 (let ((|expr2`839*| (cadddr |form`829*|)) (|expr1`839*| (caddr |form`829*|)))
                   (|.list|
                     'if
                     (expand-form (cadr |form`829*|) |env`829*|)
                     (expand-form |expr1`839*| |env`829*|)
                     (expand-form |expr2`839*| |env`829*|)))
                 (syntax-violation 'if "expected 2 or 3 expressions" |form`829*|))))
       |form`829*|)))
 (set.gloc.of expand-if)
 (ret.const.unspec))
((close
   (2 0 . expand-set!)
   (call
     (iloc.0 . 0)
     (if.not.pair?.ret.const . #f)
     (cdr.iloc (0 . 0) "./boot/macro/base.scm" . 47109)
     (if.not.pair?.ret.const . #f)
     (cddr.iloc (0 . 0) "./boot/macro/base.scm" . 47109)
     (if.not.pair?.ret.const . #f)
     (push.iloc.0 . 0)
     (subr.gloc.of cdddr 1 "./boot/macro/base.scm" . 47109)
     (if.not.null?.ret.const . #f)
     (push.cadr.iloc (0 . 0) "./boot/macro/base.scm" . 47109)
     (ret.subr.gloc.of symbol? "./boot/macro/base.scm" . 47109))
   (if.true
     (push.iloc.0 . 0)
     (push.subr.gloc.of caddr 1 "./boot/macro/base.scm" . 47109)
     (push.cadr.iloc (0 . 0) "./boot/macro/base.scm" . 47109)
     (extend . 2)
     (call
       (touch.gloc.of env-lookup)
       (push.iloc.1 . 1)
       (push.iloc.0 . 1)
       (apply.gloc.of env-lookup "./boot/macro/base.scm" . 47109))
     (push)
     (extend . 1)
     (call
       (touch.gloc.of macro-variable?)
       (push.iloc.0 . 0)
       (apply.gloc.of macro-variable? "./boot/macro/base.scm" . 47109))
     (if.true
       (push.close
         (0 0)
         (touch.gloc.of expand-macro-use)
         (push.iloc 3 . 0)
         (push.iloc 3 . 1)
         (push.iloc.1 . 0)
         (apply.gloc.of expand-macro-use "./boot/macro/base.scm" . 47109))
       (push.close
         (2 0)
         (call
           (touch.gloc.of annotate-macro!)
           (push.iloc.0 . 0)
           (push.iloc 3 . 0)
           (apply.gloc.of annotate-macro! "./boot/macro/base.scm" . 47109))
         (touch.gloc.of expand-form)
         (push.iloc.0 . 0)
         (call
           (touch.gloc.of extend-env)
           (push.iloc.0 . 1)
           (push.iloc 3 . 1)
           (apply.gloc.of extend-env "./boot/macro/base.scm" . 47109))
         (push)
         (apply.gloc.of expand-form "./boot/macro/base.scm" . 47109))
       (apply.gloc.of |.call-with-values| "./boot/macro/base.scm" . 47109))
     (call
       (call
         (touch.gloc.of special?)
         (push.iloc.0 . 0)
         (apply.gloc.of special? "./boot/macro/base.scm" . 47109))
       (if.true.ret)
       (touch.gloc.of macro?)
       (push.iloc.0 . 0)
       (apply.gloc.of macro? "./boot/macro/base.scm" . 47109))
     (if.true
       (push.const . set!)
       (push.const . "misplaced syntactic keyword as variable")
       (push.iloc 2 . 0)
       (apply.gloc.of syntax-violation "./boot/macro/base.scm" . 47109))
     (call
       (touch.gloc.of expand-form)
       (push.iloc.1 . 1)
       (push.iloc 2 . 1)
       (apply.gloc.of expand-form "./boot/macro/base.scm" . 47109))
     (push)
     (extend . 1)
     (call
       (push.gloc.of immutable-primitives)
       (push.iloc.0 . 0)
       (subr.gloc.of core-hashtable-contains? 2 "./boot/macro/base.scm" . 47109)
       (if.false.ret)
       (push.const . set!)
       (push.const . "attempt to modify immutable variable")
       (push.iloc 3 . 0)
       (apply.gloc.of syntax-violation "./boot/macro/base.scm" . 47109))
     (call
       (call
         (touch.gloc.of current-immutable-identifiers)
         (apply.gloc.of current-immutable-identifiers "./boot/macro/base.scm" . 47109))
       (if.false.ret)
       (call
         (touch.gloc.of renamed-id?)
         (push.iloc.0 . 0)
         (apply.gloc.of renamed-id? "./boot/macro/base.scm" . 47109))
       (if.true.ret.const . #f)
       (call
         (touch.gloc.of current-immutable-identifiers)
         (apply.gloc.of current-immutable-identifiers "./boot/macro/base.scm" . 47109))
       (push)
       (push.iloc 2 . 1)
       (push.const . #f)
       (subr.gloc.of core-hashtable-ref 3 "./boot/macro/base.scm" . 47109)
       (if.false.ret)
       (push.const . set!)
       (push.const . "attempt to modify immutable variable")
       (push.iloc 3 . 0)
       (apply.gloc.of syntax-violation "./boot/macro/base.scm" . 47109))
     (call
       (touch.gloc.of expand-form)
       (push.iloc 2 . 0)
       (push.iloc 3 . 1)
       (apply.gloc.of expand-form "./boot/macro/base.scm" . 47109))
     (push)
     (extend . 1)
     (call
       (iloc.0 . 0)
       (if.not.pair?.ret.const . #f)
       (call
         (touch.gloc.of denote-lambda?)
         (push.iloc 4 . 1)
         (push.car.iloc (0 . 0) "./boot/macro/base.scm" . 47109)
         (apply.gloc.of denote-lambda? "./boot/macro/base.scm" . 47109))
       (if.false.ret)
       (touch.gloc.of set-closure-comment!)
       (push.iloc.0 . 0)
       (call
         (touch.gloc.of original-id)
         (push.iloc.1 . 0)
         (apply.gloc.of original-id "./boot/macro/base.scm" . 47109))
       (push)
       (apply.gloc.of set-closure-comment! "./boot/macro/base.scm" . 47109))
     (touch.gloc.of annotate)
     (push.const . set!)
     (push.iloc.1 . 0)
     (push.iloc.0 . 0)
     (push.subr.gloc.of |.list| 3 "./boot/macro/base.scm" . 47109)
     (push.iloc 4 . 0)
     (apply.gloc.of annotate "./boot/macro/base.scm" . 47109))
   (push.const . set!)
   (push.const . "expected variable and single expression")
   (push.iloc.0 . 0)
   (apply.gloc.of syntax-violation "./boot/macro/base.scm" . 47109))
 (set.gloc.of expand-set!)
 (ret.const.unspec))
((close
   (2 0 . expand-let-syntax)
   (call
     (iloc.0 . 0)
     (if.not.pair?.ret.const . #f)
     (cdr.iloc (0 . 0) "./boot/macro/base.scm" . 74757)
     (if.not.pair?.ret.const . #f)
     (push.cddr.iloc (0 . 0) "./boot/macro/base.scm" . 74757)
     (ret.subr.gloc.of list? "./boot/macro/base.scm" . 74757))
   (if.true
     (push.cddr.iloc (0 . 0) "./boot/macro/base.scm" . 74757)
     (push.cadr.iloc (0 . 0) "./boot/macro/base.scm" . 74757)
     (extend . 2)
     (call
       (touch.gloc.of check-let-bindings)
       (push.iloc.1 . 0)
       (push.iloc.0 . 1)
       (apply.gloc.of check-let-bindings "./boot/macro/base.scm" . 74757))
     (call
       (touch.gloc.of fresh-rename-count)
       (apply.gloc.of fresh-rename-count "./boot/macro/base.scm" . 74757))
     (touch.gloc.of expand-form)
     (push.const . |.BEGIN|)
     (iloc.0 . 0)
     (push.cons)
     (call
       (touch.gloc.of expand-let-syntax-bindings)
       (push.iloc.1 . 0)
       (push.iloc.0 . 1)
       (push.iloc.1 . 1)
       (apply.gloc.of expand-let-syntax-bindings "./boot/macro/base.scm" . 74757))
     (push)
     (apply.gloc.of expand-form "./boot/macro/base.scm" . 74757))
   (push.car.iloc (0 . 0) "./boot/macro/base.scm" . 74757)
   (push.const . "expected bindings and body")
   (push.iloc.0 . 0)
   (apply.gloc.of syntax-violation "./boot/macro/base.scm" . 74757))
 (set.gloc.of expand-let-syntax)
 (ret.const.unspec))
((close
   (2 0 . expand-letrec-syntax)
   (call
     (iloc.0 . 0)
     (if.not.pair?.ret.const . #f)
     (cdr.iloc (0 . 0) "./boot/macro/base.scm" . 86021)
     (if.not.pair?.ret.const . #f)
     (push.cddr.iloc (0 . 0) "./boot/macro/base.scm" . 86021)
     (ret.subr.gloc.of list? "./boot/macro/base.scm" . 86021))
   (if.true
     (push.cddr.iloc (0 . 0) "./boot/macro/base.scm" . 86021)
     (push.cadr.iloc (0 . 0) "./boot/macro/base.scm" . 86021)
     (extend . 2)
     (call
       (touch.gloc.of check-let-bindings)
       (push.iloc.1 . 0)
       (push.iloc.0 . 1)
       (apply.gloc.of check-let-bindings "./boot/macro/base.scm" . 86021))
     (call
       (touch.gloc.of fresh-rename-count)
       (apply.gloc.of fresh-rename-count "./boot/macro/base.scm" . 86021))
     (touch.gloc.of expand-form)
     (push.const . |.BEGIN|)
     (iloc.0 . 0)
     (push.cons)
     (call
       (touch.gloc.of expand-letrec-syntax-bindings)
       (push.iloc.1 . 0)
       (push.iloc.0 . 1)
       (push.iloc.1 . 1)
       (apply.gloc.of expand-letrec-syntax-bindings "./boot/macro/base.scm" . 86021))
     (push)
     (apply.gloc.of expand-form "./boot/macro/base.scm" . 86021))
   (push.car.iloc (0 . 0) "./boot/macro/base.scm" . 86021)
   (push.const . "expected bindings and body")
   (push.iloc.0 . 0)
   (apply.gloc.of syntax-violation "./boot/macro/base.scm" . 86021))
 (set.gloc.of expand-letrec-syntax)
 (ret.const.unspec))
((close
   (2 0 . expand-define-syntax)
   (call
     (call
       (touch.gloc.of unexpect-top-level-form)
       (apply.gloc.of unexpect-top-level-form "./boot/macro/base.scm" . 97290))
     (if.false.ret)
     (push.car.iloc (0 . 0) "./boot/macro/base.scm" . 98332)
     (push.const . "misplaced definition")
     (push.iloc.0 . 0)
     (apply.gloc.of syntax-violation "./boot/macro/base.scm" . 98314))
   (call
     (iloc.0 . 0)
     (if.not.pair?.ret.const . #f)
     (cdr.iloc (0 . 0) (cdr |form`877*|))
     (if.not.pair?.ret.const . #f)
     (cddr.iloc (0 . 0) (cddr |form`877*|))
     (if.not.pair?.ret.const . #f)
     (push.iloc.0 . 0)
     (subr.gloc.of cdddr 1 (cdddr |form`877*|))
     (if.not.null?.ret.const . #f)
     (push.cadr.iloc (0 . 0) (cadr |form`877*|))
     (ret.subr.gloc.of symbol? (symbol? (cadr |form`877*|))))
   (if.true
     (push.iloc.0 . 0)
     (push.subr.gloc.of caddr 1 (caddr |form`877*|))
     (push.cadr.iloc (0 . 0) (cadr |form`877*|))
     (extend . 2)
     (call
       (push.const . #f)
       (extend . 1)
       (push.close
         (0 0)
         (call
           (touch.gloc.of unexpect-top-level-form)
           (apply.gloc.of unexpect-top-level-form (unexpect-top-level-form)))
         (set.iloc (1 . 0) (set! |tmp1`886`888*| (unexpect-top-level-form)))
         (touch.gloc.of unexpect-top-level-form)
         (push.const . #t)
         (apply.gloc.of unexpect-top-level-form (unexpect-top-level-form #t)))
       (push.close
         (0 0)
         (call
           (touch.gloc.of env-delete!)
           (push.iloc 3 . 1)
           (push.iloc 2 . 1)
           (apply.gloc.of env-delete! (env-delete! |env`877*| |name`883*|)))
         (push.close
           (0 0)
           (touch.gloc.of compile-macro)
           (push.iloc 4 . 0)
           (push.iloc 3 . 0)
           (push.iloc 4 . 1)
           (apply.gloc.of compile-macro (compile-macro |form`877*| |body`883*| |env`877*|)))
         (push.close
           (1 1)
           (call
             (touch.gloc.of macro-variable?)
             (push.iloc.0 . 0)
             (apply.gloc.of macro-variable? (macro-variable? |code`894*|)))
           (if.true
             (push.const . variable)
             (push.iloc 3 . 1)
             (push.cadr.iloc (0 . 0) (cadr |code`894*|))
             (push.iloc 4 . 1)
             (apply.gloc.of
               |.set-top-level-macro!|
               (|.set-top-level-macro!| 'variable |name`883*| (cadr |code`894*|) |env`877*|)))
           (push.const . syntax)
           (push.iloc 3 . 1)
           (push.iloc.0 . 0)
           (push.iloc 4 . 1)
           (apply.gloc.of
             |.set-top-level-macro!|
             (|.set-top-level-macro!| 'syntax |name`883*| |code`894*| |env`877*|)))
         (apply.gloc.of
           |.call-with-values|
           (|.call-with-values|
             (lambda () (compile-macro |form`877*| |body`883*| |env`877*|))
             (lambda (|code`894*| . |expr`894*|)
               (if (macro-variable? |code`894*|)
                   (|.set-top-level-macro!| 'variable |name`883*| (cadr |code`894*|) |env`877*|)
                   (|.set-top-level-macro!| 'syntax |name`883*| |code`894*| |env`877*|))))))
       (push.close
         (0 0)
         (touch.gloc.of unexpect-top-level-form)
         (push.iloc.1 . 0)
         (apply.gloc.of unexpect-top-level-form (unexpect-top-level-form |tmp1`886`888*|)))
       (apply.gloc.of
         |.dynamic-wind|
         (|.dynamic-wind|
           (lambda () (set! |tmp1`886`888*| (unexpect-top-level-form)) (unexpect-top-level-form #t))
           (lambda ()
             (env-delete! |env`877*| |name`883*|)
             (|.call-with-values|
               (lambda () (compile-macro |form`877*| |body`883*| |env`877*|))
               (lambda (|code`894*| . |expr`894*|)
                 (if (macro-variable? |code`894*|)
                     (|.set-top-level-macro!| 'variable |name`883*| (cadr |code`894*|) |env`877*|)
                     (|.set-top-level-macro!| 'syntax |name`883*| |code`894*| |env`877*|)))))
           (lambda () (unexpect-top-level-form |tmp1`886`888*|)))))
     (ret.const begin))
   (push.car.iloc (0 . 0) (car |form`877*|))
   (push.const . "expected symbol and single expression")
   (push.iloc.0 . 0)
   (apply.gloc.of
     syntax-violation
     (syntax-violation (car |form`877*|) "expected symbol and single expression" |form`877*|)))
 (set.gloc.of expand-define-syntax)
 (ret.const.unspec))
((close
   (1 0 . immutable?)
   (push.gloc.of immutable-primitives)
   (push.iloc.0 . 0)
   (subr.gloc.of core-hashtable-contains? 2 "./boot/macro/base.scm" . 117773)
   (if.true.ret)
   (push.iloc.0 . 0)
   (push.const
     library
     define
     define-syntax
     quote
     lambda
     if
     set!
     cond
     case
     and
     or
     let
     let*
     letrec
     letrec*
     let-values
     let*-values
     begin
     quasiquote
     unquote
     unquote-splicing
     let-syntax
     letrec-syntax
     syntax-rules
     identifier-syntax
     assert
     else
     =>
     ...
     _)
   (ret.subr.gloc.of memq "./boot/macro/base.scm" . 118797))
 (set.gloc.of |immutable?`900*|)
 (close
   (2 0 . expand-define)
   (extend.enclose+
     (1 0 . let?)
     (touch.gloc.of denote-let?)
     (push.iloc 2 . 1)
     (push.iloc.0 . 0)
     (apply.gloc.of denote-let? "./boot/macro/base.scm" . 129033))
   (call
     (call
       (touch.gloc.of unexpect-top-level-form)
       (apply.gloc.of unexpect-top-level-form "./boot/macro/base.scm" . 131082))
     (if.false.ret)
     (push.car.iloc (1 . 0) "./boot/macro/base.scm" . 132124)
     (push.const . "misplaced definition")
     (push.iloc.1 . 0)
     (apply.gloc.of syntax-violation "./boot/macro/base.scm" . 132106))
   (call
     (touch.gloc.of desugar-define)
     (push.iloc.1 . 0)
     (apply.gloc.of desugar-define (desugar-define |form`899*|)))
   (push)
   (extend . 1)
   (iloc.0 . 0)
   (if.not.pair?.ret.const . #f)
   (cdr.iloc (0 . 0) (cdr |.L300`905`906*|))
   (if.not.pair?.ret.const . #f)
   (cddr.iloc (0 . 0) (cddr |.L300`905`906*|))
   (if.not.pair?.ret.const . #f)
   (push.iloc.0 . 0)
   (subr.gloc.of cdddr 1 (cdddr |.L300`905`906*|))
   (if.not.null?.ret.const . #f)
   (push.iloc.0 . 0)
   (push.subr.gloc.of caddr 1 (caddr |.L300`905`906*|))
   (push.cadr.iloc (0 . 0) (cadr |.L300`905`906*|))
   (extend . 2)
   (call
     (call
       (touch.gloc.of |immutable?`900*|)
       (push.iloc.0 . 1)
       (apply.gloc.of |immutable?`900*| (|immutable?`900*| |name`909*|)))
     (if.false.ret)
     (push.car.iloc (3 . 0) (car |form`899*|))
     (push.const . "attempt to modify immutable binding")
     (push.iloc 3 . 0)
     (apply.gloc.of
       syntax-violation
       (syntax-violation (car |form`899*|) "attempt to modify immutable binding" |form`899*|)))
   (call
     (push.const . #f)
     (push.const . #f)
     (extend . 2)
     (push.close
       (0 0)
       (call
         (touch.gloc.of unexpect-top-level-form)
         (apply.gloc.of unexpect-top-level-form (unexpect-top-level-form)))
       (set.iloc (1 . 0) (set! |tmp1`912`915*| (unexpect-top-level-form)))
       (call
         (touch.gloc.of current-top-level-exterior)
         (apply.gloc.of current-top-level-exterior (current-top-level-exterior)))
       (set.iloc (1 . 1) (set! |tmp1`913`915*| (current-top-level-exterior)))
       (call
         (touch.gloc.of unexpect-top-level-form)
         (push.const . #t)
         (apply.gloc.of unexpect-top-level-form (unexpect-top-level-form #t)))
       (touch.gloc.of current-top-level-exterior)
       (push.iloc 2 . 1)
       (apply.gloc.of current-top-level-exterior (current-top-level-exterior |name`909*|)))
     (push.close
       (0 0)
       (call
         (touch.gloc.of env-delete!)
         (push.iloc 5 . 1)
         (push.iloc 2 . 1)
         (apply.gloc.of env-delete! (env-delete! |env`899*| |name`909*|)))
       (touch.gloc.of expand-form)
       (push.iloc 2 . 0)
       (push.iloc 5 . 1)
       (apply.gloc.of expand-form (expand-form |body`909*| |env`899*|)))
     (push.close
       (0 0)
       (call
         (touch.gloc.of unexpect-top-level-form)
         (push.iloc.1 . 0)
         (apply.gloc.of unexpect-top-level-form (unexpect-top-level-form |tmp1`912`915*|)))
       (touch.gloc.of current-top-level-exterior)
       (push.iloc.1 . 1)
       (apply.gloc.of current-top-level-exterior (current-top-level-exterior |tmp1`913`915*|)))
     (apply.gloc.of
       |.dynamic-wind|
       (|.dynamic-wind|
         (lambda ()
           (set! |tmp1`912`915*| (unexpect-top-level-form))
           (set! |tmp1`913`915*| (current-top-level-exterior))
           (unexpect-top-level-form #t)
           (current-top-level-exterior |name`909*|))
         (lambda () (env-delete! |env`899*| |name`909*|) (expand-form |body`909*| |env`899*|))
         (lambda ()
           (unexpect-top-level-form |tmp1`912`915*|)
           (current-top-level-exterior |tmp1`913`915*|)))))
   (push)
   (extend . 1)
   (call
     (call
       (iloc.0 . 0)
       (if.not.pair?.ret.const . #f)
       (cdr.iloc (0 . 0) (cdr |body`923*|))
       (if.not.pair?.ret.const . #f)
       (cddr.iloc (0 . 0) (cddr |body`923*|))
       (if.not.pair?.ret.const . #f)
       (push.iloc.0 . 0)
       (subr.gloc.of cdddr 1 (cdddr |body`923*|))
       (if.not.null?.ret.const . #f)
       (push.car.iloc (0 . 0) (car |body`923*|))
       (apply.iloc+ (3 . 0) (|let?`900*| (car |body`923*|))))
     (if.true
       (touch.gloc.of set-closure-comment!)
       (push.iloc.0 . 0)
       (push.subr.gloc.of caddr 1 (caddr |body`923*|))
       (call
         (touch.gloc.of original-id)
         (push.iloc.1 . 1)
         (apply.gloc.of original-id (original-id |name`909*|)))
       (push)
       (apply.gloc.of
         set-closure-comment!
         (set-closure-comment! (caddr |body`923*|) (original-id |name`909*|))))
     (touch.gloc.of set-closure-comment!)
     (push.iloc.0 . 0)
     (call
       (touch.gloc.of original-id)
       (push.iloc.1 . 1)
       (apply.gloc.of original-id (original-id |name`909*|)))
     (push)
     (apply.gloc.of
       set-closure-comment!
       (set-closure-comment! |body`923*| (original-id |name`909*|))))
   (subr.gloc.of current-macro-environment 0)
   (push)
   (push.iloc.1 . 1)
   (subr.gloc.of
     core-hashtable-delete!
     2
     (core-hashtable-delete! (current-macro-environment) |name`909*|))
   (touch.gloc.of annotate)
   (push.const . define)
   (push.iloc.1 . 1)
   (push.iloc.0 . 0)
   (push.subr.gloc.of |.list| 3 (|.list| 'define |name`909*| |body`923*|))
   (push.iloc 4 . 0)
   (apply.gloc.of annotate (annotate (|.list| 'define |name`909*| |body`923*|) |form`899*|)))
 (set.gloc.of expand-define)
 (ret.const.unspec))

;
((close
   (3 0 . warning-contract-violation)
   (push.close
     (1 0)
     (touch.gloc.of display-warning)
     (push.const . "warning: binding construct may attempt to reference uninitialized variable ~u")
     (push.iloc.0 . 0)
     (push.subr.gloc.of format 2 "./boot/macro/derived.scm" . 9225)
     (push.iloc.1 . 0)
     (call
       (touch.gloc.of any1)
       (push.close
         (1 0)
         (call
           (touch.gloc.of check-rec-contract-violation)
           (push.iloc.1 . 0)
           (push.subr.gloc.of list 1 "./boot/macro/derived.scm" . 11326)
           (push.iloc.0 . 0)
           (apply.gloc.of check-rec-contract-violation "./boot/macro/derived.scm" . 11296))
         (if.false.ret)
         (ret.iloc 0 . 0))
       (push.iloc.1 . 1)
       (apply.gloc.of any1 "./boot/macro/derived.scm" . 11273))
     (push)
     (apply.gloc.of display-warning "./boot/macro/derived.scm" . 8200))
   (push.iloc.0 . 2)
   (apply.gloc.of for-each "./boot/macro/derived.scm" . 6149))
 (set.gloc.of warning-contract-violation)
 (ret.const.unspec))
((close
   (2 0 . expand-let)
   (call
     (iloc.0 . 0)
     (if.not.pair?.ret.const . #f)
     (cdr.iloc (0 . 0) "./boot/macro/derived.scm" . 16389)
     (ret.pair? "./boot/macro/derived.scm" . 16389))
   (push)
   (extend . 1)
   (call
     (iloc.0 . 0)
     (if.false.ret)
     (cddr.iloc (1 . 0) "./boot/macro/derived.scm" . 16389)
     (if.not.pair?.ret.const . #f)
     (push.iloc.1 . 0)
     (push.subr.gloc.of cdddr 1 "./boot/macro/derived.scm" . 16389)
     (subr.gloc.of list? 1 "./boot/macro/derived.scm" . 16389)
     (if.false.ret)
     (cadr.iloc (1 . 0) "./boot/macro/derived.scm" . 16389)
     (if.not.symbol?.ret.const . #f)
     (push.iloc.1 . 0)
     (push.subr.gloc.of caddr 1 "./boot/macro/derived.scm" . 16389)
     (ret.subr.gloc.of list? "./boot/macro/derived.scm" . 16389))
   (if.true
     (push.iloc.1 . 0)
     (push.subr.gloc.of cdddr 1 "./boot/macro/derived.scm" . 16389)
     (push.iloc.1 . 0)
     (push.subr.gloc.of caddr 1 "./boot/macro/derived.scm" . 16389)
     (push.cadr.iloc (1 . 0) "./boot/macro/derived.scm" . 16389)
     (extend . 3)
     (call
       (touch.gloc.of check-let-bindings)
       (push.iloc 2 . 0)
       (push.iloc.0 . 1)
       (apply.gloc.of check-let-bindings "./boot/macro/derived.scm" . 16389))
     (touch.gloc.of expand-form)
     (call
       (touch.gloc.of annotate)
       (push.const . |.LET|)
       (push.iloc.0 . 1)
       (push.const . |.LETREC*|)
       (push.iloc.0 . 2)
       (push.const . |.LAMBDA|)
       (call
         (push.gloc.of car)
         (push.iloc.0 . 1)
         (apply.gloc.of map "./boot/macro/derived.scm" . 16389))
       (push)
       (push.iloc.0 . 0)
       (push.subr.gloc.of |.cons*| 3 "./boot/macro/derived.scm" . 16389)
       (push.subr.gloc.of |.list| 2 "./boot/macro/derived.scm" . 16389)
       (push.subr.gloc.of |.list| 1 "./boot/macro/derived.scm" . 16389)
       (push.iloc.0 . 2)
       (call
         (push.gloc.of car)
         (push.iloc.0 . 1)
         (apply.gloc.of map "./boot/macro/derived.scm" . 16389))
       (push.cons)
       (push.subr.gloc.of |.list| 3 "./boot/macro/derived.scm" . 16389)
       (push.subr.gloc.of |.list| 3 "./boot/macro/derived.scm" . 16389)
       (push.iloc 2 . 0)
       (apply.gloc.of annotate "./boot/macro/derived.scm" . 16389))
     (push)
     (push.iloc 2 . 1)
     (apply.gloc.of expand-form "./boot/macro/derived.scm" . 16389))
   (call
     (iloc.0 . 0)
     (if.false.ret)
     (cadr.iloc (1 . 0) "./boot/macro/derived.scm" . 16389)
     (if.not.null?.ret.const . #f)
     (push.cddr.iloc (1 . 0) "./boot/macro/derived.scm" . 16389)
     (ret.subr.gloc.of list? "./boot/macro/derived.scm" . 16389))
   (if.true
     (call
       (touch.gloc.of expand-body)
       (push.iloc.1 . 0)
       (push.cddr.iloc (1 . 0) "./boot/macro/derived.scm" . 16389)
       (push.iloc.1 . 1)
       (apply.gloc.of expand-body "./boot/macro/derived.scm" . 16389))
     (push)
     (extend . 1)
     (iloc.0 . 0)
     (if.null?
       (push.car.iloc (2 . 0) "./boot/macro/derived.scm" . 16389)
       (push.const . "empty body")
       (push.iloc 2 . 0)
       (apply.gloc.of syntax-violation "./boot/macro/derived.scm" . 16389))
     (touch.gloc.of annotate)
     (push.const . let)
     (push.const)
     (push.iloc.0 . 0)
     (push.subr.gloc.of |.cons*| 3 "./boot/macro/derived.scm" . 16389)
     (push.iloc 2 . 0)
     (apply.gloc.of annotate "./boot/macro/derived.scm" . 16389))
   (call
     (iloc.0 . 0)
     (if.false.ret)
     (push.cddr.iloc (1 . 0) "./boot/macro/derived.scm" . 16389)
     (ret.subr.gloc.of list? "./boot/macro/derived.scm" . 16389))
   (if.true
     (push.cadr.iloc (1 . 0) "./boot/macro/derived.scm" . 16389)
     (extend . 1)
     (call
       (touch.gloc.of check-let-bindings)
       (push.iloc 2 . 0)
       (push.iloc.0 . 0)
       (apply.gloc.of check-let-bindings "./boot/macro/derived.scm" . 16389))
     (call
       (push.gloc.of car)
       (push.iloc.0 . 0)
       (apply.gloc.of map "./boot/macro/derived.scm" . 16389))
     (push)
     (call
       (push.close
         (1 0)
         (touch.gloc.of expand-form)
         (push.cadr.iloc (0 . 0) "./boot/macro/derived.scm" . 16389)
         (push.iloc 3 . 1)
         (apply.gloc.of expand-form "./boot/macro/derived.scm" . 16389))
       (push.iloc.0 . 0)
       (apply.gloc.of map "./boot/macro/derived.scm" . 16389))
     (push)
     (call
       (touch.gloc.of fresh-rename-count)
       (apply.gloc.of fresh-rename-count "./boot/macro/derived.scm" . 16389))
     (push)
     (extend . 3)
     (call
       (push.close
         (1 0)
         (touch.gloc.of rename-variable-id)
         (push.iloc.0 . 0)
         (push.iloc.1 . 2)
         (apply.gloc.of rename-variable-id "./boot/macro/derived.scm" . 16389))
       (push.iloc.0 . 0)
       (apply.gloc.of map "./boot/macro/derived.scm" . 16389))
     (push)
     (extend . 1)
     (call
       (touch.gloc.of expand-body)
       (push.iloc 4 . 0)
       (push.cddr.iloc (4 . 0) "./boot/macro/derived.scm" . 16389)
       (call
         (touch.gloc.of extend-env)
         (call
           (push.gloc.of cons)
           (push.iloc.1 . 0)
           (push.iloc.0 . 0)
           (apply.gloc.of map "./boot/macro/derived.scm" . 16389))
         (push)
         (push.iloc 4 . 1)
         (apply.gloc.of extend-env "./boot/macro/derived.scm" . 16389))
       (push)
       (apply.gloc.of expand-body "./boot/macro/derived.scm" . 16389))
     (push)
     (extend . 1)
     (iloc.0 . 0)
     (if.null?
       (push.car.iloc (5 . 0) "./boot/macro/derived.scm" . 16389)
       (push.const . "empty body")
       (push.iloc 5 . 0)
       (apply.gloc.of syntax-violation "./boot/macro/derived.scm" . 16389))
     (call
       (touch.gloc.of annotate-bindings)
       (push.iloc 2 . 0)
       (push.iloc 2 . 1)
       (push.iloc 5 . 1)
       (apply.gloc.of annotate-bindings "./boot/macro/derived.scm" . 16389))
     (touch.gloc.of annotate)
     (push.const . let)
     (call
       (push.gloc.of list)
       (push.iloc.1 . 0)
       (push.iloc 2 . 1)
       (apply.gloc.of map "./boot/macro/derived.scm" . 16389))
     (push)
     (push.iloc.0 . 0)
     (push.subr.gloc.of |.cons*| 3 "./boot/macro/derived.scm" . 16389)
     (push.iloc 5 . 0)
     (apply.gloc.of annotate "./boot/macro/derived.scm" . 16389))
   (push.car.iloc (1 . 0) "./boot/macro/derived.scm" . 16389)
   (push.const . "expected bindings and body")
   (push.iloc.1 . 0)
   (apply.gloc.of syntax-violation "./boot/macro/derived.scm" . 16389))
 (set.gloc.of expand-let)
 (ret.const.unspec))
((close
   (2 0)
   (push.const . set!)
   (push.iloc.0 . 0)
   (push.iloc.0 . 1)
   (ret.subr.gloc.of |.list| "./boot/macro/derived.scm" . 48131))
 (set.gloc.of |.L319|)
 (close
   (1 0)
   (push.iloc.0 . 0)
   (push.const . |.&UNDEF|)
   (ret.subr.gloc.of list "./boot/macro/derived.scm" . 48131))
 (set.gloc.of |.L320|)
 (close
   (2 0 . expand-letrec*)
   (call
     (iloc.0 . 0)
     (if.not.pair?.ret.const . #f)
     (cdr.iloc (0 . 0) "./boot/macro/derived.scm" . 48131)
     (ret.pair? "./boot/macro/derived.scm" . 48131))
   (push)
   (extend . 1)
   (call
     (iloc.0 . 0)
     (if.false.ret)
     (cadr.iloc (1 . 0) "./boot/macro/derived.scm" . 48131)
     (if.not.null?.ret.const . #f)
     (push.cddr.iloc (1 . 0) "./boot/macro/derived.scm" . 48131)
     (ret.subr.gloc.of list? "./boot/macro/derived.scm" . 48131))
   (if.true
     (call
       (touch.gloc.of expand-body)
       (push.iloc.1 . 0)
       (push.cddr.iloc (1 . 0) "./boot/macro/derived.scm" . 48131)
       (push.iloc.1 . 1)
       (apply.gloc.of expand-body "./boot/macro/derived.scm" . 48131))
     (push)
     (extend . 1)
     (iloc.0 . 0)
     (if.null?
       (push.car.iloc (2 . 0) "./boot/macro/derived.scm" . 48131)
       (push.const . "empty body")
       (push.iloc 2 . 0)
       (apply.gloc.of syntax-violation "./boot/macro/derived.scm" . 48131))
     (touch.gloc.of annotate)
     (push.const . let)
     (push.const)
     (push.iloc.0 . 0)
     (push.subr.gloc.of |.cons*| 3 "./boot/macro/derived.scm" . 48131)
     (push.iloc 2 . 0)
     (apply.gloc.of annotate "./boot/macro/derived.scm" . 48131))
   (iloc.0 . 0)
   (if.false.ret)
   (push.cddr.iloc (1 . 0) "./boot/macro/derived.scm" . 48131)
   (subr.gloc.of list? 1 "./boot/macro/derived.scm" . 48131)
   (if.false.ret)
   (push.cadr.iloc (1 . 0) "./boot/macro/derived.scm" . 48131)
   (extend . 1)
   (call
     (touch.gloc.of check-let-bindings)
     (push.iloc 2 . 0)
     (push.iloc.0 . 0)
     (apply.gloc.of check-let-bindings "./boot/macro/derived.scm" . 48131))
   (call
     (push.gloc.of car)
     (push.iloc.0 . 0)
     (apply.gloc.of map "./boot/macro/derived.scm" . 48131))
   (push)
   (call
     (touch.gloc.of fresh-rename-count)
     (apply.gloc.of fresh-rename-count "./boot/macro/derived.scm" . 48131))
   (push)
   (extend . 2)
   (call
     (push.close
       (1 0)
       (touch.gloc.of rename-variable-id)
       (push.iloc.0 . 0)
       (push.iloc.1 . 1)
       (apply.gloc.of rename-variable-id "./boot/macro/derived.scm" . 48131))
     (push.iloc.0 . 0)
     (apply.gloc.of map "./boot/macro/derived.scm" . 48131))
   (push)
   (extend . 1)
   (call
     (touch.gloc.of extend-env)
     (call
       (push.gloc.of cons)
       (push.iloc.1 . 0)
       (push.iloc.0 . 0)
       (apply.gloc.of map "./boot/macro/derived.scm" . 48131))
     (push)
     (push.iloc 4 . 1)
     (apply.gloc.of extend-env "./boot/macro/derived.scm" . 48131))
   (push)
   (extend . 1)
   (call
     (push.close
       (1 0)
       (touch.gloc.of expand-form)
       (push.cadr.iloc (0 . 0) "./boot/macro/derived.scm" . 48131)
       (push.iloc.1 . 0)
       (apply.gloc.of expand-form "./boot/macro/derived.scm" . 48131))
     (push.iloc 3 . 0)
     (apply.gloc.of map "./boot/macro/derived.scm" . 48131))
   (push)
   (call
     (touch.gloc.of expand-body)
     (push.iloc 5 . 0)
     (push.cddr.iloc (5 . 0) "./boot/macro/derived.scm" . 48131)
     (push.iloc.0 . 0)
     (apply.gloc.of expand-body "./boot/macro/derived.scm" . 48131))
   (push)
   (extend . 2)
   (call
     (touch.gloc.of annotate-bindings)
     (push.iloc 3 . 0)
     (push.iloc.0 . 0)
     (push.iloc.1 . 0)
     (apply.gloc.of annotate-bindings "./boot/macro/derived.scm" . 48131))
   (iloc.0 . 1)
   (if.null?
     (push.car.iloc (6 . 0) "./boot/macro/derived.scm" . 48131)
     (push.const . "empty body")
     (push.iloc 6 . 0)
     (apply.gloc.of syntax-violation "./boot/macro/derived.scm" . 48131))
   (call
     (touch.gloc.of check-rec*-contract-violation)
     (push.iloc 2 . 0)
     (push.iloc.0 . 0)
     (apply.gloc.of check-rec*-contract-violation "./boot/macro/derived.scm" . 48131))
   (push)
   (extend . 1)
   (iloc.0 . 0)
   (if.true
     (call
       (subr.gloc.of warning-level 0 "./boot/macro/derived.scm" . 48131)
       (if.false.ret)
       (touch.gloc.of warning-contract-violation)
       (push.iloc 7 . 0)
       (push.iloc.1 . 0)
       (push.iloc.0 . 0)
       (apply.gloc.of warning-contract-violation "./boot/macro/derived.scm" . 48131))
     (touch.gloc.of annotate)
     (push.const . let)
     (call
       (push.gloc.of |.L320|)
       (push.iloc 3 . 0)
       (apply.gloc.of map "./boot/macro/derived.scm" . 48131))
     (push)
     (call
       (push.gloc.of |.L319|)
       (push.iloc 3 . 0)
       (push.iloc.1 . 0)
       (apply.gloc.of map "./boot/macro/derived.scm" . 48131))
     (push)
     (push.const . let)
     (push.const)
     (push.iloc.1 . 1)
     (push.subr.gloc.of |.cons*| 3 "./boot/macro/derived.scm" . 48131)
     (push.subr.gloc.of |.list| 1 "./boot/macro/derived.scm" . 48131)
     (push.subr.gloc.of |.append| 2 "./boot/macro/derived.scm" . 48131)
     (push.subr.gloc.of |.cons*| 3 "./boot/macro/derived.scm" . 48131)
     (push.iloc 7 . 0)
     (apply.gloc.of annotate "./boot/macro/derived.scm" . 48131))
   (touch.gloc.of annotate)
   (push.const . letrec*)
   (call
     (touch.gloc.of rewrite-letrec*-bindings)
     (call
       (push.gloc.of list)
       (push.iloc 3 . 0)
       (push.iloc.1 . 0)
       (apply.gloc.of map "./boot/macro/derived.scm" . 48131))
     (push)
     (push.iloc 2 . 0)
     (apply.gloc.of rewrite-letrec*-bindings "./boot/macro/derived.scm" . 48131))
   (push)
   (push.iloc.1 . 1)
   (push.subr.gloc.of |.cons*| 3 "./boot/macro/derived.scm" . 48131)
   (push.iloc 7 . 0)
   (apply.gloc.of annotate "./boot/macro/derived.scm" . 48131))
 (set.gloc.of expand-letrec*)
 (ret.const.unspec))
((close
   (1 0)
   (push.iloc.0 . 0)
   (push.const . |.&UNDEF|)
   (ret.subr.gloc.of list "./boot/macro/derived.scm" . 76803))
 (set.gloc.of |.L327|)
 (close
   (2 0)
   (push.const . set!)
   (push.iloc.0 . 0)
   (push.iloc.0 . 1)
   (ret.subr.gloc.of |.list| "./boot/macro/derived.scm" . 76803))
 (set.gloc.of |.L328|)
 (close
   (2 0 . expand-letrec)
   (call
     (iloc.0 . 0)
     (if.not.pair?.ret.const . #f)
     (cdr.iloc (0 . 0) "./boot/macro/derived.scm" . 76803)
     (ret.pair? "./boot/macro/derived.scm" . 76803))
   (push)
   (extend . 1)
   (call
     (iloc.0 . 0)
     (if.false.ret)
     (cadr.iloc (1 . 0) "./boot/macro/derived.scm" . 76803)
     (if.not.null?.ret.const . #f)
     (push.cddr.iloc (1 . 0) "./boot/macro/derived.scm" . 76803)
     (ret.subr.gloc.of list? "./boot/macro/derived.scm" . 76803))
   (if.true
     (touch.gloc.of expand-form)
     (call
       (touch.gloc.of annotate)
       (push.const . |.LET|)
       (push.const)
       (push.cddr.iloc (1 . 0) "./boot/macro/derived.scm" . 76803)
       (push.subr.gloc.of |.cons*| 3 "./boot/macro/derived.scm" . 76803)
       (push.iloc.1 . 0)
       (apply.gloc.of annotate "./boot/macro/derived.scm" . 76803))
     (push)
     (push.iloc.1 . 1)
     (apply.gloc.of expand-form "./boot/macro/derived.scm" . 76803))
   (call
     (iloc.0 . 0)
     (if.false.ret)
     (cadr.iloc (1 . 0) "./boot/macro/derived.scm" . 76803)
     (if.not.pair?.ret.const . #f)
     (push.iloc.1 . 0)
     (subr.gloc.of caadr 1 "./boot/macro/derived.scm" . 76803)
     (if.not.pair?.ret.const . #f)
     (push.iloc.1 . 0)
     (subr.gloc.of cdaadr 1 "./boot/macro/derived.scm" . 76803)
     (if.not.pair?.ret.const . #f)
     (push.iloc.1 . 0)
     (push.subr.gloc.of cdaadr 1 "./boot/macro/derived.scm" . 76803)
     (subr.gloc.of cdr 1 "./boot/macro/derived.scm" . 76803)
     (if.not.null?.ret.const . #f)
     (push.iloc.1 . 0)
     (subr.gloc.of cdadr 1 "./boot/macro/derived.scm" . 76803)
     (if.not.null?.ret.const . #f)
     (push.cddr.iloc (1 . 0) "./boot/macro/derived.scm" . 76803)
     (ret.subr.gloc.of list? "./boot/macro/derived.scm" . 76803))
   (if.true
     (touch.gloc.of expand-form)
     (call
       (touch.gloc.of annotate)
       (push.const . |.LETREC*|)
       (push.iloc.1 . 0)
       (push.subr.gloc.of caaadr 1 "./boot/macro/derived.scm" . 76803)
       (push.iloc.1 . 0)
       (push.subr.gloc.of cdaadr 1 "./boot/macro/derived.scm" . 76803)
       (push.subr.gloc.of car 1 "./boot/macro/derived.scm" . 76803)
       (push.subr.gloc.of |.list| 2 "./boot/macro/derived.scm" . 76803)
       (push.subr.gloc.of |.list| 1 "./boot/macro/derived.scm" . 76803)
       (push.cddr.iloc (1 . 0) "./boot/macro/derived.scm" . 76803)
       (push.subr.gloc.of |.cons*| 3 "./boot/macro/derived.scm" . 76803)
       (push.iloc.1 . 0)
       (apply.gloc.of annotate "./boot/macro/derived.scm" . 76803))
     (push)
     (push.iloc.1 . 1)
     (apply.gloc.of expand-form "./boot/macro/derived.scm" . 76803))
   (iloc.0 . 0)
   (if.false.ret)
   (push.cddr.iloc (1 . 0) "./boot/macro/derived.scm" . 76803)
   (subr.gloc.of list? 1 "./boot/macro/derived.scm" . 76803)
   (if.false.ret)
   (push.cadr.iloc (1 . 0) "./boot/macro/derived.scm" . 76803)
   (extend . 1)
   (call
     (touch.gloc.of check-let-bindings)
     (push.iloc 2 . 0)
     (push.iloc.0 . 0)
     (apply.gloc.of check-let-bindings "./boot/macro/derived.scm" . 76803))
   (call
     (push.gloc.of car)
     (push.iloc.0 . 0)
     (apply.gloc.of map "./boot/macro/derived.scm" . 76803))
   (push)
   (call
     (touch.gloc.of fresh-rename-count)
     (apply.gloc.of fresh-rename-count "./boot/macro/derived.scm" . 76803))
   (push)
   (extend . 2)
   (call
     (push.close
       (1 0)
       (touch.gloc.of rename-variable-id)
       (push.iloc.0 . 0)
       (push.iloc.1 . 1)
       (apply.gloc.of rename-variable-id "./boot/macro/derived.scm" . 76803))
     (push.iloc.0 . 0)
     (apply.gloc.of map "./boot/macro/derived.scm" . 76803))
   (push)
   (extend . 1)
   (call
     (touch.gloc.of extend-env)
     (call
       (push.gloc.of cons)
       (push.iloc.1 . 0)
       (push.iloc.0 . 0)
       (apply.gloc.of map "./boot/macro/derived.scm" . 76803))
     (push)
     (push.iloc 4 . 1)
     (apply.gloc.of extend-env "./boot/macro/derived.scm" . 76803))
   (push)
   (extend . 1)
   (call
     (push.close
       (1 0)
       (touch.gloc.of expand-form)
       (push.cadr.iloc (0 . 0) "./boot/macro/derived.scm" . 76803)
       (push.iloc.1 . 0)
       (apply.gloc.of expand-form "./boot/macro/derived.scm" . 76803))
     (push.iloc 3 . 0)
     (apply.gloc.of map "./boot/macro/derived.scm" . 76803))
   (push)
   (call
     (touch.gloc.of expand-body)
     (push.iloc 5 . 0)
     (push.cddr.iloc (5 . 0) "./boot/macro/derived.scm" . 76803)
     (push.iloc.0 . 0)
     (apply.gloc.of expand-body "./boot/macro/derived.scm" . 76803))
   (push)
   (extend . 2)
   (call
     (touch.gloc.of annotate-bindings)
     (push.iloc 3 . 0)
     (push.iloc.0 . 0)
     (push.iloc.1 . 0)
     (apply.gloc.of annotate-bindings "./boot/macro/derived.scm" . 76803))
   (call
     (iloc.0 . 1)
     (if.null?
       (push.car.iloc (6 . 0) "./boot/macro/derived.scm" . 76803)
       (push.const . "empty body")
       (push.iloc 6 . 0)
       (apply.gloc.of syntax-violation "./boot/macro/derived.scm" . 76803))
     (call
       (touch.gloc.of check-rec-contract-violation)
       (push.iloc 2 . 0)
       (push.iloc.0 . 0)
       (apply.gloc.of check-rec-contract-violation "./boot/macro/derived.scm" . 76803))
     (push)
     (extend . 1)
     (iloc.0 . 0)
     (if.true
       (subr.gloc.of warning-level 0 "./boot/macro/derived.scm" . 76803)
       (if.false.ret)
       (touch.gloc.of warning-contract-violation)
       (push.iloc 7 . 0)
       (push.iloc.1 . 0)
       (push.iloc.0 . 0)
       (apply.gloc.of warning-contract-violation "./boot/macro/derived.scm" . 76803))
     (ret.const.unspec))
   (call
     (touch.gloc.of every1)
     (push.close
       (1 0)
       (iloc.0 . 0)
       (if.pair?
         (touch.gloc.of denote-lambda?)
         (push.iloc 2 . 0)
         (push.car.iloc (0 . 0) "./boot/macro/derived.scm" . 76803)
         (apply.gloc.of denote-lambda? "./boot/macro/derived.scm" . 76803))
       (push.iloc.0 . 0)
       (push.subr.gloc.of symbol? 1 "./boot/macro/derived.scm" . 76803)
       (ret.subr.gloc.of not "./boot/macro/derived.scm" . 76803))
     (push.iloc.0 . 0)
     (apply.gloc.of every1 "./boot/macro/derived.scm" . 76803))
   (if.true
     (touch.gloc.of annotate)
     (push.const . letrec*)
     (call
       (touch.gloc.of rewrite-letrec*-bindings)
       (call
         (push.gloc.of list)
         (push.iloc 2 . 0)
         (push.iloc.0 . 0)
         (apply.gloc.of map "./boot/macro/derived.scm" . 76803))
       (push)
       (push.iloc.1 . 0)
       (apply.gloc.of rewrite-letrec*-bindings "./boot/macro/derived.scm" . 76803))
     (push)
     (push.iloc.0 . 1)
     (push.subr.gloc.of |.cons*| 3 "./boot/macro/derived.scm" . 76803)
     (push.iloc 6 . 0)
     (apply.gloc.of annotate "./boot/macro/derived.scm" . 76803))
   (call
     (push.close
       (1 0)
       (touch.gloc.of rename-id)
       (call (apply.gloc.of generate-temporary-symbol "./boot/macro/derived.scm" . 76803))
       (push)
       (push.iloc 4 . 1)
       (apply.gloc.of rename-id "./boot/macro/derived.scm" . 76803))
     (push.iloc 4 . 0)
     (apply.gloc.of map "./boot/macro/derived.scm" . 76803))
   (push)
   (extend . 1)
   (push.const . let)
   (call
     (push.gloc.of |.L327|)
     (push.iloc 3 . 0)
     (apply.gloc.of map "./boot/macro/derived.scm" . 76803))
   (push)
   (push.const . let)
   (call
     (push.gloc.of list)
     (push.iloc.0 . 0)
     (push.iloc.1 . 0)
     (apply.gloc.of map "./boot/macro/derived.scm" . 76803))
   (push)
   (call
     (push.gloc.of |.L328|)
     (push.iloc 3 . 0)
     (push.iloc.0 . 0)
     (apply.gloc.of map "./boot/macro/derived.scm" . 76803))
   (push)
   (push.iloc.1 . 1)
   (push.subr.gloc.of |.append| 2 "./boot/macro/derived.scm" . 76803)
   (push.subr.gloc.of |.cons*| 3 "./boot/macro/derived.scm" . 76803)
   (ret.subr.gloc.of |.list| "./boot/macro/derived.scm" . 76803))
 (set.gloc.of expand-letrec)
 (ret.const.unspec))
((close
   (2 0 . expand-let*)
   (call
     (touch.gloc.of safe-length)
     (push.iloc.0 . 0)
     (apply.gloc.of safe-length "./boot/macro/derived.scm" . 105484))
   (push)
   (push.const . 2)
   (subr.gloc.of > 2 "./boot/macro/derived.scm" . 105481)
   (if.true
     (push.cadr.iloc (0 . 0) "./boot/macro/derived.scm" . 106521)
     (extend . 1)
     (call
       (touch.gloc.of check-let*-bindings)
       (push.iloc.1 . 0)
       (push.iloc.0 . 0)
       (apply.gloc.of check-let*-bindings "./boot/macro/derived.scm" . 107531))
     (touch.gloc.of expand-form)
     (call
       (touch.gloc.of annotate)
       (call
         (extend.enclose+
           (1 0 . loop)
           (iloc.0 . 0)
           (if.null?
             (push.const . |.LET|)
             (push.const)
             (push.cddr.iloc (3 . 0) "./boot/macro/derived.scm" . 112671)
             (ret.subr.gloc.of |.cons*| "./boot/macro/derived.scm" . 111631))
           (push.const . |.LET|)
           (push.car.iloc (0 . 0) "./boot/macro/derived.scm" . 113692)
           (push.subr.gloc.of |.list| 1 "./boot/macro/derived.scm" . 113692)
           (call
             (push.cdr.iloc (0 . 0) "./boot/macro/derived.scm" . 113710)
             (apply.iloc+ (1 . 0) "./boot/macro/derived.scm" . 113704))
           (push)
           (ret.subr.gloc.of |.list| "./boot/macro/derived.scm" . 111631))
         (push.iloc.1 . 0)
         (apply.iloc+ (0 . 0) "./boot/macro/derived.scm" . 111631))
       (push)
       (push.iloc.1 . 0)
       (apply.gloc.of
         annotate
         (annotate
           (letrec* ((|loop`1048*|
                       (lambda (|lst`1049*|)
                         (if (null? |lst`1049*|)
                             (|.cons*| '|.LET| '() (cddr |form`1042*|))
                             (|.list|
                               '|.LET|
                               (|.list| (car |lst`1049*|))
                               (|loop`1048*| (cdr |lst`1049*|)))))))
             (|loop`1048*| |bindings`1044*|))
           |form`1042*|)))
     (push)
     (push.iloc.1 . 1)
     (apply.gloc.of
       expand-form
       (expand-form
         (annotate
           (letrec* ((|loop`1048*|
                       (lambda (|lst`1049*|)
                         (if (null? |lst`1049*|)
                             (|.cons*| '|.LET| '() (cddr |form`1042*|))
                             (|.list|
                               '|.LET|
                               (|.list| (car |lst`1049*|))
                               (|loop`1048*| (cdr |lst`1049*|)))))))
             (|loop`1048*| |bindings`1044*|))
           |form`1042*|)
         |env`1042*|)))
   (push.car.iloc (0 . 0) "./boot/macro/derived.scm" . 116763)
   (push.const . "expected bindings and body")
   (push.iloc.0 . 0)
   (apply.gloc.of syntax-violation "./boot/macro/derived.scm" . 116745))
 (set.gloc.of expand-let*)
 (ret.const.unspec))
((close
   (2 0 . expand-let-values)
   (call
     (iloc.0 . 0)
     (if.not.pair?.ret.const . #f)
     (cdr.iloc (0 . 0) "./boot/macro/derived.scm" . 120837)
     (if.not.pair?.ret.const . #f)
     (push.cddr.iloc (0 . 0) "./boot/macro/derived.scm" . 120837)
     (ret.subr.gloc.of list? "./boot/macro/derived.scm" . 120837))
   (if.true
     (push.cddr.iloc (0 . 0) "./boot/macro/derived.scm" . 120837)
     (push.cadr.iloc (0 . 0) "./boot/macro/derived.scm" . 120837)
     (extend . 2)
     (call
       (push.iloc.0 . 1)
       (subr.gloc.of list? 1 "./boot/macro/derived.scm" . 120837)
       (if.true.ret)
       (push.car.iloc (1 . 0) "./boot/macro/derived.scm" . 120837)
       (push.const . "malformed bindings")
       (push.iloc.1 . 0)
       (apply.gloc.of syntax-violation "./boot/macro/derived.scm" . 120837))
     (call
       (iloc.0 . 0)
       (if.not.null?.ret.const . #f)
       (push.car.iloc (1 . 0) "./boot/macro/derived.scm" . 120837)
       (push.const . "expected bindings and body")
       (push.iloc.1 . 0)
       (apply.gloc.of syntax-violation "./boot/macro/derived.scm" . 120837))
     (call
       (call
         (touch.gloc.of unique-id-list?)
         (call
           (push.gloc.of append)
           (call
             (push.close
               (1 0)
               (call
                 (iloc.0 . 0)
                 (if.not.pair?.ret.const . #f)
                 (cdr.iloc (0 . 0) "./boot/macro/derived.scm" . 120837)
                 (if.not.pair?.ret.const . #f)
                 (cddr.iloc (0 . 0) "./boot/macro/derived.scm" . 120837)
                 (ret.null? "./boot/macro/derived.scm" . 120837))
               (if.true
                 (touch.gloc.of collect-lambda-formals)
                 (push.car.iloc (0 . 0) "./boot/macro/derived.scm" . 120837)
                 (push.iloc 2 . 0)
                 (apply.gloc.of collect-lambda-formals "./boot/macro/derived.scm" . 120837))
               (push.car.iloc (2 . 0) "./boot/macro/derived.scm" . 120837)
               (push.const . "expected each binding consist of formals and expression")
               (push.iloc 2 . 0)
               (apply.gloc.of syntax-violation "./boot/macro/derived.scm" . 120837))
             (push.iloc.0 . 1)
             (apply.gloc.of
               map
               (map (lambda (|binding`1060*|)
                      (if (and (pair? |binding`1060*|)
                               (pair? (cdr |binding`1060*|))
                               (null? (cddr |binding`1060*|)))
                          (collect-lambda-formals (car |binding`1060*|) |form`1052*|)
                          (syntax-violation
                            (car |form`1052*|)
                            "expected each binding consist of formals and expression"
                            |form`1052*|)))
                    |bindings`1058*|)))
           (push)
           (apply.gloc.of
             apply
             (apply
               append
               (map (lambda (|binding`1060*|)
                      (if (and (pair? |binding`1060*|)
                               (pair? (cdr |binding`1060*|))
                               (null? (cddr |binding`1060*|)))
                          (collect-lambda-formals (car |binding`1060*|) |form`1052*|)
                          (syntax-violation
                            (car |form`1052*|)
                            "expected each binding consist of formals and expression"
                            |form`1052*|)))
                    |bindings`1058*|))))
         (push)
         (apply.gloc.of
           unique-id-list?
           (unique-id-list?
             (apply
               append
               (map (lambda (|binding`1060*|)
                      (if (and (pair? |binding`1060*|)
                               (pair? (cdr |binding`1060*|))
                               (null? (cddr |binding`1060*|)))
                          (collect-lambda-formals (car |binding`1060*|) |form`1052*|)
                          (syntax-violation
                            (car |form`1052*|)
                            "expected each binding consist of formals and expression"
                            |form`1052*|)))
                    |bindings`1058*|)))))
       (if.true.ret)
       (push.car.iloc (1 . 0) "./boot/macro/derived.scm" . 120837)
       (push.const . "duplicate formals")
       (push.iloc.1 . 0)
       (apply.gloc.of syntax-violation "./boot/macro/derived.scm" . 120837))
     (touch.gloc.of annotate)
     (call
       (extend.enclose
         (2 0 . loop)
         (iloc.0 . 0)
         (if.null?
           (touch.gloc.of expand-form)
           (push.const . |.LET|)
           (push.const)
           (push.iloc 2 . 0)
           (push.subr.gloc.of |.cons*| 3 "./boot/macro/derived.scm" . 120837)
           (push.iloc.0 . 1)
           (apply.gloc.of expand-form "./boot/macro/derived.scm" . 120837))
         (call
           (car.iloc (0 . 0) "./boot/macro/derived.scm" . 120837)
           (if.not.pair?.ret.const . #f)
           (push.car.iloc (0 . 0) "./boot/macro/derived.scm" . 120837)
           (subr.gloc.of cdr 1 "./boot/macro/derived.scm" . 120837)
           (if.not.pair?.ret.const . #f)
           (push.car.iloc (0 . 0) "./boot/macro/derived.scm" . 120837)
           (subr.gloc.of cddr 1 "./boot/macro/derived.scm" . 120837)
           (ret.null? "./boot/macro/derived.scm" . 120837))
         (if.true
           (push.car.iloc (0 . 0) "./boot/macro/derived.scm" . 120837)
           (push.subr.gloc.of cadr 1 "./boot/macro/derived.scm" . 120837)
           (push.car.iloc (0 . 0) "./boot/macro/derived.scm" . 120837)
           (push.subr.gloc.of car 1 "./boot/macro/derived.scm" . 120837)
           (extend . 2)
           (call
             (touch.gloc.of collect-lambda-formals)
             (push.iloc.0 . 1)
             (push.iloc 4 . 0)
             (apply.gloc.of collect-lambda-formals "./boot/macro/derived.scm" . 120837))
           (push)
           (extend . 1)
           (call
             (touch.gloc.of fresh-rename-count)
             (apply.gloc.of fresh-rename-count "./boot/macro/derived.scm" . 120837))
           (push)
           (extend . 1)
           (call
             (push.gloc.of cons)
             (push.iloc.1 . 0)
             (call
               (push.close
                 (1 0)
                 (touch.gloc.of rename-variable-id)
                 (push.iloc.0 . 0)
                 (push.iloc.1 . 0)
                 (apply.gloc.of rename-variable-id "./boot/macro/derived.scm" . 120837))
               (push.iloc.1 . 0)
               (apply.gloc.of map "./boot/macro/derived.scm" . 120837))
             (push)
             (apply.gloc.of map "./boot/macro/derived.scm" . 120837))
           (push)
           (extend . 1)
           (push.const . |.call-with-values|)
           (push.const . lambda)
           (push.const)
           (call
             (touch.gloc.of expand-form)
             (push.iloc 3 . 0)
             (push.iloc 7 . 1)
             (apply.gloc.of expand-form "./boot/macro/derived.scm" . 120837))
           (push)
           (push.subr.gloc.of |.list| 3 "./boot/macro/derived.scm" . 120837)
           (push.const . lambda)
           (call
             (touch.gloc.of rename-lambda-formals)
             (push.iloc 3 . 1)
             (push.iloc.0 . 0)
             (apply.gloc.of rename-lambda-formals "./boot/macro/derived.scm" . 120837))
           (push)
           (call
             (push.cdr.iloc (4 . 0) "./boot/macro/derived.scm" . 120837)
             (call
               (touch.gloc.of extend-env)
               (push.iloc.0 . 0)
               (push.iloc 4 . 1)
               (apply.gloc.of extend-env "./boot/macro/derived.scm" . 120837))
             (push)
             (apply.iloc (5 . 0) "./boot/macro/derived.scm" . 120837))
           (push)
           (push.subr.gloc.of |.list| 3 "./boot/macro/derived.scm" . 120837)
           (ret.subr.gloc.of |.list| "./boot/macro/derived.scm" . 120837))
         (push.const . "internal error: let-values: ~m")
         (push.iloc 3 . 0)
         (apply.gloc.of scheme-error "./boot/macro/derived.scm" . 120837))
       (push.iloc.1 . 1)
       (push.iloc 2 . 1)
       (apply.iloc (0 . 0) "./boot/macro/derived.scm" . 120837))
     (push)
     (push.iloc.1 . 0)
     (apply.gloc.of
       annotate
       (annotate
         (letrec* ((|loop`1073*|
                     (lambda (|lst`1074*| |env`1074*|)
                       (if (null? |lst`1074*|)
                           (expand-form (|.cons*| '|.LET| '() |body`1058*|) |env`1074*|)
                           (if (and (pair? (car |lst`1074*|))
                                    (pair? (cdr (car |lst`1074*|)))
                                    (null? (cddr (car |lst`1074*|))))
                               (let ((|init`1080*| (cadr (car |lst`1074*|)))
                                     (|formals`1080*| (car (car |lst`1074*|))))
                                 (let ((|vars`1082*|
                                         (collect-lambda-formals |formals`1080*| |form`1052*|)))
                                   (let ((|suffix`1084*| (fresh-rename-count)))
                                     (let ((|renames`1088*|
                                             (map cons
                                                  |vars`1082*|
                                                  (map (lambda (|id`1086*|)
                                                         (rename-variable-id
                                                           |id`1086*|
                                                           |suffix`1084*|))
                                                       |vars`1082*|))))
                                       (|.list|
                                         '|.call-with-values|
                                         (|.list|
                                           'lambda
                                           '()
                                           (expand-form |init`1080*| |env`1052*|))
                                         (|.list|
                                           'lambda
                                           (rename-lambda-formals |formals`1080*| |renames`1088*|)
                                           (|loop`1073*|
                                             (cdr |lst`1074*|)
                                             (extend-env |renames`1088*| |env`1074*|))))))))
                               (scheme-error "internal error: let-values: ~m" |form`1052*|))))))
           (|loop`1073*| |bindings`1058*| |env`1052*|))
         |form`1052*|)))
   (push.car.iloc (0 . 0) "./boot/macro/derived.scm" . 120837)
   (push.const . "expected bindings and body")
   (push.iloc.0 . 0)
   (apply.gloc.of syntax-violation "./boot/macro/derived.scm" . 120837))
 (set.gloc.of expand-let-values)
 (ret.const.unspec))
((close
   (2 0 . expand-do)
   (call
     (iloc.0 . 0)
     (if.not.pair?.ret.const . #f)
     (cdr.iloc (0 . 0) "./boot/macro/derived.scm" . 162821)
     (if.not.pair?.ret.const . #f)
     (cddr.iloc (0 . 0) "./boot/macro/derived.scm" . 162821)
     (if.not.pair?.ret.const . #f)
     (push.iloc.0 . 0)
     (subr.gloc.of caddr 1 "./boot/macro/derived.scm" . 162821)
     (if.not.pair?.ret.const . #f)
     (push.iloc.0 . 0)
     (push.subr.gloc.of cdaddr 1 "./boot/macro/derived.scm" . 162821)
     (subr.gloc.of list? 1 "./boot/macro/derived.scm" . 162821)
     (if.false.ret)
     (push.iloc.0 . 0)
     (push.subr.gloc.of cdddr 1 "./boot/macro/derived.scm" . 162821)
     (ret.subr.gloc.of list? "./boot/macro/derived.scm" . 162821))
   (if.true
     (push.iloc.0 . 0)
     (push.subr.gloc.of cdddr 1 "./boot/macro/derived.scm" . 162821)
     (push.iloc.0 . 0)
     (push.subr.gloc.of cdaddr 1 "./boot/macro/derived.scm" . 162821)
     (push.iloc.0 . 0)
     (push.subr.gloc.of caaddr 1 "./boot/macro/derived.scm" . 162821)
     (push.cadr.iloc (0 . 0) "./boot/macro/derived.scm" . 162821)
     (extend . 4)
     (call
       (push.iloc.0 . 3)
       (subr.gloc.of list? 1 "./boot/macro/derived.scm" . 162821)
       (if.true.ret)
       (push.car.iloc (1 . 0) "./boot/macro/derived.scm" . 162821)
       (push.const . "malformed (variable init update)")
       (push.iloc.1 . 0)
       (push.iloc.0 . 3)
       (apply.gloc.of syntax-violation "./boot/macro/derived.scm" . 162821))
     (call (apply.gloc.of generate-temporary-symbol "./boot/macro/derived.scm" . 162821))
     (push)
     (call
       (push.close
         (1 0)
         (call
           (iloc.0 . 0)
           (if.not.pair?.ret.const . #f)
           (cdr.iloc (0 . 0) "./boot/macro/derived.scm" . 162821)
           (ret.pair? "./boot/macro/derived.scm" . 162821))
         (push)
         (extend . 1)
         (call
           (iloc.0 . 0)
           (if.false.ret)
           (cddr.iloc (1 . 0) "./boot/macro/derived.scm" . 162821)
           (ret.null? "./boot/macro/derived.scm" . 162821))
         (if.true (push.iloc.1 . 0) (ret.subr.gloc.of car "./boot/macro/derived.scm" . 162821))
         (call
           (iloc.0 . 0)
           (if.false.ret)
           (cddr.iloc (1 . 0) "./boot/macro/derived.scm" . 162821)
           (if.not.pair?.ret.const . #f)
           (push.iloc.1 . 0)
           (subr.gloc.of cdddr 1 "./boot/macro/derived.scm" . 162821)
           (ret.null? "./boot/macro/derived.scm" . 162821))
         (if.true (push.iloc.1 . 0) (ret.subr.gloc.of caddr "./boot/macro/derived.scm" . 162821))
         (push.car.iloc (3 . 0) "./boot/macro/derived.scm" . 162821)
         (push.const . "malformed (variable init update)")
         (push.iloc 3 . 0)
         (push.iloc.1 . 0)
         (apply.gloc.of syntax-violation "./boot/macro/derived.scm" . 162821))
       (push.iloc.0 . 3)
       (apply.gloc.of
         map
         (map (lambda (|clause`1111*|)
                (let ((|.L344`1113`1116*|
                        (and (pair? |clause`1111*|) (pair? (cdr |clause`1111*|)))))
                  (if (and |.L344`1113`1116*| (null? (cddr |clause`1111*|)))
                      (car |clause`1111*|)
                      (if (and |.L344`1113`1116*|
                               (pair? (cddr |clause`1111*|))
                               (null? (cdddr |clause`1111*|)))
                          (caddr |clause`1111*|)
                          (syntax-violation
                            (car |form`1094*|)
                            "malformed (variable init update)"
                            |form`1094*|
                            |clause`1111*|)))))
              |clauses`1100*|)))
     (push)
     (extend . 2)
     (touch.gloc.of expand-form)
     (call
       (touch.gloc.of annotate)
       (push.const . |.LET|)
       (push.iloc.0 . 0)
       (call
         (push.close
           (1 0)
           (call
             (iloc.0 . 0)
             (if.not.pair?.ret.const . #f)
             (cdr.iloc (0 . 0) "./boot/macro/derived.scm" . 162821)
             (if.not.pair?.ret.const . #f)
             (push.car.iloc (0 . 0) "./boot/macro/derived.scm" . 162821)
             (ret.subr.gloc.of symbol? "./boot/macro/derived.scm" . 162821))
           (if.true
             (push.car.iloc (0 . 0) "./boot/macro/derived.scm" . 162821)
             (push.cadr.iloc (0 . 0) "./boot/macro/derived.scm" . 162821)
             (ret.subr.gloc.of list "./boot/macro/derived.scm" . 162821))
           (push.car.iloc (3 . 0) "./boot/macro/derived.scm" . 162821)
           (push.const . "malformed (variable init update)")
           (push.iloc 3 . 0)
           (push.iloc.0 . 0)
           (apply.gloc.of syntax-violation "./boot/macro/derived.scm" . 162821))
         (push.iloc.1 . 3)
         (apply.gloc.of
           map
           (map (lambda (|clause`1102*|)
                  (if (and (pair? |clause`1102*|)
                           (pair? (cdr |clause`1102*|))
                           (symbol? (car |clause`1102*|)))
                      (list (car |clause`1102*|) (cadr |clause`1102*|))
                      (syntax-violation
                        (car |form`1094*|)
                        "malformed (variable init update)"
                        |form`1094*|
                        |clause`1102*|)))
                |clauses`1100*|)))
       (push)
       (push.const . |.IF|)
       (push.iloc.1 . 2)
       (call
         (iloc.1 . 1)
         (if.null? (ret.const |.UNSPECIFIED|))
         (push.const . |.BEGIN|)
         (iloc.1 . 1)
         (ret.cons "./boot/macro/derived.scm" . 162821))
       (push)
       (push.const . |.BEGIN|)
       (push.iloc.1 . 0)
       (push.iloc.0 . 0)
       (iloc.0 . 1)
       (push.cons)
       (push.subr.gloc.of |.list| 1 "./boot/macro/derived.scm" . 162821)
       (subr.gloc.of |.append| 2 "./boot/macro/derived.scm" . 162821)
       (push.cons)
       (push.subr.gloc.of |.list| 4 "./boot/macro/derived.scm" . 162821)
       (push.subr.gloc.of
         |.list|
         4
         (|.list|
           '|.LET|
           |temp`1124*|
           (map (lambda (|clause`1102*|)
                  (if (and (pair? |clause`1102*|)
                           (pair? (cdr |clause`1102*|))
                           (symbol? (car |clause`1102*|)))
                      (list (car |clause`1102*|) (cadr |clause`1102*|))
                      (syntax-violation
                        (car |form`1094*|)
                        "malformed (variable init update)"
                        |form`1094*|
                        |clause`1102*|)))
                |clauses`1100*|)
           (|.list|
             '|.IF|
             |test`1100*|
             (if (null? |expr`1100*|) '(|.UNSPECIFIED|) (|.cons| '|.BEGIN| |expr`1100*|))
             (|.cons|
               '|.BEGIN|
               (|.append| |body`1100*| (|.list| (|.cons| |temp`1124*| |updates`1124*|)))))))
       (push.iloc 2 . 0)
       (apply.gloc.of
         annotate
         (annotate
           (|.list|
             '|.LET|
             |temp`1124*|
             (map (lambda (|clause`1102*|)
                    (if (and (pair? |clause`1102*|)
                             (pair? (cdr |clause`1102*|))
                             (symbol? (car |clause`1102*|)))
                        (list (car |clause`1102*|) (cadr |clause`1102*|))
                        (syntax-violation
                          (car |form`1094*|)
                          "malformed (variable init update)"
                          |form`1094*|
                          |clause`1102*|)))
                  |clauses`1100*|)
             (|.list|
               '|.IF|
               |test`1100*|
               (if (null? |expr`1100*|) '(|.UNSPECIFIED|) (|.cons| '|.BEGIN| |expr`1100*|))
               (|.cons|
                 '|.BEGIN|
                 (|.append| |body`1100*| (|.list| (|.cons| |temp`1124*| |updates`1124*|))))))
           |form`1094*|)))
     (push)
     (push.iloc 2 . 1)
     (apply.gloc.of
       expand-form
       (expand-form
         (annotate
           (|.list|
             '|.LET|
             |temp`1124*|
             (map (lambda (|clause`1102*|)
                    (if (and (pair? |clause`1102*|)
                             (pair? (cdr |clause`1102*|))
                             (symbol? (car |clause`1102*|)))
                        (list (car |clause`1102*|) (cadr |clause`1102*|))
                        (syntax-violation
                          (car |form`1094*|)
                          "malformed (variable init update)"
                          |form`1094*|
                          |clause`1102*|)))
                  |clauses`1100*|)
             (|.list|
               '|.IF|
               |test`1100*|
               (if (null? |expr`1100*|) '(|.UNSPECIFIED|) (|.cons| '|.BEGIN| |expr`1100*|))
               (|.cons|
                 '|.BEGIN|
                 (|.append| |body`1100*| (|.list| (|.cons| |temp`1124*| |updates`1124*|))))))
           |form`1094*|)
         |env`1094*|)))
   (push.car.iloc (0 . 0) "./boot/macro/derived.scm" . 162821)
   (push.const . "expected (variable init update), test, and command")
   (push.iloc.0 . 0)
   (apply.gloc.of syntax-violation "./boot/macro/derived.scm" . 162821))
 (set.gloc.of expand-do)
 (ret.const.unspec))
((close
   (2 0 . expand-let*-values)
   (call
     (iloc.0 . 0)
     (if.not.pair?.ret.const . #f)
     (cdr.iloc (0 . 0) "./boot/macro/derived.scm" . 195589)
     (if.not.pair?.ret.const . #f)
     (push.cddr.iloc (0 . 0) "./boot/macro/derived.scm" . 195589)
     (ret.subr.gloc.of list? "./boot/macro/derived.scm" . 195589))
   (if.true
     (push.cddr.iloc (0 . 0) "./boot/macro/derived.scm" . 195589)
     (push.cadr.iloc (0 . 0) "./boot/macro/derived.scm" . 195589)
     (extend . 2)
     (call
       (push.iloc.0 . 1)
       (subr.gloc.of list? 1 "./boot/macro/derived.scm" . 195589)
       (if.true.ret)
       (push.car.iloc (1 . 0) "./boot/macro/derived.scm" . 195589)
       (push.const . "malformed bindings")
       (push.iloc.1 . 0)
       (apply.gloc.of syntax-violation "./boot/macro/derived.scm" . 195589))
     (call
       (iloc.0 . 0)
       (if.not.null?.ret.const . #f)
       (push.car.iloc (1 . 0) "./boot/macro/derived.scm" . 195589)
       (push.const . "missing body")
       (push.iloc.1 . 0)
       (apply.gloc.of syntax-violation "./boot/macro/derived.scm" . 195589))
     (touch.gloc.of expand-form)
     (call
       (touch.gloc.of annotate)
       (call
         (extend.enclose
           (1 0 . loop)
           (iloc.0 . 0)
           (if.null?
             (push.const . |.LET|)
             (push.const)
             (push.iloc 2 . 0)
             (ret.subr.gloc.of |.cons*| "./boot/macro/derived.scm" . 195589))
           (call
             (car.iloc (0 . 0) "./boot/macro/derived.scm" . 195589)
             (if.not.pair?.ret.const . #f)
             (push.car.iloc (0 . 0) "./boot/macro/derived.scm" . 195589)
             (subr.gloc.of cdr 1 "./boot/macro/derived.scm" . 195589)
             (if.not.pair?.ret.const . #f)
             (push.car.iloc (0 . 0) "./boot/macro/derived.scm" . 195589)
             (subr.gloc.of cddr 1 "./boot/macro/derived.scm" . 195589)
             (ret.null? "./boot/macro/derived.scm" . 195589))
           (if.true
             (push.const . |.CALL-WITH-VALUES|)
             (push.const . |.LAMBDA|)
             (push.const)
             (push.car.iloc (0 . 0) "./boot/macro/derived.scm" . 195589)
             (push.subr.gloc.of cadr 1 "./boot/macro/derived.scm" . 195589)
             (push.subr.gloc.of |.list| 3 "./boot/macro/derived.scm" . 195589)
             (push.const . |.LAMBDA|)
             (push.car.iloc (0 . 0) "./boot/macro/derived.scm" . 195589)
             (push.subr.gloc.of car 1 "./boot/macro/derived.scm" . 195589)
             (call
               (push.cdr.iloc (0 . 0) "./boot/macro/derived.scm" . 195589)
               (apply.iloc (1 . 0) "./boot/macro/derived.scm" . 195589))
             (push)
             (push.subr.gloc.of |.list| 3 "./boot/macro/derived.scm" . 195589)
             (ret.subr.gloc.of |.list| "./boot/macro/derived.scm" . 195589))
           (push.car.iloc (3 . 0) "./boot/macro/derived.scm" . 195589)
           (push.const . "expected each binding consist of formals and expression")
           (push.iloc 3 . 0)
           (push.car.iloc (0 . 0) "./boot/macro/derived.scm" . 195589)
           (apply.gloc.of syntax-violation "./boot/macro/derived.scm" . 195589))
         (push.iloc.1 . 1)
         (apply.iloc (0 . 0) "./boot/macro/derived.scm" . 195589))
       (push)
       (push.iloc.1 . 0)
       (apply.gloc.of
         annotate
         (annotate
           (letrec* ((|loop`1137*|
                       (lambda (|lst`1138*|)
                         (if (null? |lst`1138*|)
                             (|.cons*| '|.LET| '() |body`1133*|)
                             (if (and (pair? (car |lst`1138*|))
                                      (pair? (cdr (car |lst`1138*|)))
                                      (null? (cddr (car |lst`1138*|))))
                                 (|.list|
                                   '|.CALL-WITH-VALUES|
                                   (|.list| '|.LAMBDA| '() (cadr (car |lst`1138*|)))
                                   (|.list|
                                     '|.LAMBDA|
                                     (car (car |lst`1138*|))
                                     (|loop`1137*| (cdr |lst`1138*|))))
                                 (syntax-violation
                                   (car |form`1127*|)
                                   "expected each binding consist of formals and expression"
                                   |form`1127*|
                                   (car |lst`1138*|)))))))
             (|loop`1137*| |bindings`1133*|))
           |form`1127*|)))
     (push)
     (push.iloc.1 . 1)
     (apply.gloc.of
       expand-form
       (expand-form
         (annotate
           (letrec* ((|loop`1137*|
                       (lambda (|lst`1138*|)
                         (if (null? |lst`1138*|)
                             (|.cons*| '|.LET| '() |body`1133*|)
                             (if (and (pair? (car |lst`1138*|))
                                      (pair? (cdr (car |lst`1138*|)))
                                      (null? (cddr (car |lst`1138*|))))
                                 (|.list|
                                   '|.CALL-WITH-VALUES|
                                   (|.list| '|.LAMBDA| '() (cadr (car |lst`1138*|)))
                                   (|.list|
                                     '|.LAMBDA|
                                     (car (car |lst`1138*|))
                                     (|loop`1137*| (cdr |lst`1138*|))))
                                 (syntax-violation
                                   (car |form`1127*|)
                                   "expected each binding consist of formals and expression"
                                   |form`1127*|
                                   (car |lst`1138*|)))))))
             (|loop`1137*| |bindings`1133*|))
           |form`1127*|)
         |env`1127*|)))
   (push.car.iloc (0 . 0) "./boot/macro/derived.scm" . 195589)
   (push.const . "expected bindings and body")
   (push.iloc.0 . 0)
   (apply.gloc.of syntax-violation "./boot/macro/derived.scm" . 195589))
 (set.gloc.of expand-let*-values)
 (ret.const.unspec))
((close
   (2 0 . expand-cond)
   (extend.unbound . 3)
   (push.close+
     (1 0 . else?)
     (touch.gloc.of denote-else?)
     (push.iloc 2 . 1)
     (push.iloc.0 . 0)
     (apply.gloc.of denote-else? "./boot/macro/derived.scm" . 224288))
   (push.close+
     (1 0 . =>?)
     (touch.gloc.of denote-=>?)
     (push.iloc 2 . 1)
     (push.iloc.0 . 0)
     (apply.gloc.of denote-=>? "./boot/macro/derived.scm" . 225310))
   (push.close+
     (1 0 . lambda?)
     (touch.gloc.of denote-lambda?)
     (push.iloc 2 . 1)
     (push.iloc.0 . 0)
     (apply.gloc.of denote-lambda? "./boot/macro/derived.scm" . 226338))
   (enclose . 3)
   (call
     (touch.gloc.of safe-length)
     (push.iloc.1 . 0)
     (apply.gloc.of safe-length "./boot/macro/derived.scm" . 228367))
   (push)
   (push.const . 1)
   (subr.gloc.of > 2 "./boot/macro/derived.scm" . 228364)
   (if.true
     (touch.gloc.of expand-form)
     (call
       (touch.gloc.of annotate)
       (call
         (extend.enclose+
           (1 0 . loop)
           (iloc.0 . 0)
           (if.null?.ret.const |.UNSPECIFIED|)
           (push.car.iloc (0 . 0) "./boot/macro/derived.scm" . 234530)
           (extend . 1)
           (call
             (iloc.0 . 0)
             (if.not.pair?.ret.const . #f)
             (cdr.iloc (0 . 0) "./boot/macro/derived.scm" . 235542)
             (if.not.pair?.ret.const . #f)
             (cddr.iloc (0 . 0) "./boot/macro/derived.scm" . 235542)
             (ret.pair? "./boot/macro/derived.scm" . 235542))
           (push)
           (extend . 1)
           (call
             (iloc.1 . 0)
             (if.not.pair?.ret.const . #f)
             (call
               (push.car.iloc (1 . 0) "./boot/macro/derived.scm" . 235542)
               (apply.iloc+ (4 . 0) "./boot/macro/derived.scm" . 235542))
             (if.false.ret)
             (cdr.iloc (1 . 0) "./boot/macro/derived.scm" . 235542)
             (ret.pair? "./boot/macro/derived.scm" . 235542))
           (if.true
             (cdr.iloc (2 . 0) "./boot/macro/derived.scm" . 235542)
             (if.null?
               (push.const . |.BEGIN|)
               (cdr.iloc (1 . 0) "./boot/macro/derived.scm" . 235542)
               (ret.cons "./boot/macro/derived.scm" . 235542))
             (push.car.iloc (5 . 0) "./boot/macro/derived.scm" . 235542)
             (push.const . "misplaced else")
             (push.iloc 5 . 0)
             (push.iloc.1 . 0)
             (apply.gloc.of syntax-violation "./boot/macro/derived.scm" . 235542))
           (call
             (iloc.0 . 0)
             (if.false.ret)
             (push.iloc.1 . 0)
             (subr.gloc.of caddr 1 "./boot/macro/derived.scm" . 235542)
             (if.not.pair?.ret.const . #f)
             (push.iloc.1 . 0)
             (subr.gloc.of cdaddr 1 "./boot/macro/derived.scm" . 235542)
             (if.not.pair?.ret.const . #f)
             (push.iloc.1 . 0)
             (push.subr.gloc.of cdaddr 1 "./boot/macro/derived.scm" . 235542)
             (subr.gloc.of car 1 "./boot/macro/derived.scm" . 235542)
             (if.not.pair?.ret.const . #f)
             (push.iloc.1 . 0)
             (push.subr.gloc.of cdaddr 1 "./boot/macro/derived.scm" . 235542)
             (subr.gloc.of cdar 1 "./boot/macro/derived.scm" . 235542)
             (if.not.null?.ret.const . #f)
             (push.iloc.1 . 0)
             (subr.gloc.of cdddr 1 "./boot/macro/derived.scm" . 235542)
             (if.not.null?.ret.const . #f)
             (push.iloc.1 . 0)
             (push.subr.gloc.of cdaddr 1 "./boot/macro/derived.scm" . 235542)
             (push.subr.gloc.of cdr 1 "./boot/macro/derived.scm" . 235542)
             (subr.gloc.of list? 1 "./boot/macro/derived.scm" . 235542)
             (if.false.ret)
             (call
               (push.cadr.iloc (1 . 0) "./boot/macro/derived.scm" . 235542)
               (apply.iloc+ (4 . 1) "./boot/macro/derived.scm" . 235542))
             (if.false.ret)
             (push.iloc.1 . 0)
             (push.subr.gloc.of caaddr 1 "./boot/macro/derived.scm" . 235542)
             (apply.iloc+ (4 . 2) "./boot/macro/derived.scm" . 235542))
           (if.true
             (push.iloc.1 . 0)
             (push.subr.gloc.of cdaddr 1 "./boot/macro/derived.scm" . 235542)
             (push.subr.gloc.of cdr 1 "./boot/macro/derived.scm" . 235542)
             (push.iloc.1 . 0)
             (push.subr.gloc.of cdaddr 1 "./boot/macro/derived.scm" . 235542)
             (push.subr.gloc.of caar 1 "./boot/macro/derived.scm" . 235542)
             (push.car.iloc (1 . 0) "./boot/macro/derived.scm" . 235542)
             (extend . 3)
             (call (apply.gloc.of generate-temporary-symbol "./boot/macro/derived.scm" . 235542))
             (push)
             (extend . 1)
             (push.const . |.LET|)
             (push.iloc.0 . 0)
             (push.iloc.1 . 2)
             (push.subr.gloc.of |.list| 2 "./boot/macro/derived.scm" . 235542)
             (push.subr.gloc.of |.list| 1 "./boot/macro/derived.scm" . 235542)
             (push.const . |.IF|)
             (push.iloc.0 . 0)
             (push.const . |.LET|)
             (push.iloc.1 . 1)
             (push.iloc.0 . 0)
             (push.subr.gloc.of |.list| 2 "./boot/macro/derived.scm" . 235542)
             (push.subr.gloc.of |.list| 1 "./boot/macro/derived.scm" . 235542)
             (push.iloc.1 . 0)
             (push.subr.gloc.of |.cons*| 3 "./boot/macro/derived.scm" . 235542)
             (call
               (push.cdr.iloc (4 . 0) "./boot/macro/derived.scm" . 235542)
               (apply.iloc+ (5 . 0) "./boot/macro/derived.scm" . 235542))
             (push)
             (push.subr.gloc.of |.list| 4 "./boot/macro/derived.scm" . 235542)
             (ret.subr.gloc.of |.list| "./boot/macro/derived.scm" . 235542))
           (call
             (iloc.0 . 0)
             (if.false.ret)
             (push.iloc.1 . 0)
             (subr.gloc.of cdddr 1 "./boot/macro/derived.scm" . 235542)
             (if.not.null?.ret.const . #f)
             (push.cadr.iloc (1 . 0) "./boot/macro/derived.scm" . 235542)
             (apply.iloc+ (4 . 1) "./boot/macro/derived.scm" . 235542))
           (if.true
             (push.iloc.1 . 0)
             (push.subr.gloc.of caddr 1 "./boot/macro/derived.scm" . 235542)
             (push.car.iloc (1 . 0) "./boot/macro/derived.scm" . 235542)
             (extend . 2)
             (call (apply.gloc.of generate-temporary-symbol "./boot/macro/derived.scm" . 235542))
             (push)
             (extend . 1)
             (push.const . |.LET|)
             (push.iloc.0 . 0)
             (push.iloc.1 . 1)
             (push.subr.gloc.of |.list| 2 "./boot/macro/derived.scm" . 235542)
             (push.subr.gloc.of |.list| 1 "./boot/macro/derived.scm" . 235542)
             (push.const . |.IF|)
             (push.iloc.0 . 0)
             (push.iloc.1 . 0)
             (push.iloc.0 . 0)
             (push.subr.gloc.of |.list| 2 "./boot/macro/derived.scm" . 235542)
             (call
               (push.cdr.iloc (4 . 0) "./boot/macro/derived.scm" . 235542)
               (apply.iloc+ (5 . 0) "./boot/macro/derived.scm" . 235542))
             (push)
             (push.subr.gloc.of |.list| 4 "./boot/macro/derived.scm" . 235542)
             (ret.subr.gloc.of |.list| "./boot/macro/derived.scm" . 235542))
           (call
             (iloc.1 . 0)
             (if.not.pair?.ret.const . #f)
             (cdr.iloc (1 . 0) "./boot/macro/derived.scm" . 235542)
             (ret.null? "./boot/macro/derived.scm" . 235542))
           (if.true
             (push.const . |.OR|)
             (push.car.iloc (1 . 0) "./boot/macro/derived.scm" . 235542)
             (call
               (push.cdr.iloc (2 . 0) "./boot/macro/derived.scm" . 235542)
               (apply.iloc+ (3 . 0) "./boot/macro/derived.scm" . 235542))
             (push)
             (ret.subr.gloc.of |.list| "./boot/macro/derived.scm" . 235542))
           (call
             (iloc.1 . 0)
             (if.not.pair?.ret.const . #f)
             (push.cdr.iloc (1 . 0) "./boot/macro/derived.scm" . 235542)
             (ret.subr.gloc.of list? "./boot/macro/derived.scm" . 235542))
           (if.true
             (push.const . |.IF|)
             (push.car.iloc (1 . 0) "./boot/macro/derived.scm" . 235542)
             (push.const . |.BEGIN|)
             (cdr.iloc (1 . 0) "./boot/macro/derived.scm" . 235542)
             (push.cons)
             (call
               (push.cdr.iloc (2 . 0) "./boot/macro/derived.scm" . 235542)
               (apply.iloc+ (3 . 0) "./boot/macro/derived.scm" . 235542))
             (push)
             (ret.subr.gloc.of |.list| "./boot/macro/derived.scm" . 235542))
           (push.car.iloc (5 . 0) "./boot/macro/derived.scm" . 235542)
           (push.const . "malformed cond clause")
           (push.iloc 5 . 0)
           (push.iloc.1 . 0)
           (apply.gloc.of syntax-violation "./boot/macro/derived.scm" . 235542))
         (push.cdr.iloc (2 . 0) "./boot/macro/derived.scm" . 231454)
         (apply.iloc+ (0 . 0) "./boot/macro/derived.scm" . 232464))
       (push)
       (push.iloc.1 . 0)
       (apply.gloc.of
         annotate
         (annotate
           (letrec* ((|loop`1159*|
                       (lambda (|lst`1160*|)
                         (if (null? |lst`1160*|)
                             '(|.UNSPECIFIED|)
                             (let ((|clause`1162*| (car |lst`1160*|)))
                               (let ((|.L356`1164`1167*|
                                       (and (pair? |clause`1162*|)
                                            (pair? (cdr |clause`1162*|))
                                            (pair? (cddr |clause`1162*|)))))
                                 (if (and (pair? |clause`1162*|)
                                          (|else?`1150*| (car |clause`1162*|))
                                          (pair? (cdr |clause`1162*|)))
                                     (if (null? (cdr |lst`1160*|))
                                         (|.cons| '|.BEGIN| (cdr |clause`1162*|))
                                         (syntax-violation
                                           (car |form`1149*|)
                                           "misplaced else"
                                           |form`1149*|
                                           |clause`1162*|))
                                     (if (and |.L356`1164`1167*|
                                              (pair? (caddr |clause`1162*|))
                                              (pair? (cdaddr |clause`1162*|))
                                              (pair? (car (cdaddr |clause`1162*|)))
                                              (null? (cdar (cdaddr |clause`1162*|)))
                                              (null? (cdddr |clause`1162*|))
                                              (list? (cdr (cdaddr |clause`1162*|)))
                                              (|=>?`1150*| (cadr |clause`1162*|))
                                              (|lambda?`1150*| (caaddr |clause`1162*|)))
                                         (let ((|expr`1172*| (cdr (cdaddr |clause`1162*|)))
                                               (|a`1172*| (caar (cdaddr |clause`1162*|)))
                                               (|test`1172*| (car |clause`1162*|)))
                                           (let ((|temp`1174*| (generate-temporary-symbol)))
                                             (|.list|
                                               '|.LET|
                                               (|.list| (|.list| |temp`1174*| |test`1172*|))
                                               (|.list|
                                                 '|.IF|
                                                 |temp`1174*|
                                                 (|.cons*|
                                                   '|.LET|
                                                   (|.list| (|.list| |a`1172*| |temp`1174*|))
                                                   |expr`1172*|)
                                                 (|loop`1159*| (cdr |lst`1160*|))))))
                                         (if (and |.L356`1164`1167*|
                                                  (null? (cdddr |clause`1162*|))
                                                  (|=>?`1150*| (cadr |clause`1162*|)))
                                             (let ((|result`1176*| (caddr |clause`1162*|))
                                                   (|test`1176*| (car |clause`1162*|)))
                                               (let ((|temp`1178*| (generate-temporary-symbol)))
                                                 (|.list|
                                                   '|.LET|
                                                   (|.list| (|.list| |temp`1178*| |test`1176*|))
                                                   (|.list|
                                                     '|.IF|
                                                     |temp`1178*|
                                                     (|.list| |result`1176*| |temp`1178*|)
                                                     (|loop`1159*| (cdr |lst`1160*|))))))
                                             (if (and (pair? |clause`1162*|)
                                                      (null? (cdr |clause`1162*|)))
                                                 (|.list|
                                                   '|.OR|
                                                   (car |clause`1162*|)
                                                   (|loop`1159*| (cdr |lst`1160*|)))
                                                 (if (and (pair? |clause`1162*|)
                                                          (list? (cdr |clause`1162*|)))
                                                     (|.list|
                                                       '|.IF|
                                                       (car |clause`1162*|)
                                                       (|.cons| '|.BEGIN| (cdr |clause`1162*|))
                                                       (|loop`1159*| (cdr |lst`1160*|)))
                                                     (syntax-violation
                                                       (car |form`1149*|)
                                                       "malformed cond clause"
                                                       |form`1149*|
                                                       |clause`1162*|))))))))))))
             (|loop`1159*| (cdr |form`1149*|)))
           |form`1149*|)))
     (push)
     (push.iloc.1 . 1)
     (apply.gloc.of
       expand-form
       (expand-form
         (annotate
           (letrec* ((|loop`1159*|
                       (lambda (|lst`1160*|)
                         (if (null? |lst`1160*|)
                             '(|.UNSPECIFIED|)
                             (let ((|clause`1162*| (car |lst`1160*|)))
                               (let ((|.L356`1164`1167*|
                                       (and (pair? |clause`1162*|)
                                            (pair? (cdr |clause`1162*|))
                                            (pair? (cddr |clause`1162*|)))))
                                 (if (and (pair? |clause`1162*|)
                                          (|else?`1150*| (car |clause`1162*|))
                                          (pair? (cdr |clause`1162*|)))
                                     (if (null? (cdr |lst`1160*|))
                                         (|.cons| '|.BEGIN| (cdr |clause`1162*|))
                                         (syntax-violation
                                           (car |form`1149*|)
                                           "misplaced else"
                                           |form`1149*|
                                           |clause`1162*|))
                                     (if (and |.L356`1164`1167*|
                                              (pair? (caddr |clause`1162*|))
                                              (pair? (cdaddr |clause`1162*|))
                                              (pair? (car (cdaddr |clause`1162*|)))
                                              (null? (cdar (cdaddr |clause`1162*|)))
                                              (null? (cdddr |clause`1162*|))
                                              (list? (cdr (cdaddr |clause`1162*|)))
                                              (|=>?`1150*| (cadr |clause`1162*|))
                                              (|lambda?`1150*| (caaddr |clause`1162*|)))
                                         (let ((|expr`1172*| (cdr (cdaddr |clause`1162*|)))
                                               (|a`1172*| (caar (cdaddr |clause`1162*|)))
                                               (|test`1172*| (car |clause`1162*|)))
                                           (let ((|temp`1174*| (generate-temporary-symbol)))
                                             (|.list|
                                               '|.LET|
                                               (|.list| (|.list| |temp`1174*| |test`1172*|))
                                               (|.list|
                                                 '|.IF|
                                                 |temp`1174*|
                                                 (|.cons*|
                                                   '|.LET|
                                                   (|.list| (|.list| |a`1172*| |temp`1174*|))
                                                   |expr`1172*|)
                                                 (|loop`1159*| (cdr |lst`1160*|))))))
                                         (if (and |.L356`1164`1167*|
                                                  (null? (cdddr |clause`1162*|))
                                                  (|=>?`1150*| (cadr |clause`1162*|)))
                                             (let ((|result`1176*| (caddr |clause`1162*|))
                                                   (|test`1176*| (car |clause`1162*|)))
                                               (let ((|temp`1178*| (generate-temporary-symbol)))
                                                 (|.list|
                                                   '|.LET|
                                                   (|.list| (|.list| |temp`1178*| |test`1176*|))
                                                   (|.list|
                                                     '|.IF|
                                                     |temp`1178*|
                                                     (|.list| |result`1176*| |temp`1178*|)
                                                     (|loop`1159*| (cdr |lst`1160*|))))))
                                             (if (and (pair? |clause`1162*|)
                                                      (null? (cdr |clause`1162*|)))
                                                 (|.list|
                                                   '|.OR|
                                                   (car |clause`1162*|)
                                                   (|loop`1159*| (cdr |lst`1160*|)))
                                                 (if (and (pair? |clause`1162*|)
                                                          (list? (cdr |clause`1162*|)))
                                                     (|.list|
                                                       '|.IF|
                                                       (car |clause`1162*|)
                                                       (|.cons| '|.BEGIN| (cdr |clause`1162*|))
                                                       (|loop`1159*| (cdr |lst`1160*|)))
                                                     (syntax-violation
                                                       (car |form`1149*|)
                                                       "malformed cond clause"
                                                       |form`1149*|
                                                       |clause`1162*|))))))))))))
             (|loop`1159*| (cdr |form`1149*|)))
           |form`1149*|)
         |env`1149*|)))
   (push.car.iloc (1 . 0) "./boot/macro/derived.scm" . 264222)
   (push.const . "expected cond clause")
   (push.iloc.1 . 0)
   (apply.gloc.of syntax-violation "./boot/macro/derived.scm" . 264204))
 (set.gloc.of expand-cond)
 (ret.const.unspec))
((close
   (2 0 . maplist)
   (iloc.0 . 1)
   (if.null?.ret.const)
   (call (push.iloc.0 . 1) (apply.iloc (0 . 0) "./boot/macro/derived.scm" . 275483))
   (push)
   (call
     (touch.gloc.of |maplist`1187*|)
     (push.iloc.0 . 0)
     (push.cdr.iloc (0 . 1) "./boot/macro/derived.scm" . 275508)
     (apply.gloc.of |maplist`1187*| "./boot/macro/derived.scm" . 275494))
   (ret.cons "./boot/macro/derived.scm" . 275477))
 (set.gloc.of |maplist`1187*|)
 (close
   (2 0 . expand-case)
   (extend.unbound . 2)
   (push.close+
     (1 0 . else?)
     (touch.gloc.of denote-else?)
     (push.iloc 2 . 1)
     (push.iloc.0 . 0)
     (apply.gloc.of denote-else? "./boot/macro/derived.scm" . 269344))
   (push.close+
     (1 0 . =>?)
     (touch.gloc.of denote-=>?)
     (push.iloc 2 . 1)
     (push.iloc.0 . 0)
     (apply.gloc.of denote-=>? "./boot/macro/derived.scm" . 270366))
   (enclose . 2)
   (call
     (iloc.1 . 0)
     (if.not.pair?.ret.const . #f)
     (cdr.iloc (1 . 0) "./boot/macro/derived.scm" . 307256)
     (if.not.pair?.ret.const . #f)
     (cddr.iloc (1 . 0) "./boot/macro/derived.scm" . 307256)
     (ret.pair? "./boot/macro/derived.scm" . 307256))
   (if.true
     (push.cddr.iloc (1 . 0) "./boot/macro/derived.scm" . 307256)
     (push.cadr.iloc (1 . 0) "./boot/macro/derived.scm" . 307256)
     (extend . 2)
     (call (apply.gloc.of generate-temporary-symbol "./boot/macro/derived.scm" . 307256))
     (push)
     (extend . 1)
     (touch.gloc.of expand-form)
     (call
       (touch.gloc.of annotate)
       (push.const . |.LET|)
       (push.iloc.0 . 0)
       (push.iloc.1 . 1)
       (push.subr.gloc.of |.list| 2 "./boot/macro/derived.scm" . 307256)
       (push.subr.gloc.of |.list| 1 "./boot/macro/derived.scm" . 307256)
       (push.const . |.COND|)
       (call
         (touch.gloc.of |maplist`1187*|)
         (push.close
           (1 0)
           (push.gloc.of pair?)
           (extend . 1)
           (call
             (iloc.1 . 0)
             (if.not.pair?.ret.const . #f)
             (car.iloc (1 . 0) "./boot/macro/derived.scm" . 307256)
             (ret.pair? "./boot/macro/derived.scm" . 307256))
           (push)
           (extend . 1)
           (call
             (iloc.0 . 0)
             (if.false.ret)
             (push.iloc 2 . 0)
             (subr.gloc.of cdar 1 "./boot/macro/derived.scm" . 307256)
             (if.not.pair?.ret.const . #f)
             (push.iloc 2 . 0)
             (subr.gloc.of cddar 1 "./boot/macro/derived.scm" . 307256)
             (if.not.pair?.ret.const . #f)
             (push.iloc 2 . 0)
             (subr.gloc.of cdddar 1 "./boot/macro/derived.scm" . 307256)
             (if.not.null?.ret.const . #f)
             (push.cdr.iloc (2 . 0) "./boot/macro/derived.scm" . 307256)
             (ret.subr.gloc.of list? "./boot/macro/derived.scm" . 307256))
           (push)
           (extend . 1)
           (call
             (iloc.1 . 0)
             (if.false.ret)
             (push.cdr.iloc (3 . 0) "./boot/macro/derived.scm" . 307256)
             (ret.subr.gloc.of list? "./boot/macro/derived.scm" . 307256))
           (push)
           (extend . 1)
           (call
             (iloc 2 . 0)
             (if.false.ret)
             (push.iloc 4 . 0)
             (subr.gloc.of caar 1 "./boot/macro/derived.scm" . 307256)
             (ret.pair? "./boot/macro/derived.scm" . 307256))
           (push)
           (extend . 1)
           (call
             (iloc 2 . 0)
             (if.false.ret)
             (call
               (push.iloc 5 . 0)
               (push.subr.gloc.of caar 1 "./boot/macro/derived.scm" . 307256)
               (apply.iloc+ (8 . 0) "./boot/macro/derived.scm" . 307256))
             (if.false.ret)
             (call
               (push.iloc 5 . 0)
               (push.subr.gloc.of cadar 1 "./boot/macro/derived.scm" . 307256)
               (apply.iloc+ (8 . 1) "./boot/macro/derived.scm" . 307256))
             (if.false.ret)
             (touch.gloc.of right-arrow-in-case)
             (apply.gloc.of right-arrow-in-case "./boot/macro/derived.scm" . 307256))
           (if.true
             (cdr.iloc (5 . 0) "./boot/macro/derived.scm" . 307256)
             (if.null?
               (push.const . |.ELSE|)
               (push.iloc 5 . 0)
               (push.subr.gloc.of caddar 1 "./boot/macro/derived.scm" . 307256)
               (push.iloc 6 . 0)
               (push.subr.gloc.of |.list| 2 "./boot/macro/derived.scm" . 307256)
               (ret.subr.gloc.of |.list| "./boot/macro/derived.scm" . 307256))
             (push.car.iloc (9 . 0) "./boot/macro/derived.scm" . 307256)
             (push.const . "misplaced else")
             (push.iloc 9 . 0)
             (push.car.iloc (5 . 0) "./boot/macro/derived.scm" . 307256)
             (apply.gloc.of syntax-violation "./boot/macro/derived.scm" . 307256))
           (call
             (iloc.1 . 0)
             (if.false.ret)
             (call
               (push.iloc 5 . 0)
               (push.subr.gloc.of caar 1 "./boot/macro/derived.scm" . 307256)
               (apply.iloc+ (8 . 0) "./boot/macro/derived.scm" . 307256))
             (if.false.ret)
             (push.iloc 5 . 0)
             (push.subr.gloc.of cdar 1 "./boot/macro/derived.scm" . 307256)
             (apply.iloc (4 . 0) "./boot/macro/derived.scm" . 307256))
           (if.true
             (cdr.iloc (5 . 0) "./boot/macro/derived.scm" . 307256)
             (if.null?
               (push.const . |.ELSE|)
               (push.iloc 5 . 0)
               (subr.gloc.of cdar 1 "./boot/macro/derived.scm" . 307256)
               (ret.cons "./boot/macro/derived.scm" . 307256))
             (push.car.iloc (9 . 0) "./boot/macro/derived.scm" . 307256)
             (push.const . "misplaced else")
             (push.iloc 9 . 0)
             (push.car.iloc (5 . 0) "./boot/macro/derived.scm" . 307256)
             (apply.gloc.of syntax-violation "./boot/macro/derived.scm" . 307256))
           (call
             (iloc.0 . 0)
             (if.false.ret)
             (push.iloc 5 . 0)
             (subr.gloc.of cdar 1 "./boot/macro/derived.scm" . 307256)
             (if.not.pair?.ret.const . #f)
             (push.iloc 5 . 0)
             (subr.gloc.of cddar 1 "./boot/macro/derived.scm" . 307256)
             (if.not.pair?.ret.const . #f)
             (push.iloc 5 . 0)
             (subr.gloc.of cdaar 1 "./boot/macro/derived.scm" . 307256)
             (if.not.null?.ret.const . #f)
             (push.iloc 5 . 0)
             (subr.gloc.of cdddar 1 "./boot/macro/derived.scm" . 307256)
             (if.not.null?.ret.const . #f)
             (push.cdr.iloc (5 . 0) "./boot/macro/derived.scm" . 307256)
             (subr.gloc.of list? 1 "./boot/macro/derived.scm" . 307256)
             (if.false.ret)
             (call
               (push.iloc 5 . 0)
               (push.subr.gloc.of cadar 1 "./boot/macro/derived.scm" . 307256)
               (apply.iloc+ (8 . 1) "./boot/macro/derived.scm" . 307256))
             (if.false.ret)
             (touch.gloc.of right-arrow-in-case)
             (apply.gloc.of right-arrow-in-case "./boot/macro/derived.scm" . 307256))
           (if.true
             (push.iloc 5 . 0)
             (push.subr.gloc.of caddar 1 "./boot/macro/derived.scm" . 307256)
             (push.iloc 5 . 0)
             (push.subr.gloc.of caaar 1 "./boot/macro/derived.scm" . 307256)
             (extend . 2)
             (call
               (iloc.0 . 1)
               (if.symbol?.ret.const . #t)
               (push.iloc.0 . 1)
               (subr.gloc.of fixnum? 1 "./boot/macro/derived.scm" . 307256)
               (if.true.ret)
               (push.iloc.0 . 1)
               (subr.gloc.of char? 1 "./boot/macro/derived.scm" . 307256)
               (if.true.ret)
               (push.iloc.0 . 1)
               (subr.gloc.of boolean? 1 "./boot/macro/derived.scm" . 307256)
               (if.true.ret)
               (iloc.0 . 1)
               (ret.null? "./boot/macro/derived.scm" . 307256))
             (if.true
               (push.const . |.EQ?|)
               (push.iloc 7 . 0)
               (push.const . quote)
               (push.iloc.0 . 1)
               (push.subr.gloc.of |.list| 2 (|.list| 'quote |datum`1224*|))
               (push.subr.gloc.of
                 |.list|
                 3
                 (|.list| '|.EQ?| |temp`1200*| (|.list| 'quote |datum`1224*|)))
               (push.iloc.0 . 0)
               (push.iloc 7 . 0)
               (push.subr.gloc.of |.list| 2 (|.list| |expr`1224*| |temp`1200*|))
               (ret.subr.gloc.of |.list| "./boot/macro/derived.scm" . 307256))
             (push.const . |.EQV?|)
             (push.iloc 7 . 0)
             (push.const . quote)
             (push.iloc.0 . 1)
             (push.subr.gloc.of |.list| 2 (|.list| 'quote |datum`1224*|))
             (push.subr.gloc.of
               |.list|
               3
               (|.list| '|.EQV?| |temp`1200*| (|.list| 'quote |datum`1224*|)))
             (push.iloc.0 . 0)
             (push.iloc 7 . 0)
             (push.subr.gloc.of |.list| 2 (|.list| |expr`1224*| |temp`1200*|))
             (ret.subr.gloc.of |.list| "./boot/macro/derived.scm" . 307256))
           (call
             (iloc.0 . 0)
             (if.false.ret)
             (push.iloc 5 . 0)
             (subr.gloc.of cdaar 1 "./boot/macro/derived.scm" . 307256)
             (if.not.null?.ret.const . #f)
             (push.cdr.iloc (5 . 0) "./boot/macro/derived.scm" . 307256)
             (subr.gloc.of list? 1 "./boot/macro/derived.scm" . 307256)
             (if.false.ret)
             (push.iloc 5 . 0)
             (push.subr.gloc.of cdar 1 "./boot/macro/derived.scm" . 307256)
             (apply.iloc (4 . 0) "./boot/macro/derived.scm" . 307256))
           (if.true
             (push.iloc 5 . 0)
             (push.subr.gloc.of cdar 1 "./boot/macro/derived.scm" . 307256)
             (push.iloc 5 . 0)
             (push.subr.gloc.of caaar 1 "./boot/macro/derived.scm" . 307256)
             (extend . 2)
             (call
               (iloc.0 . 1)
               (if.symbol?.ret.const . #t)
               (push.iloc.0 . 1)
               (subr.gloc.of fixnum? 1 "./boot/macro/derived.scm" . 307256)
               (if.true.ret)
               (push.iloc.0 . 1)
               (subr.gloc.of char? 1 "./boot/macro/derived.scm" . 307256)
               (if.true.ret)
               (push.iloc.0 . 1)
               (subr.gloc.of boolean? 1 "./boot/macro/derived.scm" . 307256)
               (if.true.ret)
               (iloc.0 . 1)
               (ret.null? "./boot/macro/derived.scm" . 307256))
             (if.true
               (push.const . |.EQ?|)
               (push.iloc 7 . 0)
               (push.const . quote)
               (push.iloc.0 . 1)
               (push.subr.gloc.of |.list| 2 (|.list| 'quote |datum`1226*|))
               (push.subr.gloc.of
                 |.list|
                 3
                 (|.list| '|.EQ?| |temp`1200*| (|.list| 'quote |datum`1226*|)))
               (iloc.0 . 0)
               (ret.cons "./boot/macro/derived.scm" . 307256))
             (push.const . |.EQV?|)
             (push.iloc 7 . 0)
             (push.const . quote)
             (push.iloc.0 . 1)
             (push.subr.gloc.of |.list| 2 (|.list| 'quote |datum`1226*|))
             (push.subr.gloc.of
               |.list|
               3
               (|.list| '|.EQV?| |temp`1200*| (|.list| 'quote |datum`1226*|)))
             (iloc.0 . 0)
             (ret.cons "./boot/macro/derived.scm" . 307256))
           (call
             (iloc 2 . 0)
             (if.false.ret)
             (push.iloc 5 . 0)
             (push.subr.gloc.of caar 1 "./boot/macro/derived.scm" . 307256)
             (subr.gloc.of list? 1 "./boot/macro/derived.scm" . 307256)
             (if.false.ret)
             (call
               (push.iloc 5 . 0)
               (push.subr.gloc.of cadar 1 "./boot/macro/derived.scm" . 307256)
               (apply.iloc+ (8 . 1) "./boot/macro/derived.scm" . 307256))
             (if.false.ret)
             (touch.gloc.of right-arrow-in-case)
             (apply.gloc.of right-arrow-in-case "./boot/macro/derived.scm" . 307256))
           (if.true
             (push.iloc 5 . 0)
             (push.subr.gloc.of caddar 1 "./boot/macro/derived.scm" . 307256)
             (push.iloc 5 . 0)
             (push.subr.gloc.of caar 1 "./boot/macro/derived.scm" . 307256)
             (extend . 2)
             (iloc.0 . 1)
             (if.null?.ret.const #f)
             (call
               (touch.gloc.of every1)
               (push.close
                 (1 0)
                 (iloc.0 . 0)
                 (if.symbol?.ret.const . #t)
                 (push.iloc.0 . 0)
                 (subr.gloc.of fixnum? 1 "./boot/macro/derived.scm" . 307256)
                 (if.true.ret)
                 (push.iloc.0 . 0)
                 (subr.gloc.of char? 1 "./boot/macro/derived.scm" . 307256)
                 (if.true.ret)
                 (push.iloc.0 . 0)
                 (subr.gloc.of boolean? 1 "./boot/macro/derived.scm" . 307256)
                 (if.true.ret)
                 (iloc.1 . 1)
                 (ret.null? "./boot/macro/derived.scm" . 307256))
               (push.iloc.0 . 1)
               (apply.gloc.of every1 "./boot/macro/derived.scm" . 307256))
             (if.true
               (push.const . |.MEMQ|)
               (push.iloc 7 . 0)
               (push.const . quote)
               (push.iloc.0 . 1)
               (push.subr.gloc.of |.list| 2 (|.list| 'quote |datum`1230*|))
               (push.subr.gloc.of
                 |.list|
                 3
                 (|.list| '|.MEMQ| |temp`1200*| (|.list| 'quote |datum`1230*|)))
               (push.iloc.0 . 0)
               (push.iloc 7 . 0)
               (push.subr.gloc.of |.list| 2 (|.list| |expr`1230*| |temp`1200*|))
               (ret.subr.gloc.of |.list| "./boot/macro/derived.scm" . 307256))
             (push.const . |.MEMV|)
             (push.iloc 7 . 0)
             (push.const . quote)
             (push.iloc.0 . 1)
             (push.subr.gloc.of |.list| 2 (|.list| 'quote |datum`1230*|))
             (push.subr.gloc.of
               |.list|
               3
               (|.list| '|.MEMV| |temp`1200*| (|.list| 'quote |datum`1230*|)))
             (push.iloc.0 . 0)
             (push.iloc 7 . 0)
             (push.subr.gloc.of |.list| 2 (|.list| |expr`1230*| |temp`1200*|))
             (ret.subr.gloc.of |.list| "./boot/macro/derived.scm" . 307256))
           (call
             (iloc.1 . 0)
             (if.false.ret)
             (push.iloc 5 . 0)
             (push.subr.gloc.of caar 1 "./boot/macro/derived.scm" . 307256)
             (subr.gloc.of list? 1 "./boot/macro/derived.scm" . 307256)
             (if.false.ret)
             (push.iloc 5 . 0)
             (push.subr.gloc.of cdar 1 "./boot/macro/derived.scm" . 307256)
             (apply.iloc (4 . 0) "./boot/macro/derived.scm" . 307256))
           (if.true
             (push.iloc 5 . 0)
             (push.subr.gloc.of cdar 1 "./boot/macro/derived.scm" . 307256)
             (push.iloc 5 . 0)
             (push.subr.gloc.of caar 1 "./boot/macro/derived.scm" . 307256)
             (extend . 2)
             (iloc.0 . 1)
             (if.null?.ret.const #f)
             (call
               (touch.gloc.of every1)
               (push.close
                 (1 0)
                 (iloc.0 . 0)
                 (if.symbol?.ret.const . #t)
                 (push.iloc.0 . 0)
                 (subr.gloc.of fixnum? 1 "./boot/macro/derived.scm" . 307256)
                 (if.true.ret)
                 (push.iloc.0 . 0)
                 (subr.gloc.of char? 1 "./boot/macro/derived.scm" . 307256)
                 (if.true.ret)
                 (push.iloc.0 . 0)
                 (subr.gloc.of boolean? 1 "./boot/macro/derived.scm" . 307256)
                 (if.true.ret)
                 (iloc.1 . 1)
                 (ret.null? "./boot/macro/derived.scm" . 307256))
               (push.iloc.0 . 1)
               (apply.gloc.of every1 "./boot/macro/derived.scm" . 307256))
             (if.true
               (push.const . |.MEMQ|)
               (push.iloc 7 . 0)
               (push.const . quote)
               (push.iloc.0 . 1)
               (push.subr.gloc.of |.list| 2 (|.list| 'quote |datum`1234*|))
               (push.subr.gloc.of
                 |.list|
                 3
                 (|.list| '|.MEMQ| |temp`1200*| (|.list| 'quote |datum`1234*|)))
               (iloc.0 . 0)
               (ret.cons "./boot/macro/derived.scm" . 307256))
             (push.const . |.MEMV|)
             (push.iloc 7 . 0)
             (push.const . quote)
             (push.iloc.0 . 1)
             (push.subr.gloc.of |.list| 2 (|.list| 'quote |datum`1234*|))
             (push.subr.gloc.of
               |.list|
               3
               (|.list| '|.MEMV| |temp`1200*| (|.list| 'quote |datum`1234*|)))
             (iloc.0 . 0)
             (ret.cons "./boot/macro/derived.scm" . 307256))
           (push.car.iloc (9 . 0) "./boot/macro/derived.scm" . 307256)
           (push.const . "malformed case clause")
           (push.iloc 9 . 0)
           (push.car.iloc (5 . 0) "./boot/macro/derived.scm" . 307256)
           (apply.gloc.of syntax-violation "./boot/macro/derived.scm" . 307256))
         (push.iloc.1 . 0)
         (apply.gloc.of
           |maplist`1187*|
           (|maplist`1187*|
             (lambda (|lst`1202*|)
               (let ((|.L364`1204`1205*| pair?))
                 (let ((|.L366`1204`1207*| (and (pair? |lst`1202*|) (pair? (car |lst`1202*|)))))
                   (let ((|.L367`1204`1209*|
                           (and |.L366`1204`1207*|
                                (pair? (cdar |lst`1202*|))
                                (pair? (cddar |lst`1202*|))
                                (null? (cdddar |lst`1202*|))
                                (list? (cdr |lst`1202*|)))))
                     (let ((|.L368`1204`1211*| (and |.L366`1204`1207*| (list? (cdr |lst`1202*|)))))
                       (let ((|.L369`1204`1213*|
                               (and |.L366`1204`1207*| (pair? (caar |lst`1202*|)))))
                         (if (and |.L367`1204`1209*|
                                  (|else?`1187*| (caar |lst`1202*|))
                                  (|=>?`1187*| (cadar |lst`1202*|))
                                  (right-arrow-in-case))
                             (if (null? (cdr |lst`1202*|))
                                 (|.list| '|.ELSE| (|.list| (caddar |lst`1202*|) |temp`1200*|))
                                 (syntax-violation
                                   (car |form`1186*|)
                                   "misplaced else"
                                   |form`1186*|
                                   (car |lst`1202*|)))
                             (if (and |.L368`1204`1211*|
                                      (|else?`1187*| (caar |lst`1202*|))
                                      (|.L364`1204`1205*| (cdar |lst`1202*|)))
                                 (if (null? (cdr |lst`1202*|))
                                     (|.cons| '|.ELSE| (cdar |lst`1202*|))
                                     (syntax-violation
                                       (car |form`1186*|)
                                       "misplaced else"
                                       |form`1186*|
                                       (car |lst`1202*|)))
                                 (if (and |.L369`1204`1213*|
                                          (pair? (cdar |lst`1202*|))
                                          (pair? (cddar |lst`1202*|))
                                          (null? (cdaar |lst`1202*|))
                                          (null? (cdddar |lst`1202*|))
                                          (list? (cdr |lst`1202*|))
                                          (|=>?`1187*| (cadar |lst`1202*|))
                                          (right-arrow-in-case))
                                     (let ((|expr`1224*| (caddar |lst`1202*|))
                                           (|datum`1224*| (caaar |lst`1202*|)))
                                       (if (or (symbol? |datum`1224*|)
                                               (fixnum? |datum`1224*|)
                                               (char? |datum`1224*|)
                                               (boolean? |datum`1224*|)
                                               (null? |datum`1224*|))
                                           (|.list|
                                             (|.list|
                                               '|.EQ?|
                                               |temp`1200*|
                                               (|.list| 'quote |datum`1224*|))
                                             (|.list| |expr`1224*| |temp`1200*|))
                                           (|.list|
                                             (|.list|
                                               '|.EQV?|
                                               |temp`1200*|
                                               (|.list| 'quote |datum`1224*|))
                                             (|.list| |expr`1224*| |temp`1200*|))))
                                     (if (and |.L369`1204`1213*|
                                              (null? (cdaar |lst`1202*|))
                                              (list? (cdr |lst`1202*|))
                                              (|.L364`1204`1205*| (cdar |lst`1202*|)))
                                         (let ((|expr`1226*| (cdar |lst`1202*|))
                                               (|datum`1226*| (caaar |lst`1202*|)))
                                           (if (or (symbol? |datum`1226*|)
                                                   (fixnum? |datum`1226*|)
                                                   (char? |datum`1226*|)
                                                   (boolean? |datum`1226*|)
                                                   (null? |datum`1226*|))
                                               (|.cons|
                                                 (|.list|
                                                   '|.EQ?|
                                                   |temp`1200*|
                                                   (|.list| 'quote |datum`1226*|))
                                                 |expr`1226*|)
                                               (|.cons|
                                                 (|.list|
                                                   '|.EQV?|
                                                   |temp`1200*|
                                                   (|.list| 'quote |datum`1226*|))
                                                 |expr`1226*|)))
                                         (if (and |.L367`1204`1209*|
                                                  (list? (caar |lst`1202*|))
                                                  (|=>?`1187*| (cadar |lst`1202*|))
                                                  (right-arrow-in-case))
                                             (let ((|expr`1230*| (caddar |lst`1202*|))
                                                   (|datum`1230*| (caar |lst`1202*|)))
                                               (if (null? |datum`1230*|)
                                                   '(#f)
                                                   (if (every1
                                                         (lambda (|e`1232*|)
                                                           (or (symbol? |e`1232*|)
                                                               (fixnum? |e`1232*|)
                                                               (char? |e`1232*|)
                                                               (boolean? |e`1232*|)
                                                               (null? |datum`1230*|)))
                                                         |datum`1230*|)
                                                       (|.list|
                                                         (|.list|
                                                           '|.MEMQ|
                                                           |temp`1200*|
                                                           (|.list| 'quote |datum`1230*|))
                                                         (|.list| |expr`1230*| |temp`1200*|))
                                                       (|.list|
                                                         (|.list|
                                                           '|.MEMV|
                                                           |temp`1200*|
                                                           (|.list| 'quote |datum`1230*|))
                                                         (|.list| |expr`1230*| |temp`1200*|)))))
                                             (if (and |.L368`1204`1211*|
                                                      (list? (caar |lst`1202*|))
                                                      (|.L364`1204`1205*| (cdar |lst`1202*|)))
                                                 (let ((|expr`1234*| (cdar |lst`1202*|))
                                                       (|datum`1234*| (caar |lst`1202*|)))
                                                   (if (null? |datum`1234*|)
                                                       '(#f)
                                                       (if (every1
                                                             (lambda (|e`1236*|)
                                                               (or (symbol? |e`1236*|)
                                                                   (fixnum? |e`1236*|)
                                                                   (char? |e`1236*|)
                                                                   (boolean? |e`1236*|)
                                                                   (null? |datum`1234*|)))
                                                             |datum`1234*|)
                                                           (|.cons|
                                                             (|.list|
                                                               '|.MEMQ|
                                                               |temp`1200*|
                                                               (|.list| 'quote |datum`1234*|))
                                                             |expr`1234*|)
                                                           (|.cons|
                                                             (|.list|
                                                               '|.MEMV|
                                                               |temp`1200*|
                                                               (|.list| 'quote |datum`1234*|))
                                                             |expr`1234*|))))
                                                 (syntax-violation
                                                   (car |form`1186*|)
                                                   "malformed case clause"
                                                   |form`1186*|
                                                   (car |lst`1202*|))))))))))))))
             |clauses`1198*|)))
       (push.cons)
       (push.subr.gloc.of
         |.list|
         3
         (|.list|
           '|.LET|
           (|.list| (|.list| |temp`1200*| |key`1198*|))
           (|.cons|
             '|.COND|
             (|maplist`1187*|
               (lambda (|lst`1202*|)
                 (let ((|.L364`1204`1205*| pair?))
                   (let ((|.L366`1204`1207*| (and (pair? |lst`1202*|) (pair? (car |lst`1202*|)))))
                     (let ((|.L367`1204`1209*|
                             (and |.L366`1204`1207*|
                                  (pair? (cdar |lst`1202*|))
                                  (pair? (cddar |lst`1202*|))
                                  (null? (cdddar |lst`1202*|))
                                  (list? (cdr |lst`1202*|)))))
                       (let ((|.L368`1204`1211*|
                               (and |.L366`1204`1207*| (list? (cdr |lst`1202*|)))))
                         (let ((|.L369`1204`1213*|
                                 (and |.L366`1204`1207*| (pair? (caar |lst`1202*|)))))
                           (if (and |.L367`1204`1209*|
                                    (|else?`1187*| (caar |lst`1202*|))
                                    (|=>?`1187*| (cadar |lst`1202*|))
                                    (right-arrow-in-case))
                               (if (null? (cdr |lst`1202*|))
                                   (|.list| '|.ELSE| (|.list| (caddar |lst`1202*|) |temp`1200*|))
                                   (syntax-violation
                                     (car |form`1186*|)
                                     "misplaced else"
                                     |form`1186*|
                                     (car |lst`1202*|)))
                               (if (and |.L368`1204`1211*|
                                        (|else?`1187*| (caar |lst`1202*|))
                                        (|.L364`1204`1205*| (cdar |lst`1202*|)))
                                   (if (null? (cdr |lst`1202*|))
                                       (|.cons| '|.ELSE| (cdar |lst`1202*|))
                                       (syntax-violation
                                         (car |form`1186*|)
                                         "misplaced else"
                                         |form`1186*|
                                         (car |lst`1202*|)))
                                   (if (and |.L369`1204`1213*|
                                            (pair? (cdar |lst`1202*|))
                                            (pair? (cddar |lst`1202*|))
                                            (null? (cdaar |lst`1202*|))
                                            (null? (cdddar |lst`1202*|))
                                            (list? (cdr |lst`1202*|))
                                            (|=>?`1187*| (cadar |lst`1202*|))
                                            (right-arrow-in-case))
                                       (let ((|expr`1224*| (caddar |lst`1202*|))
                                             (|datum`1224*| (caaar |lst`1202*|)))
                                         (if (or (symbol? |datum`1224*|)
                                                 (fixnum? |datum`1224*|)
                                                 (char? |datum`1224*|)
                                                 (boolean? |datum`1224*|)
                                                 (null? |datum`1224*|))
                                             (|.list|
                                               (|.list|
                                                 '|.EQ?|
                                                 |temp`1200*|
                                                 (|.list| 'quote |datum`1224*|))
                                               (|.list| |expr`1224*| |temp`1200*|))
                                             (|.list|
                                               (|.list|
                                                 '|.EQV?|
                                                 |temp`1200*|
                                                 (|.list| 'quote |datum`1224*|))
                                               (|.list| |expr`1224*| |temp`1200*|))))
                                       (if (and |.L369`1204`1213*|
                                                (null? (cdaar |lst`1202*|))
                                                (list? (cdr |lst`1202*|))
                                                (|.L364`1204`1205*| (cdar |lst`1202*|)))
                                           (let ((|expr`1226*| (cdar |lst`1202*|))
                                                 (|datum`1226*| (caaar |lst`1202*|)))
                                             (if (or (symbol? |datum`1226*|)
                                                     (fixnum? |datum`1226*|)
                                                     (char? |datum`1226*|)
                                                     (boolean? |datum`1226*|)
                                                     (null? |datum`1226*|))
                                                 (|.cons|
                                                   (|.list|
                                                     '|.EQ?|
                                                     |temp`1200*|
                                                     (|.list| 'quote |datum`1226*|))
                                                   |expr`1226*|)
                                                 (|.cons|
                                                   (|.list|
                                                     '|.EQV?|
                                                     |temp`1200*|
                                                     (|.list| 'quote |datum`1226*|))
                                                   |expr`1226*|)))
                                           (if (and |.L367`1204`1209*|
                                                    (list? (caar |lst`1202*|))
                                                    (|=>?`1187*| (cadar |lst`1202*|))
                                                    (right-arrow-in-case))
                                               (let ((|expr`1230*| (caddar |lst`1202*|))
                                                     (|datum`1230*| (caar |lst`1202*|)))
                                                 (if (null? |datum`1230*|)
                                                     '(#f)
                                                     (if (every1
                                                           (lambda (|e`1232*|)
                                                             (or (symbol? |e`1232*|)
                                                                 (fixnum? |e`1232*|)
                                                                 (char? |e`1232*|)
                                                                 (boolean? |e`1232*|)
                                                                 (null? |datum`1230*|)))
                                                           |datum`1230*|)
                                                         (|.list|
                                                           (|.list|
                                                             '|.MEMQ|
                                                             |temp`1200*|
                                                             (|.list| 'quote |datum`1230*|))
                                                           (|.list| |expr`1230*| |temp`1200*|))
                                                         (|.list|
                                                           (|.list|
                                                             '|.MEMV|
                                                             |temp`1200*|
                                                             (|.list| 'quote |datum`1230*|))
                                                           (|.list| |expr`1230*| |temp`1200*|)))))
                                               (if (and |.L368`1204`1211*|
                                                        (list? (caar |lst`1202*|))
                                                        (|.L364`1204`1205*| (cdar |lst`1202*|)))
                                                   (let ((|expr`1234*| (cdar |lst`1202*|))
                                                         (|datum`1234*| (caar |lst`1202*|)))
                                                     (if (null? |datum`1234*|)
                                                         '(#f)
                                                         (if (every1
                                                               (lambda (|e`1236*|)
                                                                 (or (symbol? |e`1236*|)
                                                                     (fixnum? |e`1236*|)
                                                                     (char? |e`1236*|)
                                                                     (boolean? |e`1236*|)
                                                                     (null? |datum`1234*|)))
                                                               |datum`1234*|)
                                                             (|.cons|
                                                               (|.list|
                                                                 '|.MEMQ|
                                                                 |temp`1200*|
                                                                 (|.list| 'quote |datum`1234*|))
                                                               |expr`1234*|)
                                                             (|.cons|
                                                               (|.list|
                                                                 '|.MEMV|
                                                                 |temp`1200*|
                                                                 (|.list| 'quote |datum`1234*|))
                                                               |expr`1234*|))))
                                                   (syntax-violation
                                                     (car |form`1186*|)
                                                     "malformed case clause"
                                                     |form`1186*|
                                                     (car |lst`1202*|))))))))))))))
               |clauses`1198*|))))
       (push.iloc 3 . 0)
       (apply.gloc.of
         annotate
         (annotate
           (|.list|
             '|.LET|
             (|.list| (|.list| |temp`1200*| |key`1198*|))
             (|.cons|
               '|.COND|
               (|maplist`1187*|
                 (lambda (|lst`1202*|)
                   (let ((|.L364`1204`1205*| pair?))
                     (let ((|.L366`1204`1207*| (and (pair? |lst`1202*|) (pair? (car |lst`1202*|)))))
                       (let ((|.L367`1204`1209*|
                               (and |.L366`1204`1207*|
                                    (pair? (cdar |lst`1202*|))
                                    (pair? (cddar |lst`1202*|))
                                    (null? (cdddar |lst`1202*|))
                                    (list? (cdr |lst`1202*|)))))
                         (let ((|.L368`1204`1211*|
                                 (and |.L366`1204`1207*| (list? (cdr |lst`1202*|)))))
                           (let ((|.L369`1204`1213*|
                                   (and |.L366`1204`1207*| (pair? (caar |lst`1202*|)))))
                             (if (and |.L367`1204`1209*|
                                      (|else?`1187*| (caar |lst`1202*|))
                                      (|=>?`1187*| (cadar |lst`1202*|))
                                      (right-arrow-in-case))
                                 (if (null? (cdr |lst`1202*|))
                                     (|.list| '|.ELSE| (|.list| (caddar |lst`1202*|) |temp`1200*|))
                                     (syntax-violation
                                       (car |form`1186*|)
                                       "misplaced else"
                                       |form`1186*|
                                       (car |lst`1202*|)))
                                 (if (and |.L368`1204`1211*|
                                          (|else?`1187*| (caar |lst`1202*|))
                                          (|.L364`1204`1205*| (cdar |lst`1202*|)))
                                     (if (null? (cdr |lst`1202*|))
                                         (|.cons| '|.ELSE| (cdar |lst`1202*|))
                                         (syntax-violation
                                           (car |form`1186*|)
                                           "misplaced else"
                                           |form`1186*|
                                           (car |lst`1202*|)))
                                     (if (and |.L369`1204`1213*|
                                              (pair? (cdar |lst`1202*|))
                                              (pair? (cddar |lst`1202*|))
                                              (null? (cdaar |lst`1202*|))
                                              (null? (cdddar |lst`1202*|))
                                              (list? (cdr |lst`1202*|))
                                              (|=>?`1187*| (cadar |lst`1202*|))
                                              (right-arrow-in-case))
                                         (let ((|expr`1224*| (caddar |lst`1202*|))
                                               (|datum`1224*| (caaar |lst`1202*|)))
                                           (if (or (symbol? |datum`1224*|)
                                                   (fixnum? |datum`1224*|)
                                                   (char? |datum`1224*|)
                                                   (boolean? |datum`1224*|)
                                                   (null? |datum`1224*|))
                                               (|.list|
                                                 (|.list|
                                                   '|.EQ?|
                                                   |temp`1200*|
                                                   (|.list| 'quote |datum`1224*|))
                                                 (|.list| |expr`1224*| |temp`1200*|))
                                               (|.list|
                                                 (|.list|
                                                   '|.EQV?|
                                                   |temp`1200*|
                                                   (|.list| 'quote |datum`1224*|))
                                                 (|.list| |expr`1224*| |temp`1200*|))))
                                         (if (and |.L369`1204`1213*|
                                                  (null? (cdaar |lst`1202*|))
                                                  (list? (cdr |lst`1202*|))
                                                  (|.L364`1204`1205*| (cdar |lst`1202*|)))
                                             (let ((|expr`1226*| (cdar |lst`1202*|))
                                                   (|datum`1226*| (caaar |lst`1202*|)))
                                               (if (or (symbol? |datum`1226*|)
                                                       (fixnum? |datum`1226*|)
                                                       (char? |datum`1226*|)
                                                       (boolean? |datum`1226*|)
                                                       (null? |datum`1226*|))
                                                   (|.cons|
                                                     (|.list|
                                                       '|.EQ?|
                                                       |temp`1200*|
                                                       (|.list| 'quote |datum`1226*|))
                                                     |expr`1226*|)
                                                   (|.cons|
                                                     (|.list|
                                                       '|.EQV?|
                                                       |temp`1200*|
                                                       (|.list| 'quote |datum`1226*|))
                                                     |expr`1226*|)))
                                             (if (and |.L367`1204`1209*|
                                                      (list? (caar |lst`1202*|))
                                                      (|=>?`1187*| (cadar |lst`1202*|))
                                                      (right-arrow-in-case))
                                                 (let ((|expr`1230*| (caddar |lst`1202*|))
                                                       (|datum`1230*| (caar |lst`1202*|)))
                                                   (if (null? |datum`1230*|)
                                                       '(#f)
                                                       (if (every1
                                                             (lambda (|e`1232*|)
                                                               (or (symbol? |e`1232*|)
                                                                   (fixnum? |e`1232*|)
                                                                   (char? |e`1232*|)
                                                                   (boolean? |e`1232*|)
                                                                   (null? |datum`1230*|)))
                                                             |datum`1230*|)
                                                           (|.list|
                                                             (|.list|
                                                               '|.MEMQ|
                                                               |temp`1200*|
                                                               (|.list| 'quote |datum`1230*|))
                                                             (|.list| |expr`1230*| |temp`1200*|))
                                                           (|.list|
                                                             (|.list|
                                                               '|.MEMV|
                                                               |temp`1200*|
                                                               (|.list| 'quote |datum`1230*|))
                                                             (|.list| |expr`1230*| |temp`1200*|)))))
                                                 (if (and |.L368`1204`1211*|
                                                          (list? (caar |lst`1202*|))
                                                          (|.L364`1204`1205*| (cdar |lst`1202*|)))
                                                     (let ((|expr`1234*| (cdar |lst`1202*|))
                                                           (|datum`1234*| (caar |lst`1202*|)))
                                                       (if (null? |datum`1234*|)
                                                           '(#f)
                                                           (if (every1
                                                                 (lambda (|e`1236*|)
                                                                   (or (symbol? |e`1236*|)
                                                                       (fixnum? |e`1236*|)
                                                                       (char? |e`1236*|)
                                                                       (boolean? |e`1236*|)
                                                                       (null? |datum`1234*|)))
                                                                 |datum`1234*|)
                                                               (|.cons|
                                                                 (|.list|
                                                                   '|.MEMQ|
                                                                   |temp`1200*|
                                                                   (|.list| 'quote |datum`1234*|))
                                                                 |expr`1234*|)
                                                               (|.cons|
                                                                 (|.list|
                                                                   '|.MEMV|
                                                                   |temp`1200*|
                                                                   (|.list| 'quote |datum`1234*|))
                                                                 |expr`1234*|))))
                                                     (syntax-violation
                                                       (car |form`1186*|)
                                                       "malformed case clause"
                                                       |form`1186*|
                                                       (car |lst`1202*|))))))))))))))
                 |clauses`1198*|)))
           |form`1186*|)))
     (push)
     (push.iloc 3 . 1)
     (apply.gloc.of
       expand-form
       (expand-form
         (annotate
           (|.list|
             '|.LET|
             (|.list| (|.list| |temp`1200*| |key`1198*|))
             (|.cons|
               '|.COND|
               (|maplist`1187*|
                 (lambda (|lst`1202*|)
                   (let ((|.L364`1204`1205*| pair?))
                     (let ((|.L366`1204`1207*| (and (pair? |lst`1202*|) (pair? (car |lst`1202*|)))))
                       (let ((|.L367`1204`1209*|
                               (and |.L366`1204`1207*|
                                    (pair? (cdar |lst`1202*|))
                                    (pair? (cddar |lst`1202*|))
                                    (null? (cdddar |lst`1202*|))
                                    (list? (cdr |lst`1202*|)))))
                         (let ((|.L368`1204`1211*|
                                 (and |.L366`1204`1207*| (list? (cdr |lst`1202*|)))))
                           (let ((|.L369`1204`1213*|
                                   (and |.L366`1204`1207*| (pair? (caar |lst`1202*|)))))
                             (if (and |.L367`1204`1209*|
                                      (|else?`1187*| (caar |lst`1202*|))
                                      (|=>?`1187*| (cadar |lst`1202*|))
                                      (right-arrow-in-case))
                                 (if (null? (cdr |lst`1202*|))
                                     (|.list| '|.ELSE| (|.list| (caddar |lst`1202*|) |temp`1200*|))
                                     (syntax-violation
                                       (car |form`1186*|)
                                       "misplaced else"
                                       |form`1186*|
                                       (car |lst`1202*|)))
                                 (if (and |.L368`1204`1211*|
                                          (|else?`1187*| (caar |lst`1202*|))
                                          (|.L364`1204`1205*| (cdar |lst`1202*|)))
                                     (if (null? (cdr |lst`1202*|))
                                         (|.cons| '|.ELSE| (cdar |lst`1202*|))
                                         (syntax-violation
                                           (car |form`1186*|)
                                           "misplaced else"
                                           |form`1186*|
                                           (car |lst`1202*|)))
                                     (if (and |.L369`1204`1213*|
                                              (pair? (cdar |lst`1202*|))
                                              (pair? (cddar |lst`1202*|))
                                              (null? (cdaar |lst`1202*|))
                                              (null? (cdddar |lst`1202*|))
                                              (list? (cdr |lst`1202*|))
                                              (|=>?`1187*| (cadar |lst`1202*|))
                                              (right-arrow-in-case))
                                         (let ((|expr`1224*| (caddar |lst`1202*|))
                                               (|datum`1224*| (caaar |lst`1202*|)))
                                           (if (or (symbol? |datum`1224*|)
                                                   (fixnum? |datum`1224*|)
                                                   (char? |datum`1224*|)
                                                   (boolean? |datum`1224*|)
                                                   (null? |datum`1224*|))
                                               (|.list|
                                                 (|.list|
                                                   '|.EQ?|
                                                   |temp`1200*|
                                                   (|.list| 'quote |datum`1224*|))
                                                 (|.list| |expr`1224*| |temp`1200*|))
                                               (|.list|
                                                 (|.list|
                                                   '|.EQV?|
                                                   |temp`1200*|
                                                   (|.list| 'quote |datum`1224*|))
                                                 (|.list| |expr`1224*| |temp`1200*|))))
                                         (if (and |.L369`1204`1213*|
                                                  (null? (cdaar |lst`1202*|))
                                                  (list? (cdr |lst`1202*|))
                                                  (|.L364`1204`1205*| (cdar |lst`1202*|)))
                                             (let ((|expr`1226*| (cdar |lst`1202*|))
                                                   (|datum`1226*| (caaar |lst`1202*|)))
                                               (if (or (symbol? |datum`1226*|)
                                                       (fixnum? |datum`1226*|)
                                                       (char? |datum`1226*|)
                                                       (boolean? |datum`1226*|)
                                                       (null? |datum`1226*|))
                                                   (|.cons|
                                                     (|.list|
                                                       '|.EQ?|
                                                       |temp`1200*|
                                                       (|.list| 'quote |datum`1226*|))
                                                     |expr`1226*|)
                                                   (|.cons|
                                                     (|.list|
                                                       '|.EQV?|
                                                       |temp`1200*|
                                                       (|.list| 'quote |datum`1226*|))
                                                     |expr`1226*|)))
                                             (if (and |.L367`1204`1209*|
                                                      (list? (caar |lst`1202*|))
                                                      (|=>?`1187*| (cadar |lst`1202*|))
                                                      (right-arrow-in-case))
                                                 (let ((|expr`1230*| (caddar |lst`1202*|))
                                                       (|datum`1230*| (caar |lst`1202*|)))
                                                   (if (null? |datum`1230*|)
                                                       '(#f)
                                                       (if (every1
                                                             (lambda (|e`1232*|)
                                                               (or (symbol? |e`1232*|)
                                                                   (fixnum? |e`1232*|)
                                                                   (char? |e`1232*|)
                                                                   (boolean? |e`1232*|)
                                                                   (null? |datum`1230*|)))
                                                             |datum`1230*|)
                                                           (|.list|
                                                             (|.list|
                                                               '|.MEMQ|
                                                               |temp`1200*|
                                                               (|.list| 'quote |datum`1230*|))
                                                             (|.list| |expr`1230*| |temp`1200*|))
                                                           (|.list|
                                                             (|.list|
                                                               '|.MEMV|
                                                               |temp`1200*|
                                                               (|.list| 'quote |datum`1230*|))
                                                             (|.list| |expr`1230*| |temp`1200*|)))))
                                                 (if (and |.L368`1204`1211*|
                                                          (list? (caar |lst`1202*|))
                                                          (|.L364`1204`1205*| (cdar |lst`1202*|)))
                                                     (let ((|expr`1234*| (cdar |lst`1202*|))
                                                           (|datum`1234*| (caar |lst`1202*|)))
                                                       (if (null? |datum`1234*|)
                                                           '(#f)
                                                           (if (every1
                                                                 (lambda (|e`1236*|)
                                                                   (or (symbol? |e`1236*|)
                                                                       (fixnum? |e`1236*|)
                                                                       (char? |e`1236*|)
                                                                       (boolean? |e`1236*|)
                                                                       (null? |datum`1234*|)))
                                                                 |datum`1234*|)
                                                               (|.cons|
                                                                 (|.list|
                                                                   '|.MEMQ|
                                                                   |temp`1200*|
                                                                   (|.list| 'quote |datum`1234*|))
                                                                 |expr`1234*|)
                                                               (|.cons|
                                                                 (|.list|
                                                                   '|.MEMV|
                                                                   |temp`1200*|
                                                                   (|.list| 'quote |datum`1234*|))
                                                                 |expr`1234*|))))
                                                     (syntax-violation
                                                       (car |form`1186*|)
                                                       "malformed case clause"
                                                       |form`1186*|
                                                       (car |lst`1202*|))))))))))))))
                 |clauses`1198*|)))
           |form`1186*|)
         |env`1186*|)))
   (push.car.iloc (1 . 0) "./boot/macro/derived.scm" . 307256)
   (push.const . "expected case clause")
   (push.iloc.1 . 0)
   (apply.gloc.of syntax-violation "./boot/macro/derived.scm" . 307256))
 (set.gloc.of expand-case)
 (ret.const.unspec))
((close
   (2 0 . expand-and)
   (touch.gloc.of annotate)
   (push.const . and)
   (call
     (touch.gloc.of expand-each)
     (push.cdr.iloc (0 . 0) "./boot/macro/derived.scm" . 327716)
     (push.iloc.0 . 1)
     (apply.gloc.of expand-each "./boot/macro/derived.scm" . 327703))
   (push.cons)
   (push.iloc.0 . 0)
   (apply.gloc.of annotate "./boot/macro/derived.scm" . 327685))
 (set.gloc.of expand-and)
 (ret.const.unspec))
((close
   (2 0 . expand-or)
   (touch.gloc.of annotate)
   (push.const . or)
   (call
     (touch.gloc.of expand-each)
     (push.cdr.iloc (0 . 0) "./boot/macro/derived.scm" . 331811)
     (push.iloc.0 . 1)
     (apply.gloc.of expand-each "./boot/macro/derived.scm" . 331798))
   (push.cons)
   (push.iloc.0 . 0)
   (apply.gloc.of annotate "./boot/macro/derived.scm" . 331781))
 (set.gloc.of expand-or)
 (ret.const.unspec))
((close
   (1 0 . desugar-define)
   (call
     (iloc.0 . 0)
     (if.not.pair?.ret.const . #f)
     (cdr.iloc (0 . 0) "./boot/macro/derived.scm" . 353293)
     (ret.pair? "./boot/macro/derived.scm" . 353293))
   (push)
   (extend . 1)
   (call
     (iloc.0 . 0)
     (if.false.ret)
     (cadr.iloc (1 . 0) "./boot/macro/derived.scm" . 353293)
     (ret.pair? "./boot/macro/derived.scm" . 353293))
   (push)
   (extend . 1)
   (call
     (iloc.1 . 0)
     (if.false.ret)
     (cddr.iloc (2 . 0) "./boot/macro/derived.scm" . 353293)
     (if.not.pair?.ret.const . #f)
     (push.iloc 2 . 0)
     (subr.gloc.of cdddr 1 "./boot/macro/derived.scm" . 353293)
     (if.not.null?.ret.const . #f)
     (push.cadr.iloc (2 . 0) "./boot/macro/derived.scm" . 353293)
     (ret.subr.gloc.of symbol? "./boot/macro/derived.scm" . 353293))
   (if.true (ret.iloc 2 . 0))
   (call
     (iloc.1 . 0)
     (if.false.ret)
     (cddr.iloc (2 . 0) "./boot/macro/derived.scm" . 353293)
     (if.not.null?.ret.const . #f)
     (push.cadr.iloc (2 . 0) "./boot/macro/derived.scm" . 353293)
     (ret.subr.gloc.of symbol? "./boot/macro/derived.scm" . 353293))
   (if.true
     (touch.gloc.of annotate)
     (push.const . define)
     (push.cadr.iloc (2 . 0) "./boot/macro/derived.scm" . 353293)
     (push.const (|.UNSPECIFIED|))
     (push.subr.gloc.of |.cons*| 3 "./boot/macro/derived.scm" . 353293)
     (push.iloc 2 . 0)
     (apply.gloc.of annotate "./boot/macro/derived.scm" . 353293))
   (call
     (iloc.0 . 0)
     (if.false.ret)
     (cddr.iloc (2 . 0) "./boot/macro/derived.scm" . 353293)
     (if.not.null?.ret.const . #f)
     (push.iloc 2 . 0)
     (push.subr.gloc.of caadr 1 "./boot/macro/derived.scm" . 353293)
     (ret.subr.gloc.of symbol? "./boot/macro/derived.scm" . 353293))
   (if.true
     (push.iloc 2 . 0)
     (push.subr.gloc.of cdadr 1 "./boot/macro/derived.scm" . 353293)
     (push.iloc 2 . 0)
     (push.subr.gloc.of caadr 1 "./boot/macro/derived.scm" . 353293)
     (extend . 2)
     (call
       (touch.gloc.of collect-lambda-formals)
       (call
         (touch.gloc.of annotate)
         (push.iloc.0 . 0)
         (push.iloc 3 . 0)
         (apply.gloc.of annotate "./boot/macro/derived.scm" . 353293))
       (push)
       (push.iloc 3 . 0)
       (apply.gloc.of collect-lambda-formals "./boot/macro/derived.scm" . 353293))
     (touch.gloc.of annotate)
     (push.const . define)
     (push.iloc.0 . 1)
     (push.const . |.LAMBDA|)
     (push.iloc.0 . 0)
     (push.const (|.UNSPECIFIED|))
     (push.subr.gloc.of |.cons*| 3 (|.cons*| '|.LAMBDA| |formals`1257*| '((|.UNSPECIFIED|))))
     (push.subr.gloc.of |.list| 3 "./boot/macro/derived.scm" . 353293)
     (push.iloc 3 . 0)
     (apply.gloc.of annotate "./boot/macro/derived.scm" . 353293))
   (call
     (iloc.0 . 0)
     (if.false.ret)
     (push.iloc 2 . 0)
     (subr.gloc.of caadr 1 "./boot/macro/derived.scm" . 353293)
     (if.not.symbol?.ret.const . #f)
     (cddr.iloc (2 . 0) "./boot/macro/derived.scm" . 353293)
     (ret.pair? "./boot/macro/derived.scm" . 353293))
   (if.true
     (push.cddr.iloc (2 . 0) "./boot/macro/derived.scm" . 353293)
     (push.iloc 2 . 0)
     (push.subr.gloc.of cdadr 1 "./boot/macro/derived.scm" . 353293)
     (push.iloc 2 . 0)
     (push.subr.gloc.of caadr 1 "./boot/macro/derived.scm" . 353293)
     (extend . 3)
     (call
       (touch.gloc.of collect-lambda-formals)
       (call
         (touch.gloc.of annotate)
         (push.iloc.0 . 1)
         (push.iloc 3 . 0)
         (apply.gloc.of annotate "./boot/macro/derived.scm" . 353293))
       (push)
       (push.iloc 3 . 0)
       (apply.gloc.of collect-lambda-formals "./boot/macro/derived.scm" . 353293))
     (touch.gloc.of annotate)
     (push.const . define)
     (push.iloc.0 . 2)
     (push.const . |.LAMBDA|)
     (push.iloc.0 . 1)
     (push.iloc.0 . 0)
     (push.subr.gloc.of |.cons*| 3 (|.cons*| '|.LAMBDA| |formals`1259*| |body`1259*|))
     (push.subr.gloc.of |.list| 3 "./boot/macro/derived.scm" . 353293)
     (push.iloc 3 . 0)
     (apply.gloc.of annotate "./boot/macro/derived.scm" . 353293))
   (iloc.0 . 0)
   (if.true
     (push.car.iloc (2 . 0) "./boot/macro/derived.scm" . 353293)
     (push.const . "invalid syntax")
     (push.iloc 2 . 0)
     (push.iloc 2 . 0)
     (push.subr.gloc.of caadr 1 "./boot/macro/derived.scm" . 353293)
     (apply.gloc.of syntax-violation "./boot/macro/derived.scm" . 353293))
   (push.iloc 2 . 0)
   (push.subr.gloc.of length 1 "./boot/macro/derived.scm" . 353293)
   (push.const . 1)
   (push.subr.gloc.of - 2 "./boot/macro/derived.scm" . 353293)
   (extend . 1)
   (push.iloc.0 . 0)
   (const . 0)
   (if.eq?
     (push.car.iloc (3 . 0) "./boot/macro/derived.scm" . 353293)
     (push.const . "expected 1 or 2, but no clause given")
     (push.iloc 3 . 0)
     (apply.gloc.of syntax-violation "./boot/macro/derived.scm" . 353293))
   (push.iloc.0 . 0)
   (push.const 1 2)
   (subr.gloc.of |.memq| 2 "./boot/macro/derived.scm" . 353293)
   (if.true
     (push.car.iloc (3 . 0) "./boot/macro/derived.scm" . 353293)
     (push.const . "expected symbol for first clause")
     (push.iloc 3 . 0)
     (apply.gloc.of syntax-violation "./boot/macro/derived.scm" . 353293))
   (push.car.iloc (3 . 0) "./boot/macro/derived.scm" . 353293)
   (push.const . "expected 1 or 2, but ~a clauses given")
   (push.iloc.0 . 0)
   (push.subr.gloc.of format 2 "./boot/macro/derived.scm" . 353293)
   (push.iloc 3 . 0)
   (apply.gloc.of syntax-violation "./boot/macro/derived.scm" . 353293))
 (set.gloc.of desugar-define)
 (ret.const.unspec))
((close
   (2 0 . expand-identifier-syntax)
   (extend.enclose+
     (1 0 . set!?)
     (touch.gloc.of denote-set!?)
     (push.iloc 2 . 1)
     (push.iloc.0 . 0)
     (apply.gloc.of denote-set!? "./boot/macro/derived.scm" . 360480))
   (call
     (iloc.1 . 0)
     (if.not.pair?.ret.const . #f)
     (cdr.iloc (1 . 0) "./boot/macro/derived.scm" . 362501)
     (ret.pair? "./boot/macro/derived.scm" . 362501))
   (push)
   (extend . 1)
   (call
     (iloc.0 . 0)
     (if.false.ret)
     (cddr.iloc (2 . 0) "./boot/macro/derived.scm" . 362501)
     (ret.null? "./boot/macro/derived.scm" . 362501))
   (if.true
     (touch.gloc.of expand-form)
     (call
       (touch.gloc.of annotate)
       (push.const . |.LAMBDA|)
       (push.const x)
       (push.const . |.SYNTAX-CASE|)
       (push.const . x)
       (push.const)
       (push.const . id)
       (push.const |.IDENTIFIER?| (|.SYNTAX| id))
       (push.const . |.SYNTAX|)
       (push.cadr.iloc (2 . 0) "./boot/macro/derived.scm" . 362501)
       (push.subr.gloc.of |.list| 2 "./boot/macro/derived.scm" . 362501)
       (push.subr.gloc.of |.list| 3 "./boot/macro/derived.scm" . 362501)
       (push.const _ x ...)
       (push.const . |.SYNTAX|)
       (push.cadr.iloc (2 . 0) "./boot/macro/derived.scm" . 362501)
       (const x ...)
       (push.cons)
       (push.subr.gloc.of |.list| 2 "./boot/macro/derived.scm" . 362501)
       (push.subr.gloc.of |.list| 2 "./boot/macro/derived.scm" . 362501)
       (push.subr.gloc.of |.list| 5 "./boot/macro/derived.scm" . 362501)
       (push.subr.gloc.of |.list| 3 "./boot/macro/derived.scm" . 362501)
       (push.iloc 2 . 0)
       (apply.gloc.of annotate "./boot/macro/derived.scm" . 362501))
     (push)
     (push.iloc 2 . 1)
     (apply.gloc.of expand-form "./boot/macro/derived.scm" . 362501))
   (iloc.0 . 0)
   (if.false.ret)
   (cadr.iloc (2 . 0) "./boot/macro/derived.scm" . 362501)
   (if.not.pair?.ret.const . #f)
   (push.iloc 2 . 0)
   (subr.gloc.of cdadr 1 "./boot/macro/derived.scm" . 362501)
   (if.not.pair?.ret.const . #f)
   (cddr.iloc (2 . 0) "./boot/macro/derived.scm" . 362501)
   (if.not.pair?.ret.const . #f)
   (push.iloc 2 . 0)
   (subr.gloc.of caddr 1 "./boot/macro/derived.scm" . 362501)
   (if.not.pair?.ret.const . #f)
   (push.iloc 2 . 0)
   (subr.gloc.of caaddr 1 "./boot/macro/derived.scm" . 362501)
   (if.not.pair?.ret.const . #f)
   (push.iloc 2 . 0)
   (push.subr.gloc.of caaddr 1 "./boot/macro/derived.scm" . 362501)
   (subr.gloc.of cdr 1 "./boot/macro/derived.scm" . 362501)
   (if.not.pair?.ret.const . #f)
   (push.iloc 2 . 0)
   (push.subr.gloc.of caaddr 1 "./boot/macro/derived.scm" . 362501)
   (subr.gloc.of cddr 1 "./boot/macro/derived.scm" . 362501)
   (if.not.pair?.ret.const . #f)
   (push.iloc 2 . 0)
   (subr.gloc.of cdaddr 1 "./boot/macro/derived.scm" . 362501)
   (if.not.pair?.ret.const . #f)
   (push.iloc 2 . 0)
   (subr.gloc.of cddadr 1 "./boot/macro/derived.scm" . 362501)
   (if.not.null?.ret.const . #f)
   (push.iloc 2 . 0)
   (push.subr.gloc.of caaddr 1 "./boot/macro/derived.scm" . 362501)
   (subr.gloc.of cdddr 1 "./boot/macro/derived.scm" . 362501)
   (if.not.null?.ret.const . #f)
   (push.iloc 2 . 0)
   (push.subr.gloc.of cdaddr 1 "./boot/macro/derived.scm" . 362501)
   (subr.gloc.of cdr 1 "./boot/macro/derived.scm" . 362501)
   (if.not.null?.ret.const . #f)
   (push.iloc 2 . 0)
   (subr.gloc.of cdddr 1 "./boot/macro/derived.scm" . 362501)
   (if.not.null?.ret.const . #f)
   (call
     (push.iloc 2 . 0)
     (push.subr.gloc.of caaddr 1 "./boot/macro/derived.scm" . 362501)
     (push.subr.gloc.of car 1 "./boot/macro/derived.scm" . 362501)
     (apply.iloc+ (1 . 0) "./boot/macro/derived.scm" . 362501))
   (if.false.ret)
   (push.iloc 2 . 0)
   (push.subr.gloc.of cadadr 1 "./boot/macro/derived.scm" . 362501)
   (push.iloc 2 . 0)
   (push.subr.gloc.of caadr 1 "./boot/macro/derived.scm" . 362501)
   (extend . 2)
   (touch.gloc.of expand-form)
   (call
     (touch.gloc.of annotate)
     (push.const . |.MAKE-VARIABLE-TRANSFORMER|)
     (push.const . |.LAMBDA|)
     (push.const x)
     (push.const . |.SYNTAX-CASE|)
     (push.const . x)
     (push.const set!)
     (push.const . set!)
     (push.iloc 3 . 0)
     (push.subr.gloc.of caaddr 1 "./boot/macro/derived.scm" . 362501)
     (push.subr.gloc.of cadr 1 "./boot/macro/derived.scm" . 362501)
     (push.iloc 3 . 0)
     (push.subr.gloc.of caaddr 1 "./boot/macro/derived.scm" . 362501)
     (push.subr.gloc.of caddr 1 "./boot/macro/derived.scm" . 362501)
     (push.subr.gloc.of |.list| 3 "./boot/macro/derived.scm" . 362501)
     (push.const . |.SYNTAX|)
     (push.iloc 3 . 0)
     (push.subr.gloc.of cdaddr 1 "./boot/macro/derived.scm" . 362501)
     (push.subr.gloc.of car 1 "./boot/macro/derived.scm" . 362501)
     (push.subr.gloc.of |.list| 2 "./boot/macro/derived.scm" . 362501)
     (push.subr.gloc.of |.list| 2 "./boot/macro/derived.scm" . 362501)
     (push.iloc.0 . 1)
     (const x ...)
     (push.cons)
     (push.const . |.SYNTAX|)
     (push.iloc.0 . 0)
     (const x ...)
     (push.cons)
     (push.subr.gloc.of |.list| 2 "./boot/macro/derived.scm" . 362501)
     (push.subr.gloc.of |.list| 2 "./boot/macro/derived.scm" . 362501)
     (push.iloc.0 . 1)
     (push.const |.IDENTIFIER?| (|.SYNTAX| id))
     (push.const . |.SYNTAX|)
     (push.iloc.0 . 0)
     (push.subr.gloc.of |.list| 2 "./boot/macro/derived.scm" . 362501)
     (push.subr.gloc.of |.list| 3 "./boot/macro/derived.scm" . 362501)
     (push.subr.gloc.of |.list| 6 "./boot/macro/derived.scm" . 362501)
     (push.subr.gloc.of |.list| 3 "./boot/macro/derived.scm" . 362501)
     (push.subr.gloc.of |.list| 2 "./boot/macro/derived.scm" . 362501)
     (push.iloc 3 . 0)
     (apply.gloc.of annotate "./boot/macro/derived.scm" . 362501))
   (push)
   (push.iloc 3 . 1)
   (apply.gloc.of expand-form "./boot/macro/derived.scm" . 362501))
 (set.gloc.of expand-identifier-syntax)
 (ret.const.unspec))
((close
   (2 0 . expand-assert)
   (call
     (iloc.0 . 0)
     (if.not.pair?.ret.const . #f)
     (cdr.iloc (0 . 0) "./boot/macro/derived.scm" . 387077)
     (if.not.pair?.ret.const . #f)
     (cddr.iloc (0 . 0) "./boot/macro/derived.scm" . 387077)
     (ret.null? "./boot/macro/derived.scm" . 387077))
   (if.true
     (push.cadr.iloc (0 . 0) "./boot/macro/derived.scm" . 387077)
     (extend . 1)
     (touch.gloc.of expand-form)
     (call
       (touch.gloc.of annotate)
       (push.const . |.OR|)
       (push.iloc.0 . 0)
       (push.const . assertion-violation)
       (push.const . quote)
       (call
         (touch.gloc.of current-top-level-exterior)
         (apply.gloc.of current-top-level-exterior "./boot/macro/derived.scm" . 387077))
       (push)
       (push.subr.gloc.of |.list| 2 "./boot/macro/derived.scm" . 387077)
       (push.const . "assertion failed in expression ~u")
       (push.iloc.0 . 0)
       (push.subr.gloc.of format 2 "./boot/macro/derived.scm" . 387077)
       (push.subr.gloc.of |.list| 3 "./boot/macro/derived.scm" . 387077)
       (push.subr.gloc.of |.list| 3 "./boot/macro/derived.scm" . 387077)
       (push.iloc.1 . 0)
       (apply.gloc.of annotate "./boot/macro/derived.scm" . 387077))
     (push)
     (push.iloc.1 . 1)
     (apply.gloc.of expand-form "./boot/macro/derived.scm" . 387077))
   (push.car.iloc (0 . 0) "./boot/macro/derived.scm" . 387077)
   (push.const . "expected single expression")
   (push.iloc.0 . 0)
   (apply.gloc.of syntax-violation "./boot/macro/derived.scm" . 387077))
 (set.gloc.of expand-assert)
 (ret.const.unspec))

;
((close
   (2 0 . expand-quasiquote)
   (extend.unbound . 12)
   (push.close+
     (1 0 . unquote?)
     (touch.gloc.of denote-unquote?)
     (push.iloc 2 . 1)
     (push.iloc.0 . 0)
     (apply.gloc.of denote-unquote? "./boot/macro/quasi.scm" . 7204))
   (push.close+
     (1 0 . quasiquote?)
     (touch.gloc.of denote-quasiquote?)
     (push.iloc 2 . 1)
     (push.iloc.0 . 0)
     (apply.gloc.of denote-quasiquote? "./boot/macro/quasi.scm" . 8231))
   (push.close+
     (1 0 . unquote-splicing?)
     (touch.gloc.of denote-unquote-splicing?)
     (push.iloc 2 . 1)
     (push.iloc.0 . 0)
     (apply.gloc.of denote-unquote-splicing? "./boot/macro/quasi.scm" . 9261))
   (push.close+
     (1 0 . quoted?)
     (iloc.0 . 0)
     (if.not.pair?.ret.const . #f)
     (cdr.iloc (0 . 0) "./boot/macro/quasi.scm" . 14357)
     (if.not.pair?.ret.const . #f)
     (cddr.iloc (0 . 0) "./boot/macro/quasi.scm" . 15381)
     (if.not.null?.ret.const . #f)
     (touch.gloc.of denote-quote?)
     (push.iloc 2 . 1)
     (push.car.iloc (0 . 0) "./boot/macro/quasi.scm" . 16417)
     (apply.gloc.of denote-quote? "./boot/macro/quasi.scm" . 16398))
   (push.close+
     (1 0 . constant?)
     (push.iloc.0 . 0)
     (subr.gloc.of boolean? 1 "./boot/macro/quasi.scm" . 20493)
     (if.true.ret)
     (push.iloc.0 . 0)
     (subr.gloc.of number? 1 "./boot/macro/quasi.scm" . 21517)
     (if.true.ret)
     (push.iloc.0 . 0)
     (subr.gloc.of char? 1 "./boot/macro/quasi.scm" . 22541)
     (if.true.ret)
     (push.iloc.0 . 0)
     (subr.gloc.of string? 1 "./boot/macro/quasi.scm" . 23565)
     (if.true.ret)
     (push.iloc.0 . 0)
     (subr.gloc.of bytevector? 1 "./boot/macro/quasi.scm" . 24589)
     (if.true.ret)
     (push.iloc.0 . 0)
     (apply.iloc+ (1 . 3) "./boot/macro/quasi.scm" . 25613))
   (push.close+
     (1 0 . constant-value)
     (call (push.iloc.0 . 0) (apply.iloc+ (1 . 3) "./boot/macro/quasi.scm" . 29712))
     (if.true (push.iloc.0 . 0) (ret.subr.gloc.of cadr "./boot/macro/quasi.scm" . 29724))
     (ret.iloc 0 . 0))
   (push.close+
     (1 0 . null-constant?)
     (call (push.iloc.0 . 0) (apply.iloc+ (1 . 3) "./boot/macro/quasi.scm" . 34830))
     (if.false.ret)
     (cadr.iloc (0 . 0) "./boot/macro/quasi.scm" . 35861)
     (ret.null? "./boot/macro/quasi.scm" . 35854))
   (push.close+
     (2 0 . emit-append)
     (iloc.0 . 0)
     (if.null? (ret.iloc 0 . 1))
     (call (push.iloc.0 . 1) (apply.iloc+ (1 . 6) "./boot/macro/quasi.scm" . 40976))
     (if.true
       (push.iloc.0 . 0)
       (push.subr.gloc.of length 1 "./boot/macro/quasi.scm" . 42007)
       (push.const . 1)
       (subr.gloc.of = 2 "./boot/macro/quasi.scm" . 42004)
       (if.true (push.iloc.0 . 0) (ret.subr.gloc.of car "./boot/macro/quasi.scm" . 42024))
       (push.const . |.APPEND|)
       (iloc.0 . 0)
       (ret.cons "./boot/macro/quasi.scm" . 42000))
     (push.const . |.APPEND|)
     (push.iloc.0 . 0)
     (push.iloc.0 . 1)
     (push.subr.gloc.of |.list| 1 (|.list| |tail`1307*|))
     (subr.gloc.of |.append| 2 (|.append| |body`1307*| (|.list| |tail`1307*|)))
     (ret.cons "./boot/macro/quasi.scm" . 43023))
   (push.close+
     (2 0 . emit-cons*)
     (push.iloc.0 . 0)
     (push.subr.gloc.of length 1 "./boot/macro/quasi.scm" . 48144)
     (push.const . 1)
     (subr.gloc.of = 2 "./boot/macro/quasi.scm" . 48141)
     (if.true
       (push.car.iloc (0 . 0) "./boot/macro/quasi.scm" . 49176)
       (push.iloc.0 . 1)
       (apply.iloc+ (1 . 9) "./boot/macro/quasi.scm" . 49165))
     (iloc.0 . 0)
     (if.null? (ret.iloc 0 . 1))
     (call (push.iloc.0 . 1) (apply.iloc+ (1 . 6) "./boot/macro/quasi.scm" . 51220))
     (if.true (push.const . |.LIST|) (iloc.0 . 0) (ret.cons "./boot/macro/quasi.scm" . 51219))
     (call
       (iloc.0 . 1)
       (if.not.pair?.ret.const . #f)
       (push.car.iloc (0 . 1) "./boot/macro/quasi.scm" . 53291)
       (const . |.LIST|)
       (ret.eq? "./boot/macro/quasi.scm" . 53286))
     (if.true
       (push.const . |.LIST|)
       (push.iloc.0 . 0)
       (push.cdr.iloc (0 . 1) "./boot/macro/quasi.scm" . 54309)
       (subr.gloc.of |.append| 2 "./boot/macro/quasi.scm" . 54309)
       (ret.cons "./boot/macro/quasi.scm" . 53267))
     (call
       (iloc.0 . 1)
       (if.not.pair?.ret.const . #f)
       (push.car.iloc (0 . 1) "./boot/macro/quasi.scm" . 55343)
       (const . |.CONS|)
       (if.eq?.ret.const . #t)
       (push.car.iloc (0 . 1) "./boot/macro/quasi.scm" . 55367)
       (const . |.CONS*|)
       (ret.eq? "./boot/macro/quasi.scm" . 55362))
     (if.true
       (push.const . |.CONS*|)
       (push.iloc.0 . 0)
       (push.cdr.iloc (0 . 1) "./boot/macro/quasi.scm" . 56358)
       (subr.gloc.of |.append| 2 "./boot/macro/quasi.scm" . 56358)
       (ret.cons "./boot/macro/quasi.scm" . 55315))
     (push.const . |.CONS*|)
     (push.iloc.0 . 0)
     (push.iloc.0 . 1)
     (push.subr.gloc.of |.list| 1 (|.list| |tail`1309*|))
     (subr.gloc.of |.append| 2 (|.append| |body`1309*| (|.list| |tail`1309*|)))
     (ret.cons "./boot/macro/quasi.scm" . 57363))
   (push.close+
     (2 0 . emit-cons)
     (call
       (call (push.iloc.0 . 0) (apply.iloc+ (1 . 4) "./boot/macro/quasi.scm" . 62482))
       (if.false.ret)
       (push.iloc.0 . 1)
       (apply.iloc+ (1 . 4) "./boot/macro/quasi.scm" . 62499))
     (if.true
       (push.const . |.QUOTE|)
       (call (push.iloc.0 . 0) (apply.iloc+ (1 . 5) "./boot/macro/quasi.scm" . 63521))
       (push)
       (call (push.iloc.0 . 1) (apply.iloc+ (1 . 5) "./boot/macro/quasi.scm" . 63543))
       (push.cons)
       (ret.subr.gloc.of list "./boot/macro/quasi.scm" . 63501))
     (call (push.iloc.0 . 1) (apply.iloc+ (1 . 6) "./boot/macro/quasi.scm" . 64532))
     (if.true
       (push.const . |.LIST|)
       (push.iloc.0 . 0)
       (ret.subr.gloc.of |.list| "./boot/macro/quasi.scm" . 64531))
     (call
       (iloc.0 . 1)
       (if.not.pair?.ret.const . #f)
       (push.car.iloc (0 . 1) "./boot/macro/quasi.scm" . 66603)
       (const . |.LIST|)
       (ret.eq? "./boot/macro/quasi.scm" . 66598))
     (if.true
       (push.const . |.LIST|)
       (push.iloc.0 . 0)
       (push.cdr.iloc (0 . 1) "./boot/macro/quasi.scm" . 67620)
       (ret.subr.gloc.of |.cons*| "./boot/macro/quasi.scm" . 66579))
     (call
       (iloc.0 . 1)
       (if.not.pair?.ret.const . #f)
       (push.car.iloc (0 . 1) "./boot/macro/quasi.scm" . 68655)
       (const . |.CONS|)
       (if.eq?.ret.const . #t)
       (push.car.iloc (0 . 1) "./boot/macro/quasi.scm" . 68679)
       (const . |.CONS*|)
       (ret.eq? "./boot/macro/quasi.scm" . 68674))
     (if.true
       (push.const . |.CONS*|)
       (push.iloc.0 . 0)
       (push.cdr.iloc (0 . 1) "./boot/macro/quasi.scm" . 69669)
       (ret.subr.gloc.of |.cons*| "./boot/macro/quasi.scm" . 68627))
     (push.const . |.CONS|)
     (push.iloc.0 . 0)
     (push.iloc.0 . 1)
     (ret.subr.gloc.of |.list| "./boot/macro/quasi.scm" . 70675))
   (push.close
     (2 0 . expand-vector)
     (call
       (push.iloc.0 . 0)
       (push.subr.gloc.of vector->list 1 "./boot/macro/quasi.scm" . 75804)
       (push.iloc.0 . 1)
       (apply.iloc (1 . 11) "./boot/macro/quasi.scm" . 75796))
     (push)
     (extend . 1)
     (call (push.iloc.0 . 0) (apply.iloc+ (2 . 6) "./boot/macro/quasi.scm" . 76818))
     (if.true.ret.const |.QUOTE| #())
     (call (push.iloc.0 . 0) (apply.iloc+ (2 . 4) "./boot/macro/quasi.scm" . 78866))
     (if.true
       (push.const . |.QUOTE|)
       (call (push.iloc.0 . 0) (apply.iloc+ (2 . 5) "./boot/macro/quasi.scm" . 79914))
       (push)
       (push.subr.gloc.of list->vector 1 "./boot/macro/quasi.scm" . 79900)
       (ret.subr.gloc.of |.list| "./boot/macro/quasi.scm" . 78865))
     (call
       (iloc.0 . 0)
       (if.not.pair?.ret.const . #f)
       (push.car.iloc (0 . 0) "./boot/macro/quasi.scm" . 80936)
       (const . |.LIST|)
       (ret.eq? "./boot/macro/quasi.scm" . 80931))
     (if.true
       (push.const . |.VECTOR|)
       (cdr.iloc (0 . 0) "./boot/macro/quasi.scm" . 81950)
       (ret.cons "./boot/macro/quasi.scm" . 80913))
     (push.const . |.LIST->VECTOR|)
     (push.iloc.0 . 0)
     (ret.subr.gloc.of |.list| "./boot/macro/quasi.scm" . 82961))
   (push.close
     (2 0 . expand)
     (iloc.0 . 0)
     (if.pair?
       (=n.iloc (0 . 1) 0 "./boot/macro/quasi.scm" . 89108)
       (if.true
         (call
           (iloc.0 . 0)
           (if.not.pair?.ret.const . #f)
           (car.iloc (0 . 0) (car |expr`1317*|))
           (if.not.pair?.ret.const . #f)
           (push.iloc.0 . 0)
           (push.subr.gloc.of cdar 1 (cdar |expr`1317*|))
           (ret.subr.gloc.of list? (list? (cdar |expr`1317*|))))
         (push)
         (extend . 1)
         (call
           (iloc.0 . 0)
           (if.false.ret)
           (push.iloc.1 . 0)
           (push.subr.gloc.of caar 1 (caar |expr`1317*|))
           (apply.iloc+ (2 . 0) (|unquote?`1292*| (caar |expr`1317*|))))
         (if.true
           (push.iloc.1 . 0)
           (push.subr.gloc.of cdar 1 (cdar |expr`1317*|))
           (call
             (push.cdr.iloc (1 . 0) (cdr |expr`1317*|))
             (push.const . 0)
             (apply.iloc (2 . 11) (|expand`1292*| (cdr |expr`1317*|) 0)))
           (push)
           (apply.iloc+
             (2 . 8)
             (|emit-cons*`1292*| (cdar |expr`1317*|) (|expand`1292*| (cdr |expr`1317*|) 0))))
         (call
           (iloc.0 . 0)
           (if.false.ret)
           (push.iloc.1 . 0)
           (push.subr.gloc.of caar 1 (caar |expr`1317*|))
           (apply.iloc+ (2 . 2) (|unquote-splicing?`1292*| (caar |expr`1317*|))))
         (if.true
           (push.iloc.1 . 0)
           (push.subr.gloc.of cdar 1 (cdar |expr`1317*|))
           (call
             (push.cdr.iloc (1 . 0) (cdr |expr`1317*|))
             (push.const . 0)
             (apply.iloc (2 . 11) (|expand`1292*| (cdr |expr`1317*|) 0)))
           (push)
           (apply.iloc+
             (2 . 7)
             (|emit-append`1292*| (cdar |expr`1317*|) (|expand`1292*| (cdr |expr`1317*|) 0))))
         (call
           (iloc.1 . 0)
           (if.not.pair?.ret.const . #f)
           (push.cdr.iloc (1 . 0) (cdr |expr`1317*|))
           (subr.gloc.of list? 1 (list? (cdr |expr`1317*|)))
           (if.false.ret)
           (push.car.iloc (1 . 0) (car |expr`1317*|))
           (apply.iloc+ (2 . 1) (|quasiquote?`1292*| (car |expr`1317*|))))
         (if.true
           (call
             (push.car.iloc (1 . 0) (car |expr`1317*|))
             (push.const . 1)
             (apply.iloc (2 . 11) (|expand`1292*| (car |expr`1317*|) 1)))
           (push)
           (call
             (push.cdr.iloc (1 . 0) (cdr |expr`1317*|))
             (push.const . 1)
             (apply.iloc (2 . 11) (|expand`1292*| (cdr |expr`1317*|) 1)))
           (push)
           (apply.iloc+
             (2 . 9)
             (|emit-cons`1292*|
               (|expand`1292*| (car |expr`1317*|) 1)
               (|expand`1292*| (cdr |expr`1317*|) 1))))
         (call
           (iloc.1 . 0)
           (if.not.pair?.ret.const . #f)
           (cdr.iloc (1 . 0) (cdr |expr`1317*|))
           (if.not.pair?.ret.const . #f)
           (cddr.iloc (1 . 0) (cddr |expr`1317*|))
           (if.not.null?.ret.const . #f)
           (push.car.iloc (1 . 0) (car |expr`1317*|))
           (apply.iloc+ (2 . 0) (|unquote?`1292*| (car |expr`1317*|))))
         (if.true (push.iloc.1 . 0) (ret.subr.gloc.of cadr (cadr |expr`1317*|)))
         (call
           (iloc.1 . 0)
           (if.not.pair?.ret.const . #f)
           (push.car.iloc (1 . 0) (car |expr`1317*|))
           (apply.iloc+ (2 . 0) (|unquote?`1292*| (car |expr`1317*|))))
         (if.true
           (push.const . quasiquote)
           (push.const . "unquote appear in bad context")
           (push.iloc 3 . 0)
           (push.iloc.1 . 0)
           (apply.gloc.of
             syntax-violation
             (syntax-violation
               'quasiquote
               "unquote appear in bad context"
               |form`1291*|
               |expr`1317*|)))
         (call
           (iloc.1 . 0)
           (if.not.pair?.ret.const . #f)
           (push.car.iloc (1 . 0) (car |expr`1317*|))
           (apply.iloc+ (2 . 1) (|quasiquote?`1292*| (car |expr`1317*|))))
         (if.true
           (push.const . quasiquote)
           (push.const . "nested quasiquote appear in bad context")
           (push.iloc 3 . 0)
           (push.iloc.1 . 0)
           (apply.gloc.of
             syntax-violation
             (syntax-violation
               'quasiquote
               "nested quasiquote appear in bad context"
               |form`1291*|
               |expr`1317*|)))
         (call
           (iloc.1 . 0)
           (if.not.pair?.ret.const . #f)
           (push.car.iloc (1 . 0) (car |expr`1317*|))
           (apply.iloc+ (2 . 2) (|unquote-splicing?`1292*| (car |expr`1317*|))))
         (if.true
           (push.const . quasiquote)
           (push.const . "unquote-splicing appear in bad context")
           (push.iloc 3 . 0)
           (push.iloc.1 . 0)
           (apply.gloc.of
             syntax-violation
             (syntax-violation
               'quasiquote
               "unquote-splicing appear in bad context"
               |form`1291*|
               |expr`1317*|)))
         (call
           (push.car.iloc (1 . 0) (car |expr`1317*|))
           (push.const . 0)
           (apply.iloc (2 . 11) (|expand`1292*| (car |expr`1317*|) 0)))
         (push)
         (call
           (push.cdr.iloc (1 . 0) (cdr |expr`1317*|))
           (push.const . 0)
           (apply.iloc (2 . 11) (|expand`1292*| (cdr |expr`1317*|) 0)))
         (push)
         (apply.iloc+
           (2 . 9)
           (|emit-cons`1292*|
             (|expand`1292*| (car |expr`1317*|) 0)
             (|expand`1292*| (cdr |expr`1317*|) 0))))
       (push.car.iloc (0 . 0) "./boot/macro/quasi.scm" . 107551)
       (extend . 1)
       (call
         (call
           (touch.gloc.of denote-unquote?)
           (push.iloc 3 . 1)
           (push.iloc.0 . 0)
           (apply.gloc.of denote-unquote? "./boot/macro/quasi.scm" . 108577))
         (if.true.ret)
         (touch.gloc.of denote-unquote-splicing?)
         (push.iloc 3 . 1)
         (push.iloc.0 . 0)
         (apply.gloc.of denote-unquote-splicing? "./boot/macro/quasi.scm" . 108603))
       (if.true
         (push.const . |.QUOTE|)
         (push.iloc.0 . 0)
         (push.subr.gloc.of |.list| 2 "./boot/macro/quasi.scm" . 109597)
         (call
           (push.cdr.iloc (1 . 0) "./boot/macro/quasi.scm" . 110640)
           (push.n+.iloc (1 . 1) -1 "./boot/macro/quasi.scm" . 110651)
           (apply.iloc (2 . 11) "./boot/macro/quasi.scm" . 110632))
         (push)
         (apply.iloc+ (2 . 9) "./boot/macro/quasi.scm" . 109597))
       (call
         (touch.gloc.of denote-quasiquote?)
         (push.iloc 3 . 1)
         (push.iloc.0 . 0)
         (apply.gloc.of denote-quasiquote? "./boot/macro/quasi.scm" . 111645))
       (if.true
         (push.const . |.QUOTE|)
         (push.iloc.0 . 0)
         (push.subr.gloc.of |.list| 2 "./boot/macro/quasi.scm" . 112669)
         (call
           (push.cdr.iloc (1 . 0) "./boot/macro/quasi.scm" . 113712)
           (push.n+.iloc (1 . 1) 1 "./boot/macro/quasi.scm" . 113723)
           (apply.iloc (2 . 11) "./boot/macro/quasi.scm" . 113704))
         (push)
         (apply.iloc+ (2 . 9) "./boot/macro/quasi.scm" . 112669))
       (call
         (push.car.iloc (1 . 0) "./boot/macro/quasi.scm" . 115760)
         (push.iloc.1 . 1)
         (apply.iloc (2 . 11) "./boot/macro/quasi.scm" . 115752))
       (push)
       (call
         (push.cdr.iloc (1 . 0) "./boot/macro/quasi.scm" . 116784)
         (push.iloc.1 . 1)
         (apply.iloc (2 . 11) "./boot/macro/quasi.scm" . 116776))
       (push)
       (apply.iloc+ (2 . 9) "./boot/macro/quasi.scm" . 115741))
     (push.iloc.0 . 0)
     (subr.gloc.of vector? 1 "./boot/macro/quasi.scm" . 117776)
     (if.true
       (push.iloc.0 . 0)
       (push.iloc.0 . 1)
       (apply.iloc (1 . 10) "./boot/macro/quasi.scm" . 118800))
     (iloc.0 . 0)
     (if.symbol?
       (push.const . |.QUOTE|)
       (push.iloc.0 . 0)
       (ret.subr.gloc.of |.list| "./boot/macro/quasi.scm" . 119823))
     (iloc.0 . 0)
     (if.null?.ret.const |.QUOTE| ())
     (ret.iloc 0 . 0))
   (enclose . 12)
   (touch.gloc.of expand-form)
   (call
     (touch.gloc.of annotate)
     (call
       (push.cadr.iloc (1 . 0) "./boot/macro/quasi.scm" . 125988)
       (push.const . 0)
       (apply.iloc (0 . 11) "./boot/macro/quasi.scm" . 125980))
     (push)
     (push.iloc.1 . 0)
     (apply.gloc.of annotate "./boot/macro/quasi.scm" . 125970))
   (push)
   (push.iloc.1 . 1)
   (apply.gloc.of expand-form "./boot/macro/quasi.scm" . 125957))
 (set.gloc.of expand-quasiquote)
 (ret.const.unspec))

;
((call (push.const . ...) (apply.gloc.of make-parameter "./boot/macro/synpat.scm" . 4117))
 (set.gloc.of ellipsis-id)
 (ret.const.unspec))
((close
   (1 0 . ellipsis-id?)
   (push.iloc.0 . 0)
   (call (touch.gloc.of ellipsis-id) (apply.gloc.of ellipsis-id "./boot/macro/synpat.scm" . 8207))
   (ret.eq? "./boot/macro/synpat.scm" . 8197))
 (set.gloc.of ellipsis-id?)
 (ret.const.unspec))
((close
   (1 0 . ellipsis-pair?)
   (iloc.0 . 0)
   (if.not.pair?.ret.const . #f)
   (cdr.iloc (0 . 0) "./boot/macro/synpat.scm" . 13329)
   (if.not.pair?.ret.const . #f)
   (touch.gloc.of ellipsis-id?)
   (push.cadr.iloc (0 . 0) "./boot/macro/synpat.scm" . 14360)
   (apply.gloc.of ellipsis-id? "./boot/macro/synpat.scm" . 14346))
 (set.gloc.of ellipsis-pair?)
 (ret.const.unspec))
((close
   (1 0 . ellipsis-splicing-pair?)
   (iloc.0 . 0)
   (if.not.pair?.ret.const . #f)
   (cdr.iloc (0 . 0) "./boot/macro/synpat.scm" . 19473)
   (if.not.pair?.ret.const . #f)
   (call
     (touch.gloc.of ellipsis-id?)
     (push.cadr.iloc (0 . 0) "./boot/macro/synpat.scm" . 20504)
     (apply.gloc.of ellipsis-id? "./boot/macro/synpat.scm" . 20490))
   (if.false.ret)
   (cddr.iloc (0 . 0) "./boot/macro/synpat.scm" . 21521)
   (if.not.pair?.ret.const . #f)
   (touch.gloc.of ellipsis-id?)
   (push.iloc.0 . 0)
   (push.subr.gloc.of caddr 1 "./boot/macro/synpat.scm" . 22552)
   (apply.gloc.of ellipsis-id? "./boot/macro/synpat.scm" . 22538))
 (set.gloc.of ellipsis-splicing-pair?)
 (ret.const.unspec))
((close
   (1 0 . ellipsis-quote?)
   (iloc.0 . 0)
   (if.not.pair?.ret.const . #f)
   (call
     (touch.gloc.of ellipsis-id?)
     (push.car.iloc (0 . 0) "./boot/macro/synpat.scm" . 27672)
     (apply.gloc.of ellipsis-id? "./boot/macro/synpat.scm" . 27658))
   (if.false.ret)
   (cdr.iloc (0 . 0) "./boot/macro/synpat.scm" . 28689)
   (if.not.pair?.ret.const . #f)
   (cddr.iloc (0 . 0) "./boot/macro/synpat.scm" . 29713)
   (ret.null? "./boot/macro/synpat.scm" . 29706))
 (set.gloc.of ellipsis-quote?)
 (ret.const.unspec))
((close
   (2 0 . underscore?)
   (push.iloc.0 . 0)
   (const . _)
   (if.not.eq?.ret.const . #f)
   (push.const . _)
   (push.iloc.0 . 1)
   (push.subr.gloc.of memq 2 "./boot/macro/synpat.scm" . 33821)
   (ret.subr.gloc.of not "./boot/macro/synpat.scm" . 33816))
 (set.gloc.of underscore?)
 (ret.const.unspec))
((close
   (2 0 . loop)
   (iloc.0 . 0)
   (if.pair?
     (touch.gloc.of |loop`1352*|)
     (push.cdr.iloc (0 . 0) "./boot/macro/synpat.scm" . 39956)
     (call
       (touch.gloc.of |loop`1352*|)
       (push.car.iloc (0 . 0) "./boot/macro/synpat.scm" . 40986)
       (push.iloc.0 . 1)
       (apply.gloc.of |loop`1352*| "./boot/macro/synpat.scm" . 40980))
     (push)
     (apply.gloc.of |loop`1352*| "./boot/macro/synpat.scm" . 39950))
   (call
     (touch.gloc.of ellipsis-id?)
     (push.iloc.0 . 0)
     (apply.gloc.of ellipsis-id? "./boot/macro/synpat.scm" . 41998))
   (if.true (ret.iloc 0 . 1))
   (iloc.0 . 0)
   (if.symbol?
     (push.iloc.0 . 0)
     (push.iloc.0 . 1)
     (subr.gloc.of memq 2 "./boot/macro/synpat.scm" . 44050)
     (if.true (ret.iloc 0 . 1))
     (push.iloc.0 . 0)
     (iloc.0 . 1)
     (ret.cons "./boot/macro/synpat.scm" . 44069))
   (push.iloc.0 . 0)
   (subr.gloc.of vector? 1 "./boot/macro/synpat.scm" . 45070)
   (if.true
     (touch.gloc.of |loop`1352*|)
     (push.iloc.0 . 0)
     (push.subr.gloc.of vector->list 1 "./boot/macro/synpat.scm" . 46100)
     (push.iloc.0 . 1)
     (apply.gloc.of |loop`1352*| "./boot/macro/synpat.scm" . 46094))
   (ret.iloc 0 . 1))
 (set.gloc.of |loop`1352*|)
 (close
   (1 0 . collect-unique-ids)
   (touch.gloc.of |loop`1352*|)
   (push.iloc.0 . 0)
   (push.const)
   (apply.gloc.of |loop`1352*| "./boot/macro/synpat.scm" . 38919))
 (set.gloc.of collect-unique-ids)
 (ret.const.unspec))
((close
   (4 0 . collect-vars-ranks)
   (call
     (touch.gloc.of underscore?)
     (push.iloc.0 . 0)
     (push.iloc.0 . 1)
     (apply.gloc.of underscore? "./boot/macro/synpat.scm" . 51212))
   (if.true (ret.iloc 0 . 3))
   (iloc.0 . 0)
   (if.symbol?
     (push.iloc.0 . 0)
     (push.iloc.0 . 1)
     (subr.gloc.of memq 2 "./boot/macro/synpat.scm" . 53264)
     (if.true (ret.iloc 0 . 3))
     (touch.gloc.of acons)
     (push.iloc.0 . 0)
     (push.iloc.0 . 2)
     (push.iloc.0 . 3)
     (apply.gloc.of acons "./boot/macro/synpat.scm" . 55312))
   (call
     (touch.gloc.of ellipsis-pair?)
     (push.iloc.0 . 0)
     (apply.gloc.of ellipsis-pair? "./boot/macro/synpat.scm" . 56332))
   (if.true
     (touch.gloc.of collect-vars-ranks)
     (push.cddr.iloc (0 . 0) "./boot/macro/synpat.scm" . 57376)
     (push.iloc.0 . 1)
     (push.iloc.0 . 2)
     (call
       (car.iloc (0 . 0) "./boot/macro/synpat.scm" . 58413)
       (if.symbol?
         (touch.gloc.of acons)
         (push.car.iloc (0 . 0) "./boot/macro/synpat.scm" . 59435)
         (push.n+.iloc (0 . 2) 1 "./boot/macro/synpat.scm" . 59445)
         (push.iloc.0 . 3)
         (apply.gloc.of acons "./boot/macro/synpat.scm" . 59428))
       (touch.gloc.of collect-vars-ranks)
       (push.car.iloc (0 . 0) "./boot/macro/synpat.scm" . 60472)
       (push.iloc.0 . 1)
       (push.n+.iloc (0 . 2) 1 "./boot/macro/synpat.scm" . 60488)
       (push.iloc.0 . 3)
       (apply.gloc.of collect-vars-ranks "./boot/macro/synpat.scm" . 60452))
     (push)
     (apply.gloc.of collect-vars-ranks "./boot/macro/synpat.scm" . 57356))
   (iloc.0 . 0)
   (if.pair?
     (touch.gloc.of collect-vars-ranks)
     (push.cdr.iloc (0 . 0) "./boot/macro/synpat.scm" . 62496)
     (push.iloc.0 . 1)
     (push.iloc.0 . 2)
     (call
       (touch.gloc.of collect-vars-ranks)
       (push.car.iloc (0 . 0) "./boot/macro/synpat.scm" . 63540)
       (push.iloc.0 . 1)
       (push.iloc.0 . 2)
       (push.iloc.0 . 3)
       (apply.gloc.of collect-vars-ranks "./boot/macro/synpat.scm" . 63520))
     (push)
     (apply.gloc.of collect-vars-ranks "./boot/macro/synpat.scm" . 62476))
   (push.iloc.0 . 0)
   (subr.gloc.of vector? 1 "./boot/macro/synpat.scm" . 64524)
   (if.true
     (touch.gloc.of collect-vars-ranks)
     (push.iloc.0 . 0)
     (push.subr.gloc.of vector->list 1 "./boot/macro/synpat.scm" . 65568)
     (push.iloc.0 . 1)
     (push.iloc.0 . 2)
     (push.iloc.0 . 3)
     (apply.gloc.of collect-vars-ranks "./boot/macro/synpat.scm" . 65548))
   (ret.iloc 0 . 3))
 (set.gloc.of collect-vars-ranks)
 (ret.const.unspec))
((close
   (2 0 . check-misplaced-ellipsis)
   (extend.enclose+
     (1 0 . loop)
     (call
       (touch.gloc.of ellipsis-id?)
       (push.iloc.0 . 0)
       (apply.gloc.of ellipsis-id? "./boot/macro/synpat.scm" . 93202))
     (if.true
       (push.const . "syntax pattern")
       (push.const . "improper use of ellipsis")
       (push.iloc 2 . 0)
       (apply.gloc.of syntax-violation "./boot/macro/synpat.scm" . 94226))
     (call
       (touch.gloc.of ellipsis-pair?)
       (push.iloc.0 . 0)
       (apply.gloc.of ellipsis-pair? "./boot/macro/synpat.scm" . 95250))
     (if.true
       (call
         (car.iloc (0 . 0) "./boot/macro/synpat.scm" . 96288)
         (if.not.symbol?.ret.const . #f)
         (push.car.iloc (0 . 0) "./boot/macro/synpat.scm" . 97309)
         (push.iloc 2 . 1)
         (subr.gloc.of memq 2 "./boot/macro/synpat.scm" . 97303)
         (if.false.ret)
         (push.const . "syntax pattern")
         (push.const . "ellipsis following literal")
         (push.iloc 2 . 0)
         (push.iloc.0 . 0)
         (apply.gloc.of syntax-violation "./boot/macro/synpat.scm" . 98327))
       (extend.enclose+
         (1 0 . loop)
         (iloc.0 . 0)
         (if.not.pair?.ret.const . #f)
         (call
           (touch.gloc.of ellipsis-id?)
           (push.car.iloc (0 . 0) "./boot/macro/synpat.scm" . 101419)
           (apply.gloc.of ellipsis-id? "./boot/macro/synpat.scm" . 101405))
         (if.true
           (push.const . "syntax pattern")
           (push.const . "ambiguous use of ellipsis")
           (push.iloc 4 . 0)
           (apply.gloc.of syntax-violation "./boot/macro/synpat.scm" . 102429))
         (push.cdr.iloc (0 . 0) "./boot/macro/synpat.scm" . 103459)
         (apply.iloc+ (1 . 0) "./boot/macro/synpat.scm" . 103453))
       (push.cddr.iloc (1 . 0) "./boot/macro/synpat.scm" . 99362)
       (apply.iloc+ (0 . 0) "./boot/macro/synpat.scm" . 100372))
     (iloc.0 . 0)
     (if.pair?
       (call
         (push.car.iloc (0 . 0) "./boot/macro/synpat.scm" . 105500)
         (apply.iloc+ (1 . 0) "./boot/macro/synpat.scm" . 105494))
       (if.true.ret)
       (push.cdr.iloc (0 . 0) "./boot/macro/synpat.scm" . 105517)
       (apply.iloc+ (1 . 0) "./boot/macro/synpat.scm" . 105511))
     (push.iloc.0 . 0)
     (subr.gloc.of vector? 1 "./boot/macro/synpat.scm" . 106514)
     (if.false.ret)
     (push.iloc.0 . 0)
     (push.subr.gloc.of vector->list 1 "./boot/macro/synpat.scm" . 107544)
     (apply.iloc+ (1 . 0) "./boot/macro/synpat.scm" . 107538))
   (push.iloc.1 . 0)
   (apply.iloc+ (0 . 0) "./boot/macro/synpat.scm" . 93195))
 (set.gloc.of |check-misplaced-ellipsis`1359*|)
 (close
   (2 0 . check-duplicate-variable)
   (extend.enclose+
     (2 0 . loop)
     (iloc.0 . 0)
     (if.pair?
       (push.cdr.iloc (0 . 0) "./boot/macro/synpat.scm" . 75800)
       (call
         (push.car.iloc (0 . 0) "./boot/macro/synpat.scm" . 76830)
         (push.iloc.0 . 1)
         (apply.iloc+ (1 . 0) "./boot/macro/synpat.scm" . 76824))
       (push)
       (apply.iloc+ (1 . 0) "./boot/macro/synpat.scm" . 75794))
     (call
       (touch.gloc.of ellipsis-id?)
       (push.iloc.0 . 0)
       (apply.gloc.of ellipsis-id? "./boot/macro/synpat.scm" . 77842))
     (if.true (ret.iloc 0 . 1))
     (call
       (touch.gloc.of underscore?)
       (push.iloc.0 . 0)
       (push.iloc 2 . 1)
       (apply.gloc.of underscore? "./boot/macro/synpat.scm" . 78866))
     (if.true (ret.iloc 0 . 1))
     (iloc.0 . 0)
     (if.symbol?
       (push.iloc.0 . 0)
       (push.iloc 2 . 1)
       (subr.gloc.of memq 2 "./boot/macro/synpat.scm" . 80918)
       (if.true (ret.iloc 0 . 1))
       (push.iloc.0 . 0)
       (push.iloc.0 . 1)
       (subr.gloc.of memq 2 "./boot/macro/synpat.scm" . 82970)
       (if.true
         (push.const . "syntax pattern")
         (push.const . "duplicate pattern variables")
         (push.iloc 2 . 0)
         (push.iloc.0 . 0)
         (apply.gloc.of syntax-violation "./boot/macro/synpat.scm" . 83994))
       (push.iloc.0 . 0)
       (iloc.0 . 1)
       (ret.cons "./boot/macro/synpat.scm" . 85018))
     (push.iloc.0 . 0)
     (subr.gloc.of vector? 1 "./boot/macro/synpat.scm" . 86034)
     (if.true
       (push.iloc.0 . 0)
       (push.subr.gloc.of vector->list 1 "./boot/macro/synpat.scm" . 87064)
       (push.iloc.0 . 1)
       (apply.iloc+ (1 . 0) "./boot/macro/synpat.scm" . 87058))
     (ret.iloc 0 . 1))
   (push.iloc.1 . 0)
   (push.const)
   (apply.iloc+ (0 . 0) "./boot/macro/synpat.scm" . 74763))
 (set.gloc.of |check-duplicate-variable`1359*|)
 (close
   (2 0 . check-pattern)
   (call
     (touch.gloc.of |check-misplaced-ellipsis`1359*|)
     (push.iloc.0 . 0)
     (push.iloc.0 . 1)
     (apply.gloc.of |check-misplaced-ellipsis`1359*| "./boot/macro/synpat.scm" . 110597))
   (touch.gloc.of |check-duplicate-variable`1359*|)
   (push.iloc.0 . 0)
   (push.iloc.0 . 1)
   (apply.gloc.of |check-duplicate-variable`1359*| "./boot/macro/synpat.scm" . 111621))
 (set.gloc.of check-pattern)
 (ret.const.unspec))
((close
   (3 0 . match-ellipsis?)
   (iloc.0 . 0)
   (if.null?.ret.const . #t)
   (iloc.0 . 0)
   (if.not.pair?.ret.const . #f)
   (call
     (touch.gloc.of match-pattern?)
     (push.car.iloc (0 . 0) "./boot/macro/synpat.scm" . 117790)
     (push.car.iloc (0 . 1) "./boot/macro/synpat.scm" . 117801)
     (push.iloc.0 . 2)
     (apply.gloc.of match-pattern? "./boot/macro/synpat.scm" . 117774))
   (if.false.ret)
   (touch.gloc.of match-ellipsis?)
   (push.cdr.iloc (0 . 0) "./boot/macro/synpat.scm" . 118815)
   (push.iloc.0 . 1)
   (push.iloc.0 . 2)
   (apply.gloc.of match-ellipsis? "./boot/macro/synpat.scm" . 118798))
 (set.gloc.of match-ellipsis?)
 (ret.const.unspec))
((close
   (4 0 . match-ellipsis-n?)
   (=n.iloc (0 . 2) 0 "./boot/macro/synpat.scm" . 122889)
   (if.true.ret)
   (iloc.0 . 0)
   (if.not.pair?.ret.const . #f)
   (call
     (touch.gloc.of match-pattern?)
     (push.car.iloc (0 . 0) "./boot/macro/synpat.scm" . 124958)
     (push.car.iloc (0 . 1) "./boot/macro/synpat.scm" . 124969)
     (push.iloc.0 . 3)
     (apply.gloc.of match-pattern? "./boot/macro/synpat.scm" . 124942))
   (if.false.ret)
   (touch.gloc.of match-ellipsis-n?)
   (push.cdr.iloc (0 . 0) "./boot/macro/synpat.scm" . 125985)
   (push.iloc.0 . 1)
   (push.n+.iloc (0 . 2) -1 "./boot/macro/synpat.scm" . 126000)
   (push.iloc.0 . 3)
   (apply.gloc.of match-ellipsis-n? "./boot/macro/synpat.scm" . 125966))
 (set.gloc.of match-ellipsis-n?)
 (ret.const.unspec))
((close
   (3 0 . match-pattern?)
   (call
     (touch.gloc.of underscore?)
     (push.iloc.0 . 1)
     (push.iloc.0 . 2)
     (apply.gloc.of underscore? "./boot/macro/synpat.scm" . 130060))
   (if.true.ret.const . #t)
   (iloc.0 . 1)
   (if.symbol?
     (push.iloc.0 . 1)
     (push.iloc.0 . 2)
     (subr.gloc.of memq 2 "./boot/macro/synpat.scm" . 132115)
     (if.true
       (call
         (iloc.0 . 0)
         (if.symbol?.ret.const . #t)
         (push.iloc.0 . 0)
         (apply.gloc.of identifier? "./boot/macro/synpat.scm" . 134172))
       (if.false.ret)
       (touch.gloc.of free-id=?)
       (push.iloc.0 . 1)
       (push.iloc.0 . 0)
       (apply.gloc.of free-id=? "./boot/macro/synpat.scm" . 135192))
     (ret.const . #t))
   (call
     (touch.gloc.of ellipsis-pair?)
     (push.iloc.0 . 1)
     (apply.gloc.of ellipsis-pair? "./boot/macro/synpat.scm" . 137228))
   (if.true
     (call
       (cddr.iloc (0 . 1) "./boot/macro/synpat.scm" . 138268)
       (if.not.null?.ret.const . #f)
       (push.iloc.0 . 0)
       (ret.subr.gloc.of list? "./boot/macro/synpat.scm" . 138280))
     (if.true
       (car.iloc (0 . 1) "./boot/macro/synpat.scm" . 139293)
       (if.symbol?.ret.const . #t)
       (touch.gloc.of match-ellipsis?)
       (push.iloc.0 . 0)
       (push.iloc.0 . 1)
       (push.iloc.0 . 2)
       (apply.gloc.of match-ellipsis? "./boot/macro/synpat.scm" . 140308))
     (call (push.iloc.0 . 0) (apply.gloc.of count-pair "./boot/macro/synpat.scm" . 141340))
     (push)
     (call
       (push.cddr.iloc (0 . 1) "./boot/macro/synpat.scm" . 141370)
       (apply.gloc.of count-pair "./boot/macro/synpat.scm" . 141358))
     (push)
     (push.subr.gloc.of - 2 "./boot/macro/synpat.scm" . 141337)
     (extend . 1)
     (=n.iloc (0 . 0) 0 "./boot/macro/synpat.scm" . 142358)
     (if.true
       (touch.gloc.of match-pattern?)
       (push.iloc.1 . 0)
       (push.cddr.iloc (1 . 1) "./boot/macro/synpat.scm" . 143403)
       (push.iloc.1 . 2)
       (apply.gloc.of match-pattern? "./boot/macro/synpat.scm" . 143382))
     (>n.iloc (0 . 0) 0 "./boot/macro/synpat.scm" . 144411)
     (if.false.ret)
     (call
       (touch.gloc.of match-ellipsis-n?)
       (push.iloc.1 . 0)
       (push.iloc.1 . 1)
       (push.iloc.0 . 0)
       (push.iloc.1 . 2)
       (apply.gloc.of match-ellipsis-n? "./boot/macro/synpat.scm" . 145435))
     (if.false.ret)
     (touch.gloc.of match-pattern?)
     (push.iloc.1 . 0)
     (push.iloc.0 . 0)
     (push.subr.gloc.of list-tail 2 "./boot/macro/synpat.scm" . 146475)
     (push.cddr.iloc (1 . 1) "./boot/macro/synpat.scm" . 146494)
     (push.iloc.1 . 2)
     (apply.gloc.of match-pattern? "./boot/macro/synpat.scm" . 146459))
   (iloc.0 . 1)
   (if.pair?
     (iloc.0 . 0)
     (if.not.pair?.ret.const . #f)
     (call
       (touch.gloc.of match-pattern?)
       (push.car.iloc (0 . 0) "./boot/macro/synpat.scm" . 149537)
       (push.car.iloc (0 . 1) "./boot/macro/synpat.scm" . 149548)
       (push.iloc.0 . 2)
       (apply.gloc.of match-pattern? "./boot/macro/synpat.scm" . 149521))
     (if.false.ret)
     (touch.gloc.of match-pattern?)
     (push.cdr.iloc (0 . 0) "./boot/macro/synpat.scm" . 150561)
     (push.cdr.iloc (0 . 1) "./boot/macro/synpat.scm" . 150572)
     (push.iloc.0 . 2)
     (apply.gloc.of match-pattern? "./boot/macro/synpat.scm" . 150545))
   (push.iloc.0 . 1)
   (subr.gloc.of vector? 1 "./boot/macro/synpat.scm" . 151564)
   (if.true
     (push.iloc.0 . 0)
     (subr.gloc.of vector? 1 "./boot/macro/synpat.scm" . 152593)
     (if.false.ret)
     (touch.gloc.of match-pattern?)
     (push.iloc.0 . 0)
     (push.subr.gloc.of vector->list 1 "./boot/macro/synpat.scm" . 153633)
     (push.iloc.0 . 1)
     (push.subr.gloc.of vector->list 1 "./boot/macro/synpat.scm" . 153653)
     (push.iloc.0 . 2)
     (apply.gloc.of match-pattern? "./boot/macro/synpat.scm" . 153617))
   (push.iloc.0 . 1)
   (push.iloc.0 . 0)
   (ret.subr.gloc.of equal? "./boot/macro/synpat.scm" . 154641))
 (set.gloc.of match-pattern?)
 (ret.const.unspec))
((close
   (3 0 . union-vars)
   (iloc.0 . 2)
   (if.null? (ret.iloc 0 . 1))
   (touch.gloc.of union-vars)
   (push.iloc.0 . 0)
   (call
     (touch.gloc.of bind-var!)
     (push.iloc.0 . 2)
     (push.subr.gloc.of caar 1 "./boot/macro/synpat.scm" . 161824)
     (push.iloc.0 . 0)
     (push.iloc.0 . 2)
     (push.subr.gloc.of cdar 1 "./boot/macro/synpat.scm" . 161852)
     (push.subr.gloc.of reverse 1 "./boot/macro/synpat.scm" . 161843)
     (push.iloc.0 . 1)
     (apply.gloc.of bind-var! "./boot/macro/synpat.scm" . 161813))
   (push)
   (push.cdr.iloc (0 . 2) "./boot/macro/synpat.scm" . 162837)
   (apply.gloc.of union-vars "./boot/macro/synpat.scm" . 160777))
 (set.gloc.of union-vars)
 (ret.const.unspec))
((close
   (4 0 . bind-var!)
   (call
     (touch.gloc.of underscore?)
     (push.iloc.0 . 0)
     (push.iloc.0 . 1)
     (apply.gloc.of underscore? "./boot/macro/synpat.scm" . 166924))
   (if.true (ret.iloc 0 . 3))
   (push.iloc.0 . 0)
   (push.iloc.0 . 3)
   (push.subr.gloc.of assq 2 "./boot/macro/synpat.scm" . 168984)
   (extend . 1)
   (iloc.0 . 0)
   (if.true
     (push.iloc.0 . 0)
     (push.iloc.1 . 2)
     (cdr.iloc (0 . 0) "./boot/macro/synpat.scm" . 171059)
     (push.cons)
     (subr.gloc.of set-cdr! 2 "./boot/macro/synpat.scm" . 171033)
     (ret.iloc 1 . 3))
   (touch.gloc.of acons)
   (push.iloc.1 . 0)
   (push.iloc.1 . 2)
   (push.subr.gloc.of list 1 "./boot/macro/synpat.scm" . 172061)
   (push.iloc.1 . 3)
   (apply.gloc.of acons "./boot/macro/synpat.scm" . 172050))
 (set.gloc.of bind-var!)
 (ret.const.unspec))
((close
   (3 0 . bind-null-ellipsis)
   (extend.enclose+
     (2 0 . loop)
     (iloc.0 . 0)
     (if.null? (ret.iloc 0 . 1))
     (push.cdr.iloc (0 . 0) "./boot/macro/synpat.scm" . 179217)
     (call
       (push.car.iloc (0 . 0) "./boot/macro/synpat.scm" . 180251)
       (push.iloc 2 . 1)
       (subr.gloc.of memq 2 "./boot/macro/synpat.scm" . 180245)
       (if.true (ret.iloc 0 . 1))
       (touch.gloc.of bind-var!)
       (push.car.iloc (0 . 0) "./boot/macro/synpat.scm" . 182304)
       (push.iloc 2 . 1)
       (push.const)
       (push.iloc.0 . 1)
       (apply.gloc.of bind-var! "./boot/macro/synpat.scm" . 182293))
     (push)
     (apply.iloc+ (1 . 0) "./boot/macro/synpat.scm" . 179211))
   (call
     (touch.gloc.of collect-unique-ids)
     (push.car.iloc (1 . 0) "./boot/macro/synpat.scm" . 176169)
     (apply.gloc.of collect-unique-ids "./boot/macro/synpat.scm" . 176149))
   (push)
   (push.iloc.1 . 2)
   (apply.iloc+ (0 . 0) "./boot/macro/synpat.scm" . 177159))
 (set.gloc.of bind-null-ellipsis)
 (ret.const.unspec))
((close
   (5 0 . bind-ellipsis)
   (iloc.0 . 0)
   (if.null?
     (iloc.0 . 4)
     (if.null?
       (touch.gloc.of bind-null-ellipsis)
       (push.iloc.0 . 1)
       (push.iloc.0 . 2)
       (push.iloc.0 . 3)
       (apply.gloc.of bind-null-ellipsis "./boot/macro/synpat.scm" . 188429))
     (touch.gloc.of union-vars)
     (push.iloc.0 . 2)
     (push.iloc.0 . 3)
     (push.iloc.0 . 4)
     (apply.gloc.of union-vars "./boot/macro/synpat.scm" . 189453))
   (touch.gloc.of bind-ellipsis)
   (push.cdr.iloc (0 . 0) "./boot/macro/synpat.scm" . 190488)
   (push.iloc.0 . 1)
   (push.iloc.0 . 2)
   (push.iloc.0 . 3)
   (call
     (touch.gloc.of bind-pattern)
     (push.car.iloc (0 . 0) "./boot/macro/synpat.scm" . 191526)
     (push.car.iloc (0 . 1) "./boot/macro/synpat.scm" . 191537)
     (push.iloc.0 . 2)
     (push.iloc.0 . 4)
     (apply.gloc.of bind-pattern "./boot/macro/synpat.scm" . 191512))
   (push)
   (apply.gloc.of bind-ellipsis "./boot/macro/synpat.scm" . 190473))
 (set.gloc.of bind-ellipsis)
 (ret.const.unspec))
((close
   (6 0 . bind-ellipsis-n)
   (=n.iloc (0 . 3) 0 "./boot/macro/synpat.scm" . 195593)
   (if.true
     (iloc.0 . 5)
     (if.null?
       (touch.gloc.of bind-null-ellipsis)
       (push.iloc.0 . 1)
       (push.iloc.0 . 2)
       (push.iloc.0 . 4)
       (apply.gloc.of bind-null-ellipsis "./boot/macro/synpat.scm" . 197645))
     (touch.gloc.of union-vars)
     (push.iloc.0 . 2)
     (push.iloc.0 . 4)
     (push.iloc.0 . 5)
     (apply.gloc.of union-vars "./boot/macro/synpat.scm" . 198669))
   (touch.gloc.of bind-ellipsis-n)
   (push.cdr.iloc (0 . 0) "./boot/macro/synpat.scm" . 199706)
   (push.iloc.0 . 1)
   (push.iloc.0 . 2)
   (push.n+.iloc (0 . 3) -1 "./boot/macro/synpat.scm" . 199727)
   (push.iloc.0 . 4)
   (call
     (touch.gloc.of bind-pattern)
     (push.car.iloc (0 . 0) "./boot/macro/synpat.scm" . 200744)
     (push.car.iloc (0 . 1) "./boot/macro/synpat.scm" . 200755)
     (push.iloc.0 . 2)
     (push.iloc.0 . 5)
     (apply.gloc.of bind-pattern "./boot/macro/synpat.scm" . 200730))
   (push)
   (apply.gloc.of bind-ellipsis-n "./boot/macro/synpat.scm" . 199689))
 (set.gloc.of bind-ellipsis-n)
 (ret.const.unspec))
((close
   (4 0 . bind-pattern)
   (iloc.0 . 1)
   (if.symbol?
     (push.iloc.0 . 1)
     (push.iloc.0 . 2)
     (subr.gloc.of memq 2 "./boot/macro/synpat.scm" . 205840)
     (if.true (ret.iloc 0 . 3))
     (touch.gloc.of bind-var!)
     (push.iloc.0 . 1)
     (push.iloc.0 . 2)
     (push.iloc.0 . 0)
     (push.iloc.0 . 3)
     (apply.gloc.of bind-var! "./boot/macro/synpat.scm" . 207888))
   (call
     (touch.gloc.of ellipsis-pair?)
     (push.iloc.0 . 1)
     (apply.gloc.of ellipsis-pair? "./boot/macro/synpat.scm" . 208908))
   (if.true
     (call
       (cddr.iloc (0 . 1) "./boot/macro/synpat.scm" . 209948)
       (if.not.null?.ret.const . #f)
       (push.iloc.0 . 0)
       (ret.subr.gloc.of list? "./boot/macro/synpat.scm" . 209960))
     (if.true
       (car.iloc (0 . 1) "./boot/macro/synpat.scm" . 210973)
       (if.symbol?
         (touch.gloc.of bind-var!)
         (push.car.iloc (0 . 1) "./boot/macro/synpat.scm" . 211999)
         (push.iloc.0 . 2)
         (push.iloc.0 . 0)
         (push.iloc.0 . 3)
         (apply.gloc.of bind-var! "./boot/macro/synpat.scm" . 211988))
       (touch.gloc.of bind-ellipsis)
       (push.iloc.0 . 0)
       (push.iloc.0 . 1)
       (push.iloc.0 . 2)
       (push.iloc.0 . 3)
       (push.const)
       (apply.gloc.of bind-ellipsis "./boot/macro/synpat.scm" . 213012))
     (call (push.iloc.0 . 0) (apply.gloc.of count-pair "./boot/macro/synpat.scm" . 214044))
     (push)
     (call
       (push.cddr.iloc (0 . 1) "./boot/macro/synpat.scm" . 214074)
       (apply.gloc.of count-pair "./boot/macro/synpat.scm" . 214062))
     (push)
     (push.subr.gloc.of - 2 "./boot/macro/synpat.scm" . 214041)
     (extend . 1)
     (touch.gloc.of bind-pattern)
     (push.iloc.1 . 0)
     (push.iloc.0 . 0)
     (push.subr.gloc.of list-tail 2 "./boot/macro/synpat.scm" . 215072)
     (push.cddr.iloc (1 . 1) "./boot/macro/synpat.scm" . 215091)
     (push.iloc.1 . 2)
     (call
       (call
         (=n.iloc (0 . 0) 0 "./boot/macro/synpat.scm" . 216105)
         (if.false.ret)
         (push.car.iloc (1 . 1) "./boot/macro/synpat.scm" . 216122)
         (ret.subr.gloc.of symbol? "./boot/macro/synpat.scm" . 216113))
       (if.true
         (touch.gloc.of bind-var!)
         (push.car.iloc (1 . 1) "./boot/macro/synpat.scm" . 217135)
         (push.iloc.1 . 2)
         (push.const)
         (push.iloc.1 . 3)
         (apply.gloc.of bind-var! "./boot/macro/synpat.scm" . 217124))
       (touch.gloc.of bind-ellipsis-n)
       (push.iloc.1 . 0)
       (push.iloc.1 . 1)
       (push.iloc.1 . 2)
       (push.iloc.0 . 0)
       (push.iloc.1 . 3)
       (push.const)
       (apply.gloc.of bind-ellipsis-n "./boot/macro/synpat.scm" . 218148))
     (push)
     (apply.gloc.of bind-pattern "./boot/macro/synpat.scm" . 215058))
   (iloc.0 . 1)
   (if.pair?
     (touch.gloc.of bind-pattern)
     (push.cdr.iloc (0 . 0) "./boot/macro/synpat.scm" . 220186)
     (push.cdr.iloc (0 . 1) "./boot/macro/synpat.scm" . 220197)
     (push.iloc.0 . 2)
     (call
       (touch.gloc.of bind-pattern)
       (push.car.iloc (0 . 0) "./boot/macro/synpat.scm" . 221224)
       (push.car.iloc (0 . 1) "./boot/macro/synpat.scm" . 221235)
       (push.iloc.0 . 2)
       (push.iloc.0 . 3)
       (apply.gloc.of bind-pattern "./boot/macro/synpat.scm" . 221210))
     (push)
     (apply.gloc.of bind-pattern "./boot/macro/synpat.scm" . 220172))
   (push.iloc.0 . 1)
   (subr.gloc.of vector? 1 "./boot/macro/synpat.scm" . 222220)
   (if.true
     (touch.gloc.of bind-pattern)
     (push.iloc.0 . 0)
     (push.subr.gloc.of vector->list 1 "./boot/macro/synpat.scm" . 223258)
     (push.iloc.0 . 1)
     (push.subr.gloc.of vector->list 1 "./boot/macro/synpat.scm" . 223278)
     (push.iloc.0 . 2)
     (push.iloc.0 . 3)
     (apply.gloc.of bind-pattern "./boot/macro/synpat.scm" . 223244))
   (ret.iloc 0 . 3))
 (set.gloc.of bind-pattern)
 (ret.const.unspec))

;
((close
   (2 0 . collect-rename-ids)
   (extend.enclose+
     (1 0 . loop)
     (iloc.0 . 0)
     (if.null?.ret.const)
     (push.car.iloc (0 . 0) "./boot/macro/syntmp.scm" . 10263)
     (push.iloc 2 . 1)
     (subr.gloc.of assq 2 "./boot/macro/syntmp.scm" . 10257)
     (if.true
       (push.cdr.iloc (0 . 0) "./boot/macro/syntmp.scm" . 11287)
       (apply.iloc+ (1 . 0) "./boot/macro/syntmp.scm" . 11281))
     (push.car.iloc (0 . 0) "./boot/macro/syntmp.scm" . 12311)
     (call
       (push.cdr.iloc (0 . 0) "./boot/macro/syntmp.scm" . 12327)
       (apply.iloc+ (1 . 0) "./boot/macro/syntmp.scm" . 12321))
     (ret.cons "./boot/macro/syntmp.scm" . 12305))
   (call
     (touch.gloc.of collect-unique-ids)
     (push.iloc.1 . 0)
     (apply.gloc.of collect-unique-ids "./boot/macro/syntmp.scm" . 6160))
   (push)
   (apply.iloc+ (0 . 0) "./boot/macro/syntmp.scm" . 8201))
 (set.gloc.of collect-rename-ids)
 (ret.const.unspec))
((close
   (1 0 . parse-ellipsis-splicing)
   (extend.enclose+
     (2 0 . loop)
     (call
       (iloc.0 . 1)
       (if.not.pair?.ret.const . #f)
       (touch.gloc.of ellipsis-id?)
       (push.car.iloc (0 . 1) "./boot/macro/syntmp.scm" . 17454)
       (apply.gloc.of ellipsis-id? "./boot/macro/syntmp.scm" . 17440))
     (if.true
       (push.n+.iloc (0 . 0) 1 "./boot/macro/syntmp.scm" . 18452)
       (push.cdr.iloc (0 . 1) "./boot/macro/syntmp.scm" . 18462)
       (apply.iloc+ (1 . 0) "./boot/macro/syntmp.scm" . 18446))
     (push.iloc 2 . 0)
     (push.iloc.0 . 0)
     (push.subr.gloc.of list-head 2 "./boot/macro/syntmp.scm" . 20502)
     (push.iloc.0 . 1)
     (push.iloc.0 . 0)
     (ret.subr.gloc.of values "./boot/macro/syntmp.scm" . 20494))
   (push.const . 2)
   (push.iloc.1 . 0)
   (push.subr.gloc.of cdddr 1 "./boot/macro/syntmp.scm" . 16414)
   (apply.iloc+ (0 . 0) "./boot/macro/syntmp.scm" . 17415))
 (set.gloc.of parse-ellipsis-splicing)
 (ret.const.unspec))
((close
   (2 0 . check-template)
   (extend.unbound . 2)
   (push.close
     (2 0 . control-patvar-exists?)
     (extend.enclose
       (2 0 . loop)
       (iloc.0 . 0)
       (if.symbol?
         (call
           (touch.gloc.of rank-of)
           (push.iloc.0 . 0)
           (push.iloc 4 . 1)
           (apply.gloc.of rank-of "./boot/macro/syntmp.scm" . 29718))
         (push)
         (push.iloc.0 . 1)
         (ret.subr.gloc.of >= "./boot/macro/syntmp.scm" . 29714))
       (call
         (touch.gloc.of ellipsis-quote?)
         (push.iloc.0 . 0)
         (apply.gloc.of ellipsis-quote? "./boot/macro/syntmp.scm" . 30738))
       (if.true
         (touch.gloc.of any1)
         (push.close
           (1 0)
           (call
             (touch.gloc.of rank-of)
             (push.iloc.0 . 0)
             (push.iloc 5 . 1)
             (apply.gloc.of rank-of "./boot/macro/syntmp.scm" . 31785))
           (push)
           (push.iloc.1 . 1)
           (ret.subr.gloc.of >= "./boot/macro/syntmp.scm" . 31781))
         (call
           (touch.gloc.of collect-unique-ids)
           (push.iloc.0 . 0)
           (apply.gloc.of collect-unique-ids "./boot/macro/syntmp.scm" . 31812))
         (push)
         (apply.gloc.of any1 "./boot/macro/syntmp.scm" . 31762))
       (call
         (touch.gloc.of ellipsis-splicing-pair?)
         (push.iloc.0 . 0)
         (apply.gloc.of ellipsis-splicing-pair? "./boot/macro/syntmp.scm" . 32786))
       (if.true
         (push.close
           (0 0)
           (touch.gloc.of parse-ellipsis-splicing)
           (push.iloc.1 . 0)
           (apply.gloc.of parse-ellipsis-splicing "./boot/macro/syntmp.scm" . 33840))
         (push.close
           (3 0)
           (call
             (push.iloc.0 . 0)
             (push.n+.iloc (1 . 1) 1 "./boot/macro/syntmp.scm" . 34851)
             (apply.iloc (2 . 0) "./boot/macro/syntmp.scm" . 34840))
           (if.true.ret)
           (call
             (push.iloc.0 . 0)
             (push.const . 1)
             (apply.iloc (2 . 0) "./boot/macro/syntmp.scm" . 35869))
           (if.false.ret)
           (push.iloc.0 . 1)
           (push.iloc.1 . 1)
           (apply.iloc (2 . 0) "./boot/macro/syntmp.scm" . 36893))
         (apply.gloc.of
           |.call-with-values|
           (|.call-with-values|
             (lambda () (parse-ellipsis-splicing |lst`1437*|))
             (lambda (|body`1441*| |tail`1441*| |len`1441*|)
               (or (|loop`1436*| |body`1441*| (+ |depth`1437*| 1))
                   (and (|loop`1436*| |body`1441*| 1)
                        (|loop`1436*| |tail`1441*| |depth`1437*|)))))))
       (call
         (touch.gloc.of ellipsis-pair?)
         (push.iloc.0 . 0)
         (apply.gloc.of ellipsis-pair? "./boot/macro/syntmp.scm" . 37906))
       (if.true
         (call
           (push.car.iloc (0 . 0) "./boot/macro/syntmp.scm" . 38940)
           (push.n+.iloc (0 . 1) 1 "./boot/macro/syntmp.scm" . 38950)
           (apply.iloc (1 . 0) "./boot/macro/syntmp.scm" . 38934))
         (if.true.ret)
         (call
           (push.car.iloc (0 . 0) "./boot/macro/syntmp.scm" . 39969)
           (push.const . 1)
           (apply.iloc (1 . 0) "./boot/macro/syntmp.scm" . 39963))
         (if.false.ret)
         (push.cddr.iloc (0 . 0) "./boot/macro/syntmp.scm" . 40993)
         (push.iloc.0 . 1)
         (apply.iloc (1 . 0) "./boot/macro/syntmp.scm" . 40987))
       (iloc.0 . 0)
       (if.pair?
         (call
           (push.car.iloc (0 . 0) "./boot/macro/syntmp.scm" . 43036)
           (push.iloc.0 . 1)
           (apply.iloc (1 . 0) "./boot/macro/syntmp.scm" . 43030))
         (if.true.ret)
         (push.cdr.iloc (0 . 0) "./boot/macro/syntmp.scm" . 44060)
         (push.iloc.0 . 1)
         (apply.iloc (1 . 0) "./boot/macro/syntmp.scm" . 44054))
       (push.iloc.0 . 0)
       (subr.gloc.of vector? 1 "./boot/macro/syntmp.scm" . 45074)
       (if.false.ret)
       (push.iloc.0 . 0)
       (push.subr.gloc.of vector->list 1 "./boot/macro/syntmp.scm" . 46104)
       (push.iloc.0 . 1)
       (apply.iloc (1 . 0) "./boot/macro/syntmp.scm" . 46098))
     (push.iloc.1 . 0)
     (push.iloc.1 . 1)
     (apply.iloc (0 . 0) "./boot/macro/syntmp.scm" . 28683))
   (push.close+
     (2 0 . check-escaped)
     (extend.enclose+
       (1 0 . loop)
       (iloc.0 . 0)
       (if.symbol?
         (push.const . 0)
         (call
           (touch.gloc.of rank-of)
           (push.iloc.0 . 0)
           (push.iloc 4 . 1)
           (apply.gloc.of rank-of "./boot/macro/syntmp.scm" . 53276))
         (push)
         (push.iloc 2 . 1)
         (subr.gloc.of < 3 "./boot/macro/syntmp.scm" . 53271)
         (if.false.ret)
         (push.const . "syntax template")
         (push.const . "too few ellipsis following subtemplate")
         (push.iloc 4 . 0)
         (push.iloc.0 . 0)
         (apply.gloc.of syntax-violation "./boot/macro/syntmp.scm" . 54295))
       (iloc.0 . 0)
       (if.pair?
         (call
           (push.car.iloc (0 . 0) "./boot/macro/syntmp.scm" . 56344)
           (apply.iloc+ (1 . 0) "./boot/macro/syntmp.scm" . 56338))
         (push.cdr.iloc (0 . 0) "./boot/macro/syntmp.scm" . 57368)
         (apply.iloc+ (1 . 0) "./boot/macro/syntmp.scm" . 57362))
       (push.iloc.0 . 0)
       (subr.gloc.of vector? 1 "./boot/macro/syntmp.scm" . 58386)
       (if.true
         (push.iloc.0 . 0)
         (push.subr.gloc.of vector->list 1 "./boot/macro/syntmp.scm" . 59416)
         (apply.iloc+ (1 . 0) "./boot/macro/syntmp.scm" . 59410))
       (ret.const.unspec))
     (push.iloc.1 . 0)
     (apply.iloc+ (0 . 0) "./boot/macro/syntmp.scm" . 52235))
   (enclose . 2)
   (call
     (call
       (touch.gloc.of safe-length)
       (push.iloc.1 . 0)
       (apply.gloc.of safe-length "./boot/macro/syntmp.scm" . 61457))
     (push)
     (push.const . 2)
     (subr.gloc.of = 2 "./boot/macro/syntmp.scm" . 61454)
     (if.false.ret)
     (touch.gloc.of ellipsis-id?)
     (push.car.iloc (1 . 0) "./boot/macro/syntmp.scm" . 61493)
     (apply.gloc.of ellipsis-id? "./boot/macro/syntmp.scm" . 61479))
   (if.true
     (push.cadr.iloc (1 . 0) "./boot/macro/syntmp.scm" . 62488)
     (push.const . 0)
     (apply.iloc+ (0 . 1) "./boot/macro/syntmp.scm" . 62473))
   (extend.enclose
     (2 0 . loop)
     (iloc.0 . 0)
     (if.symbol?
       (call
         (call
           (touch.gloc.of ellipsis-id?)
           (push.iloc.0 . 0)
           (apply.gloc.of ellipsis-id? "./boot/macro/syntmp.scm" . 65559))
         (if.false.ret)
         (push.const . "syntax template")
         (push.const . "misplaced ellipsis")
         (push.iloc 3 . 0)
         (apply.gloc.of syntax-violation "./boot/macro/syntmp.scm" . 66583))
       (call
         (touch.gloc.of rank-of)
         (push.iloc.0 . 0)
         (push.iloc 3 . 1)
         (apply.gloc.of rank-of "./boot/macro/syntmp.scm" . 67610))
       (>.iloc (0 . 1) "./boot/macro/syntmp.scm" . 67607)
       (if.false.ret)
       (push.const . "syntax template")
       (push.const . "too few ellipsis following subtemplate")
       (push.iloc 3 . 0)
       (push.iloc.0 . 0)
       (apply.gloc.of syntax-violation "./boot/macro/syntmp.scm" . 68631))
     (call
       (touch.gloc.of ellipsis-quote?)
       (push.iloc.0 . 0)
       (apply.gloc.of ellipsis-quote? "./boot/macro/syntmp.scm" . 69650))
     (if.true
       (push.cadr.iloc (0 . 0) "./boot/macro/syntmp.scm" . 70689)
       (push.iloc.0 . 1)
       (apply.iloc+ (2 . 1) "./boot/macro/syntmp.scm" . 70674))
     (call
       (touch.gloc.of ellipsis-splicing-pair?)
       (push.iloc.0 . 0)
       (apply.gloc.of ellipsis-splicing-pair? "./boot/macro/syntmp.scm" . 71698))
     (if.true
       (push.close
         (0 0)
         (touch.gloc.of parse-ellipsis-splicing)
         (push.iloc.1 . 0)
         (apply.gloc.of parse-ellipsis-splicing "./boot/macro/syntmp.scm" . 72752))
       (push.close
         (3 0)
         (call
           (=n.iloc (1 . 1) 0 "./boot/macro/syntmp.scm" . 73753)
           (if.false.ret)
           (call
             (push.car.iloc (1 . 0) "./boot/macro/syntmp.scm" . 74805)
             (push.iloc.0 . 2)
             (apply.iloc (3 . 0) "./boot/macro/syntmp.scm" . 74781))
           (if.true.ret)
           (push.const . "syntax template")
           (push.const . "missing pattern variable that used in same level as in pattern")
           (push.iloc 4 . 0)
           (push.iloc.1 . 0)
           (apply.gloc.of syntax-violation "./boot/macro/syntmp.scm" . 75805))
         (call
           (push.iloc.0 . 0)
           (push.n+.iloc (1 . 1) 1 "./boot/macro/syntmp.scm" . 76831)
           (apply.iloc (2 . 0) "./boot/macro/syntmp.scm" . 76820))
         (push.iloc.0 . 1)
         (push.iloc.1 . 1)
         (apply.iloc (2 . 0) "./boot/macro/syntmp.scm" . 77844))
       (apply.gloc.of
         |.call-with-values|
         (|.call-with-values|
           (lambda () (parse-ellipsis-splicing |lst`1455*|))
           (lambda (|body`1457*| |tail`1457*| |len`1457*|)
             (and (= |depth`1455*| 0)
                  (or (|control-patvar-exists?`1431*| (car |lst`1455*|) |len`1457*|)
                      (syntax-violation
                        "syntax template"
                        "missing pattern variable that used in same level as in pattern"
                        |tmpl`1430*|
                        |lst`1455*|)))
             (|loop`1454*| |body`1457*| (+ |depth`1455*| 1))
             (|loop`1454*| |tail`1457*| |depth`1455*|)))))
     (call
       (touch.gloc.of ellipsis-pair?)
       (push.iloc.0 . 0)
       (apply.gloc.of ellipsis-pair? "./boot/macro/syntmp.scm" . 78866))
     (if.true
       (car.iloc (0 . 0) "./boot/macro/syntmp.scm" . 79906)
       (if.symbol?
         (call
           (touch.gloc.of rank-of)
           (push.car.iloc (0 . 0) "./boot/macro/syntmp.scm" . 80942)
           (push.iloc 3 . 1)
           (apply.gloc.of rank-of "./boot/macro/syntmp.scm" . 80933))
         (push)
         (extend . 1)
         (<n.iloc (0 . 0) 0 "./boot/macro/syntmp.scm" . 81954)
         (if.true
           (push.const . "syntax template")
           (push.const . "misplace ellipsis following literal")
           (push.iloc 4 . 0)
           (push.car.iloc (1 . 0) "./boot/macro/syntmp.scm" . 83057)
           (apply.gloc.of syntax-violation "./boot/macro/syntmp.scm" . 82978))
         (n+.iloc (1 . 1) 1 "./boot/macro/syntmp.scm" . 84010)
         (<.iloc (0 . 0) "./boot/macro/syntmp.scm" . 84002)
         (if.true
           (push.const . "syntax template")
           (push.const . "too few ellipsis following subtemplate")
           (push.iloc 4 . 0)
           (push.car.iloc (1 . 0) "./boot/macro/syntmp.scm" . 85108)
           (apply.gloc.of syntax-violation "./boot/macro/syntmp.scm" . 85026))
         (push.cddr.iloc (1 . 0) "./boot/macro/syntmp.scm" . 87080)
         (push.iloc.1 . 1)
         (apply.iloc (2 . 0) "./boot/macro/syntmp.scm" . 87074))
       (car.iloc (0 . 0) "./boot/macro/syntmp.scm" . 88096)
       (if.pair?
         (call
           (=n.iloc (0 . 1) 0 "./boot/macro/syntmp.scm" . 89118)
           (if.false.ret)
           (call
             (push.car.iloc (0 . 0) "./boot/macro/syntmp.scm" . 90170)
             (push.n+.iloc (0 . 1) 1 "./boot/macro/syntmp.scm" . 90180)
             (apply.iloc (2 . 0) "./boot/macro/syntmp.scm" . 90146))
           (if.true.ret)
           (push.const . "syntax template")
           (push.const . "missing pattern variable that used in same level as in pattern")
           (push.iloc 3 . 0)
           (push.car.iloc (0 . 0) "./boot/macro/syntmp.scm" . 91276)
           (apply.gloc.of syntax-violation "./boot/macro/syntmp.scm" . 91170))
         (call
           (push.car.iloc (0 . 0) "./boot/macro/syntmp.scm" . 92191)
           (push.n+.iloc (0 . 1) 1 "./boot/macro/syntmp.scm" . 92201)
           (apply.iloc (1 . 0) "./boot/macro/syntmp.scm" . 92185))
         (push.cddr.iloc (0 . 0) "./boot/macro/syntmp.scm" . 93215)
         (push.iloc.0 . 1)
         (apply.iloc (1 . 0) "./boot/macro/syntmp.scm" . 93209))
       (car.iloc (0 . 0) "./boot/macro/syntmp.scm" . 94240)
       (if.null?
         (push.const . "syntax template")
         (push.const . "misplaced ellipsis following empty list")
         (push.iloc 3 . 0)
         (apply.gloc.of syntax-violation "./boot/macro/syntmp.scm" . 95257))
       (push.const . "syntax template")
       (push.const . "misplaced ellipsis following literal")
       (push.iloc 3 . 0)
       (push.car.iloc (0 . 0) "./boot/macro/syntmp.scm" . 97385)
       (apply.gloc.of syntax-violation "./boot/macro/syntmp.scm" . 97305))
     (iloc.0 . 0)
     (if.pair?
       (call
         (push.car.iloc (0 . 0) "./boot/macro/syntmp.scm" . 99352)
         (push.iloc.0 . 1)
         (apply.iloc (1 . 0) "./boot/macro/syntmp.scm" . 99346))
       (push.cdr.iloc (0 . 0) "./boot/macro/syntmp.scm" . 100376)
       (push.iloc.0 . 1)
       (apply.iloc (1 . 0) "./boot/macro/syntmp.scm" . 100370))
     (push.iloc.0 . 0)
     (subr.gloc.of vector? 1 "./boot/macro/syntmp.scm" . 101394)
     (if.true
       (push.iloc.0 . 0)
       (push.subr.gloc.of vector->list 1 "./boot/macro/syntmp.scm" . 102424)
       (push.iloc.0 . 1)
       (apply.iloc (1 . 0) "./boot/macro/syntmp.scm" . 102418))
     (ret.const.unspec))
   (push.iloc 2 . 0)
   (push.const . 0)
   (apply.iloc (0 . 0) "./boot/macro/syntmp.scm" . 64523))
 (set.gloc.of check-template)
 (ret.const.unspec))
((close
   (2 0 . rank-of)
   (push.iloc.0 . 0)
   (push.iloc.0 . 1)
   (push.subr.gloc.of assq 2 "./boot/macro/syntmp.scm" . 106513)
   (extend . 1)
   (iloc.0 . 0)
   (if.true (push.iloc.0 . 0) (ret.subr.gloc.of cdr "./boot/macro/syntmp.scm" . 107536))
   (ret.const . -1))
 (set.gloc.of rank-of)
 (ret.const.unspec))
((close
   (2 0 . subform-of)
   (push.iloc.0 . 0)
   (push.iloc.0 . 1)
   (push.subr.gloc.of assq 2 "./boot/macro/syntmp.scm" . 111626)
   (ret.subr.gloc.of cdr "./boot/macro/syntmp.scm" . 111621))
 (set.gloc.of subform-of)
 (ret.const.unspec))
((close
   (4 0 . collect-ellipsis-vars)
   (call
     (touch.gloc.of collect-unique-ids)
     (push.iloc.0 . 0)
     (apply.gloc.of collect-unique-ids "./boot/macro/syntmp.scm" . 115728))
   (push)
   (extend . 1)
   (push.gloc.of values)
   (call
     (push.close
       (1 0)
       (push.car.iloc (0 . 0) "./boot/macro/syntmp.scm" . 118817)
       (push.iloc.1 . 0)
       (subr.gloc.of memq 2 "./boot/macro/syntmp.scm" . 118811)
       (if.false.ret)
       (push.car.iloc (0 . 0) "./boot/macro/syntmp.scm" . 119858)
       (push.iloc 2 . 1)
       (push.subr.gloc.of assq 2 "./boot/macro/syntmp.scm" . 119852)
       (subr.gloc.of cdr 1 "./boot/macro/syntmp.scm" . 119847)
       (<.iloc (2 . 2) "./boot/macro/syntmp.scm" . 120868)
       (if.true (ret.iloc 0 . 0))
       (cdr.iloc (0 . 0) "./boot/macro/syntmp.scm" . 121899)
       (if.null? (ret.iloc 0 . 0))
       (push.car.iloc (0 . 0) "./boot/macro/syntmp.scm" . 122927)
       (cadr.iloc (0 . 0) "./boot/macro/syntmp.scm" . 122938)
       (ret.cons "./boot/macro/syntmp.scm" . 122921))
     (push.iloc.1 . 3)
     (apply.gloc.of
       map
       (map (lambda (|slot`1472*|)
              (and (memq (car |slot`1472*|) |ids`1470*|)
                   (if (< (cdr (assq (car |slot`1472*|) |ranks`1468*|)) |depth`1468*|)
                       |slot`1472*|
                       (if (null? (cdr |slot`1472*|))
                           |slot`1472*|
                           (cons (car |slot`1472*|) (cadr |slot`1472*|))))))
            |vars`1468*|)))
   (push)
   (apply.gloc.of
     filter
     (filter
       values
       (map (lambda (|slot`1472*|)
              (and (memq (car |slot`1472*|) |ids`1470*|)
                   (if (< (cdr (assq (car |slot`1472*|) |ranks`1468*|)) |depth`1468*|)
                       |slot`1472*|
                       (if (null? (cdr |slot`1472*|))
                           |slot`1472*|
                           (cons (car |slot`1472*|) (cadr |slot`1472*|))))))
            |vars`1468*|))))
 (set.gloc.of collect-ellipsis-vars)
 (ret.const.unspec))
((close
   (3 0 . consume-ellipsis-vars)
   (push.const . #f)
   (push.const . #f)
   (extend . 2)
   (call
     (extend.enclose
       (1 0 . loop)
       (iloc.0 . 0)
       (if.null?.ret.const)
       (call
         (touch.gloc.of rank-of)
         (push.iloc.0 . 0)
         (push.subr.gloc.of caar 1 "./boot/macro/syntmp.scm" . 137251)
         (push.iloc 3 . 0)
         (apply.gloc.of rank-of "./boot/macro/syntmp.scm" . 137242))
       (<.iloc (3 . 1) "./boot/macro/syntmp.scm" . 137239)
       (if.true
         (push.car.iloc (0 . 0) "./boot/macro/syntmp.scm" . 138269)
         (call
           (push.cdr.iloc (0 . 0) "./boot/macro/syntmp.scm" . 138285)
           (apply.iloc (1 . 0) "./boot/macro/syntmp.scm" . 138279))
         (ret.cons "./boot/macro/syntmp.scm" . 138263))
       (push.iloc.0 . 0)
       (subr.gloc.of cdar 1 "./boot/macro/syntmp.scm" . 139294)
       (if.null?
         (push.cdr.iloc (0 . 0) "./boot/macro/syntmp.scm" . 140317)
         (apply.iloc (1 . 0) "./boot/macro/syntmp.scm" . 140311))
       (push.iloc.0 . 0)
       (subr.gloc.of cddar 1 "./boot/macro/syntmp.scm" . 141342)
       (if.null?
         (const . #t)
         (set.iloc (2 . 0) "./boot/macro/syntmp.scm" . 142359)
         (push.cdr.iloc (0 . 0) "./boot/macro/syntmp.scm" . 143389)
         (apply.iloc (1 . 0) "./boot/macro/syntmp.scm" . 143383))
       (call
         (push.iloc.0 . 0)
         (push.subr.gloc.of cdar 1 "./boot/macro/syntmp.scm" . 145451)
         (subr.gloc.of circular-list? 1 "./boot/macro/syntmp.scm" . 145435)
         (if.true.ret)
         (const . #t)
         (set.iloc (2 . 1) "./boot/macro/syntmp.scm" . 145463)
         (ret.const.unspec))
       (touch.gloc.of acons)
       (push.iloc.0 . 0)
       (push.subr.gloc.of caar 1 "./boot/macro/syntmp.scm" . 146462)
       (push.iloc.0 . 0)
       (push.subr.gloc.of cddar 1 "./boot/macro/syntmp.scm" . 146473)
       (call
         (push.cdr.iloc (0 . 0) "./boot/macro/syntmp.scm" . 146491)
         (apply.iloc (1 . 0) "./boot/macro/syntmp.scm" . 146485))
       (push)
       (apply.gloc.of acons "./boot/macro/syntmp.scm" . 146455))
     (push.iloc 2 . 2)
     (apply.iloc (0 . 0) "./boot/macro/syntmp.scm" . 136208))
   (push)
   (extend . 1)
   (iloc.1 . 1)
   (if.true (iloc.1 . 0) (if.true.ret.const . #f) (ret.iloc 0 . 0))
   (iloc.1 . 0)
   (if.true.ret)
   (ret.const))
 (set.gloc.of consume-ellipsis-vars)
 (ret.const.unspec))
((close
   (3 0 . contain-rank-moved-var?)
   (extend.enclose+
     (2 0 . traverse-escaped)
     (extend.enclose+
       (2 0 . loop)
       (iloc.0 . 0)
       (if.symbol?
         (push.const . 0)
         (call
           (touch.gloc.of rank-of)
           (push.iloc.0 . 0)
           (push.iloc 4 . 1)
           (apply.gloc.of rank-of "./boot/macro/syntmp.scm" . 158743))
         (push)
         (push.iloc.0 . 1)
         (ret.subr.gloc.of < "./boot/macro/syntmp.scm" . 158738))
       (iloc.0 . 0)
       (if.pair?
         (call
           (push.car.iloc (0 . 0) "./boot/macro/syntmp.scm" . 160796)
           (push.iloc.0 . 1)
           (apply.iloc+ (1 . 0) "./boot/macro/syntmp.scm" . 160790))
         (if.true.ret)
         (push.cdr.iloc (0 . 0) "./boot/macro/syntmp.scm" . 161820)
         (push.iloc.0 . 1)
         (apply.iloc+ (1 . 0) "./boot/macro/syntmp.scm" . 161814))
       (push.iloc.0 . 0)
       (subr.gloc.of vector? 1 "./boot/macro/syntmp.scm" . 162834)
       (if.false.ret)
       (push.iloc.0 . 0)
       (push.subr.gloc.of vector->list 1 "./boot/macro/syntmp.scm" . 163864)
       (push.iloc.0 . 1)
       (apply.iloc+ (1 . 0) "./boot/macro/syntmp.scm" . 163858))
     (push.iloc.1 . 0)
     (push.iloc.1 . 1)
     (apply.iloc+ (0 . 0) "./boot/macro/syntmp.scm" . 157707))
   (extend.enclose
     (2 0 . loop)
     (iloc.0 . 0)
     (if.symbol?
       (push.const . 0)
       (call
         (touch.gloc.of rank-of)
         (push.iloc.0 . 0)
         (push.iloc 3 . 1)
         (apply.gloc.of rank-of "./boot/macro/syntmp.scm" . 168979))
       (push)
       (push.iloc.0 . 1)
       (ret.subr.gloc.of < "./boot/macro/syntmp.scm" . 168974))
     (call
       (touch.gloc.of ellipsis-quote?)
       (push.iloc.0 . 0)
       (apply.gloc.of ellipsis-quote? "./boot/macro/syntmp.scm" . 169998))
     (if.true
       (push.cadr.iloc (0 . 0) "./boot/macro/syntmp.scm" . 171040)
       (push.iloc.0 . 1)
       (apply.iloc+ (2 . 0) "./boot/macro/syntmp.scm" . 171022))
     (call
       (touch.gloc.of ellipsis-splicing-pair?)
       (push.iloc.0 . 0)
       (apply.gloc.of ellipsis-splicing-pair? "./boot/macro/syntmp.scm" . 172046))
     (if.true
       (push.close
         (0 0)
         (touch.gloc.of parse-ellipsis-splicing)
         (push.iloc.1 . 0)
         (apply.gloc.of parse-ellipsis-splicing "./boot/macro/syntmp.scm" . 173100))
       (push.close
         (3 0)
         (call
           (push.iloc.0 . 0)
           (push.n+.iloc (1 . 1) 1 "./boot/macro/syntmp.scm" . 174111)
           (apply.iloc (2 . 0) "./boot/macro/syntmp.scm" . 174100))
         (if.true.ret)
         (push.iloc.0 . 1)
         (push.iloc.1 . 1)
         (apply.iloc (2 . 0) "./boot/macro/syntmp.scm" . 175124))
       (apply.gloc.of
         |.call-with-values|
         (|.call-with-values|
           (lambda () (parse-ellipsis-splicing |lst`1501*|))
           (lambda (|body`1503*| |tail`1503*| |len`1503*|)
             (or (|loop`1500*| |body`1503*| (+ |depth`1501*| 1))
                 (|loop`1500*| |tail`1503*| |depth`1501*|))))))
     (call
       (touch.gloc.of ellipsis-pair?)
       (push.iloc.0 . 0)
       (apply.gloc.of ellipsis-pair? "./boot/macro/syntmp.scm" . 176142))
     (if.true
       (call
         (push.car.iloc (0 . 0) "./boot/macro/syntmp.scm" . 177176)
         (push.n+.iloc (0 . 1) 1 "./boot/macro/syntmp.scm" . 177186)
         (apply.iloc (1 . 0) "./boot/macro/syntmp.scm" . 177170))
       (if.true.ret)
       (push.cddr.iloc (0 . 0) "./boot/macro/syntmp.scm" . 178200)
       (push.iloc.0 . 1)
       (apply.iloc (1 . 0) "./boot/macro/syntmp.scm" . 178194))
     (iloc.0 . 0)
     (if.pair?
       (call
         (push.car.iloc (0 . 0) "./boot/macro/syntmp.scm" . 180248)
         (push.iloc.0 . 1)
         (apply.iloc (1 . 0) "./boot/macro/syntmp.scm" . 180242))
       (if.true.ret)
       (push.cdr.iloc (0 . 0) "./boot/macro/syntmp.scm" . 181272)
       (push.iloc.0 . 1)
       (apply.iloc (1 . 0) "./boot/macro/syntmp.scm" . 181266))
     (push.iloc.0 . 0)
     (subr.gloc.of vector? 1 "./boot/macro/syntmp.scm" . 182286)
     (if.false.ret)
     (push.iloc.0 . 0)
     (push.subr.gloc.of vector->list 1 "./boot/macro/syntmp.scm" . 183316)
     (push.iloc.0 . 1)
     (apply.iloc (1 . 0) "./boot/macro/syntmp.scm" . 183310))
   (push.iloc 2 . 0)
   (push.const . 0)
   (apply.iloc (0 . 0) "./boot/macro/syntmp.scm" . 167943))
 (set.gloc.of contain-rank-moved-var?)
 (ret.const.unspec))
((close
   (1 0 . make-infinite-list)
   (push.iloc.0 . 0)
   (push.subr.gloc.of list 1 "./boot/macro/syntmp.scm" . 195610)
   (extend . 1)
   (push.iloc.0 . 0)
   (push.iloc.0 . 0)
   (subr.gloc.of set-cdr! 2 "./boot/macro/syntmp.scm" . 196632)
   (ret.iloc 0 . 0))
 (set.gloc.of |make-infinite-list`1511*|)
 (close
   (3 0 . rewrite-template-ranks-vars)
   (subr.gloc.of make-core-hashtable 0)
   (push)
   (subr.gloc.of make-core-hashtable 0)
   (push)
   (extend . 2)
   (extend.unbound . 2)
   (push.close
     (2 0 . revealed)
     (push.const . 0)
     (call
       (touch.gloc.of rank-of)
       (push.iloc.0 . 0)
       (push.iloc 3 . 1)
       (apply.gloc.of rank-of "./boot/macro/syntmp.scm" . 200728))
     (push)
     (push.iloc.0 . 1)
     (subr.gloc.of < 3 "./boot/macro/syntmp.scm" . 200723)
     (if.true
       (push.const . "~a:~a")
       (call (apply.gloc.of generate-temporary-symbol "./boot/macro/syntmp.scm" . 201794))
       (push)
       (push.iloc.0 . 0)
       (push.subr.gloc.of format 3 "./boot/macro/syntmp.scm" . 201778)
       (push.subr.gloc.of string->symbol 1 "./boot/macro/syntmp.scm" . 201762)
       (extend . 1)
       (call
         (push.iloc 3 . 0)
         (push.iloc.0 . 0)
         (push.const . #f)
         (subr.gloc.of core-hashtable-ref 3 "./boot/macro/syntmp.scm" . 202777)
         (if.true.ret)
         (extend.enclose+
           (2 0 . loop)
           (>n.iloc (0 . 0) 0 "./boot/macro/syntmp.scm" . 204834)
           (if.true
             (push.n+.iloc (0 . 0) -1 "./boot/macro/syntmp.scm" . 205864)
             (call
               (touch.gloc.of |make-infinite-list`1511*|)
               (push.car.iloc (0 . 1) "./boot/macro/syntmp.scm" . 205898)
               (apply.gloc.of |make-infinite-list`1511*| "./boot/macro/syntmp.scm" . 205878))
             (push)
             (push.subr.gloc.of list 1 "./boot/macro/syntmp.scm" . 205872)
             (apply.iloc+ (1 . 0) "./boot/macro/syntmp.scm" . 205858))
           (push.iloc 5 . 0)
           (push.iloc 2 . 0)
           (push.iloc 3 . 1)
           (subr.gloc.of core-hashtable-set! 3 "./boot/macro/syntmp.scm" . 207906)
           (push.iloc 5 . 1)
           (push.iloc 2 . 0)
           (push.iloc.0 . 1)
           (ret.subr.gloc.of core-hashtable-set! "./boot/macro/syntmp.scm" . 208930))
         (push.iloc 2 . 1)
         (call
           (touch.gloc.of rank-of)
           (push.iloc 2 . 0)
           (push.iloc 5 . 1)
           (apply.gloc.of rank-of "./boot/macro/syntmp.scm" . 203824))
         (push)
         (push.subr.gloc.of - 2 "./boot/macro/syntmp.scm" . 203815)
         (call
           (touch.gloc.of subform-of)
           (push.iloc 2 . 0)
           (push.iloc 5 . 2)
           (apply.gloc.of subform-of "./boot/macro/syntmp.scm" . 203852))
         (push)
         (apply.iloc+ (0 . 0) "./boot/macro/syntmp.scm" . 204827))
       (ret.iloc 0 . 0))
     (ret.iloc 0 . 0))
   (push.close
     (2 0 . traverse-escaped)
     (extend.enclose
       (2 0 . loop)
       (iloc.0 . 0)
       (if.symbol?
         (push.iloc.0 . 0)
         (push.iloc.0 . 1)
         (apply.iloc (3 . 0) "./boot/macro/syntmp.scm" . 217112))
       (iloc.0 . 0)
       (if.pair?
         (call
           (push.car.iloc (0 . 0) "./boot/macro/syntmp.scm" . 219172)
           (push.iloc.0 . 1)
           (apply.iloc (1 . 0) "./boot/macro/syntmp.scm" . 219166))
         (push)
         (call
           (push.cdr.iloc (0 . 0) "./boot/macro/syntmp.scm" . 220196)
           (push.iloc.0 . 1)
           (apply.iloc (1 . 0) "./boot/macro/syntmp.scm" . 220190))
         (ret.cons "./boot/macro/syntmp.scm" . 219160))
       (push.iloc.0 . 0)
       (subr.gloc.of vector? 1 "./boot/macro/syntmp.scm" . 221208)
       (if.true
         (call
           (push.iloc.0 . 0)
           (push.subr.gloc.of vector->list 1 "./boot/macro/syntmp.scm" . 222252)
           (push.iloc.0 . 1)
           (apply.iloc (1 . 0) "./boot/macro/syntmp.scm" . 222246))
         (push)
         (ret.subr.gloc.of list->vector "./boot/macro/syntmp.scm" . 222232))
       (ret.iloc 0 . 0))
     (push.iloc.1 . 0)
     (push.iloc.1 . 1)
     (apply.iloc (0 . 0) "./boot/macro/syntmp.scm" . 216081))
   (enclose . 2)
   (call
     (extend.enclose
       (2 0 . loop)
       (iloc.0 . 0)
       (if.symbol?
         (push.iloc.0 . 0)
         (push.iloc.0 . 1)
         (apply.iloc (2 . 0) "./boot/macro/syntmp.scm" . 228379))
       (call
         (touch.gloc.of ellipsis-quote?)
         (push.iloc.0 . 0)
         (apply.gloc.of ellipsis-quote? "./boot/macro/syntmp.scm" . 229403))
       (if.true
         (push.car.iloc (0 . 0) "./boot/macro/syntmp.scm" . 230433)
         (call
           (push.cdr.iloc (0 . 0) "./boot/macro/syntmp.scm" . 231475)
           (push.iloc.0 . 1)
           (apply.iloc (2 . 1) "./boot/macro/syntmp.scm" . 231457))
         (ret.cons "./boot/macro/syntmp.scm" . 230427))
       (call
         (touch.gloc.of ellipsis-splicing-pair?)
         (push.iloc.0 . 0)
         (apply.gloc.of ellipsis-splicing-pair? "./boot/macro/syntmp.scm" . 232475))
       (if.true
         (push.close
           (0 0)
           (touch.gloc.of parse-ellipsis-splicing)
           (push.iloc.1 . 0)
           (apply.gloc.of parse-ellipsis-splicing "./boot/macro/syntmp.scm" . 233529))
         (push.close
           (3 0)
           (call
             (push.iloc.0 . 0)
             (push.n+.iloc (1 . 1) 1 "./boot/macro/syntmp.scm" . 234544)
             (apply.iloc (2 . 0) "./boot/macro/syntmp.scm" . 234533))
           (push)
           (call
             (touch.gloc.of ellipsis-id)
             (apply.gloc.of ellipsis-id "./boot/macro/syntmp.scm" . 234563))
           (push)
           (call
             (push.iloc.0 . 1)
             (push.iloc.1 . 1)
             (apply.iloc (2 . 0) "./boot/macro/syntmp.scm" . 234577))
           (push.cons)
           (ret.subr.gloc.of append "./boot/macro/syntmp.scm" . 234525))
         (apply.gloc.of
           |.call-with-values|
           (|.call-with-values|
             (lambda () (parse-ellipsis-splicing |lst`1537*|))
             (lambda (|body`1539*| |tail`1539*| |len`1539*|)
               (append
                 (|loop`1536*| |body`1539*| (+ |depth`1537*| 1))
                 (cons (ellipsis-id) (|loop`1536*| |tail`1539*| |depth`1537*|)))))))
       (call
         (touch.gloc.of ellipsis-pair?)
         (push.iloc.0 . 0)
         (apply.gloc.of ellipsis-pair? "./boot/macro/syntmp.scm" . 235547))
       (if.true
         (call
           (push.car.iloc (0 . 0) "./boot/macro/syntmp.scm" . 236583)
           (push.n+.iloc (0 . 1) 1 "./boot/macro/syntmp.scm" . 236593)
           (apply.iloc (1 . 0) "./boot/macro/syntmp.scm" . 236577))
         (push)
         (call
           (touch.gloc.of ellipsis-id)
           (apply.gloc.of ellipsis-id "./boot/macro/syntmp.scm" . 237607))
         (push)
         (call
           (push.cddr.iloc (0 . 0) "./boot/macro/syntmp.scm" . 237627)
           (push.iloc.0 . 1)
           (apply.iloc (1 . 0) "./boot/macro/syntmp.scm" . 237621))
         (push)
         (subr.gloc.of cons 2 "./boot/macro/syntmp.scm" . 237601)
         (ret.cons "./boot/macro/syntmp.scm" . 236571))
       (iloc.0 . 0)
       (if.pair?
         (call
           (push.car.iloc (0 . 0) "./boot/macro/syntmp.scm" . 239655)
           (push.iloc.0 . 1)
           (apply.iloc (1 . 0) "./boot/macro/syntmp.scm" . 239649))
         (push)
         (call
           (push.cdr.iloc (0 . 0) "./boot/macro/syntmp.scm" . 240679)
           (push.iloc.0 . 1)
           (apply.iloc (1 . 0) "./boot/macro/syntmp.scm" . 240673))
         (ret.cons "./boot/macro/syntmp.scm" . 239643))
       (push.iloc.0 . 0)
       (subr.gloc.of vector? 1 "./boot/macro/syntmp.scm" . 241691)
       (if.true
         (call
           (push.iloc.0 . 0)
           (push.subr.gloc.of vector->list 1 "./boot/macro/syntmp.scm" . 242735)
           (push.iloc.0 . 1)
           (apply.iloc (1 . 0) "./boot/macro/syntmp.scm" . 242729))
         (push)
         (ret.subr.gloc.of list->vector "./boot/macro/syntmp.scm" . 242715))
       (ret.iloc 0 . 0))
     (push.iloc 3 . 0)
     (push.const . 0)
     (apply.iloc (0 . 0) "./boot/macro/syntmp.scm" . 227348))
   (push)
   (push.iloc 2 . 1)
   (push.iloc.1 . 0)
   (push.subr.gloc.of core-hashtable->alist 1 "./boot/macro/syntmp.scm" . 245795)
   (push.subr.gloc.of append 2 "./boot/macro/syntmp.scm" . 245781)
   (push.iloc 2 . 2)
   (push.iloc.1 . 1)
   (push.subr.gloc.of core-hashtable->alist 1 "./boot/macro/syntmp.scm" . 246818)
   (push.subr.gloc.of append 2 "./boot/macro/syntmp.scm" . 246805)
   (ret.subr.gloc.of
     values
     (values
       (letrec* ((|loop`1536*|
                   (lambda (|lst`1537*| |depth`1537*|)
                     (if (symbol? |lst`1537*|)
                         (|revealed`1511*| |lst`1537*| |depth`1537*|)
                         (if (ellipsis-quote? |lst`1537*|)
                             (cons (car |lst`1537*|)
                                   (|traverse-escaped`1511*| (cdr |lst`1537*|) |depth`1537*|))
                             (if (ellipsis-splicing-pair? |lst`1537*|)
                                 (|.call-with-values|
                                   (lambda () (parse-ellipsis-splicing |lst`1537*|))
                                   (lambda (|body`1539*| |tail`1539*| |len`1539*|)
                                     (append
                                       (|loop`1536*| |body`1539*| (+ |depth`1537*| 1))
                                       (cons (ellipsis-id)
                                             (|loop`1536*| |tail`1539*| |depth`1537*|)))))
                                 (if (ellipsis-pair? |lst`1537*|)
                                     (cons (|loop`1536*| (car |lst`1537*|) (+ |depth`1537*| 1))
                                           (cons (ellipsis-id)
                                                 (|loop`1536*| (cddr |lst`1537*|) |depth`1537*|)))
                                     (if (pair? |lst`1537*|)
                                         (cons (|loop`1536*| (car |lst`1537*|) |depth`1537*|)
                                               (|loop`1536*| (cdr |lst`1537*|) |depth`1537*|))
                                         (if (vector? |lst`1537*|)
                                             (list->vector
                                               (|loop`1536*|
                                                 (vector->list |lst`1537*|)
                                                 |depth`1537*|))
                                             |lst`1537*|)))))))))
         (|loop`1536*| |tmpl`1508*| 0))
       (append |ranks`1508*| (core-hashtable->alist |moved-ranks`1510*|))
       (append |vars`1508*| (core-hashtable->alist |moved-vars`1510*|)))))
 (set.gloc.of |rewrite-template-ranks-vars`1507*|)
 (close
   (3 0 . adapt-to-rank-moved-vars)
   (call
     (touch.gloc.of contain-rank-moved-var?)
     (push.iloc.0 . 0)
     (push.iloc.0 . 1)
     (push.iloc.0 . 2)
     (apply.gloc.of contain-rank-moved-var? "./boot/macro/syntmp.scm" . 248841))
   (if.true
     (touch.gloc.of |rewrite-template-ranks-vars`1507*|)
     (push.iloc.0 . 0)
     (push.iloc.0 . 1)
     (push.iloc.0 . 2)
     (apply.gloc.of |rewrite-template-ranks-vars`1507*| "./boot/macro/syntmp.scm" . 249865))
   (push.iloc.0 . 0)
   (push.iloc.0 . 1)
   (push.iloc.0 . 2)
   (ret.subr.gloc.of values "./boot/macro/syntmp.scm" . 250889))
 (set.gloc.of adapt-to-rank-moved-vars)
 (ret.const.unspec))
((close
   (1 0 . remove-duplicates)
   (call
     (extend.enclose+
       (1 0 . loop)
       (iloc.0 . 0)
       (if.null? (ret.iloc 2 . 0))
       (push.iloc.0 . 0)
       (push.subr.gloc.of caar 1 "./boot/macro/syntmp.scm" . 260124)
       (push.cdr.iloc (0 . 0) "./boot/macro/syntmp.scm" . 260135)
       (subr.gloc.of assq 2 "./boot/macro/syntmp.scm" . 260118)
       (if.true.ret.const . #f)
       (push.cdr.iloc (0 . 0) "./boot/macro/syntmp.scm" . 261153)
       (apply.iloc+ (1 . 0) "./boot/macro/syntmp.scm" . 261147))
     (push.iloc.1 . 0)
     (apply.iloc+ (0 . 0) "./boot/macro/syntmp.scm" . 259087))
   (if.true.ret)
   (touch.gloc.of |loop`1556*|)
   (push.iloc.0 . 0)
   (push.const)
   (apply.gloc.of |loop`1556*| "./boot/macro/syntmp.scm" . 263183))
 (set.gloc.of |remove-duplicates`1545*|)
 (close
   (2 0 . loop)
   (iloc.0 . 0)
   (if.null? (ret.iloc 0 . 1))
   (push.iloc.0 . 0)
   (push.subr.gloc.of caar 1 "./boot/macro/syntmp.scm" . 264220)
   (push.iloc.0 . 1)
   (subr.gloc.of assq 2 "./boot/macro/syntmp.scm" . 264214)
   (if.true
     (touch.gloc.of |loop`1556*|)
     (push.cdr.iloc (0 . 0) "./boot/macro/syntmp.scm" . 265244)
     (push.iloc.0 . 1)
     (apply.gloc.of |loop`1556*| "./boot/macro/syntmp.scm" . 265238))
   (touch.gloc.of |loop`1556*|)
   (push.cdr.iloc (0 . 0) "./boot/macro/syntmp.scm" . 267292)
   (push.car.iloc (0 . 0) "./boot/macro/syntmp.scm" . 267308)
   (iloc.0 . 1)
   (push.cons)
   (apply.gloc.of |loop`1556*| "./boot/macro/syntmp.scm" . 267286))
 (set.gloc.of |loop`1556*|)
 (close
   (5 0 . transcribe-template)
   (push.close
     (0 0)
     (touch.gloc.of adapt-to-rank-moved-vars)
     (push.iloc.1 . 0)
     (push.iloc.1 . 1)
     (call
       (touch.gloc.of |remove-duplicates`1545*|)
       (push.iloc.1 . 2)
       (apply.gloc.of |remove-duplicates`1545*| "./boot/macro/syntmp.scm" . 269392))
     (push)
     (apply.gloc.of adapt-to-rank-moved-vars "./boot/macro/syntmp.scm" . 269349))
   (push.close
     (3 0)
     (extend.unbound . 5)
     (push.close+
       (2 0 . expand-var)
       (push.iloc.0 . 0)
       (push.iloc.0 . 1)
       (push.subr.gloc.of assq 2 "./boot/macro/syntmp.scm" . 273426)
       (extend . 1)
       (iloc.0 . 0)
       (if.true
         (cdr.iloc (0 . 0) "./boot/macro/syntmp.scm" . 275493)
         (if.null?.ret.const)
         (iloc 4 . 4)
         (if.true
           (push.cadr.iloc (0 . 0) "./boot/macro/syntmp.scm" . 276521)
           (apply.iloc (4 . 4) "./boot/macro/syntmp.scm" . 276515))
         (push.iloc.0 . 0)
         (ret.subr.gloc.of cadr "./boot/macro/syntmp.scm" . 277539))
       (call
         (push.iloc.1 . 0)
         (push.iloc 4 . 1)
         (subr.gloc.of assq 2 "./boot/macro/syntmp.scm" . 278551)
         (if.false.ret)
         (push.iloc.1 . 0)
         (push.iloc 4 . 2)
         (push.subr.gloc.of assq 2 "./boot/macro/syntmp.scm" . 278577)
         (ret.subr.gloc.of not "./boot/macro/syntmp.scm" . 278572))
       (if.true
         (push.const . "syntax template")
         (push.const . "pattern variable ~u out of context")
         (push.iloc.1 . 0)
         (push.subr.gloc.of format 2 "./boot/macro/syntmp.scm" . 279606)
         (push.iloc 4 . 0)
         (apply.gloc.of syntax-violation "./boot/macro/syntmp.scm" . 279570))
       (push.const . "syntax template")
       (push.const . "subforms have different size of matched input")
       (push.const . template:)
       (push.iloc 4 . 0)
       (push.subr.gloc.of |.list| 2 "./boot/macro/syntmp.scm" . 281618)
       (push.const . subforms:)
       (iloc 4 . 2)
       (push.cons)
       (apply.gloc.of assertion-violation "./boot/macro/syntmp.scm" . 281618))
     (push.close+
       (2 0 . expand-ellipsis-var)
       (push.iloc.0 . 0)
       (push.iloc.0 . 1)
       (push.subr.gloc.of assq 2 "./boot/macro/syntmp.scm" . 286738)
       (extend . 1)
       (iloc.0 . 0)
       (if.true
         (cdr.iloc (0 . 0) "./boot/macro/syntmp.scm" . 288805)
         (if.null?.ret.const)
         (iloc 4 . 4)
         (if.true
           (push.iloc 4 . 4)
           (push.cadr.iloc (0 . 0) "./boot/macro/syntmp.scm" . 289837)
           (apply.gloc.of map "./boot/macro/syntmp.scm" . 289827))
         (push.iloc.0 . 0)
         (ret.subr.gloc.of cadr "./boot/macro/syntmp.scm" . 290851))
       (call
         (push.iloc.1 . 0)
         (push.iloc 4 . 1)
         (subr.gloc.of assq 2 "./boot/macro/syntmp.scm" . 291863)
         (if.false.ret)
         (push.iloc.1 . 0)
         (push.iloc 4 . 2)
         (push.subr.gloc.of assq 2 "./boot/macro/syntmp.scm" . 291889)
         (ret.subr.gloc.of not "./boot/macro/syntmp.scm" . 291884))
       (if.true
         (push.const . "syntax template")
         (push.const . "pattern variable ~u out of context")
         (push.iloc.1 . 0)
         (push.subr.gloc.of format 2 "./boot/macro/syntmp.scm" . 292918)
         (push.iloc 4 . 0)
         (apply.gloc.of syntax-violation "./boot/macro/syntmp.scm" . 292882))
       (push.const . "syntax template")
       (push.const . "subforms have different size of matched input")
       (push.const . template:)
       (push.iloc 4 . 0)
       (push.subr.gloc.of |.list| 2 "./boot/macro/syntmp.scm" . 294930)
       (push.const . subforms:)
       (iloc 4 . 2)
       (push.cons)
       (apply.gloc.of assertion-violation "./boot/macro/syntmp.scm" . 294930))
     (push.close
       (3 0 . expand-ellipsis-template)
       (extend.enclose+
         (2 0 . loop)
         (iloc.0 . 1)
         (if.pair?
           (call
             (push.iloc 2 . 0)
             (push.iloc 2 . 1)
             (push.iloc.0 . 1)
             (apply.iloc (3 . 4) "./boot/macro/syntmp.scm" . 302112))
           (push)
           (iloc.0 . 0)
           (push.cons)
           (call
             (touch.gloc.of consume-ellipsis-vars)
             (push.iloc 4 . 1)
             (push.iloc 2 . 1)
             (push.iloc.0 . 1)
             (apply.gloc.of consume-ellipsis-vars "./boot/macro/syntmp.scm" . 303130))
           (push)
           (apply.iloc+ (1 . 0) "./boot/macro/syntmp.scm" . 302100))
         (iloc.0 . 1)
         (if.null?.ret.const)
         (push.iloc.0 . 1)
         (const . #t)
         (if.eq? (push.iloc.0 . 0) (ret.subr.gloc.of reverse "./boot/macro/syntmp.scm" . 305189))
         (push.const . "syntax template")
         (push.const . "subforms have different size of matched input")
         (push.const . template:)
         (push.iloc 5 . 0)
         (push.subr.gloc.of |.list| 2 "./boot/macro/syntmp.scm" . 307220)
         (push.const . subforms:)
         (iloc 5 . 2)
         (push.cons)
         (apply.gloc.of assertion-violation "./boot/macro/syntmp.scm" . 307220))
       (push.const)
       (call
         (touch.gloc.of collect-ellipsis-vars)
         (push.iloc.1 . 0)
         (push.iloc 3 . 1)
         (push.iloc.1 . 1)
         (push.iloc.1 . 2)
         (apply.gloc.of collect-ellipsis-vars "./boot/macro/syntmp.scm" . 300074))
       (push)
       (apply.iloc+ (0 . 0) "./boot/macro/syntmp.scm" . 301069))
     (push.close+
       (3 0 . expand-escaped-template)
       (iloc.0 . 0)
       (if.symbol?
         (call
           (touch.gloc.of rank-of)
           (push.iloc.0 . 0)
           (push.iloc 2 . 1)
           (apply.gloc.of rank-of "./boot/macro/syntmp.scm" . 313369))
         (push)
         (push.const . 0)
         (subr.gloc.of < 2 "./boot/macro/syntmp.scm" . 313366)
         (if.true
           (push.iloc.0 . 0)
           (push.iloc 3 . 3)
           (push.subr.gloc.of assq 2 "./boot/macro/syntmp.scm" . 314397)
           (extend . 1)
           (iloc.0 . 0)
           (if.true (push.iloc.0 . 0) (ret.subr.gloc.of cdr (cdr |.L458`1584*|)))
           (ret.iloc 1 . 0))
         (push.iloc.0 . 0)
         (push.iloc.0 . 2)
         (apply.iloc+ (1 . 0) "./boot/macro/syntmp.scm" . 315414))
       (iloc.0 . 0)
       (if.pair?
         (call
           (iloc 3 . 4)
           (if.false.ret)
           (car.iloc (0 . 0) "./boot/macro/syntmp.scm" . 317479)
           (ret.null? "./boot/macro/syntmp.scm" . 317472))
         (if.true
           (push.const . |.&NIL|)
           (call
             (push.cdr.iloc (0 . 0) "./boot/macro/syntmp.scm" . 319541)
             (push.iloc.0 . 1)
             (push.iloc.0 . 2)
             (apply.iloc+ (1 . 3) "./boot/macro/syntmp.scm" . 319516))
           (ret.cons "./boot/macro/syntmp.scm" . 318486))
         (call
           (push.car.iloc (0 . 0) "./boot/macro/syntmp.scm" . 320565)
           (push.iloc.0 . 1)
           (push.iloc.0 . 2)
           (apply.iloc+ (1 . 3) "./boot/macro/syntmp.scm" . 320540))
         (push)
         (call
           (push.cdr.iloc (0 . 0) "./boot/macro/syntmp.scm" . 321589)
           (push.iloc.0 . 1)
           (push.iloc.0 . 2)
           (apply.iloc+ (1 . 3) "./boot/macro/syntmp.scm" . 321564))
         (ret.cons "./boot/macro/syntmp.scm" . 320534))
       (push.iloc.0 . 0)
       (subr.gloc.of vector? 1 "./boot/macro/syntmp.scm" . 322578)
       (if.true
         (call
           (push.iloc.0 . 0)
           (push.subr.gloc.of vector->list 1 "./boot/macro/syntmp.scm" . 323641)
           (push.iloc.0 . 1)
           (push.iloc.0 . 2)
           (apply.iloc+ (1 . 3) "./boot/macro/syntmp.scm" . 323616))
         (push)
         (ret.subr.gloc.of list->vector "./boot/macro/syntmp.scm" . 323602))
       (ret.iloc 0 . 0))
     (push.close
       (3 0 . expand-template)
       (iloc.0 . 0)
       (if.symbol?
         (call
           (touch.gloc.of rank-of)
           (push.iloc.0 . 0)
           (push.iloc 2 . 1)
           (apply.gloc.of rank-of "./boot/macro/syntmp.scm" . 329753))
         (push)
         (push.const . 0)
         (subr.gloc.of < 2 "./boot/macro/syntmp.scm" . 329750)
         (if.true
           (push.iloc.0 . 0)
           (push.iloc 3 . 3)
           (push.subr.gloc.of assq 2 "./boot/macro/syntmp.scm" . 330781)
           (extend . 1)
           (iloc.0 . 0)
           (if.true (push.iloc.0 . 0) (ret.subr.gloc.of cdr (cdr |.L459`1588*|)))
           (ret.iloc 1 . 0))
         (push.iloc.0 . 0)
         (push.iloc.0 . 2)
         (apply.iloc+ (1 . 0) "./boot/macro/syntmp.scm" . 331798))
       (call
         (touch.gloc.of ellipsis-quote?)
         (push.iloc.0 . 0)
         (apply.gloc.of ellipsis-quote? "./boot/macro/syntmp.scm" . 332818))
       (if.true
         (push.cadr.iloc (0 . 0) "./boot/macro/syntmp.scm" . 333867)
         (push.iloc.0 . 1)
         (push.iloc.0 . 2)
         (apply.iloc+ (1 . 3) "./boot/macro/syntmp.scm" . 333842))
       (call
         (touch.gloc.of ellipsis-splicing-pair?)
         (push.iloc.0 . 0)
         (apply.gloc.of ellipsis-splicing-pair? "./boot/macro/syntmp.scm" . 334866))
       (if.true
         (push.close
           (0 0)
           (touch.gloc.of parse-ellipsis-splicing)
           (push.iloc.1 . 0)
           (apply.gloc.of parse-ellipsis-splicing "./boot/macro/syntmp.scm" . 335920))
         (push.close
           (3 0)
           (call
             (push.gloc.of append)
             (call
               (push.iloc.0 . 0)
               (push.n+.iloc (1 . 1) 1 "./boot/macro/syntmp.scm" . 336969)
               (push.iloc.1 . 2)
               (apply.iloc (2 . 2) "./boot/macro/syntmp.scm" . 336938))
             (push)
             (apply.gloc.of apply "./boot/macro/syntmp.scm" . 336924))
           (push)
           (call
             (push.iloc.0 . 1)
             (push.iloc.1 . 1)
             (push.iloc.1 . 2)
             (apply.iloc (2 . 4) "./boot/macro/syntmp.scm" . 337948))
           (push)
           (ret.subr.gloc.of append "./boot/macro/syntmp.scm" . 336916))
         (apply.gloc.of |.call-with-values| "./boot/macro/syntmp.scm" . 334866))
       (call
         (touch.gloc.of ellipsis-pair?)
         (push.iloc.0 . 0)
         (apply.gloc.of ellipsis-pair? "./boot/macro/syntmp.scm" . 338962))
       (if.true
         (car.iloc (0 . 0) "./boot/macro/syntmp.scm" . 340002)
         (if.symbol?
           (call
             (touch.gloc.of rank-of)
             (push.car.iloc (0 . 0) "./boot/macro/syntmp.scm" . 341038)
             (push.iloc 2 . 1)
             (apply.gloc.of rank-of "./boot/macro/syntmp.scm" . 341029))
           (push)
           (push.n+.iloc (0 . 1) 1 "./boot/macro/syntmp.scm" . 342058)
           (subr.gloc.of = 2 "./boot/macro/syntmp.scm" . 342050)
           (if.true
             (call
               (push.car.iloc (0 . 0) "./boot/macro/syntmp.scm" . 343103)
               (push.iloc.0 . 2)
               (apply.iloc+ (1 . 1) "./boot/macro/syntmp.scm" . 343082))
             (push)
             (call
               (push.cddr.iloc (0 . 0) "./boot/macro/syntmp.scm" . 344123)
               (push.iloc.0 . 1)
               (push.iloc.0 . 2)
               (apply.iloc (1 . 4) "./boot/macro/syntmp.scm" . 344106))
             (push)
             (ret.subr.gloc.of append "./boot/macro/syntmp.scm" . 343074))
           (ret.const.unspec))
         (car.iloc (0 . 0) "./boot/macro/syntmp.scm" . 345120)
         (if.pair?
           (call
             (push.car.iloc (0 . 0) "./boot/macro/syntmp.scm" . 346171)
             (push.n+.iloc (0 . 1) 1 "./boot/macro/syntmp.scm" . 346182)
             (push.iloc.0 . 2)
             (apply.iloc (1 . 2) "./boot/macro/syntmp.scm" . 346145))
           (push)
           (call
             (push.cddr.iloc (0 . 0) "./boot/macro/syntmp.scm" . 347186)
             (push.iloc.0 . 1)
             (push.iloc.0 . 2)
             (apply.iloc (1 . 4) "./boot/macro/syntmp.scm" . 347169))
           (push)
           (ret.subr.gloc.of append "./boot/macro/syntmp.scm" . 346137))
         (ret.const.unspec))
       (iloc.0 . 0)
       (if.pair?
         (call
           (iloc 3 . 4)
           (if.false.ret)
           (car.iloc (0 . 0) "./boot/macro/syntmp.scm" . 349223)
           (ret.null? "./boot/macro/syntmp.scm" . 349216))
         (if.true
           (push.const . |.&NIL|)
           (call
             (push.cdr.iloc (0 . 0) "./boot/macro/syntmp.scm" . 351277)
             (push.iloc.0 . 1)
             (push.iloc.0 . 2)
             (apply.iloc (1 . 4) "./boot/macro/syntmp.scm" . 351260))
           (ret.cons "./boot/macro/syntmp.scm" . 350230))
         (call
           (push.car.iloc (0 . 0) "./boot/macro/syntmp.scm" . 352301)
           (push.iloc.0 . 1)
           (push.iloc.0 . 2)
           (apply.iloc (1 . 4) "./boot/macro/syntmp.scm" . 352284))
         (push)
         (call
           (push.cdr.iloc (0 . 0) "./boot/macro/syntmp.scm" . 353325)
           (push.iloc.0 . 1)
           (push.iloc.0 . 2)
           (apply.iloc (1 . 4) "./boot/macro/syntmp.scm" . 353308))
         (ret.cons "./boot/macro/syntmp.scm" . 352278))
       (push.iloc.0 . 0)
       (subr.gloc.of vector? 1 "./boot/macro/syntmp.scm" . 354322)
       (if.true
         (call
           (push.iloc.0 . 0)
           (push.subr.gloc.of vector->list 1 "./boot/macro/syntmp.scm" . 355377)
           (push.iloc.0 . 1)
           (push.iloc.0 . 2)
           (apply.iloc (1 . 4) "./boot/macro/syntmp.scm" . 355360))
         (push)
         (ret.subr.gloc.of list->vector "./boot/macro/syntmp.scm" . 355346))
       (ret.iloc 0 . 0))
     (enclose . 5)
     (call
       (call
         (touch.gloc.of safe-length)
         (push.iloc.1 . 0)
         (apply.gloc.of safe-length "./boot/macro/syntmp.scm" . 358419))
       (push)
       (push.const . 2)
       (subr.gloc.of = 2 "./boot/macro/syntmp.scm" . 358416)
       (if.false.ret)
       (touch.gloc.of ellipsis-id?)
       (push.car.iloc (1 . 0) "./boot/macro/syntmp.scm" . 358455)
       (apply.gloc.of ellipsis-id? "./boot/macro/syntmp.scm" . 358441))
     (if.true
       (push.cadr.iloc (1 . 0) "./boot/macro/syntmp.scm" . 359460)
       (push.const . 0)
       (push.iloc.1 . 2)
       (apply.iloc+ (0 . 3) "./boot/macro/syntmp.scm" . 359435))
     (push.iloc.1 . 0)
     (push.const . 0)
     (push.iloc.1 . 2)
     (apply.iloc (0 . 4) "./boot/macro/syntmp.scm" . 360459))
   (apply.gloc.of
     |.call-with-values|
     (|.call-with-values|
       (lambda ()
         (adapt-to-rank-moved-vars
           |in-form`1544*|
           |in-ranks`1544*|
           (|remove-duplicates`1545*| |in-vars`1544*|)))
       (lambda (|tmpl`1560*| |ranks`1560*| |vars`1560*|)
         (letrec* ((|expand-var`1561*|
                     (lambda (|tmpl`1562*| |vars`1562*|)
                       (let ((|.L456`1564*| (assq |tmpl`1562*| |vars`1562*|)))
                         (if |.L456`1564*|
                             (if (null? (cdr |.L456`1564*|))
                                 '()
                                 (if |emit`1544*|
                                     (|emit`1544*| (cadr |.L456`1564*|))
                                     (cadr |.L456`1564*|)))
                             (if (and (assq |tmpl`1562*| |in-ranks`1544*|)
                                      (not (assq |tmpl`1562*| |in-vars`1544*|)))
                                 (syntax-violation
                                   "syntax template"
                                   (format "pattern variable ~u out of context" |tmpl`1562*|)
                                   |in-form`1544*|)
                                 (assertion-violation
                                   "syntax template"
                                   "subforms have different size of matched input"
                                   (|.list| 'template: |in-form`1544*|)
                                   (|.cons| 'subforms: |in-vars`1544*|)))))))
                   (|expand-ellipsis-var`1561*|
                     (lambda (|tmpl`1568*| |vars`1568*|)
                       (let ((|.L457`1570*| (assq |tmpl`1568*| |vars`1568*|)))
                         (if |.L457`1570*|
                             (if (null? (cdr |.L457`1570*|))
                                 '()
                                 (if |emit`1544*|
                                     (map |emit`1544*| (cadr |.L457`1570*|))
                                     (cadr |.L457`1570*|)))
                             (if (and (assq |tmpl`1568*| |in-ranks`1544*|)
                                      (not (assq |tmpl`1568*| |in-vars`1544*|)))
                                 (syntax-violation
                                   "syntax template"
                                   (format "pattern variable ~u out of context" |tmpl`1568*|)
                                   |in-form`1544*|)
                                 (assertion-violation
                                   "syntax template"
                                   "subforms have different size of matched input"
                                   (|.list| 'template: |in-form`1544*|)
                                   (|.cons| 'subforms: |in-vars`1544*|)))))))
                   (|expand-ellipsis-template`1561*|
                     (lambda (|tmpl`1574*| |depth`1574*| |vars`1574*|)
                       (letrec* ((|loop`1578*|
                                   (lambda (|expr`1579*| |remains`1579*|)
                                     (if (pair? |remains`1579*|)
                                         (|loop`1578*|
                                           (cons (|expand-template`1561*|
                                                   |tmpl`1574*|
                                                   |depth`1574*|
                                                   |remains`1579*|)
                                                 |expr`1579*|)
                                           (consume-ellipsis-vars
                                             |ranks`1560*|
                                             |depth`1574*|
                                             |remains`1579*|))
                                         (if (null? |remains`1579*|)
                                             '()
                                             (if (eq? |remains`1579*| #t)
                                                 (reverse |expr`1579*|)
                                                 (assertion-violation
                                                   "syntax template"
                                                   "subforms have different size of matched input"
                                                   (|.list| 'template: |in-form`1544*|)
                                                   (|.cons| 'subforms: |in-vars`1544*|))))))))
                         (|loop`1578*|
                           '()
                           (collect-ellipsis-vars
                             |tmpl`1574*|
                             |ranks`1560*|
                             |depth`1574*|
                             |vars`1574*|)))))
                   (|expand-escaped-template`1561*|
                     (lambda (|tmpl`1582*| |depth`1582*| |vars`1582*|)
                       (if (symbol? |tmpl`1582*|)
                           (if (< (rank-of |tmpl`1582*| |ranks`1560*|) 0)
                               (let ((|.L458`1584*| (assq |tmpl`1582*| |aliases`1544*|)))
                                 (if |.L458`1584*| (cdr |.L458`1584*|) |tmpl`1582*|))
                               (|expand-var`1561*| |tmpl`1582*| |vars`1582*|))
                           (if (pair? |tmpl`1582*|)
                               (if (and |emit`1544*| (null? (car |tmpl`1582*|)))
                                   (cons '|.&NIL|
                                         (|expand-escaped-template`1561*|
                                           (cdr |tmpl`1582*|)
                                           |depth`1582*|
                                           |vars`1582*|))
                                   (cons (|expand-escaped-template`1561*|
                                           (car |tmpl`1582*|)
                                           |depth`1582*|
                                           |vars`1582*|)
                                         (|expand-escaped-template`1561*|
                                           (cdr |tmpl`1582*|)
                                           |depth`1582*|
                                           |vars`1582*|)))
                               (if (vector? |tmpl`1582*|)
                                   (list->vector
                                     (|expand-escaped-template`1561*|
                                       (vector->list |tmpl`1582*|)
                                       |depth`1582*|
                                       |vars`1582*|))
                                   |tmpl`1582*|)))))
                   (|expand-template`1561*|
                     (lambda (|tmpl`1586*| |depth`1586*| |vars`1586*|)
                       (if (symbol? |tmpl`1586*|)
                           (if (< (rank-of |tmpl`1586*| |ranks`1560*|) 0)
                               (let ((|.L459`1588*| (assq |tmpl`1586*| |aliases`1544*|)))
                                 (if |.L459`1588*| (cdr |.L459`1588*|) |tmpl`1586*|))
                               (|expand-var`1561*| |tmpl`1586*| |vars`1586*|))
                           (if (ellipsis-quote? |tmpl`1586*|)
                               (|expand-escaped-template`1561*|
                                 (cadr |tmpl`1586*|)
                                 |depth`1586*|
                                 |vars`1586*|)
                               (if (ellipsis-splicing-pair? |tmpl`1586*|)
                                   (|.call-with-values|
                                     (lambda () (parse-ellipsis-splicing |tmpl`1586*|))
                                     (lambda (|body`1590*| |tail`1590*| |len`1590*|)
                                       (append
                                         (apply
                                           append
                                           (|expand-ellipsis-template`1561*|
                                             |body`1590*|
                                             (+ |depth`1586*| 1)
                                             |vars`1586*|))
                                         (|expand-template`1561*|
                                           |tail`1590*|
                                           |depth`1586*|
                                           |vars`1586*|))))
                                   (if (ellipsis-pair? |tmpl`1586*|)
                                       (if (symbol? (car |tmpl`1586*|))
                                           (if (=
                                                 (rank-of (car |tmpl`1586*|) |ranks`1560*|)
                                                 (+ |depth`1586*| 1))
                                               (append
                                                 (|expand-ellipsis-var`1561*|
                                                   (car |tmpl`1586*|)
                                                   |vars`1586*|)
                                                 (|expand-template`1561*|
                                                   (cddr |tmpl`1586*|)
                                                   |depth`1586*|
                                                   |vars`1586*|))
                                               (|.unspecified|))
                                           (if (pair? (car |tmpl`1586*|))
                                               (append
                                                 (|expand-ellipsis-template`1561*|
                                                   (car |tmpl`1586*|)
                                                   (+ |depth`1586*| 1)
                                                   |vars`1586*|)
                                                 (|expand-template`1561*|
                                                   (cddr |tmpl`1586*|)
                                                   |depth`1586*|
                                                   |vars`1586*|))
                                               (|.unspecified|)))
                                       (if (pair? |tmpl`1586*|)
                                           (if (and |emit`1544*| (null? (car |tmpl`1586*|)))
                                               (cons '|.&NIL|
                                                     (|expand-template`1561*|
                                                       (cdr |tmpl`1586*|)
                                                       |depth`1586*|
                                                       |vars`1586*|))
                                               (cons (|expand-template`1561*|
                                                       (car |tmpl`1586*|)
                                                       |depth`1586*|
                                                       |vars`1586*|)
                                                     (|expand-template`1561*|
                                                       (cdr |tmpl`1586*|)
                                                       |depth`1586*|
                                                       |vars`1586*|)))
                                           (if (vector? |tmpl`1586*|)
                                               (list->vector
                                                 (|expand-template`1561*|
                                                   (vector->list |tmpl`1586*|)
                                                   |depth`1586*|
                                                   |vars`1586*|))
                                               |tmpl`1586*|)))))))))
           (if (and (= (safe-length |tmpl`1560*|) 2) (ellipsis-id? (car |tmpl`1560*|)))
               (|expand-escaped-template`1561*| (cadr |tmpl`1560*|) 0 |vars`1560*|)
               (|expand-template`1561*| |tmpl`1560*| 0 |vars`1560*|)))))))
 (set.gloc.of transcribe-template)
 (ret.const.unspec))

;
((close
   (1 0)
   (push.car.iloc (0 . 0) "./boot/macro/synrule.scm" . 30777)
   (push.cadr.iloc (0 . 0) "./boot/macro/synrule.scm" . 30786)
   (ret.subr.gloc.of |.list| "./boot/macro/synrule.scm" . 30762))
 (set.gloc.of |.L471|)
 (close
   (3 0 . compiled->source)
   (push.iloc.0 . 0)
   (const . ...)
   (if.eq?
     (push.const . syntax-rules)
     (push.iloc.0 . 1)
     (call
       (push.gloc.of |.L471|)
       (push.iloc.0 . 2)
       (apply.gloc.of map "./boot/macro/synrule.scm" . 30757))
     (push)
     (ret.subr.gloc.of |.cons*| "./boot/macro/synrule.scm" . 29705))
   (push.const . syntax-rules)
   (push.iloc.0 . 0)
   (push.iloc.0 . 1)
   (call
     (push.gloc.of |.L468|)
     (push.iloc.0 . 2)
     (apply.gloc.of map "./boot/macro/synrule.scm" . 31791))
   (push)
   (ret.subr.gloc.of |.cons*| "./boot/macro/synrule.scm" . 29705))
 (set.gloc.of |compiled->source`1595*|)
 (close
   (1 0)
   (push.car.iloc (0 . 0) "./boot/macro/synrule.scm" . 31811)
   (push.cadr.iloc (0 . 0) "./boot/macro/synrule.scm" . 31820)
   (ret.subr.gloc.of |.list| "./boot/macro/synrule.scm" . 31796))
 (set.gloc.of |.L468|)
 (close
   (2 0 . transcribe-compiled-templete)
   (push.car.iloc (0 . 0) "./boot/macro/synrule.scm" . 9241)
   (push.cadr.iloc (0 . 0) "./boot/macro/synrule.scm" . 10265)
   (call
     (touch.gloc.of current-transformer-environment)
     (apply.gloc.of current-transformer-environment "./boot/macro/synrule.scm" . 12308))
   (push)
   (call
     (touch.gloc.of current-rename-count)
     (apply.gloc.of current-rename-count "./boot/macro/synrule.scm" . 13335))
   (push)
   (extend . 4)
   (call
     (extend.enclose+
       (2 0 . loop)
       (iloc.0 . 0)
       (if.null? (ret.iloc 0 . 1))
       (push.cdr.iloc (0 . 0) "./boot/macro/synrule.scm" . 20512)
       (call
         (touch.gloc.of acons)
         (push.car.iloc (0 . 0) "./boot/macro/synrule.scm" . 19490)
         (call
           (touch.gloc.of rename-id)
           (push.car.iloc (0 . 0) "./boot/macro/synrule.scm" . 19490)
           (push.iloc 2 . 3)
           (apply.gloc.of rename-id "./boot/macro/synrule.scm" . 20532))
         (push)
         (push.iloc.0 . 1)
         (apply.gloc.of acons "./boot/macro/synrule.scm" . 20522))
       (push)
       (apply.iloc+ (1 . 0) "./boot/macro/synrule.scm" . 20506))
     (push.iloc 2 . 0)
     (push.subr.gloc.of caddr 1 "./boot/macro/synrule.scm" . 11289)
     (push.const)
     (apply.iloc+ (0 . 0) "./boot/macro/synrule.scm" . 17428))
   (push)
   (extend . 1)
   (call
     (touch.gloc.of transcribe-template)
     (push.iloc.1 . 0)
     (push.iloc.1 . 1)
     (push.iloc 2 . 1)
     (push.iloc.0 . 0)
     (push.const . #f)
     (apply.gloc.of transcribe-template "./boot/macro/synrule.scm" . 22549))
   (push)
   (call
     (push.close
       (1 0)
       (push.cdr.iloc (0 . 0) "./boot/macro/synrule.scm" . 24610)
       (call
         (touch.gloc.of env-lookup)
         (push.iloc 2 . 2)
         (push.car.iloc (0 . 0) "./boot/macro/synrule.scm" . 24636)
         (apply.gloc.of env-lookup "./boot/macro/synrule.scm" . 24620))
       (ret.cons "./boot/macro/synrule.scm" . 24604))
     (push.iloc.0 . 0)
     (apply.gloc.of map "./boot/macro/synrule.scm" . 23573))
   (push)
   (ret.subr.gloc.of values "./boot/macro/synrule.scm" . 22541))
 (set.gloc.of |transcribe-compiled-templete`1595*|)
 (close
   (2 0 . transcribe-syntax-rules)
   (call
     (iloc.0 . 0)
     (if.pair?.ret.const . #t)
     (push.iloc.0 . 0)
     (push.const . "misplaced syntactic keyword")
     (push.iloc.0 . 0)
     (apply.gloc.of syntax-violation "./boot/macro/synrule.scm" . 34825))
   (iloc.0 . 1)
   (if.not.pair?.ret.const . #f)
   (cdr.iloc (0 . 1) (cdr |spec`1594*|))
   (if.not.pair?.ret.const . #f)
   (cddr.iloc (0 . 1) (cddr |spec`1594*|))
   (if.not.pair?.ret.const . #f)
   (push.iloc.0 . 1)
   (push.subr.gloc.of cdddr 1 (cdddr |spec`1594*|))
   (subr.gloc.of list? 1 (list? (cdddr |spec`1594*|)))
   (if.false.ret)
   (push.iloc.0 . 1)
   (push.subr.gloc.of cdddr 1 (cdddr |spec`1594*|))
   (push.iloc.0 . 1)
   (push.subr.gloc.of caddr 1 (caddr |spec`1594*|))
   (push.cadr.iloc (0 . 1) (cadr |spec`1594*|))
   (push.car.iloc (0 . 1) (car |spec`1594*|))
   (extend . 4)
   (push.const . #f)
   (extend . 1)
   (push.close
     (0 0)
     (call (touch.gloc.of ellipsis-id) (apply.gloc.of ellipsis-id (ellipsis-id)))
     (set.iloc (1 . 0) (set! |tmp1`1625`1627*| (ellipsis-id)))
     (touch.gloc.of ellipsis-id)
     (push.iloc 2 . 3)
     (apply.gloc.of ellipsis-id (ellipsis-id |ellipsis`1622*|)))
   (push.close
     (0 0)
     (extend.enclose+
       (1 0 . loop)
       (iloc.0 . 0)
       (if.null?
         (iloc 4 . 1)
         (if.true
           (push.car.iloc (5 . 0) (car |form`1594*|))
           (push.const . "invalid syntax")
           (push.iloc 5 . 0)
           (call
             (touch.gloc.of put-annotation)
             (call
               (touch.gloc.of |compiled->source`1595*|)
               (push.iloc 4 . 3)
               (push.iloc 4 . 2)
               (push.iloc.0 . 0)
               (apply.gloc.of
                 |compiled->source`1595*|
                 (|compiled->source`1595*| |ellipsis`1622*| |lites`1622*| |rules`1636*|)))
             (push)
             (push.iloc 4 . 1)
             (apply.gloc.of
               put-annotation
               (put-annotation
                 (|compiled->source`1595*| |ellipsis`1622*| |lites`1622*| |rules`1636*|)
                 |remark`1622*|)))
           (push)
           (apply.gloc.of
             syntax-violation
             (syntax-violation
               (car |form`1594*|)
               "invalid syntax"
               |form`1594*|
               (put-annotation
                 (|compiled->source`1595*| |ellipsis`1622*| |lites`1622*| |rules`1636*|)
                 |remark`1622*|))))
         (push.car.iloc (5 . 0) (car |form`1594*|))
         (push.const . "invalid syntax")
         (push.iloc 5 . 0)
         (apply.gloc.of
           syntax-violation
           (syntax-violation (car |form`1594*|) "invalid syntax" |form`1594*|)))
       (push.car.iloc (0 . 0) (car |rules`1636*|))
       (extend . 1)
       (push.car.iloc (0 . 0) (car |rule`1638*|))
       (extend . 1)
       (call
         (call
           (call
             (iloc.0 . 0)
             (if.not.pair?.ret.const . #f)
             (push.car.iloc (0 . 0) (car |pattern`1640*|))
             (const . _)
             (ret.eq? (eq? (car |pattern`1640*|) '_)))
           (if.true
             (touch.gloc.of match-pattern?)
             (push.cdr.iloc (7 . 0) (cdr |form`1594*|))
             (push.cdr.iloc (0 . 0) (cdr |pattern`1640*|))
             (push.iloc 6 . 2)
             (apply.gloc.of
               match-pattern?
               (match-pattern? (cdr |form`1594*|) (cdr |pattern`1640*|) |lites`1622*|)))
           (touch.gloc.of match-pattern?)
           (push.iloc 7 . 0)
           (push.iloc.0 . 0)
           (push.iloc 6 . 2)
           (apply.gloc.of
             match-pattern?
             (match-pattern? |form`1594*| |pattern`1640*| |lites`1622*|)))
         (if.false.ret)
         (touch.gloc.of bind-pattern)
         (push.iloc 7 . 0)
         (push.iloc.0 . 0)
         (push.iloc 6 . 2)
         (push.const)
         (apply.gloc.of bind-pattern (bind-pattern |form`1594*| |pattern`1640*| |lites`1622*| '())))
       (push)
       (extend . 1)
       (iloc.0 . 0)
       (if.true
         (touch.gloc.of |transcribe-compiled-templete`1595*|)
         (push.cdr.iloc (2 . 0) (cdr |rule`1638*|))
         (push.iloc.0 . 0)
         (apply.gloc.of
           |transcribe-compiled-templete`1595*|
           (|transcribe-compiled-templete`1595*| (cdr |rule`1638*|) |vars`1642*|)))
       (push.cdr.iloc (3 . 0) (cdr |rules`1636*|))
       (apply.iloc+ (4 . 0) (|loop`1635*| (cdr |rules`1636*|))))
     (push.iloc 3 . 0)
     (apply.iloc+ (0 . 0) (|loop`1635*| |rules`1622*|)))
   (push.close
     (0 0)
     (touch.gloc.of ellipsis-id)
     (push.iloc.1 . 0)
     (apply.gloc.of ellipsis-id (ellipsis-id |tmp1`1625`1627*|)))
   (apply.gloc.of
     |.dynamic-wind|
     (|.dynamic-wind|
       (lambda () (set! |tmp1`1625`1627*| (ellipsis-id)) (ellipsis-id |ellipsis`1622*|))
       (lambda ()
         (letrec* ((|loop`1635*|
                     (lambda (|rules`1636*|)
                       (if (null? |rules`1636*|)
                           (if |remark`1622*|
                               (syntax-violation
                                 (car |form`1594*|)
                                 "invalid syntax"
                                 |form`1594*|
                                 (put-annotation
                                   (|compiled->source`1595*|
                                     |ellipsis`1622*|
                                     |lites`1622*|
                                     |rules`1636*|)
                                   |remark`1622*|))
                               (syntax-violation (car |form`1594*|) "invalid syntax" |form`1594*|))
                           (let ((|rule`1638*| (car |rules`1636*|)))
                             (let ((|pattern`1640*| (car |rule`1638*|)))
                               (let ((|vars`1642*|
                                       (and (if (and (pair? |pattern`1640*|)
                                                     (eq? (car |pattern`1640*|) '_))
                                                (match-pattern?
                                                  (cdr |form`1594*|)
                                                  (cdr |pattern`1640*|)
                                                  |lites`1622*|)
                                                (match-pattern?
                                                  |form`1594*|
                                                  |pattern`1640*|
                                                  |lites`1622*|))
                                            (bind-pattern
                                              |form`1594*|
                                              |pattern`1640*|
                                              |lites`1622*|
                                              '()))))
                                 (if |vars`1642*|
                                     (|transcribe-compiled-templete`1595*|
                                       (cdr |rule`1638*|)
                                       |vars`1642*|)
                                     (|loop`1635*| (cdr |rules`1636*|))))))))))
           (|loop`1635*| |rules`1622*|)))
       (lambda () (ellipsis-id |tmp1`1625`1627*|)))))
 (set.gloc.of transcribe-syntax-rules)
 (ret.const.unspec))
((close
   (3 0 . parse-syntax-rule)
   (push.car.iloc (0 . 1) "./boot/macro/synrule.scm" . 60436)
   (push.cadr.iloc (0 . 1) "./boot/macro/synrule.scm" . 60460)
   (extend . 2)
   (call
     (touch.gloc.of check-pattern)
     (push.iloc.0 . 0)
     (push.iloc.1 . 0)
     (apply.gloc.of check-pattern "./boot/macro/synrule.scm" . 61447))
   (call
     (touch.gloc.of collect-vars-ranks)
     (push.iloc.0 . 0)
     (push.iloc.1 . 0)
     (push.const . 0)
     (push.const)
     (apply.gloc.of collect-vars-ranks "./boot/macro/synrule.scm" . 62484))
   (push)
   (extend . 1)
   (call
     (touch.gloc.of check-template)
     (push.iloc.1 . 1)
     (push.iloc.0 . 0)
     (apply.gloc.of check-template "./boot/macro/synrule.scm" . 63497))
   (push.iloc.1 . 0)
   (push.iloc.1 . 1)
   (push.iloc.0 . 0)
   (call
     (touch.gloc.of collect-rename-ids)
     (push.iloc.1 . 1)
     (push.iloc.0 . 0)
     (apply.gloc.of collect-rename-ids "./boot/macro/synrule.scm" . 64552))
   (push)
   (ret.subr.gloc.of values "./boot/macro/synrule.scm" . 64521))
 (set.gloc.of parse-syntax-rule)
 (ret.const.unspec))
((close
   (1 0 . make-remark)
   (call
     (touch.gloc.of get-annotation)
     (push.iloc.0 . 0)
     (apply.gloc.of get-annotation "./boot/macro/synrule.scm" . 71696))
   (push)
   (extend . 1)
   (iloc.0 . 0)
   (if.false.ret)
   (subr.gloc.of current-source-comments 0)
   (push)
   (push.const . |.&SOURCE-PATH|)
   (push.const . #f)
   (push.subr.gloc.of core-hashtable-ref 3 "./boot/macro/synrule.scm" . 73755)
   (iloc.0 . 0)
   (ret.cons "./boot/macro/synrule.scm" . 73749))
 (set.gloc.of |make-remark`1655*|)
 (close
   (4 0)
   (push.iloc.0 . 0)
   (push.iloc.0 . 1)
   (push.iloc.0 . 2)
   (push.iloc.0 . 3)
   (ret.subr.gloc.of list "./boot/macro/synrule.scm" . 86035))
 (set.gloc.of |.L486|)
 (close
   (5 0 . compile-syntax-rules)
   (push.const . #f)
   (call
     (iloc.0 . 1)
     (if.true
       (touch.gloc.of unrename-syntax)
       (push.iloc.0 . 1)
       (push.iloc.0 . 4)
       (apply.gloc.of unrename-syntax "./boot/macro/synrule.scm" . 77870))
     (ret.const . ...))
   (push)
   (extend . 2)
   (push.close
     (0 0)
     (call
       (touch.gloc.of ellipsis-id)
       (apply.gloc.of ellipsis-id "./boot/macro/synrule.scm" . 78855))
     (set.iloc (1 . 0) "./boot/macro/synrule.scm" . 78855)
     (touch.gloc.of ellipsis-id)
     (push.iloc.1 . 1)
     (apply.gloc.of ellipsis-id "./boot/macro/synrule.scm" . 78855))
   (push.close
     (0 0)
     (call
       (touch.gloc.of unrename-syntax)
       (push.iloc 2 . 2)
       (push.iloc 2 . 4)
       (apply.gloc.of unrename-syntax "./boot/macro/synrule.scm" . 78868))
     (push)
     (call
       (touch.gloc.of unrename-syntax)
       (push.iloc 2 . 3)
       (push.iloc 2 . 4)
       (apply.gloc.of unrename-syntax "./boot/macro/synrule.scm" . 78906))
     (push)
     (extend . 2)
     (call
       (touch.gloc.of ellipsis-id)
       (apply.gloc.of ellipsis-id "./boot/macro/synrule.scm" . 80907))
     (push)
     (push.iloc.0 . 0)
     (call
       (touch.gloc.of |make-remark`1655*|)
       (push.iloc 3 . 0)
       (apply.gloc.of |make-remark`1655*| "./boot/macro/synrule.scm" . 82955))
     (push)
     (call
       (push.close
         (1 0)
         (push.close
           (0 0)
           (touch.gloc.of parse-syntax-rule)
           (push.iloc 2 . 0)
           (push.iloc.1 . 0)
           (push.iloc 5 . 4)
           (apply.gloc.of parse-syntax-rule "./boot/macro/synrule.scm" . 85056))
         (push.gloc.of |.L486|)
         (apply.gloc.of |.call-with-values| "./boot/macro/synrule.scm" . 85056))
       (push.iloc.0 . 1)
       (apply.gloc.of map "./boot/macro/synrule.scm" . 83984))
     (push)
     (ret.subr.gloc.of cons* "./boot/macro/synrule.scm" . 80907))
   (push.close
     (0 0)
     (touch.gloc.of ellipsis-id)
     (push.iloc.1 . 0)
     (apply.gloc.of ellipsis-id "./boot/macro/synrule.scm" . 78855))
   (apply.gloc.of |.dynamic-wind| "./boot/macro/synrule.scm" . 78855))
 (set.gloc.of compile-syntax-rules)
 (ret.const.unspec))

;
((push.const . |.vars|)
 (push.const . #f)
 (ret.subr.gloc.of set-top-level-value! "./boot/macro/syncase.scm" . 13313))
((close
   (3 0 . make-syntax-object)
   (push.const . type:syntax)
   (push.iloc.0 . 0)
   (push.iloc.0 . 1)
   (push.iloc.0 . 2)
   (ret.subr.gloc.of tuple "./boot/macro/syncase.scm" . 15422))
 (set.gloc.of make-syntax-object)
 (ret.const.unspec))
((close
   (1 0 . syntax-object-expr)
   (push.iloc.0 . 0)
   (push.const . 1)
   (ret.subr.gloc.of tuple-ref "./boot/macro/syncase.scm" . 16429))
 (set.gloc.of syntax-object-expr)
 (ret.const.unspec))
((close
   (1 0 . syntax-object-renames)
   (push.iloc.0 . 0)
   (push.const . 2)
   (ret.subr.gloc.of tuple-ref "./boot/macro/syncase.scm" . 17453))
 (set.gloc.of syntax-object-renames)
 (ret.const.unspec))
((close
   (1 0 . syntax-object-lexname)
   (push.iloc.0 . 0)
   (push.const . 3)
   (ret.subr.gloc.of tuple-ref "./boot/macro/syncase.scm" . 18477))
 (set.gloc.of syntax-object-lexname)
 (ret.const.unspec))
((close
   (1 0 . wrapped-syntax-object?)
   (push.iloc.0 . 0)
   (push.const . 0)
   (push.subr.gloc.of tuple-ref 2 "./boot/macro/syncase.scm" . 22538)
   (const . type:syntax)
   (ret.eq? "./boot/macro/syncase.scm" . 22533))
 (set.gloc.of wrapped-syntax-object?)
 (ret.const.unspec))
((close
   (1 0 . ensure-output-is-syntax-object)
   (extend.enclose
     (1 0 . loop)
     (iloc.0 . 0)
     (if.pair?
       (call
         (push.car.iloc (0 . 0) "./boot/macro/syncase.scm" . 28692)
         (apply.iloc (1 . 0) "./boot/macro/syncase.scm" . 28686))
       (push.cdr.iloc (0 . 0) "./boot/macro/syncase.scm" . 29716)
       (apply.iloc (1 . 0) "./boot/macro/syncase.scm" . 29710))
     (push.iloc.0 . 0)
     (subr.gloc.of vector? 1 "./boot/macro/syncase.scm" . 30734)
     (if.true
       (push.iloc.1 . 0)
       (push.iloc.0 . 0)
       (push.subr.gloc.of vector->list 1 "./boot/macro/syncase.scm" . 31768)
       (apply.gloc.of map "./boot/macro/syncase.scm" . 31758))
     (iloc.0 . 0)
     (if.symbol?
       (push.iloc.0 . 0)
       (subr.gloc.of uninterned-symbol? 1 "./boot/macro/syncase.scm" . 33810)
       (if.true.ret)
       (push.const . "transformation procedure")
       (push.const . "output contains raw symbol ~s")
       (push.iloc.0 . 0)
       (push.subr.gloc.of format 2 "./boot/macro/syncase.scm" . 34882)
       (push.iloc 2 . 0)
       (apply.gloc.of assertion-violation "./boot/macro/syncase.scm" . 34834))
     (ret.const.unspec))
   (push.iloc.1 . 0)
   (apply.iloc (0 . 0) "./boot/macro/syncase.scm" . 27655))
 (set.gloc.of ensure-output-is-syntax-object)
 (ret.const.unspec))
((close
   (1 0 . ensure-input-is-syntax-object)
   (extend.enclose
     (1 0 . loop)
     (iloc.0 . 0)
     (if.pair?
       (call
         (push.car.iloc (0 . 0) "./boot/macro/syncase.scm" . 40980)
         (apply.iloc (1 . 0) "./boot/macro/syncase.scm" . 40974))
       (push.cdr.iloc (0 . 0) "./boot/macro/syncase.scm" . 42004)
       (apply.iloc (1 . 0) "./boot/macro/syncase.scm" . 41998))
     (push.iloc.0 . 0)
     (subr.gloc.of vector? 1 "./boot/macro/syncase.scm" . 43022)
     (if.true
       (push.iloc.1 . 0)
       (push.iloc.0 . 0)
       (push.subr.gloc.of vector->list 1 "./boot/macro/syncase.scm" . 44056)
       (apply.gloc.of map "./boot/macro/syncase.scm" . 44046))
     (iloc.0 . 0)
     (if.symbol?
       (push.iloc.0 . 0)
       (subr.gloc.of uninterned-symbol? 1 "./boot/macro/syncase.scm" . 46098)
       (if.true.ret)
       (push.const . "transformation procedure")
       (push.const . "input contains raw symbol ~s")
       (push.iloc.0 . 0)
       (push.subr.gloc.of format 2 "./boot/macro/syncase.scm" . 47170)
       (push.iloc 2 . 0)
       (apply.gloc.of assertion-violation "./boot/macro/syncase.scm" . 47122))
     (ret.const.unspec))
   (push.iloc.1 . 0)
   (apply.iloc (0 . 0) "./boot/macro/syncase.scm" . 39943))
 (set.gloc.of ensure-input-is-syntax-object)
 (ret.const.unspec))
((close
   (1 0)
   (call
     (touch.gloc.of ensure-output-is-syntax-object)
     (push.iloc.0 . 0)
     (apply.gloc.of ensure-output-is-syntax-object "./boot/macro/syncase.scm" . 51205))
   (subr.gloc.of make-core-hashtable 0)
   (push)
   (extend . 1)
   (call
     (extend.enclose
       (1 0 . loop)
       (iloc.0 . 0)
       (if.pair?
         (call
           (push.car.iloc (0 . 0) "./boot/macro/syncase.scm" . 56358)
           (apply.iloc (1 . 0) "./boot/macro/syncase.scm" . 56352))
         (push)
         (call
           (push.cdr.iloc (0 . 0) "./boot/macro/syncase.scm" . 56379)
           (apply.iloc (1 . 0) "./boot/macro/syncase.scm" . 56373))
         (push)
         (extend . 2)
         (call
           (push.iloc.0 . 0)
           (car.iloc (1 . 0) "./boot/macro/syncase.scm" . 57388)
           (if.not.eq?.ret.const . #f)
           (push.iloc.0 . 1)
           (cdr.iloc (1 . 0) "./boot/macro/syncase.scm" . 57406)
           (ret.eq? "./boot/macro/syncase.scm" . 57399))
         (if.true (ret.iloc 1 . 0))
         (push.iloc.0 . 0)
         (iloc.0 . 1)
         (ret.cons "./boot/macro/syncase.scm" . 58405))
       (push.iloc.0 . 0)
       (subr.gloc.of vector? 1 "./boot/macro/syncase.scm" . 59415)
       (if.true
         (call
           (push.iloc.1 . 0)
           (push.iloc.0 . 0)
           (push.subr.gloc.of vector->list 1 "./boot/macro/syncase.scm" . 60463)
           (apply.gloc.of map "./boot/macro/syncase.scm" . 60453))
         (push)
         (ret.subr.gloc.of list->vector "./boot/macro/syncase.scm" . 60439))
       (call (push.iloc.0 . 0) (apply.gloc.of identifier? "./boot/macro/syncase.scm" . 61463))
       (if.true
         (call
           (call
             (touch.gloc.of syntax-object-renames)
             (push.iloc.0 . 0)
             (apply.gloc.of syntax-object-renames "./boot/macro/syncase.scm" . 62501))
           (push)
           (extend . 1)
           (iloc.0 . 0)
           (if.null?.ret.const . #t)
           (push.iloc 3 . 0)
           (push.car.iloc (0 . 0) "./boot/macro/syncase.scm" . 64574)
           (subr.gloc.of core-hashtable-contains? 2 "./boot/macro/syncase.scm" . 64545)
           (if.true.ret)
           (push.iloc 3 . 0)
           (push.car.iloc (0 . 0) "./boot/macro/syncase.scm" . 65593)
           (push.cdr.iloc (0 . 0) "./boot/macro/syncase.scm" . 65606)
           (ret.subr.gloc.of core-hashtable-set! "./boot/macro/syncase.scm" . 65569))
         (touch.gloc.of syntax-object-expr)
         (push.iloc.0 . 0)
         (apply.gloc.of syntax-object-expr "./boot/macro/syncase.scm" . 66583))
       (call
         (touch.gloc.of wrapped-syntax-object?)
         (push.iloc.0 . 0)
         (apply.gloc.of wrapped-syntax-object? "./boot/macro/syncase.scm" . 67607))
       (if.true
         (call
           (push.close
             (1 0)
             (push.iloc 3 . 0)
             (push.car.iloc (0 . 0) "./boot/macro/syncase.scm" . 69700)
             (subr.gloc.of core-hashtable-contains? 2 "./boot/macro/syncase.scm" . 69671)
             (if.true.ret)
             (push.iloc 3 . 0)
             (push.car.iloc (0 . 0) "./boot/macro/syncase.scm" . 70719)
             (push.cdr.iloc (0 . 0) "./boot/macro/syncase.scm" . 70727)
             (ret.subr.gloc.of core-hashtable-set! "./boot/macro/syncase.scm" . 70695))
           (call
             (touch.gloc.of syntax-object-renames)
             (push.iloc.0 . 0)
             (apply.gloc.of syntax-object-renames "./boot/macro/syncase.scm" . 71713))
           (push)
           (apply.gloc.of for-each "./boot/macro/syncase.scm" . 68631))
         (call
           (touch.gloc.of syntax-object-expr)
           (push.iloc.0 . 0)
           (apply.gloc.of syntax-object-expr "./boot/macro/syncase.scm" . 72733))
         (push)
         (apply.iloc (1 . 0) "./boot/macro/syncase.scm" . 72727))
       (ret.iloc 0 . 0))
     (push.iloc 2 . 0)
     (apply.iloc (0 . 0) "./boot/macro/syncase.scm" . 55312))
   (push)
   (push.iloc.0 . 0)
   (push.subr.gloc.of core-hashtable->alist 1 "./boot/macro/syncase.scm" . 74774)
   (ret.subr.gloc.of
     values
     (values
       (letrec* ((|loop`1711*|
                   (lambda (|lst`1712*|)
                     (if (pair? |lst`1712*|)
                         (let ((|a`1714*| (|loop`1711*| (car |lst`1712*|)))
                               (|d`1714*| (|loop`1711*| (cdr |lst`1712*|))))
                           (if (and (eq? |a`1714*| (car |lst`1712*|))
                                    (eq? |d`1714*| (cdr |lst`1712*|)))
                               |lst`1712*|
                               (cons |a`1714*| |d`1714*|)))
                         (if (vector? |lst`1712*|)
                             (list->vector (map |loop`1711*| (vector->list |lst`1712*|)))
                             (if (identifier? |lst`1712*|)
                                 (begin
                                   (let ((|rename`1716*| (syntax-object-renames |lst`1712*|)))
                                     (or (null? |rename`1716*|)
                                         (core-hashtable-contains? |ht`1707*| (car |rename`1716*|))
                                         (core-hashtable-set!
                                           |ht`1707*|
                                           (car |rename`1716*|)
                                           (cdr |rename`1716*|))))
                                   (syntax-object-expr |lst`1712*|))
                                 (if (wrapped-syntax-object? |lst`1712*|)
                                     (begin
                                       (for-each (lambda (|a`1718*|)
                                                   (or (core-hashtable-contains?
                                                         |ht`1707*|
                                                         (car |a`1718*|))
                                                       (core-hashtable-set!
                                                         |ht`1707*|
                                                         (car |a`1718*|)
                                                         (cdr |a`1718*|))))
                                                 (syntax-object-renames |lst`1712*|))
                                       (|loop`1711*| (syntax-object-expr |lst`1712*|)))
                                     |lst`1712*|)))))))
         (|loop`1711*| |expr`1705*|))
       (core-hashtable->alist |ht`1707*|))))
 (set.gloc.of |.L505|)
 (push.const . |.flatten-syntax|)
 (push.gloc.of |.L505|)
 (ret.subr.gloc.of set-top-level-value! "./boot/macro/syncase.scm" . 50179))
((close
   (3 1)
   (extend.enclose+
     (2 0 . match)
     (call
       (touch.gloc.of match-pattern?)
       (push.iloc.0 . 0)
       (push.iloc.0 . 1)
       (push.iloc 2 . 2)
       (apply.gloc.of match-pattern? "./boot/macro/syncase.scm" . 81934))
     (if.false.ret)
     (touch.gloc.of bind-pattern)
     (push.iloc.0 . 0)
     (push.iloc.0 . 1)
     (push.iloc 2 . 2)
     (push.const)
     (apply.gloc.of bind-pattern "./boot/macro/syncase.scm" . 82958))
   (call
     (iloc.1 . 0)
     (if.false.ret)
     (touch.gloc.of ensure-input-is-syntax-object)
     (push.iloc.1 . 1)
     (apply.gloc.of ensure-input-is-syntax-object "./boot/macro/syncase.scm" . 85010))
   (call
     (touch.gloc.of unwrap-syntax)
     (push.iloc.1 . 1)
     (apply.gloc.of unwrap-syntax "./boot/macro/syncase.scm" . 86033))
   (push)
   (call (iloc.1 . 0) (if.true.ret) (ret.const))
   (push)
   (extend . 2)
   (extend.enclose+
     (1 0 . loop)
     (iloc.0 . 0)
     (if.null?
       (call
         (iloc 2 . 0)
         (if.not.pair?.ret.const . #f)
         (push.iloc 2 . 0)
         (ret.subr.gloc.of car "./boot/macro/syncase.scm" . 89137))
       (push)
       (push.const . "invalid syntax")
       (push.iloc 2 . 0)
       (apply.gloc.of syntax-violation "./boot/macro/syncase.scm" . 89101))
     (push.car.iloc (0 . 0) "./boot/macro/syncase.scm" . 90139)
     (push.subr.gloc.of cadr 1 "./boot/macro/syncase.scm" . 92189)
     (push.car.iloc (0 . 0) "./boot/macro/syncase.scm" . 90139)
     (push.subr.gloc.of caddr 1 "./boot/macro/syncase.scm" . 93211)
     (extend . 2)
     (call
       (push.iloc 3 . 0)
       (push.car.iloc (1 . 0) "./boot/macro/syncase.scm" . 90139)
       (push.subr.gloc.of car 1 "./boot/macro/syncase.scm" . 91162)
       (apply.iloc+ (4 . 0) "./boot/macro/syncase.scm" . 94237))
     (push)
     (extend . 1)
     (call
       (iloc.0 . 0)
       (if.false.ret)
       (iloc.1 . 0)
       (if.false.ret.const . #t)
       (push.iloc.0 . 0)
       (push.iloc 4 . 1)
       (push.subr.gloc.of append 2 "./boot/macro/syncase.scm" . 97320)
       (apply.iloc (1 . 0) "./boot/macro/syncase.scm" . 97312))
     (if.true
       (push.iloc.0 . 0)
       (push.iloc 4 . 1)
       (push.subr.gloc.of append 2 "./boot/macro/syncase.scm" . 98333)
       (apply.iloc (1 . 1) "./boot/macro/syncase.scm" . 98327))
     (push.cdr.iloc (2 . 0) "./boot/macro/syncase.scm" . 99357)
     (apply.iloc+ (3 . 0) "./boot/macro/syncase.scm" . 99351))
   (push.iloc 3 . 3)
   (apply.iloc+ (0 . 0) "./boot/macro/syncase.scm" . 88073))
 (set.gloc.of |.L507|)
 (push.const . |.syntax-dispatch|)
 (push.gloc.of |.L507|)
 (ret.subr.gloc.of set-top-level-value! "./boot/macro/syncase.scm" . 76801))
((close
   (1 1)
   (iloc.0 . 1)
   (if.null?
     (push.iloc.0 . 0)
     (apply.gloc.of |.flatten-syntax| "./boot/macro/syncase.scm" . 108572))
   (push.iloc.0 . 0)
   (push.car.iloc (0 . 1) "./boot/macro/syncase.scm" . 109608)
   (ret.subr.gloc.of values "./boot/macro/syncase.scm" . 109596))
 (set.gloc.of |.L509|)
 (close
   (1 0)
   (push.close
     (1 0 . thunk)
     (push.close (0 0) (push.iloc.1 . 0) (apply.iloc (2 . 0) "./boot/macro/syncase.scm" . 105505))
     (push.gloc.of |.L509|)
     (apply.gloc.of call-with-values "./boot/macro/syncase.scm" . 104468))
   (extend . 1)
   (push.iloc.1 . 0)
   (subr.gloc.of procedure? 1 "./boot/macro/syncase.scm" . 110606)
   (if.true
     (push.close
       (0 0)
       (touch.gloc.of closure-arity)
       (push.iloc 2 . 0)
       (apply.gloc.of closure-arity "./boot/macro/syncase.scm" . 111656))
     (push.close
       (2 0)
       (iloc.0 . 0)
       (if.false.ret)
       (iloc.0 . 1)
       (if.false.ret)
       (=n.iloc (0 . 0) 1 "./boot/macro/syncase.scm" . 112671)
       (if.false.ret)
       (=n.iloc (0 . 1) 0 "./boot/macro/syncase.scm" . 112683)
       (if.false.ret)
       (ret.iloc 1 . 0))
     (apply.gloc.of
       |.call-with-values|
       (|.call-with-values|
         (lambda () (closure-arity |code`1741*|))
         (lambda (|nargs`1751*| |opt`1751*|)
           (and |nargs`1751*| |opt`1751*| (= |nargs`1751*| 1) (= |opt`1751*| 0) |thunk`1749*|)))))
   (call
     (touch.gloc.of variable-transformer-token?)
     (push.iloc.1 . 0)
     (apply.gloc.of variable-transformer-token? "./boot/macro/syncase.scm" . 113678))
   (if.true
     (push.iloc.1 . 0)
     (push.const . 1)
     (subr.gloc.of tuple-ref 2 "./boot/macro/syncase.scm" . 114713)
     (set.iloc (1 . 0) "./boot/macro/syncase.scm" . 114702)
     (touch.gloc.of make-variable-transformer-token)
     (push.iloc.0 . 0)
     (apply.gloc.of make-variable-transformer-token "./boot/macro/syncase.scm" . 115726))
   (ret.iloc 1 . 0))
 (set.gloc.of |.L510|)
 (push.const . |.transformer-thunk|)
 (push.gloc.of |.L510|)
 (ret.subr.gloc.of set-top-level-value! "./boot/macro/syncase.scm" . 106518))
((close
   (2 0 . rewrite)
   (extend.enclose
     (1 0 . loop)
     (iloc.0 . 0)
     (if.pair?
       (call
         (push.car.iloc (0 . 0) "./boot/macro/syncase.scm" . 124970)
         (apply.iloc (1 . 0) "./boot/macro/syncase.scm" . 124964))
       (push)
       (call
         (push.cdr.iloc (0 . 0) "./boot/macro/syncase.scm" . 124987)
         (apply.iloc (1 . 0) "./boot/macro/syncase.scm" . 124981))
       (ret.cons "./boot/macro/syncase.scm" . 124958))
     (call
       (iloc.0 . 0)
       (if.not.symbol?.ret.const . #f)
       (push.iloc.0 . 0)
       (push.iloc 2 . 1)
       (ret.subr.gloc.of assq "./boot/macro/syncase.scm" . 125989))
     (push)
     (extend . 1)
     (iloc.0 . 0)
     (if.true (push.iloc.0 . 0) (ret.subr.gloc.of cdr "./boot/macro/syncase.scm" . 126994))
     (push.iloc.1 . 0)
     (subr.gloc.of vector? 1 "./boot/macro/syncase.scm" . 126994)
     (if.true
       (call
         (push.iloc 2 . 0)
         (push.iloc.1 . 0)
         (push.subr.gloc.of vector->list 1 "./boot/macro/syncase.scm" . 127032)
         (apply.gloc.of map "./boot/macro/syncase.scm" . 127022))
       (push)
       (ret.subr.gloc.of list->vector "./boot/macro/syncase.scm" . 127008))
     (ret.iloc 1 . 0))
   (push.iloc.1 . 0)
   (apply.iloc (0 . 0) "./boot/macro/syncase.scm" . 124939))
 (set.gloc.of |rewrite`1754*|)
 (close
   (1 0)
   (push.car.iloc (0 . 0) "./boot/macro/syncase.scm" . 122887)
   (call
     (touch.gloc.of make-pattern-variable)
     (push.cdr.iloc (0 . 0) "./boot/macro/syncase.scm" . 122887)
     (apply.gloc.of make-pattern-variable "./boot/macro/syncase.scm" . 122887))
   (ret.cons "./boot/macro/syncase.scm" . 122887))
 (set.gloc.of |.L517|)
 (close
   (2 0 . expand-syntax-case)
   (call
     (iloc.0 . 0)
     (if.not.pair?.ret.const . #f)
     (cdr.iloc (0 . 0) "./boot/macro/syncase.scm" . 122887)
     (if.not.pair?.ret.const . #f)
     (cddr.iloc (0 . 0) "./boot/macro/syncase.scm" . 122887)
     (if.not.pair?.ret.const . #f)
     (push.iloc.0 . 0)
     (push.subr.gloc.of cdddr 1 "./boot/macro/syncase.scm" . 122887)
     (ret.subr.gloc.of list? "./boot/macro/syncase.scm" . 122887))
   (if.true
     (push.iloc.0 . 0)
     (push.subr.gloc.of cdddr 1 "./boot/macro/syncase.scm" . 122887)
     (push.cadr.iloc (0 . 0) "./boot/macro/syncase.scm" . 122887)
     (extend . 2)
     (call
       (touch.gloc.of unrename-syntax)
       (push.iloc.1 . 0)
       (push.subr.gloc.of caddr 1 "./boot/macro/syncase.scm" . 122887)
       (push.iloc.1 . 1)
       (apply.gloc.of unrename-syntax "./boot/macro/syncase.scm" . 122887))
     (push)
     (extend . 1)
     (call
       (call
         (push.iloc.0 . 0)
         (subr.gloc.of list? 1 "./boot/macro/syncase.scm" . 122887)
         (if.false.ret)
         (touch.gloc.of every1)
         (push.gloc.of symbol?)
         (push.iloc.0 . 0)
         (apply.gloc.of every1 "./boot/macro/syncase.scm" . 122887))
       (if.true.ret)
       (push.const . syntax-case)
       (push.const . "invalid literals")
       (push.iloc 2 . 0)
       (push.iloc.0 . 0)
       (apply.gloc.of syntax-violation "./boot/macro/syncase.scm" . 122887))
     (call
       (call
         (touch.gloc.of unique-id-list?)
         (push.iloc.0 . 0)
         (apply.gloc.of unique-id-list? "./boot/macro/syncase.scm" . 122887))
       (if.true.ret)
       (push.const . syntax-case)
       (push.const . "duplicate literals")
       (push.iloc 2 . 0)
       (push.iloc.0 . 0)
       (apply.gloc.of syntax-violation "./boot/macro/syncase.scm" . 122887))
     (call
       (push.const . _)
       (push.iloc.0 . 0)
       (subr.gloc.of memq 2 "./boot/macro/syncase.scm" . 122887)
       (if.false.ret)
       (push.const . syntax-case)
       (push.const . "_ in literals")
       (push.iloc 2 . 0)
       (push.iloc.0 . 0)
       (apply.gloc.of syntax-violation "./boot/macro/syncase.scm" . 122887))
     (call
       (push.const . ...)
       (push.iloc.0 . 0)
       (subr.gloc.of memq 2 "./boot/macro/syncase.scm" . 122887)
       (if.false.ret)
       (push.const . syntax-case)
       (push.const . "... in literals")
       (push.iloc 2 . 0)
       (push.iloc.0 . 0)
       (apply.gloc.of syntax-violation "./boot/macro/syncase.scm" . 122887))
     (call
       (push.close
         (1 0)
         (push.iloc.0 . 0)
         (call
           (touch.gloc.of lookup-lexical-name)
           (push.iloc.0 . 0)
           (push.iloc 3 . 1)
           (apply.gloc.of lookup-lexical-name "./boot/macro/syncase.scm" . 122887))
         (ret.cons "./boot/macro/syncase.scm" . 122887))
       (push.iloc.0 . 0)
       (apply.gloc.of map "./boot/macro/syncase.scm" . 122887))
     (push)
     (extend . 1)
     (call
       (touch.gloc.of |rewrite`1754*|)
       (push.iloc.1 . 0)
       (push.iloc.0 . 0)
       (apply.gloc.of |rewrite`1754*| "./boot/macro/syncase.scm" . 122887))
     (push)
     (extend . 1)
     (extend.enclose
       (1 0 . parse-pattern)
       (call
         (touch.gloc.of |rewrite`1754*|)
         (call
           (touch.gloc.of unrename-syntax)
           (push.iloc.0 . 0)
           (push.iloc 6 . 1)
           (apply.gloc.of unrename-syntax "./boot/macro/syncase.scm" . 122887))
         (push)
         (push.iloc 3 . 0)
         (apply.gloc.of |rewrite`1754*| "./boot/macro/syncase.scm" . 122887))
       (push)
       (extend . 1)
       (call
         (touch.gloc.of annotate)
         (push.iloc.0 . 0)
         (push.iloc.1 . 0)
         (apply.gloc.of annotate "./boot/macro/syncase.scm" . 122887))
       (call
         (touch.gloc.of check-pattern)
         (push.iloc.0 . 0)
         (push.iloc 3 . 0)
         (apply.gloc.of check-pattern "./boot/macro/syncase.scm" . 122887))
       (push.iloc.0 . 0)
       (call
         (touch.gloc.of extend-env)
         (call
           (push.gloc.of |.L517|)
           (call
             (touch.gloc.of collect-vars-ranks)
             (push.iloc.0 . 0)
             (push.iloc 3 . 0)
             (push.const . 0)
             (push.const)
             (apply.gloc.of collect-vars-ranks "./boot/macro/syncase.scm" . 122887))
           (push)
           (apply.gloc.of map "./boot/macro/syncase.scm" . 122887))
         (push)
         (push.iloc 7 . 1)
         (apply.gloc.of extend-env "./boot/macro/syncase.scm" . 122887))
       (push)
       (ret.subr.gloc.of values "./boot/macro/syncase.scm" . 122887))
     (touch.gloc.of annotate)
     (push.const . |.syntax-dispatch|)
     (call
       (touch.gloc.of expand-form)
       (push.const . |.vars|)
       (push.iloc 5 . 1)
       (apply.gloc.of expand-form "./boot/macro/syncase.scm" . 122887))
     (push)
     (call
       (touch.gloc.of expand-form)
       (push.iloc 4 . 1)
       (push.iloc 5 . 1)
       (apply.gloc.of expand-form "./boot/macro/syncase.scm" . 122887))
     (push)
     (push.const . quote)
     (push.iloc.1 . 0)
     (push.subr.gloc.of |.list| 2 "./boot/macro/syncase.scm" . 122887)
     (call
       (push.close
         (1 0)
         (call
           (iloc.0 . 0)
           (if.not.pair?.ret.const . #f)
           (cdr.iloc (0 . 0) "./boot/macro/syncase.scm" . 122887)
           (ret.pair? "./boot/macro/syncase.scm" . 122887))
         (push)
         (extend . 1)
         (call
           (iloc.0 . 0)
           (if.false.ret)
           (cddr.iloc (1 . 0) "./boot/macro/syncase.scm" . 122887)
           (ret.null? "./boot/macro/syncase.scm" . 122887))
         (if.true
           (push.cadr.iloc (1 . 0) "./boot/macro/syncase.scm" . 122887)
           (push.car.iloc (1 . 0) "./boot/macro/syncase.scm" . 122887)
           (extend . 2)
           (push.close
             (0 0)
             (push.iloc.1 . 1)
             (apply.iloc (4 . 0) "./boot/macro/syncase.scm" . 122887))
           (push.close
             (2 0)
             (push.const . |.list|)
             (push.const . quote)
             (push.iloc.0 . 0)
             (push.subr.gloc.of |.list| 2 "./boot/macro/syncase.scm" . 122887)
             (push.const . #f)
             (call
               (touch.gloc.of expand-form)
               (push.const . |.LAMBDA|)
               (push.const |.vars|)
               (push.iloc.1 . 0)
               (push.subr.gloc.of |.list| 3 "./boot/macro/syncase.scm" . 122887)
               (push.iloc.0 . 1)
               (apply.gloc.of expand-form "./boot/macro/syncase.scm" . 122887))
             (push)
             (ret.subr.gloc.of |.list| "./boot/macro/syncase.scm" . 122887))
           (apply.gloc.of |.call-with-values| "./boot/macro/syncase.scm" . 122887))
         (iloc.0 . 0)
         (if.false.ret)
         (cddr.iloc (1 . 0) "./boot/macro/syncase.scm" . 122887)
         (if.not.pair?.ret.const . #f)
         (push.iloc.1 . 0)
         (subr.gloc.of cdddr 1 "./boot/macro/syncase.scm" . 122887)
         (if.not.null?.ret.const . #f)
         (push.iloc.1 . 0)
         (push.subr.gloc.of caddr 1 "./boot/macro/syncase.scm" . 122887)
         (push.cadr.iloc (1 . 0) "./boot/macro/syncase.scm" . 122887)
         (push.car.iloc (1 . 0) "./boot/macro/syncase.scm" . 122887)
         (extend . 3)
         (push.close
           (0 0)
           (push.iloc.1 . 2)
           (apply.iloc (4 . 0) "./boot/macro/syncase.scm" . 122887))
         (push.close
           (2 0)
           (push.const . |.list|)
           (push.const . quote)
           (push.iloc.0 . 0)
           (push.subr.gloc.of |.list| 2 "./boot/macro/syncase.scm" . 122887)
           (call
             (touch.gloc.of expand-form)
             (push.const . |.LAMBDA|)
             (push.const |.vars|)
             (push.iloc.1 . 1)
             (push.subr.gloc.of |.list| 3 "./boot/macro/syncase.scm" . 122887)
             (push.iloc.0 . 1)
             (apply.gloc.of expand-form "./boot/macro/syncase.scm" . 122887))
           (push)
           (call
             (touch.gloc.of expand-form)
             (push.const . |.LAMBDA|)
             (push.const |.vars|)
             (push.iloc.1 . 0)
             (push.subr.gloc.of |.list| 3 "./boot/macro/syncase.scm" . 122887)
             (push.iloc.0 . 1)
             (apply.gloc.of expand-form "./boot/macro/syncase.scm" . 122887))
           (push)
           (ret.subr.gloc.of |.list| "./boot/macro/syncase.scm" . 122887))
         (apply.gloc.of |.call-with-values| "./boot/macro/syncase.scm" . 122887))
       (push.iloc 4 . 0)
       (apply.gloc.of
         map
         (map (lambda (|clause`1785*|)
                (let ((|.L516`1787`1790*|
                        (and (pair? |clause`1785*|) (pair? (cdr |clause`1785*|)))))
                  (if (and |.L516`1787`1790*| (null? (cddr |clause`1785*|)))
                      (let ((|expr`1793*| (cadr |clause`1785*|)) (|p`1793*| (car |clause`1785*|)))
                        (|.call-with-values|
                          (lambda () (|parse-pattern`1778*| |p`1793*|))
                          (lambda (|pattern`1795*| |env`1795*|)
                            (|.list|
                              '|.list|
                              (|.list| 'quote |pattern`1795*|)
                              #f
                              (expand-form
                                (|.list| '|.LAMBDA| '(|.vars|) |expr`1793*|)
                                |env`1795*|)))))
                      (and |.L516`1787`1790*|
                           (pair? (cddr |clause`1785*|))
                           (null? (cdddr |clause`1785*|))
                           (let ((|expr`1797*| (caddr |clause`1785*|))
                                 (|fender`1797*| (cadr |clause`1785*|))
                                 (|p`1797*| (car |clause`1785*|)))
                             (|.call-with-values|
                               (lambda () (|parse-pattern`1778*| |p`1797*|))
                               (lambda (|pattern`1799*| |env`1799*|)
                                 (|.list|
                                   '|.list|
                                   (|.list| 'quote |pattern`1799*|)
                                   (expand-form
                                     (|.list| '|.LAMBDA| '(|.vars|) |fender`1797*|)
                                     |env`1799*|)
                                   (expand-form
                                     (|.list| '|.LAMBDA| '(|.vars|) |expr`1797*|)
                                     |env`1799*|)))))))))
              |clauses`1769*|)))
     (push)
     (push.subr.gloc.of
       |.cons*|
       5
       (|.cons*|
         '|.syntax-dispatch|
         (expand-form '|.vars| |env`1753*|)
         (expand-form |expr`1769*| |env`1753*|)
         (|.list| 'quote |lites`1777*|)
         (map (lambda (|clause`1785*|)
                (let ((|.L516`1787`1790*|
                        (and (pair? |clause`1785*|) (pair? (cdr |clause`1785*|)))))
                  (if (and |.L516`1787`1790*| (null? (cddr |clause`1785*|)))
                      (let ((|expr`1793*| (cadr |clause`1785*|)) (|p`1793*| (car |clause`1785*|)))
                        (|.call-with-values|
                          (lambda () (|parse-pattern`1778*| |p`1793*|))
                          (lambda (|pattern`1795*| |env`1795*|)
                            (|.list|
                              '|.list|
                              (|.list| 'quote |pattern`1795*|)
                              #f
                              (expand-form
                                (|.list| '|.LAMBDA| '(|.vars|) |expr`1793*|)
                                |env`1795*|)))))
                      (and |.L516`1787`1790*|
                           (pair? (cddr |clause`1785*|))
                           (null? (cdddr |clause`1785*|))
                           (let ((|expr`1797*| (caddr |clause`1785*|))
                                 (|fender`1797*| (cadr |clause`1785*|))
                                 (|p`1797*| (car |clause`1785*|)))
                             (|.call-with-values|
                               (lambda () (|parse-pattern`1778*| |p`1797*|))
                               (lambda (|pattern`1799*| |env`1799*|)
                                 (|.list|
                                   '|.list|
                                   (|.list| 'quote |pattern`1799*|)
                                   (expand-form
                                     (|.list| '|.LAMBDA| '(|.vars|) |fender`1797*|)
                                     |env`1799*|)
                                   (expand-form
                                     (|.list| '|.LAMBDA| '(|.vars|) |expr`1797*|)
                                     |env`1799*|)))))))))
              |clauses`1769*|)))
     (push.iloc 4 . 1)
     (apply.gloc.of
       annotate
       (annotate
         (|.cons*|
           '|.syntax-dispatch|
           (expand-form '|.vars| |env`1753*|)
           (expand-form |expr`1769*| |env`1753*|)
           (|.list| 'quote |lites`1777*|)
           (map (lambda (|clause`1785*|)
                  (let ((|.L516`1787`1790*|
                          (and (pair? |clause`1785*|) (pair? (cdr |clause`1785*|)))))
                    (if (and |.L516`1787`1790*| (null? (cddr |clause`1785*|)))
                        (let ((|expr`1793*| (cadr |clause`1785*|)) (|p`1793*| (car |clause`1785*|)))
                          (|.call-with-values|
                            (lambda () (|parse-pattern`1778*| |p`1793*|))
                            (lambda (|pattern`1795*| |env`1795*|)
                              (|.list|
                                '|.list|
                                (|.list| 'quote |pattern`1795*|)
                                #f
                                (expand-form
                                  (|.list| '|.LAMBDA| '(|.vars|) |expr`1793*|)
                                  |env`1795*|)))))
                        (and |.L516`1787`1790*|
                             (pair? (cddr |clause`1785*|))
                             (null? (cdddr |clause`1785*|))
                             (let ((|expr`1797*| (caddr |clause`1785*|))
                                   (|fender`1797*| (cadr |clause`1785*|))
                                   (|p`1797*| (car |clause`1785*|)))
                               (|.call-with-values|
                                 (lambda () (|parse-pattern`1778*| |p`1797*|))
                                 (lambda (|pattern`1799*| |env`1799*|)
                                   (|.list|
                                     '|.list|
                                     (|.list| 'quote |pattern`1799*|)
                                     (expand-form
                                       (|.list| '|.LAMBDA| '(|.vars|) |fender`1797*|)
                                       |env`1799*|)
                                     (expand-form
                                       (|.list| '|.LAMBDA| '(|.vars|) |expr`1797*|)
                                       |env`1799*|)))))))))
                |clauses`1769*|))
         |expr`1769*|)))
   (push.const . syntax-case)
   (push.const . "invalid syntax")
   (push.iloc.0 . 0)
   (apply.gloc.of syntax-violation "./boot/macro/syncase.scm" . 122887))
 (set.gloc.of expand-syntax-case)
 (ret.const.unspec))
((close
   (2 0 . expand-syntax)
   (call
     (iloc.0 . 0)
     (if.not.pair?.ret.const . #f)
     (cdr.iloc (0 . 0) "./boot/macro/syncase.scm" . 183301)
     (if.not.pair?.ret.const . #f)
     (cddr.iloc (0 . 0) "./boot/macro/syncase.scm" . 183301)
     (ret.null? "./boot/macro/syncase.scm" . 183301))
   (if.true
     (push.cadr.iloc (0 . 0) "./boot/macro/syncase.scm" . 183301)
     (extend . 1)
     (call
       (touch.gloc.of unrename-syntax)
       (push.iloc.0 . 0)
       (push.iloc.1 . 1)
       (apply.gloc.of unrename-syntax "./boot/macro/syncase.scm" . 183301))
     (push)
     (call
       (touch.gloc.of expand-form)
       (push.const . |.vars|)
       (push.iloc.1 . 1)
       (apply.gloc.of expand-form "./boot/macro/syncase.scm" . 183301))
     (push)
     (extend . 2)
     (call
       (touch.gloc.of collect-unique-ids)
       (push.iloc.0 . 0)
       (apply.gloc.of collect-unique-ids "./boot/macro/syncase.scm" . 183301))
     (push)
     (extend . 1)
     (call
       (push.gloc.of values)
       (call
         (push.close
           (1 0)
           (call
             (touch.gloc.of env-lookup)
             (push.iloc 4 . 1)
             (push.iloc.0 . 0)
             (apply.gloc.of env-lookup "./boot/macro/syncase.scm" . 183301))
           (push)
           (extend . 1)
           (call
             (touch.gloc.of pattern-variable?)
             (push.iloc.0 . 0)
             (apply.gloc.of pattern-variable? "./boot/macro/syncase.scm" . 183301))
           (if.false.ret)
           (push.iloc.1 . 0)
           (cdr.iloc (0 . 0) "./boot/macro/syncase.scm" . 183301)
           (ret.cons "./boot/macro/syncase.scm" . 183301))
         (push.iloc.0 . 0)
         (apply.gloc.of map "./boot/macro/syncase.scm" . 183301))
       (push)
       (apply.gloc.of filter "./boot/macro/syncase.scm" . 183301))
     (push)
     (extend . 1)
     (call
       (touch.gloc.of check-template)
       (push.iloc 2 . 0)
       (push.iloc.0 . 0)
       (apply.gloc.of check-template "./boot/macro/syncase.scm" . 183301))
     (call
       (call
         (touch.gloc.of current-template-environment)
         (apply.gloc.of current-template-environment "./boot/macro/syncase.scm" . 183301))
       (push)
       (extend . 1)
       (iloc.0 . 0)
       (if.true
         (push.gloc.of values)
         (call
           (push.close
             (1 0)
             (push.iloc.0 . 0)
             (push.iloc 2 . 0)
             (subr.gloc.of assq 2 "./boot/macro/syncase.scm" . 183301)
             (if.true.ret.const . #f)
             (push.iloc.0 . 0)
             (push.iloc.1 . 0)
             (push.subr.gloc.of assq 2 "./boot/macro/syncase.scm" . 183301)
             (extend . 1)
             (iloc.0 . 0)
             (if.false.ret)
             (push.iloc.1 . 0)
             (cdr.iloc (0 . 0) "./boot/macro/syncase.scm" . 183301)
             (ret.cons "./boot/macro/syncase.scm" . 183301))
           (push.iloc 2 . 0)
           (apply.gloc.of
             map
             (map (lambda (|id`1824*|)
                    (if (assq |id`1824*| |ranks`1818*|)
                        #f
                        (let ((|.L525`1826*| (assq |id`1824*| |.L524`1820*|)))
                          (and |.L525`1826*| (cons |id`1824*| (cdr |.L525`1826*|))))))
                  |ids`1812*|)))
         (push)
         (apply.gloc.of
           filter
           (filter
             values
             (map (lambda (|id`1824*|)
                    (if (assq |id`1824*| |ranks`1818*|)
                        #f
                        (let ((|.L525`1826*| (assq |id`1824*| |.L524`1820*|)))
                          (and |.L525`1826*| (cons |id`1824*| (cdr |.L525`1826*|))))))
                  |ids`1812*|))))
       (ret.const))
     (push)
     (extend . 1)
     (iloc 3 . 0)
     (if.symbol?
       (call
         (touch.gloc.of lookup-lexical-name)
         (push.iloc 4 . 0)
         (push.iloc 5 . 1)
         (apply.gloc.of lookup-lexical-name "./boot/macro/syncase.scm" . 183301))
       (push)
       (extend . 1)
       (push.iloc 4 . 0)
       (iloc.0 . 0)
       (if.eq?
         (iloc 2 . 0)
         (if.null?
           (iloc.1 . 0)
           (if.null?
             (touch.gloc.of annotate)
             (push.const . |.syntax/i0n|)
             (push.iloc 4 . 1)
             (push.const . quote)
             (push.iloc 4 . 0)
             (push.subr.gloc.of |.list| 2 "./boot/macro/syncase.scm" . 183301)
             (push.subr.gloc.of |.list| 3 "./boot/macro/syncase.scm" . 183301)
             (push.iloc 6 . 0)
             (apply.gloc.of annotate "./boot/macro/syncase.scm" . 183301))
           (touch.gloc.of annotate)
           (push.const . |.syntax/i0e|)
           (push.iloc 4 . 1)
           (push.const . quote)
           (push.iloc 4 . 0)
           (push.subr.gloc.of |.list| 2 "./boot/macro/syncase.scm" . 183301)
           (push.const . quote)
           (push.iloc.1 . 0)
           (push.subr.gloc.of |.list| 2 "./boot/macro/syncase.scm" . 183301)
           (push.subr.gloc.of |.list| 4 "./boot/macro/syncase.scm" . 183301)
           (push.iloc 6 . 0)
           (apply.gloc.of annotate "./boot/macro/syncase.scm" . 183301))
         (iloc.1 . 0)
         (if.null?
           (touch.gloc.of annotate)
           (push.const . |.syntax/i1n|)
           (push.iloc 4 . 1)
           (push.const . quote)
           (push.iloc 4 . 0)
           (push.subr.gloc.of |.list| 2 "./boot/macro/syncase.scm" . 183301)
           (push.subr.gloc.of |.list| 3 "./boot/macro/syncase.scm" . 183301)
           (push.iloc 6 . 0)
           (apply.gloc.of annotate "./boot/macro/syncase.scm" . 183301))
         (touch.gloc.of annotate)
         (push.const . |.syntax/i1e|)
         (push.iloc 4 . 1)
         (push.const . quote)
         (push.iloc 4 . 0)
         (push.subr.gloc.of |.list| 2 "./boot/macro/syncase.scm" . 183301)
         (push.const . quote)
         (push.iloc.1 . 0)
         (push.subr.gloc.of |.list| 2 "./boot/macro/syncase.scm" . 183301)
         (push.subr.gloc.of |.list| 4 "./boot/macro/syncase.scm" . 183301)
         (push.iloc 6 . 0)
         (apply.gloc.of annotate "./boot/macro/syncase.scm" . 183301))
       (iloc 2 . 0)
       (if.null?
         (iloc.1 . 0)
         (if.null?
           (touch.gloc.of annotate)
           (push.const . |.syntax/i2n|)
           (push.iloc 4 . 1)
           (push.const . quote)
           (push.iloc 4 . 0)
           (push.subr.gloc.of |.list| 2 "./boot/macro/syncase.scm" . 183301)
           (push.const . quote)
           (push.iloc.0 . 0)
           (push.subr.gloc.of |.list| 2 "./boot/macro/syncase.scm" . 183301)
           (push.subr.gloc.of |.list| 4 "./boot/macro/syncase.scm" . 183301)
           (push.iloc 6 . 0)
           (apply.gloc.of annotate "./boot/macro/syncase.scm" . 183301))
         (touch.gloc.of annotate)
         (push.const . |.syntax/i2e|)
         (push.iloc 4 . 1)
         (push.const . quote)
         (push.iloc 4 . 0)
         (push.subr.gloc.of |.list| 2 "./boot/macro/syncase.scm" . 183301)
         (push.const . quote)
         (push.iloc.1 . 0)
         (push.subr.gloc.of |.list| 2 "./boot/macro/syncase.scm" . 183301)
         (push.const . quote)
         (push.iloc.0 . 0)
         (push.subr.gloc.of |.list| 2 "./boot/macro/syncase.scm" . 183301)
         (push.subr.gloc.of |.list| 5 "./boot/macro/syncase.scm" . 183301)
         (push.iloc 6 . 0)
         (apply.gloc.of annotate "./boot/macro/syncase.scm" . 183301))
       (iloc.1 . 0)
       (if.null?
         (touch.gloc.of annotate)
         (push.const . |.syntax/i3n|)
         (push.iloc 4 . 1)
         (push.const . quote)
         (push.iloc 4 . 0)
         (push.subr.gloc.of |.list| 2 "./boot/macro/syncase.scm" . 183301)
         (push.const . quote)
         (push.iloc.0 . 0)
         (push.subr.gloc.of |.list| 2 "./boot/macro/syncase.scm" . 183301)
         (push.subr.gloc.of |.list| 4 "./boot/macro/syncase.scm" . 183301)
         (push.iloc 6 . 0)
         (apply.gloc.of annotate "./boot/macro/syncase.scm" . 183301))
       (touch.gloc.of annotate)
       (push.const . |.syntax/i3e|)
       (push.iloc 4 . 1)
       (push.const . quote)
       (push.iloc 4 . 0)
       (push.subr.gloc.of |.list| 2 "./boot/macro/syncase.scm" . 183301)
       (push.const . quote)
       (push.iloc.1 . 0)
       (push.subr.gloc.of |.list| 2 "./boot/macro/syncase.scm" . 183301)
       (push.const . quote)
       (push.iloc.0 . 0)
       (push.subr.gloc.of |.list| 2 "./boot/macro/syncase.scm" . 183301)
       (push.subr.gloc.of |.list| 5 "./boot/macro/syncase.scm" . 183301)
       (push.iloc 6 . 0)
       (apply.gloc.of annotate "./boot/macro/syncase.scm" . 183301))
     (call
       (push.gloc.of values)
       (call
         (push.close
           (1 0)
           (call
             (touch.gloc.of lookup-lexical-name)
             (push.iloc.0 . 0)
             (push.iloc 6 . 1)
             (apply.gloc.of lookup-lexical-name "./boot/macro/syncase.scm" . 183301))
           (push)
           (extend . 1)
           (call
             (call
               (touch.gloc.of renamed-id?)
               (push.iloc.0 . 0)
               (apply.gloc.of renamed-id? "./boot/macro/syncase.scm" . 183301))
             (if.true.ret)
             (touch.gloc.of local-macro-symbol?)
             (push.iloc.0 . 0)
             (apply.gloc.of local-macro-symbol? "./boot/macro/syncase.scm" . 183301))
           (if.false.ret)
           (push.iloc.1 . 0)
           (iloc.0 . 0)
           (if.eq?.ret.const . #f)
           (push.iloc.1 . 0)
           (iloc.0 . 0)
           (ret.cons "./boot/macro/syncase.scm" . 183301))
         (call
           (touch.gloc.of collect-rename-ids)
           (push.iloc 3 . 0)
           (push.iloc.1 . 0)
           (apply.gloc.of collect-rename-ids "./boot/macro/syncase.scm" . 183301))
         (push)
         (apply.gloc.of map "./boot/macro/syncase.scm" . 183301))
       (push)
       (apply.gloc.of filter "./boot/macro/syncase.scm" . 183301))
     (push)
     (extend . 1)
     (iloc.0 . 0)
     (if.null?
       (iloc 2 . 0)
       (if.null?
         (iloc.1 . 0)
         (if.null?
           (touch.gloc.of annotate)
           (push.const . |.syntax/c0n|)
           (push.iloc 4 . 1)
           (push.const . quote)
           (push.iloc 4 . 0)
           (push.subr.gloc.of |.list| 2 "./boot/macro/syncase.scm" . 183301)
           (push.subr.gloc.of |.list| 3 "./boot/macro/syncase.scm" . 183301)
           (push.iloc 6 . 0)
           (apply.gloc.of annotate "./boot/macro/syncase.scm" . 183301))
         (touch.gloc.of annotate)
         (push.const . |.syntax/c0e|)
         (push.iloc 4 . 1)
         (push.const . quote)
         (push.iloc 4 . 0)
         (push.subr.gloc.of |.list| 2 "./boot/macro/syncase.scm" . 183301)
         (push.const . quote)
         (push.iloc.1 . 0)
         (push.subr.gloc.of |.list| 2 "./boot/macro/syncase.scm" . 183301)
         (push.subr.gloc.of |.list| 4 "./boot/macro/syncase.scm" . 183301)
         (push.iloc 6 . 0)
         (apply.gloc.of annotate "./boot/macro/syncase.scm" . 183301))
       (iloc.1 . 0)
       (if.null?
         (touch.gloc.of annotate)
         (push.const . |.syntax/c1n|)
         (push.iloc 4 . 1)
         (push.const . quote)
         (push.iloc 4 . 0)
         (push.subr.gloc.of |.list| 2 "./boot/macro/syncase.scm" . 183301)
         (push.const . quote)
         (push.iloc 2 . 0)
         (push.subr.gloc.of |.list| 2 "./boot/macro/syncase.scm" . 183301)
         (push.subr.gloc.of |.list| 4 "./boot/macro/syncase.scm" . 183301)
         (push.iloc 6 . 0)
         (apply.gloc.of annotate "./boot/macro/syncase.scm" . 183301))
       (touch.gloc.of annotate)
       (push.const . |.syntax/c1e|)
       (push.iloc 4 . 1)
       (push.const . quote)
       (push.iloc 4 . 0)
       (push.subr.gloc.of |.list| 2 "./boot/macro/syncase.scm" . 183301)
       (push.const . quote)
       (push.iloc.1 . 0)
       (push.subr.gloc.of |.list| 2 "./boot/macro/syncase.scm" . 183301)
       (push.const . quote)
       (push.iloc 2 . 0)
       (push.subr.gloc.of |.list| 2 "./boot/macro/syncase.scm" . 183301)
       (push.subr.gloc.of |.list| 5 "./boot/macro/syncase.scm" . 183301)
       (push.iloc 6 . 0)
       (apply.gloc.of annotate "./boot/macro/syncase.scm" . 183301))
     (iloc 2 . 0)
     (if.null?
       (iloc.1 . 0)
       (if.null?
         (touch.gloc.of annotate)
         (push.const . |.syntax/c2n|)
         (push.iloc 4 . 1)
         (push.const . quote)
         (push.iloc 4 . 0)
         (push.subr.gloc.of |.list| 2 "./boot/macro/syncase.scm" . 183301)
         (push.const . quote)
         (push.iloc.0 . 0)
         (push.subr.gloc.of |.list| 2 "./boot/macro/syncase.scm" . 183301)
         (push.subr.gloc.of |.list| 4 "./boot/macro/syncase.scm" . 183301)
         (push.iloc 6 . 0)
         (apply.gloc.of annotate "./boot/macro/syncase.scm" . 183301))
       (touch.gloc.of annotate)
       (push.const . |.syntax/c2e|)
       (push.iloc 4 . 1)
       (push.const . quote)
       (push.iloc 4 . 0)
       (push.subr.gloc.of |.list| 2 "./boot/macro/syncase.scm" . 183301)
       (push.const . quote)
       (push.iloc.1 . 0)
       (push.subr.gloc.of |.list| 2 "./boot/macro/syncase.scm" . 183301)
       (push.const . quote)
       (push.iloc.0 . 0)
       (push.subr.gloc.of |.list| 2 "./boot/macro/syncase.scm" . 183301)
       (push.subr.gloc.of |.list| 5 "./boot/macro/syncase.scm" . 183301)
       (push.iloc 6 . 0)
       (apply.gloc.of annotate "./boot/macro/syncase.scm" . 183301))
     (iloc.1 . 0)
     (if.null?
       (touch.gloc.of annotate)
       (push.const . |.syntax/c3n|)
       (push.iloc 4 . 1)
       (push.const . quote)
       (push.iloc 4 . 0)
       (push.subr.gloc.of |.list| 2 "./boot/macro/syncase.scm" . 183301)
       (push.const . quote)
       (push.iloc 2 . 0)
       (push.subr.gloc.of |.list| 2 "./boot/macro/syncase.scm" . 183301)
       (push.const . quote)
       (push.iloc.0 . 0)
       (push.subr.gloc.of |.list| 2 "./boot/macro/syncase.scm" . 183301)
       (push.subr.gloc.of |.list| 5 "./boot/macro/syncase.scm" . 183301)
       (push.iloc 6 . 0)
       (apply.gloc.of annotate "./boot/macro/syncase.scm" . 183301))
     (touch.gloc.of annotate)
     (push.const . |.syntax/c3e|)
     (push.iloc 4 . 1)
     (push.const . quote)
     (push.iloc 4 . 0)
     (push.subr.gloc.of |.list| 2 "./boot/macro/syncase.scm" . 183301)
     (push.const . quote)
     (push.iloc.1 . 0)
     (push.subr.gloc.of |.list| 2 "./boot/macro/syncase.scm" . 183301)
     (push.const . quote)
     (push.iloc 2 . 0)
     (push.subr.gloc.of |.list| 2 "./boot/macro/syncase.scm" . 183301)
     (push.const . quote)
     (push.iloc.0 . 0)
     (push.subr.gloc.of |.list| 2 "./boot/macro/syncase.scm" . 183301)
     (push.subr.gloc.of |.list| 6 "./boot/macro/syncase.scm" . 183301)
     (push.iloc 6 . 0)
     (apply.gloc.of annotate "./boot/macro/syncase.scm" . 183301))
   (push.const . syntax)
   (push.const . "expected exactly one datum")
   (push.iloc.0 . 0)
   (apply.gloc.of syntax-violation "./boot/macro/syncase.scm" . 183301))
 (set.gloc.of expand-syntax)
 (ret.const.unspec))
((close
   (1 0 . loop)
   (iloc.0 . 0)
   (if.pair?
     (call
       (touch.gloc.of |loop`1845*|)
       (push.car.iloc (0 . 0) "./boot/macro/syncase.scm" . 259102)
       (apply.gloc.of |loop`1845*| "./boot/macro/syncase.scm" . 259096))
     (push)
     (call
       (touch.gloc.of |loop`1845*|)
       (push.cdr.iloc (0 . 0) "./boot/macro/syncase.scm" . 259123)
       (apply.gloc.of |loop`1845*| "./boot/macro/syncase.scm" . 259117))
     (push)
     (extend . 2)
     (call
       (push.iloc.0 . 0)
       (car.iloc (1 . 0) "./boot/macro/syncase.scm" . 260132)
       (if.not.eq?.ret.const . #f)
       (push.iloc.0 . 1)
       (cdr.iloc (1 . 0) "./boot/macro/syncase.scm" . 260150)
       (ret.eq? "./boot/macro/syncase.scm" . 260143))
     (if.true (ret.iloc 1 . 0))
     (push.iloc.0 . 0)
     (iloc.0 . 1)
     (ret.cons "./boot/macro/syncase.scm" . 261149))
   (push.iloc.0 . 0)
   (subr.gloc.of vector? 1 "./boot/macro/syncase.scm" . 262159)
   (if.true
     (call
       (push.gloc.of |loop`1845*|)
       (push.iloc.0 . 0)
       (push.subr.gloc.of vector->list 1 "./boot/macro/syncase.scm" . 263207)
       (apply.gloc.of map "./boot/macro/syncase.scm" . 263197))
     (push)
     (ret.subr.gloc.of list->vector "./boot/macro/syncase.scm" . 263183))
   (call
     (touch.gloc.of wrapped-syntax-object?)
     (push.iloc.0 . 0)
     (apply.gloc.of wrapped-syntax-object? "./boot/macro/syncase.scm" . 264207))
   (if.true
     (touch.gloc.of |loop`1845*|)
     (call
       (touch.gloc.of syntax-object-expr)
       (push.iloc.0 . 0)
       (apply.gloc.of syntax-object-expr "./boot/macro/syncase.scm" . 265237))
     (push)
     (apply.gloc.of |loop`1845*| "./boot/macro/syncase.scm" . 265231))
   (ret.iloc 0 . 0))
 (set.gloc.of |loop`1845*|)
 (close
   (1 0 . syntax->datum)
   (touch.gloc.of strip-rename-suffix)
   (call
     (touch.gloc.of |loop`1845*|)
     (push.iloc.0 . 0)
     (apply.gloc.of |loop`1845*| "./boot/macro/syncase.scm" . 258056))
   (push)
   (apply.gloc.of strip-rename-suffix (strip-rename-suffix (|loop`1845*| |expr`1841*|))))
 (set.gloc.of syntax->datum)
 (ret.const.unspec))
((close
   (2 0 . datum->syntax)
   (call (push.iloc.0 . 0) (apply.gloc.of identifier? "./boot/macro/syncase.scm" . 270345))
   (if.false.call
     (push.const . datum->syntax)
     (push.const . "expected identifier, but got ~r")
     (push.iloc.0 . 0)
     (push.subr.gloc.of format 2 "./boot/macro/syncase.scm" . 271405)
     (apply.gloc.of assertion-violation "./boot/macro/syncase.scm" . 271369))
   (call
     (call
       (touch.gloc.of syntax-object-renames)
       (push.iloc.0 . 0)
       (apply.gloc.of syntax-object-renames "./boot/macro/syncase.scm" . 272401))
     (if.not.pair?.ret.const . #f)
     (call
       (touch.gloc.of import?)
       (call
         (touch.gloc.of syntax-object-renames)
         (push.iloc.0 . 0)
         (apply.gloc.of syntax-object-renames "./boot/macro/syncase.scm" . 273432))
       (push)
       (push.subr.gloc.of cdr 1 "./boot/macro/syncase.scm" . 273427)
       (apply.gloc.of import? "./boot/macro/syncase.scm" . 273418))
     (if.false.ret)
     (push.const . datum->syntax)
     (push.const . "identifer ~u out of context")
     (call
       (touch.gloc.of syntax-object-expr)
       (push.iloc.0 . 0)
       (apply.gloc.of syntax-object-expr "./boot/macro/syncase.scm" . 274516))
     (push)
     (push.subr.gloc.of format 2 "./boot/macro/syncase.scm" . 274478)
     (apply.gloc.of assertion-violation "./boot/macro/syncase.scm" . 274442))
   (call
     (touch.gloc.of retrieve-rename-suffix)
     (call
       (touch.gloc.of syntax-object-expr)
       (push.iloc.0 . 0)
       (apply.gloc.of syntax-object-expr "./boot/macro/syncase.scm" . 275499))
     (push)
     (apply.gloc.of retrieve-rename-suffix "./boot/macro/syncase.scm" . 275475))
   (push)
   (call
     (call
       (touch.gloc.of syntax-object-renames)
       (push.iloc.0 . 0)
       (apply.gloc.of syntax-object-renames "./boot/macro/syncase.scm" . 276507))
     (if.null?
       (touch.gloc.of current-expansion-environment)
       (apply.gloc.of current-expansion-environment "./boot/macro/syncase.scm" . 277524))
     (touch.gloc.of current-transformer-environment)
     (apply.gloc.of current-transformer-environment "./boot/macro/syncase.scm" . 278548))
   (push)
   (subr.gloc.of make-core-hashtable 0)
   (push)
   (subr.gloc.of make-core-hashtable 0)
   (push)
   (extend . 4)
   (call
     (extend.enclose
       (1 0 . loop)
       (iloc.0 . 0)
       (if.pair?
         (call
           (push.car.iloc (0 . 0) "./boot/macro/syncase.scm" . 283687)
           (apply.iloc (1 . 0) "./boot/macro/syncase.scm" . 283681))
         (push)
         (call
           (push.cdr.iloc (0 . 0) "./boot/macro/syncase.scm" . 283704)
           (apply.iloc (1 . 0) "./boot/macro/syncase.scm" . 283698))
         (ret.cons "./boot/macro/syncase.scm" . 283675))
       (push.iloc.0 . 0)
       (subr.gloc.of vector? 1 "./boot/macro/syncase.scm" . 284699)
       (if.true
         (call
           (push.iloc.1 . 0)
           (push.iloc.0 . 0)
           (push.subr.gloc.of vector->list 1 "./boot/macro/syncase.scm" . 285747)
           (apply.gloc.of map "./boot/macro/syncase.scm" . 285737))
         (push)
         (ret.subr.gloc.of list->vector "./boot/macro/syncase.scm" . 285723))
       (iloc.0 . 0)
       (if.symbol?
         (push.iloc 2 . 2)
         (push.iloc.0 . 0)
         (push.const . #f)
         (subr.gloc.of core-hashtable-ref 3 "./boot/macro/syncase.scm" . 287778)
         (if.true.ret)
         (call
           (call
             (push.iloc.0 . 0)
             (subr.gloc.of uninterned-symbol? 1 "./boot/macro/syncase.scm" . 289845)
             (if.true.ret)
             (push.iloc 2 . 0)
             (push.const . "")
             (push.subr.gloc.of string=? 2 "./boot/macro/syncase.scm" . 289875)
             (ret.subr.gloc.of not "./boot/macro/syncase.scm" . 289870))
           (if.true
             (touch.gloc.of compose-id)
             (push.iloc.0 . 0)
             (push.iloc 2 . 0)
             (apply.gloc.of compose-id "./boot/macro/syncase.scm" . 290865))
           (push.const . "~a~a")
           (push.iloc.0 . 0)
           (push.iloc 2 . 0)
           (push.subr.gloc.of format 3 "./boot/macro/syncase.scm" . 291905)
           (ret.subr.gloc.of string->symbol "./boot/macro/syncase.scm" . 291889))
         (push)
         (extend . 1)
         (push.iloc 3 . 2)
         (push.iloc.1 . 0)
         (push.iloc.0 . 0)
         (subr.gloc.of core-hashtable-set! 3 "./boot/macro/syncase.scm" . 292900)
         (call
           (call
             (touch.gloc.of env-lookup)
             (push.iloc 3 . 1)
             (push.iloc.0 . 0)
             (apply.gloc.of env-lookup "./boot/macro/syncase.scm" . 293942))
           (push)
           (extend . 1)
           (push.iloc.0 . 0)
           (iloc.1 . 0)
           (if.eq?
             (push.iloc 4 . 3)
             (push.iloc.1 . 0)
             (call
               (touch.gloc.of env-lookup)
               (push.iloc 4 . 1)
               (push.iloc 2 . 0)
               (apply.gloc.of env-lookup "./boot/macro/syncase.scm" . 297034))
             (push)
             (ret.subr.gloc.of core-hashtable-set! "./boot/macro/syncase.scm" . 297005))
           (push.iloc 4 . 3)
           (push.iloc.1 . 0)
           (push.iloc.0 . 0)
           (ret.subr.gloc.of core-hashtable-set! "./boot/macro/syncase.scm" . 300077))
         (ret.iloc 0 . 0))
       (ret.iloc 0 . 0))
     (push.iloc 2 . 1)
     (apply.iloc (0 . 0) "./boot/macro/syncase.scm" . 282644))
   (push)
   (extend . 1)
   (iloc.0 . 0)
   (if.symbol?
     (touch.gloc.of make-syntax-object)
     (push.iloc.0 . 0)
     (call
       (push.iloc.0 . 0)
       (push.iloc.1 . 3)
       (push.subr.gloc.of core-hashtable->alist 1 "./boot/macro/syncase.scm" . 304179)
       (subr.gloc.of assq 2 "./boot/macro/syncase.scm" . 304169)
       (if.true.ret)
       (ret.const))
     (push)
     (push.const . #f)
     (apply.gloc.of make-syntax-object "./boot/macro/syncase.scm" . 304141))
   (touch.gloc.of make-syntax-object)
   (push.iloc.0 . 0)
   (push.iloc.1 . 3)
   (push.subr.gloc.of core-hashtable->alist 1 "./boot/macro/syncase.scm" . 305189)
   (push.const . #f)
   (apply.gloc.of make-syntax-object "./boot/macro/syncase.scm" . 305165))
 (set.gloc.of datum->syntax)
 (ret.const.unspec))
((close
   (1 0 . identifier?)
   (call
     (touch.gloc.of wrapped-syntax-object?)
     (push.iloc.0 . 0)
     (apply.gloc.of wrapped-syntax-object? "./boot/macro/syncase.scm" . 309258))
   (if.false.ret)
   (call
     (touch.gloc.of syntax-object-expr)
     (push.iloc.0 . 0)
     (apply.gloc.of syntax-object-expr "./boot/macro/syncase.scm" . 310291))
   (push)
   (ret.subr.gloc.of symbol? "./boot/macro/syncase.scm" . 310282))
 (set.gloc.of identifier?)
 (ret.const.unspec))
((close
   (2 0 . bound-identifier=?)
   (call (push.iloc.0 . 0) (apply.gloc.of identifier? "./boot/macro/syncase.scm" . 314377))
   (if.false.call
     (push.const . bound-identifier=?)
     (push.const . "expected identifier, but got ~r")
     (push.iloc.0 . 0)
     (push.subr.gloc.of format 2 "./boot/macro/syncase.scm" . 315442)
     (apply.gloc.of assertion-violation "./boot/macro/syncase.scm" . 315401))
   (call (push.iloc.0 . 1) (apply.gloc.of identifier? "./boot/macro/syncase.scm" . 316425))
   (if.false.call
     (push.const . bound-identifier=?)
     (push.const . "expected identifier, but got ~r")
     (push.iloc.0 . 1)
     (push.subr.gloc.of format 2 "./boot/macro/syncase.scm" . 317490)
     (apply.gloc.of assertion-violation "./boot/macro/syncase.scm" . 317449))
   (call
     (touch.gloc.of syntax-object-expr)
     (push.iloc.0 . 0)
     (apply.gloc.of syntax-object-expr "./boot/macro/syncase.scm" . 318495))
   (push)
   (push.subr.gloc.of symbol->string 1 "./boot/macro/syncase.scm" . 318479)
   (call
     (touch.gloc.of syntax-object-expr)
     (push.iloc.0 . 1)
     (apply.gloc.of syntax-object-expr "./boot/macro/syncase.scm" . 319519))
   (push)
   (push.subr.gloc.of symbol->string 1 "./boot/macro/syncase.scm" . 319503)
   (ret.subr.gloc.of string=? "./boot/macro/syncase.scm" . 318469))
 (set.gloc.of bound-identifier=?)
 (ret.const.unspec))
((close
   (2 0 . free-identifier=?)
   (call (push.iloc.0 . 0) (apply.gloc.of identifier? "./boot/macro/syncase.scm" . 323593))
   (if.false.call
     (push.const . free-identifier=?)
     (push.const . "expected identifier, but got ~r")
     (push.iloc.0 . 0)
     (push.subr.gloc.of format 2 "./boot/macro/syncase.scm" . 324657)
     (apply.gloc.of assertion-violation "./boot/macro/syncase.scm" . 324617))
   (call (push.iloc.0 . 1) (apply.gloc.of identifier? "./boot/macro/syncase.scm" . 325641))
   (if.false.call
     (push.const . free-identifier=?)
     (push.const . "expected identifier, but got ~r")
     (push.iloc.0 . 1)
     (push.subr.gloc.of format 2 "./boot/macro/syncase.scm" . 326705)
     (apply.gloc.of assertion-violation "./boot/macro/syncase.scm" . 326665))
   (call
     (touch.gloc.of current-expansion-environment)
     (apply.gloc.of current-expansion-environment "./boot/macro/syncase.scm" . 327700))
   (push)
   (call
     (touch.gloc.of current-transformer-environment)
     (apply.gloc.of current-transformer-environment "./boot/macro/syncase.scm" . 328724))
   (push)
   (extend . 2)
   (call
     (touch.gloc.of syntax-object-lexname)
     (push.iloc.1 . 0)
     (apply.gloc.of syntax-object-lexname "./boot/macro/syncase.scm" . 329746))
   (push)
   (call
     (touch.gloc.of syntax-object-lexname)
     (push.iloc.1 . 1)
     (apply.gloc.of syntax-object-lexname "./boot/macro/syncase.scm" . 330770))
   (push)
   (extend . 2)
   (call
     (iloc.0 . 0)
     (if.true.ret)
     (touch.gloc.of lookup-lexical-name)
     (call
       (touch.gloc.of syntax-object-expr)
       (push.iloc 2 . 0)
       (apply.gloc.of syntax-object-expr "./boot/macro/syncase.scm" . 331825))
     (push)
     (push.iloc.1 . 0)
     (apply.gloc.of lookup-lexical-name "./boot/macro/syncase.scm" . 331804))
   (push)
   (call
     (iloc.0 . 1)
     (if.true.ret)
     (touch.gloc.of lookup-lexical-name)
     (call
       (touch.gloc.of syntax-object-expr)
       (push.iloc 2 . 1)
       (apply.gloc.of syntax-object-expr "./boot/macro/syncase.scm" . 332849))
     (push)
     (push.iloc.1 . 0)
     (apply.gloc.of lookup-lexical-name "./boot/macro/syncase.scm" . 332828))
   (push)
   (extend . 2)
   (call (iloc.1 . 0) (if.false.ret) (ret.iloc 1 . 1))
   (if.true (push.iloc.1 . 0) (iloc.1 . 1) (ret.eq? "./boot/macro/syncase.scm" . 333856))
   (push.iloc.0 . 0)
   (iloc.0 . 1)
   (if.eq?
     (call
       (touch.gloc.of lookup-topmost-subst)
       (push.iloc.0 . 0)
       (push.iloc 2 . 1)
       (apply.gloc.of lookup-topmost-subst "./boot/macro/syncase.scm" . 334885))
     (push)
     (call
       (touch.gloc.of lookup-topmost-subst)
       (push.iloc.0 . 1)
       (push.iloc 2 . 0)
       (apply.gloc.of lookup-topmost-subst "./boot/macro/syncase.scm" . 334920))
     (ret.eq? "./boot/macro/syncase.scm" . 334880))
   (call
     (touch.gloc.of syntax-object-renames)
     (push.iloc 3 . 0)
     (apply.gloc.of syntax-object-renames "./boot/macro/syncase.scm" . 336926))
   (push)
   (call
     (touch.gloc.of syntax-object-renames)
     (push.iloc 3 . 1)
     (apply.gloc.of syntax-object-renames "./boot/macro/syncase.scm" . 336961))
   (push)
   (extend . 2)
   (call
     (iloc.0 . 0)
     (if.not.pair?.ret.const . #f)
     (iloc.0 . 1)
     (ret.pair? "./boot/macro/syncase.scm" . 337962))
   (if.true
     (push.cdr.iloc (0 . 0) "./boot/macro/syncase.scm" . 338973)
     (cdr.iloc (0 . 1) "./boot/macro/syncase.scm" . 338984)
     (ret.eq? "./boot/macro/syncase.scm" . 338968))
   (call
     (touch.gloc.of lookup-topmost-subst)
     (push.iloc.1 . 0)
     (push.iloc 3 . 1)
     (apply.gloc.of lookup-topmost-subst "./boot/macro/syncase.scm" . 339997))
   (push)
   (call
     (touch.gloc.of lookup-topmost-subst)
     (push.iloc.1 . 1)
     (push.iloc 3 . 1)
     (apply.gloc.of lookup-topmost-subst "./boot/macro/syncase.scm" . 340032))
   (ret.eq? "./boot/macro/syncase.scm" . 339992))
 (set.gloc.of free-identifier=?)
 (ret.const.unspec))
((close
   (1 0)
   (touch.gloc.of make-syntax-object)
   (call (apply.gloc.of generate-temporary-symbol "./boot/macro/syncase.scm" . 346154))
   (push)
   (push.const)
   (push.const . #f)
   (apply.gloc.of make-syntax-object "./boot/macro/syncase.scm" . 346134))
 (set.gloc.of |.L541|)
 (close
   (1 0 . generate-temporaries)
   (push.iloc.0 . 0)
   (subr.gloc.of list? 1 "./boot/macro/syncase.scm" . 344073)
   (if.false.call
     (push.const . generate-temporaries)
     (push.const . "expected list, but got ~r")
     (push.iloc.0 . 0)
     (push.subr.gloc.of format 2 "./boot/macro/syncase.scm" . 345140)
     (apply.gloc.of assertion-violation "./boot/macro/syncase.scm" . 345097))
   (push.gloc.of |.L541|)
   (push.iloc.0 . 0)
   (apply.gloc.of map "./boot/macro/syncase.scm" . 346117))
 (set.gloc.of generate-temporaries)
 (ret.const.unspec))
((close
   (1 0 . make-variable-transformer)
   (touch.gloc.of make-variable-transformer-token)
   (push.close
     (1 0)
     (call
       (call
         (touch.gloc.of wrapped-syntax-object?)
         (push.iloc.0 . 0)
         (apply.gloc.of wrapped-syntax-object? "./boot/macro/syncase.scm" . 352274))
       (if.true (ret.iloc 0 . 0))
       (touch.gloc.of make-syntax-object)
       (push.iloc.0 . 0)
       (push.const)
       (push.const . #f)
       (apply.gloc.of make-syntax-object "./boot/macro/syncase.scm" . 354322))
     (push)
     (apply.iloc (1 . 0) "./boot/macro/syncase.scm" . 352264))
   (apply.gloc.of make-variable-transformer-token "./boot/macro/syncase.scm" . 350213))
 (set.gloc.of make-variable-transformer)
 (ret.const.unspec))
((close
   (1 0 . make-variable-transformer-token)
   (push.const . type:variable-transformer-token)
   (push.iloc.0 . 0)
   (ret.subr.gloc.of tuple "./boot/macro/syncase.scm" . 358405))
 (set.gloc.of make-variable-transformer-token)
 (ret.const.unspec))
((close
   (1 0 . variable-transformer-token?)
   (push.iloc.0 . 0)
   (push.const . 0)
   (push.subr.gloc.of tuple-ref 2 "./boot/macro/syncase.scm" . 362506)
   (const . type:variable-transformer-token)
   (ret.eq? "./boot/macro/syncase.scm" . 362501))
 (set.gloc.of variable-transformer-token?)
 (ret.const.unspec))
((close
   (1 0 . wrap-transformer-input)
   (call
     (touch.gloc.of wrapped-syntax-object?)
     (push.iloc.0 . 0)
     (apply.gloc.of wrapped-syntax-object? "./boot/macro/syncase.scm" . 366604))
   (if.true (ret.iloc 0 . 0))
   (iloc.0 . 0)
   (if.symbol?
     (touch.gloc.of make-syntax-object)
     (push.iloc.0 . 0)
     (push.iloc.0 . 0)
     (push.const . #f)
     (apply.gloc.of make-syntax-object "./boot/macro/syncase.scm" . 367643))
   (touch.gloc.of make-syntax-object)
   (push.iloc.0 . 0)
   (push.const)
   (push.const . #f)
   (apply.gloc.of make-syntax-object "./boot/macro/syncase.scm" . 368657))
 (set.gloc.of wrap-transformer-input)
 (ret.const.unspec))
((close
   (1 0 . contain-non-id-wrapped-syntax-object?)
   (touch.gloc.of |loop`1901*|)
   (push.iloc.0 . 0)
   (apply.gloc.of |loop`1901*| "./boot/macro/syncase.scm" . 376843))
 (set.gloc.of |contain-non-id-wrapped-syntax-object?`1896*|)
 (close
   (1 0 . loop)
   (iloc.0 . 0)
   (if.pair?
     (call
       (touch.gloc.of |loop`1901*|)
       (push.car.iloc (0 . 0) "./boot/macro/syncase.scm" . 377884)
       (apply.gloc.of |loop`1901*| "./boot/macro/syncase.scm" . 377878))
     (if.true.ret)
     (touch.gloc.of |loop`1901*|)
     (push.cdr.iloc (0 . 0) "./boot/macro/syncase.scm" . 377901)
     (apply.gloc.of |loop`1901*| "./boot/macro/syncase.scm" . 377895))
   (push.iloc.0 . 0)
   (subr.gloc.of vector? 1 "./boot/macro/syncase.scm" . 378898)
   (if.true
     (extend.enclose+
       (1 0 . loop2)
       (>=n.iloc (0 . 0) 0 "./boot/macro/syncase.scm" . 380953)
       (if.false.ret)
       (call
         (touch.gloc.of |loop`1901*|)
         (push.iloc.0 . 0)
         (push.vector-ref.iloc (2 . 0) "./boot/macro/syncase.scm" . 381987)
         (apply.gloc.of |loop`1901*| "./boot/macro/syncase.scm" . 381981))
       (if.true.ret)
       (push.n+.iloc (0 . 0) -1 "./boot/macro/syncase.scm" . 383012)
       (apply.iloc+ (1 . 0) "./boot/macro/syncase.scm" . 383005))
     (push.iloc.1 . 0)
     (push.subr.gloc.of vector-length 1 "./boot/macro/syncase.scm" . 379940)
     (push.const . 1)
     (push.subr.gloc.of - 2 "./boot/macro/syncase.scm" . 379937)
     (apply.iloc+ (0 . 0) "./boot/macro/syncase.scm" . 380948))
   (call (push.iloc.0 . 0) (apply.gloc.of identifier? "./boot/macro/syncase.scm" . 384018))
   (if.true.ret.const . #f)
   (touch.gloc.of wrapped-syntax-object?)
   (push.iloc.0 . 0)
   (apply.gloc.of wrapped-syntax-object? "./boot/macro/syncase.scm" . 386066))
 (set.gloc.of |loop`1901*|)
 (close
   (1 0 . unwrap-syntax)
   (call
     (touch.gloc.of |contain-non-id-wrapped-syntax-object?`1896*|)
     (push.iloc.0 . 0)
     (apply.gloc.of
       |contain-non-id-wrapped-syntax-object?`1896*|
       "./boot/macro/syncase.scm"
       .
       388108))
   (if.true
     (call
       (subr.gloc.of make-core-hashtable 0)
       (push)
       (extend . 1)
       (call
         (extend.enclose
           (1 0 . loop)
           (iloc.0 . 0)
           (if.pair?
             (call
               (push.car.iloc (0 . 0) "./boot/macro/syncase.scm" . 393252)
               (apply.iloc (1 . 0) "./boot/macro/syncase.scm" . 393246))
             (push.cdr.iloc (0 . 0) "./boot/macro/syncase.scm" . 394276)
             (apply.iloc (1 . 0) "./boot/macro/syncase.scm" . 394270))
           (push.iloc.0 . 0)
           (subr.gloc.of vector? 1 "./boot/macro/syncase.scm" . 395294)
           (if.true
             (push.iloc.1 . 0)
             (push.iloc.0 . 0)
             (push.subr.gloc.of vector->list 1 "./boot/macro/syncase.scm" . 396333)
             (apply.gloc.of for-each "./boot/macro/syncase.scm" . 396318))
           (call (push.iloc.0 . 0) (apply.gloc.of identifier? "./boot/macro/syncase.scm" . 397342))
           (if.true
             (call
               (touch.gloc.of syntax-object-renames)
               (push.iloc.0 . 0)
               (apply.gloc.of syntax-object-renames "./boot/macro/syncase.scm" . 398380))
             (push)
             (extend . 1)
             (iloc.0 . 0)
             (if.null?.ret.const . #t)
             (push.iloc 3 . 0)
             (push.car.iloc (0 . 0) "./boot/macro/syncase.scm" . 400449)
             (subr.gloc.of core-hashtable-contains? 2 "./boot/macro/syncase.scm" . 400420)
             (if.true.ret)
             (push.iloc 3 . 0)
             (push.car.iloc (0 . 0) "./boot/macro/syncase.scm" . 401468)
             (push.cdr.iloc (0 . 0) "./boot/macro/syncase.scm" . 401481)
             (ret.subr.gloc.of core-hashtable-set! "./boot/macro/syncase.scm" . 401444))
           (call
             (touch.gloc.of wrapped-syntax-object?)
             (push.iloc.0 . 0)
             (apply.gloc.of wrapped-syntax-object? "./boot/macro/syncase.scm" . 402462))
           (if.true
             (call
               (push.close
                 (1 0)
                 (push.iloc 3 . 0)
                 (push.car.iloc (0 . 0) "./boot/macro/syncase.scm" . 404555)
                 (subr.gloc.of core-hashtable-contains? 2 "./boot/macro/syncase.scm" . 404526)
                 (if.true.ret)
                 (push.iloc 3 . 0)
                 (push.car.iloc (0 . 0) "./boot/macro/syncase.scm" . 405574)
                 (push.cdr.iloc (0 . 0) "./boot/macro/syncase.scm" . 405582)
                 (ret.subr.gloc.of core-hashtable-set! "./boot/macro/syncase.scm" . 405550))
               (call
                 (touch.gloc.of syntax-object-renames)
                 (push.iloc.0 . 0)
                 (apply.gloc.of syntax-object-renames "./boot/macro/syncase.scm" . 406568))
               (push)
               (apply.gloc.of for-each "./boot/macro/syncase.scm" . 403486))
             (call
               (touch.gloc.of syntax-object-expr)
               (push.iloc.0 . 0)
               (apply.gloc.of syntax-object-expr "./boot/macro/syncase.scm" . 407588))
             (push)
             (apply.iloc (1 . 0) "./boot/macro/syncase.scm" . 407582))
           (ret.const.unspec))
         (push.iloc 2 . 0)
         (apply.iloc (0 . 0) "./boot/macro/syncase.scm" . 392215))
       (push.iloc.0 . 0)
       (ret.subr.gloc.of core-hashtable->alist "./boot/macro/syncase.scm" . 408597))
     (push)
     (extend . 1)
     (extend.enclose
       (1 0 . loop)
       (iloc.0 . 0)
       (if.pair?
         (call
           (push.car.iloc (0 . 0) "./boot/macro/syncase.scm" . 411686)
           (apply.iloc (1 . 0) "./boot/macro/syncase.scm" . 411680))
         (push)
         (call
           (push.cdr.iloc (0 . 0) "./boot/macro/syncase.scm" . 411707)
           (apply.iloc (1 . 0) "./boot/macro/syncase.scm" . 411701))
         (push)
         (extend . 2)
         (call
           (push.iloc.0 . 0)
           (car.iloc (1 . 0) "./boot/macro/syncase.scm" . 412716)
           (if.not.eq?.ret.const . #f)
           (push.iloc.0 . 1)
           (cdr.iloc (1 . 0) "./boot/macro/syncase.scm" . 412734)
           (ret.eq? "./boot/macro/syncase.scm" . 412727))
         (if.true (ret.iloc 1 . 0))
         (push.iloc.0 . 0)
         (iloc.0 . 1)
         (ret.cons "./boot/macro/syncase.scm" . 413733))
       (iloc.0 . 0)
       (if.symbol?
         (touch.gloc.of make-syntax-object)
         (push.iloc.0 . 0)
         (call
           (push.iloc.0 . 0)
           (push.iloc 2 . 0)
           (subr.gloc.of assq 2 "./boot/macro/syncase.scm" . 415795)
           (if.true.ret)
           (ret.const))
         (push)
         (push.const . #f)
         (apply.gloc.of make-syntax-object "./boot/macro/syncase.scm" . 415767))
       (call
         (touch.gloc.of wrapped-syntax-object?)
         (push.iloc.0 . 0)
         (apply.gloc.of wrapped-syntax-object? "./boot/macro/syncase.scm" . 416791))
       (if.true
         (call (push.iloc.0 . 0) (apply.gloc.of identifier? "./boot/macro/syncase.scm" . 417822))
         (if.true (ret.iloc 0 . 0))
         (call
           (touch.gloc.of syntax-object-expr)
           (push.iloc.0 . 0)
           (apply.gloc.of syntax-object-expr "./boot/macro/syncase.scm" . 418857))
         (push)
         (apply.iloc (1 . 0) "./boot/macro/syncase.scm" . 418851))
       (push.iloc.0 . 0)
       (subr.gloc.of vector? 1 "./boot/macro/syncase.scm" . 419863)
       (if.true
         (call
           (push.iloc.1 . 0)
           (push.iloc.0 . 0)
           (push.subr.gloc.of vector->list 1 "./boot/macro/syncase.scm" . 420911)
           (apply.gloc.of map "./boot/macro/syncase.scm" . 420901))
         (push)
         (ret.subr.gloc.of list->vector "./boot/macro/syncase.scm" . 420887))
       (ret.iloc 0 . 0))
     (push.iloc 2 . 0)
     (apply.iloc (0 . 0) "./boot/macro/syncase.scm" . 410640))
   (ret.iloc 0 . 0))
 (set.gloc.of unwrap-syntax)
 (ret.const.unspec))
((close
   (1 0 . loop)
   (iloc.0 . 0)
   (if.pair?
     (call
       (touch.gloc.of |loop`1955*|)
       (push.car.iloc (0 . 0) "./boot/macro/syncase.scm" . 450593)
       (apply.gloc.of |loop`1955*| "./boot/macro/syncase.scm" . 450587))
     (push)
     (call
       (touch.gloc.of |loop`1955*|)
       (push.cdr.iloc (0 . 0) "./boot/macro/syncase.scm" . 450614)
       (apply.gloc.of |loop`1955*| "./boot/macro/syncase.scm" . 450608))
     (push)
     (extend . 2)
     (call
       (push.car.iloc (1 . 0) "./boot/macro/syncase.scm" . 451621)
       (iloc.0 . 0)
       (if.not.eq?.ret.const . #f)
       (push.cdr.iloc (1 . 0) "./boot/macro/syncase.scm" . 451639)
       (iloc.0 . 1)
       (ret.eq? "./boot/macro/syncase.scm" . 451634))
     (if.true (ret.iloc 1 . 0))
     (push.iloc.0 . 0)
     (iloc.0 . 1)
     (ret.cons "./boot/macro/syncase.scm" . 452640))
   (push.iloc.0 . 0)
   (subr.gloc.of vector? 1 "./boot/macro/syncase.scm" . 453650)
   (if.true
     (call
       (touch.gloc.of |loop`1955*|)
       (push.iloc.0 . 0)
       (push.subr.gloc.of vector->list 1 "./boot/macro/syncase.scm" . 454694)
       (apply.gloc.of |loop`1955*| "./boot/macro/syncase.scm" . 454688))
     (push)
     (ret.subr.gloc.of list->vector "./boot/macro/syncase.scm" . 454674))
   (push.iloc.0 . 0)
   (const . |.&NIL|)
   (if.eq?.ret.const)
   (ret.iloc 0 . 0))
 (set.gloc.of |loop`1955*|)
 (close
   (1 0 . contain-wrapped-syntax-object?)
   (touch.gloc.of |loop`1941*|)
   (push.iloc.0 . 0)
   (apply.gloc.of |loop`1941*| "./boot/macro/syncase.scm" . 436235))
 (set.gloc.of |contain-wrapped-syntax-object?`1934*|)
 (close
   (1 0 . rewrite-nil)
   (touch.gloc.of |loop`1955*|)
   (push.iloc.0 . 0)
   (apply.gloc.of |loop`1955*| "./boot/macro/syncase.scm" . 449547))
 (set.gloc.of |rewrite-nil`1934*|)
 (close
   (2 0 . wrap-renamed-id)
   (extend.enclose+
     (1 0 . loop)
     (iloc.0 . 0)
     (if.pair?
       (call
         (push.car.iloc (0 . 0) "./boot/macro/syncase.scm" . 462881)
         (apply.iloc+ (1 . 0) "./boot/macro/syncase.scm" . 462875))
       (push)
       (call
         (push.cdr.iloc (0 . 0) "./boot/macro/syncase.scm" . 462902)
         (apply.iloc+ (1 . 0) "./boot/macro/syncase.scm" . 462896))
       (push)
       (extend . 2)
       (call
         (push.car.iloc (1 . 0) "./boot/macro/syncase.scm" . 463909)
         (iloc.0 . 0)
         (if.not.eq?.ret.const . #f)
         (push.cdr.iloc (1 . 0) "./boot/macro/syncase.scm" . 463927)
         (iloc.0 . 1)
         (ret.eq? "./boot/macro/syncase.scm" . 463922))
       (if.true (ret.iloc 1 . 0))
       (push.iloc.0 . 0)
       (iloc.0 . 1)
       (ret.cons "./boot/macro/syncase.scm" . 464928))
     (push.iloc.0 . 0)
     (subr.gloc.of vector? 1 "./boot/macro/syncase.scm" . 465938)
     (if.true
       (call
         (push.iloc.0 . 0)
         (push.subr.gloc.of vector->list 1 "./boot/macro/syncase.scm" . 466982)
         (apply.iloc+ (1 . 0) "./boot/macro/syncase.scm" . 466976))
       (push)
       (ret.subr.gloc.of list->vector "./boot/macro/syncase.scm" . 466962))
     (call
       (touch.gloc.of renamed-id?)
       (push.iloc.0 . 0)
       (apply.gloc.of renamed-id? "./boot/macro/syncase.scm" . 467986))
     (if.true
       (touch.gloc.of make-syntax-object)
       (push.iloc.0 . 0)
       (call
         (push.iloc.0 . 0)
         (push.iloc 2 . 1)
         (subr.gloc.of assq 2 "./boot/macro/syncase.scm" . 469038)
         (if.true.ret)
         (ret.const))
       (push)
       (push.const . #f)
       (apply.gloc.of make-syntax-object "./boot/macro/syncase.scm" . 469010))
     (ret.iloc 0 . 0))
   (push.iloc.1 . 0)
   (apply.iloc+ (0 . 0) "./boot/macro/syncase.scm" . 461835))
 (set.gloc.of |wrap-renamed-id`1934*|)
 (close
   (2 0 . partial-wrap-syntax-object)
   (extend.enclose+
     (1 0 . loop)
     (call
       (touch.gloc.of |contain-wrapped-syntax-object?`1934*|)
       (push.iloc.0 . 0)
       (apply.gloc.of |contain-wrapped-syntax-object?`1934*| "./boot/macro/syncase.scm" . 475154))
     (if.true
       (iloc.0 . 0)
       (if.pair?
         (call
           (push.car.iloc (0 . 0) "./boot/macro/syncase.scm" . 477224)
           (apply.iloc+ (1 . 0) "./boot/macro/syncase.scm" . 477218))
         (push)
         (call
           (push.cdr.iloc (0 . 0) "./boot/macro/syncase.scm" . 477245)
           (apply.iloc+ (1 . 0) "./boot/macro/syncase.scm" . 477239))
         (push)
         (extend . 2)
         (call
           (push.car.iloc (1 . 0) "./boot/macro/syncase.scm" . 478252)
           (iloc.0 . 0)
           (if.not.eq?.ret.const . #f)
           (push.cdr.iloc (1 . 0) "./boot/macro/syncase.scm" . 478270)
           (iloc.0 . 1)
           (ret.eq? "./boot/macro/syncase.scm" . 478265))
         (if.true (ret.iloc 1 . 0))
         (push.iloc.0 . 0)
         (iloc.0 . 1)
         (ret.cons "./boot/macro/syncase.scm" . 479271))
       (ret.iloc 0 . 0))
     (push.iloc.0 . 0)
     (const . |.&NIL|)
     (if.eq?
       (touch.gloc.of make-syntax-object)
       (push.const)
       (push.const)
       (push.const . #f)
       (apply.gloc.of make-syntax-object "./boot/macro/syncase.scm" . 482322))
     (iloc.0 . 0)
     (if.symbol?
       (touch.gloc.of make-syntax-object)
       (push.iloc.0 . 0)
       (call
         (push.iloc.0 . 0)
         (push.iloc 2 . 1)
         (subr.gloc.of assq 2 "./boot/macro/syncase.scm" . 484398)
         (if.true.ret)
         (ret.const))
       (push)
       (push.const . #f)
       (apply.gloc.of make-syntax-object "./boot/macro/syncase.scm" . 484370))
     (push.iloc.0 . 0)
     (subr.gloc.of vector? 1 "./boot/macro/syncase.scm" . 485394)
     (if.true
       (touch.gloc.of make-syntax-object)
       (call
         (touch.gloc.of |rewrite-nil`1934*|)
         (push.iloc.0 . 0)
         (apply.gloc.of |rewrite-nil`1934*| "./boot/macro/syncase.scm" . 486438))
       (push)
       (push.iloc 2 . 1)
       (push.const . #f)
       (apply.gloc.of make-syntax-object "./boot/macro/syncase.scm" . 486418))
     (iloc.0 . 0)
     (if.pair?
       (touch.gloc.of make-syntax-object)
       (call
         (touch.gloc.of |rewrite-nil`1934*|)
         (push.iloc.0 . 0)
         (apply.gloc.of |rewrite-nil`1934*| "./boot/macro/syncase.scm" . 488486))
       (push)
       (push.iloc 2 . 1)
       (push.const . #f)
       (apply.gloc.of make-syntax-object "./boot/macro/syncase.scm" . 488466))
     (iloc.0 . 0)
     (if.null?.ret.const)
     (touch.gloc.of make-syntax-object)
     (push.iloc.0 . 0)
     (push.const)
     (push.const . #f)
     (apply.gloc.of make-syntax-object "./boot/macro/syncase.scm" . 491538))
   (push.iloc.1 . 0)
   (apply.iloc+ (0 . 0) "./boot/macro/syncase.scm" . 475147))
 (set.gloc.of |partial-wrap-syntax-object`1934*|)
 (close
   (1 0 . emit)
   (call
     (touch.gloc.of wrapped-syntax-object?)
     (push.iloc.0 . 0)
     (apply.gloc.of wrapped-syntax-object? "./boot/macro/syncase.scm" . 430096))
   (if.true (ret.iloc 0 . 0))
   (touch.gloc.of make-syntax-object)
   (push.iloc.0 . 0)
   (push.const)
   (push.const . #f)
   (apply.gloc.of make-syntax-object "./boot/macro/syncase.scm" . 431125))
 (set.gloc.of |emit`1934*|)
 (close
   (1 0 . loop)
   (iloc.0 . 0)
   (if.pair?
     (car.iloc (0 . 0) "./boot/macro/syncase.scm" . 437277)
     (if.null?.ret.const . #t)
     (call
       (touch.gloc.of |loop`1941*|)
       (push.car.iloc (0 . 0) "./boot/macro/syncase.scm" . 437294)
       (apply.gloc.of |loop`1941*| "./boot/macro/syncase.scm" . 437288))
     (if.true.ret)
     (touch.gloc.of |loop`1941*|)
     (push.cdr.iloc (0 . 0) "./boot/macro/syncase.scm" . 437311)
     (apply.gloc.of |loop`1941*| "./boot/macro/syncase.scm" . 437305))
   (push.iloc.0 . 0)
   (subr.gloc.of vector? 1 "./boot/macro/syncase.scm" . 438290)
   (if.true
     (extend.enclose+
       (1 0 . loop2)
       (>=n.iloc (0 . 0) 0 "./boot/macro/syncase.scm" . 440345)
       (if.false.ret)
       (call
         (touch.gloc.of |loop`1941*|)
         (push.iloc.0 . 0)
         (push.vector-ref.iloc (2 . 0) "./boot/macro/syncase.scm" . 441379)
         (apply.gloc.of |loop`1941*| "./boot/macro/syncase.scm" . 441373))
       (if.true.ret)
       (push.n+.iloc (0 . 0) -1 "./boot/macro/syncase.scm" . 442404)
       (apply.iloc+ (1 . 0) "./boot/macro/syncase.scm" . 442397))
     (push.iloc.1 . 0)
     (push.subr.gloc.of vector-length 1 "./boot/macro/syncase.scm" . 439332)
     (push.const . 1)
     (push.subr.gloc.of - 2 "./boot/macro/syncase.scm" . 439329)
     (apply.iloc+ (0 . 0) "./boot/macro/syncase.scm" . 440340))
   (touch.gloc.of wrapped-syntax-object?)
   (push.iloc.0 . 0)
   (apply.gloc.of wrapped-syntax-object? "./boot/macro/syncase.scm" . 444434))
 (set.gloc.of |loop`1941*|)
 (close
   (6 0 . syntax-transcribe)
   (iloc.0 . 1)
   (if.null?
     (touch.gloc.of make-syntax-object)
     (push.const)
     (push.const)
     (push.const . #f)
     (apply.gloc.of make-syntax-object "./boot/macro/syncase.scm" . 494601))
   (call
     (touch.gloc.of current-expansion-environment)
     (apply.gloc.of current-expansion-environment "./boot/macro/syncase.scm" . 496657))
   (push)
   (extend . 1)
   (call
     (touch.gloc.of current-transformer-environment)
     (apply.gloc.of current-transformer-environment "./boot/macro/syncase.scm" . 498705))
   (push)
   (extend . 1)
   (call
     (touch.gloc.of current-rename-count)
     (apply.gloc.of current-rename-count "./boot/macro/syncase.scm" . 500753))
   (push)
   (extend . 1)
   (call
     (push.close
       (1 0)
       (push.iloc.0 . 0)
       (call
         (touch.gloc.of rename-id)
         (push.iloc.0 . 0)
         (push.iloc.1 . 0)
         (apply.gloc.of rename-id "./boot/macro/syncase.scm" . 502828))
       (ret.cons "./boot/macro/syncase.scm" . 502819))
     (call
       (touch.gloc.of collect-rename-ids)
       (push.iloc 3 . 1)
       (push.iloc 3 . 3)
       (apply.gloc.of collect-rename-ids "./boot/macro/syncase.scm" . 503830))
     (push)
     (apply.gloc.of map "./boot/macro/syncase.scm" . 502801))
   (push)
   (extend . 1)
   (call
     (iloc 4 . 2)
     (if.null?
       (push.close
         (1 0)
         (push.cdr.iloc (0 . 0) "./boot/macro/syncase.scm" . 506926)
         (call
           (touch.gloc.of env-lookup)
           (push.iloc 3 . 0)
           (push.car.iloc (0 . 0) "./boot/macro/syncase.scm" . 506956)
           (apply.gloc.of env-lookup "./boot/macro/syncase.scm" . 506936))
         (ret.cons "./boot/macro/syncase.scm" . 506920))
       (push.iloc.0 . 0)
       (apply.gloc.of map "./boot/macro/syncase.scm" . 506901))
     (push.close
       (1 0)
       (push.car.iloc (0 . 0) "./boot/macro/syncase.scm" . 508969)
       (push.iloc 5 . 2)
       (push.subr.gloc.of assq 2 "./boot/macro/syncase.scm" . 508963)
       (extend . 1)
       (iloc.0 . 0)
       (if.true
         (push.cdr.iloc (1 . 0) "./boot/macro/syncase.scm" . 509014)
         (cdr.iloc (0 . 0) "./boot/macro/syncase.scm" . 509024)
         (ret.cons "./boot/macro/syncase.scm" . 509008))
       (push.cdr.iloc (1 . 0) "./boot/macro/syncase.scm" . 509998)
       (call
         (touch.gloc.of env-lookup)
         (push.iloc 4 . 0)
         (push.car.iloc (1 . 0) "./boot/macro/syncase.scm" . 510028)
         (apply.gloc.of env-lookup "./boot/macro/syncase.scm" . 510008))
       (ret.cons "./boot/macro/syncase.scm" . 509992))
     (push.iloc.0 . 0)
     (apply.gloc.of
       map
       (map (lambda (|lst`1993*|)
              (let ((|.L558`1995*| (assq (car |lst`1993*|) |template-env`1933*|)))
                (if |.L558`1995*|
                    (cons (cdr |lst`1993*|) (cdr |.L558`1995*|))
                    (cons (cdr |lst`1993*|) (env-lookup |env-def`1983*| (car |lst`1993*|))))))
            |aliases`1989*|)))
   (push)
   (extend . 1)
   (call
     (iloc 5 . 5)
     (if.null? (ret.const))
     (iloc 3 . 0)
     (if.null?.ret.const)
     (push.gloc.of values)
     (call
       (push.close
         (1 0)
         (push.car.iloc (0 . 0) "./boot/macro/syncase.scm" . 518193)
         (push.iloc 6 . 5)
         (push.subr.gloc.of assq 2 "./boot/macro/syncase.scm" . 519216)
         (extend . 1)
         (iloc.0 . 0)
         (if.false.ret)
         (call
           (call
             (touch.gloc.of lookup-lexical-name)
             (push.car.iloc (1 . 0) "./boot/macro/syncase.scm" . 518193)
             (push.iloc 5 . 0)
             (apply.gloc.of lookup-lexical-name "./boot/macro/syncase.scm" . 521282))
           (push)
           (cdr.iloc (0 . 0) "./boot/macro/syncase.scm" . 521315)
           (if.eq?.ret.const . #t)
           (call
             (touch.gloc.of local-macro-symbol?)
             (push.cdr.iloc (0 . 0) "./boot/macro/syncase.scm" . 522327)
             (apply.gloc.of local-macro-symbol? "./boot/macro/syncase.scm" . 522306))
           (if.false.ret)
           (call
             (touch.gloc.of lookup-lexical-name)
             (push.car.iloc (0 . 0) "./boot/macro/syncase.scm" . 523370)
             (push.iloc 6 . 0)
             (apply.gloc.of lookup-lexical-name "./boot/macro/syncase.scm" . 523349))
           (push)
           (extend . 1)
           (call
             (touch.gloc.of local-macro-symbol?)
             (push.iloc.0 . 0)
             (apply.gloc.of local-macro-symbol? "./boot/macro/syncase.scm" . 524361))
           (if.false.ret)
           (push.iloc.0 . 0)
           (call
             (touch.gloc.of lookup-lexical-name)
             (push.car.iloc (1 . 0) "./boot/macro/syncase.scm" . 525423)
             (push.iloc 6 . 0)
             (apply.gloc.of lookup-lexical-name "./boot/macro/syncase.scm" . 525402))
           (ret.eq? "./boot/macro/syncase.scm" . 525385))
         (if.true.ret.const . #f)
         (push.cdr.iloc (1 . 0) "./boot/macro/syncase.scm" . 527423)
         (call
           (touch.gloc.of make-out-of-context)
           (push.iloc 7 . 1)
           (apply.gloc.of make-out-of-context "./boot/macro/syncase.scm" . 527431))
         (ret.cons "./boot/macro/syncase.scm" . 527417))
       (push.iloc.1 . 0)
       (apply.gloc.of
         map
         (map (lambda (|a`2001*|)
                (let ((|.L559`2005*| (assq (car |a`2001*|) |lexname-check-list`1933*|)))
                  (and |.L559`2005*|
                       (if (or (eq?
                                 (lookup-lexical-name (car |a`2001*|) |env-def`1983*|)
                                 (cdr |.L559`2005*|))
                               (and (local-macro-symbol? (cdr |.L559`2005*|))
                                    (let ((|lexname-use`2009*|
                                            (lookup-lexical-name
                                              (car |.L559`2005*|)
                                              |env-use`1981*|)))
                                      (and (local-macro-symbol? |lexname-use`2009*|)
                                           (eq?
                                             |lexname-use`2009*|
                                             (lookup-lexical-name
                                               (car |.L559`2005*|)
                                               |env-def`1983*|))))))
                           #f
                           (cons (cdr |a`2001*|) (make-out-of-context |template`1933*|))))))
              |aliases`1989*|)))
     (push)
     (apply.gloc.of
       filter
       (filter
         values
         (map (lambda (|a`2001*|)
                (let ((|.L559`2005*| (assq (car |a`2001*|) |lexname-check-list`1933*|)))
                  (and |.L559`2005*|
                       (if (or (eq?
                                 (lookup-lexical-name (car |a`2001*|) |env-def`1983*|)
                                 (cdr |.L559`2005*|))
                               (and (local-macro-symbol? (cdr |.L559`2005*|))
                                    (let ((|lexname-use`2009*|
                                            (lookup-lexical-name
                                              (car |.L559`2005*|)
                                              |env-use`1981*|)))
                                      (and (local-macro-symbol? |lexname-use`2009*|)
                                           (eq?
                                             |lexname-use`2009*|
                                             (lookup-lexical-name
                                               (car |.L559`2005*|)
                                               |env-def`1983*|))))))
                           #f
                           (cons (cdr |a`2001*|) (make-out-of-context |template`1933*|))))))
              |aliases`1989*|))))
   (push)
   (extend . 1)
   (call (iloc 6 . 0) (if.true.ret) (ret.const))
   (push)
   (extend . 1)
   (iloc 6 . 0)
   (if.null?
     (call
       (touch.gloc.of transcribe-template)
       (push.iloc 7 . 1)
       (push.iloc 7 . 3)
       (push.iloc.0 . 0)
       (push.iloc 3 . 0)
       (push.const . #f)
       (apply.gloc.of transcribe-template "./boot/macro/syncase.scm" . 532509))
     (push)
     (extend . 1)
     (call
       (touch.gloc.of renamed-id?)
       (push.iloc.0 . 0)
       (apply.gloc.of renamed-id? "./boot/macro/syncase.scm" . 533527))
     (if.true
       (touch.gloc.of make-syntax-object)
       (push.iloc.0 . 0)
       (call
         (push.iloc.0 . 0)
         (push.iloc 3 . 0)
         (subr.gloc.of assq 2 "./boot/macro/syncase.scm" . 534580)
         (if.true.ret)
         (ret.const))
       (push)
       (push.iloc 8 . 4)
       (apply.gloc.of make-syntax-object "./boot/macro/syncase.scm" . 534551))
     (touch.gloc.of |wrap-renamed-id`1934*|)
     (push.iloc.0 . 0)
     (push.iloc 3 . 0)
     (apply.gloc.of |wrap-renamed-id`1934*| "./boot/macro/syncase.scm" . 535575))
   (call
     (touch.gloc.of transcribe-template)
     (push.iloc 7 . 1)
     (push.iloc 7 . 3)
     (push.iloc.0 . 0)
     (push.iloc 3 . 0)
     (push.gloc.of |emit`1934*|)
     (apply.gloc.of transcribe-template "./boot/macro/syncase.scm" . 536605))
   (push)
   (extend . 1)
   (iloc.0 . 0)
   (if.null?.ret.const)
   (call
     (touch.gloc.of wrapped-syntax-object?)
     (push.iloc.0 . 0)
     (apply.gloc.of wrapped-syntax-object? "./boot/macro/syncase.scm" . 538650))
   (if.true (ret.iloc 0 . 0))
   (push.iloc.0 . 0)
   (const . |.&NIL|)
   (if.eq?
     (touch.gloc.of make-syntax-object)
     (push.const)
     (push.const)
     (push.const . #f)
     (apply.gloc.of make-syntax-object "./boot/macro/syncase.scm" . 540698))
   (iloc.0 . 0)
   (if.symbol?
     (touch.gloc.of make-syntax-object)
     (push.iloc.0 . 0)
     (call
       (push.iloc.0 . 0)
       (push.iloc 2 . 0)
       (subr.gloc.of assq 2 "./boot/macro/syncase.scm" . 542775)
       (if.true.ret)
       (push.iloc.0 . 0)
       (push.iloc 3 . 0)
       (subr.gloc.of assq 2 "./boot/macro/syncase.scm" . 542802)
       (if.true.ret)
       (ret.const))
     (push)
     (push.iloc 8 . 4)
     (apply.gloc.of make-syntax-object "./boot/macro/syncase.scm" . 542746))
   (touch.gloc.of |partial-wrap-syntax-object`1934*|)
   (push.iloc.0 . 0)
   (call
     (touch.gloc.of extend-env)
     (push.iloc 2 . 0)
     (push.iloc 3 . 0)
     (apply.gloc.of extend-env "./boot/macro/syncase.scm" . 544827))
   (push)
   (apply.gloc.of |partial-wrap-syntax-object`1934*| "./boot/macro/syncase.scm" . 544794))
 (set.gloc.of syntax-transcribe)
 (ret.const.unspec))
((close
   (2 0)
   (touch.gloc.of syntax-transcribe)
   (push.iloc.0 . 0)
   (push.iloc.0 . 1)
   (push.const)
   (push.const)
   (push.iloc.0 . 1)
   (push.const)
   (apply.gloc.of syntax-transcribe "./boot/macro/syncase.scm" . 550917))
 (set.gloc.of |.L576|)
 (push.const . |.syntax/i0n|)
 (push.gloc.of |.L576|)
 (ret.subr.gloc.of set-top-level-value! "./boot/macro/syncase.scm" . 548865))
((close
   (2 0)
   (touch.gloc.of syntax-transcribe)
   (push.iloc.0 . 0)
   (push.iloc.0 . 1)
   (push.const)
   (push.iloc.0 . 1)
   (const . 0)
   (push.cons)
   (push.subr.gloc.of list 1 "./boot/macro/syncase.scm" . 555050)
   (push.iloc.0 . 1)
   (push.const)
   (apply.gloc.of syntax-transcribe "./boot/macro/syncase.scm" . 555013))
 (set.gloc.of |.L578|)
 (push.const . |.syntax/i1n|)
 (push.gloc.of |.L578|)
 (ret.subr.gloc.of set-top-level-value! "./boot/macro/syncase.scm" . 552961))
((close
   (3 0)
   (touch.gloc.of syntax-transcribe)
   (push.iloc.0 . 0)
   (push.iloc.0 . 1)
   (push.const)
   (push.const)
   (push.iloc.0 . 2)
   (push.const)
   (apply.gloc.of syntax-transcribe "./boot/macro/syncase.scm" . 559109))
 (set.gloc.of |.L580|)
 (push.const . |.syntax/i2n|)
 (push.gloc.of |.L580|)
 (ret.subr.gloc.of set-top-level-value! "./boot/macro/syncase.scm" . 557057))
((close
   (3 0)
   (touch.gloc.of syntax-transcribe)
   (push.iloc.0 . 0)
   (push.iloc.0 . 1)
   (push.const)
   (push.iloc.0 . 1)
   (const . 0)
   (push.cons)
   (push.subr.gloc.of list 1 "./boot/macro/syncase.scm" . 563242)
   (push.iloc.0 . 2)
   (push.const)
   (apply.gloc.of syntax-transcribe "./boot/macro/syncase.scm" . 563205))
 (set.gloc.of |.L582|)
 (push.const . |.syntax/i3n|)
 (push.gloc.of |.L582|)
 (ret.subr.gloc.of set-top-level-value! "./boot/macro/syncase.scm" . 561153))
((close
   (2 0)
   (touch.gloc.of syntax-transcribe)
   (push.iloc.0 . 0)
   (push.iloc.0 . 1)
   (push.const)
   (push.const)
   (push.const . #f)
   (push.const)
   (apply.gloc.of syntax-transcribe "./boot/macro/syncase.scm" . 567301))
 (set.gloc.of |.L584|)
 (push.const . |.syntax/c0n|)
 (push.gloc.of |.L584|)
 (ret.subr.gloc.of set-top-level-value! "./boot/macro/syncase.scm" . 565249))
((close
   (3 0)
   (touch.gloc.of syntax-transcribe)
   (push.iloc.0 . 0)
   (push.iloc.0 . 1)
   (push.const)
   (push.iloc.0 . 2)
   (push.const . #f)
   (push.const)
   (apply.gloc.of syntax-transcribe "./boot/macro/syncase.scm" . 571397))
 (set.gloc.of |.L586|)
 (push.const . |.syntax/c1n|)
 (push.gloc.of |.L586|)
 (ret.subr.gloc.of set-top-level-value! "./boot/macro/syncase.scm" . 569345))
((close
   (3 0)
   (touch.gloc.of syntax-transcribe)
   (push.iloc.0 . 0)
   (push.iloc.0 . 1)
   (push.const)
   (push.const)
   (push.const . #f)
   (push.iloc.0 . 2)
   (apply.gloc.of syntax-transcribe "./boot/macro/syncase.scm" . 575493))
 (set.gloc.of |.L588|)
 (push.const . |.syntax/c2n|)
 (push.gloc.of |.L588|)
 (ret.subr.gloc.of set-top-level-value! "./boot/macro/syncase.scm" . 573441))
((close
   (4 0)
   (touch.gloc.of syntax-transcribe)
   (push.iloc.0 . 0)
   (push.iloc.0 . 1)
   (push.const)
   (push.iloc.0 . 2)
   (push.const . #f)
   (push.iloc.0 . 3)
   (apply.gloc.of syntax-transcribe "./boot/macro/syncase.scm" . 579589))
 (set.gloc.of |.L590|)
 (push.const . |.syntax/c3n|)
 (push.gloc.of |.L590|)
 (ret.subr.gloc.of set-top-level-value! "./boot/macro/syncase.scm" . 577537))
((close
   (3 0)
   (touch.gloc.of syntax-transcribe)
   (push.iloc.0 . 0)
   (push.iloc.0 . 1)
   (push.iloc.0 . 2)
   (push.const)
   (push.iloc.0 . 1)
   (push.const)
   (apply.gloc.of syntax-transcribe "./boot/macro/syncase.scm" . 585733))
 (set.gloc.of |.L592|)
 (push.const . |.syntax/i0e|)
 (push.gloc.of |.L592|)
 (ret.subr.gloc.of set-top-level-value! "./boot/macro/syncase.scm" . 583681))
((close
   (3 0)
   (touch.gloc.of syntax-transcribe)
   (push.iloc.0 . 0)
   (push.iloc.0 . 1)
   (push.iloc.0 . 2)
   (push.iloc.0 . 1)
   (const . 0)
   (push.cons)
   (push.subr.gloc.of list 1 "./boot/macro/syncase.scm" . 589866)
   (push.iloc.0 . 1)
   (push.const)
   (apply.gloc.of syntax-transcribe "./boot/macro/syncase.scm" . 589829))
 (set.gloc.of |.L594|)
 (push.const . |.syntax/i1e|)
 (push.gloc.of |.L594|)
 (ret.subr.gloc.of set-top-level-value! "./boot/macro/syncase.scm" . 587777))
((close
   (4 0)
   (touch.gloc.of syntax-transcribe)
   (push.iloc.0 . 0)
   (push.iloc.0 . 1)
   (push.iloc.0 . 2)
   (push.const)
   (push.iloc.0 . 3)
   (push.const)
   (apply.gloc.of syntax-transcribe "./boot/macro/syncase.scm" . 593925))
 (set.gloc.of |.L596|)
 (push.const . |.syntax/i2e|)
 (push.gloc.of |.L596|)
 (ret.subr.gloc.of set-top-level-value! "./boot/macro/syncase.scm" . 591873))
((close
   (4 0)
   (touch.gloc.of syntax-transcribe)
   (push.iloc.0 . 0)
   (push.iloc.0 . 1)
   (push.iloc.0 . 2)
   (push.iloc.0 . 1)
   (const . 0)
   (push.cons)
   (push.subr.gloc.of list 1 "./boot/macro/syncase.scm" . 598058)
   (push.iloc.0 . 3)
   (push.const)
   (apply.gloc.of syntax-transcribe "./boot/macro/syncase.scm" . 598021))
 (set.gloc.of |.L598|)
 (push.const . |.syntax/i3e|)
 (push.gloc.of |.L598|)
 (ret.subr.gloc.of set-top-level-value! "./boot/macro/syncase.scm" . 595969))
((close
   (3 0)
   (touch.gloc.of syntax-transcribe)
   (push.iloc.0 . 0)
   (push.iloc.0 . 1)
   (push.iloc.0 . 2)
   (push.const)
   (push.const . #f)
   (push.const)
   (apply.gloc.of syntax-transcribe "./boot/macro/syncase.scm" . 602117))
 (set.gloc.of |.L600|)
 (push.const . |.syntax/c0e|)
 (push.gloc.of |.L600|)
 (ret.subr.gloc.of set-top-level-value! "./boot/macro/syncase.scm" . 600065))
((close
   (4 0)
   (touch.gloc.of syntax-transcribe)
   (push.iloc.0 . 0)
   (push.iloc.0 . 1)
   (push.iloc.0 . 2)
   (push.iloc.0 . 3)
   (push.const . #f)
   (push.const)
   (apply.gloc.of syntax-transcribe "./boot/macro/syncase.scm" . 606213))
 (set.gloc.of |.L602|)
 (push.const . |.syntax/c1e|)
 (push.gloc.of |.L602|)
 (ret.subr.gloc.of set-top-level-value! "./boot/macro/syncase.scm" . 604161))
((close
   (4 0)
   (touch.gloc.of syntax-transcribe)
   (push.iloc.0 . 0)
   (push.iloc.0 . 1)
   (push.iloc.0 . 2)
   (push.const)
   (push.const . #f)
   (push.iloc.0 . 3)
   (apply.gloc.of syntax-transcribe "./boot/macro/syncase.scm" . 610309))
 (set.gloc.of |.L604|)
 (push.const . |.syntax/c2e|)
 (push.gloc.of |.L604|)
 (ret.subr.gloc.of set-top-level-value! "./boot/macro/syncase.scm" . 608257))
((close
   (5 0)
   (touch.gloc.of syntax-transcribe)
   (push.iloc.0 . 0)
   (push.iloc.0 . 1)
   (push.iloc.0 . 2)
   (push.iloc.0 . 3)
   (push.const . #f)
   (push.iloc.0 . 4)
   (apply.gloc.of syntax-transcribe "./boot/macro/syncase.scm" . 614405))
 (set.gloc.of |.L606|)
 (push.const . |.syntax/c3e|)
 (push.gloc.of |.L606|)
 (ret.subr.gloc.of set-top-level-value! "./boot/macro/syncase.scm" . 612353))

;
((call (push.const) (apply.gloc.of make-parameter "./boot/macro/library.scm" . 4126))
 (set.gloc.of scheme-library-paths)
 (ret.const.unspec))
((call
   (subr.gloc.of make-core-hashtable 0)
   (push)
   (apply.gloc.of make-parameter "./boot/macro/library.scm" . 5152))
 (set.gloc.of scheme-library-exports)
 (ret.const.unspec))
((call
   (subr.gloc.of make-core-hashtable 0)
   (push)
   (apply.gloc.of make-parameter "./boot/macro/library.scm" . 6177))
 (set.gloc.of scheme-library-versions)
 (ret.const.unspec))
((close
   (2 0 . symbol-list->string)
   (push.gloc.of string-append)
   (call
     (extend.enclose+
       (1 0 . loop)
       (iloc.0 . 0)
       (if.null?.ret.const)
       (car.iloc (0 . 0) "./boot/macro/library.scm" . 13347)
       (if.symbol?
         (push.iloc 2 . 1)
         (push.car.iloc (0 . 0) "./boot/macro/library.scm" . 15414)
         (push.subr.gloc.of symbol->string 1 "./boot/macro/library.scm" . 15398)
         (call
           (push.cdr.iloc (0 . 0) "./boot/macro/library.scm" . 16428)
           (apply.iloc+ (1 . 0) "./boot/macro/library.scm" . 16422))
         (push)
         (subr.gloc.of cons 2 "./boot/macro/library.scm" . 15392)
         (ret.cons "./boot/macro/library.scm" . 14362))
       (push.cdr.iloc (0 . 0) "./boot/macro/library.scm" . 18464)
       (apply.iloc+ (1 . 0) "./boot/macro/library.scm" . 18458))
     (push.iloc.1 . 0)
     (apply.iloc+ (0 . 0) "./boot/macro/library.scm" . 12307))
   (push)
   (push.subr.gloc.of
     cdr
     1
     (cdr
       (letrec* ((|loop`2056*|
                   (lambda (|lst`2057*|)
                     (if (null? |lst`2057*|)
                         '()
                         (if (symbol? (car |lst`2057*|))
                             (cons |infix`2052*|
                                   (cons (symbol->string (car |lst`2057*|))
                                         (|loop`2056*| (cdr |lst`2057*|))))
                             (|loop`2056*| (cdr |lst`2057*|)))))))
         (|loop`2056*| |ref`2052*|))))
   (apply.gloc.of
     apply
     (apply
       string-append
       (cdr
         (letrec* ((|loop`2056*|
                     (lambda (|lst`2057*|)
                       (if (null? |lst`2057*|)
                           '()
                           (if (symbol? (car |lst`2057*|))
                               (cons |infix`2052*|
                                     (cons (symbol->string (car |lst`2057*|))
                                           (|loop`2056*| (cdr |lst`2057*|))))
                               (|loop`2056*| (cdr |lst`2057*|)))))))
           (|loop`2056*| |ref`2052*|))))))
 (set.gloc.of symbol-list->string)
 (ret.const.unspec))
((close
   (1 0 . generate-library-id)
   (touch.gloc.of library-name->id)
   (push.const . #f)
   (push.iloc.0 . 0)
   (apply.gloc.of library-name->id "./boot/macro/library.scm" . 22533))
 (set.gloc.of generate-library-id)
 (ret.const.unspec))
((close
   (2 0 . library-name->id)
   (extend.enclose+
     (0 0 . malformed-name)
     (iloc 2 . 0)
     (if.true
       (push.const . library)
       (push.const . "malformed library name")
       (call
         (touch.gloc.of abbreviated-take-form)
         (push.iloc 2 . 0)
         (push.const . 4)
         (push.const . 8)
         (apply.gloc.of abbreviated-take-form "./boot/macro/library.scm" . 30785))
       (push)
       (push.iloc 2 . 1)
       (apply.gloc.of syntax-violation "./boot/macro/library.scm" . 30733))
     (push.const . library)
     (push.const . "malformed library name")
     (push.iloc 2 . 1)
     (apply.gloc.of syntax-violation "./boot/macro/library.scm" . 31757))
   (call
     (push.iloc.1 . 1)
     (subr.gloc.of list? 1 "./boot/macro/library.scm" . 33806)
     (if.false.ret)
     (push.iloc.1 . 1)
     (push.subr.gloc.of null? 1 "./boot/macro/library.scm" . 33824)
     (ret.subr.gloc.of not "./boot/macro/library.scm" . 33819))
   (if.true
     (call
       (touch.gloc.of every1)
       (push.gloc.of symbol?)
       (push.iloc.1 . 1)
       (apply.gloc.of every1 "./boot/macro/library.scm" . 34829))
     (if.true
       (call
         (touch.gloc.of symbol-list->string)
         (push.iloc.1 . 1)
         (push.const . "~a")
         (subr.gloc.of current-library-infix 0)
         (push)
         (push.subr.gloc.of format 2 "./boot/macro/library.scm" . 35895)
         (apply.gloc.of symbol-list->string "./boot/macro/library.scm" . 35869))
       (push)
       (ret.subr.gloc.of string->symbol "./boot/macro/library.scm" . 35853))
     (push.iloc.1 . 1)
     (push.iloc.1 . 1)
     (push.subr.gloc.of length 1 "./boot/macro/library.scm" . 36908)
     (push.const . 1)
     (push.subr.gloc.of - 2 "./boot/macro/library.scm" . 36905)
     (push.subr.gloc.of list-head 2 "./boot/macro/library.scm" . 36889)
     (extend . 1)
     (call
       (touch.gloc.of every1)
       (push.gloc.of symbol?)
       (push.iloc.0 . 0)
       (apply.gloc.of every1 "./boot/macro/library.scm" . 37907))
     (if.true
       (call
         (touch.gloc.of symbol-list->string)
         (push.iloc.0 . 0)
         (push.const . "~a")
         (subr.gloc.of current-library-infix 0)
         (push)
         (push.subr.gloc.of format 2 "./boot/macro/library.scm" . 38973)
         (apply.gloc.of symbol-list->string "./boot/macro/library.scm" . 38947))
       (push)
       (ret.subr.gloc.of string->symbol "./boot/macro/library.scm" . 38931))
     (apply.iloc+ (1 . 0) "./boot/macro/library.scm" . 39955))
   (apply.iloc+ (0 . 0) "./boot/macro/library.scm" . 40969))
 (set.gloc.of library-name->id)
 (ret.const.unspec))
((close
   (1 0 . exact-nonnegative-integer?)
   (push.iloc.0 . 0)
   (subr.gloc.of integer? 1 "./boot/macro/library.scm" . 54286)
   (if.false.ret)
   (push.iloc.0 . 0)
   (subr.gloc.of exact? 1 "./boot/macro/library.scm" . 54301)
   (if.false.ret)
   (push.iloc.0 . 0)
   (push.const . 0)
   (ret.subr.gloc.of >= "./boot/macro/library.scm" . 54314))
 (set.gloc.of |exact-nonnegative-integer?`2069*|)
 (close
   (2 0 . library-name->version)
   (extend.enclose+
     (0 0 . malformed-version)
     (iloc 2 . 0)
     (if.pair?
       (push.const . library)
       (push.const . "malformed library version")
       (call
         (touch.gloc.of abbreviated-take-form)
         (push.iloc 2 . 0)
         (push.const . 4)
         (push.const . 8)
         (apply.gloc.of abbreviated-take-form "./boot/macro/library.scm" . 49220))
       (push)
       (push.iloc 2 . 1)
       (apply.gloc.of syntax-violation "./boot/macro/library.scm" . 49165))
     (push.const . library)
     (push.const . "malformed library version")
     (push.iloc 2 . 1)
     (apply.gloc.of syntax-violation "./boot/macro/library.scm" . 50189))
   (call
     (push.iloc.1 . 1)
     (subr.gloc.of list? 1 "./boot/macro/library.scm" . 56334)
     (if.false.ret)
     (push.iloc.1 . 1)
     (push.subr.gloc.of null? 1 "./boot/macro/library.scm" . 56352)
     (ret.subr.gloc.of not "./boot/macro/library.scm" . 56347))
   (if.true
     (call
       (touch.gloc.of every1)
       (push.gloc.of symbol?)
       (push.iloc.1 . 1)
       (apply.gloc.of every1 "./boot/macro/library.scm" . 57360))
     (if.true.ret.const . #f)
     (push.iloc.1 . 1)
     (push.iloc.1 . 1)
     (push.subr.gloc.of length 1 "./boot/macro/library.scm" . 59444)
     (push.const . 1)
     (push.subr.gloc.of - 2 "./boot/macro/library.scm" . 59441)
     (push.subr.gloc.of list-tail 2 "./boot/macro/library.scm" . 59425)
     (push.subr.gloc.of car 1 "./boot/macro/library.scm" . 59420)
     (extend . 1)
     (iloc.0 . 0)
     (if.null?.ret.const . #f)
     (call
       (push.iloc.0 . 0)
       (subr.gloc.of list? 1 "./boot/macro/library.scm" . 61470)
       (if.false.ret)
       (touch.gloc.of every1)
       (push.gloc.of |exact-nonnegative-integer?`2069*|)
       (push.iloc.0 . 0)
       (apply.gloc.of every1 "./boot/macro/library.scm" . 61483))
     (if.true (ret.iloc 0 . 0))
     (apply.iloc+ (1 . 0) "./boot/macro/library.scm" . 62494))
   (apply.iloc+ (0 . 0) "./boot/macro/library.scm" . 63497))
 (set.gloc.of library-name->version)
 (ret.const.unspec))
((close
   (2 0 . library-reference->name)
   (extend.enclose+
     (0 0 . malformed-name)
     (iloc 2 . 0)
     (if.pair?
       (push.const . library)
       (push.const . "malformed library name")
       (call
         (touch.gloc.of abbreviated-take-form)
         (push.iloc 2 . 0)
         (push.const . 4)
         (push.const . 8)
         (apply.gloc.of abbreviated-take-form "./boot/macro/library.scm" . 71745))
       (push)
       (push.iloc 2 . 1)
       (apply.gloc.of syntax-violation "./boot/macro/library.scm" . 71693))
     (push.const . library)
     (push.const . "malformed library name")
     (push.iloc 2 . 1)
     (apply.gloc.of syntax-violation "./boot/macro/library.scm" . 72717))
   (call
     (touch.gloc.of every1)
     (push.gloc.of symbol?)
     (push.iloc.1 . 1)
     (apply.gloc.of every1 "./boot/macro/library.scm" . 74764))
   (if.true (ret.iloc 1 . 1))
   (push.iloc.1 . 1)
   (push.iloc.1 . 1)
   (push.subr.gloc.of length 1 "./boot/macro/library.scm" . 76842)
   (push.const . 1)
   (push.subr.gloc.of - 2 "./boot/macro/library.scm" . 76839)
   (push.subr.gloc.of list-head 2 "./boot/macro/library.scm" . 76824)
   (extend . 1)
   (call
     (touch.gloc.of every1)
     (push.gloc.of symbol?)
     (push.iloc.0 . 0)
     (apply.gloc.of every1 "./boot/macro/library.scm" . 77845))
   (if.true (ret.iloc 0 . 0))
   (apply.iloc+ (1 . 0) "./boot/macro/library.scm" . 78874))
 (set.gloc.of library-reference->name)
 (ret.const.unspec))
((close
   (2 0 . flatten-library-reference)
   (call
     (call
       (push.iloc.0 . 1)
       (subr.gloc.of list? 1 "./boot/macro/library.scm" . 82958)
       (if.false.ret)
       (push.iloc.0 . 1)
       (push.subr.gloc.of null? 1 "./boot/macro/library.scm" . 82975)
       (ret.subr.gloc.of not "./boot/macro/library.scm" . 82970))
     (if.true.ret)
     (push.const . library)
     (push.const . "malformed library name")
     (call
       (touch.gloc.of abbreviated-take-form)
       (push.iloc.0 . 0)
       (push.const . 4)
       (push.const . 8)
       (apply.gloc.of abbreviated-take-form "./boot/macro/library.scm" . 84029))
     (push)
     (push.iloc.0 . 1)
     (apply.gloc.of syntax-violation "./boot/macro/library.scm" . 83977))
   (call
     (iloc.0 . 1)
     (if.not.pair?.ret.const . #f)
     (cdr.iloc (0 . 1) (cdr |lst`2082*|))
     (if.not.pair?.ret.const . #f)
     (cddr.iloc (0 . 1) (cddr |lst`2082*|))
     (if.not.null?.ret.const . #f)
     (push.cadr.iloc (0 . 1) (cadr |lst`2082*|))
     (subr.gloc.of list? 1 (list? (cadr |lst`2082*|)))
     (if.false.ret)
     (push.car.iloc (0 . 1) (car |lst`2082*|))
     (const . library)
     (ret.eq? (eq? (car |lst`2082*|) 'library)))
   (if.true
     (touch.gloc.of flatten-library-reference)
     (push.iloc.0 . 0)
     (push.cadr.iloc (0 . 1) (cadr |lst`2082*|))
     (apply.gloc.of
       flatten-library-reference
       (flatten-library-reference |form`2082*| (cadr |lst`2082*|))))
   (call
     (iloc.0 . 1)
     (if.not.pair?.ret.const . #f)
     (push.car.iloc (0 . 1) (car |lst`2082*|))
     (const . library)
     (ret.eq? (eq? (car |lst`2082*|) 'library)))
   (if.true
     (push.const . library)
     (push.const . "malformed library name")
     (call
       (touch.gloc.of abbreviated-take-form)
       (push.iloc.0 . 0)
       (push.const . 4)
       (push.const . 8)
       (apply.gloc.of abbreviated-take-form (abbreviated-take-form |form`2082*| 4 8)))
     (push)
     (push.iloc.0 . 1)
     (apply.gloc.of
       syntax-violation
       (syntax-violation
         'library
         "malformed library name"
         (abbreviated-take-form |form`2082*| 4 8)
         |lst`2082*|)))
   (ret.iloc 0 . 1))
 (set.gloc.of flatten-library-reference)
 (ret.const.unspec))
((close
   (2 0 . library-reference->version)
   (extend.enclose+
     (0 0 . malformed-version)
     (iloc 2 . 0)
     (if.pair?
       (push.const . import)
       (push.const . "malformed library version")
       (call
         (touch.gloc.of abbreviated-take-form)
         (push.iloc 2 . 0)
         (push.const . 4)
         (push.const . 8)
         (apply.gloc.of abbreviated-take-form "./boot/macro/library.scm" . 96323))
       (push)
       (push.iloc 2 . 1)
       (apply.gloc.of syntax-violation "./boot/macro/library.scm" . 96269))
     (push.const . import)
     (push.const . "malformed library version")
     (push.iloc 2 . 1)
     (apply.gloc.of syntax-violation "./boot/macro/library.scm" . 97293))
   (call
     (push.iloc.1 . 1)
     (subr.gloc.of list? 1 "./boot/macro/library.scm" . 99342)
     (if.false.ret)
     (push.iloc.1 . 1)
     (push.subr.gloc.of null? 1 "./boot/macro/library.scm" . 99359)
     (ret.subr.gloc.of not "./boot/macro/library.scm" . 99354))
   (if.true
     (call
       (touch.gloc.of every1)
       (push.gloc.of symbol?)
       (push.iloc.1 . 1)
       (apply.gloc.of every1 "./boot/macro/library.scm" . 100368))
     (if.true.ret.const . #f)
     (push.iloc.1 . 1)
     (push.iloc.1 . 1)
     (push.subr.gloc.of length 1 "./boot/macro/library.scm" . 101432)
     (push.const . 1)
     (push.subr.gloc.of - 2 "./boot/macro/library.scm" . 101429)
     (push.subr.gloc.of list-tail 2 "./boot/macro/library.scm" . 101414)
     (push.subr.gloc.of car 1 "./boot/macro/library.scm" . 101409)
     (extend . 1)
     (push.iloc.0 . 0)
     (subr.gloc.of list? 1 "./boot/macro/library.scm" . 102430)
     (if.true (ret.iloc 0 . 0))
     (apply.iloc+ (1 . 0) "./boot/macro/library.scm" . 103459))
   (apply.iloc+ (0 . 0) "./boot/macro/library.scm" . 104457))
 (set.gloc.of library-reference->version)
 (ret.const.unspec))
((close
   (1 0 . exact-nonnegative-integer?)
   (push.iloc.0 . 0)
   (subr.gloc.of integer? 1 "./boot/macro/library.scm" . 111630)
   (if.false.ret)
   (push.iloc.0 . 0)
   (subr.gloc.of exact? 1 "./boot/macro/library.scm" . 111645)
   (if.false.ret)
   (push.iloc.0 . 0)
   (push.const . 0)
   (ret.subr.gloc.of >= "./boot/macro/library.scm" . 111658))
 (set.gloc.of |exact-nonnegative-integer?`2099*|)
 (close
   (4 0 . test-library-versions)
   (call
     (extend.enclose
       (1 0 . loop)
       (call
         (iloc.0 . 0)
         (if.not.pair?.ret.const . #f)
         (push.cdr.iloc (0 . 0) "./boot/macro/library.scm" . 114699)
         (ret.subr.gloc.of list? "./boot/macro/library.scm" . 114699))
       (push)
       (extend . 1)
       (call
         (iloc.1 . 0)
         (if.not.pair?.ret.const . #f)
         (cdr.iloc (1 . 0) "./boot/macro/library.scm" . 114699)
         (if.not.pair?.ret.const . #f)
         (cddr.iloc (1 . 0) "./boot/macro/library.scm" . 114699)
         (if.not.null?.ret.const . #f)
         (push.car.iloc (1 . 0) "./boot/macro/library.scm" . 114699)
         (const . not)
         (ret.eq? "./boot/macro/library.scm" . 114699))
       (if.true
         (call
           (push.cadr.iloc (1 . 0) "./boot/macro/library.scm" . 114699)
           (apply.iloc (2 . 0) "./boot/macro/library.scm" . 114699))
         (push)
         (ret.subr.gloc.of not "./boot/macro/library.scm" . 114699))
       (call
         (iloc.0 . 0)
         (if.false.ret)
         (push.car.iloc (1 . 0) "./boot/macro/library.scm" . 114699)
         (const . or)
         (ret.eq? "./boot/macro/library.scm" . 114699))
       (if.true
         (touch.gloc.of any1)
         (push.close
           (1 0)
           (push.iloc.0 . 0)
           (apply.iloc (3 . 0) "./boot/macro/library.scm" . 114699))
         (push.cdr.iloc (1 . 0) "./boot/macro/library.scm" . 114699)
         (apply.gloc.of any1 "./boot/macro/library.scm" . 114699))
       (call
         (iloc.0 . 0)
         (if.false.ret)
         (push.car.iloc (1 . 0) "./boot/macro/library.scm" . 114699)
         (const . and)
         (ret.eq? "./boot/macro/library.scm" . 114699))
       (if.true
         (touch.gloc.of every1)
         (push.close
           (1 0)
           (push.iloc.0 . 0)
           (apply.iloc (3 . 0) "./boot/macro/library.scm" . 114699))
         (push.cdr.iloc (1 . 0) "./boot/macro/library.scm" . 114699)
         (apply.gloc.of every1 "./boot/macro/library.scm" . 114699))
       (extend.enclose
         (2 0 . loop)
         (call
           (call
             (push.iloc.0 . 0)
             (subr.gloc.of list? 1 "./boot/macro/library.scm" . 114699)
             (if.false.ret)
             (push.iloc.0 . 1)
             (ret.subr.gloc.of list? "./boot/macro/library.scm" . 114699))
           (if.true.ret)
           (push.const . import)
           (push.const . "malformed version reference")
           (call
             (touch.gloc.of abbreviated-take-form)
             (push.iloc 5 . 0)
             (push.const . 4)
             (push.const . 8)
             (apply.gloc.of abbreviated-take-form "./boot/macro/library.scm" . 114699))
           (push)
           (push.iloc 5 . 1)
           (apply.gloc.of syntax-violation "./boot/macro/library.scm" . 114699))
         (iloc.0 . 1)
         (if.null?.ret.const . #t)
         (push.iloc.0 . 0)
         (push.subr.gloc.of length 1 "./boot/macro/library.scm" . 114699)
         (push.iloc.0 . 1)
         (push.subr.gloc.of length 1 "./boot/macro/library.scm" . 114699)
         (subr.gloc.of >= 2 "./boot/macro/library.scm" . 114699)
         (if.false.ret)
         (touch.gloc.of every2)
         (push.close
           (2 0)
           (call
             (iloc.0 . 1)
             (if.not.pair?.ret.const . #f)
             (push.cdr.iloc (0 . 1) "./boot/macro/library.scm" . 114699)
             (ret.subr.gloc.of list? "./boot/macro/library.scm" . 114699))
           (push)
           (extend . 1)
           (call
             (iloc.1 . 1)
             (if.not.pair?.ret.const . #f)
             (cdr.iloc (1 . 1) "./boot/macro/library.scm" . 114699)
             (if.not.pair?.ret.const . #f)
             (cddr.iloc (1 . 1) "./boot/macro/library.scm" . 114699)
             (ret.null? "./boot/macro/library.scm" . 114699))
           (push)
           (extend . 1)
           (call
             (iloc.0 . 0)
             (if.false.ret)
             (push.car.iloc (2 . 1) "./boot/macro/library.scm" . 114699)
             (const . not)
             (ret.eq? "./boot/macro/library.scm" . 114699))
           (if.true
             (call
               (push.iloc 2 . 0)
               (push.cadr.iloc (2 . 1) "./boot/macro/library.scm" . 114699)
               (apply.iloc (4 . 0) "./boot/macro/library.scm" . 114699))
             (push)
             (ret.subr.gloc.of not "./boot/macro/library.scm" . 114699))
           (call
             (iloc.0 . 0)
             (if.false.ret)
             (push.car.iloc (2 . 1) "./boot/macro/library.scm" . 114699)
             (const . >=)
             (if.not.eq?.ret.const . #f)
             (touch.gloc.of |exact-nonnegative-integer?`2099*|)
             (push.cadr.iloc (2 . 1) "./boot/macro/library.scm" . 114699)
             (apply.gloc.of |exact-nonnegative-integer?`2099*| "./boot/macro/library.scm" . 114699))
           (if.true
             (push.iloc 2 . 0)
             (push.cadr.iloc (2 . 1) "./boot/macro/library.scm" . 114699)
             (ret.subr.gloc.of >= "./boot/macro/library.scm" . 114699))
           (call
             (iloc.0 . 0)
             (if.false.ret)
             (push.car.iloc (2 . 1) "./boot/macro/library.scm" . 114699)
             (const . <=)
             (if.not.eq?.ret.const . #f)
             (touch.gloc.of |exact-nonnegative-integer?`2099*|)
             (push.cadr.iloc (2 . 1) "./boot/macro/library.scm" . 114699)
             (apply.gloc.of |exact-nonnegative-integer?`2099*| "./boot/macro/library.scm" . 114699))
           (if.true
             (push.iloc 2 . 0)
             (push.cadr.iloc (2 . 1) "./boot/macro/library.scm" . 114699)
             (ret.subr.gloc.of <= "./boot/macro/library.scm" . 114699))
           (call
             (iloc.1 . 0)
             (if.false.ret)
             (push.car.iloc (2 . 1) "./boot/macro/library.scm" . 114699)
             (const . and)
             (ret.eq? "./boot/macro/library.scm" . 114699))
           (if.true
             (touch.gloc.of every1)
             (push.close
               (1 0)
               (push.iloc 3 . 0)
               (push.subr.gloc.of list 1 "./boot/macro/library.scm" . 114699)
               (push.iloc.0 . 0)
               (push.subr.gloc.of list 1 "./boot/macro/library.scm" . 114699)
               (apply.iloc (5 . 0) "./boot/macro/library.scm" . 114699))
             (push.cdr.iloc (2 . 1) "./boot/macro/library.scm" . 114699)
             (apply.gloc.of every1 "./boot/macro/library.scm" . 114699))
           (call
             (iloc.1 . 0)
             (if.false.ret)
             (push.car.iloc (2 . 1) "./boot/macro/library.scm" . 114699)
             (const . or)
             (ret.eq? "./boot/macro/library.scm" . 114699))
           (if.true
             (touch.gloc.of any1)
             (push.close
               (1 0)
               (push.iloc 3 . 0)
               (push.subr.gloc.of list 1 "./boot/macro/library.scm" . 114699)
               (push.iloc.0 . 0)
               (push.subr.gloc.of list 1 "./boot/macro/library.scm" . 114699)
               (apply.iloc (5 . 0) "./boot/macro/library.scm" . 114699))
             (push.cdr.iloc (2 . 1) "./boot/macro/library.scm" . 114699)
             (apply.gloc.of any1 "./boot/macro/library.scm" . 114699))
           (call
             (touch.gloc.of |exact-nonnegative-integer?`2099*|)
             (push.iloc 2 . 1)
             (apply.gloc.of |exact-nonnegative-integer?`2099*| "./boot/macro/library.scm" . 114699))
           (if.true
             (push.iloc 2 . 0)
             (push.iloc 2 . 1)
             (ret.subr.gloc.of = "./boot/macro/library.scm" . 114699))
           (push.const . import)
           (push.const . "malformed version reference")
           (call
             (touch.gloc.of abbreviated-take-form)
             (push.iloc 8 . 0)
             (push.const . 4)
             (push.const . 8)
             (apply.gloc.of abbreviated-take-form "./boot/macro/library.scm" . 114699))
           (push)
           (push.iloc 8 . 1)
           (apply.gloc.of syntax-violation "./boot/macro/library.scm" . 114699))
         (push.iloc.0 . 0)
         (push.iloc.0 . 1)
         (push.subr.gloc.of length 1 "./boot/macro/library.scm" . 114699)
         (push.subr.gloc.of list-head 2 "./boot/macro/library.scm" . 114699)
         (push.iloc.0 . 1)
         (apply.gloc.of
           every2
           (every2
             (lambda (|c`2132*| |s`2132*|)
               (let ((|.L630`2134`2137*| (and (pair? |s`2132*|) (list? (cdr |s`2132*|)))))
                 (let ((|.L629`2134`2139*|
                         (and (pair? |s`2132*|) (pair? (cdr |s`2132*|)) (null? (cddr |s`2132*|)))))
                   (if (and |.L629`2134`2139*| (eq? (car |s`2132*|) 'not))
                       (not (|loop`2127*| |c`2132*| (cadr |s`2132*|)))
                       (if (and |.L629`2134`2139*|
                                (eq? (car |s`2132*|) '>=)
                                (|exact-nonnegative-integer?`2099*| (cadr |s`2132*|)))
                           (>= |c`2132*| (cadr |s`2132*|))
                           (if (and |.L629`2134`2139*|
                                    (eq? (car |s`2132*|) '<=)
                                    (|exact-nonnegative-integer?`2099*| (cadr |s`2132*|)))
                               (<= |c`2132*| (cadr |s`2132*|))
                               (if (and |.L630`2134`2137*| (eq? (car |s`2132*|) 'and))
                                   (every1
                                     (lambda (|e`2150*|)
                                       (|loop`2127*| (list |c`2132*|) (list |e`2150*|)))
                                     (cdr |s`2132*|))
                                   (if (and |.L630`2134`2137*| (eq? (car |s`2132*|) 'or))
                                       (any1
                                         (lambda (|e`2154*|)
                                           (|loop`2127*| (list |c`2132*|) (list |e`2154*|)))
                                         (cdr |s`2132*|))
                                       (if (|exact-nonnegative-integer?`2099*| |s`2132*|)
                                           (= |c`2132*| |s`2132*|)
                                           (syntax-violation
                                             'import
                                             "malformed version reference"
                                             (abbreviated-take-form |form`2098*| 4 8)
                                             |spec`2098*|))))))))))
             (list-head |current`2128*| (length |sub-reference`2128*|))
             |sub-reference`2128*|)))
       (push.iloc 4 . 3)
       (push.iloc 2 . 0)
       (apply.iloc (0 . 0) "./boot/macro/library.scm" . 114699))
     (push.iloc.1 . 2)
     (apply.iloc (0 . 0) "./boot/macro/library.scm" . 114699))
   (if.true.ret)
   (push.const . import)
   (push.const . "mismatch between version reference ~a and current version ~a")
   (push.iloc.0 . 2)
   (push.iloc.0 . 3)
   (push.subr.gloc.of format 3 "./boot/macro/library.scm" . 137243)
   (call
     (touch.gloc.of abbreviated-take-form)
     (push.iloc.0 . 0)
     (push.const . 4)
     (push.const . 8)
     (apply.gloc.of abbreviated-take-form "./boot/macro/library.scm" . 138267))
   (push)
   (push.iloc.0 . 1)
   (apply.gloc.of syntax-violation "./boot/macro/library.scm" . 136201))
 (set.gloc.of test-library-versions)
 (ret.const.unspec))
((close
   (1 0 . make-shield-id-table)
   (subr.gloc.of make-core-hashtable 0)
   (push)
   (subr.gloc.of make-core-hashtable 0)
   (push)
   (call
     (touch.gloc.of make-unbound)
     (apply.gloc.of make-unbound "./boot/macro/library.scm" . 142413))
   (push)
   (extend . 3)
   (call
     (extend.enclose
       (1 0 . loop)
       (iloc.0 . 0)
       (if.symbol?
         (push.iloc 2 . 1)
         (push.iloc.0 . 0)
         (push.iloc 2 . 2)
         (ret.subr.gloc.of core-hashtable-set! "./boot/macro/library.scm" . 145424))
       (iloc.0 . 0)
       (if.pair?
         (push.iloc 2 . 0)
         (push.iloc.0 . 0)
         (subr.gloc.of core-hashtable-contains? 2 "./boot/macro/library.scm" . 147476)
         (if.true.ret)
         (push.iloc 2 . 0)
         (push.iloc.0 . 0)
         (push.const . #t)
         (subr.gloc.of core-hashtable-set! 3 "./boot/macro/library.scm" . 149526)
         (call
           (push.car.iloc (0 . 0) "./boot/macro/library.scm" . 150556)
           (apply.iloc (1 . 0) "./boot/macro/library.scm" . 150550))
         (push.cdr.iloc (0 . 0) "./boot/macro/library.scm" . 151580)
         (apply.iloc (1 . 0) "./boot/macro/library.scm" . 151574))
       (push.iloc.0 . 0)
       (subr.gloc.of vector? 1 "./boot/macro/library.scm" . 152592)
       (if.true
         (push.iloc 2 . 0)
         (push.iloc.0 . 0)
         (subr.gloc.of core-hashtable-contains? 2 "./boot/macro/library.scm" . 153620)
         (if.true.ret)
         (push.iloc 2 . 0)
         (push.iloc.0 . 0)
         (push.const . #t)
         (subr.gloc.of core-hashtable-set! 3 "./boot/macro/library.scm" . 155670)
         (push.iloc.0 . 0)
         (push.subr.gloc.of vector->list 1 "./boot/macro/library.scm" . 156700)
         (apply.iloc (1 . 0) "./boot/macro/library.scm" . 156694))
       (ret.const.unspec))
     (push.iloc 2 . 0)
     (apply.iloc (0 . 0) "./boot/macro/library.scm" . 144393))
   (ret.iloc 0 . 1))
 (set.gloc.of make-shield-id-table)
 (ret.const.unspec))
((close
   (1 0)
   (push.car.iloc (0 . 0) "./boot/macro/library.scm" . 160771)
   (cadr.iloc (0 . 0) "./boot/macro/library.scm" . 160771)
   (ret.cons "./boot/macro/library.scm" . 160771))
 (set.gloc.of |.L643|)
 (close
   (1 0)
   (call
     (touch.gloc.of safe-length)
     (push.iloc.0 . 0)
     (apply.gloc.of safe-length "./boot/macro/library.scm" . 160771))
   (push)
   (push.const . 2)
   (ret.subr.gloc.of = "./boot/macro/library.scm" . 160771))
 (set.gloc.of |.L645|)
 (close
   (2 0 . parse-exports)
   (extend.enclose+
     (2 0 . loop)
     (iloc.0 . 0)
     (if.null? (push.iloc.0 . 1) (ret.subr.gloc.of reverse "./boot/macro/library.scm" . 160771))
     (call
       (iloc.0 . 0)
       (if.not.pair?.ret.const . #f)
       (push.car.iloc (0 . 0) "./boot/macro/library.scm" . 160771)
       (ret.subr.gloc.of symbol? "./boot/macro/library.scm" . 160771))
     (if.true
       (push.cdr.iloc (0 . 0) "./boot/macro/library.scm" . 160771)
       (call
         (touch.gloc.of acons)
         (push.car.iloc (0 . 0) "./boot/macro/library.scm" . 160771)
         (push.car.iloc (0 . 0) "./boot/macro/library.scm" . 160771)
         (push.iloc.0 . 1)
         (apply.gloc.of acons "./boot/macro/library.scm" . 160771))
       (push)
       (apply.iloc+ (1 . 0) "./boot/macro/library.scm" . 160771))
     (call
       (iloc.0 . 0)
       (if.not.pair?.ret.const . #f)
       (car.iloc (0 . 0) "./boot/macro/library.scm" . 160771)
       (if.not.pair?.ret.const . #f)
       (push.iloc.0 . 0)
       (push.subr.gloc.of caar 1 "./boot/macro/library.scm" . 160771)
       (const . rename)
       (ret.eq? "./boot/macro/library.scm" . 160771))
     (if.true
       (push.cdr.iloc (0 . 0) "./boot/macro/library.scm" . 160771)
       (push.iloc.0 . 0)
       (push.subr.gloc.of cdar 1 "./boot/macro/library.scm" . 160771)
       (extend . 2)
       (call
         (call
           (touch.gloc.of every1)
           (push.gloc.of |.L645|)
           (push.iloc.0 . 1)
           (apply.gloc.of every1 "./boot/macro/library.scm" . 160771))
         (if.true.ret)
         (push.const . export)
         (push.const . "malformed export spec")
         (call
           (touch.gloc.of abbreviated-take-form)
           (push.iloc 3 . 0)
           (push.const . 4)
           (push.const . 8)
           (apply.gloc.of abbreviated-take-form "./boot/macro/library.scm" . 160771))
         (push)
         (push.car.iloc (1 . 0) "./boot/macro/library.scm" . 160771)
         (apply.gloc.of syntax-violation "./boot/macro/library.scm" . 160771))
       (push.iloc.0 . 0)
       (call
         (push.gloc.of |.L643|)
         (push.iloc.0 . 1)
         (apply.gloc.of map "./boot/macro/library.scm" . 160771))
       (push)
       (push.iloc.1 . 1)
       (push.subr.gloc.of append 2 "./boot/macro/library.scm" . 160771)
       (apply.iloc+ (2 . 0) "./boot/macro/library.scm" . 160771))
     (push.const . export)
     (push.const . "malformed export spec")
     (call
       (touch.gloc.of abbreviated-take-form)
       (push.iloc 2 . 0)
       (push.const . 4)
       (push.const . 8)
       (apply.gloc.of abbreviated-take-form "./boot/macro/library.scm" . 160771))
     (push)
     (push.car.iloc (0 . 0) "./boot/macro/library.scm" . 160771)
     (apply.gloc.of syntax-violation "./boot/macro/library.scm" . 160771))
   (push.iloc.1 . 1)
   (push.const)
   (apply.iloc+ (0 . 0) "./boot/macro/library.scm" . 162823))
 (set.gloc.of parse-exports)
 (ret.const.unspec))
((close
   (1 0)
   (call
     (touch.gloc.of safe-length)
     (push.iloc.0 . 0)
     (apply.gloc.of safe-length "./boot/macro/library.scm" . 179203))
   (push)
   (push.const . 2)
   (ret.subr.gloc.of = "./boot/macro/library.scm" . 179203))
 (set.gloc.of |.L654|)
 (close
   (2 0 . parse-imports)
   (extend.unbound . 2)
   (push.close
     (3 0 . check-unbound-identifier)
     (push.close
       (1 0)
       (push.iloc.0 . 0)
       (push.iloc.1 . 0)
       (subr.gloc.of assq 2 "./boot/macro/library.scm" . 184345)
       (if.true.ret)
       (push.const . import)
       (push.const . "attempt to reference unexported identifier ~a")
       (push.iloc.0 . 0)
       (push.subr.gloc.of format 2 "./boot/macro/library.scm" . 185395)
       (call
         (touch.gloc.of abbreviated-take-form)
         (push.iloc 3 . 0)
         (push.const . 4)
         (push.const . 8)
         (apply.gloc.of abbreviated-take-form "./boot/macro/library.scm" . 185455))
       (push)
       (push.iloc.1 . 2)
       (apply.gloc.of syntax-violation "./boot/macro/library.scm" . 185369))
     (push.iloc.0 . 1)
     (apply.gloc.of for-each "./boot/macro/library.scm" . 183305))
   (push.close
     (3 0 . check-bound-identifier)
     (push.close
       (1 0)
       (push.iloc.0 . 0)
       (push.iloc.1 . 0)
       (subr.gloc.of assq 2 "./boot/macro/library.scm" . 191514)
       (if.false.ret)
       (push.const . import)
       (push.const . "duplicate import identifiers ~a")
       (push.iloc.0 . 0)
       (push.subr.gloc.of format 2 "./boot/macro/library.scm" . 192564)
       (call
         (touch.gloc.of abbreviated-take-form)
         (push.iloc 3 . 0)
         (push.const . 4)
         (push.const . 8)
         (apply.gloc.of abbreviated-take-form "./boot/macro/library.scm" . 192610))
       (push)
       (push.iloc.1 . 2)
       (apply.gloc.of syntax-violation "./boot/macro/library.scm" . 192538))
     (push.iloc.0 . 1)
     (apply.gloc.of for-each "./boot/macro/library.scm" . 190473))
   (enclose . 2)
   (extend.enclose
     (2 0 . loop)
     (call
       (iloc.0 . 0)
       (if.not.pair?.ret.const . #f)
       (car.iloc (0 . 0) "./boot/macro/library.scm" . 179203)
       (if.not.pair?.ret.const . #f)
       (push.iloc.0 . 0)
       (subr.gloc.of cdar 1 "./boot/macro/library.scm" . 179203)
       (ret.pair? "./boot/macro/library.scm" . 179203))
     (push)
     (extend . 1)
     (iloc.1 . 0)
     (if.null? (ret.iloc 1 . 1))
     (call
       (iloc.0 . 0)
       (if.false.ret)
       (push.iloc.1 . 0)
       (push.subr.gloc.of caar 1 "./boot/macro/library.scm" . 179203)
       (const . for)
       (ret.eq? "./boot/macro/library.scm" . 179203))
     (if.true
       (push.cdr.iloc (1 . 0) "./boot/macro/library.scm" . 179203)
       (call
         (push.iloc.1 . 0)
         (push.subr.gloc.of cadar 1 "./boot/macro/library.scm" . 179203)
         (push.subr.gloc.of list 1 "./boot/macro/library.scm" . 179203)
         (push.iloc.1 . 1)
         (apply.iloc (2 . 0) "./boot/macro/library.scm" . 179203))
       (push)
       (apply.iloc (2 . 0) "./boot/macro/library.scm" . 179203))
     (call
       (iloc.0 . 0)
       (if.false.ret)
       (push.iloc.1 . 0)
       (push.subr.gloc.of caar 1 "./boot/macro/library.scm" . 179203)
       (const . only)
       (ret.eq? "./boot/macro/library.scm" . 179203))
     (if.true
       (push.cdr.iloc (1 . 0) "./boot/macro/library.scm" . 179203)
       (push.iloc.1 . 0)
       (push.subr.gloc.of cddar 1 "./boot/macro/library.scm" . 179203)
       (extend . 2)
       (call
         (push.iloc 2 . 0)
         (push.subr.gloc.of cadar 1 "./boot/macro/library.scm" . 179203)
         (push.subr.gloc.of list 1 "./boot/macro/library.scm" . 179203)
         (push.const)
         (apply.iloc (3 . 0) "./boot/macro/library.scm" . 179203))
       (push)
       (extend . 1)
       (call
         (push.iloc.0 . 0)
         (push.iloc.1 . 1)
         (push.car.iloc (3 . 0) "./boot/macro/library.scm" . 179203)
         (apply.iloc (5 . 0) "./boot/macro/library.scm" . 179203))
       (push.iloc.1 . 0)
       (call
         (push.close
           (1 0)
           (push.car.iloc (0 . 0) "./boot/macro/library.scm" . 179203)
           (push.iloc 2 . 1)
           (ret.subr.gloc.of memq "./boot/macro/library.scm" . 179203))
         (push.iloc.0 . 0)
         (apply.gloc.of filter "./boot/macro/library.scm" . 179203))
       (push)
       (push.iloc 3 . 1)
       (push.subr.gloc.of append 2 "./boot/macro/library.scm" . 179203)
       (apply.iloc (4 . 0) "./boot/macro/library.scm" . 179203))
     (call
       (iloc.0 . 0)
       (if.false.ret)
       (push.iloc.1 . 0)
       (push.subr.gloc.of caar 1 "./boot/macro/library.scm" . 179203)
       (const . except)
       (ret.eq? "./boot/macro/library.scm" . 179203))
     (if.true
       (push.cdr.iloc (1 . 0) "./boot/macro/library.scm" . 179203)
       (push.iloc.1 . 0)
       (push.subr.gloc.of cddar 1 "./boot/macro/library.scm" . 179203)
       (extend . 2)
       (call
         (push.iloc 2 . 0)
         (push.subr.gloc.of cadar 1 "./boot/macro/library.scm" . 179203)
         (push.subr.gloc.of list 1 "./boot/macro/library.scm" . 179203)
         (push.const)
         (apply.iloc (3 . 0) "./boot/macro/library.scm" . 179203))
       (push)
       (extend . 1)
       (call
         (push.iloc.0 . 0)
         (push.iloc.1 . 1)
         (push.car.iloc (3 . 0) "./boot/macro/library.scm" . 179203)
         (apply.iloc (5 . 0) "./boot/macro/library.scm" . 179203))
       (push.iloc.1 . 0)
       (call
         (push.close
           (1 0)
           (push.car.iloc (0 . 0) "./boot/macro/library.scm" . 179203)
           (push.iloc 2 . 1)
           (push.subr.gloc.of memq 2 "./boot/macro/library.scm" . 179203)
           (ret.subr.gloc.of not "./boot/macro/library.scm" . 179203))
         (push.iloc.0 . 0)
         (apply.gloc.of filter "./boot/macro/library.scm" . 179203))
       (push)
       (push.iloc 3 . 1)
       (push.subr.gloc.of append 2 "./boot/macro/library.scm" . 179203)
       (apply.iloc (4 . 0) "./boot/macro/library.scm" . 179203))
     (call
       (iloc.0 . 0)
       (if.false.ret)
       (push.iloc.1 . 0)
       (push.subr.gloc.of caar 1 "./boot/macro/library.scm" . 179203)
       (const . rename)
       (ret.eq? "./boot/macro/library.scm" . 179203))
     (if.true
       (push.cdr.iloc (1 . 0) "./boot/macro/library.scm" . 179203)
       (push.iloc.1 . 0)
       (push.subr.gloc.of cddar 1 "./boot/macro/library.scm" . 179203)
       (extend . 2)
       (call
         (push.iloc 2 . 0)
         (push.subr.gloc.of cadar 1 "./boot/macro/library.scm" . 179203)
         (push.subr.gloc.of list 1 "./boot/macro/library.scm" . 179203)
         (push.const)
         (apply.iloc (3 . 0) "./boot/macro/library.scm" . 179203))
       (push)
       (extend . 1)
       (call
         (call
           (touch.gloc.of every1)
           (push.gloc.of |.L654|)
           (push.iloc.1 . 1)
           (apply.gloc.of every1 "./boot/macro/library.scm" . 179203))
         (if.true.ret)
         (push.const . import)
         (push.const . "malformed import set")
         (call
           (touch.gloc.of abbreviated-take-form)
           (push.iloc 6 . 0)
           (push.const . 4)
           (push.const . 8)
           (apply.gloc.of abbreviated-take-form "./boot/macro/library.scm" . 179203))
         (push)
         (push.car.iloc (3 . 0) "./boot/macro/library.scm" . 179203)
         (apply.gloc.of syntax-violation "./boot/macro/library.scm" . 179203))
       (call
         (call
           (call
             (touch.gloc.of unique-id-list?)
             (call
               (push.gloc.of car)
               (push.iloc.1 . 1)
               (apply.gloc.of map "./boot/macro/library.scm" . 179203))
             (push)
             (apply.gloc.of unique-id-list? "./boot/macro/library.scm" . 179203))
           (if.false.ret)
           (touch.gloc.of unique-id-list?)
           (call
             (push.gloc.of cadr)
             (push.iloc.1 . 1)
             (apply.gloc.of map "./boot/macro/library.scm" . 179203))
           (push)
           (apply.gloc.of unique-id-list? "./boot/macro/library.scm" . 179203))
         (if.true.ret)
         (push.const . import)
         (push.const . "duplicate identifers in rename specs")
         (call
           (touch.gloc.of abbreviated-take-form)
           (push.iloc 6 . 0)
           (push.const . 4)
           (push.const . 8)
           (apply.gloc.of abbreviated-take-form "./boot/macro/library.scm" . 179203))
         (push)
         (push.car.iloc (3 . 0) "./boot/macro/library.scm" . 179203)
         (apply.gloc.of syntax-violation "./boot/macro/library.scm" . 179203))
       (call
         (push.iloc.0 . 0)
         (call
           (push.gloc.of cadr)
           (push.iloc.1 . 1)
           (apply.gloc.of map "./boot/macro/library.scm" . 179203))
         (push)
         (push.car.iloc (3 . 0) "./boot/macro/library.scm" . 179203)
         (apply.iloc (5 . 1) "./boot/macro/library.scm" . 179203))
       (call
         (push.iloc.0 . 0)
         (call
           (push.gloc.of car)
           (push.iloc.1 . 1)
           (apply.gloc.of map "./boot/macro/library.scm" . 179203))
         (push)
         (push.car.iloc (3 . 0) "./boot/macro/library.scm" . 179203)
         (apply.iloc (5 . 0) "./boot/macro/library.scm" . 179203))
       (push.iloc.1 . 0)
       (call
         (push.close
           (1 0)
           (push.car.iloc (0 . 0) "./boot/macro/library.scm" . 179203)
           (push.iloc 2 . 1)
           (push.subr.gloc.of assq 2 "./boot/macro/library.scm" . 179203)
           (extend . 1)
           (iloc.0 . 0)
           (if.true
             (push.cadr.iloc (0 . 0) "./boot/macro/library.scm" . 179203)
             (cdr.iloc (1 . 0) "./boot/macro/library.scm" . 179203)
             (ret.cons "./boot/macro/library.scm" . 179203))
           (ret.iloc 1 . 0))
         (push.iloc.0 . 0)
         (apply.gloc.of
           map
           (map (lambda (|e`2236*|)
                  (let ((|.L651`2238*| (assq (car |e`2236*|) |alist`2230*|)))
                    (if |.L651`2238*| (cons (cadr |.L651`2238*|) (cdr |e`2236*|)) |e`2236*|)))
                |bindings`2232*|)))
       (push)
       (push.iloc 3 . 1)
       (push.subr.gloc.of
         append
         2
         (append
           (map (lambda (|e`2236*|)
                  (let ((|.L651`2238*| (assq (car |e`2236*|) |alist`2230*|)))
                    (if |.L651`2238*| (cons (cadr |.L651`2238*|) (cdr |e`2236*|)) |e`2236*|)))
                |bindings`2232*|)
           |imports`2207*|))
       (apply.iloc
         (4 . 0)
         (|loop`2206*|
           |more`2230*|
           (append
             (map (lambda (|e`2236*|)
                    (let ((|.L651`2238*| (assq (car |e`2236*|) |alist`2230*|)))
                      (if |.L651`2238*| (cons (cadr |.L651`2238*|) (cdr |e`2236*|)) |e`2236*|)))
                  |bindings`2232*|)
             |imports`2207*|))))
     (call
       (iloc.0 . 0)
       (if.false.ret)
       (push.iloc.1 . 0)
       (subr.gloc.of cddar 1 "./boot/macro/library.scm" . 179203)
       (if.not.pair?.ret.const . #f)
       (push.iloc.1 . 0)
       (subr.gloc.of cdddar 1 "./boot/macro/library.scm" . 179203)
       (if.not.null?.ret.const . #f)
       (push.iloc.1 . 0)
       (push.subr.gloc.of caar 1 "./boot/macro/library.scm" . 179203)
       (const . prefix)
       (ret.eq? "./boot/macro/library.scm" . 179203))
     (if.true
       (push.iloc.1 . 0)
       (push.subr.gloc.of caddar 1 "./boot/macro/library.scm" . 179203)
       (extend . 1)
       (push.cdr.iloc (2 . 0) "./boot/macro/library.scm" . 179203)
       (call
         (push.close
           (1 0)
           (push.const . "~a~a")
           (push.iloc.1 . 0)
           (push.car.iloc (0 . 0) "./boot/macro/library.scm" . 179203)
           (push.subr.gloc.of format 3 "./boot/macro/library.scm" . 179203)
           (push.subr.gloc.of string->symbol 1 "./boot/macro/library.scm" . 179203)
           (cdr.iloc (0 . 0) "./boot/macro/library.scm" . 179203)
           (ret.cons "./boot/macro/library.scm" . 179203))
         (call
           (push.iloc 2 . 0)
           (push.subr.gloc.of cadar 1 "./boot/macro/library.scm" . 179203)
           (push.subr.gloc.of list 1 "./boot/macro/library.scm" . 179203)
           (push.const)
           (apply.iloc (3 . 0) "./boot/macro/library.scm" . 179203))
         (push)
         (apply.gloc.of map "./boot/macro/library.scm" . 179203))
       (push)
       (push.iloc 2 . 1)
       (push.subr.gloc.of append 2 "./boot/macro/library.scm" . 179203)
       (apply.iloc (3 . 0) "./boot/macro/library.scm" . 179203))
     (iloc.1 . 0)
     (if.pair?
       (push.cdr.iloc (1 . 0) "./boot/macro/library.scm" . 179203)
       (extend . 1)
       (call
         (touch.gloc.of flatten-library-reference)
         (push.iloc 5 . 0)
         (push.car.iloc (2 . 0) "./boot/macro/library.scm" . 179203)
         (apply.gloc.of flatten-library-reference "./boot/macro/library.scm" . 179203))
       (push)
       (extend . 1)
       (call
         (touch.gloc.of library-reference->name)
         (push.iloc 6 . 0)
         (push.iloc.0 . 0)
         (apply.gloc.of library-reference->name "./boot/macro/library.scm" . 179203))
       (push)
       (call
         (touch.gloc.of library-reference->version)
         (push.iloc 6 . 0)
         (push.iloc.0 . 0)
         (apply.gloc.of library-reference->version "./boot/macro/library.scm" . 179203))
       (push)
       (extend . 2)
       (call
         (push.iloc.0 . 0)
         (apply.gloc.of |.require-scheme-library| "./boot/macro/library.scm" . 179203))
       (call
         (touch.gloc.of library-name->id)
         (push.iloc 7 . 0)
         (push.iloc.0 . 0)
         (apply.gloc.of library-name->id "./boot/macro/library.scm" . 179203))
       (push)
       (extend . 1)
       (call
         (call
           (iloc.1 . 1)
           (if.false.ret)
           (call
             (touch.gloc.of scheme-library-versions)
             (apply.gloc.of scheme-library-versions "./boot/macro/library.scm" . 179203))
           (push)
           (push.iloc.0 . 0)
           (push.const . #f)
           (ret.subr.gloc.of core-hashtable-ref "./boot/macro/library.scm" . 179203))
         (push)
         (extend . 1)
         (iloc.0 . 0)
         (if.true
           (touch.gloc.of test-library-versions)
           (push.iloc 9 . 0)
           (push.iloc 3 . 0)
           (push.iloc 2 . 1)
           (push.iloc.0 . 0)
           (apply.gloc.of test-library-versions "./boot/macro/library.scm" . 179203))
         (ret.const.unspec))
       (push.iloc 3 . 0)
       (call
         (call (apply.gloc.of scheme-library-exports "./boot/macro/library.scm" . 179203))
         (push)
         (push.iloc.0 . 0)
         (push.const . #f)
         (push.subr.gloc.of core-hashtable-ref 3 "./boot/macro/library.scm" . 179203)
         (extend . 1)
         (iloc.0 . 0)
         (if.true
           (push.iloc.0 . 0)
           (push.iloc 6 . 1)
           (ret.subr.gloc.of append "./boot/macro/library.scm" . 179203))
         (push.const . import)
         (push.const . "attempt to import undefined library ~s")
         (push.iloc 2 . 0)
         (push.subr.gloc.of format 2 "./boot/macro/library.scm" . 179203)
         (call
           (touch.gloc.of abbreviated-take-form)
           (push.iloc 9 . 0)
           (push.const . 4)
           (push.const . 8)
           (apply.gloc.of abbreviated-take-form "./boot/macro/library.scm" . 179203))
         (push)
         (apply.gloc.of syntax-violation "./boot/macro/library.scm" . 179203))
       (push)
       (apply.iloc
         (6 . 0)
         (|loop`2206*|
           |more`2246*|
           (let ((|.L653`2258*|
                   (core-hashtable-ref (scheme-library-exports) |library-id`2252*| #f)))
             (if |.L653`2258*|
                 (append |.L653`2258*| |imports`2207*|)
                 (syntax-violation
                   'import
                   (format "attempt to import undefined library ~s" |name`2250*|)
                   (abbreviated-take-form |form`2194*| 4 8)))))))
     (push.const . import)
     (push.const . "malformed import set")
     (call
       (touch.gloc.of abbreviated-take-form)
       (push.iloc 4 . 0)
       (push.const . 4)
       (push.const . 8)
       (apply.gloc.of abbreviated-take-form "./boot/macro/library.scm" . 179203))
     (push)
     (push.car.iloc (1 . 0) "./boot/macro/library.scm" . 179203)
     (apply.gloc.of syntax-violation "./boot/macro/library.scm" . 179203))
   (push.iloc 2 . 1)
   (push.const)
   (apply.iloc (0 . 0) "./boot/macro/library.scm" . 196615))
 (set.gloc.of parse-imports)
 (ret.const.unspec))
((close
   (2 0 . parse-depends)
   (extend.enclose+
     (2 0 . loop)
     (call
       (iloc.0 . 0)
       (if.not.pair?.ret.const . #f)
       (car.iloc (0 . 0) "./boot/macro/library.scm" . 258055)
       (if.not.pair?.ret.const . #f)
       (push.iloc.0 . 0)
       (subr.gloc.of cdar 1 "./boot/macro/library.scm" . 258055)
       (ret.pair? "./boot/macro/library.scm" . 258055))
     (push)
     (extend . 1)
     (iloc.1 . 0)
     (if.null? (ret.iloc 1 . 1))
     (call
       (iloc.0 . 0)
       (if.false.ret)
       (push.iloc.1 . 0)
       (push.subr.gloc.of caar 1 "./boot/macro/library.scm" . 258055)
       (const . for)
       (ret.eq? "./boot/macro/library.scm" . 258055))
     (if.true
       (push.cdr.iloc (1 . 0) "./boot/macro/library.scm" . 258055)
       (call
         (push.iloc.1 . 0)
         (push.subr.gloc.of cadar 1 "./boot/macro/library.scm" . 258055)
         (push.subr.gloc.of list 1 "./boot/macro/library.scm" . 258055)
         (push.iloc.1 . 1)
         (apply.iloc+ (2 . 0) "./boot/macro/library.scm" . 258055))
       (push)
       (apply.iloc+ (2 . 0) "./boot/macro/library.scm" . 258055))
     (call
       (iloc.0 . 0)
       (if.false.ret)
       (push.iloc.1 . 0)
       (push.subr.gloc.of caar 1 "./boot/macro/library.scm" . 258055)
       (const . only)
       (ret.eq? "./boot/macro/library.scm" . 258055))
     (if.true
       (push.cdr.iloc (1 . 0) "./boot/macro/library.scm" . 258055)
       (call
         (push.iloc.1 . 0)
         (push.subr.gloc.of cadar 1 "./boot/macro/library.scm" . 258055)
         (push.subr.gloc.of list 1 "./boot/macro/library.scm" . 258055)
         (push.iloc.1 . 1)
         (apply.iloc+ (2 . 0) "./boot/macro/library.scm" . 258055))
       (push)
       (apply.iloc+ (2 . 0) "./boot/macro/library.scm" . 258055))
     (call
       (iloc.0 . 0)
       (if.false.ret)
       (push.iloc.1 . 0)
       (push.subr.gloc.of caar 1 "./boot/macro/library.scm" . 258055)
       (const . except)
       (ret.eq? "./boot/macro/library.scm" . 258055))
     (if.true
       (push.cdr.iloc (1 . 0) "./boot/macro/library.scm" . 258055)
       (call
         (push.iloc.1 . 0)
         (push.subr.gloc.of cadar 1 "./boot/macro/library.scm" . 258055)
         (push.subr.gloc.of list 1 "./boot/macro/library.scm" . 258055)
         (push.iloc.1 . 1)
         (apply.iloc+ (2 . 0) "./boot/macro/library.scm" . 258055))
       (push)
       (apply.iloc+ (2 . 0) "./boot/macro/library.scm" . 258055))
     (call
       (iloc.0 . 0)
       (if.false.ret)
       (push.iloc.1 . 0)
       (push.subr.gloc.of caar 1 "./boot/macro/library.scm" . 258055)
       (const . rename)
       (ret.eq? "./boot/macro/library.scm" . 258055))
     (if.true
       (push.cdr.iloc (1 . 0) "./boot/macro/library.scm" . 258055)
       (call
         (push.iloc.1 . 0)
         (push.subr.gloc.of cadar 1 "./boot/macro/library.scm" . 258055)
         (push.subr.gloc.of list 1 "./boot/macro/library.scm" . 258055)
         (push.iloc.1 . 1)
         (apply.iloc+ (2 . 0) "./boot/macro/library.scm" . 258055))
       (push)
       (apply.iloc+ (2 . 0) "./boot/macro/library.scm" . 258055))
     (call
       (iloc.0 . 0)
       (if.false.ret)
       (push.iloc.1 . 0)
       (subr.gloc.of cddar 1 "./boot/macro/library.scm" . 258055)
       (if.not.pair?.ret.const . #f)
       (push.iloc.1 . 0)
       (subr.gloc.of cdddar 1 "./boot/macro/library.scm" . 258055)
       (if.not.null?.ret.const . #f)
       (push.iloc.1 . 0)
       (push.subr.gloc.of caar 1 "./boot/macro/library.scm" . 258055)
       (const . prefix)
       (ret.eq? "./boot/macro/library.scm" . 258055))
     (if.true
       (push.cdr.iloc (1 . 0) "./boot/macro/library.scm" . 258055)
       (call
         (push.iloc.1 . 0)
         (push.subr.gloc.of cadar 1 "./boot/macro/library.scm" . 258055)
         (push.subr.gloc.of list 1 "./boot/macro/library.scm" . 258055)
         (push.iloc.1 . 1)
         (apply.iloc+ (2 . 0) "./boot/macro/library.scm" . 258055))
       (push)
       (apply.iloc+ (2 . 0) "./boot/macro/library.scm" . 258055))
     (iloc.1 . 0)
     (if.pair?
       (push.cdr.iloc (1 . 0) "./boot/macro/library.scm" . 258055)
       (call
         (touch.gloc.of library-reference->name)
         (push.iloc 3 . 0)
         (call
           (touch.gloc.of flatten-library-reference)
           (push.iloc 3 . 0)
           (push.car.iloc (1 . 0) "./boot/macro/library.scm" . 258055)
           (apply.gloc.of flatten-library-reference "./boot/macro/library.scm" . 258055))
         (push)
         (apply.gloc.of library-reference->name "./boot/macro/library.scm" . 258055))
       (push)
       (iloc.1 . 1)
       (push.cons)
       (apply.iloc+ (2 . 0) "./boot/macro/library.scm" . 258055))
     (push.const . import)
     (push.const . "malformed import set")
     (call
       (touch.gloc.of abbreviated-take-form)
       (push.iloc 3 . 0)
       (push.const . 4)
       (push.const . 8)
       (apply.gloc.of abbreviated-take-form "./boot/macro/library.scm" . 258055))
     (push)
     (push.car.iloc (1 . 0) "./boot/macro/library.scm" . 258055)
     (apply.gloc.of syntax-violation "./boot/macro/library.scm" . 258055))
   (push.iloc.1 . 1)
   (push.const)
   (apply.iloc+ (0 . 0) "./boot/macro/library.scm" . 258055))
 (set.gloc.of parse-depends)
 (ret.const.unspec))
((close
   (4 0 . check-duplicate-definition)
   (call
     (touch.gloc.of unique-id-list?)
     (call
       (push.gloc.of car)
       (push.iloc.0 . 3)
       (apply.gloc.of map "./boot/macro/library.scm" . 279578))
     (push)
     (apply.gloc.of unique-id-list? "./boot/macro/library.scm" . 279561))
   (if.true.ret)
   (call
     (touch.gloc.of find-duplicates)
     (call
       (push.gloc.of car)
       (push.iloc.0 . 3)
       (apply.gloc.of map "./boot/macro/library.scm" . 280612))
     (push)
     (apply.gloc.of find-duplicates "./boot/macro/library.scm" . 280595))
   (push)
   (extend . 1)
   (push.iloc.0 . 0)
   (push.iloc.1 . 1)
   (push.subr.gloc.of assq 2 "./boot/macro/library.scm" . 281618)
   (extend . 1)
   (iloc.0 . 0)
   (if.true
     (push.iloc.1 . 0)
     (push.iloc 2 . 1)
     (push.subr.gloc.of reverse 1 "./boot/macro/library.scm" . 283690)
     (push.subr.gloc.of assq 2 "./boot/macro/library.scm" . 283681)
     (extend . 1)
     (push.iloc.1 . 0)
     (iloc.0 . 0)
     (if.eq?
       (push.iloc 2 . 0)
       (push.iloc 3 . 2)
       (push.subr.gloc.of assq 2 "./boot/macro/library.scm" . 285739)
       (extend . 1)
       (push.iloc 4 . 0)
       (push.const . "duplicate definitions")
       (call
         (touch.gloc.of annotate)
         (push.const . define-syntax)
         (push.car.iloc (0 . 0) "./boot/macro/library.scm" . 287824)
         (push.const ...)
         (push.subr.gloc.of |.cons*| 3 "./boot/macro/library.scm" . 287797)
         (push.iloc.0 . 0)
         (apply.gloc.of annotate "./boot/macro/library.scm" . 287797))
       (push)
       (call
         (touch.gloc.of annotate)
         (push.const . define)
         (iloc 2 . 0)
         (push.cons)
         (push.iloc 2 . 0)
         (apply.gloc.of annotate "./boot/macro/library.scm" . 288821))
       (push)
       (apply.gloc.of syntax-violation "./boot/macro/library.scm" . 286755))
     (push.iloc 3 . 0)
     (push.const . "duplicate definitions")
     (call
       (touch.gloc.of annotate)
       (push.const . define)
       (iloc.1 . 0)
       (push.cons)
       (push.iloc.1 . 0)
       (apply.gloc.of annotate "./boot/macro/library.scm" . 291891))
     (push)
     (call
       (touch.gloc.of annotate)
       (push.const . define)
       (iloc.0 . 0)
       (push.cons)
       (push.iloc.0 . 0)
       (apply.gloc.of annotate "./boot/macro/library.scm" . 292915))
     (push)
     (apply.gloc.of syntax-violation "./boot/macro/library.scm" . 290849))
   (push.iloc.1 . 0)
   (push.iloc 2 . 2)
   (push.subr.gloc.of assq 2 "./boot/macro/library.scm" . 293906)
   (extend . 1)
   (iloc.0 . 0)
   (if.true
     (push.iloc 2 . 0)
     (push.iloc 3 . 2)
     (push.subr.gloc.of reverse 1 "./boot/macro/library.scm" . 295978)
     (push.subr.gloc.of assq 2 "./boot/macro/library.scm" . 295969)
     (extend . 1)
     (push.iloc.1 . 0)
     (iloc.0 . 0)
     (if.eq?
       (push.iloc 3 . 0)
       (push.iloc 4 . 1)
       (push.subr.gloc.of assq 2 "./boot/macro/library.scm" . 298027)
       (extend . 1)
       (push.iloc 5 . 0)
       (push.const . "duplicate definitions")
       (call
         (touch.gloc.of annotate)
         (push.const . define-syntax)
         (push.car.iloc (2 . 0) "./boot/macro/library.scm" . 300112)
         (push.const ...)
         (push.subr.gloc.of |.cons*| 3 "./boot/macro/library.scm" . 300085)
         (push.iloc 2 . 0)
         (apply.gloc.of annotate "./boot/macro/library.scm" . 300085))
       (push)
       (call
         (touch.gloc.of annotate)
         (push.const . define)
         (iloc.0 . 0)
         (push.cons)
         (push.iloc.0 . 0)
         (apply.gloc.of annotate "./boot/macro/library.scm" . 301109))
       (push)
       (apply.gloc.of syntax-violation "./boot/macro/library.scm" . 299043))
     (push.iloc 4 . 0)
     (push.const . "duplicate definitions")
     (call
       (touch.gloc.of annotate)
       (push.const . define-syntax)
       (push.car.iloc (1 . 0) "./boot/macro/library.scm" . 304206)
       (push.const ...)
       (push.subr.gloc.of |.cons*| 3 "./boot/macro/library.scm" . 304179)
       (push.iloc.1 . 0)
       (apply.gloc.of annotate "./boot/macro/library.scm" . 304179))
     (push)
     (call
       (touch.gloc.of annotate)
       (push.const . define-syntax)
       (push.car.iloc (0 . 0) "./boot/macro/library.scm" . 305230)
       (push.const ...)
       (push.subr.gloc.of |.cons*| 3 "./boot/macro/library.scm" . 305203)
       (push.iloc.0 . 0)
       (apply.gloc.of annotate "./boot/macro/library.scm" . 305203))
     (push)
     (apply.gloc.of syntax-violation "./boot/macro/library.scm" . 303137))
   (push.iloc 3 . 0)
   (push.const . "duplicate definitions")
   (push.iloc 2 . 0)
   (apply.gloc.of syntax-violation "./boot/macro/library.scm" . 307219))
 (set.gloc.of check-duplicate-definition)
 (ret.const.unspec))
((close
   (1 0 . permute-env)
   (touch.gloc.of |loop`2323*|)
   (push.iloc.0 . 0)
   (push.subr.gloc.of core-hashtable->alist 1 "./boot/macro/library.scm" . 314393)
   (push.const)
   (push.const)
   (apply.gloc.of |loop`2323*| "./boot/macro/library.scm" . 315403))
 (set.gloc.of |permute-env`2317*|)
 (close
   (3 0 . loop)
   (iloc.0 . 0)
   (if.null?
     (push.iloc.0 . 1)
     (push.iloc.0 . 2)
     (ret.subr.gloc.of append "./boot/macro/library.scm" . 316434))
   (call
     (touch.gloc.of unbound?)
     (push.iloc.0 . 0)
     (push.subr.gloc.of cdar 1 "./boot/macro/library.scm" . 317468)
     (apply.gloc.of unbound? "./boot/macro/library.scm" . 317458))
   (if.true
     (touch.gloc.of |loop`2323*|)
     (push.cdr.iloc (0 . 0) "./boot/macro/library.scm" . 318488)
     (push.iloc.0 . 1)
     (push.car.iloc (0 . 0) "./boot/macro/library.scm" . 318511)
     (iloc.0 . 2)
     (push.cons)
     (apply.gloc.of |loop`2323*| "./boot/macro/library.scm" . 318482))
   (touch.gloc.of |loop`2323*|)
   (push.cdr.iloc (0 . 0) "./boot/macro/library.scm" . 320536)
   (push.car.iloc (0 . 0) "./boot/macro/library.scm" . 320552)
   (iloc.0 . 1)
   (push.cons)
   (push.iloc.0 . 2)
   (apply.gloc.of |loop`2323*| "./boot/macro/library.scm" . 320530))
 (set.gloc.of |loop`2323*|)
 (close
   (2 0 . expand-library)
   (call
     (iloc.0 . 0)
     (if.not.pair?.ret.const . #f)
     (cdr.iloc (0 . 0) "./boot/macro/library.scm" . 322565)
     (if.not.pair?.ret.const . #f)
     (cddr.iloc (0 . 0) "./boot/macro/library.scm" . 322565)
     (if.not.pair?.ret.const . #f)
     (push.iloc.0 . 0)
     (subr.gloc.of caddr 1 "./boot/macro/library.scm" . 322565)
     (if.not.pair?.ret.const . #f)
     (push.iloc.0 . 0)
     (subr.gloc.of cdddr 1 "./boot/macro/library.scm" . 322565)
     (if.not.pair?.ret.const . #f)
     (push.iloc.0 . 0)
     (subr.gloc.of cadddr 1 "./boot/macro/library.scm" . 322565)
     (if.not.pair?.ret.const . #f)
     (push.iloc.0 . 0)
     (push.subr.gloc.of cdaddr 1 "./boot/macro/library.scm" . 322565)
     (subr.gloc.of list? 1 "./boot/macro/library.scm" . 322565)
     (if.false.ret)
     (push.iloc.0 . 0)
     (push.subr.gloc.of cadddr 1 "./boot/macro/library.scm" . 322565)
     (push.subr.gloc.of cdr 1 "./boot/macro/library.scm" . 322565)
     (subr.gloc.of list? 1 "./boot/macro/library.scm" . 322565)
     (if.false.ret)
     (push.iloc.0 . 0)
     (push.subr.gloc.of cddddr 1 "./boot/macro/library.scm" . 322565)
     (subr.gloc.of list? 1 "./boot/macro/library.scm" . 322565)
     (if.false.ret)
     (push.iloc.0 . 0)
     (push.subr.gloc.of caaddr 1 "./boot/macro/library.scm" . 322565)
     (const . export)
     (if.not.eq?.ret.const . #f)
     (push.iloc.0 . 0)
     (push.subr.gloc.of cadddr 1 "./boot/macro/library.scm" . 322565)
     (push.subr.gloc.of car 1 "./boot/macro/library.scm" . 322565)
     (const . import)
     (ret.eq? "./boot/macro/library.scm" . 322565))
   (if.true
     (push.iloc.0 . 0)
     (push.subr.gloc.of cddddr 1 "./boot/macro/library.scm" . 322565)
     (push.iloc.0 . 0)
     (push.subr.gloc.of cadddr 1 "./boot/macro/library.scm" . 322565)
     (push.subr.gloc.of cdr 1 "./boot/macro/library.scm" . 322565)
     (push.iloc.0 . 0)
     (push.subr.gloc.of cdaddr 1 "./boot/macro/library.scm" . 322565)
     (push.cadr.iloc (0 . 0) "./boot/macro/library.scm" . 322565)
     (extend . 4)
     (call
       (touch.gloc.of library-name->id)
       (push.iloc.1 . 0)
       (push.iloc.0 . 3)
       (apply.gloc.of library-name->id "./boot/macro/library.scm" . 322565))
     (push)
     (call
       (touch.gloc.of library-name->version)
       (push.iloc.1 . 0)
       (push.iloc.0 . 3)
       (apply.gloc.of library-name->version "./boot/macro/library.scm" . 322565))
     (push)
     (extend . 2)
     (call
       (iloc.0 . 1)
       (if.false.ret)
       (call
         (touch.gloc.of scheme-library-versions)
         (apply.gloc.of scheme-library-versions "./boot/macro/library.scm" . 322565))
       (push)
       (push.iloc.0 . 0)
       (push.iloc.0 . 1)
       (ret.subr.gloc.of core-hashtable-set! "./boot/macro/library.scm" . 322565))
     (push.const . #f)
     (subr.gloc.of make-core-hashtable 0)
     (push)
     (extend . 2)
     (push.close
       (0 0)
       (call
         (touch.gloc.of current-include-files)
         (apply.gloc.of current-include-files "./boot/macro/library.scm" . 322565))
       (set.iloc (1 . 0) "./boot/macro/library.scm" . 322565)
       (touch.gloc.of current-include-files)
       (push.iloc.1 . 1)
       (apply.gloc.of current-include-files "./boot/macro/library.scm" . 322565))
     (push.close
       (0 0)
       (call
         (call
           (touch.gloc.of parse-exports)
           (push.iloc 4 . 0)
           (push.iloc 3 . 2)
           (apply.gloc.of parse-exports "./boot/macro/library.scm" . 322565))
         (push)
         (call
           (touch.gloc.of parse-imports)
           (push.iloc 4 . 0)
           (push.iloc 3 . 1)
           (apply.gloc.of parse-imports "./boot/macro/library.scm" . 322565))
         (push)
         (call
           (touch.gloc.of parse-depends)
           (push.iloc 4 . 0)
           (push.iloc 3 . 1)
           (apply.gloc.of parse-depends "./boot/macro/library.scm" . 322565))
         (push)
         (subr.gloc.of make-core-hashtable 0)
         (push)
         (subr.gloc.of make-core-hashtable 0)
         (push)
         (subr.gloc.of make-core-hashtable 0)
         (push)
         (extend . 6)
         (call
           (push.close
             (1 0)
             (call
               (push.iloc.1 . 5)
               (push.cdr.iloc (0 . 0) "./boot/macro/library.scm" . 322565)
               (push.const . #f)
               (subr.gloc.of core-hashtable-ref 3 "./boot/macro/library.scm" . 322565)
               (if.false.ret)
               (push.const . library)
               (push.const . "duplicate export identifiers")
               (call
                 (touch.gloc.of abbreviated-take-form)
                 (push.iloc 6 . 0)
                 (push.const . 4)
                 (push.const . 8)
                 (apply.gloc.of abbreviated-take-form "./boot/macro/library.scm" . 322565))
               (push)
               (push.cdr.iloc (0 . 0) "./boot/macro/library.scm" . 322565)
               (apply.gloc.of syntax-violation "./boot/macro/library.scm" . 322565))
             (push.iloc.1 . 5)
             (push.cdr.iloc (0 . 0) "./boot/macro/library.scm" . 322565)
             (push.const . #t)
             (subr.gloc.of core-hashtable-set! 3 "./boot/macro/library.scm" . 322565)
             (push.iloc.1 . 3)
             (push.car.iloc (0 . 0) "./boot/macro/library.scm" . 322565)
             (push.const . #t)
             (ret.subr.gloc.of core-hashtable-set! "./boot/macro/library.scm" . 322565))
           (push.iloc.0 . 0)
           (apply.gloc.of for-each "./boot/macro/library.scm" . 322565))
         (call
           (push.close
             (1 0)
             (push.iloc.1 . 3)
             (push.car.iloc (0 . 0) "./boot/macro/library.scm" . 322565)
             (push.const . #t)
             (subr.gloc.of core-hashtable-set! 3 "./boot/macro/library.scm" . 322565)
             (push.iloc.1 . 4)
             (push.car.iloc (0 . 0) "./boot/macro/library.scm" . 322565)
             (push.const . #f)
             (push.subr.gloc.of core-hashtable-ref 3 "./boot/macro/library.scm" . 322565)
             (extend . 1)
             (iloc.0 . 0)
             (if.true
               (push.iloc.0 . 0)
               (cdr.iloc (1 . 0) "./boot/macro/library.scm" . 322565)
               (if.eq?.ret.const . #t)
               (push.const . library)
               (push.const . "duplicate import identifiers")
               (call
                 (touch.gloc.of abbreviated-take-form)
                 (push.iloc 7 . 0)
                 (push.const . 4)
                 (push.const . 8)
                 (apply.gloc.of abbreviated-take-form "./boot/macro/library.scm" . 322565))
               (push)
               (push.car.iloc (1 . 0) "./boot/macro/library.scm" . 322565)
               (apply.gloc.of syntax-violation "./boot/macro/library.scm" . 322565))
             (push.iloc 2 . 4)
             (push.car.iloc (1 . 0) "./boot/macro/library.scm" . 322565)
             (push.cdr.iloc (1 . 0) "./boot/macro/library.scm" . 322565)
             (ret.subr.gloc.of core-hashtable-set! "./boot/macro/library.scm" . 322565))
           (push.iloc.0 . 1)
           (apply.gloc.of
             for-each
             (for-each (lambda (|a`2347*|)
                         (core-hashtable-set! |ht-immutables`2343*| (car |a`2347*|) #t)
                         (let ((|.L668`2349*|
                                 (core-hashtable-ref |ht-imports`2343*| (car |a`2347*|) #f)))
                           (if |.L668`2349*|
                               (or (eq? |.L668`2349*| (cdr |a`2347*|))
                                   (syntax-violation
                                     'library
                                     "duplicate import identifiers"
                                     (abbreviated-take-form |form`2316*| 4 8)
                                     (car |a`2347*|)))
                               (core-hashtable-set!
                                 |ht-imports`2343*|
                                 (car |a`2347*|)
                                 (cdr |a`2347*|)))))
                       |imports`2343*|)))
         (call
           (touch.gloc.of make-shield-id-table)
           (push.iloc 4 . 0)
           (apply.gloc.of make-shield-id-table "./boot/macro/library.scm" . 322565))
         (push)
         (subr.gloc.of make-core-hashtable 0)
         (push)
         (extend . 2)
         (call
           (push.close
             (1 0)
             (push.iloc.1 . 0)
             (push.car.iloc (0 . 0) "./boot/macro/library.scm" . 322565)
             (push.cdr.iloc (0 . 0) "./boot/macro/library.scm" . 322565)
             (subr.gloc.of core-hashtable-set! 3 "./boot/macro/library.scm" . 322565)
             (push.iloc.1 . 1)
             (push.car.iloc (0 . 0) "./boot/macro/library.scm" . 322565)
             (push.cdr.iloc (0 . 0) "./boot/macro/library.scm" . 322565)
             (ret.subr.gloc.of core-hashtable-set! "./boot/macro/library.scm" . 322565))
           (push.iloc.1 . 4)
           (push.subr.gloc.of core-hashtable->alist 1 "./boot/macro/library.scm" . 322565)
           (apply.gloc.of for-each "./boot/macro/library.scm" . 322565))
         (push.const . #f)
         (extend . 1)
         (push.close
           (0 0)
           (call
             (touch.gloc.of current-immutable-identifiers)
             (apply.gloc.of current-immutable-identifiers "./boot/macro/library.scm" . 322565))
           (set.iloc (1 . 0) "./boot/macro/library.scm" . 322565)
           (touch.gloc.of current-immutable-identifiers)
           (push.iloc 3 . 3)
           (apply.gloc.of current-immutable-identifiers "./boot/macro/library.scm" . 322565))
         (push.close
           (0 0)
           (touch.gloc.of expand-library-body)
           (push.iloc 8 . 0)
           (push.iloc 6 . 0)
           (push.iloc 6 . 1)
           (push.iloc 7 . 0)
           (push.iloc 3 . 0)
           (push.iloc 3 . 1)
           (push.iloc 3 . 2)
           (call
             (touch.gloc.of extend-env)
             (push.gloc.of private-primitives-environment)
             (call
               (touch.gloc.of |permute-env`2317*|)
               (push.iloc 2 . 0)
               (apply.gloc.of |permute-env`2317*| "./boot/macro/library.scm" . 322565))
             (push)
             (apply.gloc.of extend-env "./boot/macro/library.scm" . 322565))
           (push)
           (call
             (touch.gloc.of |permute-env`2317*|)
             (push.iloc 2 . 1)
             (apply.gloc.of |permute-env`2317*| "./boot/macro/library.scm" . 322565))
           (push)
           (apply.gloc.of expand-library-body "./boot/macro/library.scm" . 322565))
         (push.close
           (0 0)
           (touch.gloc.of current-immutable-identifiers)
           (push.iloc.1 . 0)
           (apply.gloc.of current-immutable-identifiers "./boot/macro/library.scm" . 322565))
         (apply.gloc.of |.dynamic-wind| "./boot/macro/library.scm" . 322565))
       (push)
       (extend . 1)
       (call
         (call
           (touch.gloc.of current-include-files)
           (apply.gloc.of current-include-files "./boot/macro/library.scm" . 322565))
         (push)
         (push.subr.gloc.of core-hashtable-size 1 "./boot/macro/library.scm" . 322565)
         (push.const . 0)
         (subr.gloc.of = 2 "./boot/macro/library.scm" . 322565)
         (if.true.ret)
         (push.gloc.of library-include-dependencies)
         (push.iloc 3 . 0)
         (call
           (touch.gloc.of current-include-files)
           (apply.gloc.of current-include-files "./boot/macro/library.scm" . 322565))
         (push)
         (ret.subr.gloc.of core-hashtable-set! "./boot/macro/library.scm" . 322565))
       (ret.iloc 0 . 0))
     (push.close
       (0 0)
       (touch.gloc.of current-include-files)
       (push.iloc.1 . 0)
       (apply.gloc.of current-include-files "./boot/macro/library.scm" . 322565))
     (apply.gloc.of
       |.dynamic-wind|
       (|.dynamic-wind|
         (lambda ()
           (set! |tmp1`2335`2337*| (current-include-files))
           (current-include-files |tmp2`2335`2337*|))
         (lambda ()
           (let ((|coreform`2368*|
                   (let ((|exports`2343*| (parse-exports |form`2316*| |export-spec`2330*|))
                         (|imports`2343*| (parse-imports |form`2316*| |import-spec`2330*|))
                         (|depends`2343*| (parse-depends |form`2316*| |import-spec`2330*|))
                         (|ht-immutables`2343*| (make-core-hashtable))
                         (|ht-imports`2343*| (make-core-hashtable))
                         (|ht-publics`2343*| (make-core-hashtable)))
                     (for-each (lambda (|a`2345*|)
                                 (and (core-hashtable-ref |ht-publics`2343*| (cdr |a`2345*|) #f)
                                      (syntax-violation
                                        'library
                                        "duplicate export identifiers"
                                        (abbreviated-take-form |form`2316*| 4 8)
                                        (cdr |a`2345*|)))
                                 (core-hashtable-set! |ht-publics`2343*| (cdr |a`2345*|) #t)
                                 (core-hashtable-set! |ht-immutables`2343*| (car |a`2345*|) #t))
                               |exports`2343*|)
                     (for-each (lambda (|a`2347*|)
                                 (core-hashtable-set! |ht-immutables`2343*| (car |a`2347*|) #t)
                                 (let ((|.L668`2349*|
                                         (core-hashtable-ref
                                           |ht-imports`2343*|
                                           (car |a`2347*|)
                                           #f)))
                                   (if |.L668`2349*|
                                       (or (eq? |.L668`2349*| (cdr |a`2347*|))
                                           (syntax-violation
                                             'library
                                             "duplicate import identifiers"
                                             (abbreviated-take-form |form`2316*| 4 8)
                                             (car |a`2347*|)))
                                       (core-hashtable-set!
                                         |ht-imports`2343*|
                                         (car |a`2347*|)
                                         (cdr |a`2347*|)))))
                               |imports`2343*|)
                     (let ((|ht-env`2353*| (make-shield-id-table |body`2330*|))
                           (|ht-libenv`2353*| (make-core-hashtable)))
                       (for-each (lambda (|a`2355*|)
                                   (core-hashtable-set!
                                     |ht-env`2353*|
                                     (car |a`2355*|)
                                     (cdr |a`2355*|))
                                   (core-hashtable-set!
                                     |ht-libenv`2353*|
                                     (car |a`2355*|)
                                     (cdr |a`2355*|)))
                                 (core-hashtable->alist |ht-imports`2343*|))
                       (let ((|tmp1`2358`2360*| #f))
                         (|.dynamic-wind|
                           (lambda ()
                             (set! |tmp1`2358`2360*| (current-immutable-identifiers))
                             (current-immutable-identifiers |ht-immutables`2343*|))
                           (lambda ()
                             (expand-library-body
                               |form`2316*|
                               |library-id`2332*|
                               |library-version`2332*|
                               |body`2330*|
                               |exports`2343*|
                               |imports`2343*|
                               |depends`2343*|
                               (extend-env
                                 private-primitives-environment
                                 (|permute-env`2317*| |ht-env`2353*|))
                               (|permute-env`2317*| |ht-libenv`2353*|)))
                           (lambda () (current-immutable-identifiers |tmp1`2358`2360*|))))))))
             (or (= (core-hashtable-size (current-include-files)) 0)
                 (core-hashtable-set!
                   library-include-dependencies
                   |library-id`2332*|
                   (current-include-files)))
             |coreform`2368*|))
         (lambda () (current-include-files |tmp1`2335`2337*|)))))
   (push.const . library)
   (push.const . "expected library name, export spec, and import spec")
   (call
     (touch.gloc.of abbreviated-take-form)
     (push.iloc.0 . 0)
     (push.const . 4)
     (push.const . 8)
     (apply.gloc.of abbreviated-take-form "./boot/macro/library.scm" . 322565))
   (push)
   (apply.gloc.of syntax-violation "./boot/macro/library.scm" . 322565))
 (set.gloc.of expand-library)
 (ret.const.unspec))
((close
   (9 0 . expand-library-body)
   (extend.unbound . 7)
   (push.const . #f)
   (push.close
     (1 0 . internal-definition?)
     (iloc.0 . 0)
     (if.not.pair?.ret.const . #f)
     (car.iloc (0 . 0) "./boot/macro/library.scm" . 374805)
     (if.not.pair?.ret.const . #f)
     (push.iloc.0 . 0)
     (subr.gloc.of caar 1 "./boot/macro/library.scm" . 375831)
     (if.not.symbol?.ret.const . #f)
     (call
       (touch.gloc.of env-lookup)
       (push.iloc 2 . 7)
       (push.iloc.0 . 0)
       (push.subr.gloc.of caar 1 "./boot/macro/library.scm" . 376874)
       (apply.gloc.of env-lookup "./boot/macro/library.scm" . 376858))
     (push)
     (extend . 1)
     (call
       (touch.gloc.of macro?)
       (push.iloc.0 . 0)
       (apply.gloc.of macro? "./boot/macro/library.scm" . 377876))
     (if.true.ret)
     (push.gloc.of denote-define)
     (iloc.0 . 0)
     (if.eq?.ret.const . #t)
     (push.gloc.of denote-define-syntax)
     (iloc.0 . 0)
     (if.eq?.ret.const . #t)
     (push.gloc.of denote-let-syntax)
     (iloc.0 . 0)
     (if.eq?.ret.const . #t)
     (push.gloc.of denote-letrec-syntax)
     (iloc.0 . 0)
     (ret.eq? "./boot/macro/library.scm" . 381972))
   (push.const)
   (push.close
     (2 0 . extend-env!)
     (call
       (call
         (touch.gloc.of macro?)
         (push.iloc.0 . 1)
         (apply.gloc.of macro? "./boot/macro/library.scm" . 388110))
       (if.false.ret)
       (call
         (touch.gloc.of acons)
         (push.iloc.0 . 0)
         (push.iloc.0 . 1)
         (push.iloc.1 . 2)
         (apply.gloc.of acons "./boot/macro/library.scm" . 389151))
       (set.iloc (1 . 2) "./boot/macro/library.scm" . 389134)
       (ret.const.unspec))
     (call
       (touch.gloc.of extend-env)
       (push.iloc.0 . 0)
       (iloc.0 . 1)
       (push.cons)
       (push.subr.gloc.of list 1 "./boot/macro/library.scm" . 390175)
       (push.iloc 2 . 7)
       (apply.gloc.of extend-env "./boot/macro/library.scm" . 390163))
     (set.iloc (2 . 7) "./boot/macro/library.scm" . 390153)
     (push.close
       (1 0)
       (push.cddr.iloc (0 . 0) "./boot/macro/library.scm" . 391209)
       (push.iloc 3 . 7)
       (ret.subr.gloc.of set-cdr! "./boot/macro/library.scm" . 391199))
     (push.iloc.1 . 2)
     (apply.gloc.of for-each "./boot/macro/library.scm" . 391177))
   (push.close
     (2 0 . extend-libenv!)
     (call
       (touch.gloc.of extend-env)
       (push.iloc.0 . 0)
       (iloc.0 . 1)
       (push.cons)
       (push.subr.gloc.of list 1 "./boot/macro/library.scm" . 395298)
       (push.iloc 2 . 8)
       (apply.gloc.of extend-env "./boot/macro/library.scm" . 395286))
     (set.iloc (2 . 8) "./boot/macro/library.scm" . 395273)
     (touch.gloc.of current-template-environment)
     (push.iloc 2 . 8)
     (apply.gloc.of current-template-environment "./boot/macro/library.scm" . 396297))
   (push.close
     (4 0 . rewrite-body)
     (touch.gloc.of rewrite-library-body)
     (push.iloc 2 . 0)
     (push.iloc 2 . 1)
     (push.iloc 2 . 2)
     (push.iloc.0 . 0)
     (push.iloc.0 . 1)
     (push.iloc.0 . 2)
     (push.iloc.0 . 3)
     (push.iloc 2 . 4)
     (push.iloc 2 . 5)
     (push.iloc 2 . 6)
     (push.iloc 2 . 7)
     (push.iloc 2 . 8)
     (apply.gloc.of rewrite-library-body "./boot/macro/library.scm" . 400393))
   (enclose . 6)
   (subr.gloc.of make-core-hashtable 0 "./boot/macro/library.scm" . 402468)
   (set.iloc (0 . 6))
   (call
     (touch.gloc.of current-template-environment)
     (push.iloc.1 . 8)
     (apply.gloc.of current-template-environment "./boot/macro/library.scm" . 404485))
   (call
     (push.close
       (1 0)
       (push.iloc.1 . 6)
       (push.car.iloc (0 . 0) "./boot/macro/library.scm" . 405575)
       (push.const . #t)
       (ret.subr.gloc.of core-hashtable-set! "./boot/macro/library.scm" . 405531))
     (push.iloc.1 . 5)
     (apply.gloc.of for-each "./boot/macro/library.scm" . 405509))
   (extend.enclose
     (4 0 . loop)
     (call
       (iloc.0 . 0)
       (if.not.pair?.ret.const . #f)
       (car.iloc (0 . 0) "./boot/macro/library.scm" . 407591)
       (if.not.pair?.ret.const . #f)
       (push.iloc.0 . 0)
       (push.subr.gloc.of caar 1 "./boot/macro/library.scm" . 407612)
       (ret.subr.gloc.of symbol? "./boot/macro/library.scm" . 407603))
     (if.true
       (call
         (touch.gloc.of env-lookup)
         (push.iloc 3 . 7)
         (push.iloc.0 . 0)
         (push.subr.gloc.of caar 1 "./boot/macro/library.scm" . 408618)
         (apply.gloc.of env-lookup "./boot/macro/library.scm" . 408602))
       (push)
       (extend . 1)
       (push.gloc.of denote-begin)
       (iloc.0 . 0)
       (if.eq?
         (call
           (touch.gloc.of flatten-begin)
           (push.iloc.1 . 0)
           (push.iloc 4 . 7)
           (apply.gloc.of flatten-begin "./boot/macro/library.scm" . 410653))
         (push)
         (push.iloc.1 . 1)
         (push.iloc.1 . 2)
         (push.iloc.1 . 3)
         (apply.iloc (2 . 0) "./boot/macro/library.scm" . 410647))
       (push.gloc.of denote-define-syntax)
       (iloc.0 . 0)
       (if.eq?
         (call
           (iloc.1 . 0)
           (if.not.pair?.ret.const . #f)
           (car.iloc (1 . 0) (car |body`2392*|))
           (if.not.pair?.ret.const . #f)
           (push.iloc.1 . 0)
           (subr.gloc.of cdar 1 (cdar |body`2392*|))
           (if.not.pair?.ret.const . #f)
           (push.iloc.1 . 0)
           (subr.gloc.of cddar 1 (cddar |body`2392*|))
           (if.not.pair?.ret.const . #f)
           (push.iloc.1 . 0)
           (subr.gloc.of cdddar 1 (cdddar |body`2392*|))
           (if.not.null?.ret.const . #f)
           (push.cdr.iloc (1 . 0) (cdr |body`2392*|))
           (subr.gloc.of list? 1 (list? (cdr |body`2392*|)))
           (if.false.ret)
           (push.iloc.1 . 0)
           (push.subr.gloc.of cadar 1 (cadar |body`2392*|))
           (ret.subr.gloc.of symbol? (symbol? (cadar |body`2392*|))))
         (if.true
           (push.cdr.iloc (1 . 0) (cdr |body`2392*|))
           (push.iloc.1 . 0)
           (push.subr.gloc.of caddar 1 (caddar |body`2392*|))
           (push.iloc.1 . 0)
           (push.subr.gloc.of cadar 1 (cadar |body`2392*|))
           (extend . 3)
           (call
             (push.iloc 4 . 6)
             (push.iloc.0 . 2)
             (subr.gloc.of
               core-hashtable-contains?
               2
               (core-hashtable-contains? |ht-imported-immutables`2374*| |org`2400*|))
             (if.false.ret)
             (push.const . define-syntax)
             (push.const . "attempt to modify immutable binding")
             (push.car.iloc (2 . 0) (car |body`2392*|))
             (apply.gloc.of
               syntax-violation
               (syntax-violation
                 'define-syntax
                 "attempt to modify immutable binding"
                 (car |body`2392*|))))
           (push.close
             (0 0)
             (push.const . #f)
             (extend . 1)
             (push.close
               (0 0)
               (call
                 (touch.gloc.of current-template-environment)
                 (apply.gloc.of current-template-environment (current-template-environment)))
               (set.iloc (1 . 0) (set! |tmp1`2404`2406*| (current-template-environment)))
               (touch.gloc.of current-template-environment)
               (push.iloc 7 . 0)
               (apply.gloc.of
                 current-template-environment
                 (current-template-environment |initial-libenv`2374*|)))
             (push.close
               (0 0)
               (touch.gloc.of compile-macro)
               (push.car.iloc (5 . 0) (car |body`2392*|))
               (push.iloc 3 . 1)
               (push.iloc 8 . 7)
               (apply.gloc.of
                 compile-macro
                 (compile-macro (car |body`2392*|) |clause`2400*| |env`2373*|)))
             (push.close
               (0 0)
               (touch.gloc.of current-template-environment)
               (push.iloc.1 . 0)
               (apply.gloc.of
                 current-template-environment
                 (current-template-environment |tmp1`2404`2406*|)))
             (apply.gloc.of
               |.dynamic-wind|
               (|.dynamic-wind|
                 (lambda ()
                   (set! |tmp1`2404`2406*| (current-template-environment))
                   (current-template-environment |initial-libenv`2374*|))
                 (lambda () (compile-macro (car |body`2392*|) |clause`2400*| |env`2373*|))
                 (lambda () (current-template-environment |tmp1`2404`2406*|)))))
           (push.close
             (1 1)
             (call
               (touch.gloc.of generate-global-id)
               (push.iloc 6 . 1)
               (push.iloc.1 . 2)
               (apply.gloc.of
                 generate-global-id
                 (generate-global-id |library-id`2373*| |org`2400*|)))
             (push)
             (extend . 1)
             (call
               (push.iloc 2 . 2)
               (call
                 (touch.gloc.of make-import)
                 (push.iloc.0 . 0)
                 (apply.gloc.of make-import (make-import |new`2415*|)))
               (push)
               (apply.iloc (6 . 4) (|extend-libenv!`2374*| |org`2400*| (make-import |new`2415*|))))
             (push.iloc.1 . 0)
             (subr.gloc.of procedure? 1 (procedure? |code`2402*|))
             (if.true
               (call
                 (push.iloc 2 . 2)
                 (call
                   (touch.gloc.of make-macro)
                   (push.iloc.1 . 0)
                   (push.iloc 7 . 7)
                   (apply.gloc.of make-macro (make-macro |code`2402*| |env`2373*|)))
                 (push)
                 (apply.iloc
                   (6 . 3)
                   (|extend-env!`2374*| |org`2400*| (make-macro |code`2402*| |env`2373*|))))
               (push.iloc 2 . 0)
               (push.iloc 4 . 1)
               (push.iloc 2 . 2)
               (push.const . procedure)
               (push.car.iloc (1 . 1) (car |expr`2402*|))
               (push.subr.gloc.of list 3 (list |org`2400*| 'procedure (car |expr`2402*|)))
               (iloc 4 . 2)
               (push.cons)
               (call
                 (touch.gloc.of acons)
                 (push.iloc 2 . 2)
                 (push.iloc.0 . 0)
                 (push.iloc 4 . 3)
                 (apply.gloc.of acons (acons |org`2400*| |new`2415*| |renames`2392*|)))
               (push)
               (apply.iloc
                 (5 . 0)
                 (|loop`2391*|
                   |more`2400*|
                   |defs`2392*|
                   (cons (list |org`2400*| 'procedure (car |expr`2402*|)) |macros`2392*|)
                   (acons |org`2400*| |new`2415*| |renames`2392*|))))
             (call
               (touch.gloc.of macro-variable?)
               (push.iloc.1 . 0)
               (apply.gloc.of macro-variable? (macro-variable? |code`2402*|)))
             (if.true
               (call
                 (push.iloc 2 . 2)
                 (call
                   (touch.gloc.of make-macro-variable)
                   (push.cadr.iloc (1 . 0) (cadr |code`2402*|))
                   (push.iloc 7 . 7)
                   (apply.gloc.of
                     make-macro-variable
                     (make-macro-variable (cadr |code`2402*|) |env`2373*|)))
                 (push)
                 (apply.iloc
                   (6 . 3)
                   (|extend-env!`2374*|
                     |org`2400*|
                     (make-macro-variable (cadr |code`2402*|) |env`2373*|))))
               (push.iloc 2 . 0)
               (push.iloc 4 . 1)
               (push.iloc 2 . 2)
               (push.const . variable)
               (push.car.iloc (1 . 1) (car |expr`2402*|))
               (push.subr.gloc.of list 3 (list |org`2400*| 'variable (car |expr`2402*|)))
               (iloc 4 . 2)
               (push.cons)
               (call
                 (touch.gloc.of acons)
                 (push.iloc 2 . 2)
                 (push.iloc.0 . 0)
                 (push.iloc 4 . 3)
                 (apply.gloc.of acons (acons |org`2400*| |new`2415*| |renames`2392*|)))
               (push)
               (apply.iloc
                 (5 . 0)
                 (|loop`2391*|
                   |more`2400*|
                   |defs`2392*|
                   (cons (list |org`2400*| 'variable (car |expr`2402*|)) |macros`2392*|)
                   (acons |org`2400*| |new`2415*| |renames`2392*|))))
             (call
               (push.iloc 2 . 2)
               (call
                 (touch.gloc.of make-macro)
                 (push.iloc.1 . 0)
                 (push.iloc 7 . 7)
                 (apply.gloc.of make-macro (make-macro |code`2402*| |env`2373*|)))
               (push)
               (apply.iloc
                 (6 . 3)
                 (|extend-env!`2374*| |org`2400*| (make-macro |code`2402*| |env`2373*|))))
             (push.iloc 2 . 0)
             (push.iloc 4 . 1)
             (push.iloc 2 . 2)
             (push.const . template)
             (push.iloc.1 . 0)
             (push.subr.gloc.of list 3 (list |org`2400*| 'template |code`2402*|))
             (iloc 4 . 2)
             (push.cons)
             (call
               (touch.gloc.of acons)
               (push.iloc 2 . 2)
               (push.iloc.0 . 0)
               (push.iloc 4 . 3)
               (apply.gloc.of acons (acons |org`2400*| |new`2415*| |renames`2392*|)))
             (push)
             (apply.iloc
               (5 . 0)
               (|loop`2391*|
                 |more`2400*|
                 |defs`2392*|
                 (cons (list |org`2400*| 'template |code`2402*|) |macros`2392*|)
                 (acons |org`2400*| |new`2415*| |renames`2392*|))))
           (apply.gloc.of
             |.call-with-values|
             (|.call-with-values|
               (lambda ()
                 (let ((|tmp1`2404`2406*| #f))
                   (|.dynamic-wind|
                     (lambda ()
                       (set! |tmp1`2404`2406*| (current-template-environment))
                       (current-template-environment |initial-libenv`2374*|))
                     (lambda () (compile-macro (car |body`2392*|) |clause`2400*| |env`2373*|))
                     (lambda () (current-template-environment |tmp1`2404`2406*|)))))
               (lambda (|code`2402*| . |expr`2402*|)
                 (let ((|new`2415*| (generate-global-id |library-id`2373*| |org`2400*|)))
                   (|extend-libenv!`2374*| |org`2400*| (make-import |new`2415*|))
                   (if (procedure? |code`2402*|)
                       (begin
                         (|extend-env!`2374*| |org`2400*| (make-macro |code`2402*| |env`2373*|))
                         (|loop`2391*|
                           |more`2400*|
                           |defs`2392*|
                           (cons (list |org`2400*| 'procedure (car |expr`2402*|)) |macros`2392*|)
                           (acons |org`2400*| |new`2415*| |renames`2392*|)))
                       (if (macro-variable? |code`2402*|)
                           (begin
                             (|extend-env!`2374*|
                               |org`2400*|
                               (make-macro-variable (cadr |code`2402*|) |env`2373*|))
                             (|loop`2391*|
                               |more`2400*|
                               |defs`2392*|
                               (cons (list |org`2400*| 'variable (car |expr`2402*|)) |macros`2392*|)
                               (acons |org`2400*| |new`2415*| |renames`2392*|)))
                           (begin
                             (|extend-env!`2374*| |org`2400*| (make-macro |code`2402*| |env`2373*|))
                             (|loop`2391*|
                               |more`2400*|
                               |defs`2392*|
                               (cons (list |org`2400*| 'template |code`2402*|) |macros`2392*|)
                               (acons |org`2400*| |new`2415*| |renames`2392*|))))))))))
         (push.const . define-syntax)
         (push.const . "expected symbol and single expression")
         (push.car.iloc (1 . 0) (car |body`2392*|))
         (apply.gloc.of
           syntax-violation
           (syntax-violation
             'define-syntax
             "expected symbol and single expression"
             (car |body`2392*|))))
       (push.gloc.of denote-define)
       (iloc.0 . 0)
       (if.eq?
         (call
           (touch.gloc.of annotate)
           (call
             (touch.gloc.of desugar-define)
             (push.car.iloc (1 . 0) "./boot/macro/library.scm" . 435265)
             (apply.gloc.of desugar-define "./boot/macro/library.scm" . 435249))
           (push)
           (push.subr.gloc.of cdr 1 "./boot/macro/library.scm" . 435244)
           (push.car.iloc (1 . 0) "./boot/macro/library.scm" . 435278)
           (apply.gloc.of annotate "./boot/macro/library.scm" . 435234))
         (push)
         (extend . 1)
         (call
           (push.iloc 4 . 6)
           (push.car.iloc (0 . 0) "./boot/macro/library.scm" . 436303)
           (subr.gloc.of core-hashtable-contains? 2 "./boot/macro/library.scm" . 436254)
           (if.false.ret)
           (push.const . define)
           (push.const . "attempt to modify immutable binding")
           (push.car.iloc (2 . 0) "./boot/macro/library.scm" . 437342)
           (apply.gloc.of syntax-violation "./boot/macro/library.scm" . 437278))
         (push.car.iloc (0 . 0) "./boot/macro/library.scm" . 438308)
         (call
           (touch.gloc.of generate-global-id)
           (push.iloc 5 . 1)
           (push.car.iloc (0 . 0) "./boot/macro/library.scm" . 439363)
           (apply.gloc.of generate-global-id "./boot/macro/library.scm" . 439332))
         (push)
         (extend . 2)
         (call
           (push.iloc.0 . 0)
           (push.iloc.0 . 1)
           (apply.iloc (5 . 3) "./boot/macro/library.scm" . 440347))
         (call
           (push.iloc.0 . 0)
           (call
             (touch.gloc.of make-import)
             (push.iloc.0 . 1)
             (apply.gloc.of make-import "./boot/macro/library.scm" . 441391))
           (push)
           (apply.iloc (5 . 4) "./boot/macro/library.scm" . 441371))
         (push.cdr.iloc (3 . 0) "./boot/macro/library.scm" . 442401)
         (push.iloc.1 . 0)
         (iloc 3 . 1)
         (push.cons)
         (push.iloc 3 . 2)
         (call
           (touch.gloc.of acons)
           (push.iloc.0 . 0)
           (push.iloc.0 . 1)
           (push.iloc 3 . 3)
           (apply.gloc.of acons "./boot/macro/library.scm" . 442435))
         (push)
         (apply.iloc (4 . 0) "./boot/macro/library.scm" . 442395))
       (call
         (call
           (touch.gloc.of macro?)
           (push.iloc.0 . 0)
           (apply.gloc.of macro? "./boot/macro/library.scm" . 443419))
         (if.true.ret)
         (push.gloc.of denote-let-syntax)
         (iloc.0 . 0)
         (if.eq?.ret.const . #t)
         (push.gloc.of denote-letrec-syntax)
         (iloc.0 . 0)
         (ret.eq? "./boot/macro/library.scm" . 445467))
       (if.true
         (push.close
           (0 0)
           (touch.gloc.of expand-initial-forms)
           (push.car.iloc (2 . 0) "./boot/macro/library.scm" . 446534)
           (push.iloc 5 . 7)
           (apply.gloc.of expand-initial-forms "./boot/macro/library.scm" . 446512))
         (push.close
           (2 0)
           (iloc.0 . 1)
           (set.iloc (5 . 7) "./boot/macro/library.scm" . 447513)
           (call
             (touch.gloc.of flatten-begin)
             (push.iloc.0 . 0)
             (push.subr.gloc.of list 1 "./boot/macro/library.scm" . 448569)
             (push.iloc 5 . 7)
             (apply.gloc.of flatten-begin "./boot/macro/library.scm" . 448554))
           (push)
           (extend . 1)
           (iloc.0 . 0)
           (if.null?
             (push.cdr.iloc (3 . 0) "./boot/macro/library.scm" . 450600)
             (push.iloc 3 . 1)
             (push.iloc 3 . 2)
             (push.iloc 3 . 3)
             (apply.iloc (4 . 0) "./boot/macro/library.scm" . 450594))
           (call (push.iloc.0 . 0) (apply.iloc (5 . 1) "./boot/macro/library.scm" . 451618))
           (if.true
             (push.iloc.0 . 0)
             (push.cdr.iloc (3 . 0) "./boot/macro/library.scm" . 452666)
             (push.subr.gloc.of append 2 "./boot/macro/library.scm" . 452648)
             (push.iloc 3 . 1)
             (push.iloc 3 . 2)
             (push.iloc 3 . 3)
             (apply.iloc (4 . 0) "./boot/macro/library.scm" . 452642))
           (push.iloc 3 . 0)
           (push.iloc 3 . 1)
           (push.subr.gloc.of reverse 1 "./boot/macro/library.scm" . 454709)
           (push.iloc 3 . 2)
           (push.subr.gloc.of reverse 1 "./boot/macro/library.scm" . 454724)
           (push.iloc 3 . 3)
           (apply.iloc (5 . 5) "./boot/macro/library.scm" . 454690))
         (apply.gloc.of |.call-with-values| "./boot/macro/library.scm" . 411671))
       (push.iloc.1 . 0)
       (push.iloc.1 . 1)
       (push.subr.gloc.of reverse 1 "./boot/macro/library.scm" . 456746)
       (push.iloc.1 . 2)
       (push.subr.gloc.of reverse 1 "./boot/macro/library.scm" . 456761)
       (push.iloc.1 . 3)
       (apply.iloc (3 . 5) "./boot/macro/library.scm" . 456727))
     (push.iloc.0 . 0)
     (push.iloc.0 . 1)
     (push.subr.gloc.of reverse 1 "./boot/macro/library.scm" . 458785)
     (push.iloc.0 . 2)
     (push.subr.gloc.of reverse 1 "./boot/macro/library.scm" . 458800)
     (push.iloc.0 . 3)
     (apply.iloc (2 . 5) "./boot/macro/library.scm" . 458766))
   (call
     (touch.gloc.of flatten-begin)
     (push.iloc 2 . 3)
     (push.iloc 2 . 7)
     (apply.gloc.of flatten-begin "./boot/macro/library.scm" . 406550))
   (push)
   (push.const)
   (push.const)
   (push.const)
   (apply.iloc (0 . 0) "./boot/macro/library.scm" . 407559))
 (set.gloc.of expand-library-body)
 (ret.const.unspec))
((close
   (4 0 . make-rule-macro)
   (push.const . |.set-top-level-macro!|)
   (push.const . quote)
   (push.iloc.0 . 0)
   (push.subr.gloc.of |.list| 2 (|.list| 'quote |type`2439*|))
   (push.const . quote)
   (push.iloc.0 . 1)
   (push.subr.gloc.of |.list| 2 (|.list| 'quote |id`2439*|))
   (push.const . quote)
   (push.iloc.0 . 2)
   (push.subr.gloc.of |.list| 2 (|.list| 'quote |spec`2439*|))
   (push.iloc.0 . 3)
   (ret.subr.gloc.of |.list| "./boot/macro/library.scm" . 483335))
 (set.gloc.of |make-rule-macro`2428*|)
 (close
   (1 0)
   (push.const . |.require-scheme-library|)
   (push.const . quote)
   (push.iloc.0 . 0)
   (push.subr.gloc.of |.list| 2 (|.list| 'quote |dep`2451*|))
   (ret.subr.gloc.of |.list| "./boot/macro/library.scm" . 512022))
 (set.gloc.of |.L687|)
 (close
   (4 0 . make-proc-macro)
   (call
     (iloc.0 . 2)
     (if.not.pair?.ret.const . #f)
     (push.car.iloc (0 . 2) "./boot/macro/library.scm" . 492583)
     (const . lambda)
     (ret.eq? "./boot/macro/library.scm" . 492578))
   (if.true
     (push.const . |.set-top-level-macro!|)
     (push.const . quote)
     (push.iloc.0 . 0)
     (push.subr.gloc.of |.list| 2 (|.list| 'quote |type`2443*|))
     (push.const . quote)
     (push.iloc.0 . 1)
     (push.subr.gloc.of |.list| 2 (|.list| 'quote |id`2443*|))
     (push.const . |.transformer-thunk|)
     (push.iloc.0 . 2)
     (push.subr.gloc.of |.list| 2 (|.list| '|.transformer-thunk| |spec`2443*|))
     (push.iloc.0 . 3)
     (ret.subr.gloc.of |.list| "./boot/macro/library.scm" . 492559))
   (call (apply.gloc.of generate-temporary-symbol "./boot/macro/library.scm" . 495642))
   (push)
   (extend . 1)
   (push.const . |.set-top-level-macro!|)
   (push.const . quote)
   (push.iloc.1 . 0)
   (push.subr.gloc.of |.list| 2 (|.list| 'quote |type`2443*|))
   (push.const . quote)
   (push.iloc.1 . 1)
   (push.subr.gloc.of |.list| 2 (|.list| 'quote |id`2443*|))
   (push.const . let)
   (push.const (proc #f))
   (push.const . lambda)
   (push.iloc.0 . 0)
   (push.subr.gloc.of |.list| 1 (|.list| |x`2445*|))
   (push.const . if)
   (push.const . proc)
   (push.const . proc)
   (push.iloc.0 . 0)
   (push.subr.gloc.of |.list| 2 (|.list| 'proc |x`2445*|))
   (push.const . begin)
   (push.const . set!)
   (push.const . proc)
   (push.const . |.transformer-thunk|)
   (push.iloc.1 . 2)
   (push.subr.gloc.of |.list| 2 (|.list| '|.transformer-thunk| |spec`2443*|))
   (push.subr.gloc.of |.list| 3 (|.list| 'set! 'proc (|.list| '|.transformer-thunk| |spec`2443*|)))
   (push.const . proc)
   (push.iloc.0 . 0)
   (push.subr.gloc.of |.list| 2 (|.list| 'proc |x`2445*|))
   (push.subr.gloc.of
     |.list|
     3
     (|.list|
       'begin
       (|.list| 'set! 'proc (|.list| '|.transformer-thunk| |spec`2443*|))
       (|.list| 'proc |x`2445*|)))
   (push.subr.gloc.of
     |.list|
     4
     (|.list|
       'if
       'proc
       (|.list| 'proc |x`2445*|)
       (|.list|
         'begin
         (|.list| 'set! 'proc (|.list| '|.transformer-thunk| |spec`2443*|))
         (|.list| 'proc |x`2445*|))))
   (push.subr.gloc.of
     |.list|
     3
     (|.list|
       'lambda
       (|.list| |x`2445*|)
       (|.list|
         'if
         'proc
         (|.list| 'proc |x`2445*|)
         (|.list|
           'begin
           (|.list| 'set! 'proc (|.list| '|.transformer-thunk| |spec`2443*|))
           (|.list| 'proc |x`2445*|)))))
   (push.subr.gloc.of
     |.list|
     3
     (|.list|
       'let
       '((proc #f))
       (|.list|
         'lambda
         (|.list| |x`2445*|)
         (|.list|
           'if
           'proc
           (|.list| 'proc |x`2445*|)
           (|.list|
             'begin
             (|.list| 'set! 'proc (|.list| '|.transformer-thunk| |spec`2443*|))
             (|.list| 'proc |x`2445*|))))))
   (push.iloc.1 . 3)
   (ret.subr.gloc.of |.list| "./boot/macro/library.scm" . 495633))
 (set.gloc.of |make-proc-macro`2428*|)
 (close
   (4 0 . make-var-macro)
   (push.const . |.set-top-level-macro!|)
   (push.const . quote)
   (push.iloc.0 . 0)
   (push.subr.gloc.of |.list| 2 (|.list| 'quote |type`2441*|))
   (push.const . quote)
   (push.iloc.0 . 1)
   (push.subr.gloc.of |.list| 2 (|.list| 'quote |id`2441*|))
   (push.const . |.transformer-thunk|)
   (push.iloc.0 . 2)
   (push.subr.gloc.of |.list| 2 (|.list| '|.transformer-thunk| |spec`2441*|))
   (push.iloc.0 . 3)
   (ret.subr.gloc.of |.list| "./boot/macro/library.scm" . 487431))
 (set.gloc.of |make-var-macro`2428*|)
 (close
   (12 0 . rewrite-library-body)
   (extend.unbound . 2)
   (push.close+
     (2 0 . extend-libenv!)
     (call
       (touch.gloc.of extend-env)
       (push.iloc.0 . 0)
       (iloc.0 . 1)
       (push.cons)
       (push.subr.gloc.of list 1 "./boot/macro/library.scm" . 465954)
       (push.iloc 2 . 11)
       (apply.gloc.of extend-env "./boot/macro/library.scm" . 465942))
     (set.iloc (2 . 11) "./boot/macro/library.scm" . 465929)
     (touch.gloc.of current-template-environment)
     (push.iloc 2 . 11)
     (apply.gloc.of current-template-environment "./boot/macro/library.scm" . 466953))
   (push.close+
     (1 0 . rewrite-env)
     (extend.enclose+
       (2 0 . loop)
       (iloc.0 . 0)
       (if.null? (ret.iloc 0 . 1))
       (push.iloc.0 . 0)
       (push.subr.gloc.of caar 1 "./boot/macro/library.scm" . 473126)
       (subr.gloc.of uninterned-symbol? 1 "./boot/macro/library.scm" . 473106)
       (if.true
         (push.iloc.0 . 0)
         (push.subr.gloc.of cdar 1 "./boot/macro/library.scm" . 474141)
         (push.iloc 4 . 4)
         (subr.gloc.of assq 2 "./boot/macro/library.scm" . 474135)
         (if.true
           (push.cdr.iloc (0 . 0) "./boot/macro/library.scm" . 475165)
           (push.iloc.0 . 0)
           (push.subr.gloc.of caar 1 "./boot/macro/library.scm" . 475187)
           (push.iloc.0 . 0)
           (push.subr.gloc.of cdar 1 "./boot/macro/library.scm" . 475210)
           (push.iloc 4 . 11)
           (push.subr.gloc.of assq 2 "./boot/macro/library.scm" . 475204)
           (subr.gloc.of cddr 1 "./boot/macro/library.scm" . 475198)
           (push.cons)
           (iloc.0 . 1)
           (push.cons)
           (apply.iloc+ (1 . 0) "./boot/macro/library.scm" . 475159))
         (push.cdr.iloc (0 . 0) "./boot/macro/library.scm" . 476189)
         (push.car.iloc (0 . 0) "./boot/macro/library.scm" . 476205)
         (iloc.0 . 1)
         (push.cons)
         (apply.iloc+ (1 . 0) "./boot/macro/library.scm" . 476183))
       (push.iloc.0 . 0)
       (push.subr.gloc.of caar 1 "./boot/macro/library.scm" . 477208)
       (push.cdr.iloc (0 . 0) "./boot/macro/library.scm" . 477219)
       (subr.gloc.of assq 2 "./boot/macro/library.scm" . 477202)
       (if.true
         (push.cdr.iloc (0 . 0) "./boot/macro/library.scm" . 478233)
         (push.iloc.0 . 1)
         (apply.iloc+ (1 . 0) "./boot/macro/library.scm" . 478227))
       (push.cdr.iloc (0 . 0) "./boot/macro/library.scm" . 480281)
       (push.car.iloc (0 . 0) "./boot/macro/library.scm" . 480297)
       (iloc.0 . 1)
       (push.cons)
       (apply.iloc+ (1 . 0) "./boot/macro/library.scm" . 480275))
     (push.iloc.1 . 0)
     (push.subr.gloc.of reverse 1 "./boot/macro/library.scm" . 471065)
     (push.const)
     (apply.iloc+ (0 . 0) "./boot/macro/library.scm" . 472075))
   (enclose . 2)
   (call
     (touch.gloc.of check-duplicate-definition)
     (push.const . library)
     (push.iloc.1 . 4)
     (push.iloc.1 . 5)
     (push.iloc.1 . 6)
     (apply.gloc.of check-duplicate-definition "./boot/macro/library.scm" . 507909))
   (call (push.iloc.1 . 10) (apply.iloc+ (0 . 1) "./boot/macro/library.scm" . 508944))
   (push)
   (extend . 1)
   (call
     (touch.gloc.of expand-each)
     (push.iloc 2 . 3)
     (push.iloc.0 . 0)
     (apply.gloc.of expand-each "./boot/macro/library.scm" . 509980))
   (push)
   (extend . 1)
   (call
     (push.gloc.of |.L687|)
     (push.iloc 3 . 9)
     (apply.gloc.of map "./boot/macro/library.scm" . 512017))
   (push)
   (extend . 1)
   (call
     (push.close
       (1 0)
       (push.const . #f)
       (push.car.iloc (0 . 0) "./boot/macro/library.scm" . 515140)
       (extend . 2)
       (push.close
         (0 0)
         (call
           (touch.gloc.of current-top-level-exterior)
           (apply.gloc.of current-top-level-exterior "./boot/macro/library.scm" . 516123))
         (set.iloc (1 . 0) "./boot/macro/library.scm" . 516123)
         (touch.gloc.of current-top-level-exterior)
         (push.iloc.1 . 1)
         (apply.gloc.of current-top-level-exterior "./boot/macro/library.scm" . 516123))
       (push.close
         (0 0)
         (push.car.iloc (2 . 0) "./boot/macro/library.scm" . 516145)
         (push.iloc 7 . 6)
         (push.subr.gloc.of assq 2 "./boot/macro/library.scm" . 516139)
         (push.subr.gloc.of cdr 1 "./boot/macro/library.scm" . 516134)
         (call
           (touch.gloc.of expand-form)
           (push.cadr.iloc (2 . 0) "./boot/macro/library.scm" . 517171)
           (push.iloc 5 . 0)
           (apply.gloc.of expand-form "./boot/macro/library.scm" . 517158))
         (push)
         (extend . 2)
         (call
           (touch.gloc.of set-closure-comment!)
           (push.iloc.0 . 1)
           (push.iloc.0 . 0)
           (apply.gloc.of set-closure-comment! "./boot/macro/library.scm" . 518173))
         (push.const . define)
         (push.iloc.0 . 0)
         (push.iloc.0 . 1)
         (ret.subr.gloc.of |.list| "./boot/macro/library.scm" . 516123))
       (push.close
         (0 0)
         (touch.gloc.of current-top-level-exterior)
         (push.iloc.1 . 0)
         (apply.gloc.of current-top-level-exterior "./boot/macro/library.scm" . 516123))
       (apply.gloc.of |.dynamic-wind| "./boot/macro/library.scm" . 516123))
     (push.iloc 4 . 4)
     (apply.gloc.of map "./boot/macro/library.scm" . 514065))
   (push)
   (extend . 1)
   (call
     (iloc 5 . 5)
     (if.null? (ret.const))
     (subr.gloc.of make-core-hashtable 0)
     (push)
     (extend . 1)
     (call
       (push.close
         (1 0)
         (push.iloc.1 . 0)
         (push.car.iloc (0 . 0) "./boot/macro/library.scm" . 525394)
         (push.const . #t)
         (ret.subr.gloc.of core-hashtable-set! "./boot/macro/library.scm" . 525361))
       (push.iloc 6 . 5)
       (apply.gloc.of for-each "./boot/macro/library.scm" . 525339))
     (call
       (extend.enclose
         (1 0 . loop)
         (iloc.0 . 0)
         (if.pair?
           (call
             (push.car.iloc (0 . 0) "./boot/macro/library.scm" . 527414)
             (apply.iloc (1 . 0) "./boot/macro/library.scm" . 527408))
           (push.cdr.iloc (0 . 0) "./boot/macro/library.scm" . 527431)
           (apply.iloc (1 . 0) "./boot/macro/library.scm" . 527425))
         (iloc.0 . 0)
         (if.symbol?
           (push.iloc 2 . 0)
           (push.iloc.0 . 0)
           (push.const . #t)
           (ret.subr.gloc.of core-hashtable-set! "./boot/macro/library.scm" . 528434))
         (push.iloc.0 . 0)
         (subr.gloc.of vector? 1 "./boot/macro/library.scm" . 529444)
         (if.true
           (push.iloc.0 . 0)
           (push.subr.gloc.of vector->list 1 "./boot/macro/library.scm" . 529464)
           (apply.iloc (1 . 0) "./boot/macro/library.scm" . 529458))
         (ret.const.unspec))
       (call
         (push.gloc.of caddr)
         (push.iloc 7 . 5)
         (apply.gloc.of map "./boot/macro/library.scm" . 526379))
       (push)
       (apply.iloc (0 . 0) "./boot/macro/library.scm" . 527389))
     (call
       (push.close
         (1 0)
         (push.car.iloc (0 . 0) "./boot/macro/library.scm" . 531505)
         (push.iloc 7 . 11)
         (subr.gloc.of assq 2 "./boot/macro/library.scm" . 531499)
         (if.true.ret)
         (call
           (touch.gloc.of env-lookup)
           (push.iloc 5 . 0)
           (push.car.iloc (0 . 0) "./boot/macro/library.scm" . 532551)
           (apply.gloc.of env-lookup "./boot/macro/library.scm" . 532535))
         (push)
         (extend . 1)
         (call
           (iloc.0 . 0)
           (if.not.symbol?.ret.const . #f)
           (push.iloc.0 . 0)
           (push.car.iloc (1 . 0) "./boot/macro/library.scm" . 533588)
           (push.subr.gloc.of eq? 2 "./boot/macro/library.scm" . 533578)
           (ret.subr.gloc.of not "./boot/macro/library.scm" . 533573))
         (if.true
           (push.car.iloc (1 . 0) "./boot/macro/library.scm" . 534593)
           (call
             (touch.gloc.of make-import)
             (push.iloc.0 . 0)
             (apply.gloc.of make-import "./boot/macro/library.scm" . 534601))
           (push)
           (apply.iloc+ (7 . 0) "./boot/macro/library.scm" . 534577))
         (push.car.iloc (1 . 0) "./boot/macro/library.scm" . 535625)
         (subr.gloc.of uninterned-symbol? 1 "./boot/macro/library.scm" . 535605)
         (if.true.ret)
         (call
           (touch.gloc.of core-primitive-name?)
           (push.car.iloc (1 . 0) "./boot/macro/library.scm" . 536651)
           (apply.gloc.of core-primitive-name? "./boot/macro/library.scm" . 536629))
         (if.true.ret)
         (push.car.iloc (1 . 0) "./boot/macro/library.scm" . 537669)
         (call
           (touch.gloc.of make-unbound)
           (apply.gloc.of make-unbound "./boot/macro/library.scm" . 537677))
         (push)
         (apply.iloc+ (7 . 0) "./boot/macro/library.scm" . 537653))
       (push.iloc.0 . 0)
       (push.subr.gloc.of core-hashtable->alist 1 "./boot/macro/library.scm" . 538661)
       (apply.gloc.of for-each "./boot/macro/library.scm" . 530459))
     (call (apply.gloc.of generate-temporary-symbol "./boot/macro/library.scm" . 539693))
     (push)
     (extend . 1)
     (push.const . let)
     (push.iloc.0 . 0)
     (push.const . quote)
     (call
       (subr.gloc.of make-core-hashtable 0)
       (push)
       (extend . 1)
       (call
         (push.close
           (1 0)
           (push.iloc 3 . 0)
           (push.car.iloc (0 . 0) "./boot/macro/library.scm" . 543842)
           (subr.gloc.of core-hashtable-contains? 2 "./boot/macro/library.scm" . 543804)
           (if.false.ret)
           (push.iloc.1 . 0)
           (push.car.iloc (0 . 0) "./boot/macro/library.scm" . 544851)
           (push.cdr.iloc (0 . 0) "./boot/macro/library.scm" . 544859)
           (ret.subr.gloc.of core-hashtable-set! "./boot/macro/library.scm" . 544827))
         (push.iloc 8 . 11)
         (push.subr.gloc.of reverse 1 "./boot/macro/library.scm" . 545845)
         (apply.gloc.of for-each "./boot/macro/library.scm" . 542763))
       (push.iloc.0 . 0)
       (ret.subr.gloc.of core-hashtable->alist "./boot/macro/library.scm" . 546859))
     (push)
     (push.subr.gloc.of |.list| 2 "./boot/macro/library.scm" . 541737)
     (push.subr.gloc.of |.list| 2 "./boot/macro/library.scm" . 541737)
     (push.subr.gloc.of |.list| 1 "./boot/macro/library.scm" . 541737)
     (call
       (push.close
         (1 0)
         (push.car.iloc (0 . 0) "./boot/macro/library.scm" . 548926)
         (push.iloc 8 . 6)
         (push.subr.gloc.of assq 2 "./boot/macro/library.scm" . 548920)
         (push.subr.gloc.of cdr 1 "./boot/macro/library.scm" . 548915)
         (push.cadr.iloc (0 . 0) "./boot/macro/library.scm" . 549941)
         (push.iloc.0 . 0)
         (push.subr.gloc.of caddr 1 "./boot/macro/library.scm" . 550965)
         (extend . 3)
         (push.iloc.0 . 1)
         (const . template)
         (if.eq?
           (touch.gloc.of |make-rule-macro`2428*|)
           (push.const . syntax)
           (push.iloc.0 . 0)
           (push.iloc.0 . 2)
           (push.iloc 2 . 0)
           (apply.gloc.of |make-rule-macro`2428*| "./boot/macro/library.scm" . 554031))
         (push.iloc.0 . 1)
         (const . procedure)
         (if.eq?
           (touch.gloc.of |make-proc-macro`2428*|)
           (push.const . syntax)
           (push.iloc.0 . 0)
           (push.iloc.0 . 2)
           (push.iloc 2 . 0)
           (apply.gloc.of |make-proc-macro`2428*| "./boot/macro/library.scm" . 556079))
         (push.iloc.0 . 1)
         (const . variable)
         (if.eq?
           (touch.gloc.of |make-var-macro`2428*|)
           (push.const . variable)
           (push.iloc.0 . 0)
           (push.iloc.0 . 2)
           (push.iloc 2 . 0)
           (apply.gloc.of |make-var-macro`2428*| "./boot/macro/library.scm" . 558127))
         (push.const . "internal error in rewrite body: bad macro spec ~s")
         (push.iloc.1 . 0)
         (apply.gloc.of scheme-error "./boot/macro/library.scm" . 560175))
       (push.iloc 7 . 5)
       (apply.gloc.of
         map
         (map (lambda (|e`2492*|)
                (let ((|id`2494*| (cdr (assq (car |e`2492*|) |renames`2427*|)))
                      (|type`2494*| (cadr |e`2492*|))
                      (|spec`2494*| (caddr |e`2492*|)))
                  (if (|.eq?| |type`2494*| 'template)
                      (|make-rule-macro`2428*| 'syntax |id`2494*| |spec`2494*| |shared-env`2486*|)
                      (if (|.eq?| |type`2494*| 'procedure)
                          (|make-proc-macro`2428*|
                            'syntax
                            |id`2494*|
                            |spec`2494*|
                            |shared-env`2486*|)
                          (if (|.eq?| |type`2494*| 'variable)
                              (|make-var-macro`2428*|
                                'variable
                                |id`2494*|
                                |spec`2494*|
                                |shared-env`2486*|)
                              (scheme-error
                                "internal error in rewrite body: bad macro spec ~s"
                                |e`2492*|))))))
              |macros`2427*|)))
     (push)
     (push.subr.gloc.of
       |.cons*|
       3
       (|.cons*|
         'let
         (|.list|
           (|.list|
             |shared-env`2486*|
             (|.list|
               'quote
               (let ((|ht`2488*| (make-core-hashtable)))
                 (for-each (lambda (|a`2490*|)
                             (and (core-hashtable-contains? |ht-visibles`2472*| (car |a`2490*|))
                                  (core-hashtable-set! |ht`2488*| (car |a`2490*|) (cdr |a`2490*|))))
                           (reverse |libenv`2427*|))
                 (core-hashtable->alist |ht`2488*|)))))
         (map (lambda (|e`2492*|)
                (let ((|id`2494*| (cdr (assq (car |e`2492*|) |renames`2427*|)))
                      (|type`2494*| (cadr |e`2492*|))
                      (|spec`2494*| (caddr |e`2492*|)))
                  (if (|.eq?| |type`2494*| 'template)
                      (|make-rule-macro`2428*| 'syntax |id`2494*| |spec`2494*| |shared-env`2486*|)
                      (if (|.eq?| |type`2494*| 'procedure)
                          (|make-proc-macro`2428*|
                            'syntax
                            |id`2494*|
                            |spec`2494*|
                            |shared-env`2486*|)
                          (if (|.eq?| |type`2494*| 'variable)
                              (|make-var-macro`2428*|
                                'variable
                                |id`2494*|
                                |spec`2494*|
                                |shared-env`2486*|)
                              (scheme-error
                                "internal error in rewrite body: bad macro spec ~s"
                                |e`2492*|))))))
              |macros`2427*|)))
     (ret.subr.gloc.of
       |.list|
       (|.list|
         (|.cons*|
           'let
           (|.list|
             (|.list|
               |shared-env`2486*|
               (|.list|
                 'quote
                 (let ((|ht`2488*| (make-core-hashtable)))
                   (for-each (lambda (|a`2490*|)
                               (and (core-hashtable-contains? |ht-visibles`2472*| (car |a`2490*|))
                                    (core-hashtable-set!
                                      |ht`2488*|
                                      (car |a`2490*|)
                                      (cdr |a`2490*|))))
                             (reverse |libenv`2427*|))
                   (core-hashtable->alist |ht`2488*|)))))
           (map (lambda (|e`2492*|)
                  (let ((|id`2494*| (cdr (assq (car |e`2492*|) |renames`2427*|)))
                        (|type`2494*| (cadr |e`2492*|))
                        (|spec`2494*| (caddr |e`2492*|)))
                    (if (|.eq?| |type`2494*| 'template)
                        (|make-rule-macro`2428*| 'syntax |id`2494*| |spec`2494*| |shared-env`2486*|)
                        (if (|.eq?| |type`2494*| 'procedure)
                            (|make-proc-macro`2428*|
                              'syntax
                              |id`2494*|
                              |spec`2494*|
                              |shared-env`2486*|)
                            (if (|.eq?| |type`2494*| 'variable)
                                (|make-var-macro`2428*|
                                  'variable
                                  |id`2494*|
                                  |spec`2494*|
                                  |shared-env`2486*|)
                                (scheme-error
                                  "internal error in rewrite body: bad macro spec ~s"
                                  |e`2492*|))))))
                |macros`2427*|)))))
   (push)
   (extend . 1)
   (push.const . |.intern-scheme-library|)
   (push.const . quote)
   (push.iloc 6 . 1)
   (push.subr.gloc.of |.list| 2 "./boot/macro/library.scm" . 566293)
   (push.const . quote)
   (push.iloc 6 . 2)
   (push.subr.gloc.of |.list| 2 "./boot/macro/library.scm" . 566293)
   (push.const . quote)
   (call
     (push.close
       (1 0)
       (push.cdr.iloc (0 . 0) "./boot/macro/library.scm" . 568357)
       (call
         (push.car.iloc (0 . 0) "./boot/macro/library.scm" . 569394)
         (push.iloc 7 . 6)
         (push.subr.gloc.of assq 2 "./boot/macro/library.scm" . 569388)
         (extend . 1)
         (iloc.0 . 0)
         (if.true
           (touch.gloc.of make-import)
           (push.cdr.iloc (0 . 0) "./boot/macro/library.scm" . 569439)
           (apply.gloc.of make-import "./boot/macro/library.scm" . 569426))
         (push.car.iloc (1 . 0) "./boot/macro/library.scm" . 570418)
         (push.iloc 8 . 8)
         (push.subr.gloc.of assq 2 "./boot/macro/library.scm" . 570412)
         (extend . 1)
         (iloc.0 . 0)
         (if.true (push.iloc.0 . 0) (ret.subr.gloc.of cdr "./boot/macro/library.scm" . 572459))
         (call
           (touch.gloc.of current-macro-expression)
           (push.const . #f)
           (apply.gloc.of current-macro-expression "./boot/macro/library.scm" . 572459))
         (push.const . library)
         (push.const . "attempt to export unbound identifier ~u")
         (push.car.iloc (2 . 0) "./boot/macro/library.scm" . 574575)
         (push.subr.gloc.of format 2 "./boot/macro/library.scm" . 574525)
         (push.iloc 9 . 0)
         (push.subr.gloc.of caddr 1 "./boot/macro/library.scm" . 575549)
         (apply.gloc.of syntax-violation "./boot/macro/library.scm" . 573483))
       (ret.cons
         (cons (cdr |e`2500*|)
               (let ((|.L680`2502*| (assq (car |e`2500*|) |renames`2427*|)))
                 (if |.L680`2502*|
                     (make-import (cdr |.L680`2502*|))
                     (let ((|.L681`2506*| (assq (car |e`2500*|) |imports`2427*|)))
                       (if |.L681`2506*|
                           (cdr |.L681`2506*|)
                           (begin
                             (current-macro-expression #f)
                             (syntax-violation
                               'library
                               (format "attempt to export unbound identifier ~u" (car |e`2500*|))
                               (caddr |form`2427*|))))))))))
     (push.iloc 6 . 7)
     (apply.gloc.of
       map
       (map (lambda (|e`2500*|)
              (cons (cdr |e`2500*|)
                    (let ((|.L680`2502*| (assq (car |e`2500*|) |renames`2427*|)))
                      (if |.L680`2502*|
                          (make-import (cdr |.L680`2502*|))
                          (let ((|.L681`2506*| (assq (car |e`2500*|) |imports`2427*|)))
                            (if |.L681`2506*|
                                (cdr |.L681`2506*|)
                                (begin
                                  (current-macro-expression #f)
                                  (syntax-violation
                                    'library
                                    (format
                                      "attempt to export unbound identifier ~u"
                                      (car |e`2500*|))
                                    (caddr |form`2427*|)))))))))
            |exports`2427*|)))
   (push)
   (push.subr.gloc.of
     |.list|
     2
     (|.list|
       'quote
       (map (lambda (|e`2500*|)
              (cons (cdr |e`2500*|)
                    (let ((|.L680`2502*| (assq (car |e`2500*|) |renames`2427*|)))
                      (if |.L680`2502*|
                          (make-import (cdr |.L680`2502*|))
                          (let ((|.L681`2506*| (assq (car |e`2500*|) |imports`2427*|)))
                            (if |.L681`2506*|
                                (cdr |.L681`2506*|)
                                (begin
                                  (current-macro-expression #f)
                                  (syntax-violation
                                    'library
                                    (format
                                      "attempt to export unbound identifier ~u"
                                      (car |e`2500*|))
                                    (caddr |form`2427*|)))))))))
            |exports`2427*|)))
   (push.subr.gloc.of
     |.list|
     4
     (|.list|
       '|.intern-scheme-library|
       (|.list| 'quote |library-id`2427*|)
       (|.list| 'quote |library-version`2427*|)
       (|.list|
         'quote
         (map (lambda (|e`2500*|)
                (cons (cdr |e`2500*|)
                      (let ((|.L680`2502*| (assq (car |e`2500*|) |renames`2427*|)))
                        (if |.L680`2502*|
                            (make-import (cdr |.L680`2502*|))
                            (let ((|.L681`2506*| (assq (car |e`2500*|) |imports`2427*|)))
                              (if |.L681`2506*|
                                  (cdr |.L681`2506*|)
                                  (begin
                                    (current-macro-expression #f)
                                    (syntax-violation
                                      'library
                                      (format
                                        "attempt to export unbound identifier ~u"
                                        (car |e`2500*|))
                                      (caddr |form`2427*|)))))))))
              |exports`2427*|))))
   (extend . 1)
   (call
     (call
       (touch.gloc.of check-rec*-contract-violation)
       (call
         (push.gloc.of cadr)
         (push.iloc 2 . 0)
         (apply.gloc.of map "./boot/macro/library.scm" . 577559))
       (push)
       (call
         (push.gloc.of caddr)
         (push.iloc 2 . 0)
         (apply.gloc.of map "./boot/macro/library.scm" . 578590))
       (push)
       (apply.gloc.of check-rec*-contract-violation "./boot/macro/library.scm" . 579604))
     (push)
     (extend . 1)
     (iloc.0 . 0)
     (if.true
       (call
         (touch.gloc.of any1)
         (push.close
           (1 0)
           (push.cdr.iloc (0 . 0) "./boot/macro/library.scm" . 581695)
           (car.iloc (1 . 0) "./boot/macro/library.scm" . 581703)
           (if.not.eq?.ret.const . #f)
           (push.iloc.0 . 0)
           (ret.subr.gloc.of car "./boot/macro/library.scm" . 581714))
         (push.iloc 8 . 6)
         (apply.gloc.of any1 "./boot/macro/library.scm" . 581667))
       (push)
       (extend . 1)
       (call
         (touch.gloc.of current-macro-expression)
         (push.const . #f)
         (apply.gloc.of current-macro-expression "./boot/macro/library.scm" . 582683))
       (push.const . #f)
       (push.const . "attempt to reference uninitialized variable ~u")
       (push.iloc.0 . 0)
       (push.subr.gloc.of format 2 "./boot/macro/library.scm" . 584749)
       (call
         (touch.gloc.of any1)
         (push.close
           (1 0)
           (call
             (touch.gloc.of check-rec-contract-violation)
             (push.iloc.1 . 0)
             (push.subr.gloc.of list 1 "./boot/macro/library.scm" . 586840)
             (push.iloc.0 . 0)
             (apply.gloc.of check-rec-contract-violation "./boot/macro/library.scm" . 586810))
           (if.false.ret)
           (touch.gloc.of annotate)
           (push.const . define)
           (iloc.0 . 0)
           (push.cons)
           (push.iloc.0 . 0)
           (apply.gloc.of annotate "./boot/macro/library.scm" . 587835))
         (push.iloc 9 . 4)
         (apply.gloc.of any1 "./boot/macro/library.scm" . 585773))
       (push)
       (apply.gloc.of syntax-violation "./boot/macro/library.scm" . 583707))
     (ret.const.unspec))
   (touch.gloc.of annotate)
   (push.const . begin)
   (push.iloc 3 . 0)
   (push.iloc 2 . 0)
   (push.iloc 4 . 0)
   (push.iloc.1 . 0)
   (push.iloc.0 . 0)
   (push.subr.gloc.of |.list| 1 (|.list| |rewrited-exports`2508*|))
   (push.subr.gloc.of
     |.append|
     2
     (|.append| |rewrited-macros`2498*| (|.list| |rewrited-exports`2508*|)))
   (push.subr.gloc.of
     |.append|
     2
     (|.append|
       |rewrited-body`2449*|
       (|.append| |rewrited-macros`2498*| (|.list| |rewrited-exports`2508*|))))
   (push.subr.gloc.of
     |.append|
     2
     (|.append|
       |rewrited-defs`2470*|
       (|.append|
         |rewrited-body`2449*|
         (|.append| |rewrited-macros`2498*| (|.list| |rewrited-exports`2508*|)))))
   (subr.gloc.of
     |.append|
     2
     (|.append|
       |rewrited-depends`2453*|
       (|.append|
         |rewrited-defs`2470*|
         (|.append|
           |rewrited-body`2449*|
           (|.append| |rewrited-macros`2498*| (|.list| |rewrited-exports`2508*|))))))
   (push.cons)
   (push.iloc 7 . 0)
   (apply.gloc.of annotate "./boot/macro/library.scm" . 589835))
 (set.gloc.of rewrite-library-body)
 (ret.const.unspec))
((close
   (1 0)
   (push.car.iloc (0 . 0) "./boot/macro/library.scm" . 610335)
   (push.cddr.iloc (0 . 0) "./boot/macro/library.scm" . 610358)
   (extend . 2)
   (push.iloc.0 . 0)
   (iloc.0 . 1)
   (if.eq?.ret.const . #t)
   (subr.gloc.of current-macro-environment 0)
   (push)
   (push.iloc.0 . 1)
   (push.const . #f)
   (push.subr.gloc.of core-hashtable-ref 3 "./boot/macro/library.scm" . 612382)
   (extend . 1)
   (iloc.0 . 0)
   (if.true
     (call
       (push.iloc.1 . 0)
       (subr.gloc.of top-level-bound? 1 "./boot/macro/library.scm" . 614439)
       (if.false.ret)
       (push.iloc.1 . 0)
       (push.const.undef)
       (ret.subr.gloc.of set-top-level-value! "./boot/macro/library.scm" . 614465))
     (subr.gloc.of current-macro-environment 0)
     (push)
     (push.iloc.1 . 0)
     (push.iloc.0 . 0)
     (ret.subr.gloc.of core-hashtable-set! "./boot/macro/library.scm" . 615459))
   (subr.gloc.of current-macro-environment 0)
   (push)
   (push.iloc.1 . 0)
   (subr.gloc.of core-hashtable-delete! 2 "./boot/macro/library.scm" . 617502)
   (push.iloc.1 . 0)
   (push.iloc.1 . 1)
   (push.subr.gloc.of top-level-value 1 "./boot/macro/library.scm" . 618555)
   (ret.subr.gloc.of set-top-level-value! "./boot/macro/library.scm" . 618526))
 (set.gloc.of |.L696|)
 (close
   (1 0 . import-top-level-bindings)
   (call
     (subr.gloc.of make-core-hashtable 0)
     (push)
     (call
       (touch.gloc.of current-top-level-renames)
       (apply.gloc.of current-top-level-renames "./boot/macro/library.scm" . 600108))
     (push)
     (extend . 2)
     (call
       (push.close
         (1 0)
         (push.iloc.1 . 1)
         (push.car.iloc (2 . 0) "./boot/macro/library.scm" . 602159)
         (subr.gloc.of core-hashtable-delete! 2 "./boot/macro/library.scm" . 602131)
         (push.iloc.1 . 0)
         (push.cddr.iloc (0 . 0) "./boot/macro/library.scm" . 603186)
         (push.const . #f)
         (push.subr.gloc.of core-hashtable-ref 3 "./boot/macro/library.scm" . 603162)
         (extend . 1)
         (iloc.0 . 0)
         (if.true
           (push.iloc 2 . 1)
           (push.car.iloc (1 . 0) "./boot/macro/library.scm" . 604227)
           (push.iloc.0 . 0)
           (ret.subr.gloc.of core-hashtable-set! "./boot/macro/library.scm" . 604202))
         (push.iloc 2 . 0)
         (push.cddr.iloc (1 . 0) "./boot/macro/library.scm" . 606259)
         (push.car.iloc (1 . 0) "./boot/macro/library.scm" . 606274)
         (ret.subr.gloc.of core-hashtable-set! "./boot/macro/library.scm" . 606234))
       (push.iloc.1 . 0)
       (apply.gloc.of
         for-each
         (for-each (lambda (|binding`2527*|)
                     (core-hashtable-delete! |ht2`2525*| (car |bindings`2523*|))
                     (let ((|.L693`2529*|
                             (core-hashtable-ref |ht1`2525*| (cddr |binding`2527*|) #f)))
                       (if |.L693`2529*|
                           (core-hashtable-set! |ht2`2525*| (car |binding`2527*|) |.L693`2529*|)
                           (core-hashtable-set!
                             |ht1`2525*|
                             (cddr |binding`2527*|)
                             (car |binding`2527*|)))))
                   |bindings`2523*|)))
     (touch.gloc.of current-top-level-renames)
     (push.iloc.0 . 1)
     (apply.gloc.of current-top-level-renames "./boot/macro/library.scm" . 608263))
   (push.gloc.of |.L696|)
   (push.iloc.0 . 0)
   (apply.gloc.of for-each "./boot/macro/library.scm" . 609285))
 (set.gloc.of import-top-level-bindings)
 (ret.const.unspec))
((close
   (2 0 . expand-import)
   (call
     (call
       (touch.gloc.of unexpect-top-level-form)
       (apply.gloc.of unexpect-top-level-form "./boot/macro/library.scm" . 623626))
     (if.false.ret)
     (push.const . import)
     (push.const . "misplaced top-level directive")
     (push.iloc.0 . 0)
     (apply.gloc.of syntax-violation "./boot/macro/library.scm" . 624650))
   (call
     (touch.gloc.of auto-compile-cache-update)
     (apply.gloc.of auto-compile-cache-update "./boot/macro/library.scm" . 625669))
   (subr.gloc.of make-core-hashtable 0)
   (push)
   (extend . 1)
   (call
     (push.close
       (1 0)
       (push.iloc.1 . 0)
       (push.car.iloc (0 . 0) "./boot/macro/library.scm" . 628794)
       (push.const . #f)
       (push.subr.gloc.of core-hashtable-ref 3 "./boot/macro/library.scm" . 628762)
       (extend . 1)
       (iloc.0 . 0)
       (if.true
         (push.iloc.0 . 0)
         (cdr.iloc (1 . 0) "./boot/macro/library.scm" . 630829)
         (if.eq?.ret.const . #t)
         (push.const . import)
         (push.const . "duplicate import identifiers")
         (call
           (touch.gloc.of abbreviated-take-form)
           (push.iloc 3 . 0)
           (push.const . 4)
           (push.const . 8)
           (apply.gloc.of abbreviated-take-form "./boot/macro/library.scm" . 631900))
         (push)
         (push.car.iloc (1 . 0) "./boot/macro/library.scm" . 631933)
         (apply.gloc.of syntax-violation "./boot/macro/library.scm" . 631843))
       (push.iloc 2 . 0)
       (push.car.iloc (1 . 0) "./boot/macro/library.scm" . 633915)
       (push.cdr.iloc (1 . 0) "./boot/macro/library.scm" . 633923)
       (ret.subr.gloc.of core-hashtable-set! "./boot/macro/library.scm" . 633882))
     (call
       (touch.gloc.of parse-imports)
       (push.iloc.1 . 0)
       (push.cdr.iloc (1 . 0) "./boot/macro/library.scm" . 626728)
       (apply.gloc.of parse-imports "./boot/macro/library.scm" . 626708))
     (push)
     (apply.gloc.of
       for-each
       (for-each (lambda (|a`2545*|)
                   (let ((|.L699`2547*|
                           (core-hashtable-ref |ht-bindings`2543*| (car |a`2545*|) #f)))
                     (if |.L699`2547*|
                         (or (eq? |.L699`2547*| (cdr |a`2545*|))
                             (syntax-violation
                               'import
                               "duplicate import identifiers"
                               (abbreviated-take-form |form`2541*| 4 8)
                               (car |a`2545*|)))
                         (core-hashtable-set!
                           |ht-bindings`2543*|
                           (car |a`2545*|)
                           (cdr |a`2545*|)))))
                 (parse-imports |form`2541*| (cdr |form`2541*|)))))
   (touch.gloc.of import-top-level-bindings)
   (push.iloc.0 . 0)
   (push.subr.gloc.of core-hashtable->alist 1 "./boot/macro/library.scm" . 635938)
   (apply.gloc.of import-top-level-bindings "./boot/macro/library.scm" . 635911))
 (set.gloc.of expand-import)
 (ret.const.unspec))
((close
   (1 0)
   (call
     (call
       (touch.gloc.of generate-library-id)
       (push.iloc.0 . 0)
       (apply.gloc.of generate-library-id "./boot/macro/library.scm" . 640023))
     (push)
     (extend . 1)
     (call (apply.gloc.of scheme-library-exports "./boot/macro/library.scm" . 641066))
     (push)
     (push.iloc.0 . 0)
     (push.const . #f)
     (push.subr.gloc.of core-hashtable-ref 3 "./boot/macro/library.scm" . 641046)
     (extend . 1)
     (push.iloc.0 . 0)
     (const . pending)
     (if.eq?
       (call (apply.gloc.of scheme-library-exports "./boot/macro/library.scm" . 643109))
       (push)
       (push.iloc.1 . 0)
       (push.const . #f)
       (subr.gloc.of core-hashtable-set! 3 "./boot/macro/library.scm" . 643088)
       (push.const . library)
       (push.const . "encountered cyclic dependencies")
       (push.iloc 2 . 0)
       (apply.gloc.of syntax-violation "./boot/macro/library.scm" . 644112))
     (push.iloc.0 . 0)
     (const . #f)
     (if.eq?
       (push.close
         (0 0)
         (call (apply.gloc.of scheme-library-exports "./boot/macro/library.scm" . 648232))
         (push)
         (push.iloc 2 . 0)
         (push.const . pending)
         (ret.subr.gloc.of core-hashtable-set! "./boot/macro/library.scm" . 648211))
       (push.close
         (0 0)
         (touch.gloc.of load-scheme-library)
         (push.iloc 3 . 0)
         (push.const . #f)
         (apply.gloc.of load-scheme-library "./boot/macro/library.scm" . 650259))
       (push.close
         (0 0)
         (call (apply.gloc.of scheme-library-exports "./boot/macro/library.scm" . 652337))
         (push)
         (push.iloc 2 . 0)
         (push.const . #f)
         (push.subr.gloc.of core-hashtable-ref 3 "./boot/macro/library.scm" . 652317)
         (const . pending)
         (if.not.eq?.ret.const . #f)
         (call (apply.gloc.of scheme-library-exports "./boot/macro/library.scm" . 653357))
         (push)
         (push.iloc 2 . 0)
         (push.const . #f)
         (ret.subr.gloc.of core-hashtable-set! "./boot/macro/library.scm" . 653336))
       (apply.gloc.of dynamic-wind "./boot/macro/library.scm" . 646160))
     (ret.const.unspec))
   (ret.const.unspec))
 (set.gloc.of |.L702|)
 (push.const . |.require-scheme-library|)
 (push.gloc.of |.L702|)
 (ret.subr.gloc.of set-top-level-value! "./boot/macro/library.scm" . 638979))
((call
   (push.const . equal?)
   (push.subr.gloc.of make-core-hashtable 1 "./boot/macro/library.scm" . 657437)
   (extend . 1)
   (ret.close
     (1 0 . unify-import-bindings)
     (push.close
       (1 0)
       (push.iloc 2 . 0)
       (push.iloc.0 . 0)
       (push.const . #f)
       (push.subr.gloc.of core-hashtable-ref 3 "./boot/macro/library.scm" . 660501)
       (extend . 1)
       (iloc.0 . 0)
       (if.true (push.iloc.0 . 0) (ret.subr.gloc.of values "./boot/macro/library.scm" . 662549))
       (push.iloc 3 . 0)
       (push.iloc.1 . 0)
       (push.iloc.1 . 0)
       (subr.gloc.of core-hashtable-set! 3 "./boot/macro/library.scm" . 662556)
       (ret.iloc 1 . 0))
     (push.iloc.0 . 0)
     (apply.gloc.of map "./boot/macro/library.scm" . 659463)))
 (set.gloc.of unify-import-bindings)
 (ret.const.unspec))
((close
   (3 0)
   (call
     (iloc.0 . 1)
     (if.false.ret)
     (call
       (touch.gloc.of scheme-library-versions)
       (apply.gloc.of scheme-library-versions "./boot/macro/library.scm" . 667695))
     (push)
     (push.iloc.0 . 0)
     (push.iloc.0 . 1)
     (ret.subr.gloc.of core-hashtable-set! "./boot/macro/library.scm" . 667674))
   (call (apply.gloc.of scheme-library-exports "./boot/macro/library.scm" . 668698))
   (push)
   (push.iloc.0 . 0)
   (call
     (touch.gloc.of unify-import-bindings)
     (push.iloc.0 . 2)
     (apply.gloc.of unify-import-bindings "./boot/macro/library.scm" . 668734))
   (push)
   (ret.subr.gloc.of core-hashtable-set! "./boot/macro/library.scm" . 668677))
 (set.gloc.of |.L705|)
 (push.const . |.intern-scheme-library|)
 (push.gloc.of |.L705|)
 (ret.subr.gloc.of set-top-level-value! "./boot/macro/library.scm" . 665601))
((close
   (1 0)
   (call (apply.gloc.of scheme-library-exports "./boot/macro/library.scm" . 672797))
   (push)
   (push.iloc.0 . 0)
   (ret.subr.gloc.of core-hashtable-delete! "./boot/macro/library.scm" . 672773))
 (set.gloc.of |.L707|)
 (push.const . |.unintern-scheme-library|)
 (push.gloc.of |.L707|)
 (ret.subr.gloc.of set-top-level-value! "./boot/macro/library.scm" . 670721))

;
((close
   (3 0 . loop)
   (iloc.0 . 0)
   (if.null?
     (push.iloc.0 . 1)
     (push.iloc.0 . 2)
     (ret.subr.gloc.of append "./boot/macro/program.scm" . 11282))
   (call
     (touch.gloc.of unbound?)
     (push.iloc.0 . 0)
     (push.subr.gloc.of cdar 1 "./boot/macro/program.scm" . 12316)
     (apply.gloc.of unbound? "./boot/macro/program.scm" . 12306))
   (if.true
     (touch.gloc.of |loop`2582*|)
     (push.cdr.iloc (0 . 0) "./boot/macro/program.scm" . 13336)
     (push.iloc.0 . 1)
     (push.car.iloc (0 . 0) "./boot/macro/program.scm" . 13359)
     (iloc.0 . 2)
     (push.cons)
     (apply.gloc.of |loop`2582*| "./boot/macro/program.scm" . 13330))
   (touch.gloc.of |loop`2582*|)
   (push.cdr.iloc (0 . 0) "./boot/macro/program.scm" . 15384)
   (push.car.iloc (0 . 0) "./boot/macro/program.scm" . 15400)
   (iloc.0 . 1)
   (push.cons)
   (push.iloc.0 . 2)
   (apply.gloc.of |loop`2582*| "./boot/macro/program.scm" . 15378))
 (set.gloc.of |loop`2582*|)
 (close
   (1 0 . permute-env)
   (touch.gloc.of |loop`2582*|)
   (push.iloc.0 . 0)
   (push.subr.gloc.of core-hashtable->alist 1 "./boot/macro/program.scm" . 9241)
   (push.const)
   (push.const)
   (apply.gloc.of |loop`2582*| "./boot/macro/program.scm" . 10251))
 (set.gloc.of |permute-env`2576*|)
 (close
   (2 0 . expand-top-level-program)
   (extend.unbound . 1)
   (push.const |.R6RS-TOP|)
   (enclose . 1)
   (call
     (iloc.1 . 0)
     (if.not.pair?.ret.const . #f)
     (car.iloc (1 . 0) "./boot/macro/program.scm" . 19461)
     (if.not.pair?.ret.const . #f)
     (push.iloc.1 . 0)
     (push.subr.gloc.of cdar 1 "./boot/macro/program.scm" . 19461)
     (subr.gloc.of list? 1 "./boot/macro/program.scm" . 19461)
     (if.false.ret)
     (push.cdr.iloc (1 . 0) "./boot/macro/program.scm" . 19461)
     (subr.gloc.of list? 1 "./boot/macro/program.scm" . 19461)
     (if.false.ret)
     (push.iloc.1 . 0)
     (push.subr.gloc.of caar 1 "./boot/macro/program.scm" . 19461)
     (const . import)
     (ret.eq? "./boot/macro/program.scm" . 19461))
   (if.true
     (push.cdr.iloc (1 . 0) "./boot/macro/program.scm" . 19461)
     (push.iloc.1 . 0)
     (push.subr.gloc.of cdar 1 "./boot/macro/program.scm" . 19461)
     (extend . 2)
     (call
       (touch.gloc.of library-name->id)
       (push.iloc 2 . 0)
       (push.iloc.1 . 0)
       (apply.gloc.of library-name->id "./boot/macro/program.scm" . 19461))
     (push)
     (call
       (touch.gloc.of library-name->version)
       (push.iloc 2 . 0)
       (push.iloc.1 . 0)
       (apply.gloc.of library-name->version "./boot/macro/program.scm" . 19461))
     (push)
     (extend . 2)
     (call
       (iloc.0 . 1)
       (if.false.ret)
       (call
         (touch.gloc.of scheme-library-versions)
         (apply.gloc.of scheme-library-versions "./boot/macro/program.scm" . 19461))
       (push)
       (push.iloc.0 . 0)
       (push.iloc.0 . 1)
       (ret.subr.gloc.of core-hashtable-set! "./boot/macro/program.scm" . 19461))
     (call
       (touch.gloc.of parse-imports)
       (push.iloc 3 . 0)
       (push.iloc.1 . 1)
       (apply.gloc.of parse-imports "./boot/macro/program.scm" . 19461))
     (push)
     (call
       (touch.gloc.of parse-depends)
       (push.iloc 3 . 0)
       (push.iloc.1 . 1)
       (apply.gloc.of parse-depends "./boot/macro/program.scm" . 19461))
     (push)
     (subr.gloc.of make-core-hashtable 0)
     (push)
     (subr.gloc.of make-core-hashtable 0)
     (push)
     (extend . 4)
     (call
       (push.close
         (1 0)
         (push.iloc.1 . 2)
         (push.car.iloc (0 . 0) "./boot/macro/program.scm" . 19461)
         (push.const . #t)
         (subr.gloc.of core-hashtable-set! 3 "./boot/macro/program.scm" . 19461)
         (push.iloc.1 . 3)
         (push.car.iloc (0 . 0) "./boot/macro/program.scm" . 19461)
         (push.const . #f)
         (push.subr.gloc.of core-hashtable-ref 3 "./boot/macro/program.scm" . 19461)
         (extend . 1)
         (iloc.0 . 0)
         (if.true
           (push.iloc.0 . 0)
           (cdr.iloc (1 . 0) "./boot/macro/program.scm" . 19461)
           (if.eq?.ret.const . #t)
           (push.const . "top-level program")
           (push.const . "duplicate import identifiers")
           (call
             (touch.gloc.of abbreviated-take-form)
             (push.iloc 6 . 0)
             (push.const . 4)
             (push.const . 8)
             (apply.gloc.of abbreviated-take-form "./boot/macro/program.scm" . 19461))
           (push)
           (push.car.iloc (1 . 0) "./boot/macro/program.scm" . 19461)
           (apply.gloc.of syntax-violation "./boot/macro/program.scm" . 19461))
         (push.iloc 2 . 3)
         (push.car.iloc (1 . 0) "./boot/macro/program.scm" . 19461)
         (push.cdr.iloc (1 . 0) "./boot/macro/program.scm" . 19461)
         (ret.subr.gloc.of core-hashtable-set! "./boot/macro/program.scm" . 19461))
       (push.iloc.0 . 0)
       (apply.gloc.of
         for-each
         (for-each (lambda (|a`2595*|)
                     (core-hashtable-set! |ht-immutables`2593*| (car |a`2595*|) #t)
                     (let ((|.L710`2597*|
                             (core-hashtable-ref |ht-imports`2593*| (car |a`2595*|) #f)))
                       (if |.L710`2597*|
                           (or (eq? |.L710`2597*| (cdr |a`2595*|))
                               (syntax-violation
                                 "top-level program"
                                 "duplicate import identifiers"
                                 (abbreviated-take-form |form`2575*| 4 8)
                                 (car |a`2595*|)))
                           (core-hashtable-set!
                             |ht-imports`2593*|
                             (car |a`2595*|)
                             (cdr |a`2595*|)))))
                   |imports`2593*|)))
     (call
       (touch.gloc.of make-shield-id-table)
       (push.iloc 2 . 0)
       (apply.gloc.of make-shield-id-table "./boot/macro/program.scm" . 19461))
     (push)
     (subr.gloc.of make-core-hashtable 0)
     (push)
     (extend . 2)
     (call
       (push.close
         (1 0)
         (push.iloc.1 . 0)
         (push.car.iloc (0 . 0) "./boot/macro/program.scm" . 19461)
         (push.cdr.iloc (0 . 0) "./boot/macro/program.scm" . 19461)
         (subr.gloc.of core-hashtable-set! 3 "./boot/macro/program.scm" . 19461)
         (push.iloc.1 . 1)
         (push.car.iloc (0 . 0) "./boot/macro/program.scm" . 19461)
         (push.cdr.iloc (0 . 0) "./boot/macro/program.scm" . 19461)
         (ret.subr.gloc.of core-hashtable-set! "./boot/macro/program.scm" . 19461))
       (push.iloc.1 . 3)
       (push.subr.gloc.of core-hashtable->alist 1 "./boot/macro/program.scm" . 19461)
       (apply.gloc.of for-each "./boot/macro/program.scm" . 19461))
     (push.const . #f)
     (extend . 1)
     (push.close
       (0 0)
       (call
         (touch.gloc.of current-immutable-identifiers)
         (apply.gloc.of current-immutable-identifiers "./boot/macro/program.scm" . 19461))
       (set.iloc (1 . 0) "./boot/macro/program.scm" . 19461)
       (touch.gloc.of current-immutable-identifiers)
       (push.iloc 3 . 2)
       (apply.gloc.of current-immutable-identifiers "./boot/macro/program.scm" . 19461))
     (push.close
       (0 0)
       (touch.gloc.of expand-top-level-program-body)
       (push.iloc 7 . 0)
       (push.iloc 4 . 0)
       (push.iloc 4 . 1)
       (push.iloc 5 . 0)
       (push.iloc 3 . 0)
       (push.iloc 3 . 1)
       (call
         (touch.gloc.of extend-env)
         (push.gloc.of private-primitives-environment)
         (call
           (touch.gloc.of |permute-env`2576*|)
           (push.iloc 2 . 0)
           (apply.gloc.of |permute-env`2576*| "./boot/macro/program.scm" . 19461))
         (push)
         (apply.gloc.of extend-env "./boot/macro/program.scm" . 19461))
       (push)
       (call
         (touch.gloc.of |permute-env`2576*|)
         (push.iloc 2 . 1)
         (apply.gloc.of |permute-env`2576*| "./boot/macro/program.scm" . 19461))
       (push)
       (apply.gloc.of expand-top-level-program-body "./boot/macro/program.scm" . 19461))
     (push.close
       (0 0)
       (touch.gloc.of current-immutable-identifiers)
       (push.iloc.1 . 0)
       (apply.gloc.of current-immutable-identifiers "./boot/macro/program.scm" . 19461))
     (apply.gloc.of |.dynamic-wind| "./boot/macro/program.scm" . 19461))
   (push.const . "top-level program")
   (push.const . "expected import form and top-level body")
   (call
     (touch.gloc.of abbreviated-take-form)
     (push.iloc.1 . 0)
     (push.const . 4)
     (push.const . 8)
     (apply.gloc.of abbreviated-take-form "./boot/macro/program.scm" . 19461))
   (push)
   (apply.gloc.of syntax-violation "./boot/macro/program.scm" . 19461))
 (set.gloc.of expand-top-level-program)
 (ret.const.unspec))
((close
   (1 0)
   (push.const . |.require-scheme-library|)
   (push.const . quote)
   (push.iloc.0 . 0)
   (push.subr.gloc.of |.list| 2 (|.list| 'quote |dep`2643*|))
   (ret.subr.gloc.of |.list| "./boot/macro/program.scm" . 102425))
 (set.gloc.of |.L721|)
 (close
   (8 0 . expand-top-level-program-body)
   (extend.unbound . 7)
   (push.const . #f)
   (push.const)
   (push.close
     (2 0 . extend-env!)
     (call
       (call
         (touch.gloc.of macro?)
         (push.iloc.0 . 1)
         (apply.gloc.of macro? "./boot/macro/program.scm" . 71694))
       (if.false.ret)
       (call
         (touch.gloc.of acons)
         (push.iloc.0 . 0)
         (push.iloc.0 . 1)
         (push.iloc.1 . 1)
         (apply.gloc.of acons "./boot/macro/program.scm" . 72735))
       (set.iloc (1 . 1) "./boot/macro/program.scm" . 72718)
       (ret.const.unspec))
     (call
       (touch.gloc.of extend-env)
       (push.iloc.0 . 0)
       (iloc.0 . 1)
       (push.cons)
       (push.subr.gloc.of list 1 "./boot/macro/program.scm" . 73759)
       (push.iloc 2 . 6)
       (apply.gloc.of extend-env "./boot/macro/program.scm" . 73747))
     (set.iloc (2 . 6) "./boot/macro/program.scm" . 73737)
     (push.close
       (1 0)
       (push.cddr.iloc (0 . 0) "./boot/macro/program.scm" . 74793)
       (push.iloc 3 . 6)
       (ret.subr.gloc.of set-cdr! "./boot/macro/program.scm" . 74783))
     (push.iloc.1 . 1)
     (apply.gloc.of for-each "./boot/macro/program.scm" . 74761))
   (push.close
     (2 0 . extend-libenv!)
     (call
       (touch.gloc.of extend-env)
       (push.iloc.0 . 0)
       (iloc.0 . 1)
       (push.cons)
       (push.subr.gloc.of list 1 "./boot/macro/program.scm" . 78882)
       (push.iloc 2 . 7)
       (apply.gloc.of extend-env "./boot/macro/program.scm" . 78870))
     (set.iloc (2 . 7) "./boot/macro/program.scm" . 78857)
     (touch.gloc.of current-template-environment)
     (push.iloc 2 . 7)
     (apply.gloc.of current-template-environment "./boot/macro/program.scm" . 79881))
   (push.close+
     (4 0 . rewrite-body)
     (extend.enclose+
       (1 0 . rewrite-env)
       (extend.enclose+
         (2 0 . loop)
         (iloc.0 . 0)
         (if.null? (ret.iloc 0 . 1))
         (push.iloc.0 . 0)
         (push.subr.gloc.of caar 1 "./boot/macro/program.scm" . 89130)
         (subr.gloc.of uninterned-symbol? 1 "./boot/macro/program.scm" . 89110)
         (if.true
           (push.iloc.0 . 0)
           (push.subr.gloc.of cdar 1 "./boot/macro/program.scm" . 90144)
           (push.iloc 4 . 1)
           (subr.gloc.of assq 2 "./boot/macro/program.scm" . 90138)
           (if.true
             (push.cdr.iloc (0 . 0) "./boot/macro/program.scm" . 91168)
             (push.iloc.0 . 0)
             (push.subr.gloc.of caar 1 "./boot/macro/program.scm" . 91190)
             (push.iloc.0 . 0)
             (push.subr.gloc.of cdar 1 "./boot/macro/program.scm" . 91213)
             (push.iloc 6 . 7)
             (push.subr.gloc.of assq 2 "./boot/macro/program.scm" . 91207)
             (subr.gloc.of cddr 1 "./boot/macro/program.scm" . 91201)
             (push.cons)
             (iloc.0 . 1)
             (push.cons)
             (apply.iloc+ (1 . 0) "./boot/macro/program.scm" . 91162))
           (push.cdr.iloc (0 . 0) "./boot/macro/program.scm" . 92192)
           (push.car.iloc (0 . 0) "./boot/macro/program.scm" . 92208)
           (iloc.0 . 1)
           (push.cons)
           (apply.iloc+ (1 . 0) "./boot/macro/program.scm" . 92186))
         (push.iloc.0 . 0)
         (push.subr.gloc.of caar 1 "./boot/macro/program.scm" . 93212)
         (push.cdr.iloc (0 . 0) "./boot/macro/program.scm" . 93223)
         (subr.gloc.of assq 2 "./boot/macro/program.scm" . 93206)
         (if.true
           (push.cdr.iloc (0 . 0) "./boot/macro/program.scm" . 94236)
           (push.iloc.0 . 1)
           (apply.iloc+ (1 . 0) "./boot/macro/program.scm" . 94230))
         (push.cdr.iloc (0 . 0) "./boot/macro/program.scm" . 96284)
         (push.car.iloc (0 . 0) "./boot/macro/program.scm" . 96300)
         (iloc.0 . 1)
         (push.cons)
         (apply.iloc+ (1 . 0) "./boot/macro/program.scm" . 96278))
       (push.iloc.1 . 0)
       (push.subr.gloc.of reverse 1 "./boot/macro/program.scm" . 87069)
       (push.const)
       (apply.iloc+ (0 . 0) "./boot/macro/program.scm" . 88079))
     (call
       (touch.gloc.of check-duplicate-definition)
       (push.const . "top-level program")
       (push.iloc.1 . 1)
       (push.iloc.1 . 2)
       (push.iloc.1 . 3)
       (apply.gloc.of check-duplicate-definition "./boot/macro/program.scm" . 98313))
     (call (push.iloc 3 . 6) (apply.iloc+ (0 . 0) "./boot/macro/program.scm" . 99348))
     (push)
     (extend . 1)
     (call
       (touch.gloc.of expand-each)
       (push.iloc 2 . 0)
       (push.iloc.0 . 0)
       (apply.gloc.of expand-each "./boot/macro/program.scm" . 100384))
     (push)
     (extend . 1)
     (call
       (push.gloc.of |.L721|)
       (push.iloc 5 . 5)
       (apply.gloc.of map "./boot/macro/program.scm" . 102420))
     (push)
     (call
       (push.close
         (1 0)
         (push.const . #f)
         (push.car.iloc (0 . 0) "./boot/macro/program.scm" . 107590)
         (extend . 2)
         (push.close
           (0 0)
           (call
             (touch.gloc.of current-top-level-exterior)
             (apply.gloc.of current-top-level-exterior "./boot/macro/program.scm" . 108573))
           (set.iloc (1 . 0) "./boot/macro/program.scm" . 108573)
           (touch.gloc.of current-top-level-exterior)
           (push.iloc.1 . 1)
           (apply.gloc.of current-top-level-exterior "./boot/macro/program.scm" . 108573))
         (push.close
           (0 0)
           (push.car.iloc (2 . 0) "./boot/macro/program.scm" . 108595)
           (push.iloc 6 . 3)
           (push.subr.gloc.of assq 2 "./boot/macro/program.scm" . 108589)
           (push.subr.gloc.of cdr 1 "./boot/macro/program.scm" . 108584)
           (call
             (touch.gloc.of expand-form)
             (push.cadr.iloc (2 . 0) "./boot/macro/program.scm" . 109621)
             (push.iloc 4 . 0)
             (apply.gloc.of expand-form "./boot/macro/program.scm" . 109608))
           (push)
           (extend . 2)
           (call
             (touch.gloc.of set-closure-comment!)
             (push.iloc.0 . 1)
             (push.iloc.0 . 0)
             (apply.gloc.of set-closure-comment! "./boot/macro/program.scm" . 110623))
           (push.const . define)
           (push.iloc.0 . 0)
           (push.iloc.0 . 1)
           (ret.subr.gloc.of |.list| "./boot/macro/program.scm" . 108573))
         (push.close
           (0 0)
           (touch.gloc.of current-top-level-exterior)
           (push.iloc.1 . 0)
           (apply.gloc.of current-top-level-exterior "./boot/macro/program.scm" . 108573))
         (apply.gloc.of |.dynamic-wind| "./boot/macro/program.scm" . 108573))
       (push.iloc 3 . 1)
       (apply.gloc.of map "./boot/macro/program.scm" . 106516))
     (push)
     (extend . 2)
     (call
       (call
         (touch.gloc.of check-rec*-contract-violation)
         (call
           (push.gloc.of cadr)
           (push.iloc.0 . 1)
           (apply.gloc.of map "./boot/macro/program.scm" . 113691))
         (push)
         (call
           (push.gloc.of caddr)
           (push.iloc.0 . 1)
           (apply.gloc.of map "./boot/macro/program.scm" . 114722))
         (push)
         (apply.gloc.of check-rec*-contract-violation "./boot/macro/program.scm" . 115736))
       (push)
       (extend . 1)
       (iloc.0 . 0)
       (if.true
         (call
           (touch.gloc.of any1)
           (push.close
             (1 0)
             (push.cdr.iloc (0 . 0) "./boot/macro/program.scm" . 117827)
             (car.iloc (1 . 0) "./boot/macro/program.scm" . 117835)
             (if.not.eq?.ret.const . #f)
             (push.iloc.0 . 0)
             (ret.subr.gloc.of car "./boot/macro/program.scm" . 117846))
           (push.iloc 5 . 3)
           (apply.gloc.of any1 "./boot/macro/program.scm" . 117799))
         (push)
         (extend . 1)
         (call
           (touch.gloc.of current-macro-expression)
           (push.const . #f)
           (apply.gloc.of current-macro-expression "./boot/macro/program.scm" . 118815))
         (push.const . #f)
         (push.const . "attempt to reference uninitialized variable ~u")
         (push.iloc.0 . 0)
         (push.subr.gloc.of format 2 "./boot/macro/program.scm" . 120881)
         (call
           (touch.gloc.of any1)
           (push.close
             (1 0)
             (call
               (touch.gloc.of check-rec-contract-violation)
               (push.iloc.1 . 0)
               (push.subr.gloc.of list 1 "./boot/macro/program.scm" . 122972)
               (push.iloc.0 . 0)
               (apply.gloc.of check-rec-contract-violation "./boot/macro/program.scm" . 122942))
             (if.false.ret)
             (touch.gloc.of annotate)
             (push.const . define)
             (iloc.0 . 0)
             (push.cons)
             (push.iloc.0 . 0)
             (apply.gloc.of annotate "./boot/macro/program.scm" . 123966))
           (push.iloc 6 . 1)
           (apply.gloc.of any1 "./boot/macro/program.scm" . 121905))
         (push)
         (apply.gloc.of syntax-violation "./boot/macro/program.scm" . 119839))
       (ret.const.unspec))
     (touch.gloc.of annotate)
     (push.const . begin)
     (push.iloc.0 . 0)
     (push.iloc.0 . 1)
     (push.iloc.1 . 0)
     (push.subr.gloc.of |.append| 2 (|.append| |rewrited-defs`2660*| |rewrited-body`2641*|))
     (subr.gloc.of
       |.append|
       2
       (|.append| |rewrited-depends`2660*| (|.append| |rewrited-defs`2660*| |rewrited-body`2641*|)))
     (push.cons)
     (push.iloc 6 . 0)
     (apply.gloc.of annotate "./boot/macro/program.scm" . 125967))
   (enclose . 5)
   (subr.gloc.of make-core-hashtable 0 "./boot/macro/program.scm" . 132132)
   (set.iloc (0 . 5))
   (call
     (push.const . 0)
     (extend . 1)
     (ret.close
       (0 0)
       (n+.iloc (1 . 0) 1 "./boot/macro/program.scm" . 137237)
       (set.iloc (1 . 0) "./boot/macro/program.scm" . 137227)
       (push.const . ".e~a")
       (push.iloc.1 . 0)
       (push.subr.gloc.of format 2 "./boot/macro/program.scm" . 138267)
       (ret.subr.gloc.of string->symbol "./boot/macro/program.scm" . 138251)))
   (set.iloc (0 . 6))
   (call
     (touch.gloc.of current-template-environment)
     (push.iloc.1 . 7)
     (apply.gloc.of current-template-environment "./boot/macro/program.scm" . 140293))
   (call
     (push.close
       (1 0)
       (push.iloc.1 . 5)
       (push.car.iloc (0 . 0) "./boot/macro/program.scm" . 141383)
       (push.const . #t)
       (ret.subr.gloc.of core-hashtable-set! "./boot/macro/program.scm" . 141339))
     (push.iloc.1 . 4)
     (apply.gloc.of for-each "./boot/macro/program.scm" . 141317))
   (extend.enclose
     (4 0 . loop)
     (iloc.0 . 0)
     (if.null?
       (push.iloc.0 . 0)
       (push.iloc.0 . 1)
       (push.subr.gloc.of reverse 1 "./boot/macro/program.scm" . 144414)
       (push.iloc.0 . 2)
       (push.subr.gloc.of reverse 1 "./boot/macro/program.scm" . 144429)
       (push.iloc.0 . 3)
       (apply.iloc+ (2 . 4) "./boot/macro/program.scm" . 144395))
     (call
       (iloc.0 . 0)
       (if.not.pair?.ret.const . #f)
       (car.iloc (0 . 0) "./boot/macro/program.scm" . 145451)
       (if.not.pair?.ret.const . #f)
       (push.iloc.0 . 0)
       (push.subr.gloc.of caar 1 "./boot/macro/program.scm" . 145472)
       (ret.subr.gloc.of symbol? "./boot/macro/program.scm" . 145463))
     (if.true
       (call
         (touch.gloc.of env-lookup)
         (push.iloc 3 . 6)
         (push.iloc.0 . 0)
         (push.subr.gloc.of caar 1 "./boot/macro/program.scm" . 146478)
         (apply.gloc.of env-lookup "./boot/macro/program.scm" . 146462))
       (push)
       (extend . 1)
       (push.gloc.of denote-begin)
       (iloc.0 . 0)
       (if.eq?
         (call
           (touch.gloc.of flatten-begin)
           (push.iloc.1 . 0)
           (push.iloc 4 . 6)
           (apply.gloc.of flatten-begin "./boot/macro/program.scm" . 148513))
         (push)
         (push.iloc.1 . 1)
         (push.iloc.1 . 2)
         (push.iloc.1 . 3)
         (apply.iloc (2 . 0) "./boot/macro/program.scm" . 148507))
       (push.gloc.of denote-define-syntax)
       (iloc.0 . 0)
       (if.eq?
         (call
           (iloc.1 . 0)
           (if.not.pair?.ret.const . #f)
           (car.iloc (1 . 0) (car |body`2683*|))
           (if.not.pair?.ret.const . #f)
           (push.iloc.1 . 0)
           (subr.gloc.of cdar 1 (cdar |body`2683*|))
           (if.not.pair?.ret.const . #f)
           (push.iloc.1 . 0)
           (subr.gloc.of cddar 1 (cddar |body`2683*|))
           (if.not.pair?.ret.const . #f)
           (push.iloc.1 . 0)
           (subr.gloc.of cdddar 1 (cdddar |body`2683*|))
           (if.not.null?.ret.const . #f)
           (push.cdr.iloc (1 . 0) (cdr |body`2683*|))
           (subr.gloc.of list? 1 (list? (cdr |body`2683*|)))
           (if.false.ret)
           (push.iloc.1 . 0)
           (push.subr.gloc.of cadar 1 (cadar |body`2683*|))
           (ret.subr.gloc.of symbol? (symbol? (cadar |body`2683*|))))
         (if.true
           (push.cdr.iloc (1 . 0) (cdr |body`2683*|))
           (push.iloc.1 . 0)
           (push.subr.gloc.of caddar 1 (caddar |body`2683*|))
           (push.iloc.1 . 0)
           (push.subr.gloc.of cadar 1 (cadar |body`2683*|))
           (extend . 3)
           (call
             (push.iloc 4 . 5)
             (push.iloc.0 . 2)
             (subr.gloc.of
               core-hashtable-contains?
               2
               (core-hashtable-contains? |ht-imported-immutables`2618*| |org`2691*|))
             (if.false.ret)
             (push.const . define-syntax)
             (push.const . "attempt to modify immutable binding")
             (push.car.iloc (2 . 0) (car |body`2683*|))
             (apply.gloc.of
               syntax-violation
               (syntax-violation
                 'define-syntax
                 "attempt to modify immutable binding"
                 (car |body`2683*|))))
           (push.close
             (0 0)
             (push.const . #f)
             (extend . 1)
             (push.close
               (0 0)
               (call
                 (touch.gloc.of current-template-environment)
                 (apply.gloc.of current-template-environment (current-template-environment)))
               (set.iloc (1 . 0) (set! |tmp1`2695`2697*| (current-template-environment)))
               (touch.gloc.of current-template-environment)
               (push.iloc 7 . 0)
               (apply.gloc.of
                 current-template-environment
                 (current-template-environment |initial-libenv`2618*|)))
             (push.close
               (0 0)
               (touch.gloc.of compile-macro)
               (push.car.iloc (5 . 0) (car |body`2683*|))
               (push.iloc 3 . 1)
               (push.iloc 8 . 6)
               (apply.gloc.of
                 compile-macro
                 (compile-macro (car |body`2683*|) |clause`2691*| |env`2617*|)))
             (push.close
               (0 0)
               (touch.gloc.of current-template-environment)
               (push.iloc.1 . 0)
               (apply.gloc.of
                 current-template-environment
                 (current-template-environment |tmp1`2695`2697*|)))
             (apply.gloc.of
               |.dynamic-wind|
               (|.dynamic-wind|
                 (lambda ()
                   (set! |tmp1`2695`2697*| (current-template-environment))
                   (current-template-environment |initial-libenv`2618*|))
                 (lambda () (compile-macro (car |body`2683*|) |clause`2691*| |env`2617*|))
                 (lambda () (current-template-environment |tmp1`2695`2697*|)))))
           (push.close
             (1 1)
             (call
               (touch.gloc.of generate-global-id)
               (push.iloc 6 . 1)
               (push.iloc.1 . 2)
               (apply.gloc.of
                 generate-global-id
                 (generate-global-id |library-id`2617*| |org`2691*|)))
             (push)
             (extend . 1)
             (call
               (push.iloc 2 . 2)
               (call
                 (touch.gloc.of make-import)
                 (push.iloc.0 . 0)
                 (apply.gloc.of make-import (make-import |new`2706*|)))
               (push)
               (apply.iloc (6 . 3) (|extend-libenv!`2618*| |org`2691*| (make-import |new`2706*|))))
             (push.iloc.1 . 0)
             (subr.gloc.of procedure? 1 (procedure? |code`2693*|))
             (if.true
               (call
                 (push.iloc 2 . 2)
                 (call
                   (touch.gloc.of make-macro)
                   (push.iloc.1 . 0)
                   (push.iloc 7 . 6)
                   (apply.gloc.of make-macro (make-macro |code`2693*| |env`2617*|)))
                 (push)
                 (apply.iloc
                   (6 . 2)
                   (|extend-env!`2618*| |org`2691*| (make-macro |code`2693*| |env`2617*|))))
               (push.iloc 2 . 0)
               (push.iloc 4 . 1)
               (push.iloc 2 . 2)
               (push.const . procedure)
               (push.car.iloc (1 . 1) (car |expr`2693*|))
               (push.subr.gloc.of list 3 (list |org`2691*| 'procedure (car |expr`2693*|)))
               (iloc 4 . 2)
               (push.cons)
               (call
                 (touch.gloc.of acons)
                 (push.iloc 2 . 2)
                 (push.iloc.0 . 0)
                 (push.iloc 4 . 3)
                 (apply.gloc.of acons (acons |org`2691*| |new`2706*| |renames`2683*|)))
               (push)
               (apply.iloc
                 (5 . 0)
                 (|loop`2682*|
                   |more`2691*|
                   |defs`2683*|
                   (cons (list |org`2691*| 'procedure (car |expr`2693*|)) |macros`2683*|)
                   (acons |org`2691*| |new`2706*| |renames`2683*|))))
             (call
               (touch.gloc.of macro-variable?)
               (push.iloc.1 . 0)
               (apply.gloc.of macro-variable? (macro-variable? |code`2693*|)))
             (if.true
               (call
                 (push.iloc 2 . 2)
                 (call
                   (touch.gloc.of make-macro-variable)
                   (push.cadr.iloc (1 . 0) (cadr |code`2693*|))
                   (push.iloc 7 . 6)
                   (apply.gloc.of
                     make-macro-variable
                     (make-macro-variable (cadr |code`2693*|) |env`2617*|)))
                 (push)
                 (apply.iloc
                   (6 . 2)
                   (|extend-env!`2618*|
                     |org`2691*|
                     (make-macro-variable (cadr |code`2693*|) |env`2617*|))))
               (push.iloc 2 . 0)
               (push.iloc 4 . 1)
               (push.iloc 2 . 2)
               (push.const . variable)
               (push.car.iloc (1 . 1) (car |expr`2693*|))
               (push.subr.gloc.of list 3 (list |org`2691*| 'variable (car |expr`2693*|)))
               (iloc 4 . 2)
               (push.cons)
               (call
                 (touch.gloc.of acons)
                 (push.iloc 2 . 2)
                 (push.iloc.0 . 0)
                 (push.iloc 4 . 3)
                 (apply.gloc.of acons (acons |org`2691*| |new`2706*| |renames`2683*|)))
               (push)
               (apply.iloc
                 (5 . 0)
                 (|loop`2682*|
                   |more`2691*|
                   |defs`2683*|
                   (cons (list |org`2691*| 'variable (car |expr`2693*|)) |macros`2683*|)
                   (acons |org`2691*| |new`2706*| |renames`2683*|))))
             (call
               (push.iloc 2 . 2)
               (call
                 (touch.gloc.of make-macro)
                 (push.iloc.1 . 0)
                 (push.iloc 7 . 6)
                 (apply.gloc.of make-macro (make-macro |code`2693*| |env`2617*|)))
               (push)
               (apply.iloc
                 (6 . 2)
                 (|extend-env!`2618*| |org`2691*| (make-macro |code`2693*| |env`2617*|))))
             (push.iloc 2 . 0)
             (push.iloc 4 . 1)
             (push.iloc 2 . 2)
             (push.const . template)
             (push.iloc.1 . 0)
             (push.subr.gloc.of list 3 (list |org`2691*| 'template |code`2693*|))
             (iloc 4 . 2)
             (push.cons)
             (call
               (touch.gloc.of acons)
               (push.iloc 2 . 2)
               (push.iloc.0 . 0)
               (push.iloc 4 . 3)
               (apply.gloc.of acons (acons |org`2691*| |new`2706*| |renames`2683*|)))
             (push)
             (apply.iloc
               (5 . 0)
               (|loop`2682*|
                 |more`2691*|
                 |defs`2683*|
                 (cons (list |org`2691*| 'template |code`2693*|) |macros`2683*|)
                 (acons |org`2691*| |new`2706*| |renames`2683*|))))
           (apply.gloc.of
             |.call-with-values|
             (|.call-with-values|
               (lambda ()
                 (let ((|tmp1`2695`2697*| #f))
                   (|.dynamic-wind|
                     (lambda ()
                       (set! |tmp1`2695`2697*| (current-template-environment))
                       (current-template-environment |initial-libenv`2618*|))
                     (lambda () (compile-macro (car |body`2683*|) |clause`2691*| |env`2617*|))
                     (lambda () (current-template-environment |tmp1`2695`2697*|)))))
               (lambda (|code`2693*| . |expr`2693*|)
                 (let ((|new`2706*| (generate-global-id |library-id`2617*| |org`2691*|)))
                   (|extend-libenv!`2618*| |org`2691*| (make-import |new`2706*|))
                   (if (procedure? |code`2693*|)
                       (begin
                         (|extend-env!`2618*| |org`2691*| (make-macro |code`2693*| |env`2617*|))
                         (|loop`2682*|
                           |more`2691*|
                           |defs`2683*|
                           (cons (list |org`2691*| 'procedure (car |expr`2693*|)) |macros`2683*|)
                           (acons |org`2691*| |new`2706*| |renames`2683*|)))
                       (if (macro-variable? |code`2693*|)
                           (begin
                             (|extend-env!`2618*|
                               |org`2691*|
                               (make-macro-variable (cadr |code`2693*|) |env`2617*|))
                             (|loop`2682*|
                               |more`2691*|
                               |defs`2683*|
                               (cons (list |org`2691*| 'variable (car |expr`2693*|)) |macros`2683*|)
                               (acons |org`2691*| |new`2706*| |renames`2683*|)))
                           (begin
                             (|extend-env!`2618*| |org`2691*| (make-macro |code`2693*| |env`2617*|))
                             (|loop`2682*|
                               |more`2691*|
                               |defs`2683*|
                               (cons (list |org`2691*| 'template |code`2693*|) |macros`2683*|)
                               (acons |org`2691*| |new`2706*| |renames`2683*|))))))))))
         (push.const . define-syntax)
         (push.const . "expected symbol and single expression")
         (push.car.iloc (1 . 0) (car |body`2683*|))
         (apply.gloc.of
           syntax-violation
           (syntax-violation
             'define-syntax
             "expected symbol and single expression"
             (car |body`2683*|))))
       (push.gloc.of denote-define)
       (iloc.0 . 0)
       (if.eq?
         (call
           (touch.gloc.of annotate)
           (call
             (touch.gloc.of desugar-define)
             (push.car.iloc (1 . 0) "./boot/macro/program.scm" . 173125)
             (apply.gloc.of desugar-define "./boot/macro/program.scm" . 173109))
           (push)
           (push.subr.gloc.of cdr 1 "./boot/macro/program.scm" . 173104)
           (push.car.iloc (1 . 0) "./boot/macro/program.scm" . 173138)
           (apply.gloc.of annotate "./boot/macro/program.scm" . 173094))
         (push)
         (extend . 1)
         (call
           (push.iloc 4 . 5)
           (push.car.iloc (0 . 0) "./boot/macro/program.scm" . 174163)
           (subr.gloc.of core-hashtable-contains? 2 "./boot/macro/program.scm" . 174114)
           (if.false.ret)
           (push.const . define)
           (push.const . "attempt to modify immutable binding")
           (push.car.iloc (2 . 0) "./boot/macro/program.scm" . 175202)
           (apply.gloc.of syntax-violation "./boot/macro/program.scm" . 175138))
         (push.car.iloc (0 . 0) "./boot/macro/program.scm" . 176168)
         (call
           (touch.gloc.of generate-global-id)
           (push.iloc 5 . 1)
           (push.car.iloc (0 . 0) "./boot/macro/program.scm" . 177223)
           (apply.gloc.of generate-global-id "./boot/macro/program.scm" . 177192))
         (push)
         (extend . 2)
         (call
           (push.iloc.0 . 0)
           (push.iloc.0 . 1)
           (apply.iloc (5 . 2) "./boot/macro/program.scm" . 178207))
         (call
           (push.iloc.0 . 0)
           (call
             (touch.gloc.of make-import)
             (push.iloc.0 . 1)
             (apply.gloc.of make-import "./boot/macro/program.scm" . 179251))
           (push)
           (apply.iloc (5 . 3) "./boot/macro/program.scm" . 179231))
         (push.cdr.iloc (3 . 0) "./boot/macro/program.scm" . 180261)
         (push.iloc.1 . 0)
         (iloc 3 . 1)
         (push.cons)
         (push.iloc 3 . 2)
         (call
           (touch.gloc.of acons)
           (push.iloc.0 . 0)
           (push.iloc.0 . 1)
           (push.iloc 3 . 3)
           (apply.gloc.of acons "./boot/macro/program.scm" . 180295))
         (push)
         (apply.iloc (4 . 0) "./boot/macro/program.scm" . 180255))
       (call
         (call
           (touch.gloc.of macro?)
           (push.iloc.0 . 0)
           (apply.gloc.of macro? "./boot/macro/program.scm" . 181279))
         (if.true.ret)
         (push.gloc.of denote-let-syntax)
         (iloc.0 . 0)
         (if.eq?.ret.const . #t)
         (push.gloc.of denote-letrec-syntax)
         (iloc.0 . 0)
         (ret.eq? "./boot/macro/program.scm" . 183327))
       (if.true
         (push.close
           (0 0)
           (touch.gloc.of expand-initial-forms)
           (push.car.iloc (2 . 0) "./boot/macro/program.scm" . 184394)
           (push.iloc 5 . 6)
           (apply.gloc.of expand-initial-forms "./boot/macro/program.scm" . 184372))
         (push.close
           (2 0)
           (iloc.0 . 1)
           (set.iloc (5 . 6) "./boot/macro/program.scm" . 185373)
           (call
             (touch.gloc.of flatten-begin)
             (push.iloc.0 . 0)
             (push.subr.gloc.of list 1 "./boot/macro/program.scm" . 186426)
             (push.iloc 5 . 6)
             (apply.gloc.of flatten-begin "./boot/macro/program.scm" . 186411))
           (push)
           (push.cdr.iloc (2 . 0) "./boot/macro/program.scm" . 186443)
           (push.subr.gloc.of append 2 "./boot/macro/program.scm" . 186403)
           (push.iloc 2 . 1)
           (push.iloc 2 . 2)
           (push.iloc 2 . 3)
           (apply.iloc (3 . 0) "./boot/macro/program.scm" . 186397))
         (apply.gloc.of |.call-with-values| "./boot/macro/program.scm" . 149531))
       (push.const . |.define|)
       (call (apply.iloc (3 . 6) "./boot/macro/program.scm" . 188466))
       (push)
       (push.car.iloc (1 . 0) "./boot/macro/program.scm" . 188484)
       (push.subr.gloc.of |.list| 3 "./boot/macro/program.scm" . 188449)
       (cdr.iloc (1 . 0) "./boot/macro/program.scm" . 188496)
       (push.cons)
       (push.iloc.1 . 1)
       (push.iloc.1 . 2)
       (push.iloc.1 . 3)
       (apply.iloc (2 . 0) "./boot/macro/program.scm" . 188443))
     (push.const . |.define|)
     (call (apply.iloc (2 . 6) "./boot/macro/program.scm" . 190505))
     (push)
     (push.car.iloc (0 . 0) "./boot/macro/program.scm" . 190523)
     (push.subr.gloc.of |.list| 3 "./boot/macro/program.scm" . 190488)
     (cdr.iloc (0 . 0) "./boot/macro/program.scm" . 190535)
     (push.cons)
     (push.iloc.0 . 1)
     (push.iloc.0 . 2)
     (push.iloc.0 . 3)
     (apply.iloc (1 . 0) "./boot/macro/program.scm" . 190482))
   (call
     (touch.gloc.of flatten-begin)
     (push.iloc 2 . 3)
     (push.iloc 2 . 6)
     (apply.gloc.of flatten-begin "./boot/macro/program.scm" . 142358))
   (push)
   (push.const)
   (push.const)
   (push.const)
   (apply.iloc (0 . 0) "./boot/macro/program.scm" . 143367))
 (set.gloc.of expand-top-level-program-body)
 (ret.const.unspec))

;
((call
   (call
     (push.const . sizeof:void*)
     (push.subr.gloc.of architecture-feature 1 "./boot/macro/r7rs.scm" . 7182)
     (push.const . 64)
     (subr.gloc.of = 2 "./boot/macro/r7rs.scm" . 7179)
     (if.true (ret.const . lp64))
     (ret.const . ilp32))
   (push)
   (subr.gloc.of native-endianness 0)
   (push)
   (push.subr.gloc.of symbol->string 1 "./boot/macro/r7rs.scm" . 8230)
   (push.const . "-endian")
   (push.subr.gloc.of string-append 2 "./boot/macro/r7rs.scm" . 8215)
   (push.subr.gloc.of string->symbol 1 "./boot/macro/r7rs.scm" . 8199)
   (push.const
     r7rs
     exact-closed
     exact-complex
     ieee-float
     full-unicode
     ratios
     posix
     digamma
     digamma-1)
   (push.subr.gloc.of cons* 3 "./boot/macro/r7rs.scm" . 6149)
   (apply.gloc.of make-parameter "./boot/macro/r7rs.scm" . 5123))
 (set.gloc.of feature-identifies)
 (ret.const.unspec))
((close
   (2 0 . fulfill-feature-requirements?)
   (extend.enclose+
     (1 0 . loop)
     (call
       (iloc.0 . 0)
       (if.not.pair?.ret.const . #f)
       (cdr.iloc (0 . 0) "./boot/macro/r7rs.scm" . 14343)
       (ret.pair? "./boot/macro/r7rs.scm" . 14343))
     (push)
     (extend . 1)
     (call
       (iloc.1 . 0)
       (if.not.pair?.ret.const . #f)
       (cdr.iloc (1 . 0) "./boot/macro/r7rs.scm" . 14343)
       (ret.null? "./boot/macro/r7rs.scm" . 14343))
     (push)
     (extend . 1)
     (call
       (iloc.1 . 0)
       (if.false.ret)
       (cddr.iloc (2 . 0) "./boot/macro/r7rs.scm" . 14343)
       (ret.null? "./boot/macro/r7rs.scm" . 14343))
     (push)
     (extend . 1)
     (iloc 3 . 0)
     (if.symbol?
       (push.iloc 3 . 0)
       (call (apply.gloc.of feature-identifies "./boot/macro/r7rs.scm" . 14343))
       (push)
       (ret.subr.gloc.of memq "./boot/macro/r7rs.scm" . 14343))
     (call
       (iloc.1 . 0)
       (if.false.ret)
       (push.car.iloc (3 . 0) "./boot/macro/r7rs.scm" . 14343)
       (const . and)
       (ret.eq? "./boot/macro/r7rs.scm" . 14343))
     (if.true.ret.const . #t)
     (call
       (iloc 2 . 0)
       (if.false.ret)
       (push.car.iloc (3 . 0) "./boot/macro/r7rs.scm" . 14343)
       (const . and)
       (ret.eq? "./boot/macro/r7rs.scm" . 14343))
     (if.true
       (push.cddr.iloc (3 . 0) "./boot/macro/r7rs.scm" . 14343)
       (push.cadr.iloc (3 . 0) "./boot/macro/r7rs.scm" . 14343)
       (extend . 2)
       (call
         (iloc.0 . 1)
         (if.symbol?
           (push.iloc.0 . 1)
           (call (apply.gloc.of feature-identifies "./boot/macro/r7rs.scm" . 14343))
           (push)
           (ret.subr.gloc.of memq "./boot/macro/r7rs.scm" . 14343))
         (push.iloc.0 . 1)
         (apply.iloc+ (5 . 0) "./boot/macro/r7rs.scm" . 14343))
       (if.false.ret)
       (push.const . and)
       (iloc.0 . 0)
       (push.cons)
       (apply.iloc+ (5 . 0) "./boot/macro/r7rs.scm" . 14343))
     (call
       (iloc.1 . 0)
       (if.false.ret)
       (push.car.iloc (3 . 0) "./boot/macro/r7rs.scm" . 14343)
       (const . or)
       (ret.eq? "./boot/macro/r7rs.scm" . 14343))
     (if.true.ret.const . #f)
     (call
       (iloc 2 . 0)
       (if.false.ret)
       (push.car.iloc (3 . 0) "./boot/macro/r7rs.scm" . 14343)
       (const . or)
       (ret.eq? "./boot/macro/r7rs.scm" . 14343))
     (if.true
       (push.cddr.iloc (3 . 0) "./boot/macro/r7rs.scm" . 14343)
       (push.cadr.iloc (3 . 0) "./boot/macro/r7rs.scm" . 14343)
       (extend . 2)
       (call
         (iloc.0 . 1)
         (if.symbol?
           (push.iloc.0 . 1)
           (call (apply.gloc.of feature-identifies "./boot/macro/r7rs.scm" . 14343))
           (push)
           (ret.subr.gloc.of memq "./boot/macro/r7rs.scm" . 14343))
         (push.iloc.0 . 1)
         (apply.iloc+ (5 . 0) "./boot/macro/r7rs.scm" . 14343))
       (if.true.ret)
       (push.const . or)
       (iloc.0 . 0)
       (push.cons)
       (apply.iloc+ (5 . 0) "./boot/macro/r7rs.scm" . 14343))
     (call
       (iloc.1 . 0)
       (if.false.ret)
       (push.car.iloc (3 . 0) "./boot/macro/r7rs.scm" . 14343)
       (const . not)
       (ret.eq? "./boot/macro/r7rs.scm" . 14343))
     (if.true
       (push.const . cond-expand)
       (push.const . "malformed clause")
       (call
         (touch.gloc.of abbreviated-take-form)
         (push.iloc 5 . 0)
         (push.const . 4)
         (push.const . 8)
         (apply.gloc.of abbreviated-take-form "./boot/macro/r7rs.scm" . 14343))
       (push)
       (push.iloc 3 . 0)
       (apply.gloc.of syntax-violation "./boot/macro/r7rs.scm" . 14343))
     (call
       (iloc.0 . 0)
       (if.false.ret)
       (push.car.iloc (3 . 0) "./boot/macro/r7rs.scm" . 14343)
       (const . not)
       (ret.eq? "./boot/macro/r7rs.scm" . 14343))
     (if.true
       (call
         (push.cadr.iloc (3 . 0) "./boot/macro/r7rs.scm" . 14343)
         (apply.iloc+ (4 . 0) "./boot/macro/r7rs.scm" . 14343))
       (push)
       (ret.subr.gloc.of not "./boot/macro/r7rs.scm" . 14343))
     (call
       (iloc.0 . 0)
       (if.false.ret)
       (push.car.iloc (3 . 0) "./boot/macro/r7rs.scm" . 14343)
       (const . library)
       (ret.eq? "./boot/macro/r7rs.scm" . 14343))
     (if.true
       (push.cadr.iloc (3 . 0) "./boot/macro/r7rs.scm" . 14343)
       (push.const (core primitives) '(core intrinsics))
       (subr.gloc.of member 2 "./boot/macro/r7rs.scm" . 14343)
       (if.true.ret)
       (touch.gloc.of locate-library-file)
       (push.cadr.iloc (3 . 0) "./boot/macro/r7rs.scm" . 14343)
       (apply.gloc.of locate-library-file "./boot/macro/r7rs.scm" . 14343))
     (push.const . cond-expand)
     (push.const . "malformed clause")
     (call
       (touch.gloc.of abbreviated-take-form)
       (push.iloc 5 . 0)
       (push.const . 4)
       (push.const . 8)
       (apply.gloc.of abbreviated-take-form "./boot/macro/r7rs.scm" . 14343))
     (push)
     (push.iloc 3 . 0)
     (apply.gloc.of syntax-violation "./boot/macro/r7rs.scm" . 14343))
   (push.iloc.1 . 1)
   (apply.iloc+ (0 . 0) "./boot/macro/r7rs.scm" . 14343))
 (set.gloc.of fulfill-feature-requirements?)
 (ret.const.unspec))
((close
   (1 0)
   (touch.gloc.of read-include-file)
   (push.const . #f)
   (push.iloc.0 . 0)
   (push.const . include)
   (apply.gloc.of read-include-file "./boot/macro/r7rs.scm" . 42030))
 (set.gloc.of |.L733|)
 (close
   (2 0 . expand-include)
   (push.const . begin)
   (call
     (push.gloc.of append)
     (call
       (push.gloc.of |.L733|)
       (push.cdr.iloc (0 . 0) "./boot/macro/r7rs.scm" . 42065)
       (apply.gloc.of map "./boot/macro/r7rs.scm" . 42013))
     (push)
     (apply.gloc.of apply "./boot/macro/r7rs.scm" . 41999))
   (ret.cons "./boot/macro/r7rs.scm" . 40963))
 (set.gloc.of expand-include)
 (ret.const.unspec))
((close
   (1 0)
   (touch.gloc.of read-include-file)
   (push.const . #f)
   (push.iloc.0 . 0)
   (push.const . include-ci)
   (apply.gloc.of read-include-file "./boot/macro/r7rs.scm" . 46126))
 (set.gloc.of |.L736|)
 (close
   (2 0 . expand-include-ci)
   (push.const . begin)
   (call
     (push.gloc.of append)
     (call
       (push.gloc.of |.L736|)
       (push.cdr.iloc (0 . 0) "./boot/macro/r7rs.scm" . 46164)
       (apply.gloc.of map "./boot/macro/r7rs.scm" . 46109))
     (push)
     (apply.gloc.of apply "./boot/macro/r7rs.scm" . 46095))
   (ret.cons "./boot/macro/r7rs.scm" . 45059))
 (set.gloc.of expand-include-ci)
 (ret.const.unspec))
((close
   (2 0 . parse-cond-expand)
   (extend.enclose+
     (1 0 . loop)
     (call
       (iloc.0 . 0)
       (if.not.pair?.ret.const . #f)
       (car.iloc (0 . 0) "./boot/macro/r7rs.scm" . 51207)
       (ret.pair? "./boot/macro/r7rs.scm" . 51207))
     (push)
     (extend . 1)
     (call
       (iloc.0 . 0)
       (if.false.ret)
       (push.iloc.1 . 0)
       (push.subr.gloc.of cdar 1 "./boot/macro/r7rs.scm" . 51207)
       (ret.subr.gloc.of list? "./boot/macro/r7rs.scm" . 51207))
     (push)
     (extend . 1)
     (iloc 2 . 0)
     (if.null?.ret.const)
     (call
       (iloc.1 . 0)
       (if.false.ret)
       (cdr.iloc (2 . 0) "./boot/macro/r7rs.scm" . 51207)
       (if.not.null?.ret.const . #f)
       (push.iloc 2 . 0)
       (push.subr.gloc.of cdar 1 "./boot/macro/r7rs.scm" . 51207)
       (subr.gloc.of list? 1 "./boot/macro/r7rs.scm" . 51207)
       (if.false.ret)
       (push.iloc 2 . 0)
       (push.subr.gloc.of caar 1 "./boot/macro/r7rs.scm" . 51207)
       (const . else)
       (ret.eq? "./boot/macro/r7rs.scm" . 51207))
     (if.true (push.iloc 2 . 0) (ret.subr.gloc.of cdar "./boot/macro/r7rs.scm" . 51207))
     (call
       (iloc.0 . 0)
       (if.false.ret)
       (push.iloc 2 . 0)
       (push.subr.gloc.of caar 1 "./boot/macro/r7rs.scm" . 51207)
       (const . else)
       (ret.eq? "./boot/macro/r7rs.scm" . 51207))
     (if.true
       (push.const . cond-expand)
       (push.const . "misplaced else")
       (call
         (touch.gloc.of abbreviated-take-form)
         (push.iloc 4 . 0)
         (push.const . 4)
         (push.const . 8)
         (apply.gloc.of abbreviated-take-form "./boot/macro/r7rs.scm" . 51207))
       (push)
       (push.car.iloc (2 . 0) "./boot/macro/r7rs.scm" . 51207)
       (apply.gloc.of syntax-violation "./boot/macro/r7rs.scm" . 51207))
     (iloc.0 . 0)
     (if.true
       (push.cdr.iloc (2 . 0) "./boot/macro/r7rs.scm" . 51207)
       (push.iloc 2 . 0)
       (push.subr.gloc.of cdar 1 "./boot/macro/r7rs.scm" . 51207)
       (extend . 2)
       (call
         (push.iloc 5 . 0)
         (push.iloc 3 . 0)
         (push.subr.gloc.of caar 1 "./boot/macro/r7rs.scm" . 51207)
         (apply.gloc.of fulfill-feature-requirements? "./boot/macro/r7rs.scm" . 51207))
       (if.true (ret.iloc 0 . 1))
       (push.iloc.0 . 0)
       (apply.iloc+ (4 . 0) "./boot/macro/r7rs.scm" . 51207))
     (push.const . cond-expand)
     (push.const . "malformed clause")
     (call
       (touch.gloc.of abbreviated-take-form)
       (push.iloc 4 . 0)
       (push.const . 4)
       (push.const . 8)
       (apply.gloc.of abbreviated-take-form "./boot/macro/r7rs.scm" . 51207))
     (push)
     (push.car.iloc (2 . 0) "./boot/macro/r7rs.scm" . 51207)
     (apply.gloc.of syntax-violation "./boot/macro/r7rs.scm" . 51207))
   (push.iloc.1 . 1)
   (apply.iloc+ (0 . 0) "./boot/macro/r7rs.scm" . 51207))
 (set.gloc.of parse-cond-expand)
 (ret.const.unspec))
((close
   (1 0 . permute-env)
   (touch.gloc.of |loop`2787*|)
   (push.iloc.0 . 0)
   (push.subr.gloc.of core-hashtable->alist 1 "./boot/macro/r7rs.scm" . 66585)
   (push.const)
   (push.const)
   (apply.gloc.of |loop`2787*| "./boot/macro/r7rs.scm" . 67595))
 (set.gloc.of |permute-env`2781*|)
 (close
   (3 0 . loop)
   (iloc.0 . 0)
   (if.null?
     (push.iloc.0 . 1)
     (push.iloc.0 . 2)
     (ret.subr.gloc.of append "./boot/macro/r7rs.scm" . 67614))
   (call
     (touch.gloc.of unbound?)
     (push.iloc.0 . 0)
     (push.subr.gloc.of cdar 1 "./boot/macro/r7rs.scm" . 67651)
     (apply.gloc.of unbound? "./boot/macro/r7rs.scm" . 67641))
   (if.true
     (touch.gloc.of |loop`2787*|)
     (push.cdr.iloc (0 . 0) "./boot/macro/r7rs.scm" . 67669)
     (push.iloc.0 . 1)
     (push.car.iloc (0 . 0) "./boot/macro/r7rs.scm" . 67692)
     (iloc.0 . 2)
     (push.cons)
     (apply.gloc.of |loop`2787*| "./boot/macro/r7rs.scm" . 67663))
   (touch.gloc.of |loop`2787*|)
   (push.cdr.iloc (0 . 0) "./boot/macro/r7rs.scm" . 67726)
   (push.car.iloc (0 . 0) "./boot/macro/r7rs.scm" . 67742)
   (iloc.0 . 1)
   (push.cons)
   (push.iloc.0 . 2)
   (apply.gloc.of |loop`2787*| "./boot/macro/r7rs.scm" . 67720))
 (set.gloc.of |loop`2787*|)
 (close
   (2 0 . expand-define-library)
   (call
     (iloc.0 . 0)
     (if.not.pair?.ret.const . #f)
     (cdr.iloc (0 . 0) "./boot/macro/r7rs.scm" . 69637)
     (if.not.pair?.ret.const . #f)
     (push.cddr.iloc (0 . 0) "./boot/macro/r7rs.scm" . 69637)
     (ret.subr.gloc.of list? "./boot/macro/r7rs.scm" . 69637))
   (if.true
     (push.cddr.iloc (0 . 0) "./boot/macro/r7rs.scm" . 69637)
     (push.cadr.iloc (0 . 0) "./boot/macro/r7rs.scm" . 69637)
     (extend . 2)
     (call
       (touch.gloc.of library-name->id)
       (push.iloc.1 . 0)
       (push.iloc.0 . 1)
       (apply.gloc.of library-name->id "./boot/macro/r7rs.scm" . 69637))
     (push)
     (call
       (touch.gloc.of library-name->version)
       (push.iloc.1 . 0)
       (push.iloc.0 . 1)
       (apply.gloc.of library-name->version "./boot/macro/r7rs.scm" . 69637))
     (push)
     (extend . 2)
     (call
       (iloc.0 . 1)
       (if.false.ret)
       (call
         (touch.gloc.of scheme-library-versions)
         (apply.gloc.of scheme-library-versions "./boot/macro/r7rs.scm" . 69637))
       (push)
       (push.iloc.0 . 0)
       (push.iloc.0 . 1)
       (ret.subr.gloc.of core-hashtable-set! "./boot/macro/r7rs.scm" . 69637))
     (push.const . #f)
     (subr.gloc.of make-core-hashtable 0)
     (push)
     (extend . 2)
     (push.close
       (0 0)
       (call
         (touch.gloc.of current-include-files)
         (apply.gloc.of current-include-files "./boot/macro/r7rs.scm" . 69637))
       (set.iloc (1 . 0) "./boot/macro/r7rs.scm" . 69637)
       (touch.gloc.of current-include-files)
       (push.iloc.1 . 1)
       (apply.gloc.of current-include-files "./boot/macro/r7rs.scm" . 69637))
     (push.close
       (0 0)
       (call
         (extend.enclose+
           (5 0 . loop)
           (iloc.0 . 0)
           (if.null?
             (subr.gloc.of make-core-hashtable 0)
             (push)
             (subr.gloc.of make-core-hashtable 0)
             (push)
             (subr.gloc.of make-core-hashtable 0)
             (push)
             (extend . 3)
             (call
               (push.close
                 (1 0)
                 (call
                   (push.iloc.1 . 2)
                   (push.cdr.iloc (0 . 0) "./boot/macro/r7rs.scm" . 69637)
                   (push.const . #f)
                   (subr.gloc.of core-hashtable-ref 3 "./boot/macro/r7rs.scm" . 69637)
                   (if.false.ret)
                   (push.const . define-library)
                   (push.const . "duplicate export identifiers")
                   (call
                     (touch.gloc.of abbreviated-take-form)
                     (push.iloc 8 . 0)
                     (push.const . 4)
                     (push.const . 8)
                     (apply.gloc.of abbreviated-take-form "./boot/macro/r7rs.scm" . 69637))
                   (push)
                   (push.cdr.iloc (0 . 0) "./boot/macro/r7rs.scm" . 69637)
                   (apply.gloc.of syntax-violation "./boot/macro/r7rs.scm" . 69637))
                 (push.iloc.1 . 2)
                 (push.cdr.iloc (0 . 0) "./boot/macro/r7rs.scm" . 69637)
                 (push.const . #t)
                 (subr.gloc.of core-hashtable-set! 3 "./boot/macro/r7rs.scm" . 69637)
                 (push.iloc.1 . 0)
                 (push.car.iloc (0 . 0) "./boot/macro/r7rs.scm" . 69637)
                 (push.const . #t)
                 (ret.subr.gloc.of core-hashtable-set! "./boot/macro/r7rs.scm" . 69637))
               (push.iloc.1 . 1)
               (apply.gloc.of for-each "./boot/macro/r7rs.scm" . 69637))
             (call
               (push.close
                 (1 0)
                 (push.iloc.1 . 0)
                 (push.car.iloc (0 . 0) "./boot/macro/r7rs.scm" . 69637)
                 (push.const . #t)
                 (subr.gloc.of core-hashtable-set! 3 "./boot/macro/r7rs.scm" . 69637)
                 (push.iloc.1 . 1)
                 (push.car.iloc (0 . 0) "./boot/macro/r7rs.scm" . 69637)
                 (push.const . #f)
                 (push.subr.gloc.of core-hashtable-ref 3 "./boot/macro/r7rs.scm" . 69637)
                 (extend . 1)
                 (iloc.0 . 0)
                 (if.true
                   (push.iloc.0 . 0)
                   (cdr.iloc (1 . 0) "./boot/macro/r7rs.scm" . 69637)
                   (if.eq?.ret.const . #t)
                   (push.const . define-library)
                   (push.const . "duplicate import identifiers")
                   (call
                     (touch.gloc.of abbreviated-take-form)
                     (push.iloc 9 . 0)
                     (push.const . 4)
                     (push.const . 8)
                     (apply.gloc.of abbreviated-take-form "./boot/macro/r7rs.scm" . 69637))
                   (push)
                   (push.car.iloc (1 . 0) "./boot/macro/r7rs.scm" . 69637)
                   (apply.gloc.of syntax-violation "./boot/macro/r7rs.scm" . 69637))
                 (push.iloc 2 . 1)
                 (push.car.iloc (1 . 0) "./boot/macro/r7rs.scm" . 69637)
                 (push.cdr.iloc (1 . 0) "./boot/macro/r7rs.scm" . 69637)
                 (ret.subr.gloc.of core-hashtable-set! "./boot/macro/r7rs.scm" . 69637))
               (push.iloc.1 . 2)
               (apply.gloc.of
                 for-each
                 (for-each (lambda (|a`2816*|)
                             (core-hashtable-set! |ht-immutables`2812*| (car |a`2816*|) #t)
                             (let ((|.L746`2818*|
                                     (core-hashtable-ref |ht-imports`2812*| (car |a`2816*|) #f)))
                               (if |.L746`2818*|
                                   (or (eq? |.L746`2818*| (cdr |a`2816*|))
                                       (syntax-violation
                                         'define-library
                                         "duplicate import identifiers"
                                         (abbreviated-take-form |form`2780*| 4 8)
                                         (car |a`2816*|)))
                                   (core-hashtable-set!
                                     |ht-imports`2812*|
                                     (car |a`2816*|)
                                     (cdr |a`2816*|)))))
                           |imports`2810*|)))
             (call
               (touch.gloc.of make-shield-id-table)
               (push.iloc.1 . 4)
               (apply.gloc.of make-shield-id-table "./boot/macro/r7rs.scm" . 69637))
             (push)
             (subr.gloc.of make-core-hashtable 0)
             (push)
             (extend . 2)
             (call
               (push.close
                 (1 0)
                 (push.iloc.1 . 0)
                 (push.car.iloc (0 . 0) "./boot/macro/r7rs.scm" . 69637)
                 (push.cdr.iloc (0 . 0) "./boot/macro/r7rs.scm" . 69637)
                 (subr.gloc.of core-hashtable-set! 3 "./boot/macro/r7rs.scm" . 69637)
                 (push.iloc.1 . 1)
                 (push.car.iloc (0 . 0) "./boot/macro/r7rs.scm" . 69637)
                 (push.cdr.iloc (0 . 0) "./boot/macro/r7rs.scm" . 69637)
                 (ret.subr.gloc.of core-hashtable-set! "./boot/macro/r7rs.scm" . 69637))
               (push.iloc.1 . 1)
               (push.subr.gloc.of core-hashtable->alist 1 "./boot/macro/r7rs.scm" . 69637)
               (apply.gloc.of for-each "./boot/macro/r7rs.scm" . 69637))
             (push.const . #f)
             (extend . 1)
             (push.close
               (0 0)
               (call
                 (touch.gloc.of current-immutable-identifiers)
                 (apply.gloc.of current-immutable-identifiers "./boot/macro/r7rs.scm" . 69637))
               (set.iloc (1 . 0) "./boot/macro/r7rs.scm" . 69637)
               (touch.gloc.of current-immutable-identifiers)
               (push.iloc 3 . 0)
               (apply.gloc.of current-immutable-identifiers "./boot/macro/r7rs.scm" . 69637))
             (push.close
               (0 0)
               (touch.gloc.of expand-define-library-body)
               (push.iloc 10 . 0)
               (push.iloc 8 . 0)
               (push.iloc 8 . 1)
               (push.iloc 4 . 4)
               (push.iloc 4 . 1)
               (push.iloc 4 . 2)
               (push.iloc 4 . 3)
               (call
                 (touch.gloc.of extend-env)
                 (push.gloc.of private-primitives-environment)
                 (call
                   (touch.gloc.of |permute-env`2781*|)
                   (push.iloc 2 . 0)
                   (apply.gloc.of |permute-env`2781*| "./boot/macro/r7rs.scm" . 69637))
                 (push)
                 (apply.gloc.of extend-env "./boot/macro/r7rs.scm" . 69637))
               (push)
               (call
                 (touch.gloc.of |permute-env`2781*|)
                 (push.iloc 2 . 1)
                 (apply.gloc.of |permute-env`2781*| "./boot/macro/r7rs.scm" . 69637))
               (push)
               (apply.gloc.of expand-define-library-body "./boot/macro/r7rs.scm" . 69637))
             (push.close
               (0 0)
               (touch.gloc.of current-immutable-identifiers)
               (push.iloc.1 . 0)
               (apply.gloc.of current-immutable-identifiers "./boot/macro/r7rs.scm" . 69637))
             (apply.gloc.of |.dynamic-wind| "./boot/macro/r7rs.scm" . 69637))
           (call
             (iloc.0 . 0)
             (if.not.pair?.ret.const . #f)
             (car.iloc (0 . 0) "./boot/macro/r7rs.scm" . 69637)
             (if.not.pair?.ret.const . #f)
             (push.iloc.0 . 0)
             (push.subr.gloc.of cdar 1 "./boot/macro/r7rs.scm" . 69637)
             (subr.gloc.of list? 1 "./boot/macro/r7rs.scm" . 69637)
             (if.false.ret)
             (push.cdr.iloc (0 . 0) "./boot/macro/r7rs.scm" . 69637)
             (ret.subr.gloc.of list? "./boot/macro/r7rs.scm" . 69637))
           (push)
           (extend . 1)
           (call
             (iloc.0 . 0)
             (if.false.ret)
             (push.iloc.1 . 0)
             (push.subr.gloc.of caar 1 "./boot/macro/r7rs.scm" . 69637)
             (const . export)
             (ret.eq? "./boot/macro/r7rs.scm" . 69637))
           (if.true
             (push.cdr.iloc (1 . 0) "./boot/macro/r7rs.scm" . 69637)
             (push.iloc.1 . 1)
             (call
               (touch.gloc.of parse-exports)
               (push.iloc 7 . 0)
               (push.iloc.1 . 0)
               (push.subr.gloc.of cdar 1 "./boot/macro/r7rs.scm" . 69637)
               (apply.gloc.of parse-exports "./boot/macro/r7rs.scm" . 69637))
             (push)
             (push.subr.gloc.of append 2 "./boot/macro/r7rs.scm" . 69637)
             (push.iloc.1 . 2)
             (push.iloc.1 . 3)
             (push.iloc.1 . 4)
             (apply.iloc+ (2 . 0) "./boot/macro/r7rs.scm" . 69637))
           (call
             (iloc.0 . 0)
             (if.false.ret)
             (push.iloc.1 . 0)
             (push.subr.gloc.of caar 1 "./boot/macro/r7rs.scm" . 69637)
             (const . import)
             (ret.eq? "./boot/macro/r7rs.scm" . 69637))
           (if.true
             (push.iloc.1 . 0)
             (push.subr.gloc.of cdar 1 "./boot/macro/r7rs.scm" . 69637)
             (extend . 1)
             (push.cdr.iloc (2 . 0) "./boot/macro/r7rs.scm" . 69637)
             (push.iloc 2 . 1)
             (push.iloc 2 . 2)
             (call
               (touch.gloc.of parse-imports)
               (push.iloc 8 . 0)
               (push.iloc.0 . 0)
               (apply.gloc.of parse-imports "./boot/macro/r7rs.scm" . 69637))
             (push)
             (push.subr.gloc.of append 2 "./boot/macro/r7rs.scm" . 69637)
             (push.iloc 2 . 3)
             (call
               (touch.gloc.of parse-depends)
               (push.iloc 8 . 0)
               (push.iloc.0 . 0)
               (apply.gloc.of parse-depends "./boot/macro/r7rs.scm" . 69637))
             (push)
             (push.subr.gloc.of append 2 "./boot/macro/r7rs.scm" . 69637)
             (push.iloc 2 . 4)
             (apply.iloc+ (3 . 0) "./boot/macro/r7rs.scm" . 69637))
           (call
             (iloc.0 . 0)
             (if.false.ret)
             (push.iloc.1 . 0)
             (push.subr.gloc.of caar 1 "./boot/macro/r7rs.scm" . 69637)
             (const . include)
             (if.not.eq?.ret.const . #f)
             (touch.gloc.of every1)
             (push.gloc.of string?)
             (push.iloc.1 . 0)
             (push.subr.gloc.of cdar 1 "./boot/macro/r7rs.scm" . 69637)
             (apply.gloc.of every1 "./boot/macro/r7rs.scm" . 69637))
           (if.true
             (push.cdr.iloc (1 . 0) "./boot/macro/r7rs.scm" . 69637)
             (extend . 1)
             (push.const . begin)
             (call
               (push.gloc.of append)
               (call
                 (push.close
                   (1 0)
                   (touch.gloc.of read-include-file)
                   (push.iloc 8 . 1)
                   (push.iloc.0 . 0)
                   (push.const . include)
                   (apply.gloc.of read-include-file "./boot/macro/r7rs.scm" . 69637))
                 (push.iloc 2 . 0)
                 (push.subr.gloc.of cdar 1 "./boot/macro/r7rs.scm" . 69637)
                 (apply.gloc.of map "./boot/macro/r7rs.scm" . 69637))
               (push)
               (apply.gloc.of apply "./boot/macro/r7rs.scm" . 69637))
             (push.cons)
             (iloc.0 . 0)
             (push.cons)
             (push.iloc 2 . 1)
             (push.iloc 2 . 2)
             (push.iloc 2 . 3)
             (push.iloc 2 . 4)
             (apply.iloc+ (3 . 0) "./boot/macro/r7rs.scm" . 69637))
           (call
             (iloc.0 . 0)
             (if.false.ret)
             (push.iloc.1 . 0)
             (push.subr.gloc.of caar 1 "./boot/macro/r7rs.scm" . 69637)
             (const . include-ci)
             (if.not.eq?.ret.const . #f)
             (touch.gloc.of every1)
             (push.gloc.of string?)
             (push.iloc.1 . 0)
             (push.subr.gloc.of cdar 1 "./boot/macro/r7rs.scm" . 69637)
             (apply.gloc.of every1 "./boot/macro/r7rs.scm" . 69637))
           (if.true
             (push.cdr.iloc (1 . 0) "./boot/macro/r7rs.scm" . 69637)
             (extend . 1)
             (push.const . begin)
             (call
               (push.gloc.of append)
               (call
                 (push.close
                   (1 0)
                   (touch.gloc.of read-include-file)
                   (push.iloc 8 . 1)
                   (push.iloc.0 . 0)
                   (push.const . include-ci)
                   (apply.gloc.of read-include-file "./boot/macro/r7rs.scm" . 69637))
                 (push.iloc 2 . 0)
                 (push.subr.gloc.of cdar 1 "./boot/macro/r7rs.scm" . 69637)
                 (apply.gloc.of map "./boot/macro/r7rs.scm" . 69637))
               (push)
               (apply.gloc.of apply "./boot/macro/r7rs.scm" . 69637))
             (push.cons)
             (iloc.0 . 0)
             (push.cons)
             (push.iloc 2 . 1)
             (push.iloc 2 . 2)
             (push.iloc 2 . 3)
             (push.iloc 2 . 4)
             (apply.iloc+ (3 . 0) "./boot/macro/r7rs.scm" . 69637))
           (call
             (iloc.0 . 0)
             (if.false.ret)
             (push.iloc.1 . 0)
             (push.subr.gloc.of caar 1 "./boot/macro/r7rs.scm" . 69637)
             (const . include-library-declarations)
             (if.not.eq?.ret.const . #f)
             (touch.gloc.of every1)
             (push.gloc.of string?)
             (push.iloc.1 . 0)
             (push.subr.gloc.of cdar 1 "./boot/macro/r7rs.scm" . 69637)
             (apply.gloc.of every1 "./boot/macro/r7rs.scm" . 69637))
           (if.true
             (push.cdr.iloc (1 . 0) "./boot/macro/r7rs.scm" . 69637)
             (extend . 1)
             (call
               (push.gloc.of append)
               (call
                 (push.close
                   (1 0)
                   (touch.gloc.of read-include-file)
                   (push.iloc 8 . 1)
                   (push.iloc.0 . 0)
                   (push.const . include-library-declarations)
                   (apply.gloc.of read-include-file "./boot/macro/r7rs.scm" . 69637))
                 (push.iloc 2 . 0)
                 (push.subr.gloc.of cdar 1 "./boot/macro/r7rs.scm" . 69637)
                 (apply.gloc.of map "./boot/macro/r7rs.scm" . 69637))
               (push)
               (apply.gloc.of apply "./boot/macro/r7rs.scm" . 69637))
             (push)
             (push.iloc.0 . 0)
             (push.subr.gloc.of append 2 "./boot/macro/r7rs.scm" . 69637)
             (push.iloc 2 . 1)
             (push.iloc 2 . 2)
             (push.iloc 2 . 3)
             (push.iloc 2 . 4)
             (apply.iloc+ (3 . 0) "./boot/macro/r7rs.scm" . 69637))
           (call
             (iloc.0 . 0)
             (if.false.ret)
             (push.iloc.1 . 0)
             (push.subr.gloc.of caar 1 "./boot/macro/r7rs.scm" . 69637)
             (const . cond-expand)
             (ret.eq? "./boot/macro/r7rs.scm" . 69637))
           (if.true
             (push.cdr.iloc (1 . 0) "./boot/macro/r7rs.scm" . 69637)
             (extend . 1)
             (call
               (touch.gloc.of parse-cond-expand)
               (push.iloc 8 . 0)
               (push.iloc 2 . 0)
               (push.subr.gloc.of cdar 1 "./boot/macro/r7rs.scm" . 69637)
               (apply.gloc.of parse-cond-expand "./boot/macro/r7rs.scm" . 69637))
             (push)
             (push.iloc.0 . 0)
             (push.subr.gloc.of append 2 "./boot/macro/r7rs.scm" . 69637)
             (push.iloc 2 . 1)
             (push.iloc 2 . 2)
             (push.iloc 2 . 3)
             (push.iloc 2 . 4)
             (apply.iloc+ (3 . 0) "./boot/macro/r7rs.scm" . 69637))
           (call
             (iloc.0 . 0)
             (if.false.ret)
             (push.iloc.1 . 0)
             (push.subr.gloc.of caar 1 "./boot/macro/r7rs.scm" . 69637)
             (const . begin)
             (ret.eq? "./boot/macro/r7rs.scm" . 69637))
           (if.true
             (push.cdr.iloc (1 . 0) "./boot/macro/r7rs.scm" . 69637)
             (push.iloc.1 . 1)
             (push.iloc.1 . 2)
             (push.iloc.1 . 3)
             (push.iloc.1 . 4)
             (push.iloc.1 . 0)
             (push.subr.gloc.of cdar 1 "./boot/macro/r7rs.scm" . 69637)
             (push.subr.gloc.of append 2 "./boot/macro/r7rs.scm" . 69637)
             (apply.iloc+ (2 . 0) "./boot/macro/r7rs.scm" . 69637))
           (push.const . define-library)
           (push.const . "malformed library declarations")
           (call
             (touch.gloc.of abbreviated-take-form)
             (push.iloc 7 . 0)
             (push.const . 4)
             (push.const . 8)
             (apply.gloc.of abbreviated-take-form "./boot/macro/r7rs.scm" . 69637))
           (push)
           (push.car.iloc (1 . 0) "./boot/macro/r7rs.scm" . 69637)
           (apply.gloc.of syntax-violation "./boot/macro/r7rs.scm" . 69637))
         (push.iloc 4 . 0)
         (push.const)
         (push.const)
         (push.const)
         (push.const)
         (apply.iloc+ (0 . 0) "./boot/macro/r7rs.scm" . 69637))
       (push)
       (extend . 1)
       (call
         (call
           (touch.gloc.of current-include-files)
           (apply.gloc.of current-include-files "./boot/macro/r7rs.scm" . 69637))
         (push)
         (push.subr.gloc.of core-hashtable-size 1 "./boot/macro/r7rs.scm" . 69637)
         (push.const . 0)
         (subr.gloc.of = 2 "./boot/macro/r7rs.scm" . 69637)
         (if.true.ret)
         (push.gloc.of library-include-dependencies)
         (push.iloc 3 . 0)
         (call
           (touch.gloc.of current-include-files)
           (apply.gloc.of current-include-files "./boot/macro/r7rs.scm" . 69637))
         (push)
         (ret.subr.gloc.of core-hashtable-set! "./boot/macro/r7rs.scm" . 69637))
       (ret.iloc 0 . 0))
     (push.close
       (0 0)
       (touch.gloc.of current-include-files)
       (push.iloc.1 . 0)
       (apply.gloc.of current-include-files "./boot/macro/r7rs.scm" . 69637))
     (apply.gloc.of
       |.dynamic-wind|
       (|.dynamic-wind|
         (lambda ()
           (set! |tmp1`2799`2801*| (current-include-files))
           (current-include-files |tmp2`2799`2801*|))
         (lambda ()
           (let ((|coreform`2871*|
                   (letrec* ((|loop`2809*|
                               (lambda (|clauses`2810*|
                                         |exports`2810*|
                                         |imports`2810*|
                                         |depends`2810*|
                                         |commands`2810*|)
                                 (if (null? |clauses`2810*|)
                                     (let ((|ht-immutables`2812*| (make-core-hashtable))
                                           (|ht-imports`2812*| (make-core-hashtable))
                                           (|ht-publics`2812*| (make-core-hashtable)))
                                       (for-each (lambda (|a`2814*|)
                                                   (and (core-hashtable-ref
                                                          |ht-publics`2812*|
                                                          (cdr |a`2814*|)
                                                          #f)
                                                        (syntax-violation
                                                          'define-library
                                                          "duplicate export identifiers"
                                                          (abbreviated-take-form |form`2780*| 4 8)
                                                          (cdr |a`2814*|)))
                                                   (core-hashtable-set!
                                                     |ht-publics`2812*|
                                                     (cdr |a`2814*|)
                                                     #t)
                                                   (core-hashtable-set!
                                                     |ht-immutables`2812*|
                                                     (car |a`2814*|)
                                                     #t))
                                                 |exports`2810*|)
                                       (for-each (lambda (|a`2816*|)
                                                   (core-hashtable-set!
                                                     |ht-immutables`2812*|
                                                     (car |a`2816*|)
                                                     #t)
                                                   (let ((|.L746`2818*|
                                                           (core-hashtable-ref
                                                             |ht-imports`2812*|
                                                             (car |a`2816*|)
                                                             #f)))
                                                     (if |.L746`2818*|
                                                         (or (eq? |.L746`2818*| (cdr |a`2816*|))
                                                             (syntax-violation
                                                               'define-library
                                                               "duplicate import identifiers"
                                                               (abbreviated-take-form
                                                                 |form`2780*|
                                                                 4
                                                                 8)
                                                               (car |a`2816*|)))
                                                         (core-hashtable-set!
                                                           |ht-imports`2812*|
                                                           (car |a`2816*|)
                                                           (cdr |a`2816*|)))))
                                                 |imports`2810*|)
                                       (let ((|ht-env`2822*|
                                               (make-shield-id-table |commands`2810*|))
                                             (|ht-libenv`2822*| (make-core-hashtable)))
                                         (for-each (lambda (|a`2824*|)
                                                     (core-hashtable-set!
                                                       |ht-env`2822*|
                                                       (car |a`2824*|)
                                                       (cdr |a`2824*|))
                                                     (core-hashtable-set!
                                                       |ht-libenv`2822*|
                                                       (car |a`2824*|)
                                                       (cdr |a`2824*|)))
                                                   (core-hashtable->alist |ht-imports`2812*|))
                                         (let ((|tmp1`2827`2829*| #f))
                                           (|.dynamic-wind|
                                             (lambda ()
                                               (set! |tmp1`2827`2829*|
                                                     (current-immutable-identifiers))
                                               (current-immutable-identifiers
                                                 |ht-immutables`2812*|))
                                             (lambda ()
                                               (expand-define-library-body
                                                 |form`2780*|
                                                 |library-id`2796*|
                                                 |library-version`2796*|
                                                 |commands`2810*|
                                                 |exports`2810*|
                                                 |imports`2810*|
                                                 |depends`2810*|
                                                 (extend-env
                                                   private-primitives-environment
                                                   (|permute-env`2781*| |ht-env`2822*|))
                                                 (|permute-env`2781*| |ht-libenv`2822*|)))
                                             (lambda ()
                                               (current-immutable-identifiers
                                                 |tmp1`2827`2829*|))))))
                                     (let ((|.L748`2837`2840*|
                                             (and (pair? |clauses`2810*|)
                                                  (pair? (car |clauses`2810*|))
                                                  (list? (cdar |clauses`2810*|))
                                                  (list? (cdr |clauses`2810*|)))))
                                       (if (and |.L748`2837`2840*|
                                                (eq? (caar |clauses`2810*|) 'export))
                                           (|loop`2809*|
                                             (cdr |clauses`2810*|)
                                             (append
                                               |exports`2810*|
                                               (parse-exports |form`2780*| (cdar |clauses`2810*|)))
                                             |imports`2810*|
                                             |depends`2810*|
                                             |commands`2810*|)
                                           (if (and |.L748`2837`2840*|
                                                    (eq? (caar |clauses`2810*|) 'import))
                                               (let ((|import-spec`2845*| (cdar |clauses`2810*|)))
                                                 (|loop`2809*|
                                                   (cdr |clauses`2810*|)
                                                   |exports`2810*|
                                                   (append
                                                     |imports`2810*|
                                                     (parse-imports
                                                       |form`2780*|
                                                       |import-spec`2845*|))
                                                   (append
                                                     |depends`2810*|
                                                     (parse-depends
                                                       |form`2780*|
                                                       |import-spec`2845*|))
                                                   |commands`2810*|))
                                               (if (and |.L748`2837`2840*|
                                                        (eq? (caar |clauses`2810*|) 'include)
                                                        (every1 string? (cdar |clauses`2810*|)))
                                                   (let ((|more`2849*| (cdr |clauses`2810*|)))
                                                     (|loop`2809*|
                                                       (|.cons|
                                                         (|.cons|
                                                           'begin
                                                           (apply
                                                             append
                                                             (map (lambda (|e`2851*|)
                                                                    (read-include-file
                                                                      |library-name`2794*|
                                                                      |e`2851*|
                                                                      'include))
                                                                  (cdar |clauses`2810*|))))
                                                         |more`2849*|)
                                                       |exports`2810*|
                                                       |imports`2810*|
                                                       |depends`2810*|
                                                       |commands`2810*|))
                                                   (if (and |.L748`2837`2840*|
                                                            (eq? (caar |clauses`2810*|) 'include-ci)
                                                            (every1 string? (cdar |clauses`2810*|)))
                                                       (let ((|more`2855*| (cdr |clauses`2810*|)))
                                                         (|loop`2809*|
                                                           (|.cons|
                                                             (|.cons|
                                                               'begin
                                                               (apply
                                                                 append
                                                                 (map (lambda (|e`2857*|)
                                                                        (read-include-file
                                                                          |library-name`2794*|
                                                                          |e`2857*|
                                                                          'include-ci))
                                                                      (cdar |clauses`2810*|))))
                                                             |more`2855*|)
                                                           |exports`2810*|
                                                           |imports`2810*|
                                                           |depends`2810*|
                                                           |commands`2810*|))
                                                       (if (and |.L748`2837`2840*|
                                                                (eq?
                                                                  (caar |clauses`2810*|)
                                                                  'include-library-declarations)
                                                                (every1
                                                                  string?
                                                                  (cdar |clauses`2810*|)))
                                                           (let ((|more`2861*|
                                                                   (cdr |clauses`2810*|)))
                                                             (|loop`2809*|
                                                               (append
                                                                 (apply
                                                                   append
                                                                   (map (lambda (|e`2863*|)
                                                                          (read-include-file
                                                                            |library-name`2794*|
                                                                            |e`2863*|
                                                                            'include-library-declarations))
                                                                        (cdar |clauses`2810*|)))
                                                                 |more`2861*|)
                                                               |exports`2810*|
                                                               |imports`2810*|
                                                               |depends`2810*|
                                                               |commands`2810*|))
                                                           (if (and |.L748`2837`2840*|
                                                                    (eq?
                                                                      (caar |clauses`2810*|)
                                                                      'cond-expand))
                                                               (let ((|more`2865*|
                                                                       (cdr |clauses`2810*|)))
                                                                 (|loop`2809*|
                                                                   (append
                                                                     (parse-cond-expand
                                                                       |form`2780*|
                                                                       (cdar |clauses`2810*|))
                                                                     |more`2865*|)
                                                                   |exports`2810*|
                                                                   |imports`2810*|
                                                                   |depends`2810*|
                                                                   |commands`2810*|))
                                                               (if (and |.L748`2837`2840*|
                                                                        (eq?
                                                                          (caar |clauses`2810*|)
                                                                          'begin))
                                                                   (|loop`2809*|
                                                                     (cdr |clauses`2810*|)
                                                                     |exports`2810*|
                                                                     |imports`2810*|
                                                                     |depends`2810*|
                                                                     (append
                                                                       |commands`2810*|
                                                                       (cdar |clauses`2810*|)))
                                                                   (syntax-violation
                                                                     'define-library
                                                                     "malformed library declarations"
                                                                     (abbreviated-take-form
                                                                       |form`2780*|
                                                                       4
                                                                       8)
                                                                     (car
                                                                       |clauses`2810*|))))))))))))))
                     (|loop`2809*| |clauses`2794*| '() '() '() '()))))
             (or (= (core-hashtable-size (current-include-files)) 0)
                 (core-hashtable-set!
                   library-include-dependencies
                   |library-id`2796*|
                   (current-include-files)))
             |coreform`2871*|))
         (lambda () (current-include-files |tmp1`2799`2801*|)))))
   (push.const . define-library)
   (push.const . "expected library name and declarations")
   (call
     (touch.gloc.of abbreviated-take-form)
     (push.iloc.0 . 0)
     (push.const . 4)
     (push.const . 8)
     (apply.gloc.of abbreviated-take-form "./boot/macro/r7rs.scm" . 69637))
   (push)
   (apply.gloc.of syntax-violation "./boot/macro/r7rs.scm" . 69637))
 (set.gloc.of expand-define-library)
 (ret.const.unspec))
((close
   (9 0 . expand-define-library-body)
   (extend.unbound . 6)
   (push.const . #f)
   (push.const)
   (push.close
     (2 0 . extend-env!)
     (call
       (call
         (touch.gloc.of macro?)
         (push.iloc.0 . 1)
         (apply.gloc.of macro? "./boot/macro/r7rs.scm" . 152590))
       (if.false.ret)
       (call
         (touch.gloc.of acons)
         (push.iloc.0 . 0)
         (push.iloc.0 . 1)
         (push.iloc.1 . 1)
         (apply.gloc.of acons "./boot/macro/r7rs.scm" . 153631))
       (set.iloc (1 . 1) "./boot/macro/r7rs.scm" . 153614)
       (ret.const.unspec))
     (call
       (touch.gloc.of extend-env)
       (push.iloc.0 . 0)
       (iloc.0 . 1)
       (push.cons)
       (push.subr.gloc.of list 1 "./boot/macro/r7rs.scm" . 154655)
       (push.iloc 2 . 7)
       (apply.gloc.of extend-env "./boot/macro/r7rs.scm" . 154643))
     (set.iloc (2 . 7) "./boot/macro/r7rs.scm" . 154633)
     (push.close
       (1 0)
       (push.cddr.iloc (0 . 0) "./boot/macro/r7rs.scm" . 155689)
       (push.iloc 3 . 7)
       (ret.subr.gloc.of set-cdr! "./boot/macro/r7rs.scm" . 155679))
     (push.iloc.1 . 1)
     (apply.gloc.of for-each "./boot/macro/r7rs.scm" . 155657))
   (push.close
     (2 0 . extend-libenv!)
     (call
       (touch.gloc.of extend-env)
       (push.iloc.0 . 0)
       (iloc.0 . 1)
       (push.cons)
       (push.subr.gloc.of list 1 "./boot/macro/r7rs.scm" . 159778)
       (push.iloc 2 . 8)
       (apply.gloc.of extend-env "./boot/macro/r7rs.scm" . 159766))
     (set.iloc (2 . 8) "./boot/macro/r7rs.scm" . 159753)
     (touch.gloc.of current-template-environment)
     (push.iloc 2 . 8)
     (apply.gloc.of current-template-environment "./boot/macro/r7rs.scm" . 160777))
   (enclose . 4)
   (subr.gloc.of make-core-hashtable 0 "./boot/macro/r7rs.scm" . 162852)
   (set.iloc (0 . 4))
   (call
     (push.const . 0)
     (extend . 1)
     (ret.close
       (0 0)
       (n+.iloc (1 . 0) 1 "./boot/macro/r7rs.scm" . 167957)
       (set.iloc (1 . 0) "./boot/macro/r7rs.scm" . 167947)
       (push.const . ".e~a")
       (push.iloc.1 . 0)
       (push.subr.gloc.of format 2 "./boot/macro/r7rs.scm" . 168987)
       (ret.subr.gloc.of string->symbol "./boot/macro/r7rs.scm" . 168971)))
   (set.iloc (0 . 5))
   (call
     (touch.gloc.of current-template-environment)
     (push.iloc.1 . 8)
     (apply.gloc.of current-template-environment "./boot/macro/r7rs.scm" . 171013))
   (call
     (push.close
       (1 0)
       (push.iloc.1 . 4)
       (push.car.iloc (0 . 0) "./boot/macro/r7rs.scm" . 172103)
       (push.const . #t)
       (ret.subr.gloc.of core-hashtable-set! "./boot/macro/r7rs.scm" . 172059))
     (push.iloc.1 . 5)
     (apply.gloc.of for-each "./boot/macro/r7rs.scm" . 172037))
   (extend.enclose
     (4 0 . loop)
     (iloc.0 . 0)
     (if.null?
       (touch.gloc.of rewrite-library-body)
       (push.iloc 3 . 0)
       (push.iloc 3 . 1)
       (push.iloc 3 . 2)
       (push.iloc.0 . 0)
       (push.iloc.0 . 1)
       (push.subr.gloc.of reverse 1 "./boot/macro/r7rs.scm" . 174166)
       (push.iloc.0 . 2)
       (push.subr.gloc.of reverse 1 "./boot/macro/r7rs.scm" . 174181)
       (push.iloc.0 . 3)
       (push.iloc 3 . 4)
       (push.iloc 3 . 5)
       (push.iloc 3 . 6)
       (push.iloc 3 . 7)
       (push.iloc 3 . 8)
       (apply.gloc.of rewrite-library-body "./boot/macro/r7rs.scm" . 174107))
     (call
       (iloc.0 . 0)
       (if.not.pair?.ret.const . #f)
       (car.iloc (0 . 0) "./boot/macro/r7rs.scm" . 175143)
       (if.not.pair?.ret.const . #f)
       (push.iloc.0 . 0)
       (push.subr.gloc.of caar 1 "./boot/macro/r7rs.scm" . 175164)
       (ret.subr.gloc.of symbol? "./boot/macro/r7rs.scm" . 175155))
     (if.true
       (call
         (touch.gloc.of env-lookup)
         (push.iloc 3 . 7)
         (push.iloc.0 . 0)
         (push.subr.gloc.of caar 1 "./boot/macro/r7rs.scm" . 176170)
         (apply.gloc.of env-lookup "./boot/macro/r7rs.scm" . 176154))
       (push)
       (extend . 1)
       (push.gloc.of denote-begin)
       (iloc.0 . 0)
       (if.eq?
         (call
           (touch.gloc.of flatten-begin)
           (push.iloc.1 . 0)
           (push.iloc 4 . 7)
           (apply.gloc.of flatten-begin "./boot/macro/r7rs.scm" . 177205))
         (push)
         (push.iloc.1 . 1)
         (push.iloc.1 . 2)
         (push.iloc.1 . 3)
         (apply.iloc (2 . 0) "./boot/macro/r7rs.scm" . 177199))
       (push.gloc.of denote-define-syntax)
       (iloc.0 . 0)
       (if.eq?
         (call
           (iloc.1 . 0)
           (if.not.pair?.ret.const . #f)
           (car.iloc (1 . 0) (car |body`2897*|))
           (if.not.pair?.ret.const . #f)
           (push.iloc.1 . 0)
           (subr.gloc.of cdar 1 (cdar |body`2897*|))
           (if.not.pair?.ret.const . #f)
           (push.iloc.1 . 0)
           (subr.gloc.of cddar 1 (cddar |body`2897*|))
           (if.not.pair?.ret.const . #f)
           (push.iloc.1 . 0)
           (subr.gloc.of cdddar 1 (cdddar |body`2897*|))
           (if.not.null?.ret.const . #f)
           (push.cdr.iloc (1 . 0) (cdr |body`2897*|))
           (subr.gloc.of list? 1 (list? (cdr |body`2897*|)))
           (if.false.ret)
           (push.iloc.1 . 0)
           (push.subr.gloc.of cadar 1 (cadar |body`2897*|))
           (ret.subr.gloc.of symbol? (symbol? (cadar |body`2897*|))))
         (if.true
           (push.cdr.iloc (1 . 0) (cdr |body`2897*|))
           (push.iloc.1 . 0)
           (push.subr.gloc.of caddar 1 (caddar |body`2897*|))
           (push.iloc.1 . 0)
           (push.subr.gloc.of cadar 1 (cadar |body`2897*|))
           (extend . 3)
           (call
             (push.iloc 4 . 4)
             (push.iloc.0 . 2)
             (subr.gloc.of
               core-hashtable-contains?
               2
               (core-hashtable-contains? |ht-imported-immutables`2877*| |org`2905*|))
             (if.false.ret)
             (push.const . define-syntax)
             (push.const . "attempt to modify immutable binding")
             (push.car.iloc (2 . 0) (car |body`2897*|))
             (apply.gloc.of
               syntax-violation
               (syntax-violation
                 'define-syntax
                 "attempt to modify immutable binding"
                 (car |body`2897*|))))
           (push.close
             (0 0)
             (push.const . #f)
             (extend . 1)
             (push.close
               (0 0)
               (call
                 (touch.gloc.of current-template-environment)
                 (apply.gloc.of current-template-environment (current-template-environment)))
               (set.iloc (1 . 0) (set! |tmp1`2909`2911*| (current-template-environment)))
               (touch.gloc.of current-template-environment)
               (push.iloc 7 . 0)
               (apply.gloc.of
                 current-template-environment
                 (current-template-environment |initial-libenv`2877*|)))
             (push.close
               (0 0)
               (touch.gloc.of compile-macro)
               (push.car.iloc (5 . 0) (car |body`2897*|))
               (push.iloc 3 . 1)
               (push.iloc 8 . 7)
               (apply.gloc.of
                 compile-macro
                 (compile-macro (car |body`2897*|) |clause`2905*| |env`2876*|)))
             (push.close
               (0 0)
               (touch.gloc.of current-template-environment)
               (push.iloc.1 . 0)
               (apply.gloc.of
                 current-template-environment
                 (current-template-environment |tmp1`2909`2911*|)))
             (apply.gloc.of
               |.dynamic-wind|
               (|.dynamic-wind|
                 (lambda ()
                   (set! |tmp1`2909`2911*| (current-template-environment))
                   (current-template-environment |initial-libenv`2877*|))
                 (lambda () (compile-macro (car |body`2897*|) |clause`2905*| |env`2876*|))
                 (lambda () (current-template-environment |tmp1`2909`2911*|)))))
           (push.close
             (1 1)
             (call
               (touch.gloc.of generate-global-id)
               (push.iloc 6 . 1)
               (push.iloc.1 . 2)
               (apply.gloc.of
                 generate-global-id
                 (generate-global-id |library-id`2876*| |org`2905*|)))
             (push)
             (extend . 1)
             (call
               (push.iloc 2 . 2)
               (call
                 (touch.gloc.of make-import)
                 (push.iloc.0 . 0)
                 (apply.gloc.of make-import (make-import |new`2920*|)))
               (push)
               (apply.iloc (6 . 3) (|extend-libenv!`2877*| |org`2905*| (make-import |new`2920*|))))
             (push.iloc.1 . 0)
             (subr.gloc.of procedure? 1 (procedure? |code`2907*|))
             (if.true
               (call
                 (push.iloc 2 . 2)
                 (call
                   (touch.gloc.of make-macro)
                   (push.iloc.1 . 0)
                   (push.iloc 7 . 7)
                   (apply.gloc.of make-macro (make-macro |code`2907*| |env`2876*|)))
                 (push)
                 (apply.iloc
                   (6 . 2)
                   (|extend-env!`2877*| |org`2905*| (make-macro |code`2907*| |env`2876*|))))
               (push.iloc 2 . 0)
               (push.iloc 4 . 1)
               (push.iloc 2 . 2)
               (push.const . procedure)
               (push.car.iloc (1 . 1) (car |expr`2907*|))
               (push.subr.gloc.of list 3 (list |org`2905*| 'procedure (car |expr`2907*|)))
               (iloc 4 . 2)
               (push.cons)
               (call
                 (touch.gloc.of acons)
                 (push.iloc 2 . 2)
                 (push.iloc.0 . 0)
                 (push.iloc 4 . 3)
                 (apply.gloc.of acons (acons |org`2905*| |new`2920*| |renames`2897*|)))
               (push)
               (apply.iloc
                 (5 . 0)
                 (|loop`2896*|
                   |more`2905*|
                   |defs`2897*|
                   (cons (list |org`2905*| 'procedure (car |expr`2907*|)) |macros`2897*|)
                   (acons |org`2905*| |new`2920*| |renames`2897*|))))
             (call
               (touch.gloc.of macro-variable?)
               (push.iloc.1 . 0)
               (apply.gloc.of macro-variable? (macro-variable? |code`2907*|)))
             (if.true
               (call
                 (push.iloc 2 . 2)
                 (call
                   (touch.gloc.of make-macro-variable)
                   (push.cadr.iloc (1 . 0) (cadr |code`2907*|))
                   (push.iloc 7 . 7)
                   (apply.gloc.of
                     make-macro-variable
                     (make-macro-variable (cadr |code`2907*|) |env`2876*|)))
                 (push)
                 (apply.iloc
                   (6 . 2)
                   (|extend-env!`2877*|
                     |org`2905*|
                     (make-macro-variable (cadr |code`2907*|) |env`2876*|))))
               (push.iloc 2 . 0)
               (push.iloc 4 . 1)
               (push.iloc 2 . 2)
               (push.const . variable)
               (push.car.iloc (1 . 1) (car |expr`2907*|))
               (push.subr.gloc.of list 3 (list |org`2905*| 'variable (car |expr`2907*|)))
               (iloc 4 . 2)
               (push.cons)
               (call
                 (touch.gloc.of acons)
                 (push.iloc 2 . 2)
                 (push.iloc.0 . 0)
                 (push.iloc 4 . 3)
                 (apply.gloc.of acons (acons |org`2905*| |new`2920*| |renames`2897*|)))
               (push)
               (apply.iloc
                 (5 . 0)
                 (|loop`2896*|
                   |more`2905*|
                   |defs`2897*|
                   (cons (list |org`2905*| 'variable (car |expr`2907*|)) |macros`2897*|)
                   (acons |org`2905*| |new`2920*| |renames`2897*|))))
             (call
               (push.iloc 2 . 2)
               (call
                 (touch.gloc.of make-macro)
                 (push.iloc.1 . 0)
                 (push.iloc 7 . 7)
                 (apply.gloc.of make-macro (make-macro |code`2907*| |env`2876*|)))
               (push)
               (apply.iloc
                 (6 . 2)
                 (|extend-env!`2877*| |org`2905*| (make-macro |code`2907*| |env`2876*|))))
             (push.iloc 2 . 0)
             (push.iloc 4 . 1)
             (push.iloc 2 . 2)
             (push.const . template)
             (push.iloc.1 . 0)
             (push.subr.gloc.of list 3 (list |org`2905*| 'template |code`2907*|))
             (iloc 4 . 2)
             (push.cons)
             (call
               (touch.gloc.of acons)
               (push.iloc 2 . 2)
               (push.iloc.0 . 0)
               (push.iloc 4 . 3)
               (apply.gloc.of acons (acons |org`2905*| |new`2920*| |renames`2897*|)))
             (push)
             (apply.iloc
               (5 . 0)
               (|loop`2896*|
                 |more`2905*|
                 |defs`2897*|
                 (cons (list |org`2905*| 'template |code`2907*|) |macros`2897*|)
                 (acons |org`2905*| |new`2920*| |renames`2897*|))))
           (apply.gloc.of
             |.call-with-values|
             (|.call-with-values|
               (lambda ()
                 (let ((|tmp1`2909`2911*| #f))
                   (|.dynamic-wind|
                     (lambda ()
                       (set! |tmp1`2909`2911*| (current-template-environment))
                       (current-template-environment |initial-libenv`2877*|))
                     (lambda () (compile-macro (car |body`2897*|) |clause`2905*| |env`2876*|))
                     (lambda () (current-template-environment |tmp1`2909`2911*|)))))
               (lambda (|code`2907*| . |expr`2907*|)
                 (let ((|new`2920*| (generate-global-id |library-id`2876*| |org`2905*|)))
                   (|extend-libenv!`2877*| |org`2905*| (make-import |new`2920*|))
                   (if (procedure? |code`2907*|)
                       (begin
                         (|extend-env!`2877*| |org`2905*| (make-macro |code`2907*| |env`2876*|))
                         (|loop`2896*|
                           |more`2905*|
                           |defs`2897*|
                           (cons (list |org`2905*| 'procedure (car |expr`2907*|)) |macros`2897*|)
                           (acons |org`2905*| |new`2920*| |renames`2897*|)))
                       (if (macro-variable? |code`2907*|)
                           (begin
                             (|extend-env!`2877*|
                               |org`2905*|
                               (make-macro-variable (cadr |code`2907*|) |env`2876*|))
                             (|loop`2896*|
                               |more`2905*|
                               |defs`2897*|
                               (cons (list |org`2905*| 'variable (car |expr`2907*|)) |macros`2897*|)
                               (acons |org`2905*| |new`2920*| |renames`2897*|)))
                           (begin
                             (|extend-env!`2877*| |org`2905*| (make-macro |code`2907*| |env`2876*|))
                             (|loop`2896*|
                               |more`2905*|
                               |defs`2897*|
                               (cons (list |org`2905*| 'template |code`2907*|) |macros`2897*|)
                               (acons |org`2905*| |new`2920*| |renames`2897*|))))))))))
         (push.const . define-syntax)
         (push.const . "expected symbol and single expression")
         (push.car.iloc (1 . 0) (car |body`2897*|))
         (apply.gloc.of
           syntax-violation
           (syntax-violation
             'define-syntax
             "expected symbol and single expression"
             (car |body`2897*|))))
       (push.gloc.of denote-define)
       (iloc.0 . 0)
       (if.eq?
         (call
           (touch.gloc.of annotate)
           (call
             (touch.gloc.of desugar-define)
             (push.car.iloc (1 . 0) "./boot/macro/r7rs.scm" . 207937)
             (apply.gloc.of desugar-define "./boot/macro/r7rs.scm" . 207921))
           (push)
           (push.subr.gloc.of cdr 1 "./boot/macro/r7rs.scm" . 207916)
           (push.car.iloc (1 . 0) "./boot/macro/r7rs.scm" . 207950)
           (apply.gloc.of annotate "./boot/macro/r7rs.scm" . 207906))
         (push)
         (extend . 1)
         (call
           (push.iloc 4 . 4)
           (push.car.iloc (0 . 0) "./boot/macro/r7rs.scm" . 208975)
           (subr.gloc.of core-hashtable-contains? 2 "./boot/macro/r7rs.scm" . 208926)
           (if.false.ret)
           (push.const . define)
           (push.const . "attempt to modify immutable binding")
           (push.car.iloc (2 . 0) "./boot/macro/r7rs.scm" . 210014)
           (apply.gloc.of syntax-violation "./boot/macro/r7rs.scm" . 209950))
         (push.car.iloc (0 . 0) "./boot/macro/r7rs.scm" . 210980)
         (call
           (touch.gloc.of generate-global-id)
           (push.iloc 5 . 1)
           (push.car.iloc (0 . 0) "./boot/macro/r7rs.scm" . 211027)
           (apply.gloc.of generate-global-id "./boot/macro/r7rs.scm" . 210996))
         (push)
         (extend . 2)
         (call
           (push.iloc.0 . 0)
           (push.iloc.0 . 1)
           (apply.iloc (5 . 2) "./boot/macro/r7rs.scm" . 211995))
         (call
           (push.iloc.0 . 0)
           (call
             (touch.gloc.of make-import)
             (push.iloc.0 . 1)
             (apply.gloc.of make-import "./boot/macro/r7rs.scm" . 213039))
           (push)
           (apply.iloc (5 . 3) "./boot/macro/r7rs.scm" . 213019))
         (push.cdr.iloc (3 . 0) "./boot/macro/r7rs.scm" . 214049)
         (push.iloc.1 . 0)
         (iloc 3 . 1)
         (push.cons)
         (push.iloc 3 . 2)
         (call
           (touch.gloc.of acons)
           (push.iloc.0 . 0)
           (push.iloc.0 . 1)
           (push.iloc 3 . 3)
           (apply.gloc.of acons "./boot/macro/r7rs.scm" . 214083))
         (push)
         (apply.iloc (4 . 0) "./boot/macro/r7rs.scm" . 214043))
       (call
         (call
           (touch.gloc.of macro?)
           (push.iloc.0 . 0)
           (apply.gloc.of macro? "./boot/macro/r7rs.scm" . 215067))
         (if.true.ret)
         (push.gloc.of denote-let-syntax)
         (iloc.0 . 0)
         (if.eq?.ret.const . #t)
         (push.gloc.of denote-letrec-syntax)
         (iloc.0 . 0)
         (ret.eq? "./boot/macro/r7rs.scm" . 215110))
       (if.true
         (push.close
           (0 0)
           (touch.gloc.of expand-initial-forms)
           (push.car.iloc (2 . 0) "./boot/macro/r7rs.scm" . 216134)
           (push.iloc 5 . 7)
           (apply.gloc.of expand-initial-forms "./boot/macro/r7rs.scm" . 216112))
         (push.close
           (2 0)
           (iloc.0 . 1)
           (set.iloc (5 . 7) "./boot/macro/r7rs.scm" . 217113)
           (call
             (touch.gloc.of flatten-begin)
             (push.iloc.0 . 0)
             (push.subr.gloc.of list 1 "./boot/macro/r7rs.scm" . 218166)
             (push.iloc 5 . 7)
             (apply.gloc.of flatten-begin "./boot/macro/r7rs.scm" . 218151))
           (push)
           (push.cdr.iloc (2 . 0) "./boot/macro/r7rs.scm" . 218183)
           (push.subr.gloc.of append 2 "./boot/macro/r7rs.scm" . 218143)
           (push.iloc 2 . 1)
           (push.iloc 2 . 2)
           (push.iloc 2 . 3)
           (apply.iloc (3 . 0) "./boot/macro/r7rs.scm" . 218137))
         (apply.gloc.of |.call-with-values| "./boot/macro/r7rs.scm" . 178199))
       (push.const . |.define|)
       (call (apply.iloc (3 . 5) "./boot/macro/r7rs.scm" . 221227))
       (push)
       (push.car.iloc (1 . 0) "./boot/macro/r7rs.scm" . 221245)
       (push.subr.gloc.of |.list| 3 "./boot/macro/r7rs.scm" . 221210)
       (cdr.iloc (1 . 0) "./boot/macro/r7rs.scm" . 221257)
       (push.cons)
       (push.iloc.1 . 1)
       (push.iloc.1 . 2)
       (push.iloc.1 . 3)
       (apply.iloc (2 . 0) "./boot/macro/r7rs.scm" . 220184))
     (push.const . |.define|)
     (call (apply.iloc (2 . 5) "./boot/macro/r7rs.scm" . 223270))
     (push)
     (push.car.iloc (0 . 0) "./boot/macro/r7rs.scm" . 223288)
     (push.subr.gloc.of |.list| 3 "./boot/macro/r7rs.scm" . 223253)
     (cdr.iloc (0 . 0) "./boot/macro/r7rs.scm" . 223300)
     (push.cons)
     (push.iloc.0 . 1)
     (push.iloc.0 . 2)
     (push.iloc.0 . 3)
     (apply.iloc (1 . 0) "./boot/macro/r7rs.scm" . 223247))
   (call
     (touch.gloc.of flatten-begin)
     (push.iloc 2 . 3)
     (push.iloc 2 . 7)
     (apply.gloc.of flatten-begin "./boot/macro/r7rs.scm" . 173078))
   (push)
   (push.const)
   (push.const)
   (push.const)
   (apply.iloc (0 . 0) "./boot/macro/r7rs.scm" . 174087))
 (set.gloc.of expand-define-library-body)
 (ret.const.unspec))

;
((close
   (2 0 . extend-env)
   (iloc.0 . 0)
   (if.null? (ret.iloc 0 . 1))
   (push.iloc.0 . 0)
   (push.iloc.0 . 1)
   (ret.subr.gloc.of append "./boot/macro/synenv.scm" . 8201))
 (set.gloc.of extend-env)
 (ret.const.unspec))
((close
   (2 0 . env-lookup)
   (call
     (iloc.0 . 1)
     (if.symbol?.ret.const . #t)
     (push.const . "internal error: env-lookup: expect symbol but got ~s")
     (push.iloc.0 . 1)
     (apply.gloc.of scheme-error "./boot/macro/synenv.scm" . 13321))
   (push.iloc.0 . 1)
   (push.iloc.0 . 0)
   (push.subr.gloc.of assq 2 "./boot/macro/synenv.scm" . 14348)
   (extend . 1)
   (iloc.0 . 0)
   (if.true
     (call
       (touch.gloc.of import?)
       (push.cdr.iloc (0 . 0) "./boot/macro/synenv.scm" . 16417)
       (apply.gloc.of import? "./boot/macro/synenv.scm" . 16408))
     (if.true
       (push.cddr.iloc (0 . 0) "./boot/macro/synenv.scm" . 17446)
       (extend . 1)
       (subr.gloc.of current-macro-environment 0)
       (push)
       (push.iloc.0 . 0)
       (push.iloc.0 . 0)
       (ret.subr.gloc.of core-hashtable-ref "./boot/macro/synenv.scm" . 18458))
     (push.iloc.0 . 0)
     (ret.subr.gloc.of cdr "./boot/macro/synenv.scm" . 20504))
   (subr.gloc.of current-macro-environment 0)
   (push)
   (push.iloc.1 . 1)
   (push.iloc.1 . 1)
   (ret.subr.gloc.of core-hashtable-ref "./boot/macro/synenv.scm" . 22540))
 (set.gloc.of env-lookup)
 (ret.const.unspec))
((close
   (2 0 . env-delete!)
   (push.iloc.0 . 1)
   (push.iloc.0 . 0)
   (push.subr.gloc.of assq 2 "./boot/macro/synenv.scm" . 26636)
   (extend . 1)
   (iloc.0 . 0)
   (if.true
     (push.iloc.0 . 0)
     (push.const . #f)
     (subr.gloc.of set-car! 2 "./boot/macro/synenv.scm" . 28689)
     (push.iloc.0 . 0)
     (push.const . no-use)
     (ret.subr.gloc.of set-cdr! "./boot/macro/synenv.scm" . 29713))
   (ret.const.unspec))
 (set.gloc.of env-delete!)
 (ret.const.unspec))
((close
   (2 0 . unrename-syntax)
   (extend.enclose
     (1 0 . loop)
     (iloc.0 . 0)
     (if.pair?
       (call
         (push.car.iloc (0 . 0) "./boot/macro/synenv.scm" . 35870)
         (apply.iloc (1 . 0) "./boot/macro/synenv.scm" . 35864))
       (push)
       (call
         (push.cdr.iloc (0 . 0) "./boot/macro/synenv.scm" . 35892)
         (apply.iloc (1 . 0) "./boot/macro/synenv.scm" . 35886))
       (push)
       (extend . 2)
       (call
         (push.iloc.0 . 0)
         (car.iloc (1 . 0) "./boot/macro/synenv.scm" . 36900)
         (if.not.eq?.ret.const . #f)
         (push.iloc.0 . 1)
         (cdr.iloc (1 . 0) "./boot/macro/synenv.scm" . 36919)
         (ret.eq? "./boot/macro/synenv.scm" . 36911))
       (if.true (ret.iloc 1 . 0))
       (call
         (touch.gloc.of annotated?)
         (push.iloc.1 . 0)
         (apply.gloc.of annotated? "./boot/macro/synenv.scm" . 37911))
       (if.true
         (touch.gloc.of annotate)
         (push.iloc.0 . 0)
         (iloc.0 . 1)
         (push.cons)
         (push.iloc.1 . 0)
         (apply.gloc.of annotate "./boot/macro/synenv.scm" . 37928))
       (push.iloc.0 . 0)
       (iloc.0 . 1)
       (ret.cons "./boot/macro/synenv.scm" . 38940))
     (call
       (touch.gloc.of renamed-id?)
       (push.iloc.0 . 0)
       (apply.gloc.of renamed-id? "./boot/macro/synenv.scm" . 39950))
     (if.true
       (call
         (touch.gloc.of env-lookup)
         (push.iloc 2 . 1)
         (push.iloc.0 . 0)
         (apply.gloc.of env-lookup "./boot/macro/synenv.scm" . 40986))
       (push)
       (extend . 1)
       (call
         (touch.gloc.of special?)
         (push.iloc.0 . 0)
         (apply.gloc.of special? "./boot/macro/synenv.scm" . 42007))
       (if.true
         (push.iloc.0 . 0)
         (gloc.of denote-_)
         (if.eq?.ret.const . _)
         (touch.gloc.of core-primitive-name)
         (call
           (touch.gloc.of original-id)
           (push.iloc.1 . 0)
           (apply.gloc.of original-id "./boot/macro/synenv.scm" . 45107))
         (push)
         (apply.gloc.of core-primitive-name "./boot/macro/synenv.scm" . 45086))
       (call
         (touch.gloc.of macro?)
         (push.iloc.0 . 0)
         (apply.gloc.of macro? "./boot/macro/synenv.scm" . 46103))
       (if.true
         (call
           (touch.gloc.of original-id)
           (push.iloc.1 . 0)
           (apply.gloc.of original-id "./boot/macro/synenv.scm" . 47137))
         (push)
         (extend . 1)
         (push.iloc.1 . 0)
         (call
           (touch.gloc.of env-lookup)
           (push.iloc 4 . 1)
           (push.iloc.0 . 0)
           (apply.gloc.of env-lookup "./boot/macro/synenv.scm" . 48170))
         (if.eq? (ret.iloc 0 . 0))
         (push.iloc.1 . 0)
         (subr.gloc.of current-macro-environment 0)
         (push)
         (push.iloc.0 . 0)
         (push.const . #f)
         (subr.gloc.of core-hashtable-ref 3 "./boot/macro/synenv.scm" . 49194)
         (if.eq? (ret.iloc 0 . 0))
         (ret.iloc 2 . 0))
       (ret.iloc 1 . 0))
     (push.iloc.0 . 0)
     (subr.gloc.of vector? 1 "./boot/macro/synenv.scm" . 52238)
     (if.true
       (call
         (push.iloc.1 . 0)
         (push.iloc.0 . 0)
         (push.subr.gloc.of vector->list 1 "./boot/macro/synenv.scm" . 53286)
         (apply.gloc.of map "./boot/macro/synenv.scm" . 53276))
       (push)
       (ret.subr.gloc.of list->vector "./boot/macro/synenv.scm" . 53262))
     (ret.iloc 0 . 0))
   (push.iloc.1 . 0)
   (apply.iloc (0 . 0) "./boot/macro/synenv.scm" . 34823))
 (set.gloc.of unrename-syntax)
 (ret.const.unspec))
((close
   (2 0 . lookup-lexical-name)
   (call
     (touch.gloc.of env-lookup)
     (push.iloc.0 . 1)
     (push.iloc.0 . 0)
     (apply.gloc.of env-lookup "./boot/macro/synenv.scm" . 58385))
   (push)
   (extend . 1)
   (iloc.0 . 0)
   (if.symbol? (ret.iloc 0 . 0))
   (call
     (call
       (touch.gloc.of macro?)
       (push.iloc.0 . 0)
       (apply.gloc.of macro? "./boot/macro/synenv.scm" . 60435))
     (if.false.ret)
     (push.iloc.0 . 0)
     (push.iloc.1 . 1)
     (ret.subr.gloc.of assq "./boot/macro/synenv.scm" . 60449))
   (push)
   (extend . 1)
   (iloc.0 . 0)
   (if.true (push.iloc.0 . 0) (ret.subr.gloc.of cdr "./boot/macro/synenv.scm" . 60430))
   (ret.iloc 2 . 0))
 (set.gloc.of lookup-lexical-name)
 (ret.const.unspec))
((close
   (1 0 . unrename-primitive-id)
   (call
     (push.iloc.0 . 0)
     (subr.gloc.of current-primitive-prefix 0)
     (push)
     (push.subr.gloc.of symbol-contains 2 "./boot/macro/synenv.scm" . 68631)
     (const . 0)
     (if.not.eq?.ret.const . #f)
     (subr.gloc.of current-variable-environment 0)
     (push)
     (push.iloc.0 . 0)
     (ret.subr.gloc.of core-hashtable-contains? "./boot/macro/synenv.scm" . 69650))
   (if.true
     (push.iloc.0 . 0)
     (push.subr.gloc.of symbol->string 1 "./boot/macro/synenv.scm" . 70681)
     (extend . 1)
     (push.iloc.0 . 0)
     (push.const . 1)
     (push.iloc.0 . 0)
     (push.subr.gloc.of string-length 1 "./boot/macro/synenv.scm" . 71729)
     (push.subr.gloc.of substring 3 "./boot/macro/synenv.scm" . 71711)
     (ret.subr.gloc.of string->symbol "./boot/macro/synenv.scm" . 71695))
   (ret.iloc 0 . 0))
 (set.gloc.of |unrename-primitive-id`2967*|)
 (close
   (2 0 . lookup-topmost-subst)
   (iloc.0 . 0)
   (if.symbol?
     (call
       (touch.gloc.of env-lookup)
       (push.iloc.0 . 1)
       (push.iloc.0 . 0)
       (apply.gloc.of env-lookup "./boot/macro/synenv.scm" . 75797))
     (push)
     (extend . 1)
     (push.iloc.0 . 0)
     (subr.gloc.of uninterned-symbol? 1 "./boot/macro/synenv.scm" . 76818)
     (if.true
       (call
         (touch.gloc.of local-macro-symbol?)
         (push.iloc.0 . 0)
         (apply.gloc.of local-macro-symbol? "./boot/macro/synenv.scm" . 77849))
       (if.true (ret.iloc 0 . 0))
       (call
         (touch.gloc.of renamed-variable-id?)
         (push.iloc.0 . 0)
         (apply.gloc.of renamed-variable-id? "./boot/macro/synenv.scm" . 78873))
       (if.true (ret.iloc 0 . 0))
       (push.iloc.1 . 0)
       (iloc.0 . 0)
       (if.eq?
         (touch.gloc.of |unrename-primitive-id`2967*|)
         (call
           (touch.gloc.of original-id)
           (push.iloc.1 . 0)
           (apply.gloc.of original-id "./boot/macro/synenv.scm" . 80944))
         (push)
         (apply.gloc.of |unrename-primitive-id`2967*| "./boot/macro/synenv.scm" . 80921))
       (touch.gloc.of lookup-topmost-subst)
       (push.iloc.0 . 0)
       (push.iloc.1 . 1)
       (apply.gloc.of lookup-topmost-subst "./boot/macro/synenv.scm" . 82969))
     (iloc.0 . 0)
     (if.symbol?
       (touch.gloc.of |unrename-primitive-id`2967*|)
       (call
         (touch.gloc.of current-top-level-renames)
         (apply.gloc.of current-top-level-renames "./boot/macro/synenv.scm" . 85053))
       (push)
       (push.iloc.0 . 0)
       (push.iloc.0 . 0)
       (push.subr.gloc.of core-hashtable-ref 3 "./boot/macro/synenv.scm" . 85033)
       (apply.gloc.of |unrename-primitive-id`2967*| "./boot/macro/synenv.scm" . 85010))
     (call
       (touch.gloc.of unbound?)
       (push.iloc.0 . 0)
       (apply.gloc.of unbound? "./boot/macro/synenv.scm" . 86034))
     (if.true
       (touch.gloc.of |unrename-primitive-id`2967*|)
       (call
         (touch.gloc.of original-id)
         (push.iloc.1 . 0)
         (apply.gloc.of original-id "./boot/macro/synenv.scm" . 87081))
       (push)
       (apply.gloc.of |unrename-primitive-id`2967*| "./boot/macro/synenv.scm" . 87058))
     (call
       (call
         (touch.gloc.of macro?)
         (push.iloc.0 . 0)
         (apply.gloc.of macro? "./boot/macro/synenv.scm" . 88087))
       (if.false.ret)
       (push.iloc.0 . 0)
       (push.iloc.1 . 1)
       (ret.subr.gloc.of assq "./boot/macro/synenv.scm" . 88101))
     (push)
     (extend . 1)
     (iloc.0 . 0)
     (if.true (push.iloc.0 . 0) (ret.subr.gloc.of cdr "./boot/macro/synenv.scm" . 88082))
     (ret.iloc 1 . 0))
   (call
     (touch.gloc.of syntax-object-renames)
     (push.iloc.0 . 0)
     (apply.gloc.of syntax-object-renames "./boot/macro/synenv.scm" . 90132))
   (push)
   (extend . 1)
   (iloc.0 . 0)
   (if.pair?
     (cdr.iloc (0 . 0) "./boot/macro/synenv.scm" . 92188)
     (if.symbol?
       (touch.gloc.of lookup-topmost-subst)
       (push.cdr.iloc (0 . 0) "./boot/macro/synenv.scm" . 93225)
       (push.iloc.1 . 1)
       (apply.gloc.of lookup-topmost-subst "./boot/macro/synenv.scm" . 93203))
     (push.iloc.0 . 0)
     (ret.subr.gloc.of cdr "./boot/macro/synenv.scm" . 94227))
   (touch.gloc.of lookup-topmost-subst)
   (call
     (touch.gloc.of syntax-object-expr)
     (push.iloc.1 . 0)
     (apply.gloc.of syntax-object-expr "./boot/macro/synenv.scm" . 95269))
   (push)
   (push.iloc.1 . 1)
   (apply.gloc.of lookup-topmost-subst "./boot/macro/synenv.scm" . 95247))
 (set.gloc.of lookup-topmost-subst)
 (ret.const.unspec))
((close
   (2 0 . free-id=?)
   (call
     (touch.gloc.of lookup-topmost-subst)
     (push.iloc.0 . 0)
     (call
       (touch.gloc.of current-transformer-environment)
       (apply.gloc.of current-transformer-environment "./boot/macro/synenv.scm" . 99364))
     (push)
     (apply.gloc.of lookup-topmost-subst "./boot/macro/synenv.scm" . 99338))
   (push)
   (call
     (touch.gloc.of lookup-topmost-subst)
     (push.iloc.0 . 1)
     (call
       (touch.gloc.of current-expansion-environment)
       (apply.gloc.of current-expansion-environment "./boot/macro/synenv.scm" . 100388))
     (push)
     (apply.gloc.of lookup-topmost-subst "./boot/macro/synenv.scm" . 100362))
   (ret.eq? "./boot/macro/synenv.scm" . 99333))
 (set.gloc.of free-id=?)
 (ret.const.unspec))
((close
   (1 0 . make-import)
   (push.const . import)
   (iloc.0 . 0)
   (ret.cons "./boot/macro/synenv.scm" . 104453))
 (set.gloc.of make-import)
 (ret.const.unspec))
((close (0 0 . make-unbound) (ret.const unbound)) (set.gloc.of make-unbound) (ret.const.unspec))
((close
   (1 0 . make-out-of-context)
   (iloc.0 . 0)
   (if.true
     (push.const . out-of-context)
     (iloc.0 . 0)
     (ret.cons "./boot/macro/synenv.scm" . 113673))
   (ret.const out-of-context . #f))
 (set.gloc.of make-out-of-context)
 (ret.const.unspec))
((close
   (1 0 . make-pattern-variable)
   (push.const . pattern-variable)
   (iloc.0 . 0)
   (ret.cons "./boot/macro/synenv.scm" . 118789))
 (set.gloc.of make-pattern-variable)
 (ret.const.unspec))
((close
   (2 0 . make-macro)
   (push.const . macro)
   (push.iloc.0 . 0)
   (push.iloc.0 . 1)
   (ret.subr.gloc.of cons* "./boot/macro/synenv.scm" . 122885))
 (set.gloc.of make-macro)
 (ret.const.unspec))
((close
   (2 0 . make-macro-variable)
   (push.const . macro-variable)
   (push.iloc.0 . 0)
   (push.iloc.0 . 1)
   (ret.subr.gloc.of cons* "./boot/macro/synenv.scm" . 126981))
 (set.gloc.of make-macro-variable)
 (ret.const.unspec))
((close
   (1 0 . make-special)
   (push.const . special)
   (iloc.0 . 0)
   (ret.cons "./boot/macro/synenv.scm" . 131077))
 (set.gloc.of make-special)
 (ret.const.unspec))
((close
   (1 0 . import?)
   (iloc.0 . 0)
   (if.not.pair?.ret.const . #f)
   (push.car.iloc (0 . 0) "./boot/macro/synenv.scm" . 136207)
   (const . import)
   (ret.eq? "./boot/macro/synenv.scm" . 136202))
 (set.gloc.of import?)
 (ret.const.unspec))
((close
   (1 0 . unbound?)
   (iloc.0 . 0)
   (if.not.pair?.ret.const . #f)
   (push.car.iloc (0 . 0) "./boot/macro/synenv.scm" . 141327)
   (const . unbound)
   (ret.eq? "./boot/macro/synenv.scm" . 141322))
 (set.gloc.of unbound?)
 (ret.const.unspec))
((close
   (1 0 . out-of-context?)
   (iloc.0 . 0)
   (if.not.pair?.ret.const . #f)
   (push.car.iloc (0 . 0) "./boot/macro/synenv.scm" . 146447)
   (const . out-of-context)
   (ret.eq? "./boot/macro/synenv.scm" . 146442))
 (set.gloc.of out-of-context?)
 (ret.const.unspec))
((close
   (1 0 . macro?)
   (iloc.0 . 0)
   (if.not.pair?.ret.const . #f)
   (push.car.iloc (0 . 0) "./boot/macro/synenv.scm" . 151571)
   (const . macro)
   (if.eq?.ret.const . #t)
   (push.car.iloc (0 . 0) "./boot/macro/synenv.scm" . 152595)
   (const . macro-variable)
   (ret.eq? "./boot/macro/synenv.scm" . 152590))
 (set.gloc.of macro?)
 (ret.const.unspec))
((close
   (1 0 . macro-variable?)
   (iloc.0 . 0)
   (if.not.pair?.ret.const . #f)
   (push.car.iloc (0 . 0) "./boot/macro/synenv.scm" . 157711)
   (const . macro-variable)
   (ret.eq? "./boot/macro/synenv.scm" . 157706))
 (set.gloc.of macro-variable?)
 (ret.const.unspec))
((close
   (1 0 . pattern-variable?)
   (iloc.0 . 0)
   (if.not.pair?.ret.const . #f)
   (push.car.iloc (0 . 0) "./boot/macro/synenv.scm" . 162831)
   (const . pattern-variable)
   (ret.eq? "./boot/macro/synenv.scm" . 162826))
 (set.gloc.of pattern-variable?)
 (ret.const.unspec))
((close
   (1 0 . special?)
   (iloc.0 . 0)
   (if.not.pair?.ret.const . #f)
   (push.car.iloc (0 . 0) "./boot/macro/synenv.scm" . 167951)
   (const . special)
   (ret.eq? "./boot/macro/synenv.scm" . 167946))
 (set.gloc.of special?)
 (ret.const.unspec))
((close
   (2 0 . unexpected-unquote)
   (push.car.iloc (0 . 0) "./boot/macro/synenv.scm" . 172055)
   (push.const . "unquote appear outside of quasiquote")
   (push.iloc.0 . 0)
   (apply.gloc.of syntax-violation "./boot/macro/synenv.scm" . 172037))
 (set.gloc.of unexpected-unquote)
 (ret.const.unspec))
((close
   (2 0 . unexpected-unquote-splicing)
   (push.car.iloc (0 . 0) "./boot/macro/synenv.scm" . 176151)
   (push.const . "unquote-splicing appear outside of quasiquote")
   (push.iloc.0 . 0)
   (apply.gloc.of syntax-violation "./boot/macro/synenv.scm" . 176133))
 (set.gloc.of unexpected-unquote-splicing)
 (ret.const.unspec))
((close
   (2 0 . unexpected-auxiliary-syntax)
   (push.car.iloc (0 . 0) "./boot/macro/synenv.scm" . 180247)
   (push.const . "misplaced auxiliary syntactic keyword")
   (push.iloc.0 . 0)
   (apply.gloc.of syntax-violation "./boot/macro/synenv.scm" . 180229))
 (set.gloc.of unexpected-auxiliary-syntax)
 (ret.const.unspec))
((close
   (2 0 . unexpected-syntax)
   (push.car.iloc (0 . 0) "./boot/macro/synenv.scm" . 184343)
   (push.const . "misplaced syntactic keyword")
   (push.iloc.0 . 0)
   (apply.gloc.of syntax-violation "./boot/macro/synenv.scm" . 184325))
 (set.gloc.of unexpected-syntax)
 (ret.const.unspec))
((subr.gloc.of make-core-hashtable 0 "./boot/macro/synenv.scm" . 186386)
 (set.gloc.of core-env)
 (ret.const.unspec))
((close
   (2 0 . init-core-macro)
   (push.gloc.of core-env)
   (push.iloc.0 . 0)
   (push.iloc.0 . 1)
   (subr.gloc.of core-hashtable-set! 3 "./boot/macro/synenv.scm" . 192519)
   (push.gloc.of core-env)
   (call
     (touch.gloc.of core-primitive-name)
     (push.iloc.0 . 0)
     (apply.gloc.of core-primitive-name "./boot/macro/synenv.scm" . 193573))
   (push)
   (push.iloc.0 . 1)
   (ret.subr.gloc.of core-hashtable-set! "./boot/macro/synenv.scm" . 193543))
 (set.gloc.of |init-core-macro`3016*|)
 (call
   (touch.gloc.of |init-core-macro`3016*|)
   (push.const . lambda)
   (call
     (touch.gloc.of make-special)
     (push.gloc.of expand-lambda)
     (apply.gloc.of make-special "./boot/macro/synenv.scm" . 195623))
   (push)
   (apply.gloc.of |init-core-macro`3016*| "./boot/macro/synenv.scm" . 195587))
 (call
   (touch.gloc.of |init-core-macro`3016*|)
   (push.const . quote)
   (call
     (touch.gloc.of make-special)
     (push.gloc.of expand-quote)
     (apply.gloc.of make-special "./boot/macro/synenv.scm" . 196647))
   (push)
   (apply.gloc.of |init-core-macro`3016*| "./boot/macro/synenv.scm" . 196611))
 (call
   (touch.gloc.of |init-core-macro`3016*|)
   (push.const . if)
   (call
     (touch.gloc.of make-special)
     (push.gloc.of expand-if)
     (apply.gloc.of make-special "./boot/macro/synenv.scm" . 197671))
   (push)
   (apply.gloc.of |init-core-macro`3016*| "./boot/macro/synenv.scm" . 197635))
 (call
   (touch.gloc.of |init-core-macro`3016*|)
   (push.const . set!)
   (call
     (touch.gloc.of make-special)
     (push.gloc.of expand-set!)
     (apply.gloc.of make-special "./boot/macro/synenv.scm" . 198695))
   (push)
   (apply.gloc.of |init-core-macro`3016*| "./boot/macro/synenv.scm" . 198659))
 (call
   (touch.gloc.of |init-core-macro`3016*|)
   (push.const . define-syntax)
   (call
     (touch.gloc.of make-special)
     (push.gloc.of expand-define-syntax)
     (apply.gloc.of make-special "./boot/macro/synenv.scm" . 199719))
   (push)
   (apply.gloc.of |init-core-macro`3016*| "./boot/macro/synenv.scm" . 199683))
 (call
   (touch.gloc.of |init-core-macro`3016*|)
   (push.const . let-syntax)
   (call
     (touch.gloc.of make-special)
     (push.gloc.of expand-let-syntax)
     (apply.gloc.of make-special "./boot/macro/synenv.scm" . 200743))
   (push)
   (apply.gloc.of |init-core-macro`3016*| "./boot/macro/synenv.scm" . 200707))
 (call
   (touch.gloc.of |init-core-macro`3016*|)
   (push.const . letrec-syntax)
   (call
     (touch.gloc.of make-special)
     (push.gloc.of expand-letrec-syntax)
     (apply.gloc.of make-special "./boot/macro/synenv.scm" . 201767))
   (push)
   (apply.gloc.of |init-core-macro`3016*| "./boot/macro/synenv.scm" . 201731))
 (call
   (touch.gloc.of |init-core-macro`3016*|)
   (push.const . begin)
   (call
     (touch.gloc.of make-special)
     (push.gloc.of expand-begin)
     (apply.gloc.of make-special "./boot/macro/synenv.scm" . 202791))
   (push)
   (apply.gloc.of |init-core-macro`3016*| "./boot/macro/synenv.scm" . 202755))
 (call
   (touch.gloc.of |init-core-macro`3016*|)
   (push.const . define)
   (call
     (touch.gloc.of make-special)
     (push.gloc.of expand-define)
     (apply.gloc.of make-special "./boot/macro/synenv.scm" . 203815))
   (push)
   (apply.gloc.of |init-core-macro`3016*| "./boot/macro/synenv.scm" . 203779))
 (call
   (touch.gloc.of |init-core-macro`3016*|)
   (push.const . quasiquote)
   (call
     (touch.gloc.of make-special)
     (push.gloc.of expand-quasiquote)
     (apply.gloc.of make-special "./boot/macro/synenv.scm" . 204839))
   (push)
   (apply.gloc.of |init-core-macro`3016*| "./boot/macro/synenv.scm" . 204803))
 (call
   (touch.gloc.of |init-core-macro`3016*|)
   (push.const . let)
   (call
     (touch.gloc.of make-special)
     (push.gloc.of expand-let)
     (apply.gloc.of make-special "./boot/macro/synenv.scm" . 205863))
   (push)
   (apply.gloc.of |init-core-macro`3016*| "./boot/macro/synenv.scm" . 205827))
 (call
   (touch.gloc.of |init-core-macro`3016*|)
   (push.const . letrec)
   (call
     (touch.gloc.of make-special)
     (push.gloc.of expand-letrec)
     (apply.gloc.of make-special "./boot/macro/synenv.scm" . 206887))
   (push)
   (apply.gloc.of |init-core-macro`3016*| "./boot/macro/synenv.scm" . 206851))
 (call
   (touch.gloc.of |init-core-macro`3016*|)
   (push.const . let*)
   (call
     (touch.gloc.of make-special)
     (push.gloc.of expand-let*)
     (apply.gloc.of make-special "./boot/macro/synenv.scm" . 207911))
   (push)
   (apply.gloc.of |init-core-macro`3016*| "./boot/macro/synenv.scm" . 207875))
 (call
   (touch.gloc.of |init-core-macro`3016*|)
   (push.const . cond)
   (call
     (touch.gloc.of make-special)
     (push.gloc.of expand-cond)
     (apply.gloc.of make-special "./boot/macro/synenv.scm" . 208935))
   (push)
   (apply.gloc.of |init-core-macro`3016*| "./boot/macro/synenv.scm" . 208899))
 (call
   (touch.gloc.of |init-core-macro`3016*|)
   (push.const . case)
   (call
     (touch.gloc.of make-special)
     (push.gloc.of expand-case)
     (apply.gloc.of make-special "./boot/macro/synenv.scm" . 209959))
   (push)
   (apply.gloc.of |init-core-macro`3016*| "./boot/macro/synenv.scm" . 209923))
 (call
   (touch.gloc.of |init-core-macro`3016*|)
   (push.const . do)
   (call
     (touch.gloc.of make-special)
     (push.gloc.of expand-do)
     (apply.gloc.of make-special "./boot/macro/synenv.scm" . 210983))
   (push)
   (apply.gloc.of |init-core-macro`3016*| "./boot/macro/synenv.scm" . 210947))
 (call
   (touch.gloc.of |init-core-macro`3016*|)
   (push.const . and)
   (call
     (touch.gloc.of make-special)
     (push.gloc.of expand-and)
     (apply.gloc.of make-special "./boot/macro/synenv.scm" . 212007))
   (push)
   (apply.gloc.of |init-core-macro`3016*| "./boot/macro/synenv.scm" . 211971))
 (call
   (touch.gloc.of |init-core-macro`3016*|)
   (push.const . or)
   (call
     (touch.gloc.of make-special)
     (push.gloc.of expand-or)
     (apply.gloc.of make-special "./boot/macro/synenv.scm" . 213031))
   (push)
   (apply.gloc.of |init-core-macro`3016*| "./boot/macro/synenv.scm" . 212995))
 (call
   (touch.gloc.of |init-core-macro`3016*|)
   (push.const . letrec*)
   (call
     (touch.gloc.of make-special)
     (push.gloc.of expand-letrec*)
     (apply.gloc.of make-special "./boot/macro/synenv.scm" . 214055))
   (push)
   (apply.gloc.of |init-core-macro`3016*| "./boot/macro/synenv.scm" . 214019))
 (call
   (touch.gloc.of |init-core-macro`3016*|)
   (push.const . library)
   (call
     (touch.gloc.of make-special)
     (push.gloc.of expand-library)
     (apply.gloc.of make-special "./boot/macro/synenv.scm" . 215079))
   (push)
   (apply.gloc.of |init-core-macro`3016*| "./boot/macro/synenv.scm" . 215043))
 (call
   (touch.gloc.of |init-core-macro`3016*|)
   (push.const . define-library)
   (call
     (touch.gloc.of make-special)
     (push.gloc.of expand-define-library)
     (apply.gloc.of make-special "./boot/macro/synenv.scm" . 216103))
   (push)
   (apply.gloc.of |init-core-macro`3016*| "./boot/macro/synenv.scm" . 216067))
 (call
   (touch.gloc.of |init-core-macro`3016*|)
   (push.const . let*-values)
   (call
     (touch.gloc.of make-special)
     (push.gloc.of expand-let*-values)
     (apply.gloc.of make-special "./boot/macro/synenv.scm" . 217127))
   (push)
   (apply.gloc.of |init-core-macro`3016*| "./boot/macro/synenv.scm" . 217091))
 (call
   (touch.gloc.of |init-core-macro`3016*|)
   (push.const . let-values)
   (call
     (touch.gloc.of make-special)
     (push.gloc.of expand-let-values)
     (apply.gloc.of make-special "./boot/macro/synenv.scm" . 218151))
   (push)
   (apply.gloc.of |init-core-macro`3016*| "./boot/macro/synenv.scm" . 218115))
 (call
   (touch.gloc.of |init-core-macro`3016*|)
   (push.const . syntax)
   (call
     (touch.gloc.of make-special)
     (push.gloc.of expand-syntax)
     (apply.gloc.of make-special "./boot/macro/synenv.scm" . 219175))
   (push)
   (apply.gloc.of |init-core-macro`3016*| "./boot/macro/synenv.scm" . 219139))
 (call
   (touch.gloc.of |init-core-macro`3016*|)
   (push.const . syntax-case)
   (call
     (touch.gloc.of make-special)
     (push.gloc.of expand-syntax-case)
     (apply.gloc.of make-special "./boot/macro/synenv.scm" . 220199))
   (push)
   (apply.gloc.of |init-core-macro`3016*| "./boot/macro/synenv.scm" . 220163))
 (call
   (touch.gloc.of |init-core-macro`3016*|)
   (push.const . identifier-syntax)
   (call
     (touch.gloc.of make-special)
     (push.gloc.of expand-identifier-syntax)
     (apply.gloc.of make-special "./boot/macro/synenv.scm" . 221223))
   (push)
   (apply.gloc.of |init-core-macro`3016*| "./boot/macro/synenv.scm" . 221187))
 (call
   (touch.gloc.of |init-core-macro`3016*|)
   (push.const . assert)
   (call
     (touch.gloc.of make-special)
     (push.gloc.of expand-assert)
     (apply.gloc.of make-special "./boot/macro/synenv.scm" . 222247))
   (push)
   (apply.gloc.of |init-core-macro`3016*| "./boot/macro/synenv.scm" . 222211))
 (call
   (touch.gloc.of |init-core-macro`3016*|)
   (push.const . unquote)
   (call
     (touch.gloc.of make-special)
     (push.gloc.of unexpected-unquote)
     (apply.gloc.of make-special "./boot/macro/synenv.scm" . 223271))
   (push)
   (apply.gloc.of |init-core-macro`3016*| "./boot/macro/synenv.scm" . 223235))
 (call
   (touch.gloc.of |init-core-macro`3016*|)
   (push.const . unquote-splicing)
   (call
     (touch.gloc.of make-special)
     (push.gloc.of unexpected-unquote-splicing)
     (apply.gloc.of make-special "./boot/macro/synenv.scm" . 224295))
   (push)
   (apply.gloc.of |init-core-macro`3016*| "./boot/macro/synenv.scm" . 224259))
 (call
   (touch.gloc.of |init-core-macro`3016*|)
   (push.const . syntax-rules)
   (call
     (touch.gloc.of make-special)
     (push.gloc.of unexpected-syntax)
     (apply.gloc.of make-special "./boot/macro/synenv.scm" . 225319))
   (push)
   (apply.gloc.of |init-core-macro`3016*| "./boot/macro/synenv.scm" . 225283))
 (call
   (touch.gloc.of |init-core-macro`3016*|)
   (push.const . else)
   (call
     (touch.gloc.of make-special)
     (push.gloc.of unexpected-auxiliary-syntax)
     (apply.gloc.of make-special "./boot/macro/synenv.scm" . 226343))
   (push)
   (apply.gloc.of |init-core-macro`3016*| "./boot/macro/synenv.scm" . 226307))
 (call
   (touch.gloc.of |init-core-macro`3016*|)
   (push.const . =>)
   (call
     (touch.gloc.of make-special)
     (push.gloc.of unexpected-auxiliary-syntax)
     (apply.gloc.of make-special "./boot/macro/synenv.scm" . 227367))
   (push)
   (apply.gloc.of |init-core-macro`3016*| "./boot/macro/synenv.scm" . 227331))
 (call
   (touch.gloc.of |init-core-macro`3016*|)
   (push.const . ...)
   (call
     (touch.gloc.of make-special)
     (push.gloc.of unexpected-auxiliary-syntax)
     (apply.gloc.of make-special "./boot/macro/synenv.scm" . 228391))
   (push)
   (apply.gloc.of |init-core-macro`3016*| "./boot/macro/synenv.scm" . 228355))
 (call
   (touch.gloc.of |init-core-macro`3016*|)
   (push.const . _)
   (call
     (touch.gloc.of make-special)
     (push.gloc.of unexpected-auxiliary-syntax)
     (apply.gloc.of make-special "./boot/macro/synenv.scm" . 229415))
   (push)
   (apply.gloc.of |init-core-macro`3016*| "./boot/macro/synenv.scm" . 229379))
 (call
   (touch.gloc.of |init-core-macro`3016*|)
   (push.const . import)
   (call
     (touch.gloc.of make-special)
     (push.gloc.of expand-import)
     (apply.gloc.of make-special "./boot/macro/synenv.scm" . 230439))
   (push)
   (apply.gloc.of |init-core-macro`3016*| "./boot/macro/synenv.scm" . 230403))
 (call
   (touch.gloc.of |init-core-macro`3016*|)
   (push.const . include)
   (call
     (touch.gloc.of make-special)
     (push.gloc.of expand-include)
     (apply.gloc.of make-special "./boot/macro/synenv.scm" . 231463))
   (push)
   (apply.gloc.of |init-core-macro`3016*| "./boot/macro/synenv.scm" . 231427))
 (touch.gloc.of |init-core-macro`3016*|)
 (push.const . include-ci)
 (call
   (touch.gloc.of make-special)
   (push.gloc.of expand-include-ci)
   (apply.gloc.of make-special "./boot/macro/synenv.scm" . 232487))
 (push)
 (apply.gloc.of |init-core-macro`3016*| "./boot/macro/synenv.scm" . 232451))
((push.gloc.of core-env)
 (push.const . lambda)
 (push.const . #f)
 (subr.gloc.of core-hashtable-ref 3 "./boot/macro/synenv.scm" . 234529)
 (set.gloc.of denote-lambda)
 (ret.const.unspec))
((push.gloc.of core-env)
 (push.const . begin)
 (push.const . #f)
 (subr.gloc.of core-hashtable-ref 3 "./boot/macro/synenv.scm" . 235553)
 (set.gloc.of denote-begin)
 (ret.const.unspec))
((push.gloc.of core-env)
 (push.const . define)
 (push.const . #f)
 (subr.gloc.of core-hashtable-ref 3 "./boot/macro/synenv.scm" . 236577)
 (set.gloc.of denote-define)
 (ret.const.unspec))
((push.gloc.of core-env)
 (push.const . define-syntax)
 (push.const . #f)
 (subr.gloc.of core-hashtable-ref 3 "./boot/macro/synenv.scm" . 237601)
 (set.gloc.of denote-define-syntax)
 (ret.const.unspec))
((push.gloc.of core-env)
 (push.const . let-syntax)
 (push.const . #f)
 (subr.gloc.of core-hashtable-ref 3 "./boot/macro/synenv.scm" . 238625)
 (set.gloc.of denote-let-syntax)
 (ret.const.unspec))
((push.gloc.of core-env)
 (push.const . letrec-syntax)
 (push.const . #f)
 (subr.gloc.of core-hashtable-ref 3 "./boot/macro/synenv.scm" . 239649)
 (set.gloc.of denote-letrec-syntax)
 (ret.const.unspec))
((push.gloc.of core-env)
 (push.const . quasiquote)
 (push.const . #f)
 (subr.gloc.of core-hashtable-ref 3 "./boot/macro/synenv.scm" . 240673)
 (set.gloc.of denote-quasiquote)
 (ret.const.unspec))
((push.gloc.of core-env)
 (push.const . quote)
 (push.const . #f)
 (subr.gloc.of core-hashtable-ref 3 "./boot/macro/synenv.scm" . 241697)
 (set.gloc.of denote-quote)
 (ret.const.unspec))
((push.gloc.of core-env)
 (push.const . if)
 (push.const . #f)
 (subr.gloc.of core-hashtable-ref 3 "./boot/macro/synenv.scm" . 242721)
 (set.gloc.of denote-if)
 (ret.const.unspec))
((push.gloc.of core-env)
 (push.const . set!)
 (push.const . #f)
 (subr.gloc.of core-hashtable-ref 3 "./boot/macro/synenv.scm" . 243745)
 (set.gloc.of denote-set!)
 (ret.const.unspec))
((push.gloc.of core-env)
 (push.const . unquote)
 (push.const . #f)
 (subr.gloc.of core-hashtable-ref 3 "./boot/macro/synenv.scm" . 244769)
 (set.gloc.of denote-unquote)
 (ret.const.unspec))
((push.gloc.of core-env)
 (push.const . unquote-splicing)
 (push.const . #f)
 (subr.gloc.of core-hashtable-ref 3 "./boot/macro/synenv.scm" . 245793)
 (set.gloc.of denote-unquote-splicing)
 (ret.const.unspec))
((push.gloc.of core-env)
 (push.const . let)
 (push.const . #f)
 (subr.gloc.of core-hashtable-ref 3 "./boot/macro/synenv.scm" . 246817)
 (set.gloc.of denote-let)
 (ret.const.unspec))
((push.gloc.of core-env)
 (push.const . let*)
 (push.const . #f)
 (subr.gloc.of core-hashtable-ref 3 "./boot/macro/synenv.scm" . 247841)
 (set.gloc.of denote-let*)
 (ret.const.unspec))
((push.gloc.of core-env)
 (push.const . cond)
 (push.const . #f)
 (subr.gloc.of core-hashtable-ref 3 "./boot/macro/synenv.scm" . 248865)
 (set.gloc.of denote-cond)
 (ret.const.unspec))
((push.gloc.of core-env)
 (push.const . or)
 (push.const . #f)
 (subr.gloc.of core-hashtable-ref 3 "./boot/macro/synenv.scm" . 249889)
 (set.gloc.of denote-or)
 (ret.const.unspec))
((push.gloc.of core-env)
 (push.const . letrec*)
 (push.const . #f)
 (subr.gloc.of core-hashtable-ref 3 "./boot/macro/synenv.scm" . 250913)
 (set.gloc.of denote-letrec*)
 (ret.const.unspec))
((push.gloc.of core-env)
 (push.const . syntax-quote)
 (push.const . #f)
 (subr.gloc.of core-hashtable-ref 3 "./boot/macro/synenv.scm" . 251937)
 (set.gloc.of denote-syntax-quote)
 (ret.const.unspec))
((push.gloc.of core-env)
 (push.const . syntax)
 (push.const . #f)
 (subr.gloc.of core-hashtable-ref 3 "./boot/macro/synenv.scm" . 252961)
 (set.gloc.of denote-syntax)
 (ret.const.unspec))
((push.gloc.of core-env)
 (push.const . syntax-case)
 (push.const . #f)
 (subr.gloc.of core-hashtable-ref 3 "./boot/macro/synenv.scm" . 253985)
 (set.gloc.of denote-syntax-case)
 (ret.const.unspec))
((push.gloc.of core-env)
 (push.const . syntax-rules)
 (push.const . #f)
 (subr.gloc.of core-hashtable-ref 3 "./boot/macro/synenv.scm" . 255009)
 (set.gloc.of denote-syntax-rules)
 (ret.const.unspec))
((push.gloc.of core-env)
 (push.const . else)
 (push.const . #f)
 (subr.gloc.of core-hashtable-ref 3 "./boot/macro/synenv.scm" . 256033)
 (set.gloc.of denote-else)
 (ret.const.unspec))
((push.gloc.of core-env)
 (push.const . =>)
 (push.const . #f)
 (subr.gloc.of core-hashtable-ref 3 "./boot/macro/synenv.scm" . 257057)
 (set.gloc.of denote-=>)
 (ret.const.unspec))
((push.gloc.of core-env)
 (push.const . _)
 (push.const . #f)
 (subr.gloc.of core-hashtable-ref 3 "./boot/macro/synenv.scm" . 258081)
 (set.gloc.of denote-_)
 (ret.const.unspec))
((push.gloc.of core-env)
 (push.const . import)
 (push.const . #f)
 (subr.gloc.of core-hashtable-ref 3 "./boot/macro/synenv.scm" . 259105)
 (set.gloc.of denote-import)
 (ret.const.unspec))
((close
   (2 0 . denote-lambda?)
   (iloc.0 . 1)
   (if.not.symbol?.ret.const . #f)
   (call
     (touch.gloc.of env-lookup)
     (push.iloc.0 . 0)
     (push.iloc.0 . 1)
     (apply.gloc.of env-lookup "./boot/macro/synenv.scm" . 264207))
   (push)
   (gloc.of denote-lambda)
   (ret.eq? "./boot/macro/synenv.scm" . 264202))
 (set.gloc.of denote-lambda?)
 (ret.const.unspec))
((close
   (2 0 . denote-begin?)
   (iloc.0 . 1)
   (if.not.symbol?.ret.const . #f)
   (call
     (touch.gloc.of env-lookup)
     (push.iloc.0 . 0)
     (push.iloc.0 . 1)
     (apply.gloc.of env-lookup "./boot/macro/synenv.scm" . 269327))
   (push)
   (gloc.of denote-begin)
   (ret.eq? "./boot/macro/synenv.scm" . 269322))
 (set.gloc.of denote-begin?)
 (ret.const.unspec))
((close
   (2 0 . denote-let?)
   (iloc.0 . 1)
   (if.not.symbol?.ret.const . #f)
   (call
     (touch.gloc.of env-lookup)
     (push.iloc.0 . 0)
     (push.iloc.0 . 1)
     (apply.gloc.of env-lookup "./boot/macro/synenv.scm" . 274447))
   (push)
   (gloc.of denote-let)
   (ret.eq? "./boot/macro/synenv.scm" . 274442))
 (set.gloc.of denote-let?)
 (ret.const.unspec))
((close
   (2 0 . denote-quote?)
   (iloc.0 . 1)
   (if.not.symbol?.ret.const . #f)
   (call
     (touch.gloc.of env-lookup)
     (push.iloc.0 . 0)
     (push.iloc.0 . 1)
     (apply.gloc.of env-lookup "./boot/macro/synenv.scm" . 279567))
   (push)
   (gloc.of denote-quote)
   (ret.eq? "./boot/macro/synenv.scm" . 279562))
 (set.gloc.of denote-quote?)
 (ret.const.unspec))
((close
   (2 0 . denote-quasiquote?)
   (iloc.0 . 1)
   (if.not.symbol?.ret.const . #f)
   (call
     (touch.gloc.of env-lookup)
     (push.iloc.0 . 0)
     (push.iloc.0 . 1)
     (apply.gloc.of env-lookup "./boot/macro/synenv.scm" . 284687))
   (push)
   (gloc.of denote-quasiquote)
   (ret.eq? "./boot/macro/synenv.scm" . 284682))
 (set.gloc.of denote-quasiquote?)
 (ret.const.unspec))
((close
   (2 0 . denote-unquote?)
   (iloc.0 . 1)
   (if.not.symbol?.ret.const . #f)
   (call
     (touch.gloc.of env-lookup)
     (push.iloc.0 . 0)
     (push.iloc.0 . 1)
     (apply.gloc.of env-lookup "./boot/macro/synenv.scm" . 289807))
   (push)
   (gloc.of denote-unquote)
   (ret.eq? "./boot/macro/synenv.scm" . 289802))
 (set.gloc.of denote-unquote?)
 (ret.const.unspec))
((close
   (2 0 . denote-unquote-splicing?)
   (iloc.0 . 1)
   (if.not.symbol?.ret.const . #f)
   (call
     (touch.gloc.of env-lookup)
     (push.iloc.0 . 0)
     (push.iloc.0 . 1)
     (apply.gloc.of env-lookup "./boot/macro/synenv.scm" . 294927))
   (push)
   (gloc.of denote-unquote-splicing)
   (ret.eq? "./boot/macro/synenv.scm" . 294922))
 (set.gloc.of denote-unquote-splicing?)
 (ret.const.unspec))
((close
   (2 0 . denote-syntax-rules?)
   (iloc.0 . 1)
   (if.not.symbol?.ret.const . #f)
   (call
     (touch.gloc.of env-lookup)
     (push.iloc.0 . 0)
     (push.iloc.0 . 1)
     (apply.gloc.of env-lookup "./boot/macro/synenv.scm" . 300047))
   (push)
   (gloc.of denote-syntax-rules)
   (ret.eq? "./boot/macro/synenv.scm" . 300042))
 (set.gloc.of denote-syntax-rules?)
 (ret.const.unspec))
((close
   (2 0 . denote-else?)
   (iloc.0 . 1)
   (if.not.symbol?.ret.const . #f)
   (call
     (touch.gloc.of env-lookup)
     (push.iloc.0 . 0)
     (push.iloc.0 . 1)
     (apply.gloc.of env-lookup "./boot/macro/synenv.scm" . 305167))
   (push)
   (gloc.of denote-else)
   (ret.eq? "./boot/macro/synenv.scm" . 305162))
 (set.gloc.of denote-else?)
 (ret.const.unspec))
((close
   (2 0 . denote-=>?)
   (iloc.0 . 1)
   (if.not.symbol?.ret.const . #f)
   (call
     (touch.gloc.of env-lookup)
     (push.iloc.0 . 0)
     (push.iloc.0 . 1)
     (apply.gloc.of env-lookup "./boot/macro/synenv.scm" . 310287))
   (push)
   (gloc.of denote-=>)
   (ret.eq? "./boot/macro/synenv.scm" . 310282))
 (set.gloc.of denote-=>?)
 (ret.const.unspec))
((close
   (2 0 . denote-set!?)
   (iloc.0 . 1)
   (if.not.symbol?.ret.const . #f)
   (call
     (touch.gloc.of env-lookup)
     (push.iloc.0 . 0)
     (push.iloc.0 . 1)
     (apply.gloc.of env-lookup "./boot/macro/synenv.scm" . 315407))
   (push)
   (gloc.of denote-set!)
   (ret.eq? "./boot/macro/synenv.scm" . 315402))
 (set.gloc.of denote-set!?)
 (ret.const.unspec))
((push.const . |.LIST|)
 (const . |.list|)
 (push.cons)
 (push.const . |.CONS|)
 (const . |.cons|)
 (push.cons)
 (push.const . |.CONS*|)
 (const . |.cons*|)
 (push.cons)
 (push.const . |.APPEND|)
 (const . |.append|)
 (push.cons)
 (push.const . |.VECTOR|)
 (const . |.vector|)
 (push.cons)
 (push.const . |.LIST->VECTOR|)
 (const . |.list->vector|)
 (push.cons)
 (push.const . |.EQ?|)
 (const . |.eq?|)
 (push.cons)
 (push.const . |.EQV?|)
 (const . |.eqv?|)
 (push.cons)
 (push.const . |.MEMQ|)
 (const . |.memq|)
 (push.cons)
 (push.const . |.MEMV|)
 (const . |.memv|)
 (push.cons)
 (push.const . |.CALL-WITH-VALUES|)
 (const . |.call-with-values|)
 (push.cons)
 (push.const . |.IDENTIFIER?|)
 (const . |.identifier?|)
 (push.cons)
 (push.const . |.MAKE-VARIABLE-TRANSFORMER|)
 (const . |.make-variable-transformer|)
 (push.cons)
 (push.const . |.UNSPECIFIED|)
 (const . |.unspecified|)
 (push.cons)
 (push.const . |.QUOTE|)
 (gloc.of denote-quote)
 (push.cons)
 (push.const . |.LET|)
 (gloc.of denote-let)
 (push.cons)
 (push.const . |.LETREC*|)
 (gloc.of denote-letrec*)
 (push.cons)
 (push.const . |.BEGIN|)
 (gloc.of denote-begin)
 (push.cons)
 (push.const . |.LAMBDA|)
 (gloc.of denote-lambda)
 (push.cons)
 (push.const . |.IF|)
 (gloc.of denote-if)
 (push.cons)
 (push.const . |.OR|)
 (gloc.of denote-or)
 (push.cons)
 (push.const . |.COND|)
 (gloc.of denote-cond)
 (push.cons)
 (push.const . |.ELSE|)
 (gloc.of denote-else)
 (push.cons)
 (push.const . |.SYNTAX|)
 (gloc.of denote-syntax)
 (push.cons)
 (push.const . |.SYNTAX-CASE|)
 (gloc.of denote-syntax-case)
 (push.cons)
 (subr.gloc.of list 25 "./boot/macro/synenv.scm" . 318467)
 (set.gloc.of private-primitives-environment)
 (ret.const.unspec))
((push.gloc.of core-env)
 (ret.subr.gloc.of current-macro-environment "./boot/macro/synenv.scm" . 346113))

;
((call (push.const . #f) (apply.gloc.of make-parameter "./boot/compile.scm" . 4123))
 (set.gloc.of ht-local-closures)
 (ret.const.unspec))
((close
   (1 0 . local-closure?)
   (call
     (call
       (touch.gloc.of current-closure-comments)
       (apply.gloc.of current-closure-comments "./boot/compile.scm" . 8209))
     (if.false.ret)
     (call
       (touch.gloc.of current-closure-comments)
       (apply.gloc.of current-closure-comments "./boot/compile.scm" . 8256))
     (push)
     (push.iloc.0 . 0)
     (push.const . #f)
     (ret.subr.gloc.of core-hashtable-ref "./boot/compile.scm" . 8236))
   (push)
   (extend . 1)
   (iloc.0 . 0)
   (if.false.ret)
   (push.car.iloc (0 . 0) "./boot/compile.scm" . 9249)
   (push.const stack)
   (ret.subr.gloc.of memq "./boot/compile.scm" . 9243))
 (set.gloc.of local-closure?)
 (ret.const.unspec))
((close
   (1 0)
   (cadr.iloc (0 . 0) "./boot/compile.scm" . 15389)
   (if.not.pair?.ret.const . #f)
   (push.iloc.0 . 0)
   (push.subr.gloc.of caadr 1 "./boot/compile.scm" . 16411)
   (const . lambda)
   (if.not.eq?.ret.const . #f)
   (call
     (touch.gloc.of local-closure?)
     (push.cadr.iloc (0 . 0) "./boot/compile.scm" . 17446)
     (apply.gloc.of local-closure? "./boot/compile.scm" . 17430))
   (if.false.ret)
   (call
     (touch.gloc.of ht-local-closures)
     (apply.gloc.of ht-local-closures "./boot/compile.scm" . 18475))
   (push)
   (push.car.iloc (0 . 0) "./boot/compile.scm" . 18495)
   (push.const . #t)
   (ret.subr.gloc.of core-hashtable-set! "./boot/compile.scm" . 18454))
 (set.gloc.of |.L842|)
 (close
   (1 0 . collect-local-closure)
   (push.gloc.of |.L842|)
   (push.iloc.0 . 0)
   (apply.gloc.of for-each "./boot/compile.scm" . 14341))
 (set.gloc.of collect-local-closure)
 (ret.const.unspec))
((close
   (1 0 . make-application-comment)
   (subr.gloc.of backtrace 0 "./boot/compile.scm" . 23561)
   (if.true
     (subr.gloc.of current-source-comments 0 "./boot/compile.scm" . 24592)
     (if.true
       (subr.gloc.of current-source-comments 0)
       (push)
       (push.iloc.0 . 0)
       (push.const . #f)
       (push.subr.gloc.of core-hashtable-ref 3 "./boot/compile.scm" . 26652)
       (extend . 1)
       (iloc.0 . 0)
       (if.true
         (<n.iloc (0 . 0) 0 "./boot/compile.scm" . 28709)
         (if.true
           (push.iloc.1 . 0)
           (subr.gloc.of current-source-comments 0)
           (push)
           (push.const . |.&SOURCE-PATH|)
           (push.const . #f)
           (push.subr.gloc.of core-hashtable-ref 3 "./boot/compile.scm" . 29742)
           (push.iloc.0 . 0)
           (push.subr.gloc.of - 1 "./boot/compile.scm" . 29810)
           (ret.subr.gloc.of |.cons*| "./boot/compile.scm" . 28705))
         (subr.gloc.of current-source-comments 0)
         (push)
         (push.const . |.&SOURCE-PATH|)
         (push.const . #f)
         (push.subr.gloc.of core-hashtable-ref 3 "./boot/compile.scm" . 30760)
         (iloc.0 . 0)
         (ret.cons "./boot/compile.scm" . 28705))
       (push.iloc.1 . 0)
       (ret.subr.gloc.of list "./boot/compile.scm" . 32796))
     (push.iloc.0 . 0)
     (ret.subr.gloc.of list "./boot/compile.scm" . 34832))
   (ret.const))
 (set.gloc.of make-application-comment)
 (ret.const.unspec))
((close
   (1 0 . make-closure-comment)
   (call
     (call
       (touch.gloc.of current-closure-comments)
       (apply.gloc.of current-closure-comments "./boot/compile.scm" . 39953))
     (if.false.ret)
     (call
       (touch.gloc.of current-closure-comments)
       (apply.gloc.of current-closure-comments "./boot/compile.scm" . 40997))
     (push)
     (push.iloc.0 . 0)
     (push.const . #f)
     (ret.subr.gloc.of core-hashtable-ref "./boot/compile.scm" . 40977))
   (push)
   (extend . 1)
   (iloc.0 . 0)
   (if.true (push.iloc.0 . 0) (ret.subr.gloc.of cdr "./boot/compile.scm" . 43019))
   (ret.const))
 (set.gloc.of make-closure-comment)
 (ret.const.unspec))
((close
   (1 0 . top-level-subr)
   (iloc.0 . 0)
   (if.not.symbol?.ret.const . #f)
   (push.iloc.0 . 0)
   (subr.gloc.of top-level-bound? 1 "./boot/compile.scm" . 48138)
   (if.false.ret)
   (push.iloc.0 . 0)
   (push.subr.gloc.of top-level-value 1 "./boot/compile.scm" . 49169)
   (subr.gloc.of subr? 1 "./boot/compile.scm" . 49162)
   (if.false.ret)
   (push.iloc.0 . 0)
   (ret.subr.gloc.of top-level-value "./boot/compile.scm" . 50186))
 (set.gloc.of top-level-subr)
 (ret.const.unspec))
((close
   (1 0 . top-level-value-or-false)
   (iloc.0 . 0)
   (if.not.symbol?.ret.const . #f)
   (push.iloc.0 . 0)
   (subr.gloc.of top-level-bound? 1 "./boot/compile.scm" . 55306)
   (if.false.ret)
   (push.iloc.0 . 0)
   (ret.subr.gloc.of top-level-value "./boot/compile.scm" . 56330))
 (set.gloc.of top-level-value-or-false)
 (ret.const.unspec))
((close
   (1 0 . formals->list)
   (iloc.0 . 0)
   (if.pair?
     (push.car.iloc (0 . 0) "./boot/compile.scm" . 61455)
     (call
       (touch.gloc.of formals->list)
       (push.cdr.iloc (0 . 0) "./boot/compile.scm" . 61480)
       (apply.gloc.of formals->list "./boot/compile.scm" . 61465))
     (ret.cons "./boot/compile.scm" . 61449))
   (iloc.0 . 0)
   (if.null?.ret.const)
   (push.iloc.0 . 0)
   (ret.subr.gloc.of list "./boot/compile.scm" . 63509))
 (set.gloc.of formals->list)
 (ret.const.unspec))
((close
   (2 0 . make-formals-operand)
   (push.iloc.0 . 1)
   (subr.gloc.of list? 1 "./boot/compile.scm" . 67596)
   (if.true
     (push.iloc.0 . 1)
     (push.subr.gloc.of length 1 "./boot/compile.scm" . 67618)
     (push.const . 0)
     (ret.subr.gloc.of list "./boot/compile.scm" . 67612))
   (iloc.0 . 1)
   (if.pair?
     (push.iloc.0 . 0)
     (push.subr.gloc.of length 1 "./boot/compile.scm" . 68645)
     (push.const . 1)
     (push.subr.gloc.of - 2 "./boot/compile.scm" . 68642)
     (push.const . 1)
     (ret.subr.gloc.of list "./boot/compile.scm" . 68636))
   (ret.const 0 1))
 (set.gloc.of make-formals-operand)
 (ret.const.unspec))
((close
   (2 0 . make-iloc-operand)
   (extend.enclose+
     (2 0 . loop1)
     (iloc.0 . 0)
     (if.not.pair?.ret.const . #f)
     (push.iloc 2 . 0)
     (push.car.iloc (0 . 0) "./boot/compile.scm" . 75800)
     (subr.gloc.of memq 2 "./boot/compile.scm" . 75792)
     (if.true
       (push.iloc.0 . 1)
       (call
         (extend.enclose+
           (2 0 . loop2)
           (push.car.iloc (0 . 0) "./boot/compile.scm" . 78881)
           (iloc 4 . 0)
           (if.eq? (ret.iloc 0 . 1))
           (push.cdr.iloc (0 . 0) "./boot/compile.scm" . 80931)
           (push.n+.iloc (0 . 1) 1 "./boot/compile.scm" . 80942)
           (apply.iloc+ (1 . 0) "./boot/compile.scm" . 80924))
         (push.car.iloc (1 . 0) "./boot/compile.scm" . 77864)
         (push.const . 0)
         (apply.iloc+ (0 . 0) "./boot/compile.scm" . 78872))
       (ret.cons
         (cons |level`3078*|
               (letrec* ((|loop2`3082*|
                           (lambda (|lst2`3083*| |index`3083*|)
                             (if (eq? (car |lst2`3083*|) |e`3073*|)
                                 |index`3083*|
                                 (|loop2`3082*| (cdr |lst2`3083*|) (+ |index`3083*| 1))))))
                 (|loop2`3082*| (car |lst1`3078*|) 0)))))
     (push.cdr.iloc (0 . 0) "./boot/compile.scm" . 81943)
     (push.n+.iloc (0 . 1) 1 "./boot/compile.scm" . 81954)
     (apply.iloc+ (1 . 0) "./boot/compile.scm" . 81936))
   (push.iloc.1 . 1)
   (push.const . 0)
   (apply.iloc+ (0 . 0) "./boot/compile.scm" . 74759))
 (set.gloc.of make-iloc-operand)
 (ret.const.unspec))
((close
   (3 0 . iloc-iota)
   (extend.enclose+
     (2 0 . loop)
     (<n.iloc (0 . 0) 0 "./boot/compile.scm" . 88078)
     (if.true (ret.iloc 0 . 1))
     (push.n+.iloc (0 . 0) -1 "./boot/compile.scm" . 89113)
     (push.iloc 2 . 0)
     (push.iloc 2 . 1)
     (push.iloc.0 . 0)
     (subr.gloc.of + 2 "./boot/compile.scm" . 89143)
     (push.cons)
     (iloc.0 . 1)
     (push.cons)
     (apply.iloc+ (1 . 0) "./boot/compile.scm" . 89107))
   (push.n+.iloc (1 . 2) -1 "./boot/compile.scm" . 87063)
   (push.const)
   (apply.iloc+ (0 . 0) "./boot/compile.scm" . 88071))
 (set.gloc.of iloc-iota)
 (ret.const.unspec))
((close
   (2 0 . cte-extend-iloc)
   (push.iloc.0 . 0)
   (iloc.0 . 1)
   (ret.cons "./boot/compile.scm" . 93189))
 (set.gloc.of cte-extend-iloc)
 (ret.const.unspec))
((close
   (2 0 . iloc?)
   (iloc.0 . 0)
   (if.not.symbol?.ret.const . #f)
   (extend.enclose+
     (1 0 . loop)
     (iloc.0 . 0)
     (if.not.pair?.ret.const . #f)
     (push.iloc 2 . 0)
     (push.car.iloc (0 . 0) "./boot/compile.scm" . 100381)
     (subr.gloc.of memq 2 "./boot/compile.scm" . 100373)
     (if.true.ret)
     (push.cdr.iloc (0 . 0) "./boot/compile.scm" . 101403)
     (apply.iloc+ (1 . 0) "./boot/compile.scm" . 101397))
   (push.iloc.1 . 1)
   (apply.iloc+ (0 . 0) "./boot/compile.scm" . 99340))
 (set.gloc.of iloc?)
 (ret.const.unspec))
((close
   (1 0 . immediate-literal?)
   (push.iloc.0 . 0)
   (subr.gloc.of fixnum? 1 "./boot/compile.scm" . 105481)
   (if.true.ret)
   (push.iloc.0 . 0)
   (subr.gloc.of char? 1 "./boot/compile.scm" . 105493)
   (if.true.ret)
   (push.iloc.0 . 0)
   (subr.gloc.of boolean? 1 "./boot/compile.scm" . 105503)
   (if.true.ret)
   (iloc.0 . 0)
   (if.null?.ret.const . #t)
   (iloc.0 . 0)
   (if.not.pair?.ret.const . #f)
   (push.car.iloc (0 . 0) "./boot/compile.scm" . 106525)
   (const . quote)
   (if.not.eq?.ret.const . #f)
   (push.cadr.iloc (0 . 0) "./boot/compile.scm" . 106550)
   (ret.subr.gloc.of symbol? "./boot/compile.scm" . 106541))
 (set.gloc.of immediate-literal?)
 (ret.const.unspec))
((close
   (2 0 . compile-touch)
   (call
     (iloc.0 . 0)
     (if.not.symbol?.ret.const . #f)
     (push.iloc.0 . 0)
     (subr.gloc.of top-level-bound? 1 "./boot/compile.scm" . 112662)
     (if.true.ret.const . #f)
     (call
       (touch.gloc.of iloc?)
       (push.iloc.0 . 0)
       (push.iloc.0 . 1)
       (apply.gloc.of iloc? "./boot/compile.scm" . 113686))
     (push)
     (ret.subr.gloc.of not "./boot/compile.scm" . 113681))
   (if.true
     (push.const . touch.gloc.of)
     (push.iloc.0 . 0)
     (push.subr.gloc.of |.list| 2 (|.list| 'touch.gloc.of |e`3107*|))
     (ret.subr.gloc.of |.list| "./boot/compile.scm" . 111627))
   (ret.const))
 (set.gloc.of compile-touch)
 (ret.const.unspec))
((close
   (4 0 . compile-lambda-helper)
   (call
     (touch.gloc.of formals->list)
     (push.iloc.0 . 0)
     (apply.gloc.of formals->list "./boot/compile.scm" . 119825))
   (push)
   (extend . 1)
   (call
     (touch.gloc.of cte-extend-iloc)
     (push.iloc.0 . 0)
     (push.iloc.1 . 3)
     (apply.gloc.of cte-extend-iloc "./boot/compile.scm" . 120850))
   (push)
   (extend . 1)
   (call
     (touch.gloc.of make-formals-operand)
     (push.iloc.1 . 0)
     (push.iloc 2 . 0)
     (apply.gloc.of make-formals-operand "./boot/compile.scm" . 121876))
   (push)
   (push.iloc 2 . 2)
   (push.subr.gloc.of append 2 "./boot/compile.scm" . 121868)
   (call
     (touch.gloc.of compile-expression-seq)
     (push.iloc 2 . 1)
     (push.iloc.0 . 0)
     (push.const . #f)
     (push.const . #t)
     (apply.gloc.of compile-expression-seq "./boot/compile.scm" . 122894))
   (ret.cons "./boot/compile.scm" . 120839))
 (set.gloc.of compile-lambda-helper)
 (ret.const.unspec))
((call
   (subr.gloc.of make-core-hashtable 0)
   (push)
   (extend . 1)
   (call
     (push.close
       (1 0)
       (push.iloc.1 . 0)
       (push.iloc.0 . 0)
       (push.const . #t)
       (ret.subr.gloc.of core-hashtable-set! "./boot/compile.scm" . 127003))
     (push.gloc.of unspecified)
     (push.gloc.of car)
     (push.gloc.of cdr)
     (push.gloc.of cadr)
     (push.gloc.of cddr)
     (push.gloc.of cons)
     (push.gloc.of =)
     (push.gloc.of <)
     (push.gloc.of <=)
     (push.gloc.of >)
     (push.gloc.of >=)
     (push.gloc.of eq?)
     (push.gloc.of null?)
     (push.gloc.of pair?)
     (push.gloc.of +)
     (push.gloc.of -)
     (push.gloc.of eqv?)
     (push.gloc.of equal?)
     (push.gloc.of vector-ref)
     (push.subr.gloc.of list 19 "./boot/compile.scm" . 128015)
     (apply.gloc.of for-each "./boot/compile.scm" . 126981))
   (push.iloc.0 . 0)
   (push.const . #t)
   (ret.subr.gloc.of core-hashtable-copy "./boot/compile.scm" . 129029))
 (set.gloc.of ht-special-subr-expression)
 (ret.const.unspec))
((push.gloc.of =)
 (const . =n.iloc)
 (push.cons)
 (push.gloc.of <)
 (const . <n.iloc)
 (push.cons)
 (push.gloc.of <=)
 (const . <=n.iloc)
 (push.cons)
 (push.gloc.of >)
 (const . >n.iloc)
 (push.cons)
 (push.gloc.of >=)
 (const . >=n.iloc)
 (push.cons)
 (subr.gloc.of list 5 "./boot/compile.scm" . 132099)
 (set.gloc.of alist-special-binary-subr)
 (ret.const.unspec))
((push.gloc.of =)
 (const . =n.iloc)
 (push.cons)
 (push.gloc.of <)
 (const . >n.iloc)
 (push.cons)
 (push.gloc.of <=)
 (const . >=n.iloc)
 (push.cons)
 (push.gloc.of >)
 (const . <n.iloc)
 (push.cons)
 (push.gloc.of >=)
 (const . <=n.iloc)
 (push.cons)
 (subr.gloc.of list 5 "./boot/compile.scm" . 135171)
 (set.gloc.of alist-special-binary-subr-negate)
 (ret.const.unspec))
((push.gloc.of =)
 (const . =.iloc)
 (push.cons)
 (push.gloc.of <)
 (const . <.iloc)
 (push.cons)
 (push.gloc.of <=)
 (const . <=.iloc)
 (push.cons)
 (push.gloc.of >)
 (const . >.iloc)
 (push.cons)
 (push.gloc.of >=)
 (const . >=.iloc)
 (push.cons)
 (subr.gloc.of list 5 "./boot/compile.scm" . 138243)
 (set.gloc.of alist-special-binary-subr-iloc)
 (ret.const.unspec))
((push.gloc.of =)
 (const . =.iloc)
 (push.cons)
 (push.gloc.of <)
 (const . >.iloc)
 (push.cons)
 (push.gloc.of <=)
 (const . >=.iloc)
 (push.cons)
 (push.gloc.of >)
 (const . <.iloc)
 (push.cons)
 (push.gloc.of >=)
 (const . <=.iloc)
 (push.cons)
 (subr.gloc.of list 5 "./boot/compile.scm" . 141315)
 (set.gloc.of alist-special-binary-subr-iloc-negate)
 (ret.const.unspec))
((close
   (4 0 . compile-anonymous)
   (iloc.0 . 2)
   (if.true
     (call
       (touch.gloc.of compile-argument-each)
       (push.cdr.iloc (0 . 0) "./boot/compile.scm" . 149544)
       (push.iloc.0 . 1)
       (apply.gloc.of compile-argument-each "./boot/compile.scm" . 149521))
     (push)
     (push.const . ret.subr.gloc.of)
     (push.car.iloc (0 . 0) "./boot/compile.scm" . 149579)
     (push.iloc.0 . 3)
     (push.subr.gloc.of |.cons*| 3 "./boot/compile.scm" . 149579)
     (push.subr.gloc.of |.list| 1 "./boot/compile.scm" . 149579)
     (ret.subr.gloc.of |.append| "./boot/compile.scm" . 148489))
   (call
     (touch.gloc.of compile-argument-each)
     (push.cdr.iloc (0 . 0) "./boot/compile.scm" . 150568)
     (push.iloc.0 . 1)
     (apply.gloc.of compile-argument-each "./boot/compile.scm" . 150545))
   (push)
   (push.const . subr.gloc.of)
   (push.car.iloc (0 . 0) "./boot/compile.scm" . 150599)
   (push.cdr.iloc (0 . 0) "./boot/compile.scm" . 150619)
   (push.subr.gloc.of length 1 "./boot/compile.scm" . 150611)
   (push.iloc.0 . 3)
   (push.subr.gloc.of |.cons*| 4 "./boot/compile.scm" . 150599)
   (push.subr.gloc.of |.list| 1 "./boot/compile.scm" . 150599)
   (ret.subr.gloc.of |.append| "./boot/compile.scm" . 148489))
 (set.gloc.of |compile-anonymous`3120*|)
 (close
   (4 0 . compile-subr-expression)
   (call
     (touch.gloc.of make-application-comment)
     (push.iloc.0 . 0)
     (apply.gloc.of make-application-comment "./boot/compile.scm" . 152596))
   (push)
   (extend . 1)
   (push.car.iloc (1 . 0) "./boot/compile.scm" . 153636)
   (push.subr.gloc.of top-level-value 1 "./boot/compile.scm" . 153619)
   (extend . 1)
   (push.gloc.of ht-special-subr-expression)
   (push.iloc.0 . 0)
   (subr.gloc.of core-hashtable-contains? 2 "./boot/compile.scm" . 154637)
   (if.true
     (cdr.iloc (2 . 0) "./boot/compile.scm" . 155675)
     (if.null?
       (push.iloc.0 . 0)
       (gloc.of unspecified)
       (if.eq?
         (iloc 2 . 2)
         (if.true.ret.const)
         (iloc 2 . 3)
         (if.true
           (push.const . ret.const.unspec)
           (push.subr.gloc.of list 1 "./boot/compile.scm" . 158765)
           (ret.subr.gloc.of list "./boot/compile.scm" . 158759))
         (push.const . const.unspec)
         (push.subr.gloc.of list 1 "./boot/compile.scm" . 159789)
         (ret.subr.gloc.of list "./boot/compile.scm" . 159783))
       (touch.gloc.of |compile-anonymous`3120*|)
       (push.iloc 2 . 0)
       (push.iloc 2 . 1)
       (push.iloc 2 . 3)
       (push.iloc.1 . 0)
       (apply.gloc.of |compile-anonymous`3120*| "./boot/compile.scm" . 160800))
     (cddr.iloc (2 . 0) "./boot/compile.scm" . 161819)
     (if.null?
       (iloc 2 . 3)
       (if.true
         (push.iloc.0 . 0)
         (gloc.of pair?)
         (if.eq?
           (call
             (touch.gloc.of compile-expression)
             (push.cadr.iloc (2 . 0) "./boot/compile.scm" . 164919)
             (push.iloc 2 . 1)
             (push.const . #f)
             (push.const . #f)
             (apply.gloc.of compile-expression "./boot/compile.scm" . 164899))
           (push)
           (push.const . ret.pair?)
           (iloc.1 . 0)
           (push.cons)
           (push.subr.gloc.of |.list| 1 "./boot/compile.scm" . 164943)
           (ret.subr.gloc.of |.append| "./boot/compile.scm" . 163870))
         (push.iloc.0 . 0)
         (gloc.of null?)
         (if.eq?
           (call
             (touch.gloc.of compile-expression)
             (push.cadr.iloc (2 . 0) "./boot/compile.scm" . 166967)
             (push.iloc 2 . 1)
             (push.const . #f)
             (push.const . #f)
             (apply.gloc.of compile-expression "./boot/compile.scm" . 166947))
           (push)
           (push.const . ret.null?)
           (iloc.1 . 0)
           (push.cons)
           (push.subr.gloc.of |.list| 1 "./boot/compile.scm" . 166991)
           (ret.subr.gloc.of |.append| "./boot/compile.scm" . 165918))
         (touch.gloc.of |compile-anonymous`3120*|)
         (push.iloc 2 . 0)
         (push.iloc 2 . 1)
         (push.iloc 2 . 3)
         (push.iloc.1 . 0)
         (apply.gloc.of |compile-anonymous`3120*| "./boot/compile.scm" . 168991))
       (call
         (touch.gloc.of iloc?)
         (push.cadr.iloc (2 . 0) "./boot/compile.scm" . 170019)
         (push.iloc 2 . 1)
         (apply.gloc.of iloc? "./boot/compile.scm" . 170012))
       (if.true
         (iloc 2 . 2)
         (if.true.ret.const)
         (push.iloc.0 . 0)
         (gloc.of car)
         (if.eq?
           (push.const . car.iloc)
           (call
             (touch.gloc.of make-iloc-operand)
             (push.cadr.iloc (2 . 0) "./boot/compile.scm" . 174154)
             (push.iloc 2 . 1)
             (apply.gloc.of make-iloc-operand "./boot/compile.scm" . 174135))
           (push)
           (push.iloc.1 . 0)
           (push.subr.gloc.of |.cons*| 3 "./boot/compile.scm" . 174135)
           (ret.subr.gloc.of |.list| "./boot/compile.scm" . 173097))
         (push.iloc.0 . 0)
         (gloc.of cdr)
         (if.eq?
           (push.const . cdr.iloc)
           (call
             (touch.gloc.of make-iloc-operand)
             (push.cadr.iloc (2 . 0) "./boot/compile.scm" . 176202)
             (push.iloc 2 . 1)
             (apply.gloc.of make-iloc-operand "./boot/compile.scm" . 176183))
           (push)
           (push.iloc.1 . 0)
           (push.subr.gloc.of |.cons*| 3 "./boot/compile.scm" . 176183)
           (ret.subr.gloc.of |.list| "./boot/compile.scm" . 175145))
         (push.iloc.0 . 0)
         (gloc.of cadr)
         (if.eq?
           (push.const . cadr.iloc)
           (call
             (touch.gloc.of make-iloc-operand)
             (push.cadr.iloc (2 . 0) "./boot/compile.scm" . 178251)
             (push.iloc 2 . 1)
             (apply.gloc.of make-iloc-operand "./boot/compile.scm" . 178232))
           (push)
           (push.iloc.1 . 0)
           (push.subr.gloc.of |.cons*| 3 "./boot/compile.scm" . 178232)
           (ret.subr.gloc.of |.list| "./boot/compile.scm" . 177193))
         (push.iloc.0 . 0)
         (gloc.of cddr)
         (if.eq?
           (push.const . cddr.iloc)
           (call
             (touch.gloc.of make-iloc-operand)
             (push.cadr.iloc (2 . 0) "./boot/compile.scm" . 180299)
             (push.iloc 2 . 1)
             (apply.gloc.of make-iloc-operand "./boot/compile.scm" . 180280))
           (push)
           (push.iloc.1 . 0)
           (push.subr.gloc.of |.cons*| 3 "./boot/compile.scm" . 180280)
           (ret.subr.gloc.of |.list| "./boot/compile.scm" . 179241))
         (touch.gloc.of |compile-anonymous`3120*|)
         (push.iloc 2 . 0)
         (push.iloc 2 . 1)
         (push.iloc 2 . 3)
         (push.iloc.1 . 0)
         (apply.gloc.of |compile-anonymous`3120*| "./boot/compile.scm" . 182314))
       (touch.gloc.of |compile-anonymous`3120*|)
       (push.iloc 2 . 0)
       (push.iloc 2 . 1)
       (push.iloc 2 . 3)
       (push.iloc.1 . 0)
       (apply.gloc.of |compile-anonymous`3120*| "./boot/compile.scm" . 183324))
     (push.iloc 2 . 0)
     (subr.gloc.of cdddr 1 "./boot/compile.scm" . 184347)
     (if.null?
       (iloc 2 . 3)
       (if.true
         (push.iloc.0 . 0)
         (gloc.of cons)
         (if.eq?
           (call
             (touch.gloc.of compile-argument)
             (push.cadr.iloc (2 . 0) "./boot/compile.scm" . 187445)
             (push.iloc 2 . 1)
             (apply.gloc.of compile-argument "./boot/compile.scm" . 187427))
           (push)
           (call
             (touch.gloc.of compile-expression)
             (push.iloc 2 . 0)
             (push.subr.gloc.of caddr 1 "./boot/compile.scm" . 187484)
             (push.iloc 2 . 1)
             (push.const . #f)
             (push.const . #f)
             (apply.gloc.of compile-expression "./boot/compile.scm" . 187464))
           (push)
           (push.const . ret.cons)
           (iloc.1 . 0)
           (push.cons)
           (push.subr.gloc.of |.list| 1 "./boot/compile.scm" . 187509)
           (push.subr.gloc.of |.append| 2 "./boot/compile.scm" . 187464)
           (ret.subr.gloc.of |.append| "./boot/compile.scm" . 186398))
         (push.iloc.0 . 0)
         (gloc.of eq?)
         (if.eq?
           (call
             (touch.gloc.of compile-argument)
             (push.cadr.iloc (2 . 0) "./boot/compile.scm" . 189493)
             (push.iloc 2 . 1)
             (apply.gloc.of compile-argument "./boot/compile.scm" . 189475))
           (push)
           (call
             (touch.gloc.of compile-expression)
             (push.iloc 2 . 0)
             (push.subr.gloc.of caddr 1 "./boot/compile.scm" . 189532)
             (push.iloc 2 . 1)
             (push.const . #f)
             (push.const . #f)
             (apply.gloc.of compile-expression "./boot/compile.scm" . 189512))
           (push)
           (push.const . ret.eq?)
           (iloc.1 . 0)
           (push.cons)
           (push.subr.gloc.of |.list| 1 "./boot/compile.scm" . 189557)
           (push.subr.gloc.of |.append| 2 "./boot/compile.scm" . 189512)
           (ret.subr.gloc.of |.append| "./boot/compile.scm" . 188446))
         (push.iloc.0 . 0)
         (gloc.of eqv?)
         (if.eq?
           (push.iloc 2 . 0)
           (push.subr.gloc.of caddr 1 "./boot/compile.scm" . 191550)
           (extend . 1)
           (call
             (call
               (touch.gloc.of immediate-literal?)
               (push.cadr.iloc (3 . 0) "./boot/compile.scm" . 191531)
               (apply.gloc.of immediate-literal? "./boot/compile.scm" . 192553))
             (if.true.ret)
             (touch.gloc.of immediate-literal?)
             (push.iloc.0 . 0)
             (apply.gloc.of immediate-literal? "./boot/compile.scm" . 192579))
           (if.true
             (call
               (touch.gloc.of compile-argument)
               (push.cadr.iloc (3 . 0) "./boot/compile.scm" . 193595)
               (push.iloc 3 . 1)
               (apply.gloc.of compile-argument "./boot/compile.scm" . 193577))
             (push)
             (call
               (touch.gloc.of compile-expression)
               (push.iloc 3 . 0)
               (push.subr.gloc.of caddr 1 "./boot/compile.scm" . 193634)
               (push.iloc 3 . 1)
               (push.const . #f)
               (push.const . #f)
               (apply.gloc.of compile-expression "./boot/compile.scm" . 193614))
             (push)
             (push.const . ret.eq?)
             (iloc 2 . 0)
             (push.cons)
             (push.subr.gloc.of |.list| 1 "./boot/compile.scm" . 193659)
             (push.subr.gloc.of |.append| 2 "./boot/compile.scm" . 193614)
             (ret.subr.gloc.of |.append| "./boot/compile.scm" . 192545))
           (touch.gloc.of |compile-anonymous`3120*|)
           (push.iloc 3 . 0)
           (push.iloc 3 . 1)
           (push.iloc 3 . 3)
           (push.iloc 2 . 0)
           (apply.gloc.of |compile-anonymous`3120*| "./boot/compile.scm" . 194597))
         (touch.gloc.of |compile-anonymous`3120*|)
         (push.iloc 2 . 0)
         (push.iloc 2 . 1)
         (push.iloc 2 . 3)
         (push.iloc.1 . 0)
         (apply.gloc.of |compile-anonymous`3120*| "./boot/compile.scm" . 196639))
       (push.iloc.0 . 0)
       (push.gloc.of alist-special-binary-subr)
       (subr.gloc.of assq 2 "./boot/compile.scm" . 197663)
       (if.true
         (push.cadr.iloc (2 . 0) "./boot/compile.scm" . 198699)
         (push.iloc 2 . 0)
         (push.subr.gloc.of caddr 1 "./boot/compile.scm" . 198718)
         (extend . 2)
         (push.close
           (0 0)
           (call
             (push.iloc.1 . 0)
             (subr.gloc.of fixnum? 1 "./boot/compile.scm" . 200763)
             (if.false.ret)
             (iloc.1 . 1)
             (if.not.symbol?.ret.const . #f)
             (touch.gloc.of iloc?)
             (push.iloc.1 . 1)
             (push.iloc 4 . 1)
             (apply.gloc.of iloc? "./boot/compile.scm" . 200793))
           (if.true
             (push.iloc.1 . 1)
             (push.iloc.1 . 0)
             (push.iloc 2 . 0)
             (push.gloc.of alist-special-binary-subr-negate)
             (push.subr.gloc.of assq 2 "./boot/compile.scm" . 200834)
             (push.subr.gloc.of cdr 1 "./boot/compile.scm" . 200829)
             (ret.subr.gloc.of values "./boot/compile.scm" . 200811))
           (call
             (push.iloc.1 . 1)
             (subr.gloc.of fixnum? 1 "./boot/compile.scm" . 201787)
             (if.false.ret)
             (iloc.1 . 0)
             (if.not.symbol?.ret.const . #f)
             (touch.gloc.of iloc?)
             (push.iloc.1 . 0)
             (push.iloc 4 . 1)
             (apply.gloc.of iloc? "./boot/compile.scm" . 201817))
           (if.true
             (push.iloc.1 . 0)
             (push.iloc.1 . 1)
             (push.iloc 2 . 0)
             (push.gloc.of alist-special-binary-subr)
             (push.subr.gloc.of assq 2 "./boot/compile.scm" . 201858)
             (push.subr.gloc.of cdr 1 "./boot/compile.scm" . 201853)
             (ret.subr.gloc.of values "./boot/compile.scm" . 201835))
           (push.const . #f)
           (push.const . #f)
           (push.const . #f)
           (ret.subr.gloc.of values "./boot/compile.scm" . 202811))
         (push.close
           (3 0)
           (iloc.0 . 2)
           (if.true
             (push.iloc.0 . 2)
             (call
               (touch.gloc.of make-iloc-operand)
               (push.iloc.0 . 0)
               (push.iloc 4 . 1)
               (apply.gloc.of make-iloc-operand "./boot/compile.scm" . 203833))
             (push)
             (push.iloc.0 . 1)
             (push.iloc 3 . 0)
             (push.subr.gloc.of |.cons*| 4 "./boot/compile.scm" . 203833)
             (ret.subr.gloc.of |.list| "./boot/compile.scm" . 203817))
           (call
             (touch.gloc.of iloc?)
             (push.iloc.1 . 1)
             (push.iloc 4 . 1)
             (apply.gloc.of iloc? "./boot/compile.scm" . 204842))
           (if.true
             (call
               (touch.gloc.of compile-expression)
               (push.iloc.1 . 0)
               (push.iloc 4 . 1)
               (push.const . #f)
               (push.const . #f)
               (apply.gloc.of compile-expression "./boot/compile.scm" . 205870))
             (push)
             (push.iloc 2 . 0)
             (push.gloc.of alist-special-binary-subr-iloc)
             (push.subr.gloc.of assq 2 "./boot/compile.scm" . 205913)
             (push.subr.gloc.of cdr 1 "./boot/compile.scm" . 205908)
             (call
               (touch.gloc.of make-iloc-operand)
               (push.iloc.1 . 1)
               (push.iloc 4 . 1)
               (apply.gloc.of make-iloc-operand "./boot/compile.scm" . 205958))
             (push)
             (push.iloc 3 . 0)
             (push.subr.gloc.of |.cons*| 3 "./boot/compile.scm" . 205908)
             (push.subr.gloc.of |.list| 1 "./boot/compile.scm" . 205908)
             (ret.subr.gloc.of |.append| "./boot/compile.scm" . 204841))
           (call
             (touch.gloc.of iloc?)
             (push.iloc.1 . 0)
             (push.iloc 4 . 1)
             (apply.gloc.of iloc? "./boot/compile.scm" . 206890))
           (if.true
             (call
               (touch.gloc.of compile-expression)
               (push.iloc.1 . 1)
               (push.iloc 4 . 1)
               (push.const . #f)
               (push.const . #f)
               (apply.gloc.of compile-expression "./boot/compile.scm" . 207918))
             (push)
             (push.iloc 2 . 0)
             (push.gloc.of alist-special-binary-subr-iloc-negate)
             (push.subr.gloc.of assq 2 "./boot/compile.scm" . 207961)
             (push.subr.gloc.of cdr 1 "./boot/compile.scm" . 207956)
             (call
               (touch.gloc.of make-iloc-operand)
               (push.iloc.1 . 0)
               (push.iloc 4 . 1)
               (apply.gloc.of make-iloc-operand "./boot/compile.scm" . 208013))
             (push)
             (push.iloc 3 . 0)
             (push.subr.gloc.of |.cons*| 3 "./boot/compile.scm" . 207956)
             (push.subr.gloc.of |.list| 1 "./boot/compile.scm" . 207956)
             (ret.subr.gloc.of |.append| "./boot/compile.scm" . 206889))
           (touch.gloc.of |compile-anonymous`3120*|)
           (push.iloc 4 . 0)
           (push.iloc 4 . 1)
           (push.iloc 4 . 3)
           (push.iloc 3 . 0)
           (apply.gloc.of |compile-anonymous`3120*| "./boot/compile.scm" . 208943))
         (apply.gloc.of
           |.call-with-values|
           (|.call-with-values|
             (lambda ()
               (if (and (fixnum? |opd1`3129*|)
                        (symbol? |opd2`3129*|)
                        (iloc? |opd2`3129*| |cte`3119*|))
                   (values
                     |opd2`3129*|
                     |opd1`3129*|
                     (cdr (assq |subr`3125*| alist-special-binary-subr-negate)))
                   (if (and (fixnum? |opd2`3129*|)
                            (symbol? |opd1`3129*|)
                            (iloc? |opd1`3129*| |cte`3119*|))
                       (values
                         |opd1`3129*|
                         |opd2`3129*|
                         (cdr (assq |subr`3125*| alist-special-binary-subr)))
                       (values #f #f #f))))
             (lambda (|lhs`3131*| |rhs`3131*| |inst`3131*|)
               (if |inst`3131*|
                   (|.list|
                     (|.cons*|
                       |inst`3131*|
                       (make-iloc-operand |lhs`3131*| |cte`3119*|)
                       |rhs`3131*|
                       |comment`3123*|))
                   (if (iloc? |opd2`3129*| |cte`3119*|)
                       (|.append|
                         (compile-expression |opd1`3129*| |cte`3119*| #f #f)
                         (|.list|
                           (|.cons*|
                             (cdr (assq |subr`3125*| alist-special-binary-subr-iloc))
                             (make-iloc-operand |opd2`3129*| |cte`3119*|)
                             |comment`3123*|)))
                       (if (iloc? |opd1`3129*| |cte`3119*|)
                           (|.append|
                             (compile-expression |opd2`3129*| |cte`3119*| #f #f)
                             (|.list|
                               (|.cons*|
                                 (cdr (assq |subr`3125*| alist-special-binary-subr-iloc-negate))
                                 (make-iloc-operand |opd1`3129*| |cte`3119*|)
                                 |comment`3123*|)))
                           (|compile-anonymous`3120*|
                             |form`3119*|
                             |cte`3119*|
                             |tail`3119*|
                             |comment`3123*|))))))))
       (push.iloc.0 . 0)
       (gloc.of +)
       (if.eq?
         (push.cadr.iloc (2 . 0) "./boot/compile.scm" . 210987)
         (push.iloc 2 . 0)
         (push.subr.gloc.of caddr 1 "./boot/compile.scm" . 211006)
         (extend . 2)
         (push.close
           (0 0)
           (call
             (push.iloc.1 . 0)
             (subr.gloc.of fixnum? 1 "./boot/compile.scm" . 212037)
             (if.false.ret)
             (iloc.1 . 1)
             (if.not.symbol?.ret.const . #f)
             (touch.gloc.of iloc?)
             (push.iloc.1 . 1)
             (push.iloc 4 . 1)
             (apply.gloc.of iloc? "./boot/compile.scm" . 212067))
           (if.true
             (push.iloc.1 . 1)
             (push.iloc.1 . 0)
             (ret.subr.gloc.of values "./boot/compile.scm" . 212085))
           (call
             (push.iloc.1 . 1)
             (subr.gloc.of fixnum? 1 "./boot/compile.scm" . 213061)
             (if.false.ret)
             (iloc.1 . 0)
             (if.not.symbol?.ret.const . #f)
             (touch.gloc.of iloc?)
             (push.iloc.1 . 0)
             (push.iloc 4 . 1)
             (apply.gloc.of iloc? "./boot/compile.scm" . 213091))
           (if.true
             (push.iloc.1 . 0)
             (push.iloc.1 . 1)
             (ret.subr.gloc.of values "./boot/compile.scm" . 213109))
           (push.const . #f)
           (push.const . #f)
           (ret.subr.gloc.of values "./boot/compile.scm" . 214085))
         (push.close
           (2 0)
           (iloc.0 . 0)
           (if.true
             (push.const . n+.iloc)
             (call
               (touch.gloc.of make-iloc-operand)
               (push.iloc.0 . 0)
               (push.iloc 4 . 1)
               (apply.gloc.of make-iloc-operand "./boot/compile.scm" . 216115))
             (push)
             (push.iloc.0 . 1)
             (push.iloc 3 . 0)
             (push.subr.gloc.of |.cons*| 4 "./boot/compile.scm" . 216115)
             (ret.subr.gloc.of |.list| "./boot/compile.scm" . 215075))
           (touch.gloc.of |compile-anonymous`3120*|)
           (push.iloc 4 . 0)
           (push.iloc 4 . 1)
           (push.iloc 4 . 3)
           (push.iloc 3 . 0)
           (apply.gloc.of |compile-anonymous`3120*| "./boot/compile.scm" . 217127))
         (apply.gloc.of
           |.call-with-values|
           (|.call-with-values|
             (lambda ()
               (if (and (fixnum? |opd1`3133*|)
                        (symbol? |opd2`3133*|)
                        (iloc? |opd2`3133*| |cte`3119*|))
                   (values |opd2`3133*| |opd1`3133*|)
                   (if (and (fixnum? |opd2`3133*|)
                            (symbol? |opd1`3133*|)
                            (iloc? |opd1`3133*| |cte`3119*|))
                       (values |opd1`3133*| |opd2`3133*|)
                       (values #f #f))))
             (lambda (|lhs`3135*| |rhs`3135*|)
               (if |lhs`3135*|
                   (|.list|
                     (|.cons*|
                       'n+.iloc
                       (make-iloc-operand |lhs`3135*| |cte`3119*|)
                       |rhs`3135*|
                       |comment`3123*|))
                   (|compile-anonymous`3120*|
                     |form`3119*|
                     |cte`3119*|
                     |tail`3119*|
                     |comment`3123*|))))))
       (push.iloc.0 . 0)
       (gloc.of -)
       (if.eq?
         (push.cadr.iloc (2 . 0) "./boot/compile.scm" . 219179)
         (push.iloc 2 . 0)
         (push.subr.gloc.of caddr 1 "./boot/compile.scm" . 219198)
         (extend . 2)
         (call
           (push.iloc.0 . 1)
           (subr.gloc.of fixnum? 1 "./boot/compile.scm" . 220202)
           (if.false.ret)
           (iloc.0 . 0)
           (if.not.symbol?.ret.const . #f)
           (touch.gloc.of iloc?)
           (push.iloc.0 . 0)
           (push.iloc 3 . 1)
           (apply.gloc.of iloc? "./boot/compile.scm" . 220232))
         (if.true
           (push.const . n+.iloc)
           (call
             (touch.gloc.of make-iloc-operand)
             (push.iloc.0 . 0)
             (push.iloc 3 . 1)
             (apply.gloc.of make-iloc-operand "./boot/compile.scm" . 221233))
           (push)
           (push.iloc.0 . 1)
           (push.subr.gloc.of - 1 "./boot/compile.scm" . 221263)
           (push.iloc 2 . 0)
           (push.subr.gloc.of |.cons*| 4 "./boot/compile.scm" . 221233)
           (ret.subr.gloc.of |.list| "./boot/compile.scm" . 220193))
         (touch.gloc.of |compile-anonymous`3120*|)
         (push.iloc 3 . 0)
         (push.iloc 3 . 1)
         (push.iloc 3 . 3)
         (push.iloc 2 . 0)
         (apply.gloc.of |compile-anonymous`3120*| "./boot/compile.scm" . 222245))
       (push.iloc.0 . 0)
       (gloc.of vector-ref)
       (if.eq?
         (push.cadr.iloc (2 . 0) "./boot/compile.scm" . 224299)
         (push.iloc 2 . 0)
         (push.subr.gloc.of caddr 1 "./boot/compile.scm" . 224318)
         (extend . 2)
         (call
           (touch.gloc.of iloc?)
           (push.iloc.0 . 0)
           (push.iloc 3 . 1)
           (apply.gloc.of iloc? "./boot/compile.scm" . 225317))
         (if.true
           (call
             (touch.gloc.of compile-expression)
             (push.iloc.0 . 1)
             (push.iloc 3 . 1)
             (push.const . #f)
             (push.const . #f)
             (apply.gloc.of compile-expression "./boot/compile.scm" . 226345))
           (push)
           (push.const . vector-ref.iloc)
           (call
             (touch.gloc.of make-iloc-operand)
             (push.iloc.0 . 0)
             (push.iloc 3 . 1)
             (apply.gloc.of make-iloc-operand "./boot/compile.scm" . 226399))
           (push)
           (push.iloc 2 . 0)
           (push.subr.gloc.of |.cons*| 3 "./boot/compile.scm" . 226399)
           (push.subr.gloc.of |.list| 1 "./boot/compile.scm" . 226399)
           (ret.subr.gloc.of |.append| "./boot/compile.scm" . 225313))
         (touch.gloc.of |compile-anonymous`3120*|)
         (push.iloc 3 . 0)
         (push.iloc 3 . 1)
         (push.iloc 3 . 3)
         (push.iloc 2 . 0)
         (apply.gloc.of |compile-anonymous`3120*| "./boot/compile.scm" . 227365))
       (touch.gloc.of |compile-anonymous`3120*|)
       (push.iloc 2 . 0)
       (push.iloc 2 . 1)
       (push.iloc 2 . 3)
       (push.iloc.1 . 0)
       (apply.gloc.of |compile-anonymous`3120*| "./boot/compile.scm" . 229407))
     (touch.gloc.of |compile-anonymous`3120*|)
     (push.iloc 2 . 0)
     (push.iloc 2 . 1)
     (push.iloc 2 . 3)
     (push.iloc.1 . 0)
     (apply.gloc.of |compile-anonymous`3120*| "./boot/compile.scm" . 231444))
   (touch.gloc.of |compile-anonymous`3120*|)
   (push.iloc 2 . 0)
   (push.iloc 2 . 1)
   (push.iloc 2 . 3)
   (push.iloc.1 . 0)
   (apply.gloc.of |compile-anonymous`3120*| "./boot/compile.scm" . 232461))
 (set.gloc.of compile-subr-expression)
 (ret.const.unspec))
((call
   (subr.gloc.of make-core-hashtable 0)
   (push)
   (extend . 1)
   (call
     (push.close
       (1 0)
       (push.iloc.1 . 0)
       (push.iloc.0 . 0)
       (push.const . #t)
       (ret.subr.gloc.of core-hashtable-set! "./boot/compile.scm" . 236571))
     (push.gloc.of unspecified)
     (push.gloc.of car)
     (push.gloc.of cdr)
     (push.gloc.of cadr)
     (push.gloc.of cddr)
     (push.gloc.of +)
     (push.gloc.of -)
     (push.gloc.of cons)
     (push.gloc.of vector-ref)
     (push.subr.gloc.of list 9 "./boot/compile.scm" . 237583)
     (apply.gloc.of for-each "./boot/compile.scm" . 236549))
   (push.iloc.0 . 0)
   (push.const . #t)
   (ret.subr.gloc.of core-hashtable-copy "./boot/compile.scm" . 238597))
 (set.gloc.of ht-special-subr-argument)
 (ret.const.unspec))
((close
   (3 0 . compile-anonymous)
   (call
     (touch.gloc.of compile-argument-each)
     (push.cdr.iloc (0 . 0) "./boot/compile.scm" . 245796)
     (push.iloc.0 . 1)
     (apply.gloc.of compile-argument-each "./boot/compile.scm" . 245773))
   (push)
   (push.const . push.subr.gloc.of)
   (push.car.iloc (0 . 0) "./boot/compile.scm" . 245832)
   (push.cdr.iloc (0 . 0) "./boot/compile.scm" . 245852)
   (push.subr.gloc.of length 1 "./boot/compile.scm" . 245844)
   (push.iloc.0 . 2)
   (push.subr.gloc.of |.cons*| 4 "./boot/compile.scm" . 245832)
   (push.subr.gloc.of |.list| 1 "./boot/compile.scm" . 245832)
   (ret.subr.gloc.of |.append| "./boot/compile.scm" . 244743))
 (set.gloc.of |compile-anonymous`3146*|)
 (close
   (2 0 . compile-subr-argument)
   (call
     (touch.gloc.of make-application-comment)
     (push.iloc.0 . 0)
     (apply.gloc.of make-application-comment "./boot/compile.scm" . 247828))
   (push)
   (extend . 1)
   (push.car.iloc (1 . 0) "./boot/compile.scm" . 248868)
   (push.subr.gloc.of top-level-value 1 "./boot/compile.scm" . 248851)
   (extend . 1)
   (push.gloc.of ht-special-subr-argument)
   (push.iloc.0 . 0)
   (subr.gloc.of core-hashtable-contains? 2 "./boot/compile.scm" . 249869)
   (if.true
     (cdr.iloc (2 . 0) "./boot/compile.scm" . 250907)
     (if.null?
       (push.iloc.0 . 0)
       (gloc.of unspecified)
       (if.eq?
         (push.const . push.const.unspec)
         (push.subr.gloc.of list 1 "./boot/compile.scm" . 251960)
         (ret.subr.gloc.of list "./boot/compile.scm" . 251954))
       (push.const . subr.gloc.of)
       (push.car.iloc (2 . 0) "./boot/compile.scm" . 253996)
       (push.const 0)
       (push.subr.gloc.of |.cons*| 3 "./boot/compile.scm" . 253996)
       (push.const . push)
       (push.subr.gloc.of list 1 "./boot/compile.scm" . 254011)
       (ret.subr.gloc.of |.list| "./boot/compile.scm" . 252954))
     (cddr.iloc (2 . 0) "./boot/compile.scm" . 255003)
     (if.null?
       (call
         (touch.gloc.of iloc?)
         (push.cadr.iloc (2 . 0) "./boot/compile.scm" . 256031)
         (push.iloc 2 . 1)
         (apply.gloc.of iloc? "./boot/compile.scm" . 256024))
       (if.true
         (push.iloc.0 . 0)
         (gloc.of car)
         (if.eq?
           (push.const . push.car.iloc)
           (call
             (touch.gloc.of make-iloc-operand)
             (push.cadr.iloc (2 . 0) "./boot/compile.scm" . 257107)
             (push.iloc 2 . 1)
             (apply.gloc.of make-iloc-operand "./boot/compile.scm" . 257088))
           (push)
           (push.iloc.1 . 0)
           (push.subr.gloc.of |.cons*| 3 "./boot/compile.scm" . 257088)
           (ret.subr.gloc.of |.list| "./boot/compile.scm" . 257054))
         (push.iloc.0 . 0)
         (gloc.of cdr)
         (if.eq?
           (push.const . push.cdr.iloc)
           (call
             (touch.gloc.of make-iloc-operand)
             (push.cadr.iloc (2 . 0) "./boot/compile.scm" . 258131)
             (push.iloc 2 . 1)
             (apply.gloc.of make-iloc-operand "./boot/compile.scm" . 258112))
           (push)
           (push.iloc.1 . 0)
           (push.subr.gloc.of |.cons*| 3 "./boot/compile.scm" . 258112)
           (ret.subr.gloc.of |.list| "./boot/compile.scm" . 258078))
         (push.iloc.0 . 0)
         (gloc.of cadr)
         (if.eq?
           (push.const . push.cadr.iloc)
           (call
             (touch.gloc.of make-iloc-operand)
             (push.cadr.iloc (2 . 0) "./boot/compile.scm" . 259157)
             (push.iloc 2 . 1)
             (apply.gloc.of make-iloc-operand "./boot/compile.scm" . 259138))
           (push)
           (push.iloc.1 . 0)
           (push.subr.gloc.of |.cons*| 3 "./boot/compile.scm" . 259138)
           (ret.subr.gloc.of |.list| "./boot/compile.scm" . 259102))
         (push.iloc.0 . 0)
         (gloc.of cddr)
         (if.eq?
           (push.const . push.cddr.iloc)
           (call
             (touch.gloc.of make-iloc-operand)
             (push.cadr.iloc (2 . 0) "./boot/compile.scm" . 260181)
             (push.iloc 2 . 1)
             (apply.gloc.of make-iloc-operand "./boot/compile.scm" . 260162))
           (push)
           (push.iloc.1 . 0)
           (push.subr.gloc.of |.cons*| 3 "./boot/compile.scm" . 260162)
           (ret.subr.gloc.of |.list| "./boot/compile.scm" . 260126))
         (touch.gloc.of |compile-anonymous`3146*|)
         (push.iloc 2 . 0)
         (push.iloc 2 . 1)
         (push.iloc.1 . 0)
         (apply.gloc.of |compile-anonymous`3146*| "./boot/compile.scm" . 261156))
       (touch.gloc.of |compile-anonymous`3146*|)
       (push.iloc 2 . 0)
       (push.iloc 2 . 1)
       (push.iloc.1 . 0)
       (apply.gloc.of |compile-anonymous`3146*| "./boot/compile.scm" . 262168))
     (push.iloc 2 . 0)
     (subr.gloc.of cdddr 1 "./boot/compile.scm" . 263195)
     (if.null?
       (push.iloc.0 . 0)
       (gloc.of cons)
       (if.eq?
         (call
           (touch.gloc.of compile-argument)
           (push.cadr.iloc (2 . 0) "./boot/compile.scm" . 265265)
           (push.iloc 2 . 1)
           (apply.gloc.of compile-argument "./boot/compile.scm" . 265247))
         (push)
         (call
           (touch.gloc.of compile-expression)
           (push.iloc 2 . 0)
           (push.subr.gloc.of caddr 1 "./boot/compile.scm" . 265304)
           (push.iloc 2 . 1)
           (push.const . #f)
           (push.const . #f)
           (apply.gloc.of compile-expression "./boot/compile.scm" . 265284))
         (push)
         (push.const . push.cons)
         (push.subr.gloc.of list 1 "./boot/compile.scm" . 265329)
         (push.subr.gloc.of |.list| 1 "./boot/compile.scm" . 265329)
         (push.subr.gloc.of |.append| 2 "./boot/compile.scm" . 265284)
         (ret.subr.gloc.of |.append| "./boot/compile.scm" . 264218))
       (push.iloc.0 . 0)
       (gloc.of +)
       (if.eq?
         (push.cadr.iloc (2 . 0) "./boot/compile.scm" . 267303)
         (push.iloc 2 . 0)
         (push.subr.gloc.of caddr 1 "./boot/compile.scm" . 267322)
         (extend . 2)
         (push.close
           (0 0)
           (call
             (call
               (touch.gloc.of iloc?)
               (push.iloc.1 . 0)
               (push.iloc 4 . 1)
               (apply.gloc.of iloc? "./boot/compile.scm" . 268353))
             (if.false.ret)
             (push.iloc.1 . 1)
             (ret.subr.gloc.of fixnum? "./boot/compile.scm" . 268370))
           (if.true
             (push.iloc.1 . 0)
             (push.iloc.1 . 1)
             (ret.subr.gloc.of values "./boot/compile.scm" . 268386))
           (call
             (call
               (touch.gloc.of iloc?)
               (push.iloc.1 . 1)
               (push.iloc 4 . 1)
               (apply.gloc.of iloc? "./boot/compile.scm" . 269377))
             (if.false.ret)
             (push.iloc.1 . 0)
             (ret.subr.gloc.of fixnum? "./boot/compile.scm" . 269394))
           (if.true
             (push.iloc.1 . 1)
             (push.iloc.1 . 0)
             (ret.subr.gloc.of values "./boot/compile.scm" . 269410))
           (push.const . #f)
           (push.const . #f)
           (ret.subr.gloc.of values "./boot/compile.scm" . 270401))
         (push.close
           (2 0)
           (iloc.0 . 0)
           (if.true
             (push.const . push.n+.iloc)
             (call
               (touch.gloc.of make-iloc-operand)
               (push.iloc.0 . 0)
               (push.iloc 4 . 1)
               (apply.gloc.of make-iloc-operand "./boot/compile.scm" . 272436))
             (push)
             (push.iloc.0 . 1)
             (push.iloc 3 . 0)
             (push.subr.gloc.of |.cons*| 4 "./boot/compile.scm" . 272436)
             (ret.subr.gloc.of |.list| "./boot/compile.scm" . 271391))
           (touch.gloc.of |compile-anonymous`3146*|)
           (push.iloc 4 . 0)
           (push.iloc 4 . 1)
           (push.iloc 3 . 0)
           (apply.gloc.of |compile-anonymous`3146*| "./boot/compile.scm" . 273443))
         (apply.gloc.of
           |.call-with-values|
           (|.call-with-values|
             (lambda ()
               (if (and (iloc? |opd1`3153*| |cte`3145*|) (fixnum? |opd2`3153*|))
                   (values |opd1`3153*| |opd2`3153*|)
                   (if (and (iloc? |opd2`3153*| |cte`3145*|) (fixnum? |opd1`3153*|))
                       (values |opd2`3153*| |opd1`3153*|)
                       (values #f #f))))
             (lambda (|lhs`3155*| |rhs`3155*|)
               (if |lhs`3155*|
                   (|.list|
                     (|.cons*|
                       'push.n+.iloc
                       (make-iloc-operand |lhs`3155*| |cte`3145*|)
                       |rhs`3155*|
                       |comment`3149*|))
                   (|compile-anonymous`3146*| |form`3145*| |cte`3145*| |comment`3149*|))))))
       (push.iloc.0 . 0)
       (gloc.of -)
       (if.eq?
         (push.cadr.iloc (2 . 0) "./boot/compile.scm" . 275495)
         (push.iloc 2 . 0)
         (push.subr.gloc.of caddr 1 "./boot/compile.scm" . 275514)
         (extend . 2)
         (call
           (call
             (touch.gloc.of iloc?)
             (push.iloc.0 . 0)
             (push.iloc 3 . 1)
             (apply.gloc.of iloc? "./boot/compile.scm" . 276518))
           (if.false.ret)
           (push.iloc.0 . 1)
           (ret.subr.gloc.of fixnum? "./boot/compile.scm" . 276535))
         (if.true
           (push.const . push.n+.iloc)
           (call
             (touch.gloc.of make-iloc-operand)
             (push.iloc.0 . 0)
             (push.iloc 3 . 1)
             (apply.gloc.of make-iloc-operand "./boot/compile.scm" . 277554))
           (push)
           (push.iloc.0 . 1)
           (push.subr.gloc.of - 1 "./boot/compile.scm" . 277584)
           (push.iloc 2 . 0)
           (push.subr.gloc.of |.cons*| 4 "./boot/compile.scm" . 277554)
           (ret.subr.gloc.of |.list| "./boot/compile.scm" . 276509))
         (touch.gloc.of |compile-anonymous`3146*|)
         (push.iloc 3 . 0)
         (push.iloc 3 . 1)
         (push.iloc 2 . 0)
         (apply.gloc.of |compile-anonymous`3146*| "./boot/compile.scm" . 278561))
       (push.iloc.0 . 0)
       (gloc.of vector-ref)
       (if.eq?
         (push.cadr.iloc (2 . 0) "./boot/compile.scm" . 281639)
         (push.iloc 2 . 0)
         (push.subr.gloc.of caddr 1 "./boot/compile.scm" . 281658)
         (extend . 2)
         (call
           (touch.gloc.of iloc?)
           (push.iloc.0 . 0)
           (push.iloc 3 . 1)
           (apply.gloc.of iloc? "./boot/compile.scm" . 282657))
         (if.true
           (call
             (touch.gloc.of compile-argument)
             (push.iloc.0 . 1)
             (push.iloc 3 . 1)
             (apply.gloc.of compile-argument "./boot/compile.scm" . 283685))
           (push)
           (push.const . push.vector-ref.iloc)
           (call
             (touch.gloc.of make-iloc-operand)
             (push.iloc.0 . 0)
             (push.iloc 3 . 1)
             (apply.gloc.of make-iloc-operand "./boot/compile.scm" . 283736))
           (push)
           (push.iloc 2 . 0)
           (push.subr.gloc.of |.cons*| 3 "./boot/compile.scm" . 283736)
           (push.subr.gloc.of |.list| 1 "./boot/compile.scm" . 283736)
           (ret.subr.gloc.of |.append| "./boot/compile.scm" . 282653))
         (touch.gloc.of |compile-anonymous`3146*|)
         (push.iloc 3 . 0)
         (push.iloc 3 . 1)
         (push.iloc 2 . 0)
         (apply.gloc.of |compile-anonymous`3146*| "./boot/compile.scm" . 284705))
       (touch.gloc.of |compile-anonymous`3146*|)
       (push.iloc 2 . 0)
       (push.iloc 2 . 1)
       (push.iloc.1 . 0)
       (apply.gloc.of |compile-anonymous`3146*| "./boot/compile.scm" . 287771))
     (touch.gloc.of |compile-anonymous`3146*|)
     (push.iloc 2 . 0)
     (push.iloc 2 . 1)
     (push.iloc.1 . 0)
     (apply.gloc.of |compile-anonymous`3146*| "./boot/compile.scm" . 289812))
   (cdr.iloc (2 . 0) "./boot/compile.scm" . 290840)
   (if.null?
     (push.const . subr.gloc.of)
     (push.car.iloc (2 . 0) "./boot/compile.scm" . 291874)
     (push.const 0)
     (push.subr.gloc.of |.cons*| 3 "./boot/compile.scm" . 291874)
     (push.const . push)
     (push.subr.gloc.of list 1 "./boot/compile.scm" . 291889)
     (ret.subr.gloc.of |.list| "./boot/compile.scm" . 290829))
   (touch.gloc.of |compile-anonymous`3146*|)
   (push.iloc 2 . 0)
   (push.iloc 2 . 1)
   (push.iloc.1 . 0)
   (apply.gloc.of |compile-anonymous`3146*| "./boot/compile.scm" . 292881))
 (set.gloc.of compile-subr-argument)
 (ret.const.unspec))
((close
   (2 0 . compile-argument-each)
   (extend.enclose+
     (2 0 . loop)
     (iloc.0 . 0)
     (if.null?
       (push.gloc.of append)
       (push.iloc.0 . 1)
       (push.subr.gloc.of reverse 1 "./boot/compile.scm" . 298024)
       (apply.gloc.of apply "./boot/compile.scm" . 298010))
     (push.cdr.iloc (0 . 0) "./boot/compile.scm" . 301078)
     (call
       (touch.gloc.of compile-argument)
       (push.car.iloc (0 . 0) "./boot/compile.scm" . 300073)
       (push.iloc 2 . 1)
       (apply.gloc.of compile-argument "./boot/compile.scm" . 300055))
     (push)
     (iloc.0 . 1)
     (push.cons)
     (apply.iloc+ (1 . 0) "./boot/compile.scm" . 301072))
   (push.iloc.1 . 0)
   (push.const)
   (apply.iloc+ (0 . 0) "./boot/compile.scm" . 297991))
 (set.gloc.of compile-argument-each)
 (ret.const.unspec))
((close
   (2 0 . compile-argument)
   (iloc.0 . 0)
   (if.pair?
     (call
       (touch.gloc.of top-level-subr)
       (push.car.iloc (0 . 0) "./boot/compile.scm" . 306211)
       (apply.gloc.of top-level-subr "./boot/compile.scm" . 306195))
     (if.true
       (touch.gloc.of compile-subr-argument)
       (push.iloc.0 . 0)
       (push.iloc.0 . 1)
       (apply.gloc.of compile-subr-argument "./boot/compile.scm" . 307219))
     (push.car.iloc (0 . 0) "./boot/compile.scm" . 308248)
     (const . lambda)
     (if.eq?
       (call
         (touch.gloc.of compile-lambda-helper)
         (push.cadr.iloc (0 . 0) "./boot/compile.scm" . 309302)
         (push.cddr.iloc (0 . 0) "./boot/compile.scm" . 309314)
         (call
           (touch.gloc.of make-closure-comment)
           (push.iloc.0 . 0)
           (apply.gloc.of make-closure-comment "./boot/compile.scm" . 309326))
         (push)
         (push.iloc.0 . 1)
         (apply.gloc.of compile-lambda-helper "./boot/compile.scm" . 309279))
       (push)
       (extend . 1)
       (call
         (touch.gloc.of local-closure?)
         (push.iloc.1 . 0)
         (apply.gloc.of local-closure? "./boot/compile.scm" . 310297))
       (if.true
         (push.const . push.close+)
         (iloc.0 . 0)
         (push.cons)
         (ret.subr.gloc.of list "./boot/compile.scm" . 311321))
       (push.const . push.close)
       (iloc.0 . 0)
       (push.cons)
       (ret.subr.gloc.of list "./boot/compile.scm" . 312345))
     (push.car.iloc (0 . 0) "./boot/compile.scm" . 313368)
     (const . quote)
     (if.eq?
       (push.const . push.const)
       (cadr.iloc (0 . 0) "./boot/compile.scm" . 314404)
       (push.cons)
       (ret.subr.gloc.of |.list| "./boot/compile.scm" . 313362))
     (call
       (touch.gloc.of compile-expression)
       (push.iloc.0 . 0)
       (push.iloc.0 . 1)
       (push.const . #f)
       (push.const . #f)
       (apply.gloc.of compile-expression "./boot/compile.scm" . 316439))
     (push)
     (push.const . push)
     (push.subr.gloc.of list 1 "./boot/compile.scm" . 316476)
     (push.subr.gloc.of |.list| 1 "./boot/compile.scm" . 316476)
     (ret.subr.gloc.of |.append| "./boot/compile.scm" . 315410))
   (iloc.0 . 0)
   (if.symbol?
     (push.iloc.0 . 0)
     (const . |.&UNDEF|)
     (if.eq?
       (push.const . push.const.undef)
       (push.subr.gloc.of list 1 "./boot/compile.scm" . 318509)
       (ret.subr.gloc.of list "./boot/compile.scm" . 318503))
     (call
       (touch.gloc.of iloc?)
       (push.iloc.0 . 0)
       (push.iloc.0 . 1)
       (apply.gloc.of iloc? "./boot/compile.scm" . 320535))
     (if.true
       (call
         (touch.gloc.of make-iloc-operand)
         (push.iloc.0 . 0)
         (push.iloc.0 . 1)
         (apply.gloc.of make-iloc-operand "./boot/compile.scm" . 321570))
       (push)
       (extend . 1)
       (push.car.iloc (0 . 0) "./boot/compile.scm" . 322591)
       (extend . 1)
       (push.iloc.0 . 0)
       (const . 0)
       (if.eq?
         (push.const . push.iloc.0)
         (cdr.iloc (1 . 0) "./boot/compile.scm" . 323634)
         (push.cons)
         (ret.subr.gloc.of |.list| "./boot/compile.scm" . 323611))
       (push.iloc.0 . 0)
       (const . 1)
       (if.eq?
         (push.const . push.iloc.1)
         (cdr.iloc (1 . 0) "./boot/compile.scm" . 324658)
         (push.cons)
         (ret.subr.gloc.of |.list| "./boot/compile.scm" . 324635))
       (push.const . push.iloc)
       (iloc.1 . 0)
       (push.cons)
       (ret.subr.gloc.of |.list| "./boot/compile.scm" . 325659))
     (push.const . push.gloc.of)
     (push.iloc.0 . 0)
     (push.subr.gloc.of |.list| 2 (|.list| 'push.gloc.of |form`3171*|))
     (ret.subr.gloc.of |.list| "./boot/compile.scm" . 320531))
   (push.const . push.const)
   (iloc.0 . 0)
   (push.cons)
   (ret.subr.gloc.of |.list| "./boot/compile.scm" . 327691))
 (set.gloc.of compile-argument)
 (ret.const.unspec))
((close
   (4 0 . compile-call)
   (iloc.0 . 0)
   (if.pair?
     (call
       (touch.gloc.of compile-expression)
       (push.iloc.0 . 0)
       (push.iloc.0 . 3)
       (push.const . #f)
       (push.const . #f)
       (apply.gloc.of compile-expression "./boot/compile.scm" . 333840))
     (push)
     (push.const . apply)
     (push.subr.gloc.of list 1 "./boot/compile.scm" . 333877)
     (push.subr.gloc.of |.list| 1 "./boot/compile.scm" . 333877)
     (ret.subr.gloc.of |.append| "./boot/compile.scm" . 332811))
   (iloc.0 . 0)
   (if.symbol?
     (call
       (touch.gloc.of iloc?)
       (push.iloc.0 . 0)
       (push.iloc.0 . 3)
       (apply.gloc.of iloc? "./boot/compile.scm" . 335891))
     (if.true
       (call
         (touch.gloc.of ht-local-closures)
         (apply.gloc.of ht-local-closures "./boot/compile.scm" . 336945))
       (push)
       (push.iloc.0 . 0)
       (subr.gloc.of core-hashtable-contains? 2 "./boot/compile.scm" . 336919)
       (if.true
         (push.const . apply.iloc+)
         (call
           (touch.gloc.of make-iloc-operand)
           (push.iloc.0 . 0)
           (push.iloc.0 . 3)
           (apply.gloc.of make-iloc-operand "./boot/compile.scm" . 337959))
         (push)
         (push.iloc.0 . 2)
         (push.subr.gloc.of |.cons*| 3 "./boot/compile.scm" . 337959)
         (ret.subr.gloc.of |.list| "./boot/compile.scm" . 336915))
       (push.const . apply.iloc)
       (call
         (touch.gloc.of make-iloc-operand)
         (push.iloc.0 . 0)
         (push.iloc.0 . 3)
         (apply.gloc.of make-iloc-operand "./boot/compile.scm" . 338982))
       (push)
       (push.iloc.0 . 2)
       (push.subr.gloc.of |.cons*| 3 "./boot/compile.scm" . 338982)
       (ret.subr.gloc.of |.list| "./boot/compile.scm" . 336915))
     (call
       (touch.gloc.of top-level-subr)
       (push.iloc.0 . 0)
       (apply.gloc.of top-level-subr "./boot/compile.scm" . 339987))
     (if.true
       (push.const . ret.subr.gloc.of)
       (push.iloc.0 . 0)
       (push.iloc.0 . 2)
       (push.subr.gloc.of |.cons*| 3 (|.cons*| 'ret.subr.gloc.of |proc`3179*| |comment`3179*|))
       (ret.subr.gloc.of |.list| "./boot/compile.scm" . 339986))
     (push.const . apply.gloc.of)
     (push.iloc.0 . 0)
     (push.iloc.0 . 2)
     (push.subr.gloc.of |.cons*| 3 (|.cons*| 'apply.gloc.of |proc`3179*| |comment`3179*|))
     (ret.subr.gloc.of |.list| "./boot/compile.scm" . 342034))
   (push.const . const)
   (iloc.0 . 0)
   (push.cons)
   (push.const . apply)
   (iloc.0 . 2)
   (push.cons)
   (ret.subr.gloc.of |.list| "./boot/compile.scm" . 344075))
 (set.gloc.of compile-call)
 (ret.const.unspec))
((close
   (4 0 . compile-expression-begin)
   (push.cdr.iloc (0 . 0) "./boot/compile.scm" . 349201)
   (extend . 1)
   (iloc.0 . 0)
   (if.null?
     (iloc.1 . 3)
     (if.true
       (push.const . ret.const.unspec)
       (push.subr.gloc.of list 1 "./boot/compile.scm" . 351261)
       (ret.subr.gloc.of list "./boot/compile.scm" . 351255))
     (ret.const))
   (cdr.iloc (0 . 0) "./boot/compile.scm" . 352277)
   (if.null?
     (touch.gloc.of compile-expression)
     (push.car.iloc (0 . 0) "./boot/compile.scm" . 353314)
     (push.iloc.1 . 1)
     (push.iloc.1 . 2)
     (push.iloc.1 . 3)
     (apply.gloc.of compile-expression "./boot/compile.scm" . 353294))
   (touch.gloc.of compile-expression-seq)
   (push.iloc.0 . 0)
   (push.iloc.1 . 1)
   (push.iloc.1 . 2)
   (push.iloc.1 . 3)
   (apply.gloc.of compile-expression-seq "./boot/compile.scm" . 355342))
 (set.gloc.of compile-expression-begin)
 (ret.const.unspec))
((close
   (4 0 . compile-expression-quote)
   (iloc.0 . 2)
   (if.true.ret.const)
   (iloc.0 . 3)
   (if.true
     (push.const . ret.const)
     (cadr.iloc (0 . 0) "./boot/compile.scm" . 359442)
     (push.cons)
     (ret.subr.gloc.of |.list| "./boot/compile.scm" . 361485))
   (push.const . const)
   (cadr.iloc (0 . 0) "./boot/compile.scm" . 359442)
   (push.cons)
   (ret.subr.gloc.of |.list| "./boot/compile.scm" . 362509))
 (set.gloc.of compile-expression-quote)
 (ret.const.unspec))
((close
   (4 0 . compile-expression-define)
   (call
     (touch.gloc.of compile-expression)
     (push.iloc.0 . 0)
     (push.subr.gloc.of caddr 1 "./boot/compile.scm" . 366629)
     (push.iloc.0 . 1)
     (push.const . #f)
     (push.const . #f)
     (apply.gloc.of compile-expression "./boot/compile.scm" . 366609))
   (push)
   (push.const . set.gloc.of)
   (push.cadr.iloc (0 . 0) "./boot/compile.scm" . 368670)
   (push.subr.gloc.of |.list| 2 "./boot/compile.scm" . 368670)
   (call
     (iloc.0 . 3)
     (if.true
       (push.const . ret.const.unspec)
       (push.subr.gloc.of list 1 "./boot/compile.scm" . 367650)
       (ret.subr.gloc.of list "./boot/compile.scm" . 367644))
     (ret.const))
   (push.cons)
   (ret.subr.gloc.of |.append| "./boot/compile.scm" . 366597))
 (set.gloc.of compile-expression-define)
 (ret.const.unspec))
((close
   (4 0 . compile-expression-set!)
   (call
     (touch.gloc.of compile-expression)
     (push.iloc.0 . 0)
     (push.subr.gloc.of caddr 1 "./boot/compile.scm" . 372773)
     (push.iloc.0 . 1)
     (push.const . #f)
     (push.const . #f)
     (apply.gloc.of compile-expression "./boot/compile.scm" . 372753))
   (push)
   (call
     (iloc.0 . 3)
     (if.true
       (push.const . ret.const.unspec)
       (push.subr.gloc.of list 1 "./boot/compile.scm" . 373794)
       (ret.subr.gloc.of list "./boot/compile.scm" . 373788))
     (ret.const))
   (push)
   (extend . 2)
   (call
     (touch.gloc.of iloc?)
     (push.cadr.iloc (1 . 0) "./boot/compile.scm" . 374805)
     (push.iloc.1 . 1)
     (apply.gloc.of iloc? "./boot/compile.scm" . 374798))
   (if.true
     (push.iloc.0 . 0)
     (push.const . set.iloc)
     (call
       (touch.gloc.of make-iloc-operand)
       (push.cadr.iloc (1 . 0) "./boot/compile.scm" . 375861)
       (push.iloc.1 . 1)
       (apply.gloc.of make-iloc-operand "./boot/compile.scm" . 375842))
     (push)
     (call
       (touch.gloc.of make-application-comment)
       (push.iloc.1 . 0)
       (apply.gloc.of make-application-comment "./boot/compile.scm" . 375881))
     (push)
     (push.subr.gloc.of |.cons*| 3 "./boot/compile.scm" . 375842)
     (iloc.0 . 1)
     (push.cons)
     (ret.subr.gloc.of |.append| "./boot/compile.scm" . 374797))
   (push.iloc.0 . 0)
   (call
     (subr.gloc.of backtrace 0 "./boot/compile.scm" . 377887)
     (if.true
       (touch.gloc.of compile-touch)
       (push.cadr.iloc (1 . 0) "./boot/compile.scm" . 377914)
       (push.iloc.1 . 1)
       (apply.gloc.of compile-touch "./boot/compile.scm" . 377899))
     (ret.const))
   (push)
   (push.const . set.gloc.of)
   (push.cadr.iloc (1 . 0) "./boot/compile.scm" . 378927)
   (call
     (touch.gloc.of make-application-comment)
     (push.iloc.1 . 0)
     (apply.gloc.of make-application-comment "./boot/compile.scm" . 378942))
   (push)
   (push.subr.gloc.of |.cons*| 3 "./boot/compile.scm" . 378927)
   (iloc.0 . 1)
   (push.cons)
   (push.subr.gloc.of |.append| 2 "./boot/compile.scm" . 378927)
   (ret.subr.gloc.of |.append| "./boot/compile.scm" . 377870))
 (set.gloc.of compile-expression-set!)
 (ret.const.unspec))
((close
   (4 0 . compile-expression-lambda)
   (call
     (touch.gloc.of compile-lambda-helper)
     (push.cadr.iloc (0 . 0) "./boot/compile.scm" . 383016)
     (push.cddr.iloc (0 . 0) "./boot/compile.scm" . 383028)
     (call
       (touch.gloc.of make-closure-comment)
       (push.iloc.0 . 0)
       (apply.gloc.of make-closure-comment "./boot/compile.scm" . 383040))
     (push)
     (push.iloc.0 . 1)
     (apply.gloc.of compile-lambda-helper "./boot/compile.scm" . 382993))
   (push)
   (extend . 1)
   (iloc.1 . 2)
   (if.true.ret.const)
   (iloc.1 . 3)
   (if.true
     (push.const . ret.close)
     (iloc.0 . 0)
     (push.cons)
     (ret.subr.gloc.of |.list| "./boot/compile.scm" . 385037))
   (push.const . close)
   (iloc.0 . 0)
   (push.cons)
   (ret.subr.gloc.of |.list| "./boot/compile.scm" . 386061))
 (set.gloc.of compile-expression-lambda)
 (ret.const.unspec))
((close
   (4 0 . compile-expression-let)
   (cadr.iloc (0 . 0) "./boot/compile.scm" . 390163)
   (if.null?
     (touch.gloc.of compile-expression-seq)
     (push.cddr.iloc (0 . 0) "./boot/compile.scm" . 391204)
     (push.iloc.0 . 1)
     (push.iloc.0 . 2)
     (push.iloc.0 . 3)
     (apply.gloc.of compile-expression-seq "./boot/compile.scm" . 391180))
   (call
     (touch.gloc.of collect-local-closure)
     (push.cadr.iloc (0 . 0) "./boot/compile.scm" . 393251)
     (apply.gloc.of collect-local-closure "./boot/compile.scm" . 393228))
   (call
     (push.gloc.of car)
     (push.cadr.iloc (0 . 0) "./boot/compile.scm" . 394273)
     (apply.gloc.of map "./boot/compile.scm" . 394264))
   (push)
   (extend . 1)
   (call
     (touch.gloc.of compile-argument-each)
     (call
       (push.gloc.of cadr)
       (push.cadr.iloc (1 . 0) "./boot/compile.scm" . 395327)
       (apply.gloc.of map "./boot/compile.scm" . 395317))
     (push)
     (push.iloc.1 . 1)
     (apply.gloc.of compile-argument-each "./boot/compile.scm" . 395294))
   (push)
   (push.const . extend)
   (push.iloc.0 . 0)
   (subr.gloc.of length 1 "./boot/compile.scm" . 396329)
   (push.cons)
   (call
     (touch.gloc.of compile-expression-seq)
     (push.cddr.iloc (1 . 0) "./boot/compile.scm" . 397368)
     (call
       (touch.gloc.of cte-extend-iloc)
       (push.iloc.0 . 0)
       (push.iloc.1 . 1)
       (apply.gloc.of cte-extend-iloc "./boot/compile.scm" . 397380))
     (push)
     (push.const . #f)
     (push.const . #t)
     (apply.gloc.of compile-expression-seq "./boot/compile.scm" . 397344))
   (push.cons)
   (push.subr.gloc.of |.append| 2 "./boot/compile.scm" . 395284)
   (extend . 1)
   (iloc 2 . 3)
   (if.true (ret.iloc 0 . 0))
   (push.const . call)
   (iloc.0 . 0)
   (push.cons)
   (ret.subr.gloc.of list "./boot/compile.scm" . 398366))
 (set.gloc.of compile-expression-let)
 (ret.const.unspec))
((close
   (2 0)
   (push.iloc.0 . 1)
   (push.const . set.iloc)
   (push.iloc.0 . 0)
   (push.subr.gloc.of |.list| 2 (|.list| 'set.iloc |iloc`3237*|))
   (push.subr.gloc.of |.list| 1 (|.list| (|.list| 'set.iloc |iloc`3237*|)))
   (ret.subr.gloc.of |.append| "./boot/compile.scm" . 435254))
 (set.gloc.of |.L903|)
 (close
   (4 0 . compile-expression-letrec*)
   (cadr.iloc (0 . 0) "./boot/compile.scm" . 402451)
   (if.null?
     (touch.gloc.of compile-expression-seq)
     (push.cddr.iloc (0 . 0) "./boot/compile.scm" . 403492)
     (push.iloc.0 . 1)
     (push.iloc.0 . 2)
     (push.iloc.0 . 3)
     (apply.gloc.of compile-expression-seq "./boot/compile.scm" . 403468))
   (push.iloc.0 . 0)
   (subr.gloc.of cdadr 1 "./boot/compile.scm" . 404499)
   (if.null?
     (push.iloc.0 . 0)
     (push.subr.gloc.of caadr 1 "./boot/compile.scm" . 405531)
     (extend . 1)
     (call
       (touch.gloc.of cte-extend-iloc)
       (push.car.iloc (0 . 0) "./boot/compile.scm" . 406576)
       (push.subr.gloc.of list 1 "./boot/compile.scm" . 406570)
       (push.iloc.1 . 1)
       (apply.gloc.of cte-extend-iloc "./boot/compile.scm" . 406553))
     (push)
     (extend . 1)
     (call
       (cadr.iloc (1 . 0) "./boot/compile.scm" . 407587)
       (if.not.pair?.ret.const . #f)
       (push.iloc.1 . 0)
       (push.subr.gloc.of caadr 1 "./boot/compile.scm" . 407608)
       (const . lambda)
       (ret.eq? "./boot/compile.scm" . 407603))
     (if.true
       (call
         (touch.gloc.of collect-local-closure)
         (push.cadr.iloc (2 . 0) "./boot/compile.scm" . 408622)
         (apply.gloc.of collect-local-closure "./boot/compile.scm" . 408599))
       (push.cadr.iloc (1 . 0) "./boot/compile.scm" . 409635)
       (extend . 1)
       (call
         (call
           (touch.gloc.of local-closure?)
           (push.iloc.0 . 0)
           (apply.gloc.of local-closure? "./boot/compile.scm" . 412713))
         (if.true (ret.const . extend.enclose+))
         (ret.const . extend.enclose))
       (push)
       (call
         (touch.gloc.of compile-lambda-helper)
         (push.cadr.iloc (0 . 0) "./boot/compile.scm" . 410689)
         (push.cddr.iloc (0 . 0) "./boot/compile.scm" . 410701)
         (call
           (touch.gloc.of make-closure-comment)
           (push.iloc.0 . 0)
           (apply.gloc.of make-closure-comment "./boot/compile.scm" . 410713))
         (push)
         (push.iloc.1 . 0)
         (apply.gloc.of compile-lambda-helper "./boot/compile.scm" . 410666))
       (push.cons)
       (call
         (touch.gloc.of compile-expression-seq)
         (push.cddr.iloc (3 . 0) "./boot/compile.scm" . 411714)
         (push.iloc.1 . 0)
         (push.const . #f)
         (push.const . #t)
         (apply.gloc.of compile-expression-seq "./boot/compile.scm" . 411690))
       (push.cons)
       (extend . 1)
       (iloc 4 . 3)
       (if.true (ret.iloc 0 . 0))
       (push.const . call)
       (iloc.0 . 0)
       (push.cons)
       (ret.subr.gloc.of list "./boot/compile.scm" . 414763))
     (push.const . extend.unbound)
     (const . 1)
     (push.cons)
     (call
       (touch.gloc.of compile-argument)
       (push.cadr.iloc (1 . 0) "./boot/compile.scm" . 417850)
       (push.iloc.0 . 0)
       (apply.gloc.of compile-argument "./boot/compile.scm" . 417832))
     (push)
     (push.const . enclose)
     (const . 1)
     (push.cons)
     (call
       (touch.gloc.of compile-expression-seq)
       (push.cddr.iloc (2 . 0) "./boot/compile.scm" . 419904)
       (push.iloc.0 . 0)
       (push.const . #f)
       (push.const . #t)
       (apply.gloc.of compile-expression-seq "./boot/compile.scm" . 419880))
     (push.cons)
     (subr.gloc.of |.append| 2 "./boot/compile.scm" . 417832)
     (push.cons)
     (extend . 1)
     (iloc 3 . 3)
     (if.true (ret.iloc 0 . 0))
     (push.const . call)
     (iloc.0 . 0)
     (push.cons)
     (ret.subr.gloc.of list "./boot/compile.scm" . 420903))
   (push.cadr.iloc (0 . 0) "./boot/compile.scm" . 422940)
   (extend . 1)
   (call
     (touch.gloc.of collect-local-closure)
     (push.iloc.0 . 0)
     (apply.gloc.of collect-local-closure "./boot/compile.scm" . 423950))
   (push.close
     (0 0)
     (extend.enclose+
       (2 0 . loop)
       (iloc.0 . 0)
       (if.null?
         (push.iloc 3 . 0)
         (push.const)
         (ret.subr.gloc.of values "./boot/compile.scm" . 428066))
       (push.iloc.0 . 0)
       (push.subr.gloc.of cadar 1 "./boot/compile.scm" . 429102)
       (extend . 1)
       (call
         (iloc.0 . 0)
         (if.pair?
           (push.car.iloc (0 . 0) "./boot/compile.scm" . 430143)
           (push.const quote lambda)
           (ret.subr.gloc.of memq "./boot/compile.scm" . 430137))
         (push.iloc.0 . 0)
         (push.subr.gloc.of symbol? 1 "./boot/compile.scm" . 430176)
         (ret.subr.gloc.of not "./boot/compile.scm" . 430171))
       (if.true
         (push.cdr.iloc (1 . 0) "./boot/compile.scm" . 431150)
         (push.car.iloc (1 . 0) "./boot/compile.scm" . 431166)
         (iloc.1 . 1)
         (push.cons)
         (apply.iloc+ (2 . 0) "./boot/compile.scm" . 431144))
       (push.iloc.1 . 1)
       (push.subr.gloc.of reverse 1 "./boot/compile.scm" . 432176)
       (push.iloc.1 . 0)
       (ret.subr.gloc.of values "./boot/compile.scm" . 432168))
     (push.iloc 2 . 0)
     (push.const)
     (apply.iloc+ (0 . 0) "./boot/compile.scm" . 427038))
   (push.close
     (2 0)
     (call
       (touch.gloc.of cte-extend-iloc)
       (call (push.gloc.of car) (push.iloc.1 . 0) (apply.gloc.of map "./boot/compile.scm" . 433196))
       (push)
       (push.iloc 2 . 1)
       (apply.gloc.of cte-extend-iloc "./boot/compile.scm" . 433179))
     (push)
     (extend . 1)
     (call
       (touch.gloc.of compile-argument-each)
       (call
         (push.gloc.of cadr)
         (push.iloc.1 . 0)
         (apply.gloc.of map "./boot/compile.scm" . 434235))
       (push)
       (push.iloc.0 . 0)
       (apply.gloc.of compile-argument-each "./boot/compile.scm" . 434212))
     (push)
     (call
       (push.gloc.of append)
       (call
         (push.gloc.of |.L903|)
         (call
           (touch.gloc.of iloc-iota)
           (push.const . 0)
           (push.iloc.1 . 0)
           (push.subr.gloc.of length 1 "./boot/compile.scm" . 436291)
           (push.iloc.1 . 1)
           (push.subr.gloc.of length 1 "./boot/compile.scm" . 436306)
           (apply.gloc.of iloc-iota "./boot/compile.scm" . 436278))
         (push)
         (call
           (push.close
             (1 0)
             (touch.gloc.of compile-expression)
             (push.cadr.iloc (0 . 0) "./boot/compile.scm" . 437339)
             (push.iloc.1 . 0)
             (push.const . #f)
             (push.const . #f)
             (apply.gloc.of compile-expression "./boot/compile.scm" . 437319))
           (push.iloc.1 . 1)
           (apply.gloc.of map "./boot/compile.scm" . 437302))
         (push)
         (apply.gloc.of map "./boot/compile.scm" . 435249))
       (push)
       (apply.gloc.of apply "./boot/compile.scm" . 435235))
     (push)
     (call
       (touch.gloc.of compile-expression-seq)
       (push.cddr.iloc (3 . 0) "./boot/compile.scm" . 438331)
       (push.iloc.0 . 0)
       (push.const . #f)
       (push.const . #t)
       (apply.gloc.of compile-expression-seq "./boot/compile.scm" . 438307))
     (push)
     (extend . 3)
     (call
       (iloc.0 . 0)
       (if.null?
         (push.const . extend.unbound)
         (push.iloc 3 . 0)
         (subr.gloc.of length 1 "./boot/compile.scm" . 440377)
         (push.cons)
         (push.iloc.0 . 1)
         (push.iloc.0 . 2)
         (subr.gloc.of |.append| 2 (|.append| |back-code`3241*| |body-code`3241*|))
         (ret.cons "./boot/compile.scm" . 439328))
       (push.const . extend.unbound)
       (push.iloc 3 . 0)
       (subr.gloc.of length 1 "./boot/compile.scm" . 441401)
       (push.cons)
       (push.iloc.0 . 0)
       (push.const . enclose)
       (push.iloc.0 . 0)
       (subr.gloc.of length 1 "./boot/compile.scm" . 441445)
       (push.cons)
       (push.iloc.0 . 1)
       (push.iloc.0 . 2)
       (subr.gloc.of |.append| 2 "./boot/compile.scm" . 441445)
       (push.cons)
       (subr.gloc.of |.append| 2 "./boot/compile.scm" . 441445)
       (ret.cons "./boot/compile.scm" . 439328))
     (push)
     (extend . 1)
     (iloc 5 . 3)
     (if.true (ret.iloc 0 . 0))
     (push.const . call)
     (iloc.0 . 0)
     (push.cons)
     (ret.subr.gloc.of list "./boot/compile.scm" . 442404))
   (apply.gloc.of
     |.call-with-values|
     (|.call-with-values|
       (lambda ()
         (letrec* ((|loop`3228*|
                     (lambda (|lst`3229*| |front`3229*|)
                       (if (null? |lst`3229*|)
                           (values |bindings`3223*| '())
                           (let ((|init`3231*| (cadar |lst`3229*|)))
                             (if (if (pair? |init`3231*|)
                                     (memq (car |init`3231*|) ''lambda)
                                     (not (symbol? |init`3231*|)))
                                 (|loop`3228*|
                                   (cdr |lst`3229*|)
                                   (cons (car |lst`3229*|) |front`3229*|))
                                 (values (reverse |front`3229*|) |lst`3229*|)))))))
           (|loop`3228*| |bindings`3223*| '())))
       (lambda (|front`3225*| |back`3225*|)
         (let ((|cte`3235*| (cte-extend-iloc (map car |bindings`3223*|) |cte`3209*|)))
           (let ((|front-code`3241*| (compile-argument-each (map cadr |front`3225*|) |cte`3235*|))
                 (|back-code`3241*|
                   (apply
                     append
                     (map |.L903|
                          (iloc-iota 0 (length |front`3225*|) (length |back`3225*|))
                          (map (lambda (|e`3239*|)
                                 (compile-expression (cadr |e`3239*|) |cte`3235*| #f #f))
                               |back`3225*|))))
                 (|body-code`3241*| (compile-expression-seq (cddr |form`3209*|) |cte`3235*| #f #t)))
             (let ((|code`3243*|
                     (if (null? |front-code`3241*|)
                         (|.cons|
                           (|.cons| 'extend.unbound (length |bindings`3223*|))
                           (|.append| |back-code`3241*| |body-code`3241*|))
                         (|.cons|
                           (|.cons| 'extend.unbound (length |bindings`3223*|))
                           (|.append|
                             |front-code`3241*|
                             (|.cons|
                               (|.cons| 'enclose (length |front-code`3241*|))
                               (|.append| |back-code`3241*| |body-code`3241*|)))))))
               (if |tail`3209*| |code`3243*| (list (cons 'call |code`3243*|))))))))))
 (set.gloc.of compile-expression-letrec*)
 (ret.const.unspec))
((close
   (5 0 . compile-unary-special)
   (push.iloc.0 . 0)
   (push.subr.gloc.of cadadr 1 "./boot/compile.scm" . 470036)
   (push.iloc.0 . 0)
   (push.subr.gloc.of caddr 1 "./boot/compile.scm" . 471061)
   (extend . 2)
   (call
     (touch.gloc.of compile-expression)
     (push.iloc.0 . 0)
     (push.iloc.1 . 1)
     (push.const . #f)
     (push.const . #f)
     (apply.gloc.of compile-expression "./boot/compile.scm" . 472091))
   (push)
   (call
     (touch.gloc.of compile-expression)
     (push.iloc.0 . 1)
     (push.iloc.1 . 1)
     (push.const . #f)
     (push.const . #t)
     (apply.gloc.of compile-expression "./boot/compile.scm" . 473116))
   (push)
   (call
     (touch.gloc.of compile-expression)
     (push.iloc.1 . 0)
     (push.subr.gloc.of cadddr 1 "./boot/compile.scm" . 474161)
     (push.iloc.1 . 1)
     (push.const . #f)
     (push.const . #t)
     (apply.gloc.of compile-expression "./boot/compile.scm" . 474141))
   (push)
   (extend . 3)
   (call
     (push.iloc 2 . 4)
     (const . if.null?.ret.const)
     (if.not.eq?.ret.const . #f)
     (iloc.1 . 0)
     (if.not.symbol?.ret.const . #f)
     (push.iloc.1 . 0)
     (iloc.1 . 1)
     (ret.eq? "./boot/compile.scm" . 475216))
   (if.true
     (iloc 2 . 2)
     (if.true
       (push.iloc.0 . 0)
       (push.iloc 2 . 4)
       (push.subr.gloc.of |.list| 1 (|.list| |inst-ret-const`3253*|))
       (iloc.0 . 2)
       (push.cons)
       (ret.subr.gloc.of |.append| "./boot/compile.scm" . 476186))
     (push.const . call)
     (push.iloc.0 . 0)
     (push.iloc 2 . 4)
     (push.subr.gloc.of |.list| 1 (|.list| |inst-ret-const`3253*|))
     (iloc.0 . 2)
     (push.cons)
     (subr.gloc.of
       |.append|
       2
       (|.append| |arg-code`3257*| (|.cons| (|.list| |inst-ret-const`3253*|) |false-code`3257*|)))
     (push.cons)
     (ret.subr.gloc.of |.list| "./boot/compile.scm" . 477210))
   (call
     (cdr.iloc (0 . 1) "./boot/compile.scm" . 479268)
     (if.not.null?.ret.const . #f)
     (push.iloc.0 . 1)
     (push.subr.gloc.of caar 1 "./boot/compile.scm" . 479291)
     (push.const const ret.const)
     (ret.subr.gloc.of memq "./boot/compile.scm" . 479285))
   (if.true
     (iloc 2 . 2)
     (if.true
       (push.iloc.0 . 0)
       (push.iloc 2 . 4)
       (push.iloc.0 . 1)
       (subr.gloc.of cdar 1 "./boot/compile.scm" . 480325)
       (push.cons)
       (iloc.0 . 2)
       (push.cons)
       (ret.subr.gloc.of |.append| "./boot/compile.scm" . 480286))
     (push.const . call)
     (push.iloc.0 . 0)
     (push.iloc 2 . 3)
     (iloc.0 . 1)
     (push.cons)
     (iloc.0 . 2)
     (push.cons)
     (subr.gloc.of
       |.append|
       2
       (|.append|
         |arg-code`3257*|
         (|.cons| (|.cons| |inst`3253*| |true-code`3257*|) |false-code`3257*|)))
     (push.cons)
     (ret.subr.gloc.of |.list| "./boot/compile.scm" . 481310))
   (iloc 2 . 2)
   (if.true
     (push.iloc.0 . 0)
     (push.iloc 2 . 3)
     (iloc.0 . 1)
     (push.cons)
     (iloc.0 . 2)
     (push.cons)
     (ret.subr.gloc.of |.append| "./boot/compile.scm" . 482334))
   (push.const . call)
   (push.iloc.0 . 0)
   (push.iloc 2 . 3)
   (iloc.0 . 1)
   (push.cons)
   (iloc.0 . 2)
   (push.cons)
   (subr.gloc.of
     |.append|
     2
     (|.append|
       |arg-code`3257*|
       (|.cons| (|.cons| |inst`3253*| |true-code`3257*|) |false-code`3257*|)))
   (push.cons)
   (ret.subr.gloc.of |.list| "./boot/compile.scm" . 483358))
 (set.gloc.of |compile-unary-special`3246*|)
 (close
   (5 0 . compile-binary-special)
   (push.iloc.0 . 0)
   (push.subr.gloc.of cdadr 1 "./boot/compile.scm" . 487445)
   (push.iloc.0 . 0)
   (push.subr.gloc.of caddr 1 "./boot/compile.scm" . 488469)
   (extend . 2)
   (call
     (touch.gloc.of compile-argument)
     (push.car.iloc (0 . 0) "./boot/compile.scm" . 489525)
     (push.iloc.1 . 1)
     (apply.gloc.of compile-argument "./boot/compile.scm" . 489507))
   (push)
   (call
     (touch.gloc.of compile-expression)
     (push.cadr.iloc (0 . 0) "./boot/compile.scm" . 490551)
     (push.iloc.1 . 1)
     (push.const . #f)
     (push.const . #f)
     (apply.gloc.of compile-expression "./boot/compile.scm" . 490531))
   (push)
   (push.subr.gloc.of append 2 "./boot/compile.scm" . 489499)
   (call
     (touch.gloc.of compile-expression)
     (push.iloc.0 . 1)
     (push.iloc.1 . 1)
     (push.const . #f)
     (push.const . #t)
     (apply.gloc.of compile-expression "./boot/compile.scm" . 491548))
   (push)
   (call
     (touch.gloc.of compile-expression)
     (push.iloc.1 . 0)
     (push.subr.gloc.of cadddr 1 "./boot/compile.scm" . 492593)
     (push.iloc.1 . 1)
     (push.const . #f)
     (push.const . #t)
     (apply.gloc.of compile-expression "./boot/compile.scm" . 492573))
   (push)
   (extend . 3)
   (call
     (cdr.iloc (0 . 1) "./boot/compile.scm" . 493597)
     (if.not.null?.ret.const . #f)
     (push.iloc.0 . 1)
     (push.subr.gloc.of caar 1 "./boot/compile.scm" . 493620)
     (push.const const ret.const)
     (ret.subr.gloc.of memq "./boot/compile.scm" . 493614))
   (if.true
     (iloc 2 . 2)
     (if.true
       (push.iloc.0 . 0)
       (push.iloc 2 . 4)
       (push.iloc.0 . 1)
       (subr.gloc.of cdar 1 "./boot/compile.scm" . 494654)
       (push.cons)
       (iloc.0 . 2)
       (push.cons)
       (ret.subr.gloc.of |.append| "./boot/compile.scm" . 494615))
     (push.const . call)
     (push.iloc.0 . 0)
     (push.iloc 2 . 3)
     (iloc.0 . 1)
     (push.cons)
     (iloc.0 . 2)
     (push.cons)
     (subr.gloc.of
       |.append|
       2
       (|.append|
         |arg-code`3263*|
         (|.cons| (|.cons| |inst`3259*| |true-code`3263*|) |false-code`3263*|)))
     (push.cons)
     (ret.subr.gloc.of |.list| "./boot/compile.scm" . 495639))
   (iloc 2 . 2)
   (if.true
     (push.iloc.0 . 0)
     (push.iloc 2 . 3)
     (iloc.0 . 1)
     (push.cons)
     (iloc.0 . 2)
     (push.cons)
     (ret.subr.gloc.of |.append| "./boot/compile.scm" . 496663))
   (push.const . call)
   (push.iloc.0 . 0)
   (push.iloc 2 . 3)
   (iloc.0 . 1)
   (push.cons)
   (iloc.0 . 2)
   (push.cons)
   (subr.gloc.of
     |.append|
     2
     (|.append|
       |arg-code`3263*|
       (|.cons| (|.cons| |inst`3259*| |true-code`3263*|) |false-code`3263*|)))
   (push.cons)
   (ret.subr.gloc.of |.list| "./boot/compile.scm" . 497687))
 (set.gloc.of |compile-binary-special`3246*|)
 (close
   (4 0 . compile-anonymous)
   (call
     (touch.gloc.of compile-expression)
     (push.cadr.iloc (0 . 0) "./boot/compile.scm" . 450606)
     (push.iloc.0 . 1)
     (push.const . #f)
     (push.const . #f)
     (apply.gloc.of compile-expression "./boot/compile.scm" . 450586))
   (push)
   (extend . 1)
   (call
     (cdr.iloc (0 . 0) "./boot/compile.scm" . 451611)
     (if.not.null?.ret.const . #f)
     (push.iloc.0 . 0)
     (push.subr.gloc.of caar 1 "./boot/compile.scm" . 451633)
     (const . const)
     (ret.eq? "./boot/compile.scm" . 451628))
   (if.true
     (push.iloc.0 . 0)
     (subr.gloc.of cdar 1 "./boot/compile.scm" . 452627)
     (if.true
       (touch.gloc.of compile-expression)
       (push.iloc.1 . 0)
       (push.subr.gloc.of caddr 1 "./boot/compile.scm" . 453671)
       (push.iloc.1 . 1)
       (push.iloc.1 . 2)
       (push.iloc.1 . 3)
       (apply.gloc.of compile-expression "./boot/compile.scm" . 453651))
     (touch.gloc.of compile-expression)
     (push.iloc.1 . 0)
     (push.subr.gloc.of cadddr 1 "./boot/compile.scm" . 454695)
     (push.iloc.1 . 1)
     (push.iloc.1 . 2)
     (push.iloc.1 . 3)
     (apply.gloc.of compile-expression "./boot/compile.scm" . 454675))
   (call
     (touch.gloc.of compile-expression)
     (push.iloc.1 . 0)
     (push.subr.gloc.of cadddr 1 "./boot/compile.scm" . 455733)
     (push.iloc.1 . 1)
     (push.const . #f)
     (push.const . #t)
     (apply.gloc.of compile-expression "./boot/compile.scm" . 455713))
   (push)
   (call
     (touch.gloc.of compile-expression)
     (push.iloc.1 . 0)
     (push.subr.gloc.of caddr 1 "./boot/compile.scm" . 456756)
     (push.iloc.1 . 1)
     (push.const . #f)
     (push.const . #t)
     (apply.gloc.of compile-expression "./boot/compile.scm" . 456736))
   (push)
   (extend . 2)
   (call
     (cadr.iloc (2 . 0) "./boot/compile.scm" . 457763)
     (if.not.symbol?.ret.const . #f)
     (push.cadr.iloc (2 . 0) "./boot/compile.scm" . 457781)
     (push.iloc 2 . 0)
     (subr.gloc.of caddr 1 "./boot/compile.scm" . 457793)
     (ret.eq? "./boot/compile.scm" . 457776))
   (if.true
     (iloc 2 . 3)
     (if.true
       (push.iloc.1 . 0)
       (push.const . if.true.ret)
       (push.subr.gloc.of list 1 "./boot/compile.scm" . 458800)
       (iloc.0 . 0)
       (push.cons)
       (ret.subr.gloc.of |.append| "./boot/compile.scm" . 458779))
     (push.const . call)
     (push.iloc.1 . 0)
     (push.const . if.true)
     (iloc.0 . 1)
     (push.cons)
     (iloc.0 . 0)
     (push.cons)
     (subr.gloc.of
       |.append|
       2
       (|.append|
         |cond-code`3249*|
         (|.cons| (|.cons| 'if.true |true-code`3251*|) |false-code`3251*|)))
     (push.cons)
     (ret.subr.gloc.of |.list| "./boot/compile.scm" . 459803))
   (iloc 2 . 3)
   (if.true
     (call
       (cdr.iloc (0 . 1) "./boot/compile.scm" . 461868)
       (if.not.null?.ret.const . #f)
       (push.iloc.0 . 1)
       (push.subr.gloc.of caar 1 "./boot/compile.scm" . 461890)
       (const . ret.const)
       (ret.eq? "./boot/compile.scm" . 461885))
     (if.true
       (push.iloc.1 . 0)
       (push.const . if.true.ret.const)
       (push.iloc.0 . 1)
       (subr.gloc.of cdar 1 "./boot/compile.scm" . 462916)
       (push.cons)
       (iloc.0 . 0)
       (push.cons)
       (ret.subr.gloc.of |.append| "./boot/compile.scm" . 461852))
     (push.iloc.1 . 0)
     (push.const . if.true)
     (iloc.0 . 1)
     (push.cons)
     (iloc.0 . 0)
     (push.cons)
     (ret.subr.gloc.of |.append| "./boot/compile.scm" . 461852))
   (push.const . call)
   (push.iloc.1 . 0)
   (push.const . if.true)
   (iloc.0 . 1)
   (push.cons)
   (iloc.0 . 0)
   (push.cons)
   (subr.gloc.of
     |.append|
     2
     (|.append|
       |cond-code`3249*|
       (|.cons| (|.cons| 'if.true |true-code`3251*|) |false-code`3251*|)))
   (push.cons)
   (ret.subr.gloc.of |.list| "./boot/compile.scm" . 464923))
 (set.gloc.of |compile-anonymous`3246*|)
 (close
   (4 0 . compile-expression-if)
   (push.iloc.0 . 0)
   (subr.gloc.of cdddr 1 "./boot/compile.scm" . 501779)
   (if.null?
     (iloc.0 . 2)
     (if.true
       (touch.gloc.of compile-expression)
       (push.const . and)
       (cdr.iloc (0 . 0) "./boot/compile.scm" . 503852)
       (push.cons)
       (push.iloc.0 . 1)
       (push.iloc.0 . 2)
       (push.iloc.0 . 3)
       (apply.gloc.of compile-expression "./boot/compile.scm" . 503824))
     (touch.gloc.of compile-expression)
     (push.const . if)
     (push.cdr.iloc (0 . 0) "./boot/compile.scm" . 504875)
     (push.const (|.unspecified|))
     (subr.gloc.of |.append| 2 "./boot/compile.scm" . 504875)
     (push.cons)
     (push.iloc.0 . 1)
     (push.iloc.0 . 2)
     (push.iloc.0 . 3)
     (apply.gloc.of compile-expression "./boot/compile.scm" . 504848))
   (call
     (cadr.iloc (0 . 0) "./boot/compile.scm" . 506911)
     (if.not.pair?.ret.const . #f)
     (touch.gloc.of top-level-subr)
     (push.iloc.0 . 0)
     (push.subr.gloc.of caadr 1 "./boot/compile.scm" . 506940)
     (apply.gloc.of top-level-subr "./boot/compile.scm" . 506924))
   (push)
   (extend . 1)
   (iloc.0 . 0)
   (if.true
     (push.cadr.iloc (1 . 0) "./boot/compile.scm" . 508966)
     (push.subr.gloc.of length 1 "./boot/compile.scm" . 508958)
     (extend . 1)
     (push.iloc.0 . 0)
     (const . 2)
     (if.eq?
       (push.iloc.1 . 0)
       (gloc.of null?)
       (if.eq?
         (touch.gloc.of |compile-unary-special`3246*|)
         (push.iloc 2 . 0)
         (push.iloc 2 . 1)
         (push.iloc 2 . 3)
         (push.const . if.null?)
         (push.const . if.null?.ret.const)
         (apply.gloc.of |compile-unary-special`3246*| "./boot/compile.scm" . 512034))
       (push.iloc.1 . 0)
       (gloc.of pair?)
       (if.eq?
         (touch.gloc.of |compile-unary-special`3246*|)
         (push.iloc 2 . 0)
         (push.iloc 2 . 1)
         (push.iloc 2 . 3)
         (push.const . if.pair?)
         (push.const . if.pair?.ret.const)
         (apply.gloc.of |compile-unary-special`3246*| "./boot/compile.scm" . 514082))
       (push.iloc.1 . 0)
       (gloc.of symbol?)
       (if.eq?
         (touch.gloc.of |compile-unary-special`3246*|)
         (push.iloc 2 . 0)
         (push.iloc 2 . 1)
         (push.iloc 2 . 3)
         (push.const . if.symbol?)
         (push.const . if.symbol?.ret.const)
         (apply.gloc.of |compile-unary-special`3246*| "./boot/compile.scm" . 516130))
       (touch.gloc.of |compile-anonymous`3246*|)
       (push.iloc 2 . 0)
       (push.iloc 2 . 1)
       (push.iloc 2 . 2)
       (push.iloc 2 . 3)
       (apply.gloc.of |compile-anonymous`3246*| "./boot/compile.scm" . 518178))
     (push.iloc.0 . 0)
     (const . 3)
     (if.eq?
       (push.iloc.1 . 0)
       (gloc.of eq?)
       (if.eq?
         (touch.gloc.of |compile-binary-special`3246*|)
         (push.iloc 2 . 0)
         (push.iloc 2 . 1)
         (push.iloc 2 . 3)
         (push.const . if.eq?)
         (push.const . if.eq?.ret.const)
         (apply.gloc.of |compile-binary-special`3246*| "./boot/compile.scm" . 521250))
       (call
         (push.iloc.1 . 0)
         (gloc.of eqv?)
         (if.eq?.ret.const . #t)
         (push.iloc.1 . 0)
         (gloc.of equal?)
         (ret.eq? "./boot/compile.scm" . 522294))
       (if.true
         (push.cadr.iloc (2 . 0) "./boot/compile.scm" . 523343)
         (push.subr.gloc.of caddr 1 "./boot/compile.scm" . 523336)
         (extend . 1)
         (call
           (call
             (touch.gloc.of immediate-literal?)
             (push.cadr.iloc (3 . 0) "./boot/compile.scm" . 523316)
             (push.subr.gloc.of cadr 1 "./boot/compile.scm" . 523310)
             (apply.gloc.of immediate-literal? "./boot/compile.scm" . 524332))
           (if.true.ret)
           (touch.gloc.of immediate-literal?)
           (push.iloc.0 . 0)
           (apply.gloc.of immediate-literal? "./boot/compile.scm" . 524358))
         (if.true
           (touch.gloc.of |compile-binary-special`3246*|)
           (push.iloc 3 . 0)
           (push.iloc 3 . 1)
           (push.iloc 3 . 3)
           (push.const . if.eq?)
           (push.const . if.eq?.ret.const)
           (apply.gloc.of |compile-binary-special`3246*| "./boot/compile.scm" . 525352))
         (touch.gloc.of |compile-anonymous`3246*|)
         (push.iloc 3 . 0)
         (push.iloc 3 . 1)
         (push.iloc 3 . 2)
         (push.iloc 3 . 3)
         (apply.gloc.of |compile-anonymous`3246*| "./boot/compile.scm" . 526376))
       (touch.gloc.of |compile-anonymous`3246*|)
       (push.iloc 2 . 0)
       (push.iloc 2 . 1)
       (push.iloc 2 . 2)
       (push.iloc 2 . 3)
       (apply.gloc.of |compile-anonymous`3246*| "./boot/compile.scm" . 528418))
     (touch.gloc.of |compile-anonymous`3246*|)
     (push.iloc 2 . 0)
     (push.iloc 2 . 1)
     (push.iloc 2 . 2)
     (push.iloc 2 . 3)
     (apply.gloc.of |compile-anonymous`3246*| "./boot/compile.scm" . 530459))
   (touch.gloc.of |compile-anonymous`3246*|)
   (push.iloc.1 . 0)
   (push.iloc.1 . 1)
   (push.iloc.1 . 2)
   (push.iloc.1 . 3)
   (apply.gloc.of |compile-anonymous`3246*| "./boot/compile.scm" . 532499))
 (set.gloc.of compile-expression-if)
 (ret.const.unspec))
((close
   (2 0 . compile-clause)
   (cdr.iloc (0 . 0) "./boot/compile.scm" . 557076)
   (if.null?
     (touch.gloc.of compile-expression)
     (push.car.iloc (0 . 0) "./boot/compile.scm" . 558113)
     (push.iloc.0 . 1)
     (push.const . #f)
     (push.const . #t)
     (apply.gloc.of compile-expression "./boot/compile.scm" . 558093))
   (call
     (car.iloc (0 . 0) "./boot/compile.scm" . 559136)
     (if.not.pair?.ret.const . #f)
     (touch.gloc.of top-level-subr)
     (push.iloc.0 . 0)
     (push.subr.gloc.of caar 1 "./boot/compile.scm" . 559163)
     (apply.gloc.of top-level-subr "./boot/compile.scm" . 559147))
   (push)
   (extend . 1)
   (iloc.0 . 0)
   (if.true
     (push.iloc.0 . 0)
     (gloc.of not)
     (if.eq?
       (push.iloc.1 . 0)
       (push.subr.gloc.of cadar 1 "./boot/compile.scm" . 562222)
       (cdr.iloc (1 . 0) "./boot/compile.scm" . 562234)
       (push.cons)
       (extend . 1)
       (call
         (car.iloc (0 . 0) "./boot/compile.scm" . 563250)
         (if.not.pair?.ret.const . #f)
         (touch.gloc.of top-level-subr)
         (push.iloc.0 . 0)
         (push.subr.gloc.of caar 1 "./boot/compile.scm" . 563277)
         (apply.gloc.of top-level-subr "./boot/compile.scm" . 563261))
       (push)
       (extend . 1)
       (iloc.0 . 0)
       (if.true
         (push.car.iloc (1 . 0) "./boot/compile.scm" . 565305)
         (push.subr.gloc.of length 1 "./boot/compile.scm" . 565297)
         (extend . 1)
         (push.iloc.0 . 0)
         (const . 2)
         (if.eq?
           (push.iloc.1 . 0)
           (gloc.of null?)
           (if.eq?
             (touch.gloc.of |compile-unary-special`3276*|)
             (push.iloc 2 . 0)
             (push.iloc 4 . 1)
             (push.const . if.not.null?.ret.const)
             (apply.gloc.of |compile-unary-special`3276*| "./boot/compile.scm" . 568373))
           (push.iloc.1 . 0)
           (gloc.of pair?)
           (if.eq?
             (touch.gloc.of |compile-unary-special`3276*|)
             (push.iloc 2 . 0)
             (push.iloc 4 . 1)
             (push.const . if.not.pair?.ret.const)
             (apply.gloc.of |compile-unary-special`3276*| "./boot/compile.scm" . 570421))
           (push.iloc.1 . 0)
           (gloc.of symbol?)
           (if.eq?
             (touch.gloc.of |compile-unary-special`3276*|)
             (push.iloc 2 . 0)
             (push.iloc 4 . 1)
             (push.const . if.not.symbol?.ret.const)
             (apply.gloc.of |compile-unary-special`3276*| "./boot/compile.scm" . 572469))
           (touch.gloc.of |compile-anonymous-negate`3276*|)
           (push.iloc 2 . 0)
           (push.iloc 4 . 1)
           (apply.gloc.of |compile-anonymous-negate`3276*| "./boot/compile.scm" . 574517))
         (push.iloc.0 . 0)
         (const . 3)
         (if.eq?
           (push.iloc.1 . 0)
           (gloc.of eq?)
           (if.eq?
             (touch.gloc.of |compile-binary-special`3276*|)
             (push.iloc 2 . 0)
             (push.iloc 4 . 1)
             (push.const . if.not.eq?.ret.const)
             (apply.gloc.of |compile-binary-special`3276*| "./boot/compile.scm" . 577589))
           (call
             (push.iloc.1 . 0)
             (gloc.of eqv?)
             (if.eq?.ret.const . #t)
             (push.iloc.1 . 0)
             (gloc.of equal?)
             (ret.eq? "./boot/compile.scm" . 578633))
           (if.true
             (push.car.iloc (2 . 0) "./boot/compile.scm" . 579680)
             (push.subr.gloc.of caddr 1 "./boot/compile.scm" . 579673)
             (extend . 1)
             (call
               (call
                 (touch.gloc.of immediate-literal?)
                 (push.car.iloc (3 . 0) "./boot/compile.scm" . 579655)
                 (push.subr.gloc.of cadr 1 "./boot/compile.scm" . 579649)
                 (apply.gloc.of immediate-literal? "./boot/compile.scm" . 580671))
               (if.true.ret)
               (touch.gloc.of immediate-literal?)
               (push.iloc.0 . 0)
               (apply.gloc.of immediate-literal? "./boot/compile.scm" . 580697))
             (if.true
               (touch.gloc.of |compile-binary-special`3276*|)
               (push.iloc 3 . 0)
               (push.iloc 5 . 1)
               (push.const . if.not.eq?.ret.const)
               (apply.gloc.of |compile-binary-special`3276*| "./boot/compile.scm" . 581691))
             (touch.gloc.of |compile-anonymous-negate`3276*|)
             (push.iloc 3 . 0)
             (push.iloc 5 . 1)
             (apply.gloc.of |compile-anonymous-negate`3276*| "./boot/compile.scm" . 582715))
           (touch.gloc.of |compile-anonymous-negate`3276*|)
           (push.iloc 2 . 0)
           (push.iloc 4 . 1)
           (apply.gloc.of |compile-anonymous-negate`3276*| "./boot/compile.scm" . 584757))
         (touch.gloc.of |compile-anonymous-negate`3276*|)
         (push.iloc 2 . 0)
         (push.iloc 4 . 1)
         (apply.gloc.of |compile-anonymous-negate`3276*| "./boot/compile.scm" . 586798))
       (touch.gloc.of |compile-anonymous-negate`3276*|)
       (push.iloc.1 . 0)
       (push.iloc 3 . 1)
       (apply.gloc.of |compile-anonymous-negate`3276*| "./boot/compile.scm" . 588838))
     (push.car.iloc (1 . 0) "./boot/compile.scm" . 589867)
     (push.subr.gloc.of length 1 "./boot/compile.scm" . 589859)
     (extend . 1)
     (push.iloc.0 . 0)
     (const . 2)
     (if.eq?
       (push.iloc.1 . 0)
       (gloc.of null?)
       (if.eq?
         (touch.gloc.of |compile-unary-special`3276*|)
         (push.iloc 2 . 0)
         (push.iloc 2 . 1)
         (push.const . if.null?.ret.const)
         (apply.gloc.of |compile-unary-special`3276*| "./boot/compile.scm" . 592935))
       (push.iloc.1 . 0)
       (gloc.of pair?)
       (if.eq?
         (touch.gloc.of |compile-unary-special`3276*|)
         (push.iloc 2 . 0)
         (push.iloc 2 . 1)
         (push.const . if.pair?.ret.const)
         (apply.gloc.of |compile-unary-special`3276*| "./boot/compile.scm" . 594983))
       (push.iloc.1 . 0)
       (gloc.of symbol?)
       (if.eq?
         (touch.gloc.of |compile-unary-special`3276*|)
         (push.iloc 2 . 0)
         (push.iloc 2 . 1)
         (push.const . if.symbol?.ret.const)
         (apply.gloc.of |compile-unary-special`3276*| "./boot/compile.scm" . 597031))
       (touch.gloc.of |compile-anonymous`3276*|)
       (push.iloc 2 . 0)
       (push.iloc 2 . 1)
       (apply.gloc.of |compile-anonymous`3276*| "./boot/compile.scm" . 599079))
     (push.iloc.0 . 0)
     (const . 3)
     (if.eq?
       (push.iloc.1 . 0)
       (gloc.of eq?)
       (if.eq?
         (touch.gloc.of |compile-binary-special`3276*|)
         (push.iloc 2 . 0)
         (push.iloc 2 . 1)
         (push.const . if.eq?.ret.const)
         (apply.gloc.of |compile-binary-special`3276*| "./boot/compile.scm" . 602151))
       (call
         (push.iloc.1 . 0)
         (gloc.of eqv?)
         (if.eq?.ret.const . #t)
         (push.iloc.1 . 0)
         (gloc.of equal?)
         (ret.eq? "./boot/compile.scm" . 603195))
       (if.true
         (push.car.iloc (2 . 0) "./boot/compile.scm" . 604242)
         (push.subr.gloc.of caddr 1 "./boot/compile.scm" . 604235)
         (extend . 1)
         (call
           (call
             (touch.gloc.of immediate-literal?)
             (push.car.iloc (3 . 0) "./boot/compile.scm" . 604217)
             (push.subr.gloc.of cadr 1 "./boot/compile.scm" . 604211)
             (apply.gloc.of immediate-literal? "./boot/compile.scm" . 605233))
           (if.true.ret)
           (touch.gloc.of immediate-literal?)
           (push.iloc.0 . 0)
           (apply.gloc.of immediate-literal? "./boot/compile.scm" . 605259))
         (if.true
           (touch.gloc.of |compile-binary-special`3276*|)
           (push.iloc 3 . 0)
           (push.iloc 3 . 1)
           (push.const . if.eq?.ret.const)
           (apply.gloc.of |compile-binary-special`3276*| "./boot/compile.scm" . 606253))
         (touch.gloc.of |compile-anonymous`3276*|)
         (push.iloc 3 . 0)
         (push.iloc 3 . 1)
         (apply.gloc.of |compile-anonymous`3276*| "./boot/compile.scm" . 607277))
       (touch.gloc.of |compile-anonymous`3276*|)
       (push.iloc 2 . 0)
       (push.iloc 2 . 1)
       (apply.gloc.of |compile-anonymous`3276*| "./boot/compile.scm" . 609319))
     (touch.gloc.of |compile-anonymous`3276*|)
     (push.iloc 2 . 0)
     (push.iloc 2 . 1)
     (apply.gloc.of |compile-anonymous`3276*| "./boot/compile.scm" . 611360))
   (touch.gloc.of |compile-anonymous`3276*|)
   (push.iloc.1 . 0)
   (push.iloc.1 . 1)
   (apply.gloc.of |compile-anonymous`3276*| "./boot/compile.scm" . 613396))
 (set.gloc.of |compile-clause`3274*|)
 (close
   (2 0 . compile-anonymous-negate)
   (call
     (touch.gloc.of compile-expression)
     (push.car.iloc (0 . 0) "./boot/compile.scm" . 546853)
     (push.iloc.0 . 1)
     (push.const . #f)
     (push.const . #f)
     (apply.gloc.of compile-expression "./boot/compile.scm" . 546833))
   (push)
   (push.const . if.false.ret.const)
   (const . #t)
   (push.cons)
   (call
     (touch.gloc.of |compile-clause`3274*|)
     (push.cdr.iloc (0 . 0) "./boot/compile.scm" . 546923)
     (push.iloc.0 . 1)
     (apply.gloc.of |compile-clause`3274*| "./boot/compile.scm" . 546907))
   (push.cons)
   (ret.subr.gloc.of |.append| "./boot/compile.scm" . 545803))
 (set.gloc.of |compile-anonymous-negate`3276*|)
 (close
   (2 0 . compile-anonymous)
   (call
     (touch.gloc.of compile-expression)
     (push.car.iloc (0 . 0) "./boot/compile.scm" . 542757)
     (push.iloc.0 . 1)
     (push.const . #f)
     (push.const . #f)
     (apply.gloc.of compile-expression "./boot/compile.scm" . 542737))
   (push)
   (push.const . if.true.ret)
   (push.subr.gloc.of list 1 "./boot/compile.scm" . 542779)
   (call
     (touch.gloc.of |compile-clause`3274*|)
     (push.cdr.iloc (0 . 0) "./boot/compile.scm" . 542817)
     (push.iloc.0 . 1)
     (apply.gloc.of |compile-clause`3274*| "./boot/compile.scm" . 542801))
   (push.cons)
   (ret.subr.gloc.of |.append| "./boot/compile.scm" . 541707))
 (set.gloc.of |compile-anonymous`3276*|)
 (close
   (3 0 . compile-binary-special)
   (call
     (touch.gloc.of compile-argument)
     (push.iloc.0 . 0)
     (push.subr.gloc.of cadar 1 "./boot/compile.scm" . 555043)
     (push.iloc.0 . 1)
     (apply.gloc.of compile-argument "./boot/compile.scm" . 555025))
   (push)
   (call
     (touch.gloc.of compile-expression)
     (push.iloc.0 . 0)
     (push.subr.gloc.of caddar 1 "./boot/compile.scm" . 555082)
     (push.iloc.0 . 1)
     (push.const . #f)
     (push.const . #f)
     (apply.gloc.of compile-expression "./boot/compile.scm" . 555062))
   (push)
   (push.iloc.0 . 2)
   (const . #t)
   (push.cons)
   (call
     (touch.gloc.of |compile-clause`3274*|)
     (push.cdr.iloc (0 . 0) "./boot/compile.scm" . 555140)
     (push.iloc.0 . 1)
     (apply.gloc.of |compile-clause`3274*| "./boot/compile.scm" . 555124))
   (push.cons)
   (push.subr.gloc.of |.append| 2 "./boot/compile.scm" . 555062)
   (ret.subr.gloc.of |.append| "./boot/compile.scm" . 553995))
 (set.gloc.of |compile-binary-special`3276*|)
 (close
   (3 0 . compile-unary-special)
   (call
     (touch.gloc.of compile-expression)
     (push.iloc.0 . 0)
     (push.subr.gloc.of cadar 1 "./boot/compile.scm" . 550949)
     (push.iloc.0 . 1)
     (push.const . #f)
     (push.const . #f)
     (apply.gloc.of compile-expression "./boot/compile.scm" . 550929))
   (push)
   (push.iloc.0 . 2)
   (const . #t)
   (push.cons)
   (call
     (touch.gloc.of |compile-clause`3274*|)
     (push.cdr.iloc (0 . 0) "./boot/compile.scm" . 551006)
     (push.iloc.0 . 1)
     (apply.gloc.of |compile-clause`3274*| "./boot/compile.scm" . 550990))
   (push.cons)
   (ret.subr.gloc.of |.append| "./boot/compile.scm" . 549899))
 (set.gloc.of |compile-unary-special`3276*|)
 (close
   (4 0 . compile-expression-or)
   (cdr.iloc (0 . 0) "./boot/compile.scm" . 615443)
   (if.null?
     (iloc.0 . 2)
     (if.true.ret.const)
     (iloc.0 . 3)
     (if.true
       (push.const . ret.const)
       (const . #f)
       (push.cons)
       (ret.subr.gloc.of list "./boot/compile.scm" . 617496))
     (push.const . const)
     (const . #f)
     (push.cons)
     (ret.subr.gloc.of list "./boot/compile.scm" . 618520))
   (cddr.iloc (0 . 0) "./boot/compile.scm" . 619539)
   (if.null?
     (touch.gloc.of compile-expression)
     (push.cadr.iloc (0 . 0) "./boot/compile.scm" . 620576)
     (push.iloc.0 . 1)
     (push.iloc.0 . 2)
     (push.iloc.0 . 3)
     (apply.gloc.of compile-expression "./boot/compile.scm" . 620556))
   (call
     (iloc.0 . 3)
     (if.true.ret.const . #f)
     (push.iloc.0 . 0)
     (subr.gloc.of cdddr 1 "./boot/compile.scm" . 622616)
     (if.not.null?.ret.const . #f)
     (push.iloc.0 . 0)
     (subr.gloc.of caddr 1 "./boot/compile.scm" . 623640)
     (if.not.pair?.ret.const . #f)
     (call
       (touch.gloc.of top-level-value-or-false)
       (push.iloc.0 . 0)
       (push.subr.gloc.of caaddr 1 "./boot/compile.scm" . 624688)
       (apply.gloc.of top-level-value-or-false "./boot/compile.scm" . 624662))
     (push)
     (gloc.of assertion-violation)
     (ret.eq? "./boot/compile.scm" . 624657))
   (if.true
     (call
       (touch.gloc.of compile-expression)
       (push.cadr.iloc (0 . 0) "./boot/compile.scm" . 625700)
       (push.iloc.0 . 1)
       (push.const . #f)
       (push.const . #f)
       (apply.gloc.of compile-expression "./boot/compile.scm" . 625680))
     (push)
     (push.const . if.false.call)
     (call
       (touch.gloc.of compile-expression)
       (push.iloc.0 . 0)
       (push.subr.gloc.of caddr 1 "./boot/compile.scm" . 625760)
       (push.iloc.0 . 1)
       (push.const . #f)
       (push.const . #t)
       (apply.gloc.of compile-expression "./boot/compile.scm" . 625740))
     (push.cons)
     (push.subr.gloc.of |.list| 1 "./boot/compile.scm" . 625740)
     (ret.subr.gloc.of |.append| "./boot/compile.scm" . 621579))
   (call
     (touch.gloc.of |compile-clause`3274*|)
     (push.cdr.iloc (0 . 0) "./boot/compile.scm" . 627752)
     (push.iloc.0 . 1)
     (apply.gloc.of |compile-clause`3274*| "./boot/compile.scm" . 627736))
   (push)
   (extend . 1)
   (iloc.1 . 3)
   (if.true (ret.iloc 0 . 0))
   (push.const . call)
   (iloc.0 . 0)
   (push.cons)
   (ret.subr.gloc.of list "./boot/compile.scm" . 628764))
 (set.gloc.of compile-expression-or)
 (ret.const.unspec))
((close
   (2 0 . compile-anonymous-negate)
   (call
     (touch.gloc.of compile-expression)
     (push.car.iloc (0 . 0) "./boot/compile.scm" . 643109)
     (push.iloc.0 . 1)
     (push.const . #f)
     (push.const . #f)
     (apply.gloc.of compile-expression "./boot/compile.scm" . 643089))
   (push)
   (push.const . if.true.ret.const)
   (const . #f)
   (push.cons)
   (call
     (touch.gloc.of |compile-clause`3306*|)
     (push.cdr.iloc (0 . 0) "./boot/compile.scm" . 643178)
     (push.iloc.0 . 1)
     (apply.gloc.of |compile-clause`3306*| "./boot/compile.scm" . 643162))
   (push.cons)
   (ret.subr.gloc.of |.append| "./boot/compile.scm" . 642059))
 (set.gloc.of |compile-anonymous-negate`3308*|)
 (close
   (2 0 . compile-clause)
   (cdr.iloc (0 . 0) "./boot/compile.scm" . 653332)
   (if.null?
     (touch.gloc.of compile-expression)
     (push.car.iloc (0 . 0) "./boot/compile.scm" . 654369)
     (push.iloc.0 . 1)
     (push.const . #f)
     (push.const . #t)
     (apply.gloc.of compile-expression "./boot/compile.scm" . 654349))
   (call
     (car.iloc (0 . 0) "./boot/compile.scm" . 655392)
     (if.not.pair?.ret.const . #f)
     (touch.gloc.of top-level-subr)
     (push.iloc.0 . 0)
     (push.subr.gloc.of caar 1 "./boot/compile.scm" . 655419)
     (apply.gloc.of top-level-subr "./boot/compile.scm" . 655403))
   (push)
   (extend . 1)
   (iloc.0 . 0)
   (if.true
     (push.iloc.0 . 0)
     (gloc.of not)
     (if.eq?
       (push.iloc.1 . 0)
       (push.subr.gloc.of cadar 1 "./boot/compile.scm" . 658478)
       (cdr.iloc (1 . 0) "./boot/compile.scm" . 658490)
       (push.cons)
       (extend . 1)
       (call
         (car.iloc (0 . 0) "./boot/compile.scm" . 659506)
         (if.not.pair?.ret.const . #f)
         (touch.gloc.of top-level-subr)
         (push.iloc.0 . 0)
         (push.subr.gloc.of caar 1 "./boot/compile.scm" . 659533)
         (apply.gloc.of top-level-subr "./boot/compile.scm" . 659517))
       (push)
       (extend . 1)
       (iloc.0 . 0)
       (if.true
         (push.car.iloc (1 . 0) "./boot/compile.scm" . 661561)
         (push.subr.gloc.of length 1 "./boot/compile.scm" . 661553)
         (extend . 1)
         (push.iloc.0 . 0)
         (const . 2)
         (if.eq?
           (push.iloc.1 . 0)
           (gloc.of null?)
           (if.eq?
             (touch.gloc.of |compile-unary-special`3308*|)
             (push.iloc 2 . 0)
             (push.iloc 4 . 1)
             (push.const . if.null?.ret.const)
             (apply.gloc.of |compile-unary-special`3308*| "./boot/compile.scm" . 664629))
           (push.iloc.1 . 0)
           (gloc.of pair?)
           (if.eq?
             (touch.gloc.of |compile-unary-special`3308*|)
             (push.iloc 2 . 0)
             (push.iloc 4 . 1)
             (push.const . if.pair?.ret.const)
             (apply.gloc.of |compile-unary-special`3308*| "./boot/compile.scm" . 666677))
           (push.iloc.1 . 0)
           (gloc.of symbol?)
           (if.eq?
             (touch.gloc.of |compile-unary-special`3308*|)
             (push.iloc 2 . 0)
             (push.iloc 4 . 1)
             (push.const . if.symbol?.ret.const)
             (apply.gloc.of |compile-unary-special`3308*| "./boot/compile.scm" . 668725))
           (touch.gloc.of |compile-anonymous-negate`3308*|)
           (push.iloc 2 . 0)
           (push.iloc 4 . 1)
           (apply.gloc.of |compile-anonymous-negate`3308*| "./boot/compile.scm" . 670773))
         (push.iloc.0 . 0)
         (const . 3)
         (if.eq?
           (push.iloc.1 . 0)
           (gloc.of eq?)
           (if.eq?
             (touch.gloc.of |compile-binary-special`3308*|)
             (push.iloc 2 . 0)
             (push.iloc 4 . 1)
             (push.const . if.eq?.ret.const)
             (apply.gloc.of |compile-binary-special`3308*| "./boot/compile.scm" . 673845))
           (call
             (push.iloc.1 . 0)
             (gloc.of eqv?)
             (if.eq?.ret.const . #t)
             (push.iloc.1 . 0)
             (gloc.of equal?)
             (ret.eq? "./boot/compile.scm" . 674889))
           (if.true
             (push.car.iloc (2 . 0) "./boot/compile.scm" . 675936)
             (push.subr.gloc.of caddr 1 "./boot/compile.scm" . 675929)
             (extend . 1)
             (call
               (call
                 (touch.gloc.of immediate-literal?)
                 (push.car.iloc (3 . 0) "./boot/compile.scm" . 675911)
                 (push.subr.gloc.of cadr 1 "./boot/compile.scm" . 675905)
                 (apply.gloc.of immediate-literal? "./boot/compile.scm" . 676927))
               (if.true.ret)
               (touch.gloc.of immediate-literal?)
               (push.iloc.0 . 0)
               (apply.gloc.of immediate-literal? "./boot/compile.scm" . 676953))
             (if.true
               (touch.gloc.of |compile-binary-special`3308*|)
               (push.iloc 3 . 0)
               (push.iloc 5 . 1)
               (push.const . if.eq?.ret.const)
               (apply.gloc.of |compile-binary-special`3308*| "./boot/compile.scm" . 677947))
             (touch.gloc.of |compile-anonymous-negate`3308*|)
             (push.iloc 3 . 0)
             (push.iloc 5 . 1)
             (apply.gloc.of |compile-anonymous-negate`3308*| "./boot/compile.scm" . 678971))
           (touch.gloc.of |compile-anonymous-negate`3308*|)
           (push.iloc 2 . 0)
           (push.iloc 4 . 1)
           (apply.gloc.of |compile-anonymous-negate`3308*| "./boot/compile.scm" . 681013))
         (touch.gloc.of |compile-anonymous-negate`3308*|)
         (push.iloc 2 . 0)
         (push.iloc 4 . 1)
         (apply.gloc.of |compile-anonymous-negate`3308*| "./boot/compile.scm" . 683054))
       (touch.gloc.of |compile-anonymous-negate`3308*|)
       (push.iloc.1 . 0)
       (push.iloc 3 . 1)
       (apply.gloc.of |compile-anonymous-negate`3308*| "./boot/compile.scm" . 685094))
     (push.car.iloc (1 . 0) "./boot/compile.scm" . 686123)
     (push.subr.gloc.of length 1 "./boot/compile.scm" . 686115)
     (extend . 1)
     (push.iloc.0 . 0)
     (const . 2)
     (if.eq?
       (push.iloc.1 . 0)
       (gloc.of null?)
       (if.eq?
         (touch.gloc.of |compile-unary-special`3308*|)
         (push.iloc 2 . 0)
         (push.iloc 2 . 1)
         (push.const . if.not.null?.ret.const)
         (apply.gloc.of |compile-unary-special`3308*| "./boot/compile.scm" . 689191))
       (push.iloc.1 . 0)
       (gloc.of pair?)
       (if.eq?
         (touch.gloc.of |compile-unary-special`3308*|)
         (push.iloc 2 . 0)
         (push.iloc 2 . 1)
         (push.const . if.not.pair?.ret.const)
         (apply.gloc.of |compile-unary-special`3308*| "./boot/compile.scm" . 691239))
       (push.iloc.1 . 0)
       (gloc.of symbol?)
       (if.eq?
         (touch.gloc.of |compile-unary-special`3308*|)
         (push.iloc 2 . 0)
         (push.iloc 2 . 1)
         (push.const . if.not.symbol?.ret.const)
         (apply.gloc.of |compile-unary-special`3308*| "./boot/compile.scm" . 693287))
       (touch.gloc.of |compile-anonymous`3308*|)
       (push.iloc 2 . 0)
       (push.iloc 2 . 1)
       (apply.gloc.of |compile-anonymous`3308*| "./boot/compile.scm" . 695335))
     (push.iloc.0 . 0)
     (const . 3)
     (if.eq?
       (push.iloc.1 . 0)
       (gloc.of eq?)
       (if.eq?
         (touch.gloc.of |compile-binary-special`3308*|)
         (push.iloc 2 . 0)
         (push.iloc 2 . 1)
         (push.const . if.not.eq?.ret.const)
         (apply.gloc.of |compile-binary-special`3308*| "./boot/compile.scm" . 698407))
       (call
         (push.iloc.1 . 0)
         (gloc.of eqv?)
         (if.eq?.ret.const . #t)
         (push.iloc.1 . 0)
         (gloc.of equal?)
         (ret.eq? "./boot/compile.scm" . 699451))
       (if.true
         (push.car.iloc (2 . 0) "./boot/compile.scm" . 700498)
         (push.subr.gloc.of caddr 1 "./boot/compile.scm" . 700491)
         (extend . 1)
         (call
           (call
             (touch.gloc.of immediate-literal?)
             (push.car.iloc (3 . 0) "./boot/compile.scm" . 700473)
             (push.subr.gloc.of cadr 1 "./boot/compile.scm" . 700467)
             (apply.gloc.of immediate-literal? "./boot/compile.scm" . 701489))
           (if.true.ret)
           (touch.gloc.of immediate-literal?)
           (push.iloc.0 . 0)
           (apply.gloc.of immediate-literal? "./boot/compile.scm" . 701515))
         (if.true
           (touch.gloc.of |compile-binary-special`3308*|)
           (push.iloc 3 . 0)
           (push.iloc 3 . 1)
           (push.const . if.not.eq?.ret.const)
           (apply.gloc.of |compile-binary-special`3308*| "./boot/compile.scm" . 702509))
         (touch.gloc.of |compile-anonymous`3308*|)
         (push.iloc 3 . 0)
         (push.iloc 3 . 1)
         (apply.gloc.of |compile-anonymous`3308*| "./boot/compile.scm" . 703533))
       (touch.gloc.of |compile-anonymous`3308*|)
       (push.iloc 2 . 0)
       (push.iloc 2 . 1)
       (apply.gloc.of |compile-anonymous`3308*| "./boot/compile.scm" . 705575))
     (touch.gloc.of |compile-anonymous`3308*|)
     (push.iloc 2 . 0)
     (push.iloc 2 . 1)
     (apply.gloc.of |compile-anonymous`3308*| "./boot/compile.scm" . 707616))
   (touch.gloc.of |compile-anonymous`3308*|)
   (push.iloc.1 . 0)
   (push.iloc.1 . 1)
   (apply.gloc.of |compile-anonymous`3308*| "./boot/compile.scm" . 709652))
 (set.gloc.of |compile-clause`3306*|)
 (close
   (2 0 . compile-anonymous)
   (call
     (touch.gloc.of compile-expression)
     (push.car.iloc (0 . 0) "./boot/compile.scm" . 639013)
     (push.iloc.0 . 1)
     (push.const . #f)
     (push.const . #f)
     (apply.gloc.of compile-expression "./boot/compile.scm" . 638993))
   (push)
   (push.const . if.false.ret)
   (push.subr.gloc.of list 1 "./boot/compile.scm" . 639035)
   (call
     (touch.gloc.of |compile-clause`3306*|)
     (push.cdr.iloc (0 . 0) "./boot/compile.scm" . 639074)
     (push.iloc.0 . 1)
     (apply.gloc.of |compile-clause`3306*| "./boot/compile.scm" . 639058))
   (push.cons)
   (ret.subr.gloc.of |.append| "./boot/compile.scm" . 637963))
 (set.gloc.of |compile-anonymous`3308*|)
 (close
   (3 0 . compile-binary-special)
   (call
     (touch.gloc.of compile-argument)
     (push.iloc.0 . 0)
     (push.subr.gloc.of cadar 1 "./boot/compile.scm" . 651299)
     (push.iloc.0 . 1)
     (apply.gloc.of compile-argument "./boot/compile.scm" . 651281))
   (push)
   (call
     (touch.gloc.of compile-expression)
     (push.iloc.0 . 0)
     (push.subr.gloc.of caddar 1 "./boot/compile.scm" . 651338)
     (push.iloc.0 . 1)
     (push.const . #f)
     (push.const . #f)
     (apply.gloc.of compile-expression "./boot/compile.scm" . 651318))
   (push)
   (push.iloc.0 . 2)
   (const . #f)
   (push.cons)
   (call
     (touch.gloc.of |compile-clause`3306*|)
     (push.cdr.iloc (0 . 0) "./boot/compile.scm" . 651396)
     (push.iloc.0 . 1)
     (apply.gloc.of |compile-clause`3306*| "./boot/compile.scm" . 651380))
   (push.cons)
   (push.subr.gloc.of |.append| 2 "./boot/compile.scm" . 651318)
   (ret.subr.gloc.of |.append| "./boot/compile.scm" . 650251))
 (set.gloc.of |compile-binary-special`3308*|)
 (close
   (3 0 . compile-unary-special)
   (call
     (touch.gloc.of compile-expression)
     (push.iloc.0 . 0)
     (push.subr.gloc.of cadar 1 "./boot/compile.scm" . 647205)
     (push.iloc.0 . 1)
     (push.const . #f)
     (push.const . #f)
     (apply.gloc.of compile-expression "./boot/compile.scm" . 647185))
   (push)
   (push.iloc.0 . 2)
   (const . #f)
   (push.cons)
   (call
     (touch.gloc.of |compile-clause`3306*|)
     (push.cdr.iloc (0 . 0) "./boot/compile.scm" . 647262)
     (push.iloc.0 . 1)
     (apply.gloc.of |compile-clause`3306*| "./boot/compile.scm" . 647246))
   (push.cons)
   (ret.subr.gloc.of |.append| "./boot/compile.scm" . 646155))
 (set.gloc.of |compile-unary-special`3308*|)
 (close
   (4 0 . compile-expression-and)
   (cdr.iloc (0 . 0) "./boot/compile.scm" . 711699)
   (if.null?
     (iloc.0 . 2)
     (if.true.ret.const)
     (iloc.0 . 3)
     (if.true
       (push.const . ret.const)
       (const . #t)
       (push.cons)
       (ret.subr.gloc.of list "./boot/compile.scm" . 713752))
     (push.const . const)
     (const . #t)
     (push.cons)
     (ret.subr.gloc.of list "./boot/compile.scm" . 714776))
   (cddr.iloc (0 . 0) "./boot/compile.scm" . 715795)
   (if.null?
     (touch.gloc.of compile-expression)
     (push.cadr.iloc (0 . 0) "./boot/compile.scm" . 716832)
     (push.iloc.0 . 1)
     (push.iloc.0 . 2)
     (push.iloc.0 . 3)
     (apply.gloc.of compile-expression "./boot/compile.scm" . 716812))
   (call
     (touch.gloc.of |compile-clause`3306*|)
     (push.cdr.iloc (0 . 0) "./boot/compile.scm" . 718888)
     (push.iloc.0 . 1)
     (apply.gloc.of |compile-clause`3306*| "./boot/compile.scm" . 718872))
   (push)
   (extend . 1)
   (iloc.1 . 3)
   (if.true (ret.iloc 0 . 0))
   (push.const . call)
   (iloc.0 . 0)
   (push.cons)
   (ret.subr.gloc.of list "./boot/compile.scm" . 719900))
 (set.gloc.of compile-expression-and)
 (ret.const.unspec))
((call
   (subr.gloc.of make-core-hashtable 0)
   (push)
   (extend . 1)
   (push.iloc.0 . 0)
   (push.const . begin)
   (push.gloc.of compile-expression-begin)
   (subr.gloc.of core-hashtable-set! 3 "./boot/compile.scm" . 723973)
   (push.iloc.0 . 0)
   (push.const . quote)
   (push.gloc.of compile-expression-quote)
   (subr.gloc.of core-hashtable-set! 3 "./boot/compile.scm" . 724997)
   (push.iloc.0 . 0)
   (push.const . define)
   (push.gloc.of compile-expression-define)
   (subr.gloc.of core-hashtable-set! 3 "./boot/compile.scm" . 726021)
   (push.iloc.0 . 0)
   (push.const . set!)
   (push.gloc.of compile-expression-set!)
   (subr.gloc.of core-hashtable-set! 3 "./boot/compile.scm" . 727045)
   (push.iloc.0 . 0)
   (push.const . lambda)
   (push.gloc.of compile-expression-lambda)
   (subr.gloc.of core-hashtable-set! 3 "./boot/compile.scm" . 728069)
   (push.iloc.0 . 0)
   (push.const . let)
   (push.gloc.of compile-expression-let)
   (subr.gloc.of core-hashtable-set! 3 "./boot/compile.scm" . 729093)
   (push.iloc.0 . 0)
   (push.const . letrec*)
   (push.gloc.of compile-expression-letrec*)
   (subr.gloc.of core-hashtable-set! 3 "./boot/compile.scm" . 730117)
   (push.iloc.0 . 0)
   (push.const . if)
   (push.gloc.of compile-expression-if)
   (subr.gloc.of core-hashtable-set! 3 "./boot/compile.scm" . 731141)
   (push.iloc.0 . 0)
   (push.const . or)
   (push.gloc.of compile-expression-or)
   (subr.gloc.of core-hashtable-set! 3 "./boot/compile.scm" . 732165)
   (push.iloc.0 . 0)
   (push.const . and)
   (push.gloc.of compile-expression-and)
   (subr.gloc.of core-hashtable-set! 3 "./boot/compile.scm" . 733189)
   (push.iloc.0 . 0)
   (push.const . #t)
   (ret.subr.gloc.of core-hashtable-copy "./boot/compile.scm" . 734213))
 (set.gloc.of ht-dispatch-expression)
 (ret.const.unspec))
((close
   (1 0 . reverse-append)
   (touch.gloc.of |loop`3345*|)
   (push.iloc.0 . 0)
   (push.const)
   (apply.gloc.of |loop`3345*| "./boot/compile.scm" . 742411))
 (set.gloc.of |reverse-append`3340*|)
 (close
   (2 0 . loop)
   (iloc.0 . 0)
   (if.null? (ret.iloc 0 . 1))
   (touch.gloc.of |loop`3345*|)
   (push.cdr.iloc (0 . 0) "./boot/compile.scm" . 744472)
   (push.car.iloc (0 . 0) "./boot/compile.scm" . 744490)
   (push.iloc.0 . 1)
   (push.subr.gloc.of append 2 "./boot/compile.scm" . 744482)
   (apply.gloc.of |loop`3345*| "./boot/compile.scm" . 744466))
 (set.gloc.of |loop`3345*|)
 (close
   (4 0 . compile-expression-seq)
   (extend.enclose+
     (2 0 . loop)
     (iloc.0 . 0)
     (if.null?
       (touch.gloc.of |reverse-append`3340*|)
       (push.iloc.0 . 1)
       (apply.gloc.of |reverse-append`3340*| "./boot/compile.scm" . 749594))
     (push.cdr.iloc (0 . 0) "./boot/compile.scm" . 756758)
     (call
       (touch.gloc.of compile-expression)
       (push.car.iloc (0 . 0) "./boot/compile.scm" . 752664)
       (push.iloc 2 . 1)
       (call
         (iloc 2 . 2)
         (if.true.ret)
         (cdr.iloc (0 . 0) "./boot/compile.scm" . 754731)
         (ret.pair? "./boot/compile.scm" . 754724))
       (push)
       (call
         (iloc 2 . 3)
         (if.false.ret)
         (cdr.iloc (0 . 0) "./boot/compile.scm" . 755753)
         (ret.null? "./boot/compile.scm" . 755746))
       (push)
       (apply.gloc.of compile-expression "./boot/compile.scm" . 751639))
     (push)
     (iloc.0 . 1)
     (push.cons)
     (apply.iloc+ (1 . 0) "./boot/compile.scm" . 756752))
   (push.iloc.1 . 0)
   (push.const)
   (apply.iloc+ (0 . 0) "./boot/compile.scm" . 749575))
 (set.gloc.of compile-expression-seq)
 (ret.const.unspec))
((close
   (4 0 . compile-expression)
   (iloc.0 . 0)
   (if.pair?
     (push.gloc.of ht-dispatch-expression)
     (push.car.iloc (0 . 0) "./boot/compile.scm" . 764990)
     (push.const . #f)
     (push.subr.gloc.of core-hashtable-ref 3 "./boot/compile.scm" . 764947)
     (extend . 1)
     (iloc.0 . 0)
     (if.true
       (push.iloc.1 . 0)
       (push.iloc.1 . 1)
       (push.iloc.1 . 2)
       (push.iloc.1 . 3)
       (apply.iloc (0 . 0) "./boot/compile.scm" . 765989))
     (call
       (touch.gloc.of top-level-subr)
       (push.car.iloc (1 . 0) "./boot/compile.scm" . 767011)
       (apply.gloc.of top-level-subr "./boot/compile.scm" . 766995))
     (if.true
       (touch.gloc.of compile-subr-expression)
       (push.iloc.1 . 0)
       (push.iloc.1 . 1)
       (push.iloc.1 . 2)
       (push.iloc.1 . 3)
       (apply.gloc.of compile-subr-expression "./boot/compile.scm" . 768019))
     (call
       (subr.gloc.of backtrace 0 "./boot/compile.scm" . 772132)
       (if.true
         (touch.gloc.of compile-touch)
         (push.car.iloc (1 . 0) "./boot/compile.scm" . 772159)
         (push.iloc.1 . 1)
         (apply.gloc.of compile-touch "./boot/compile.scm" . 772144))
       (ret.const))
     (push)
     (call
       (touch.gloc.of compile-argument-each)
       (push.cdr.iloc (1 . 0) "./boot/compile.scm" . 771126)
       (push.iloc.1 . 1)
       (apply.gloc.of compile-argument-each "./boot/compile.scm" . 771103))
     (push)
     (call
       (touch.gloc.of compile-call)
       (push.car.iloc (1 . 0) "./boot/compile.scm" . 770093)
       (push.cdr.iloc (1 . 0) "./boot/compile.scm" . 770112)
       (push.subr.gloc.of length 1 "./boot/compile.scm" . 770104)
       (call
         (touch.gloc.of make-application-comment)
         (push.iloc.1 . 0)
         (apply.gloc.of make-application-comment "./boot/compile.scm" . 770124))
       (push)
       (push.iloc.1 . 1)
       (apply.gloc.of compile-call "./boot/compile.scm" . 770079))
     (push)
     (push.subr.gloc.of
       |.append|
       2
       (|.append|
         (compile-argument-each (cdr |form`3357*|) |cte`3357*|)
         (compile-call
           (car |form`3357*|)
           (length (cdr |form`3357*|))
           (make-application-comment |form`3357*|)
           |cte`3357*|)))
     (push.subr.gloc.of |.append| 2 "./boot/compile.scm" . 773147)
     (extend . 1)
     (iloc 2 . 3)
     (if.true (ret.iloc 0 . 0))
     (push.const . call)
     (iloc.0 . 0)
     (push.cons)
     (ret.subr.gloc.of list "./boot/compile.scm" . 774181))
   (iloc.0 . 3)
   (if.true
     (push.iloc.0 . 0)
     (const . |.&UNDEF|)
     (if.eq?
       (push.const . ret.const.undef)
       (push.subr.gloc.of list 1 "./boot/compile.scm" . 778269)
       (ret.subr.gloc.of list "./boot/compile.scm" . 778263))
     (push.iloc.0 . 0)
     (subr.gloc.of unspecified? 1 "./boot/compile.scm" . 779287)
     (if.true
       (push.const . ret.const.unspec)
       (push.subr.gloc.of list 1 "./boot/compile.scm" . 780317)
       (ret.subr.gloc.of list "./boot/compile.scm" . 780311))
     (iloc.0 . 0)
     (if.symbol?
       (call
         (touch.gloc.of iloc?)
         (push.iloc.0 . 0)
         (push.iloc.0 . 1)
         (apply.gloc.of iloc? "./boot/compile.scm" . 782363))
       (if.true
         (push.const . ret.iloc)
         (call
           (touch.gloc.of make-iloc-operand)
           (push.iloc.0 . 0)
           (push.iloc.0 . 1)
           (apply.gloc.of make-iloc-operand "./boot/compile.scm" . 783401))
         (push.cons)
         (ret.subr.gloc.of |.list| "./boot/compile.scm" . 782359))
       (push.const . ret.gloc.of)
       (push.iloc.0 . 0)
       (push.subr.gloc.of |.list| 2 (|.list| 'ret.gloc.of |form`3357*|))
       (ret.subr.gloc.of |.list| "./boot/compile.scm" . 782359))
     (push.const . ret.const)
     (iloc.0 . 0)
     (push.cons)
     (ret.subr.gloc.of |.list| "./boot/compile.scm" . 785430))
   (iloc.0 . 2)
   (if.true.ret.const)
   (push.iloc.0 . 0)
   (const . |.&UNDEF|)
   (if.eq?
     (push.const . const.undef)
     (push.subr.gloc.of list 1 "./boot/compile.scm" . 789533)
     (ret.subr.gloc.of list "./boot/compile.scm" . 789527))
   (push.iloc.0 . 0)
   (subr.gloc.of unspecified? 1 "./boot/compile.scm" . 790551)
   (if.true
     (push.const . const.unspec)
     (push.subr.gloc.of list 1 "./boot/compile.scm" . 791581)
     (ret.subr.gloc.of list "./boot/compile.scm" . 791575))
   (iloc.0 . 0)
   (if.symbol?
     (call
       (touch.gloc.of iloc?)
       (push.iloc.0 . 0)
       (push.iloc.0 . 1)
       (apply.gloc.of iloc? "./boot/compile.scm" . 793627))
     (if.true
       (call
         (touch.gloc.of make-iloc-operand)
         (push.iloc.0 . 0)
         (push.iloc.0 . 1)
         (apply.gloc.of make-iloc-operand "./boot/compile.scm" . 794662))
       (push)
       (extend . 1)
       (push.car.iloc (0 . 0) "./boot/compile.scm" . 795683)
       (extend . 1)
       (push.iloc.0 . 0)
       (const . 0)
       (if.eq?
         (push.const . iloc.0)
         (cdr.iloc (1 . 0) "./boot/compile.scm" . 796721)
         (push.cons)
         (ret.subr.gloc.of |.list| "./boot/compile.scm" . 796703))
       (push.iloc.0 . 0)
       (const . 1)
       (if.eq?
         (push.const . iloc.1)
         (cdr.iloc (1 . 0) "./boot/compile.scm" . 797745)
         (push.cons)
         (ret.subr.gloc.of |.list| "./boot/compile.scm" . 797727))
       (push.const . iloc)
       (iloc.1 . 0)
       (push.cons)
       (ret.subr.gloc.of |.list| "./boot/compile.scm" . 798751))
     (push.const . gloc.of)
     (push.iloc.0 . 0)
     (push.subr.gloc.of |.list| 2 (|.list| 'gloc.of |form`3357*|))
     (ret.subr.gloc.of |.list| "./boot/compile.scm" . 793623))
   (push.const . const)
   (iloc.0 . 0)
   (push.cons)
   (ret.subr.gloc.of |.list| "./boot/compile.scm" . 800790))
 (set.gloc.of compile-expression)
 (ret.const.unspec))
((close
   (1 0 . compile-coreform)
   (push.const . #f)
   (subr.gloc.of make-core-hashtable 0)
   (push)
   (extend . 2)
   (push.close
     (0 0)
     (call
       (touch.gloc.of ht-local-closures)
       (apply.gloc.of ht-local-closures "./boot/compile.scm" . 806919))
     (set.iloc (1 . 0) "./boot/compile.scm" . 806919)
     (touch.gloc.of ht-local-closures)
     (push.iloc.1 . 1)
     (apply.gloc.of ht-local-closures "./boot/compile.scm" . 806919))
   (push.close
     (0 0)
     (touch.gloc.of compile-expression)
     (push.iloc 2 . 0)
     (push.const)
     (push.const . #f)
     (push.const . #t)
     (apply.gloc.of compile-expression "./boot/compile.scm" . 806919))
   (push.close
     (0 0)
     (touch.gloc.of ht-local-closures)
     (push.iloc.1 . 0)
     (apply.gloc.of ht-local-closures "./boot/compile.scm" . 806919))
   (apply.gloc.of |.dynamic-wind| "./boot/compile.scm" . 806919))
 (set.gloc.of compile-coreform)
 (ret.const.unspec))

;
((close
   (3 0 . dynamic-wind)
   (call (apply.iloc (0 . 0) "./boot/dynamic-wind.scm" . 10245))
   (call
     (touch.gloc.of current-dynamic-wind-record)
     (push.iloc.0 . 0)
     (iloc.0 . 2)
     (push.cons)
     (call
       (touch.gloc.of current-dynamic-wind-record)
       (apply.gloc.of current-dynamic-wind-record "./boot/dynamic-wind.scm" . 11318))
     (push.cons)
     (apply.gloc.of current-dynamic-wind-record "./boot/dynamic-wind.scm" . 11269))
   (push.iloc.0 . 1)
   (push.close
     (0 1)
     (call
       (touch.gloc.of current-dynamic-wind-record)
       (call
         (touch.gloc.of current-dynamic-wind-record)
         (apply.gloc.of current-dynamic-wind-record "./boot/dynamic-wind.scm" . 15405))
       (push)
       (push.subr.gloc.of cdr 1 "./boot/dynamic-wind.scm" . 15400)
       (apply.gloc.of current-dynamic-wind-record "./boot/dynamic-wind.scm" . 15371))
     (call (apply.iloc (1 . 2) "./boot/dynamic-wind.scm" . 16395))
     (push.gloc.of values)
     (push.iloc.0 . 0)
     (apply.gloc.of apply "./boot/dynamic-wind.scm" . 17419))
   (apply.gloc.of call-with-values "./boot/dynamic-wind.scm" . 12293))
 (set.gloc.of dynamic-wind)
 (ret.const.unspec))
((close
   (2 0 . common-tail)
   (push.iloc.0 . 0)
   (push.subr.gloc.of length 1 "./boot/dynamic-wind.scm" . 24595)
   (push.iloc.0 . 1)
   (push.subr.gloc.of length 1 "./boot/dynamic-wind.scm" . 24611)
   (extend . 2)
   (touch.gloc.of |.L962`3396*|)
   (call
     (iloc.0 . 0)
     (>.iloc (0 . 1) "./boot/dynamic-wind.scm" . 25623)
     (if.true
       (push.iloc.1 . 0)
       (push.iloc.0 . 0)
       (push.iloc.0 . 1)
       (push.subr.gloc.of - 2 "./boot/dynamic-wind.scm" . 25646)
       (ret.subr.gloc.of list-tail "./boot/dynamic-wind.scm" . 25633))
     (ret.iloc 1 . 0))
   (push)
   (call
     (iloc.0 . 1)
     (>.iloc (0 . 0) "./boot/dynamic-wind.scm" . 26647)
     (if.true
       (push.iloc.1 . 1)
       (push.iloc.0 . 1)
       (push.iloc.0 . 0)
       (push.subr.gloc.of - 2 "./boot/dynamic-wind.scm" . 26670)
       (ret.subr.gloc.of list-tail "./boot/dynamic-wind.scm" . 26657))
     (ret.iloc 1 . 1))
   (push)
   (apply.gloc.of |.L962`3396*| "./boot/dynamic-wind.scm" . 27664))
 (set.gloc.of |common-tail`3389*|)
 (close
   (2 0 . |.L962|)
   (push.iloc.0 . 0)
   (iloc.0 . 1)
   (if.eq? (ret.iloc 0 . 0))
   (touch.gloc.of |.L962`3396*|)
   (push.cdr.iloc (0 . 0) "./boot/dynamic-wind.scm" . 25660)
   (push.cdr.iloc (0 . 1) "./boot/dynamic-wind.scm" . 26684)
   (apply.gloc.of |.L962`3396*| "./boot/dynamic-wind.scm" . 25660))
 (set.gloc.of |.L962`3396*|)
 (close
   (3 0 . perform-dynamic-wind)
   (call
     (call
       (touch.gloc.of |common-tail`3389*|)
       (push.iloc.0 . 0)
       (call
         (touch.gloc.of current-dynamic-wind-record)
         (apply.gloc.of current-dynamic-wind-record "./boot/dynamic-wind.scm" . 29730))
       (push)
       (apply.gloc.of |common-tail`3389*| "./boot/dynamic-wind.scm" . 29713))
     (push)
     (extend . 1)
     (call
       (extend.enclose+
         (1 0 . loop)
         (push.iloc.0 . 0)
         (iloc 2 . 0)
         (if.eq? (ret.const.unspec))
         (call
           (touch.gloc.of current-dynamic-wind-record)
           (push.cdr.iloc (0 . 0) "./boot/dynamic-wind.scm" . 32813)
           (apply.gloc.of current-dynamic-wind-record "./boot/dynamic-wind.scm" . 32784))
         (call (push.iloc.0 . 0) (subr.gloc.of cdar 1 "./boot/dynamic-wind.scm" . 33809) (apply))
         (push.cdr.iloc (0 . 0) "./boot/dynamic-wind.scm" . 34838)
         (apply.iloc+ (1 . 0) "./boot/dynamic-wind.scm" . 34832))
       (call
         (touch.gloc.of current-dynamic-wind-record)
         (apply.gloc.of current-dynamic-wind-record "./boot/dynamic-wind.scm" . 30743))
       (push)
       (apply.iloc+ (0 . 0) "./boot/dynamic-wind.scm" . 31753))
     (extend.enclose
       (1 0 . loop)
       (push.iloc.0 . 0)
       (iloc 2 . 0)
       (if.eq? (ret.const.unspec))
       (call
         (push.cdr.iloc (0 . 0) "./boot/dynamic-wind.scm" . 37910)
         (apply.iloc (1 . 0) "./boot/dynamic-wind.scm" . 37904))
       (call (push.iloc.0 . 0) (subr.gloc.of caar 1 "./boot/dynamic-wind.scm" . 38929) (apply))
       (touch.gloc.of current-dynamic-wind-record)
       (push.iloc.0 . 0)
       (apply.gloc.of current-dynamic-wind-record "./boot/dynamic-wind.scm" . 39952))
     (push.iloc 2 . 0)
     (apply.iloc (0 . 0) "./boot/dynamic-wind.scm" . 36873))
   (push.iloc.0 . 1)
   (push.iloc.0 . 2)
   (apply.gloc.of apply "./boot/dynamic-wind.scm" . 40965))
 (set.gloc.of perform-dynamic-wind)
 (ret.const.unspec))

;
((call (push.const . #f) (apply.gloc.of make-parameter "./boot/exception.scm" . 4130))
 (set.gloc.of parent-exception-handler)
 (ret.const.unspec))
((close
   (1 0 . raise)
   (call
     (call
       (touch.gloc.of current-exception-handler)
       (apply.gloc.of current-exception-handler "./boot/exception.scm" . 8204))
     (push)
     (extend . 1)
     (iloc.0 . 0)
     (if.true
       (call (push.iloc.1 . 0) (apply.iloc (0 . 0) "./boot/exception.scm" . 10257))
       (call
         (call
           (touch.gloc.of parent-exception-handler)
           (apply.gloc.of parent-exception-handler "./boot/exception.scm" . 11288))
         (push)
         (extend . 1)
         (iloc.0 . 0)
         (if.true
           (call
             (call (apply.gloc.of make-non-continuable-violation "./boot/exception.scm" . 13358))
             (push)
             (call
               (push.const . raise)
               (apply.gloc.of make-who-condition "./boot/exception.scm" . 14382))
             (push)
             (call
               (push.const . "returned from non-continuable exception")
               (apply.gloc.of make-message-condition "./boot/exception.scm" . 15406))
             (push)
             (call
               (push.iloc 2 . 0)
               (push.subr.gloc.of list 1 "./boot/exception.scm" . 16456)
               (apply.gloc.of make-irritants-condition "./boot/exception.scm" . 16430))
             (push)
             (apply.gloc.of condition "./boot/exception.scm" . 13347))
           (push)
           (apply.iloc (0 . 0) "./boot/exception.scm" . 13341))
         (ret.const.unspec))
       (push.const . "error in raise: returned from non-continuable exception~%~%irritants:~%~a")
       (call
         (touch.gloc.of describe-condition)
         (push.const . #f)
         (push.iloc.1 . 0)
         (apply.gloc.of describe-condition "./boot/exception.scm" . 17515))
       (push)
       (apply.gloc.of scheme-error "./boot/exception.scm" . 17425))
     (ret.const.unspec))
   (push.const . "error in raise: unhandled exception has occurred~%~%irritants:~%~a")
   (call
     (touch.gloc.of describe-condition)
     (push.const . #f)
     (push.iloc.0 . 0)
     (apply.gloc.of describe-condition "./boot/exception.scm" . 18520))
   (push)
   (apply.gloc.of scheme-error "./boot/exception.scm" . 18437))
 (set.gloc.of raise)
 (ret.const.unspec))
((close
   (1 0 . raise-continuable)
   (call
     (touch.gloc.of current-exception-handler)
     (apply.gloc.of current-exception-handler "./boot/exception.scm" . 22540))
   (push)
   (extend . 1)
   (iloc.0 . 0)
   (if.true (push.iloc.1 . 0) (apply.iloc (0 . 0) "./boot/exception.scm" . 23582))
   (push.const . "error in raise-continuable: unhandled exception has occurred~%~%irritants:~%~a")
   (call
     (touch.gloc.of describe-condition)
     (push.const . #f)
     (push.iloc.1 . 0)
     (apply.gloc.of describe-condition "./boot/exception.scm" . 25707))
   (push)
   (apply.gloc.of scheme-error "./boot/exception.scm" . 25612))
 (set.gloc.of raise-continuable)
 (ret.const.unspec))
((close
   (2 0 . with-exception-handler)
   (call
     (touch.gloc.of current-exception-handler)
     (apply.gloc.of current-exception-handler "./boot/exception.scm" . 29715))
   (push)
   (extend . 1)
   (push.const . #f)
   (push.const . #f)
   (push.close
     (1 0 . tmp2)
     (push.const . #f)
     (extend . 1)
     (push.close
       (0 0)
       (call
         (touch.gloc.of current-exception-handler)
         (apply.gloc.of current-exception-handler "./boot/exception.scm" . 35857))
       (set.iloc (1 . 0) "./boot/exception.scm" . 35857)
       (touch.gloc.of current-exception-handler)
       (push.iloc 3 . 0)
       (apply.gloc.of current-exception-handler "./boot/exception.scm" . 35857))
     (push.close (0 0) (push.iloc 2 . 0) (apply.iloc (4 . 0) "./boot/exception.scm" . 35857))
     (push.close
       (0 0)
       (touch.gloc.of current-exception-handler)
       (push.iloc.1 . 0)
       (apply.gloc.of current-exception-handler "./boot/exception.scm" . 35857))
     (apply.gloc.of |.dynamic-wind| "./boot/exception.scm" . 35857))
   (extend . 3)
   (push.close
     (0 0)
     (call
       (touch.gloc.of parent-exception-handler)
       (apply.gloc.of parent-exception-handler "./boot/exception.scm" . 36873))
     (set.iloc (1 . 0) "./boot/exception.scm" . 36873)
     (call
       (touch.gloc.of current-exception-handler)
       (apply.gloc.of current-exception-handler "./boot/exception.scm" . 36873))
     (set.iloc (1 . 1) "./boot/exception.scm" . 36873)
     (call
       (touch.gloc.of parent-exception-handler)
       (push.iloc 2 . 0)
       (apply.gloc.of parent-exception-handler "./boot/exception.scm" . 36873))
     (touch.gloc.of current-exception-handler)
     (push.iloc.1 . 2)
     (apply.gloc.of current-exception-handler "./boot/exception.scm" . 36873))
   (push.close (0 0) (apply.iloc (3 . 1) "./boot/exception.scm" . 36873))
   (push.close
     (0 0)
     (call
       (touch.gloc.of parent-exception-handler)
       (push.iloc.1 . 0)
       (apply.gloc.of parent-exception-handler "./boot/exception.scm" . 36873))
     (touch.gloc.of current-exception-handler)
     (push.iloc.1 . 1)
     (apply.gloc.of current-exception-handler "./boot/exception.scm" . 36873))
   (apply.gloc.of |.dynamic-wind| "./boot/exception.scm" . 36873))
 (set.gloc.of with-exception-handler)
 (ret.const.unspec))
((close
   (2 1 . assertion-violation)
   (call
     (iloc.0 . 0)
     (if.false.ret.const . #t)
     (push.iloc.0 . 0)
     (subr.gloc.of string? 1 "./boot/exception.scm" . 40983)
     (if.true.ret)
     (iloc.0 . 0)
     (if.symbol?.ret.const . #t)
     (push.iloc.0 . 0)
     (apply.gloc.of identifier? "./boot/exception.scm" . 41011))
   (if.true
     (push.iloc.0 . 1)
     (subr.gloc.of string? 1 "./boot/exception.scm" . 41997)
     (if.true
       (call
         (push.gloc.of condition)
         (call
           (push.gloc.of values)
           (call (apply.gloc.of make-assertion-violation "./boot/exception.scm" . 46115))
           (push)
           (call
             (iloc.0 . 0)
             (if.false.ret)
             (push.iloc.0 . 0)
             (apply.gloc.of make-who-condition "./boot/exception.scm" . 47148))
           (push)
           (call
             (push.iloc.0 . 1)
             (apply.gloc.of make-message-condition "./boot/exception.scm" . 48163))
           (push)
           (call
             (push.iloc.0 . 2)
             (apply.gloc.of make-irritants-condition "./boot/exception.scm" . 49187))
           (push)
           (push.subr.gloc.of list 4 "./boot/exception.scm" . 46109)
           (apply.gloc.of filter "./boot/exception.scm" . 45077))
         (push)
         (apply.gloc.of apply "./boot/exception.scm" . 44046))
       (push)
       (apply.gloc.of raise "./boot/exception.scm" . 43021))
     (push.const . assertion-violation)
     (call
       (touch.gloc.of wrong-type-argument-message)
       (push.const . "string")
       (push.iloc.0 . 1)
       (push.const . 2)
       (apply.gloc.of wrong-type-argument-message "./boot/exception.scm" . 50231))
     (push)
     (apply.gloc.of assertion-violation "./boot/exception.scm" . 50189))
   (push.const . assertion-violation)
   (call
     (touch.gloc.of wrong-type-argument-message)
     (push.const . "string, symbol, or #f")
     (push.iloc.0 . 0)
     (push.const . 1)
     (apply.gloc.of wrong-type-argument-message "./boot/exception.scm" . 51251))
   (push)
   (apply.gloc.of assertion-violation "./boot/exception.scm" . 51209))
 (set.gloc.of assertion-violation)
 (ret.const.unspec))
((close
   (1 1 . undefined-violation)
   (call
     (push.gloc.of condition)
     (call
       (push.gloc.of values)
       (call (apply.gloc.of make-undefined-violation "./boot/exception.scm" . 58395))
       (push)
       (call
         (iloc.0 . 0)
         (if.false.ret)
         (push.iloc.0 . 0)
         (apply.gloc.of make-who-condition "./boot/exception.scm" . 59428))
       (push)
       (call
         (iloc.0 . 1)
         (if.not.pair?.ret.const . #f)
         (push.car.iloc (0 . 1) "./boot/exception.scm" . 60488)
         (apply.gloc.of make-message-condition "./boot/exception.scm" . 60464))
       (push)
       (push.subr.gloc.of list 3 "./boot/exception.scm" . 58389)
       (apply.gloc.of filter "./boot/exception.scm" . 57357))
     (push)
     (apply.gloc.of apply "./boot/exception.scm" . 56326))
   (push)
   (apply.gloc.of raise "./boot/exception.scm" . 55301))
 (set.gloc.of undefined-violation)
 (ret.const.unspec))
((close
   (1 1 . lexical-violation)
   (call
     (push.gloc.of condition)
     (call
       (push.gloc.of values)
       (call (apply.gloc.of make-lexical-violation "./boot/exception.scm" . 67611))
       (push)
       (call
         (iloc.0 . 0)
         (if.false.ret)
         (push.iloc.0 . 0)
         (apply.gloc.of make-who-condition "./boot/exception.scm" . 68644))
       (push)
       (call
         (iloc.0 . 1)
         (if.not.pair?.ret.const . #f)
         (push.car.iloc (0 . 1) "./boot/exception.scm" . 69704)
         (apply.gloc.of make-message-condition "./boot/exception.scm" . 69680))
       (push)
       (push.subr.gloc.of list 3 "./boot/exception.scm" . 67605)
       (apply.gloc.of filter "./boot/exception.scm" . 66573))
     (push)
     (apply.gloc.of apply "./boot/exception.scm" . 65542))
   (push)
   (apply.gloc.of raise "./boot/exception.scm" . 64517))
 (set.gloc.of lexical-violation)
 (ret.const.unspec))
((close
   (3 1 . syntax-violation)
   (call
     (iloc.0 . 0)
     (if.false.ret.const . #t)
     (push.iloc.0 . 0)
     (subr.gloc.of string? 1 "./boot/exception.scm" . 73751)
     (if.true.ret)
     (iloc.0 . 0)
     (if.symbol?.ret.const . #t)
     (push.iloc.0 . 0)
     (apply.gloc.of identifier? "./boot/exception.scm" . 73779))
   (if.true
     (push.iloc.0 . 1)
     (subr.gloc.of string? 1 "./boot/exception.scm" . 74765)
     (if.true
       (call
         (push.gloc.of condition)
         (call
           (push.gloc.of values)
           (call
             (push.iloc.0 . 2)
             (call
               (iloc.0 . 3)
               (if.not.pair?.ret.const . #f)
               (push.iloc.0 . 3)
               (ret.subr.gloc.of car "./boot/exception.scm" . 78932))
             (push)
             (apply.gloc.of make-syntax-violation "./boot/exception.scm" . 78883))
           (push)
           (call
             (iloc.0 . 0)
             (if.true
               (push.iloc.0 . 0)
               (apply.gloc.of make-who-condition "./boot/exception.scm" . 80935))
             (call
               (call
                 (call
                   (touch.gloc.of wrapped-syntax-object?)
                   (push.iloc.0 . 2)
                   (apply.gloc.of wrapped-syntax-object? "./boot/exception.scm" . 81981))
                 (if.true
                   (touch.gloc.of unwrap-syntax)
                   (push.iloc.0 . 2)
                   (apply.gloc.of unwrap-syntax "./boot/exception.scm" . 82011))
                 (ret.iloc 0 . 2))
               (push)
               (extend . 1)
               (call (push.iloc.0 . 0) (apply.gloc.of identifier? "./boot/exception.scm" . 82999))
               (if.true
                 (touch.gloc.of original-id)
                 (call
                   (touch.gloc.of syntax-object-expr)
                   (push.iloc.0 . 0)
                   (apply.gloc.of syntax-object-expr "./boot/exception.scm" . 83030))
                 (push)
                 (apply.gloc.of original-id "./boot/exception.scm" . 83017))
               (iloc.0 . 0)
               (if.not.pair?.ret.const . #f)
               (call
                 (push.car.iloc (0 . 0) "./boot/exception.scm" . 84053)
                 (apply.gloc.of identifier? "./boot/exception.scm" . 84040))
               (if.false.ret)
               (touch.gloc.of original-id)
               (call
                 (touch.gloc.of syntax-object-expr)
                 (push.car.iloc (0 . 0) "./boot/exception.scm" . 84098)
                 (apply.gloc.of syntax-object-expr "./boot/exception.scm" . 84078))
               (push)
               (apply.gloc.of original-id "./boot/exception.scm" . 84065))
             (push)
             (extend . 1)
             (iloc.0 . 0)
             (if.false.ret)
             (push.iloc.0 . 0)
             (apply.gloc.of make-who-condition (make-who-condition |.L983`3469*|)))
           (push)
           (call
             (push.iloc.0 . 1)
             (apply.gloc.of make-message-condition "./boot/exception.scm" . 88099))
           (push)
           (push.subr.gloc.of
             list
             3
             (list
               (make-syntax-violation
                 |form`3465*|
                 (and (pair? |subform`3465*|) (car |subform`3465*|)))
               (if |who`3465*|
                   (make-who-condition |who`3465*|)
                   (let ((|.L983`3469*|
                           (let ((|obj`3467*|
                                   (if (wrapped-syntax-object? |form`3465*|)
                                       (unwrap-syntax |form`3465*|)
                                       |form`3465*|)))
                             (if (identifier? |obj`3467*|)
                                 (original-id (syntax-object-expr |obj`3467*|))
                                 (and (pair? |obj`3467*|)
                                      (identifier? (car |obj`3467*|))
                                      (original-id (syntax-object-expr (car |obj`3467*|))))))))
                     (and |.L983`3469*| (make-who-condition |.L983`3469*|))))
               (make-message-condition |message`3465*|)))
           (apply.gloc.of
             filter
             (filter
               values
               (list
                 (make-syntax-violation
                   |form`3465*|
                   (and (pair? |subform`3465*|) (car |subform`3465*|)))
                 (if |who`3465*|
                     (make-who-condition |who`3465*|)
                     (let ((|.L983`3469*|
                             (let ((|obj`3467*|
                                     (if (wrapped-syntax-object? |form`3465*|)
                                         (unwrap-syntax |form`3465*|)
                                         |form`3465*|)))
                               (if (identifier? |obj`3467*|)
                                   (original-id (syntax-object-expr |obj`3467*|))
                                   (and (pair? |obj`3467*|)
                                        (identifier? (car |obj`3467*|))
                                        (original-id (syntax-object-expr (car |obj`3467*|))))))))
                       (and |.L983`3469*| (make-who-condition |.L983`3469*|))))
                 (make-message-condition |message`3465*|)))))
         (push)
         (apply.gloc.of
           apply
           (apply
             condition
             (filter
               values
               (list
                 (make-syntax-violation
                   |form`3465*|
                   (and (pair? |subform`3465*|) (car |subform`3465*|)))
                 (if |who`3465*|
                     (make-who-condition |who`3465*|)
                     (let ((|.L983`3469*|
                             (let ((|obj`3467*|
                                     (if (wrapped-syntax-object? |form`3465*|)
                                         (unwrap-syntax |form`3465*|)
                                         |form`3465*|)))
                               (if (identifier? |obj`3467*|)
                                   (original-id (syntax-object-expr |obj`3467*|))
                                   (and (pair? |obj`3467*|)
                                        (identifier? (car |obj`3467*|))
                                        (original-id (syntax-object-expr (car |obj`3467*|))))))))
                       (and |.L983`3469*| (make-who-condition |.L983`3469*|))))
                 (make-message-condition |message`3465*|))))))
       (push)
       (apply.gloc.of
         raise
         (raise
           (apply
             condition
             (filter
               values
               (list
                 (make-syntax-violation
                   |form`3465*|
                   (and (pair? |subform`3465*|) (car |subform`3465*|)))
                 (if |who`3465*|
                     (make-who-condition |who`3465*|)
                     (let ((|.L983`3469*|
                             (let ((|obj`3467*|
                                     (if (wrapped-syntax-object? |form`3465*|)
                                         (unwrap-syntax |form`3465*|)
                                         |form`3465*|)))
                               (if (identifier? |obj`3467*|)
                                   (original-id (syntax-object-expr |obj`3467*|))
                                   (and (pair? |obj`3467*|)
                                        (identifier? (car |obj`3467*|))
                                        (original-id (syntax-object-expr (car |obj`3467*|))))))))
                       (and |.L983`3469*| (make-who-condition |.L983`3469*|))))
                 (make-message-condition |message`3465*|)))))))
     (push.const . syntax-violation)
     (call
       (touch.gloc.of wrong-type-argument-message)
       (push.const . "string")
       (push.iloc.0 . 1)
       (push.const . 2)
       (apply.gloc.of wrong-type-argument-message "./boot/exception.scm" . 89140))
     (push)
     (apply.gloc.of assertion-violation "./boot/exception.scm" . 89101))
   (push.const . syntax-violation)
   (call
     (touch.gloc.of wrong-type-argument-message)
     (push.const . "string, symbol, or #f")
     (push.iloc.0 . 0)
     (push.const . 1)
     (apply.gloc.of wrong-type-argument-message "./boot/exception.scm" . 90160))
   (push)
   (apply.gloc.of assertion-violation "./boot/exception.scm" . 90121))
 (set.gloc.of syntax-violation)
 (ret.const.unspec))
((close
   (2 1 . error)
   (call
     (iloc.0 . 0)
     (if.false.ret.const . #t)
     (push.iloc.0 . 0)
     (subr.gloc.of string? 1 "./boot/exception.scm" . 94231)
     (if.true.ret)
     (iloc.0 . 0)
     (if.symbol?.ret.const . #t)
     (push.iloc.0 . 0)
     (apply.gloc.of identifier? "./boot/exception.scm" . 94259))
   (if.true
     (push.iloc.0 . 1)
     (subr.gloc.of string? 1 "./boot/exception.scm" . 95245)
     (if.true
       (call
         (push.gloc.of condition)
         (call
           (push.gloc.of values)
           (call (apply.gloc.of make-error "./boot/exception.scm" . 99363))
           (push)
           (call
             (iloc.0 . 0)
             (if.false.ret)
             (push.iloc.0 . 0)
             (apply.gloc.of make-who-condition "./boot/exception.scm" . 100396))
           (push)
           (call
             (push.iloc.0 . 1)
             (apply.gloc.of make-message-condition "./boot/exception.scm" . 101411))
           (push)
           (call
             (push.iloc.0 . 2)
             (apply.gloc.of make-irritants-condition "./boot/exception.scm" . 102435))
           (push)
           (push.subr.gloc.of list 4 "./boot/exception.scm" . 99357)
           (apply.gloc.of filter "./boot/exception.scm" . 98325))
         (push)
         (apply.gloc.of apply "./boot/exception.scm" . 97294))
       (push)
       (apply.gloc.of raise "./boot/exception.scm" . 96269))
     (push.const . error)
     (call
       (touch.gloc.of wrong-type-argument-message)
       (push.const . "string")
       (push.iloc.0 . 1)
       (push.const . 2)
       (apply.gloc.of wrong-type-argument-message "./boot/exception.scm" . 103465))
     (push)
     (apply.gloc.of assertion-violation "./boot/exception.scm" . 103437))
   (push.const . error)
   (call
     (touch.gloc.of wrong-type-argument-message)
     (push.const . "string, symbol, or #f")
     (push.iloc.0 . 0)
     (push.const . 1)
     (apply.gloc.of wrong-type-argument-message "./boot/exception.scm" . 104485))
   (push)
   (apply.gloc.of assertion-violation "./boot/exception.scm" . 104457))
 (set.gloc.of error)
 (ret.const.unspec))
((close
   (2 1 . implementation-restriction-violation)
   (call
     (push.gloc.of condition)
     (call
       (push.gloc.of values)
       (call
         (apply.gloc.of make-implementation-restriction-violation "./boot/exception.scm" . 111643))
       (push)
       (call
         (iloc.0 . 0)
         (if.false.ret)
         (push.iloc.0 . 0)
         (apply.gloc.of make-who-condition "./boot/exception.scm" . 112676))
       (push)
       (call
         (push.iloc.0 . 1)
         (apply.gloc.of make-message-condition "./boot/exception.scm" . 113691))
       (push)
       (call
         (iloc.0 . 2)
         (if.not.pair?.ret.const . #f)
         (push.iloc.0 . 2)
         (apply.gloc.of make-irritants-condition "./boot/exception.scm" . 114738))
       (push)
       (push.subr.gloc.of list 4 "./boot/exception.scm" . 111637)
       (apply.gloc.of filter "./boot/exception.scm" . 110605))
     (push)
     (apply.gloc.of apply "./boot/exception.scm" . 109574))
   (push)
   (apply.gloc.of raise "./boot/exception.scm" . 108549))
 (set.gloc.of implementation-restriction-violation)
 (ret.const.unspec))
((close
   (3 1 . undefined/syntax-violation)
   (call
     (push.gloc.of condition)
     (call
       (push.gloc.of values)
       (call
         (push.iloc.0 . 2)
         (call
           (iloc.0 . 3)
           (if.not.pair?.ret.const . #f)
           (push.iloc.0 . 3)
           (ret.subr.gloc.of car "./boot/exception.scm" . 121932))
         (push)
         (apply.gloc.of make-syntax-violation "./boot/exception.scm" . 121883))
       (push)
       (call (apply.gloc.of make-undefined-violation "./boot/exception.scm" . 122907))
       (push)
       (call
         (iloc.0 . 0)
         (if.false.ret)
         (push.iloc.0 . 0)
         (apply.gloc.of make-who-condition "./boot/exception.scm" . 123940))
       (push)
       (call
         (push.iloc.0 . 1)
         (apply.gloc.of make-message-condition "./boot/exception.scm" . 124955))
       (push)
       (push.subr.gloc.of list 4 "./boot/exception.scm" . 121877)
       (apply.gloc.of filter "./boot/exception.scm" . 120845))
     (push)
     (apply.gloc.of apply "./boot/exception.scm" . 119814))
   (push)
   (apply.gloc.of raise "./boot/exception.scm" . 118789))
 (set.gloc.of undefined/syntax-violation)
 (ret.const.unspec))
((close
   (3 1 . assertion/syntax-violation)
   (call
     (push.gloc.of condition)
     (call
       (push.gloc.of values)
       (call
         (push.iloc.0 . 2)
         (call
           (iloc.0 . 3)
           (if.not.pair?.ret.const . #f)
           (push.iloc.0 . 3)
           (ret.subr.gloc.of car "./boot/exception.scm" . 132172))
         (push)
         (apply.gloc.of make-syntax-violation "./boot/exception.scm" . 132123))
       (push)
       (call (apply.gloc.of make-assertion-violation "./boot/exception.scm" . 133147))
       (push)
       (call
         (iloc.0 . 0)
         (if.false.ret)
         (push.iloc.0 . 0)
         (apply.gloc.of make-who-condition "./boot/exception.scm" . 134180))
       (push)
       (call
         (push.iloc.0 . 1)
         (apply.gloc.of make-message-condition "./boot/exception.scm" . 135195))
       (push)
       (push.subr.gloc.of list 4 "./boot/exception.scm" . 132117)
       (apply.gloc.of filter "./boot/exception.scm" . 131085))
     (push)
     (apply.gloc.of apply "./boot/exception.scm" . 130054))
   (push)
   (apply.gloc.of raise "./boot/exception.scm" . 129029))
 (set.gloc.of assertion/syntax-violation)
 (ret.const.unspec))
((close
   (0 1 . scheme-error)
   (push.const . #t)
   (push.const . "~!")
   (subr.gloc.of format 2 "./boot/exception.scm" . 152581)
   (subr.gloc.of current-error-port 0)
   (push)
   (extend . 1)
   (push.iloc.0 . 0)
   (push.const . "~&~%")
   (subr.gloc.of format 2 "./boot/exception.scm" . 154631)
   (call
     (push.gloc.of format)
     (push.iloc.0 . 0)
     (push.iloc.1 . 0)
     (apply.gloc.of apply "./boot/exception.scm" . 155655))
   (push.iloc.0 . 0)
   (push.const . "~%")
   (subr.gloc.of format 2 "./boot/exception.scm" . 156679)
   (subr.gloc.of display-backtrace 0 "./boot/exception.scm" . 157703)
   (push.iloc.0 . 0)
   (push.const . "~%[exit]~%~!")
   (subr.gloc.of format 2 "./boot/exception.scm" . 158727)
   (push.const . #f)
   (ret.subr.gloc.of exit "./boot/exception.scm" . 159751))
 (set.gloc.of scheme-error)
 (ret.const.unspec))
((close
   (3 1 . raise-i/o-filename-error)
   (call
     (push.gloc.of condition)
     (call
       (push.gloc.of values)
       (call
         (push.iloc.0 . 2)
         (apply.gloc.of make-i/o-filename-error "./boot/exception.scm" . 166939))
       (push)
       (call
         (iloc.0 . 0)
         (if.false.ret)
         (push.iloc.0 . 0)
         (apply.gloc.of make-who-condition "./boot/exception.scm" . 167972))
       (push)
       (call
         (push.iloc.0 . 1)
         (apply.gloc.of make-message-condition "./boot/exception.scm" . 168987))
       (push)
       (call
         (iloc.0 . 3)
         (if.not.pair?.ret.const . #f)
         (push.iloc.0 . 3)
         (apply.gloc.of make-irritants-condition "./boot/exception.scm" . 170034))
       (push)
       (push.subr.gloc.of list 4 "./boot/exception.scm" . 166933)
       (apply.gloc.of filter "./boot/exception.scm" . 165901))
     (push)
     (apply.gloc.of apply "./boot/exception.scm" . 164870))
   (push)
   (apply.gloc.of raise "./boot/exception.scm" . 163845))
 (set.gloc.of raise-i/o-filename-error)
 (ret.const.unspec))
((close
   (2 1 . raise-i/o-error)
   (call
     (push.gloc.of condition)
     (call
       (push.gloc.of values)
       (call (apply.gloc.of make-i/o-error "./boot/exception.scm" . 177179))
       (push)
       (call
         (iloc.0 . 0)
         (if.false.ret)
         (push.iloc.0 . 0)
         (apply.gloc.of make-who-condition "./boot/exception.scm" . 178212))
       (push)
       (call
         (push.iloc.0 . 1)
         (apply.gloc.of make-message-condition "./boot/exception.scm" . 179227))
       (push)
       (call
         (iloc.0 . 2)
         (if.not.pair?.ret.const . #f)
         (push.iloc.0 . 2)
         (apply.gloc.of make-irritants-condition "./boot/exception.scm" . 180274))
       (push)
       (push.subr.gloc.of list 4 "./boot/exception.scm" . 177173)
       (apply.gloc.of filter "./boot/exception.scm" . 176141))
     (push)
     (apply.gloc.of apply "./boot/exception.scm" . 175110))
   (push)
   (apply.gloc.of raise "./boot/exception.scm" . 174085))
 (set.gloc.of raise-i/o-error)
 (ret.const.unspec))
((close
   (4 1 . raise-misc-i/o-error-with-port)
   (call
     (push.gloc.of condition)
     (call
       (push.gloc.of values)
       (call
         (push.iloc.0 . 0)
         (push.iloc.0 . 4)
         (apply.gloc.of apply "./boot/exception.scm" . 188443))
       (push)
       (call
         (iloc.0 . 1)
         (if.false.ret)
         (push.iloc.0 . 1)
         (apply.gloc.of make-who-condition "./boot/exception.scm" . 189476))
       (push)
       (call
         (push.iloc.0 . 2)
         (apply.gloc.of make-message-condition "./boot/exception.scm" . 190491))
       (push)
       (call
         (iloc.0 . 3)
         (if.false.ret)
         (push.iloc.0 . 3)
         (apply.gloc.of make-i/o-port-error "./boot/exception.scm" . 191525))
       (push)
       (call
         (push.iloc.0 . 3)
         (push.iloc.0 . 4)
         (push.subr.gloc.of cons* 2 "./boot/exception.scm" . 192565)
         (apply.gloc.of make-irritants-condition "./boot/exception.scm" . 192539))
       (push)
       (push.subr.gloc.of list 5 "./boot/exception.scm" . 188437)
       (apply.gloc.of filter "./boot/exception.scm" . 187405))
     (push)
     (apply.gloc.of apply "./boot/exception.scm" . 186374))
   (push)
   (apply.gloc.of raise "./boot/exception.scm" . 185349))
 (set.gloc.of raise-misc-i/o-error-with-port)
 (ret.const.unspec))
((close
   (3 1 . raise-misc-i/o-error)
   (call
     (push.gloc.of condition)
     (call
       (push.gloc.of values)
       (call
         (push.iloc.0 . 0)
         (push.iloc.0 . 3)
         (apply.gloc.of apply "./boot/exception.scm" . 199707))
       (push)
       (call
         (iloc.0 . 1)
         (if.false.ret)
         (push.iloc.0 . 1)
         (apply.gloc.of make-who-condition "./boot/exception.scm" . 200740))
       (push)
       (call
         (push.iloc.0 . 2)
         (apply.gloc.of make-message-condition "./boot/exception.scm" . 201755))
       (push)
       (call
         (iloc.0 . 3)
         (if.not.pair?.ret.const . #f)
         (push.iloc.0 . 3)
         (apply.gloc.of make-irritants-condition "./boot/exception.scm" . 203808))
       (push)
       (push.subr.gloc.of list 4 "./boot/exception.scm" . 199701)
       (apply.gloc.of filter "./boot/exception.scm" . 198669))
     (push)
     (apply.gloc.of apply "./boot/exception.scm" . 197638))
   (push)
   (apply.gloc.of raise "./boot/exception.scm" . 196613))
 (set.gloc.of raise-misc-i/o-error)
 (ret.const.unspec))
((close
   (3 0 . raise-i/o-read-error)
   (touch.gloc.of raise-misc-i/o-error-with-port)
   (push.gloc.of make-i/o-read-error)
   (push.iloc.0 . 0)
   (push.iloc.0 . 1)
   (push.iloc.0 . 2)
   (apply.gloc.of raise-misc-i/o-error-with-port "./boot/exception.scm" . 207877))
 (set.gloc.of raise-i/o-read-error)
 (ret.const.unspec))
((close
   (3 0 . raise-i/o-write-error)
   (touch.gloc.of raise-misc-i/o-error-with-port)
   (push.gloc.of make-i/o-write-error)
   (push.iloc.0 . 0)
   (push.iloc.0 . 1)
   (push.iloc.0 . 2)
   (apply.gloc.of raise-misc-i/o-error-with-port "./boot/exception.scm" . 211973))
 (set.gloc.of raise-i/o-write-error)
 (ret.const.unspec))
((close
   (3 0 . raise-i/o-file-protection-error)
   (touch.gloc.of raise-misc-i/o-error)
   (push.gloc.of make-i/o-file-protection-error)
   (push.iloc.0 . 0)
   (push.iloc.0 . 1)
   (push.iloc.0 . 2)
   (apply.gloc.of raise-misc-i/o-error "./boot/exception.scm" . 216069))
 (set.gloc.of raise-i/o-file-protection-error)
 (ret.const.unspec))
((close
   (3 0 . raise-i/o-file-is-read-only-error)
   (touch.gloc.of raise-misc-i/o-error-with-port)
   (push.gloc.of make-i/o-file-is-read-only-error)
   (push.iloc.0 . 0)
   (push.iloc.0 . 1)
   (push.iloc.0 . 2)
   (apply.gloc.of raise-misc-i/o-error-with-port "./boot/exception.scm" . 220165))
 (set.gloc.of raise-i/o-file-is-read-only-error)
 (ret.const.unspec))
((close
   (3 0 . raise-i/o-file-already-exists-error)
   (touch.gloc.of raise-misc-i/o-error)
   (push.gloc.of make-i/o-file-already-exists-error)
   (push.iloc.0 . 0)
   (push.iloc.0 . 1)
   (push.iloc.0 . 2)
   (apply.gloc.of raise-misc-i/o-error "./boot/exception.scm" . 224261))
 (set.gloc.of raise-i/o-file-already-exists-error)
 (ret.const.unspec))
((close
   (3 0 . raise-i/o-file-does-not-exist-error)
   (touch.gloc.of raise-misc-i/o-error)
   (push.gloc.of make-i/o-file-does-not-exist-error)
   (push.iloc.0 . 0)
   (push.iloc.0 . 1)
   (push.iloc.0 . 2)
   (apply.gloc.of raise-misc-i/o-error "./boot/exception.scm" . 228357))
 (set.gloc.of raise-i/o-file-does-not-exist-error)
 (ret.const.unspec))
((close
   (4 0 . raise-i/o-invalid-position-error)
   (touch.gloc.of raise-misc-i/o-error-with-port)
   (push.gloc.of make-i/o-invalid-position-error)
   (push.iloc.0 . 0)
   (push.iloc.0 . 1)
   (push.iloc.0 . 2)
   (push.iloc.0 . 3)
   (apply.gloc.of raise-misc-i/o-error-with-port "./boot/exception.scm" . 232453))
 (set.gloc.of raise-i/o-invalid-position-error)
 (ret.const.unspec))
((close
   (3 0 . raise-i/o-decoding-error)
   (touch.gloc.of raise-misc-i/o-error)
   (push.gloc.of make-i/o-decoding-error)
   (push.iloc.0 . 0)
   (push.iloc.0 . 1)
   (push.iloc.0 . 2)
   (apply.gloc.of raise-misc-i/o-error "./boot/exception.scm" . 236549))
 (set.gloc.of raise-i/o-decoding-error)
 (ret.const.unspec))
((close
   (4 0 . raise-i/o-encoding-error)
   (touch.gloc.of raise-misc-i/o-error)
   (push.gloc.of make-i/o-encoding-error)
   (push.iloc.0 . 0)
   (push.iloc.0 . 1)
   (push.iloc.0 . 2)
   (push.iloc.0 . 3)
   (apply.gloc.of raise-misc-i/o-error "./boot/exception.scm" . 240645))
 (set.gloc.of raise-i/o-encoding-error)
 (ret.const.unspec))

;
((subr.gloc.of make-core-hashtable 0 "./boot/record.scm" . 4132)
 (set.gloc.of nongenerative-record-types)
 (ret.const.unspec))
((close
   (6 0 . make-rtd)
   (push.const . type:record-type-descriptor)
   (push.iloc.0 . 0)
   (push.iloc.0 . 1)
   (push.iloc.0 . 2)
   (push.iloc.0 . 3)
   (push.iloc.0 . 4)
   (push.iloc.0 . 5)
   (ret.subr.gloc.of tuple "./boot/record.scm" . 8197))
 (set.gloc.of make-rtd)
 (ret.const.unspec))
((close
   (1 0 . record-type-descriptor?)
   (push.iloc.0 . 0)
   (push.const . 0)
   (push.subr.gloc.of tuple-ref 2 "./boot/record.scm" . 12298)
   (const . type:record-type-descriptor)
   (ret.eq? "./boot/record.scm" . 12293))
 (set.gloc.of record-type-descriptor?)
 (ret.const.unspec))
((close
   (1 0 . rtd-name)
   (push.iloc.0 . 0)
   (push.const . 1)
   (ret.subr.gloc.of tuple-ref "./boot/record.scm" . 14375))
 (set.gloc.of rtd-name)
 (ret.const.unspec))
((close
   (1 0 . rtd-parent)
   (push.iloc.0 . 0)
   (push.const . 2)
   (ret.subr.gloc.of tuple-ref "./boot/record.scm" . 15399))
 (set.gloc.of rtd-parent)
 (ret.const.unspec))
((close
   (1 0 . rtd-uid)
   (push.iloc.0 . 0)
   (push.const . 3)
   (ret.subr.gloc.of tuple-ref "./boot/record.scm" . 16423))
 (set.gloc.of rtd-uid)
 (ret.const.unspec))
((close
   (1 0 . rtd-sealed?)
   (push.iloc.0 . 0)
   (push.const . 4)
   (ret.subr.gloc.of tuple-ref "./boot/record.scm" . 17447))
 (set.gloc.of rtd-sealed?)
 (ret.const.unspec))
((close
   (1 0 . rtd-opaque?)
   (push.iloc.0 . 0)
   (push.const . 5)
   (ret.subr.gloc.of tuple-ref "./boot/record.scm" . 18471))
 (set.gloc.of rtd-opaque?)
 (ret.const.unspec))
((close
   (1 0 . rtd-fields)
   (push.iloc.0 . 0)
   (push.const . 6)
   (ret.subr.gloc.of tuple-ref "./boot/record.scm" . 19495))
 (set.gloc.of rtd-fields)
 (ret.const.unspec))
((close
   (2 0 . rtd-ancestor?)
   (extend.enclose+
     (1 0 . loop)
     (push.iloc 2 . 0)
     (iloc.0 . 0)
     (if.eq?.ret.const . #t)
     (iloc.0 . 0)
     (if.false.ret)
     (call
       (touch.gloc.of rtd-parent)
       (push.iloc.0 . 0)
       (apply.gloc.of rtd-parent "./boot/record.scm" . 26646))
     (push)
     (apply.iloc+ (1 . 0) "./boot/record.scm" . 26640))
   (push.iloc.1 . 1)
   (apply.iloc+ (0 . 0) "./boot/record.scm" . 24583))
 (set.gloc.of rtd-ancestor?)
 (ret.const.unspec))
((close
   (2 0 . loop)
   (iloc.0 . 0)
   (if.true
     (touch.gloc.of |loop`3537*|)
     (call
       (touch.gloc.of rtd-parent)
       (push.iloc.0 . 0)
       (apply.gloc.of rtd-parent "./boot/record.scm" . 32788))
     (push)
     (push.iloc.0 . 1)
     (call
       (touch.gloc.of rtd-fields)
       (push.iloc.0 . 0)
       (apply.gloc.of rtd-fields "./boot/record.scm" . 33829))
     (push)
     (push.subr.gloc.of length 1 "./boot/record.scm" . 33821)
     (push.subr.gloc.of + 2 "./boot/record.scm" . 33812)
     (apply.gloc.of |loop`3537*| "./boot/record.scm" . 32782))
   (ret.iloc 0 . 1))
 (set.gloc.of |loop`3537*|)
 (close
   (1 0 . rtd-inherited-field-count)
   (touch.gloc.of |loop`3537*|)
   (call
     (touch.gloc.of rtd-parent)
     (push.iloc.0 . 0)
     (apply.gloc.of rtd-parent "./boot/record.scm" . 30741))
   (push)
   (push.const . 0)
   (apply.gloc.of |loop`3537*| "./boot/record.scm" . 31751))
 (set.gloc.of rtd-inherited-field-count)
 (ret.const.unspec))
((close
   (1 0 . rtd-total-field-count)
   (call
     (touch.gloc.of rtd-inherited-field-count)
     (push.iloc.0 . 0)
     (apply.gloc.of rtd-inherited-field-count "./boot/record.scm" . 39944))
   (push)
   (call
     (touch.gloc.of rtd-fields)
     (push.iloc.0 . 0)
     (apply.gloc.of rtd-fields "./boot/record.scm" . 39984))
   (push)
   (push.subr.gloc.of length 1 "./boot/record.scm" . 39976)
   (ret.subr.gloc.of + "./boot/record.scm" . 39941))
 (set.gloc.of rtd-total-field-count)
 (ret.const.unspec))
((close
   (1 0 . record-type-name)
   (call (push.iloc.0 . 0) (apply.gloc.of record-type-descriptor? "./boot/record.scm" . 44041))
   (if.false.call
     (push.const . record-type-name)
     (call
       (touch.gloc.of wrong-type-argument-message)
       (push.const . "record-type-descriptor")
       (push.iloc.0 . 0)
       (apply.gloc.of wrong-type-argument-message "./boot/record.scm" . 45104))
     (push)
     (apply.gloc.of assertion-violation "./boot/record.scm" . 45065))
   (touch.gloc.of rtd-name)
   (push.iloc.0 . 0)
   (apply.gloc.of rtd-name "./boot/record.scm" . 46085))
 (set.gloc.of record-type-name)
 (ret.const.unspec))
((close
   (1 0 . record-type-parent)
   (call (push.iloc.0 . 0) (apply.gloc.of record-type-descriptor? "./boot/record.scm" . 50185))
   (if.false.call
     (push.const . record-type-name)
     (call
       (touch.gloc.of wrong-type-argument-message)
       (push.const . "record-type-descriptor")
       (push.iloc.0 . 0)
       (apply.gloc.of wrong-type-argument-message "./boot/record.scm" . 51248))
     (push)
     (apply.gloc.of assertion-violation "./boot/record.scm" . 51209))
   (touch.gloc.of rtd-parent)
   (push.iloc.0 . 0)
   (apply.gloc.of rtd-parent "./boot/record.scm" . 52229))
 (set.gloc.of record-type-parent)
 (ret.const.unspec))
((close
   (1 0 . record-type-uid)
   (call (push.iloc.0 . 0) (apply.gloc.of record-type-descriptor? "./boot/record.scm" . 56329))
   (if.false.call
     (push.const . record-type-name)
     (call
       (touch.gloc.of wrong-type-argument-message)
       (push.const . "record-type-descriptor")
       (push.iloc.0 . 0)
       (apply.gloc.of wrong-type-argument-message "./boot/record.scm" . 57392))
     (push)
     (apply.gloc.of assertion-violation "./boot/record.scm" . 57353))
   (touch.gloc.of rtd-uid)
   (push.iloc.0 . 0)
   (apply.gloc.of rtd-uid "./boot/record.scm" . 58373))
 (set.gloc.of record-type-uid)
 (ret.const.unspec))
((close
   (1 0 . record-type-generative?)
   (call (push.iloc.0 . 0) (apply.gloc.of record-type-descriptor? "./boot/record.scm" . 62473))
   (if.false.call
     (push.const . record-type-name)
     (call
       (touch.gloc.of wrong-type-argument-message)
       (push.const . "record-type-descriptor")
       (push.iloc.0 . 0)
       (apply.gloc.of wrong-type-argument-message "./boot/record.scm" . 63536))
     (push)
     (apply.gloc.of assertion-violation "./boot/record.scm" . 63497))
   (call
     (touch.gloc.of rtd-uid)
     (push.iloc.0 . 0)
     (apply.gloc.of rtd-uid "./boot/record.scm" . 64522))
   (push)
   (ret.subr.gloc.of not "./boot/record.scm" . 64517))
 (set.gloc.of record-type-generative?)
 (ret.const.unspec))
((close
   (1 0 . record-type-sealed?)
   (call (push.iloc.0 . 0) (apply.gloc.of record-type-descriptor? "./boot/record.scm" . 68617))
   (if.false.call
     (push.const . record-type-name)
     (call
       (touch.gloc.of wrong-type-argument-message)
       (push.const . "record-type-descriptor")
       (push.iloc.0 . 0)
       (apply.gloc.of wrong-type-argument-message "./boot/record.scm" . 69680))
     (push)
     (apply.gloc.of assertion-violation "./boot/record.scm" . 69641))
   (touch.gloc.of rtd-sealed?)
   (push.iloc.0 . 0)
   (apply.gloc.of rtd-sealed? "./boot/record.scm" . 70661))
 (set.gloc.of record-type-sealed?)
 (ret.const.unspec))
((close
   (1 0 . record-type-opaque?)
   (call (push.iloc.0 . 0) (apply.gloc.of record-type-descriptor? "./boot/record.scm" . 74761))
   (if.false.call
     (push.const . record-type-name)
     (call
       (touch.gloc.of wrong-type-argument-message)
       (push.const . "record-type-descriptor")
       (push.iloc.0 . 0)
       (apply.gloc.of wrong-type-argument-message "./boot/record.scm" . 75824))
     (push)
     (apply.gloc.of assertion-violation "./boot/record.scm" . 75785))
   (touch.gloc.of rtd-opaque?)
   (push.iloc.0 . 0)
   (apply.gloc.of rtd-opaque? "./boot/record.scm" . 76805))
 (set.gloc.of record-type-opaque?)
 (ret.const.unspec))
((close
   (1 0 . record-type-field-names)
   (call (push.iloc.0 . 0) (apply.gloc.of record-type-descriptor? "./boot/record.scm" . 80905))
   (if.false.call
     (push.const . record-type-name)
     (call
       (touch.gloc.of wrong-type-argument-message)
       (push.const . "record-type-descriptor")
       (push.iloc.0 . 0)
       (apply.gloc.of wrong-type-argument-message "./boot/record.scm" . 81968))
     (push)
     (apply.gloc.of assertion-violation "./boot/record.scm" . 81929))
   (call
     (push.gloc.of cdr)
     (call
       (touch.gloc.of rtd-fields)
       (push.iloc.0 . 0)
       (apply.gloc.of rtd-fields "./boot/record.scm" . 82972))
     (push)
     (apply.gloc.of map "./boot/record.scm" . 82963))
   (push)
   (ret.subr.gloc.of list->vector "./boot/record.scm" . 82949))
 (set.gloc.of record-type-field-names)
 (ret.const.unspec))
((close
   (2 0 . record-field-mutable?)
   (call (push.iloc.0 . 0) (apply.gloc.of record-type-descriptor? "./boot/record.scm" . 87049))
   (if.false.call
     (push.const . record-type-name)
     (call
       (touch.gloc.of wrong-type-argument-message)
       (push.const . "record-type-descriptor")
       (push.iloc.0 . 0)
       (push.const . 1)
       (apply.gloc.of wrong-type-argument-message "./boot/record.scm" . 88112))
     (push)
     (push.iloc.0 . 0)
     (push.iloc.0 . 1)
     (push.subr.gloc.of list 2 "./boot/record.scm" . 88173)
     (apply.gloc.of assertion-violation "./boot/record.scm" . 88073))
   (call
     (touch.gloc.of rtd-fields)
     (push.iloc.0 . 0)
     (apply.gloc.of rtd-fields "./boot/record.scm" . 89108))
   (push)
   (push.iloc.0 . 1)
   (push.subr.gloc.of list-ref 2 "./boot/record.scm" . 89098)
   (ret.subr.gloc.of car "./boot/record.scm" . 89093))
 (set.gloc.of record-field-mutable?)
 (ret.const.unspec))
((close
   (6 0 . make-record-type-descriptor)
   (push.iloc.0 . 0)
   (subr.gloc.of symbol? 1 "./boot/record.scm" . 93193)
   (if.false.call
     (push.const . make-record-type-descriptor)
     (call
       (touch.gloc.of wrong-type-argument-message)
       (push.const . "symbol")
       (push.iloc.0 . 0)
       (push.const . 1)
       (apply.gloc.of wrong-type-argument-message "./boot/record.scm" . 95262))
     (push)
     (push.iloc.0 . 0)
     (push.iloc.0 . 1)
     (push.iloc.0 . 2)
     (push.iloc.0 . 3)
     (push.iloc.0 . 4)
     (push.iloc.0 . 5)
     (push.subr.gloc.of list 6 "./boot/record.scm" . 96286)
     (apply.gloc.of assertion-violation "./boot/record.scm" . 94217))
   (push.iloc.0 . 5)
   (subr.gloc.of vector? 1 "./boot/record.scm" . 97289)
   (if.false.call
     (push.const . make-record-type-descriptor)
     (call
       (touch.gloc.of wrong-type-argument-message)
       (push.const . "vector")
       (push.iloc.0 . 5)
       (push.const . 6)
       (apply.gloc.of wrong-type-argument-message "./boot/record.scm" . 99358))
     (push)
     (push.iloc.0 . 0)
     (push.iloc.0 . 1)
     (push.iloc.0 . 2)
     (push.iloc.0 . 3)
     (push.iloc.0 . 4)
     (push.iloc.0 . 5)
     (push.subr.gloc.of list 6 "./boot/record.scm" . 100382)
     (apply.gloc.of assertion-violation "./boot/record.scm" . 98313))
   (call
     (iloc.0 . 1)
     (if.false.ret)
     (call (push.iloc.0 . 1) (apply.gloc.of record-type-descriptor? "./boot/record.scm" . 102414))
     (if.false.call
       (push.const . make-record-type-descriptor)
       (call
         (touch.gloc.of wrong-type-argument-message)
         (push.const . "record-type descriptor or #f")
         (push.iloc.0 . 1)
         (push.const . 2)
         (apply.gloc.of wrong-type-argument-message "./boot/record.scm" . 104483))
       (push)
       (push.iloc.0 . 0)
       (push.iloc.0 . 1)
       (push.iloc.0 . 2)
       (push.iloc.0 . 3)
       (push.iloc.0 . 4)
       (push.iloc.0 . 5)
       (push.subr.gloc.of list 6 "./boot/record.scm" . 105507)
       (apply.gloc.of assertion-violation "./boot/record.scm" . 103438))
     (if.false.ret)
     (call
       (touch.gloc.of rtd-sealed?)
       (push.iloc.0 . 1)
       (apply.gloc.of rtd-sealed? "./boot/record.scm" . 106511))
     (if.false.ret)
     (push.const . make-record-type-descriptor)
     (push.const . "attempt to extend a sealed record-type")
     (push.iloc.0 . 1)
     (apply.gloc.of assertion-violation "./boot/record.scm" . 107535))
   (call
     (iloc.0 . 4)
     (if.true.ret)
     (iloc.0 . 1)
     (if.false.ret)
     (touch.gloc.of rtd-opaque?)
     (push.iloc.0 . 1)
     (apply.gloc.of rtd-opaque? "./boot/record.scm" . 110621))
   (push)
   (call
     (push.close
       (1 0)
       (call
         (iloc.0 . 0)
         (if.not.pair?.ret.const . #f)
         (cdr.iloc (0 . 0) "./boot/record.scm" . 112666)
         (if.not.pair?.ret.const . #f)
         (cddr.iloc (0 . 0) "./boot/record.scm" . 112666)
         (ret.null? "./boot/record.scm" . 112666))
       (push)
       (extend . 1)
       (call
         (iloc.0 . 0)
         (if.false.ret)
         (push.car.iloc (1 . 0) "./boot/record.scm" . 112666)
         (const . mutable)
         (ret.eq? "./boot/record.scm" . 112666))
       (if.true
         (push.const . #t)
         (cadr.iloc (1 . 0) "./boot/record.scm" . 112666)
         (ret.cons "./boot/record.scm" . 112666))
       (call
         (iloc.0 . 0)
         (if.false.ret)
         (push.car.iloc (1 . 0) "./boot/record.scm" . 112666)
         (const . immutable)
         (ret.eq? "./boot/record.scm" . 112666))
       (if.true
         (push.const . #f)
         (cadr.iloc (1 . 0) "./boot/record.scm" . 112666)
         (ret.cons "./boot/record.scm" . 112666))
       (push.const . make-record-type-descriptor)
       (push.const . "malformed field specifiers")
       (push.iloc 2 . 5)
       (apply.gloc.of assertion-violation "./boot/record.scm" . 112666))
     (push.iloc.0 . 5)
     (push.subr.gloc.of vector->list 1 "./boot/record.scm" . 119832)
     (apply.gloc.of
       map
       (map (lambda (|field`3561*|)
              (let ((|.L1063`3563`3566*|
                      (and (pair? |field`3561*|)
                           (pair? (cdr |field`3561*|))
                           (null? (cddr |field`3561*|)))))
                (if (and |.L1063`3563`3566*| (eq? (car |field`3561*|) 'mutable))
                    (cons #t (cadr |field`3561*|))
                    (if (and |.L1063`3563`3566*| (eq? (car |field`3561*|) 'immutable))
                        (cons #f (cadr |field`3561*|))
                        (assertion-violation
                          'make-record-type-descriptor
                          "malformed field specifiers"
                          |fields`3559*|)))))
            (vector->list |fields`3559*|))))
   (push)
   (extend . 2)
   (iloc.1 . 2)
   (if.true
     (push.gloc.of nongenerative-record-types)
     (push.iloc.1 . 2)
     (push.const . #f)
     (push.subr.gloc.of core-hashtable-ref 3 "./boot/record.scm" . 122894)
     (extend . 1)
     (iloc.0 . 0)
     (if.true
       (call
         (push.iloc 2 . 2)
         (call
           (touch.gloc.of rtd-uid)
           (push.iloc.0 . 0)
           (apply.gloc.of rtd-uid "./boot/record.scm" . 124966))
         (push)
         (subr.gloc.of eqv? 2 "./boot/record.scm" . 124956)
         (if.false.ret)
         (push.iloc 2 . 1)
         (call
           (touch.gloc.of rtd-parent)
           (push.iloc.0 . 0)
           (apply.gloc.of rtd-parent "./boot/record.scm" . 125993))
         (push)
         (subr.gloc.of eqv? 2 "./boot/record.scm" . 125980)
         (if.false.ret)
         (push.iloc.1 . 1)
         (call
           (touch.gloc.of rtd-fields)
           (push.iloc.0 . 0)
           (apply.gloc.of rtd-fields "./boot/record.scm" . 127019))
         (push)
         (ret.subr.gloc.of equal? "./boot/record.scm" . 127004))
       (if.true (ret.iloc 0 . 0))
       (push.const . make-record-type-descriptor)
       (push.const . "mismatched subsequent call for nongenerative record-type")
       (push.iloc 2 . 0)
       (push.iloc 2 . 1)
       (push.iloc 2 . 2)
       (push.iloc 2 . 3)
       (push.iloc.1 . 0)
       (push.iloc.1 . 1)
       (push.subr.gloc.of list 6 "./boot/record.scm" . 131116)
       (apply.gloc.of assertion-violation "./boot/record.scm" . 129047))
     (subr.gloc.of on-primordial-thread? 0 "./boot/record.scm" . 133138)
     (if.false.call
       (push.const . thread)
       (push.const . "child thread attempt to create nongenerative record-type")
       (push.iloc 2 . 0)
       (push.iloc 2 . 1)
       (push.iloc 2 . 2)
       (push.iloc 2 . 3)
       (push.iloc.1 . 0)
       (push.iloc.1 . 1)
       (push.subr.gloc.of list 6 "./boot/record.scm" . 136231)
       (apply.gloc.of assertion-violation "./boot/record.scm" . 134162))
     (call
       (touch.gloc.of make-rtd)
       (push.iloc 2 . 0)
       (push.iloc 2 . 1)
       (push.iloc 2 . 2)
       (push.iloc 2 . 3)
       (push.iloc.1 . 0)
       (push.iloc.1 . 1)
       (apply.gloc.of make-rtd "./boot/record.scm" . 137241))
     (push)
     (extend . 1)
     (push.gloc.of nongenerative-record-types)
     (push.iloc 3 . 2)
     (push.iloc.0 . 0)
     (subr.gloc.of core-hashtable-set! 3 "./boot/record.scm" . 138256)
     (ret.iloc 0 . 0))
   (touch.gloc.of make-rtd)
   (push.iloc.1 . 0)
   (push.iloc.1 . 1)
   (push.const . #f)
   (push.iloc.1 . 3)
   (push.iloc.0 . 0)
   (push.iloc.0 . 1)
   (apply.gloc.of make-rtd "./boot/record.scm" . 121870))
 (set.gloc.of make-record-type-descriptor)
 (ret.const.unspec))
((close
   (4 0 . make-rcd)
   (push.const . type:record-constructor-descriptor)
   (push.iloc.0 . 0)
   (push.iloc.0 . 1)
   (push.iloc.0 . 2)
   (push.iloc.0 . 3)
   (ret.subr.gloc.of tuple "./boot/record.scm" . 142341))
 (set.gloc.of make-rcd)
 (ret.const.unspec))
((close
   (1 0 . record-constructor-descriptor?)
   (push.iloc.0 . 0)
   (push.const . 0)
   (push.subr.gloc.of tuple-ref 2 "./boot/record.scm" . 146442)
   (const . type:record-constructor-descriptor)
   (ret.eq? "./boot/record.scm" . 146437))
 (set.gloc.of record-constructor-descriptor?)
 (ret.const.unspec))
((close
   (1 0 . rcd-rtd)
   (push.iloc.0 . 0)
   (push.const . 1)
   (ret.subr.gloc.of tuple-ref "./boot/record.scm" . 148524))
 (set.gloc.of rcd-rtd)
 (ret.const.unspec))
((close
   (1 0 . rcd-protocol)
   (push.iloc.0 . 0)
   (push.const . 2)
   (ret.subr.gloc.of tuple-ref "./boot/record.scm" . 149548))
 (set.gloc.of rcd-protocol)
 (ret.const.unspec))
((close
   (1 0 . rcd-custom-protocol?)
   (push.iloc.0 . 0)
   (push.const . 3)
   (ret.subr.gloc.of tuple-ref "./boot/record.scm" . 150572))
 (set.gloc.of rcd-custom-protocol?)
 (ret.const.unspec))
((close
   (1 0 . rcd-parent)
   (push.iloc.0 . 0)
   (push.const . 4)
   (ret.subr.gloc.of tuple-ref "./boot/record.scm" . 151596))
 (set.gloc.of rcd-parent)
 (ret.const.unspec))
((close
   (1 0)
   (ret.close
     (0 1)
     (push.iloc.1 . 0)
     (push.iloc.0 . 0)
     (apply.gloc.of apply "./boot/record.scm" . 164879)))
 (set.gloc.of |.L1080|)
 (close
   (1 0 . default-protocol)
   (call
     (touch.gloc.of rtd-parent)
     (push.iloc.0 . 0)
     (apply.gloc.of rtd-parent "./boot/record.scm" . 155667))
   (push)
   (extend . 1)
   (iloc.0 . 0)
   (if.true
     (call
       (touch.gloc.of rtd-total-field-count)
       (push.iloc.0 . 0)
       (apply.gloc.of rtd-total-field-count "./boot/record.scm" . 157733))
     (push)
     (extend . 1)
     (ret.close
       (1 0)
       (ret.close
         (0 1)
         (push.close
           (0 0)
           (touch.gloc.of split-at)
           (push.iloc.1 . 0)
           (push.iloc 3 . 0)
           (apply.gloc.of split-at "./boot/record.scm" . 160839))
         (push.close
           (2 0)
           (call
             (push.iloc 2 . 0)
             (push.iloc.0 . 0)
             (apply.gloc.of apply "./boot/record.scm" . 161818))
           (push)
           (push.iloc.0 . 1)
           (apply.gloc.of apply "./boot/record.scm" . 161811))
         (apply.gloc.of
           |.call-with-values|
           (|.call-with-values|
             (lambda () (split-at |field-values`3602*| |parent-field-count`3598*|))
             (lambda (|parent-field-values`3604*| |this-field-values`3604*|)
               (apply (apply |p`3600*| |parent-field-values`3604*|) |this-field-values`3604*|)))))))
   (ret.gloc.of |.L1080|))
 (set.gloc.of default-protocol)
 (ret.const.unspec))
((close
   (3 0 . make-record-constructor-descriptor)
   (call (push.iloc.0 . 0) (apply.gloc.of record-type-descriptor? "./boot/record.scm" . 168969))
   (if.false.call
     (push.const . make-record-constructor-descriptor)
     (call
       (touch.gloc.of wrong-type-argument-message)
       (push.const . "record-type-descriptor")
       (push.iloc.0 . 0)
       (push.const . 1)
       (apply.gloc.of wrong-type-argument-message "./boot/record.scm" . 171038))
     (push)
     (push.iloc.0 . 0)
     (push.iloc.0 . 1)
     (push.iloc.0 . 2)
     (push.subr.gloc.of list 3 "./boot/record.scm" . 172062)
     (apply.gloc.of assertion-violation "./boot/record.scm" . 169993))
   (call
     (iloc.0 . 1)
     (if.false.ret)
     (call
       (touch.gloc.of record-constructor-descriptor?)
       (push.iloc.0 . 1)
       (apply.gloc.of record-constructor-descriptor? "./boot/record.scm" . 174094))
     (if.true.ret)
     (push.const . make-record-constructor-descriptor)
     (call
       (touch.gloc.of wrong-type-argument-message)
       (push.const . "record-constructor-descriptor or #f")
       (push.iloc.0 . 1)
       (push.const . 2)
       (apply.gloc.of wrong-type-argument-message "./boot/record.scm" . 176163))
     (push)
     (push.iloc.0 . 0)
     (push.iloc.0 . 1)
     (push.iloc.0 . 2)
     (push.subr.gloc.of list 3 "./boot/record.scm" . 177187)
     (apply.gloc.of assertion-violation "./boot/record.scm" . 175118))
   (call
     (iloc.0 . 2)
     (if.false.ret)
     (push.iloc.0 . 2)
     (subr.gloc.of procedure? 1 "./boot/record.scm" . 179214)
     (if.true.ret)
     (push.const . make-record-constructor-descriptor)
     (call
       (touch.gloc.of wrong-type-argument-message)
       (push.const . "procedure or #f")
       (push.iloc.0 . 2)
       (push.const . 3)
       (apply.gloc.of wrong-type-argument-message "./boot/record.scm" . 181283))
     (push)
     (push.iloc.0 . 0)
     (push.iloc.0 . 1)
     (push.iloc.0 . 2)
     (push.subr.gloc.of list 3 "./boot/record.scm" . 182307)
     (apply.gloc.of assertion-violation "./boot/record.scm" . 180238))
   (call
     (iloc.0 . 1)
     (if.false.ret)
     (call
       (touch.gloc.of rtd-parent)
       (push.iloc.0 . 0)
       (apply.gloc.of rtd-parent "./boot/record.scm" . 184334))
     (if.true.ret)
     (push.const . make-record-constructor-descriptor)
     (push.const . "mismatch between rtd and parent constructor descriptor")
     (push.iloc.0 . 0)
     (push.iloc.0 . 1)
     (push.iloc.0 . 2)
     (apply.gloc.of assertion-violation "./boot/record.scm" . 185358))
   (call
     (iloc.0 . 1)
     (if.false.ret)
     (call
       (touch.gloc.of rtd-parent)
       (push.iloc.0 . 0)
       (apply.gloc.of rtd-parent "./boot/record.scm" . 190474))
     (if.false.ret)
     (call
       (touch.gloc.of rcd-rtd)
       (push.iloc.0 . 1)
       (apply.gloc.of rcd-rtd "./boot/record.scm" . 191507))
     (push)
     (call
       (touch.gloc.of rtd-parent)
       (push.iloc.0 . 0)
       (apply.gloc.of rtd-parent "./boot/record.scm" . 191524))
     (if.eq?.ret.const . #t)
     (push.const . make-record-constructor-descriptor)
     (push.const . "mismatch between rtd and parent constructor descriptor")
     (push.iloc.0 . 0)
     (push.iloc.0 . 1)
     (push.iloc.0 . 2)
     (apply.gloc.of assertion-violation "./boot/record.scm" . 192526))
   (call
     (iloc.0 . 2)
     (if.false.ret)
     (call
       (touch.gloc.of rtd-parent)
       (push.iloc.0 . 0)
       (apply.gloc.of rtd-parent "./boot/record.scm" . 197642))
     (if.false.ret)
     (iloc.0 . 1)
     (if.true.ret)
     (push.const . make-record-constructor-descriptor)
     (push.const . "expected #f for protocol since no parent constructor descriptor is provided")
     (push.iloc.0 . 0)
     (push.iloc.0 . 1)
     (push.iloc.0 . 2)
     (apply.gloc.of assertion-violation "./boot/record.scm" . 199694))
   (call
     (iloc.0 . 1)
     (if.false.ret)
     (call
       (touch.gloc.of rcd-custom-protocol?)
       (push.iloc.0 . 1)
       (apply.gloc.of rcd-custom-protocol? "./boot/record.scm" . 204810))
     (if.false.ret)
     (iloc.0 . 2)
     (if.true.ret)
     (push.const . make-record-constructor-descriptor)
     (push.const
       .
       "expected procedure for protocol since parent constructor descriptor have custom one")
     (push.iloc.0 . 0)
     (push.iloc.0 . 1)
     (push.iloc.0 . 2)
     (apply.gloc.of assertion-violation "./boot/record.scm" . 206862))
   (touch.gloc.of make-rcd)
   (push.iloc.0 . 0)
   (call
     (iloc.0 . 2)
     (if.true.ret)
     (touch.gloc.of default-protocol)
     (push.iloc.0 . 0)
     (apply.gloc.of default-protocol "./boot/record.scm" . 213026))
   (push)
   (call (iloc.0 . 2) (if.false.ret) (ret.const . #t))
   (push)
   (call
     (iloc.0 . 1)
     (if.true.ret)
     (call
       (touch.gloc.of rtd-parent)
       (push.iloc.0 . 0)
       (apply.gloc.of rtd-parent "./boot/record.scm" . 215070))
     (push)
     (extend . 1)
     (iloc.0 . 0)
     (if.false.ret)
     (push.iloc.0 . 0)
     (push.const . #f)
     (push.const . #f)
     (apply.gloc.of make-record-constructor-descriptor "./boot/record.scm" . 217123))
   (push)
   (apply.gloc.of
     make-rcd
     (make-rcd
       |rtd`3610*|
       (or |protocol`3610*| (default-protocol |rtd`3610*|))
       (and |protocol`3610*| #t)
       (or |parent`3610*|
           (let ((|.L1083`3612*| (rtd-parent |rtd`3610*|)))
             (and |.L1083`3612*| (make-record-constructor-descriptor |.L1083`3612*| #f #f)))))))
 (set.gloc.of make-record-constructor-descriptor)
 (ret.const.unspec))
((close
   (1 0 . record?)
   (call
     (push.iloc.0 . 0)
     (push.const . 0)
     (push.subr.gloc.of tuple-ref 2 "./boot/record.scm" . 223267)
     (apply.gloc.of record-type-descriptor? "./boot/record.scm" . 223242))
   (if.false.ret)
   (call
     (push.iloc.0 . 0)
     (push.const . 0)
     (push.subr.gloc.of tuple-ref 2 "./boot/record.scm" . 224292)
     (apply.gloc.of record-type-opaque? "./boot/record.scm" . 224271))
   (push)
   (ret.subr.gloc.of not "./boot/record.scm" . 224266))
 (set.gloc.of record?)
 (ret.const.unspec))
((close
   (1 0 . record-rtd)
   (call (push.iloc.0 . 0) (apply.gloc.of record? "./boot/record.scm" . 228361))
   (if.true
     (push.iloc.0 . 0)
     (push.const . 0)
     (ret.subr.gloc.of tuple-ref "./boot/record.scm" . 229385))
   (push.const . record-rtd)
   (call
     (touch.gloc.of wrong-type-argument-message)
     (push.const . "non-opaque record")
     (push.iloc.0 . 0)
     (apply.gloc.of wrong-type-argument-message "./boot/record.scm" . 230442))
   (push)
   (apply.gloc.of assertion-violation "./boot/record.scm" . 230409))
 (set.gloc.of record-rtd)
 (ret.const.unspec))
((close
   (3 0 . make-nested-conser)
   (call
     (call
       (extend.enclose
         (1 0 . loop)
         (call
           (touch.gloc.of rcd-parent)
           (push.iloc.0 . 0)
           (apply.gloc.of rcd-parent "./boot/record.scm" . 236560))
         (push)
         (extend . 1)
         (iloc.0 . 0)
         (if.true
           (ret.close
             (0 1)
             (ret.close
               (0 1)
               (ret.close
                 (0 1)
                 (call
                   (call
                     (call (push.iloc 3 . 0) (apply.iloc (5 . 0) "./boot/record.scm" . 242730))
                     (push)
                     (push.iloc.0 . 0)
                     (push.iloc 2 . 0)
                     (push.subr.gloc.of append 2 "./boot/record.scm" . 243754)
                     (apply.gloc.of apply "./boot/record.scm" . 242723))
                   (push)
                   (call
                     (touch.gloc.of rcd-protocol)
                     (push.iloc 3 . 0)
                     (apply.gloc.of rcd-protocol "./boot/record.scm" . 241699))
                   (apply))
                 (push)
                 (push.iloc.1 . 0)
                 (apply.gloc.of apply "./boot/record.scm" . 241691)))))
         (ret.close
           (0 1)
           (ret.close
             (0 1)
             (push.iloc.0 . 0)
             (push.iloc.1 . 0)
             (push.subr.gloc.of append 2 "./boot/record.scm" . 248872)
             (extend . 1)
             (push.iloc.0 . 0)
             (subr.gloc.of length 1 "./boot/record.scm" . 249885)
             (=.iloc (6 . 2) "./boot/record.scm" . 249882)
             (if.true
               (push.gloc.of tuple)
               (push.iloc 6 . 1)
               (push.iloc.0 . 0)
               (apply.gloc.of apply "./boot/record.scm" . 250906))
             (push.const . "record constructor")
             (push.const . "wrong number of arguments")
             (push.iloc.0 . 0)
             (apply.gloc.of assertion-violation "./boot/record.scm" . 251930))))
       (push.iloc.1 . 0)
       (apply.iloc (0 . 0) "./boot/record.scm" . 236553))
     (apply))
   (push)
   (call
     (touch.gloc.of rcd-protocol)
     (push.iloc.0 . 0)
     (apply.gloc.of rcd-protocol "./boot/record.scm" . 234502))
   (apply))
 (set.gloc.of make-nested-conser)
 (ret.const.unspec))
((close
   (3 0 . make-simple-conser)
   (push.close
     (0 1)
     (push.iloc.0 . 0)
     (subr.gloc.of length 1 "./boot/record.scm" . 258063)
     (=.iloc (1 . 2) "./boot/record.scm" . 258060)
     (if.true
       (push.gloc.of tuple)
       (push.iloc.1 . 1)
       (push.iloc.0 . 0)
       (apply.gloc.of apply "./boot/record.scm" . 259084))
     (push.const . "record constructor")
     (push.const . "wrong number of arguments")
     (push.iloc.0 . 0)
     (apply.gloc.of assertion-violation "./boot/record.scm" . 260108))
   (call
     (touch.gloc.of rcd-protocol)
     (push.iloc.0 . 0)
     (apply.gloc.of rcd-protocol "./boot/record.scm" . 256006))
   (apply))
 (set.gloc.of make-simple-conser)
 (ret.const.unspec))
((close
   (2 0 . flat-field-offset)
   (call
     (touch.gloc.of rtd-inherited-field-count)
     (push.iloc.0 . 0)
     (apply.gloc.of rtd-inherited-field-count "./boot/record.scm" . 264200))
   (push)
   (push.iloc.0 . 1)
   (push.const . 1)
   (ret.subr.gloc.of + "./boot/record.scm" . 264197))
 (set.gloc.of flat-field-offset)
 (ret.const.unspec))
((close
   (2 0 . make-accessor)
   (ret.close
     (1 0)
     (push.iloc.1 . 0)
     (push.iloc.0 . 0)
     (push.const . 0)
     (subr.gloc.of tuple-ref 2 "./boot/record.scm" . 269335)
     (if.eq?
       (push.iloc.0 . 0)
       (push.iloc.1 . 1)
       (ret.subr.gloc.of tuple-ref "./boot/record.scm" . 269354))
     (call
       (touch.gloc.of rtd-ancestor?)
       (push.iloc.1 . 0)
       (push.iloc.0 . 0)
       (push.const . 0)
       (push.subr.gloc.of tuple-ref 2 "./boot/record.scm" . 270369)
       (apply.gloc.of rtd-ancestor? "./boot/record.scm" . 270350))
     (if.true
       (push.iloc.0 . 0)
       (push.iloc.1 . 1)
       (ret.subr.gloc.of tuple-ref "./boot/record.scm" . 270388))
     (push.const . "record accessor")
     (call
       (touch.gloc.of wrong-type-argument-message)
       (push.const . "record of type ~a")
       (call
         (touch.gloc.of rtd-name)
         (push.iloc.1 . 0)
         (apply.gloc.of rtd-name "./boot/record.scm" . 272494))
       (push)
       (push.subr.gloc.of format 2 "./boot/record.scm" . 272466)
       (push.iloc.0 . 0)
       (apply.gloc.of wrong-type-argument-message "./boot/record.scm" . 272437))
     (push)
     (apply.gloc.of assertion-violation "./boot/record.scm" . 272398)))
 (set.gloc.of make-accessor)
 (ret.const.unspec))
((close
   (2 0 . make-mutator)
   (ret.close
     (2 0)
     (push.iloc.1 . 0)
     (push.iloc.0 . 0)
     (push.const . 0)
     (subr.gloc.of tuple-ref 2 "./boot/record.scm" . 277527)
     (if.eq?
       (push.iloc.0 . 0)
       (push.iloc.1 . 1)
       (push.iloc.0 . 1)
       (ret.subr.gloc.of tuple-set! "./boot/record.scm" . 277546))
     (call
       (touch.gloc.of rtd-ancestor?)
       (push.iloc.1 . 0)
       (push.iloc.0 . 0)
       (push.const . 0)
       (push.subr.gloc.of tuple-ref 2 "./boot/record.scm" . 278561)
       (apply.gloc.of rtd-ancestor? "./boot/record.scm" . 278542))
     (if.true
       (push.iloc.0 . 0)
       (push.iloc.1 . 1)
       (push.iloc.0 . 1)
       (ret.subr.gloc.of tuple-set! "./boot/record.scm" . 278580))
     (push.const . "record mutator")
     (call
       (touch.gloc.of wrong-type-argument-message)
       (push.const . "record of type ~a")
       (call
         (touch.gloc.of rtd-name)
         (push.iloc.1 . 0)
         (apply.gloc.of rtd-name "./boot/record.scm" . 280685))
       (push)
       (push.subr.gloc.of format 2 "./boot/record.scm" . 280657)
       (push.iloc.0 . 0)
       (push.iloc.0 . 1)
       (push.subr.gloc.of list 2 "./boot/record.scm" . 280701)
       (apply.gloc.of wrong-type-argument-message "./boot/record.scm" . 280628))
     (push)
     (apply.gloc.of assertion-violation "./boot/record.scm" . 280590)))
 (set.gloc.of make-mutator)
 (ret.const.unspec))
((close
   (1 0 . make-predicate)
   (ret.close
     (1 0)
     (push.iloc.1 . 0)
     (push.iloc.0 . 0)
     (push.const . 0)
     (subr.gloc.of tuple-ref 2 "./boot/record.scm" . 285716)
     (if.eq?.ret.const . #t)
     (touch.gloc.of rtd-ancestor?)
     (push.iloc.1 . 0)
     (push.iloc.0 . 0)
     (push.const . 0)
     (push.subr.gloc.of tuple-ref 2 "./boot/record.scm" . 286750)
     (apply.gloc.of rtd-ancestor? "./boot/record.scm" . 286731)))
 (set.gloc.of make-predicate)
 (ret.const.unspec))
((close
   (1 0 . record-constructor)
   (call
     (touch.gloc.of record-constructor-descriptor?)
     (push.iloc.0 . 0)
     (apply.gloc.of record-constructor-descriptor? "./boot/record.scm" . 290825))
   (if.false.call
     (push.const . record-constructor)
     (call
       (touch.gloc.of wrong-type-argument-message)
       (push.const . "record-constructor-descriptor")
       (push.iloc.0 . 0)
       (apply.gloc.of wrong-type-argument-message "./boot/record.scm" . 291890))
     (push)
     (apply.gloc.of assertion-violation "./boot/record.scm" . 291849))
   (call
     (touch.gloc.of rcd-rtd)
     (push.iloc.0 . 0)
     (apply.gloc.of rcd-rtd "./boot/record.scm" . 292880))
   (push)
   (extend . 1)
   (call
     (touch.gloc.of rcd-parent)
     (push.iloc.1 . 0)
     (apply.gloc.of rcd-parent "./boot/record.scm" . 293899))
   (if.true
     (touch.gloc.of make-nested-conser)
     (push.iloc.1 . 0)
     (push.iloc.0 . 0)
     (call
       (touch.gloc.of rtd-total-field-count)
       (push.iloc.0 . 0)
       (apply.gloc.of rtd-total-field-count "./boot/record.scm" . 294952))
     (push)
     (apply.gloc.of make-nested-conser "./boot/record.scm" . 294923))
   (touch.gloc.of make-simple-conser)
   (push.iloc.1 . 0)
   (push.iloc.0 . 0)
   (call
     (touch.gloc.of rtd-fields)
     (push.iloc.0 . 0)
     (apply.gloc.of rtd-fields "./boot/record.scm" . 295984))
   (push)
   (push.subr.gloc.of length 1 "./boot/record.scm" . 295976)
   (apply.gloc.of make-simple-conser "./boot/record.scm" . 295947))
 (set.gloc.of record-constructor)
 (ret.const.unspec))
((close
   (1 0 . record-predicate)
   (call (push.iloc.0 . 0) (apply.gloc.of record-type-descriptor? "./boot/record.scm" . 300041))
   (if.false.call
     (push.const . record-predicate)
     (call
       (touch.gloc.of wrong-type-argument-message)
       (push.const . "record-type-descriptor")
       (push.iloc.0 . 0)
       (apply.gloc.of wrong-type-argument-message "./boot/record.scm" . 301104))
     (push)
     (apply.gloc.of assertion-violation "./boot/record.scm" . 301065))
   (touch.gloc.of make-predicate)
   (push.iloc.0 . 0)
   (apply.gloc.of make-predicate "./boot/record.scm" . 302085))
 (set.gloc.of record-predicate)
 (ret.const.unspec))
((close
   (2 0 . record-accessor)
   (call (push.iloc.0 . 0) (apply.gloc.of record-type-descriptor? "./boot/record.scm" . 306185))
   (if.false.call
     (push.const . record-accssor)
     (call
       (touch.gloc.of wrong-type-argument-message)
       (push.const . "record-type-descriptor")
       (push.iloc.0 . 0)
       (apply.gloc.of wrong-type-argument-message "./boot/record.scm" . 307246))
     (push)
     (push.iloc.0 . 0)
     (push.iloc.0 . 1)
     (push.subr.gloc.of list 2 "./boot/record.scm" . 307305)
     (apply.gloc.of assertion-violation "./boot/record.scm" . 307209))
   (push.const . -1)
   (push.iloc.0 . 1)
   (call
     (touch.gloc.of rtd-fields)
     (push.iloc.0 . 0)
     (apply.gloc.of rtd-fields "./boot/record.scm" . 308249))
   (push)
   (push.subr.gloc.of length 1 "./boot/record.scm" . 308241)
   (subr.gloc.of < 3 "./boot/record.scm" . 308233)
   (if.false.call
     (push.const . record-accssor)
     (push.const . "field index out of range")
     (apply.gloc.of assertion-violation "./boot/record.scm" . 309257))
   (touch.gloc.of make-accessor)
   (push.iloc.0 . 0)
   (call
     (touch.gloc.of flat-field-offset)
     (push.iloc.0 . 0)
     (push.iloc.0 . 1)
     (apply.gloc.of flat-field-offset "./boot/record.scm" . 310296))
   (push)
   (apply.gloc.of make-accessor "./boot/record.scm" . 310277))
 (set.gloc.of record-accessor)
 (ret.const.unspec))
((close
   (2 0 . record-mutator)
   (call (push.iloc.0 . 0) (apply.gloc.of record-type-descriptor? "./boot/record.scm" . 314377))
   (if.false.call
     (push.const . record-mutator)
     (call
       (touch.gloc.of wrong-type-argument-message)
       (push.const . "record-type-descriptor")
       (push.iloc.0 . 0)
       (apply.gloc.of wrong-type-argument-message "./boot/record.scm" . 315438))
     (push)
     (push.iloc.0 . 0)
     (push.iloc.0 . 1)
     (push.subr.gloc.of list 2 "./boot/record.scm" . 315497)
     (apply.gloc.of assertion-violation "./boot/record.scm" . 315401))
   (push.const . -1)
   (push.iloc.0 . 1)
   (call
     (touch.gloc.of rtd-fields)
     (push.iloc.0 . 0)
     (apply.gloc.of rtd-fields "./boot/record.scm" . 316441))
   (push)
   (push.subr.gloc.of length 1 "./boot/record.scm" . 316433)
   (subr.gloc.of < 3 "./boot/record.scm" . 316425)
   (if.false.call
     (push.const . record-mutator)
     (push.const . "field index out of range")
     (push.iloc.0 . 0)
     (push.iloc.0 . 1)
     (push.subr.gloc.of list 2 "./boot/record.scm" . 317513)
     (apply.gloc.of assertion-violation "./boot/record.scm" . 317449))
   (call
     (push.iloc.0 . 0)
     (push.iloc.0 . 1)
     (apply.gloc.of record-field-mutable? "./boot/record.scm" . 318473))
   (if.false.call
     (push.const . record-mutator)
     (push.const . "specified field is immutable")
     (push.iloc.0 . 0)
     (push.iloc.0 . 1)
     (push.subr.gloc.of list 2 "./boot/record.scm" . 319565)
     (apply.gloc.of assertion-violation "./boot/record.scm" . 319497))
   (touch.gloc.of make-mutator)
   (push.iloc.0 . 0)
   (call
     (touch.gloc.of flat-field-offset)
     (push.iloc.0 . 0)
     (push.iloc.0 . 1)
     (apply.gloc.of flat-field-offset "./boot/record.scm" . 320535))
   (push)
   (apply.gloc.of make-mutator "./boot/record.scm" . 320517))
 (set.gloc.of record-mutator)
 (ret.const.unspec))
((close
   (3 0 . make-record-type)
   (push.const . type:record-type)
   (push.iloc.0 . 0)
   (push.iloc.0 . 1)
   (push.iloc.0 . 2)
   (ret.subr.gloc.of tuple "./boot/record.scm" . 324613))
 (set.gloc.of make-record-type)
 (ret.const.unspec))
((close
   (1 0 . record-type?)
   (push.iloc.0 . 0)
   (push.const . 0)
   (push.subr.gloc.of tuple-ref 2 "./boot/record.scm" . 328714)
   (const . type:record-type)
   (ret.eq? "./boot/record.scm" . 328709))
 (set.gloc.of record-type?)
 (ret.const.unspec))
((close
   (1 0 . record-type-rtd)
   (call (push.iloc.0 . 0) (apply.gloc.of record-type? "./boot/record.scm" . 332809))
   (if.false.call
     (push.const . record-type-rtd)
     (call
       (touch.gloc.of wrong-type-argument-message)
       (push.const . "record-type")
       (push.iloc.0 . 0)
       (apply.gloc.of wrong-type-argument-message "./boot/record.scm" . 333871))
     (push)
     (apply.gloc.of assertion-violation "./boot/record.scm" . 333833))
   (push.iloc.0 . 0)
   (push.const . 2)
   (ret.subr.gloc.of tuple-ref "./boot/record.scm" . 334853))
 (set.gloc.of record-type-rtd)
 (ret.const.unspec))
((close
   (1 0 . record-type-rcd)
   (call (push.iloc.0 . 0) (apply.gloc.of record-type? "./boot/record.scm" . 338953))
   (if.false.call
     (push.const . record-type-rcd)
     (call
       (touch.gloc.of wrong-type-argument-message)
       (push.const . "record-type")
       (push.iloc.0 . 0)
       (apply.gloc.of wrong-type-argument-message "./boot/record.scm" . 340015))
     (push)
     (apply.gloc.of assertion-violation "./boot/record.scm" . 339977))
   (push.iloc.0 . 0)
   (push.const . 3)
   (ret.subr.gloc.of tuple-ref "./boot/record.scm" . 340997))
 (set.gloc.of record-type-rcd)
 (ret.const.unspec))

;
((close
   (0 0 . make-condition-uid)
   (push.const . "<~a>")
   (subr.gloc.of make-uuid 0)
   (push)
   (push.subr.gloc.of format 2 "./boot/condition.scm" . 4151)
   (ret.subr.gloc.of string->symbol "./boot/condition.scm" . 4135))
 (set.gloc.of make-condition-uid)
 (ret.const.unspec))
((call
   (call
     (push.const . &condition)
     (push.const . #f)
     (call
       (touch.gloc.of make-condition-uid)
       (apply.gloc.of make-condition-uid "./boot/condition.scm" . 7227))
     (push)
     (push.const . #f)
     (push.const . #f)
     (push.const . #())
     (apply.gloc.of make-record-type-descriptor "./boot/condition.scm" . 7183))
   (push)
   (extend . 1)
   (push.const . &condition)
   (push.iloc.0 . 0)
   (call
     (push.iloc.0 . 0)
     (push.const . #f)
     (push.const . #f)
     (apply.gloc.of make-record-constructor-descriptor "./boot/condition.scm" . 8207))
   (push)
   (apply.gloc.of make-record-type "./boot/condition.scm" . 9221))
 (set.gloc.of &condition)
 (ret.const.unspec))
((close
   (1 0 . compound-condition-component)
   (push.iloc.0 . 0)
   (push.const . 1)
   (ret.subr.gloc.of tuple-ref "./boot/condition.scm" . 11316))
 (set.gloc.of compound-condition-component)
 (ret.const.unspec))
((close
   (0 1 . condition)
   (push.const . type:condition)
   (call
     (push.gloc.of append)
     (call
       (push.close
         (1 0)
         (call (push.iloc.0 . 0) (apply.gloc.of condition? "./boot/condition.scm" . 18462))
         (if.false.call
           (push.const . condition)
           (push.const . "expected condition, but got ~r")
           (push.iloc.0 . 0)
           (push.subr.gloc.of format 2 "./boot/condition.scm" . 19518)
           (push.iloc.1 . 0)
           (apply.gloc.of assertion-violation "./boot/condition.scm" . 19486))
         (push.iloc.0 . 0)
         (apply.gloc.of simple-conditions "./boot/condition.scm" . 20506))
       (push.iloc.0 . 0)
       (apply.gloc.of map "./boot/condition.scm" . 17427))
     (push)
     (apply.gloc.of apply "./boot/condition.scm" . 16396))
   (push)
   (ret.subr.gloc.of tuple "./boot/condition.scm" . 15365))
 (set.gloc.of condition)
 (ret.const.unspec))
((close
   (1 0 . compound-condition?)
   (push.iloc.0 . 0)
   (subr.gloc.of tuple? 1 "./boot/condition.scm" . 25610)
   (if.false.ret)
   (push.const . type:condition)
   (push.iloc.0 . 0)
   (push.const . 0)
   (subr.gloc.of tuple-ref 2 "./boot/condition.scm" . 26655)
   (ret.eq? "./boot/condition.scm" . 26634))
 (set.gloc.of compound-condition?)
 (ret.const.unspec))
((close
   (1 0 . simple-condition?)
   (call (push.iloc.0 . 0) (apply.gloc.of record? "./boot/condition.scm" . 30730))
   (if.false.ret)
   (touch.gloc.of rtd-ancestor?)
   (call (push.gloc.of &condition) (apply.gloc.of record-type-rtd "./boot/condition.scm" . 31769))
   (push)
   (call (push.iloc.0 . 0) (apply.gloc.of record-rtd "./boot/condition.scm" . 31798))
   (push)
   (apply.gloc.of rtd-ancestor? "./boot/condition.scm" . 31754))
 (set.gloc.of simple-condition?)
 (ret.const.unspec))
((close
   (1 0 . condition?)
   (call
     (touch.gloc.of simple-condition?)
     (push.iloc.0 . 0)
     (apply.gloc.of simple-condition? "./boot/condition.scm" . 35849))
   (if.true.ret)
   (touch.gloc.of compound-condition?)
   (push.iloc.0 . 0)
   (apply.gloc.of compound-condition? "./boot/condition.scm" . 36873))
 (set.gloc.of condition?)
 (ret.const.unspec))
((close
   (1 0 . simple-conditions)
   (call
     (touch.gloc.of simple-condition?)
     (push.iloc.0 . 0)
     (apply.gloc.of simple-condition? "./boot/condition.scm" . 40972))
   (if.true (push.iloc.0 . 0) (ret.subr.gloc.of list "./boot/condition.scm" . 40994))
   (call
     (touch.gloc.of compound-condition?)
     (push.iloc.0 . 0)
     (apply.gloc.of compound-condition? "./boot/condition.scm" . 41996))
   (if.true
     (touch.gloc.of compound-condition-component)
     (push.iloc.0 . 0)
     (apply.gloc.of compound-condition-component "./boot/condition.scm" . 42020))
   (push.const . simple-conditions)
   (push.const . "expected condition, but got ~r")
   (push.iloc.0 . 0)
   (push.subr.gloc.of format 2 "./boot/condition.scm" . 44084)
   (apply.gloc.of assertion-violation "./boot/condition.scm" . 44044))
 (set.gloc.of simple-conditions)
 (ret.const.unspec))
((close
   (1 0 . condition-predicate)
   (call
     (touch.gloc.of rtd-ancestor?)
     (call (push.gloc.of &condition) (apply.gloc.of record-type-rtd "./boot/condition.scm" . 48152))
     (push)
     (push.iloc.0 . 0)
     (apply.gloc.of rtd-ancestor? "./boot/condition.scm" . 48137))
   (if.false.call
     (push.const . condition-predicate)
     (push.const . "expected record-type-descriptor of a subtype of &condition, but got ~r")
     (push.iloc.0 . 0)
     (push.subr.gloc.of format 2 "./boot/condition.scm" . 49203)
     (apply.gloc.of assertion-violation "./boot/condition.scm" . 49161))
   (ret.close
     (1 0)
     (call
       (touch.gloc.of simple-condition?)
       (push.iloc.0 . 0)
       (apply.gloc.of simple-condition? "./boot/condition.scm" . 51214))
     (if.true
       (touch.gloc.of rtd-ancestor?)
       (push.iloc.1 . 0)
       (call (push.iloc.0 . 0) (apply.gloc.of record-rtd "./boot/condition.scm" . 52257))
       (push)
       (apply.gloc.of rtd-ancestor? "./boot/condition.scm" . 52238))
     (call
       (touch.gloc.of compound-condition?)
       (push.iloc.0 . 0)
       (apply.gloc.of compound-condition? "./boot/condition.scm" . 53262))
     (if.false.ret)
     (touch.gloc.of any1)
     (push.close
       (1 0)
       (touch.gloc.of rtd-ancestor?)
       (push.iloc 2 . 0)
       (call (push.iloc.0 . 0) (apply.gloc.of record-rtd "./boot/condition.scm" . 54331))
       (push)
       (apply.gloc.of rtd-ancestor? "./boot/condition.scm" . 54312))
     (call
       (touch.gloc.of compound-condition-component)
       (push.iloc.0 . 0)
       (apply.gloc.of compound-condition-component "./boot/condition.scm" . 55316))
     (push)
     (apply.gloc.of any1 "./boot/condition.scm" . 54286)))
 (set.gloc.of condition-predicate)
 (ret.const.unspec))
((close
   (2 0 . wrong-type)
   (push.const . "condition accessor")
   (push.const . "expected condition of a subtype of ~s, but got ~r")
   (push.iloc.0 . 0)
   (push.iloc.0 . 1)
   (push.subr.gloc.of format 3 "./boot/condition.scm" . 63539)
   (push.iloc.0 . 0)
   (push.iloc.0 . 1)
   (apply.gloc.of assertion-violation "./boot/condition.scm" . 63497))
 (set.gloc.of |wrong-type`3710*|)
 (close
   (2 0 . condition-accessor)
   (call
     (touch.gloc.of rtd-ancestor?)
     (call (push.gloc.of &condition) (apply.gloc.of record-type-rtd "./boot/condition.scm" . 65560))
     (push)
     (push.iloc.0 . 0)
     (apply.gloc.of rtd-ancestor? "./boot/condition.scm" . 65545))
   (if.false.call
     (push.const . condition-accessor)
     (push.const . "expected record-type-descriptor of a subtype of &condition, but got ~r")
     (push.iloc.0 . 0)
     (push.subr.gloc.of format 2 "./boot/condition.scm" . 66610)
     (push.iloc.0 . 0)
     (push.iloc.0 . 1)
     (apply.gloc.of assertion-violation "./boot/condition.scm" . 66569))
   (ret.close
     (1 0)
     (call
       (touch.gloc.of simple-condition?)
       (push.iloc.0 . 0)
       (apply.gloc.of simple-condition? "./boot/condition.scm" . 69646))
     (if.true
       (call
         (call
           (touch.gloc.of rtd-ancestor?)
           (push.iloc.1 . 0)
           (call (push.iloc.0 . 0) (apply.gloc.of record-rtd "./boot/condition.scm" . 70693))
           (push)
           (apply.gloc.of rtd-ancestor? "./boot/condition.scm" . 70674))
         (if.true.ret)
         (touch.gloc.of |wrong-type`3710*|)
         (push.iloc.1 . 0)
         (push.iloc.0 . 0)
         (apply.gloc.of |wrong-type`3710*| "./boot/condition.scm" . 70711))
       (push.iloc.0 . 0)
       (apply.iloc (1 . 1) "./boot/condition.scm" . 71694))
     (call
       (touch.gloc.of compound-condition?)
       (push.iloc.0 . 0)
       (apply.gloc.of compound-condition? "./boot/condition.scm" . 72718))
     (if.true
       (call
         (touch.gloc.of any1)
         (push.close
           (1 0)
           (call
             (touch.gloc.of rtd-ancestor?)
             (push.iloc 2 . 0)
             (call (push.iloc.0 . 0) (apply.gloc.of record-rtd "./boot/condition.scm" . 73799))
             (push)
             (apply.gloc.of rtd-ancestor? "./boot/condition.scm" . 73780))
           (if.false.ret)
           (ret.iloc 0 . 0))
         (call
           (touch.gloc.of compound-condition-component)
           (push.iloc.0 . 0)
           (apply.gloc.of compound-condition-component "./boot/condition.scm" . 74779))
         (push)
         (apply.gloc.of any1 "./boot/condition.scm" . 73749))
       (push)
       (extend . 1)
       (iloc.0 . 0)
       (if.true (push.iloc.0 . 0) (apply.iloc (2 . 1) "./boot/condition.scm" . 77845))
       (touch.gloc.of |wrong-type`3710*|)
       (push.iloc 2 . 0)
       (push.iloc.1 . 0)
       (apply.gloc.of |wrong-type`3710*| "./boot/condition.scm" . 77845))
     (touch.gloc.of |wrong-type`3710*|)
     (push.iloc.1 . 0)
     (push.iloc.0 . 0)
     (apply.gloc.of |wrong-type`3710*| "./boot/condition.scm" . 79886)))
 (set.gloc.of condition-accessor)
 (ret.const.unspec))
((close
   (1 0 . list-parents)
   (touch.gloc.of |loop`3725*|)
   (push.iloc.0 . 0)
   (push.const)
   (apply.gloc.of |loop`3725*| "./boot/condition.scm" . 88075))
 (set.gloc.of |list-parents`3720*|)
 (close
   (2 0 . loop)
   (call (push.iloc.0 . 0) (apply.gloc.of record-type-parent "./boot/condition.scm" . 88082))
   (push)
   (extend . 1)
   (iloc.0 . 0)
   (if.true
     (touch.gloc.of |loop`3725*|)
     (push.iloc.0 . 0)
     (call (push.iloc.0 . 0) (apply.gloc.of record-type-name "./boot/condition.scm" . 89135))
     (push)
     (iloc.1 . 1)
     (push.cons)
     (apply.gloc.of |loop`3725*| "./boot/condition.scm" . 89121))
   (push.cdr.iloc (1 . 1) "./boot/condition.scm" . 90144)
   (ret.subr.gloc.of reverse "./boot/condition.scm" . 90135))
 (set.gloc.of |loop`3725*|)
 (close
   (2 0 . describe-condition)
   (call (push.iloc.0 . 1) (apply.gloc.of condition? "./boot/condition.scm" . 92172))
   (if.true
     (subr.gloc.of make-string-output-port 0)
     (push)
     (extend . 1)
     (push.iloc.0 . 0)
     (push.const . "  #<condition~!")
     (subr.gloc.of format 2 "./boot/condition.scm" . 94222)
     (call
       (push.close
         (1 0)
         (call (push.iloc.0 . 0) (apply.gloc.of record-rtd "./boot/condition.scm" . 97319))
         (push)
         (extend . 1)
         (call
           (touch.gloc.of |list-parents`3720*|)
           (push.iloc.0 . 0)
           (apply.gloc.of |list-parents`3720*| "./boot/condition.scm" . 99373))
         (push)
         (call
           (push.iloc.0 . 0)
           (apply.gloc.of record-type-field-names "./boot/condition.scm" . 100410))
         (push)
         (push.subr.gloc.of vector-length 1 "./boot/condition.scm" . 100395)
         (extend . 2)
         (push.iloc 3 . 0)
         (push.const . "~%    ~a")
         (call (push.iloc.1 . 0) (apply.gloc.of record-type-name "./boot/condition.scm" . 98346))
         (push)
         (subr.gloc.of format 3 "./boot/condition.scm" . 101408)
         (call
           (iloc.0 . 0)
           (if.not.pair?.ret.const . #f)
           (push.iloc 3 . 0)
           (push.const . " ~r")
           (push.iloc.0 . 0)
           (ret.subr.gloc.of format "./boot/condition.scm" . 102453))
         (=n.iloc (0 . 1) 1 "./boot/condition.scm" . 103463)
         (if.true
           (call
             (push.iloc 2 . 0)
             (call
               (push.iloc.1 . 0)
               (push.const . 0)
               (apply.gloc.of record-accessor "./boot/condition.scm" . 104499))
             (apply))
           (push)
           (subr.gloc.of string? 1 "./boot/condition.scm" . 105517)
           (if.true
             (push.iloc 3 . 0)
             (push.const . ": ~a")
             (call
               (push.iloc 2 . 0)
               (call
                 (push.iloc.1 . 0)
                 (push.const . 0)
                 (apply.gloc.of record-accessor "./boot/condition.scm" . 106561))
               (apply))
             (push)
             (ret.subr.gloc.of format "./boot/condition.scm" . 106541))
           (push.iloc 3 . 0)
           (push.const . ": ~r")
           (call
             (push.iloc 2 . 0)
             (call
               (push.iloc.1 . 0)
               (push.const . 0)
               (apply.gloc.of record-accessor "./boot/condition.scm" . 107585))
             (apply))
           (push)
           (ret.subr.gloc.of format "./boot/condition.scm" . 107565))
         (>n.iloc (0 . 1) 1 "./boot/condition.scm" . 108583)
         (if.true
           (extend.enclose+
             (2 0 . loop)
             (iloc.0 . 1)
             (if.not.pair?.ret.const . #f)
             (call
               (push.iloc 4 . 0)
               (call
                 (push.iloc 3 . 0)
                 (push.iloc.0 . 0)
                 (apply.gloc.of record-accessor "./boot/condition.scm" . 112700))
               (apply))
             (push)
             (extend . 1)
             (call
               (push.iloc.0 . 0)
               (subr.gloc.of string? 1 "./boot/condition.scm" . 113718)
               (if.true
                 (push.iloc 6 . 0)
                 (push.const . "~%     ~a: ~a")
                 (push.car.iloc (1 . 1) "./boot/condition.scm" . 114770)
                 (push.iloc.0 . 0)
                 (ret.subr.gloc.of format "./boot/condition.scm" . 114742))
               (push.iloc 6 . 0)
               (push.const . "~%     ~a: ~r")
               (push.car.iloc (1 . 1) "./boot/condition.scm" . 115794)
               (push.iloc.0 . 0)
               (ret.subr.gloc.of format "./boot/condition.scm" . 115766))
             (push.n+.iloc (1 . 0) 1 "./boot/condition.scm" . 116792)
             (push.cdr.iloc (1 . 1) "./boot/condition.scm" . 116800)
             (apply.iloc+ (2 . 0) "./boot/condition.scm" . 116786))
           (push.const . 0)
           (call
             (push.iloc 2 . 0)
             (apply.gloc.of record-type-field-names "./boot/condition.scm" . 109632))
           (push)
           (push.subr.gloc.of vector->list 1 "./boot/condition.scm" . 109618)
           (apply.iloc+ (0 . 0) "./boot/condition.scm" . 111659))
         (ret.const.unspec))
       (call (push.iloc.1 . 1) (apply.gloc.of simple-conditions "./boot/condition.scm" . 95257))
       (push)
       (apply.gloc.of
         for-each
         (for-each (lambda (|rec`3737*|)
                     (let ((|rtd`3739*| (record-rtd |rec`3737*|)))
                       (let ((|parents`3741*| (|list-parents`3720*| |rtd`3739*|))
                             (|count`3741*| (vector-length (record-type-field-names |rtd`3739*|))))
                         (format |buf`3733*| "~%    ~a" (record-type-name |rtd`3739*|))
                         (and (pair? |parents`3741*|) (format |buf`3733*| " ~r" |parents`3741*|))
                         (if (= |count`3741*| 1)
                             (if (string? ((record-accessor |rtd`3739*| 0) |rec`3737*|))
                                 (format
                                   |buf`3733*|
                                   ": ~a"
                                   ((record-accessor |rtd`3739*| 0) |rec`3737*|))
                                 (format
                                   |buf`3733*|
                                   ": ~r"
                                   ((record-accessor |rtd`3739*| 0) |rec`3737*|)))
                             (if (> |count`3741*| 1)
                                 (letrec* ((|loop`3749*|
                                             (lambda (|i`3750*| |lst`3750*|)
                                               (and (pair? |lst`3750*|)
                                                    (let ((|obj`3752*|
                                                            ((record-accessor |rtd`3739*| |i`3750*|)
                                                             |rec`3737*|)))
                                                      (if (string? |obj`3752*|)
                                                          (format
                                                            |buf`3733*|
                                                            "~%     ~a: ~a"
                                                            (car |lst`3750*|)
                                                            |obj`3752*|)
                                                          (format
                                                            |buf`3733*|
                                                            "~%     ~a: ~r"
                                                            (car |lst`3750*|)
                                                            |obj`3752*|))
                                                      (|loop`3749*|
                                                        (+ |i`3750*| 1)
                                                        (cdr |lst`3750*|)))))))
                                   (|loop`3749*|
                                     0
                                     (vector->list (record-type-field-names |rtd`3739*|))))
                                 (|.unspecified|))))))
                   (simple-conditions |c`3719*|))))
     (push.iloc.0 . 0)
     (push.const . "~%   >")
     (subr.gloc.of format 2 "./boot/condition.scm" . 118798)
     (push.iloc.1 . 0)
     (push.const . "~a~!")
     (push.iloc.0 . 0)
     (push.subr.gloc.of extract-accumulated-string 1 "./boot/condition.scm" . 119842)
     (ret.subr.gloc.of format "./boot/condition.scm" . 119822))
   (push.iloc.0 . 0)
   (push.const . "~r~!")
   (push.iloc.0 . 1)
   (ret.subr.gloc.of format "./boot/condition.scm" . 121868))
 (set.gloc.of describe-condition)
 (ret.const.unspec))
((call
   (call
     (push.const . &message)
     (call
       (push.gloc.of &condition)
       (apply.gloc.of record-type-rtd "./boot/condition.scm" . 124981))
     (push)
     (call
       (touch.gloc.of make-condition-uid)
       (apply.gloc.of make-condition-uid "./boot/condition.scm" . 125010))
     (push)
     (push.const . #f)
     (push.const . #f)
     (push.const . #((immutable message)))
     (apply.gloc.of make-record-type-descriptor "./boot/condition.scm" . 124942))
   (push)
   (extend . 1)
   (push.const . &message)
   (push.iloc.0 . 0)
   (call
     (push.iloc.0 . 0)
     (call
       (push.gloc.of &condition)
       (apply.gloc.of record-type-rcd "./boot/condition.scm" . 126008))
     (push)
     (push.const . #f)
     (apply.gloc.of make-record-constructor-descriptor "./boot/condition.scm" . 125968))
   (push)
   (apply.gloc.of make-record-type "./boot/condition.scm" . 126983))
 (set.gloc.of &message)
 (ret.const.unspec))
((call
   (call (push.gloc.of &message) (apply.gloc.of record-type-rcd "./boot/condition.scm" . 128052))
   (push)
   (apply.gloc.of record-constructor "./boot/condition.scm" . 128032))
 (set.gloc.of make-message-condition)
 (ret.const.unspec))
((call
   (call (push.gloc.of &message) (apply.gloc.of record-type-rtd "./boot/condition.scm" . 129073))
   (push)
   (apply.gloc.of condition-predicate "./boot/condition.scm" . 129052))
 (set.gloc.of message-condition?)
 (ret.const.unspec))
((call
   (call (push.gloc.of &message) (apply.gloc.of record-type-rtd "./boot/condition.scm" . 130095))
   (push)
   (call
     (call (push.gloc.of &message) (apply.gloc.of record-type-rtd "./boot/condition.scm" . 130139))
     (push)
     (push.const . 0)
     (apply.gloc.of record-accessor "./boot/condition.scm" . 130122))
   (push)
   (apply.gloc.of condition-accessor "./boot/condition.scm" . 130075))
 (set.gloc.of condition-message)
 (ret.const.unspec))
((call
   (call
     (push.const . &warning)
     (call
       (push.gloc.of &condition)
       (apply.gloc.of record-type-rtd "./boot/condition.scm" . 133173))
     (push)
     (call
       (touch.gloc.of make-condition-uid)
       (apply.gloc.of make-condition-uid "./boot/condition.scm" . 133202))
     (push)
     (push.const . #f)
     (push.const . #f)
     (push.const . #())
     (apply.gloc.of make-record-type-descriptor "./boot/condition.scm" . 133134))
   (push)
   (extend . 1)
   (push.const . &warning)
   (push.iloc.0 . 0)
   (call
     (push.iloc.0 . 0)
     (call
       (push.gloc.of &condition)
       (apply.gloc.of record-type-rcd "./boot/condition.scm" . 134200))
     (push)
     (push.const . #f)
     (apply.gloc.of make-record-constructor-descriptor "./boot/condition.scm" . 134160))
   (push)
   (apply.gloc.of make-record-type "./boot/condition.scm" . 135175))
 (set.gloc.of &warning)
 (ret.const.unspec))
((call
   (call (push.gloc.of &warning) (apply.gloc.of record-type-rcd "./boot/condition.scm" . 136234))
   (push)
   (apply.gloc.of record-constructor "./boot/condition.scm" . 136214))
 (set.gloc.of make-warning)
 (ret.const.unspec))
((call
   (call (push.gloc.of &warning) (apply.gloc.of record-type-rtd "./boot/condition.scm" . 137255))
   (push)
   (apply.gloc.of condition-predicate "./boot/condition.scm" . 137234))
 (set.gloc.of warning?)
 (ret.const.unspec))
((call
   (call
     (push.const . &serious)
     (call
       (push.gloc.of &condition)
       (apply.gloc.of record-type-rtd "./boot/condition.scm" . 140341))
     (push)
     (call
       (touch.gloc.of make-condition-uid)
       (apply.gloc.of make-condition-uid "./boot/condition.scm" . 140370))
     (push)
     (push.const . #f)
     (push.const . #f)
     (push.const . #())
     (apply.gloc.of make-record-type-descriptor "./boot/condition.scm" . 140302))
   (push)
   (extend . 1)
   (push.const . &serious)
   (push.iloc.0 . 0)
   (call
     (push.iloc.0 . 0)
     (call
       (push.gloc.of &condition)
       (apply.gloc.of record-type-rcd "./boot/condition.scm" . 141368))
     (push)
     (push.const . #f)
     (apply.gloc.of make-record-constructor-descriptor "./boot/condition.scm" . 141328))
   (push)
   (apply.gloc.of make-record-type "./boot/condition.scm" . 142343))
 (set.gloc.of &serious)
 (ret.const.unspec))
((call
   (call (push.gloc.of &serious) (apply.gloc.of record-type-rcd "./boot/condition.scm" . 143412))
   (push)
   (apply.gloc.of record-constructor "./boot/condition.scm" . 143392))
 (set.gloc.of make-serious-condition)
 (ret.const.unspec))
((call
   (call (push.gloc.of &serious) (apply.gloc.of record-type-rtd "./boot/condition.scm" . 144433))
   (push)
   (apply.gloc.of condition-predicate "./boot/condition.scm" . 144412))
 (set.gloc.of serious-condition?)
 (ret.const.unspec))
((call
   (call
     (push.const . &error)
     (call (push.gloc.of &serious) (apply.gloc.of record-type-rtd "./boot/condition.scm" . 147507))
     (push)
     (call
       (touch.gloc.of make-condition-uid)
       (apply.gloc.of make-condition-uid "./boot/condition.scm" . 147534))
     (push)
     (push.const . #f)
     (push.const . #f)
     (push.const . #())
     (apply.gloc.of make-record-type-descriptor "./boot/condition.scm" . 147470))
   (push)
   (extend . 1)
   (push.const . &error)
   (push.iloc.0 . 0)
   (call
     (push.iloc.0 . 0)
     (call (push.gloc.of &serious) (apply.gloc.of record-type-rcd "./boot/condition.scm" . 148536))
     (push)
     (push.const . #f)
     (apply.gloc.of make-record-constructor-descriptor "./boot/condition.scm" . 148496))
   (push)
   (apply.gloc.of make-record-type "./boot/condition.scm" . 149511))
 (set.gloc.of &error)
 (ret.const.unspec))
((call
   (call (push.gloc.of &error) (apply.gloc.of record-type-rcd "./boot/condition.scm" . 150568))
   (push)
   (apply.gloc.of record-constructor "./boot/condition.scm" . 150548))
 (set.gloc.of make-error)
 (ret.const.unspec))
((call
   (call (push.gloc.of &error) (apply.gloc.of record-type-rtd "./boot/condition.scm" . 151589))
   (push)
   (apply.gloc.of condition-predicate "./boot/condition.scm" . 151568))
 (set.gloc.of error?)
 (ret.const.unspec))
((call
   (call
     (push.const . &violation)
     (call (push.gloc.of &serious) (apply.gloc.of record-type-rtd "./boot/condition.scm" . 154679))
     (push)
     (call
       (touch.gloc.of make-condition-uid)
       (apply.gloc.of make-condition-uid "./boot/condition.scm" . 154706))
     (push)
     (push.const . #f)
     (push.const . #f)
     (push.const . #())
     (apply.gloc.of make-record-type-descriptor "./boot/condition.scm" . 154638))
   (push)
   (extend . 1)
   (push.const . &violation)
   (push.iloc.0 . 0)
   (call
     (push.iloc.0 . 0)
     (call (push.gloc.of &serious) (apply.gloc.of record-type-rcd "./boot/condition.scm" . 155704))
     (push)
     (push.const . #f)
     (apply.gloc.of make-record-constructor-descriptor "./boot/condition.scm" . 155664))
   (push)
   (apply.gloc.of make-record-type "./boot/condition.scm" . 156679))
 (set.gloc.of &violation)
 (ret.const.unspec))
((call
   (call (push.gloc.of &violation) (apply.gloc.of record-type-rcd "./boot/condition.scm" . 157740))
   (push)
   (apply.gloc.of record-constructor "./boot/condition.scm" . 157720))
 (set.gloc.of make-violation)
 (ret.const.unspec))
((call
   (call (push.gloc.of &violation) (apply.gloc.of record-type-rtd "./boot/condition.scm" . 158761))
   (push)
   (apply.gloc.of condition-predicate "./boot/condition.scm" . 158740))
 (set.gloc.of violation?)
 (ret.const.unspec))
((call
   (call
     (push.const . &assertion)
     (call
       (push.gloc.of &violation)
       (apply.gloc.of record-type-rtd "./boot/condition.scm" . 161847))
     (push)
     (call
       (touch.gloc.of make-condition-uid)
       (apply.gloc.of make-condition-uid "./boot/condition.scm" . 161876))
     (push)
     (push.const . #f)
     (push.const . #f)
     (push.const . #())
     (apply.gloc.of make-record-type-descriptor "./boot/condition.scm" . 161806))
   (push)
   (extend . 1)
   (push.const . &assertion)
   (push.iloc.0 . 0)
   (call
     (push.iloc.0 . 0)
     (call
       (push.gloc.of &violation)
       (apply.gloc.of record-type-rcd "./boot/condition.scm" . 162872))
     (push)
     (push.const . #f)
     (apply.gloc.of make-record-constructor-descriptor "./boot/condition.scm" . 162832))
   (push)
   (apply.gloc.of make-record-type "./boot/condition.scm" . 163847))
 (set.gloc.of &assertion)
 (ret.const.unspec))
((call
   (call (push.gloc.of &assertion) (apply.gloc.of record-type-rcd "./boot/condition.scm" . 164918))
   (push)
   (apply.gloc.of record-constructor "./boot/condition.scm" . 164898))
 (set.gloc.of make-assertion-violation)
 (ret.const.unspec))
((call
   (call (push.gloc.of &assertion) (apply.gloc.of record-type-rtd "./boot/condition.scm" . 165939))
   (push)
   (apply.gloc.of condition-predicate "./boot/condition.scm" . 165918))
 (set.gloc.of assertion-violation?)
 (ret.const.unspec))
((call
   (call
     (push.const . &irritants)
     (call
       (push.gloc.of &condition)
       (apply.gloc.of record-type-rtd "./boot/condition.scm" . 169015))
     (push)
     (call
       (touch.gloc.of make-condition-uid)
       (apply.gloc.of make-condition-uid "./boot/condition.scm" . 169044))
     (push)
     (push.const . #f)
     (push.const . #f)
     (push.const . #((immutable irritants)))
     (apply.gloc.of make-record-type-descriptor "./boot/condition.scm" . 168974))
   (push)
   (extend . 1)
   (push.const . &irritants)
   (push.iloc.0 . 0)
   (call
     (push.iloc.0 . 0)
     (call
       (push.gloc.of &condition)
       (apply.gloc.of record-type-rcd "./boot/condition.scm" . 170040))
     (push)
     (push.const . #f)
     (apply.gloc.of make-record-constructor-descriptor "./boot/condition.scm" . 170000))
   (push)
   (apply.gloc.of make-record-type "./boot/condition.scm" . 171015))
 (set.gloc.of &irritants)
 (ret.const.unspec))
((call
   (call (push.gloc.of &irritants) (apply.gloc.of record-type-rtd "./boot/condition.scm" . 172079))
   (push)
   (push.const . 0)
   (apply.gloc.of record-accessor "./boot/condition.scm" . 172062))
 (set.gloc.of &irritants-irritants)
 (ret.const.unspec))
((call
   (call (push.gloc.of &irritants) (apply.gloc.of record-type-rcd "./boot/condition.scm" . 173110))
   (push)
   (apply.gloc.of record-constructor "./boot/condition.scm" . 173090))
 (set.gloc.of make-irritants-condition)
 (ret.const.unspec))
((call
   (call (push.gloc.of &irritants) (apply.gloc.of record-type-rtd "./boot/condition.scm" . 174131))
   (push)
   (apply.gloc.of condition-predicate "./boot/condition.scm" . 174110))
 (set.gloc.of irritants-condition?)
 (ret.const.unspec))
((call
   (call (push.gloc.of &irritants) (apply.gloc.of record-type-rtd "./boot/condition.scm" . 175153))
   (push)
   (push.gloc.of &irritants-irritants)
   (apply.gloc.of condition-accessor "./boot/condition.scm" . 175133))
 (set.gloc.of condition-irritants)
 (ret.const.unspec))
((call
   (call
     (push.const . &who)
     (call
       (push.gloc.of &condition)
       (apply.gloc.of record-type-rtd "./boot/condition.scm" . 178225))
     (push)
     (call
       (touch.gloc.of make-condition-uid)
       (apply.gloc.of make-condition-uid "./boot/condition.scm" . 178254))
     (push)
     (push.const . #f)
     (push.const . #f)
     (push.const . #((immutable who)))
     (apply.gloc.of make-record-type-descriptor "./boot/condition.scm" . 178190))
   (push)
   (extend . 1)
   (push.const . &who)
   (push.iloc.0 . 0)
   (call
     (push.iloc.0 . 0)
     (call
       (push.gloc.of &condition)
       (apply.gloc.of record-type-rcd "./boot/condition.scm" . 179256))
     (push)
     (push.const . #f)
     (apply.gloc.of make-record-constructor-descriptor "./boot/condition.scm" . 179216))
   (push)
   (apply.gloc.of make-record-type "./boot/condition.scm" . 180231))
 (set.gloc.of &who)
 (ret.const.unspec))
((call
   (call (push.gloc.of &who) (apply.gloc.of record-type-rtd "./boot/condition.scm" . 181283))
   (push)
   (push.const . 0)
   (apply.gloc.of record-accessor "./boot/condition.scm" . 181266))
 (set.gloc.of &who-who)
 (ret.const.unspec))
((call
   (call (push.gloc.of &who) (apply.gloc.of record-type-rcd "./boot/condition.scm" . 182320))
   (push)
   (apply.gloc.of record-constructor "./boot/condition.scm" . 182300))
 (set.gloc.of make-who-condition)
 (ret.const.unspec))
((call
   (call (push.gloc.of &who) (apply.gloc.of record-type-rtd "./boot/condition.scm" . 183341))
   (push)
   (apply.gloc.of condition-predicate "./boot/condition.scm" . 183320))
 (set.gloc.of who-condition?)
 (ret.const.unspec))
((call
   (call (push.gloc.of &who) (apply.gloc.of record-type-rtd "./boot/condition.scm" . 184363))
   (push)
   (push.gloc.of &who-who)
   (apply.gloc.of condition-accessor "./boot/condition.scm" . 184343))
 (set.gloc.of condition-who)
 (ret.const.unspec))
((call
   (call
     (push.const . &non-continuable)
     (call
       (push.gloc.of &violation)
       (apply.gloc.of record-type-rtd "./boot/condition.scm" . 187453))
     (push)
     (call
       (touch.gloc.of make-condition-uid)
       (apply.gloc.of make-condition-uid "./boot/condition.scm" . 187482))
     (push)
     (push.const . #f)
     (push.const . #f)
     (push.const . #())
     (apply.gloc.of make-record-type-descriptor "./boot/condition.scm" . 187406))
   (push)
   (extend . 1)
   (push.const . &non-continuable)
   (push.iloc.0 . 0)
   (call
     (push.iloc.0 . 0)
     (call
       (push.gloc.of &violation)
       (apply.gloc.of record-type-rcd "./boot/condition.scm" . 188472))
     (push)
     (push.const . #f)
     (apply.gloc.of make-record-constructor-descriptor "./boot/condition.scm" . 188432))
   (push)
   (apply.gloc.of make-record-type "./boot/condition.scm" . 189447))
 (set.gloc.of &non-continuable)
 (ret.const.unspec))
((call
   (call
     (push.gloc.of &non-continuable)
     (apply.gloc.of record-type-rcd "./boot/condition.scm" . 190524))
   (push)
   (apply.gloc.of record-constructor "./boot/condition.scm" . 190504))
 (set.gloc.of make-non-continuable-violation)
 (ret.const.unspec))
((call
   (call
     (push.gloc.of &non-continuable)
     (apply.gloc.of record-type-rtd "./boot/condition.scm" . 191545))
   (push)
   (apply.gloc.of condition-predicate "./boot/condition.scm" . 191524))
 (set.gloc.of non-continuable-violation?)
 (ret.const.unspec))
((call
   (call
     (push.const . &implementation-restriction)
     (call
       (push.gloc.of &violation)
       (apply.gloc.of record-type-rtd "./boot/condition.scm" . 194632))
     (push)
     (call
       (touch.gloc.of make-condition-uid)
       (apply.gloc.of make-condition-uid "./boot/condition.scm" . 194661))
     (push)
     (push.const . #f)
     (push.const . #f)
     (push.const . #())
     (apply.gloc.of make-record-type-descriptor "./boot/condition.scm" . 194574))
   (push)
   (extend . 1)
   (push.const . &implementation-restriction)
   (push.iloc.0 . 0)
   (call
     (push.iloc.0 . 0)
     (call
       (push.gloc.of &violation)
       (apply.gloc.of record-type-rcd "./boot/condition.scm" . 195640))
     (push)
     (push.const . #f)
     (apply.gloc.of make-record-constructor-descriptor "./boot/condition.scm" . 195600))
   (push)
   (apply.gloc.of make-record-type "./boot/condition.scm" . 196615))
 (set.gloc.of &implementation-restriction)
 (ret.const.unspec))
((call
   (call
     (push.gloc.of &implementation-restriction)
     (apply.gloc.of record-type-rcd "./boot/condition.scm" . 198679))
   (push)
   (apply.gloc.of record-constructor "./boot/condition.scm" . 198659))
 (set.gloc.of make-implementation-restriction-violation)
 (ret.const.unspec))
((call
   (call
     (push.gloc.of &implementation-restriction)
     (apply.gloc.of record-type-rtd "./boot/condition.scm" . 200728))
   (push)
   (apply.gloc.of condition-predicate "./boot/condition.scm" . 200707))
 (set.gloc.of implementation-restriction-violation?)
 (ret.const.unspec))
((call
   (call
     (push.const . &lexical)
     (call
       (push.gloc.of &violation)
       (apply.gloc.of record-type-rtd "./boot/condition.scm" . 203829))
     (push)
     (call
       (touch.gloc.of make-condition-uid)
       (apply.gloc.of make-condition-uid "./boot/condition.scm" . 203858))
     (push)
     (push.const . #f)
     (push.const . #f)
     (push.const . #())
     (apply.gloc.of make-record-type-descriptor "./boot/condition.scm" . 203790))
   (push)
   (extend . 1)
   (push.const . &lexical)
   (push.iloc.0 . 0)
   (call
     (push.iloc.0 . 0)
     (call
       (push.gloc.of &violation)
       (apply.gloc.of record-type-rcd "./boot/condition.scm" . 204856))
     (push)
     (push.const . #f)
     (apply.gloc.of make-record-constructor-descriptor "./boot/condition.scm" . 204816))
   (push)
   (apply.gloc.of make-record-type "./boot/condition.scm" . 205831))
 (set.gloc.of &lexical)
 (ret.const.unspec))
((call
   (call (push.gloc.of &lexical) (apply.gloc.of record-type-rcd "./boot/condition.scm" . 206900))
   (push)
   (apply.gloc.of record-constructor "./boot/condition.scm" . 206880))
 (set.gloc.of make-lexical-violation)
 (ret.const.unspec))
((call
   (call (push.gloc.of &lexical) (apply.gloc.of record-type-rtd "./boot/condition.scm" . 207921))
   (push)
   (apply.gloc.of condition-predicate "./boot/condition.scm" . 207900))
 (set.gloc.of lexical-violation?)
 (ret.const.unspec))
((call
   (call
     (push.const . &syntax)
     (call
       (push.gloc.of &violation)
       (apply.gloc.of record-type-rtd "./boot/condition.scm" . 210996))
     (push)
     (call
       (touch.gloc.of make-condition-uid)
       (apply.gloc.of make-condition-uid "./boot/condition.scm" . 211025))
     (push)
     (push.const . #f)
     (push.const . #f)
     (push.const . #((immutable form) (immutable subform)))
     (apply.gloc.of make-record-type-descriptor "./boot/condition.scm" . 210958))
   (push)
   (extend . 1)
   (push.const . &syntax)
   (push.iloc.0 . 0)
   (call
     (push.iloc.0 . 0)
     (call
       (push.gloc.of &violation)
       (apply.gloc.of record-type-rcd "./boot/condition.scm" . 212024))
     (push)
     (push.const . #f)
     (apply.gloc.of make-record-constructor-descriptor "./boot/condition.scm" . 211984))
   (push)
   (apply.gloc.of make-record-type "./boot/condition.scm" . 212999))
 (set.gloc.of &syntax)
 (ret.const.unspec))
((call
   (call (push.gloc.of &syntax) (apply.gloc.of record-type-rtd "./boot/condition.scm" . 214055))
   (push)
   (push.const . 0)
   (apply.gloc.of record-accessor "./boot/condition.scm" . 214038))
 (set.gloc.of &syntax-form)
 (ret.const.unspec))
((call
   (call (push.gloc.of &syntax) (apply.gloc.of record-type-rtd "./boot/condition.scm" . 215082))
   (push)
   (push.const . 1)
   (apply.gloc.of record-accessor "./boot/condition.scm" . 215065))
 (set.gloc.of &syntax-subform)
 (ret.const.unspec))
((call
   (call (push.gloc.of &syntax) (apply.gloc.of record-type-rcd "./boot/condition.scm" . 216115))
   (push)
   (apply.gloc.of record-constructor "./boot/condition.scm" . 216095))
 (set.gloc.of make-syntax-violation)
 (ret.const.unspec))
((call
   (call (push.gloc.of &syntax) (apply.gloc.of record-type-rtd "./boot/condition.scm" . 217136))
   (push)
   (apply.gloc.of condition-predicate "./boot/condition.scm" . 217115))
 (set.gloc.of syntax-violation?)
 (ret.const.unspec))
((call
   (call (push.gloc.of &syntax) (apply.gloc.of record-type-rtd "./boot/condition.scm" . 218163))
   (push)
   (push.gloc.of &syntax-form)
   (apply.gloc.of condition-accessor "./boot/condition.scm" . 218143))
 (set.gloc.of syntax-violation-form)
 (ret.const.unspec))
((call
   (call (push.gloc.of &syntax) (apply.gloc.of record-type-rtd "./boot/condition.scm" . 219190))
   (push)
   (push.gloc.of &syntax-subform)
   (apply.gloc.of condition-accessor "./boot/condition.scm" . 219170))
 (set.gloc.of syntax-violation-subform)
 (ret.const.unspec))
((call
   (call
     (push.const . &undefined)
     (call
       (push.gloc.of &violation)
       (apply.gloc.of record-type-rtd "./boot/condition.scm" . 222263))
     (push)
     (call
       (touch.gloc.of make-condition-uid)
       (apply.gloc.of make-condition-uid "./boot/condition.scm" . 222292))
     (push)
     (push.const . #f)
     (push.const . #f)
     (push.const . #())
     (apply.gloc.of make-record-type-descriptor "./boot/condition.scm" . 222222))
   (push)
   (extend . 1)
   (push.const . &undefined)
   (push.iloc.0 . 0)
   (call
     (push.iloc.0 . 0)
     (call
       (push.gloc.of &violation)
       (apply.gloc.of record-type-rcd "./boot/condition.scm" . 223288))
     (push)
     (push.const . #f)
     (apply.gloc.of make-record-constructor-descriptor "./boot/condition.scm" . 223248))
   (push)
   (apply.gloc.of make-record-type "./boot/condition.scm" . 224263))
 (set.gloc.of &undefined)
 (ret.const.unspec))
((call
   (call (push.gloc.of &undefined) (apply.gloc.of record-type-rcd "./boot/condition.scm" . 225334))
   (push)
   (apply.gloc.of record-constructor "./boot/condition.scm" . 225314))
 (set.gloc.of make-undefined-violation)
 (ret.const.unspec))
((call
   (call (push.gloc.of &undefined) (apply.gloc.of record-type-rtd "./boot/condition.scm" . 226355))
   (push)
   (apply.gloc.of condition-predicate "./boot/condition.scm" . 226334))
 (set.gloc.of undefined-violation?)
 (ret.const.unspec))
((call
   (call
     (push.const . &i/o)
     (call (push.gloc.of &error) (apply.gloc.of record-type-rtd "./boot/condition.scm" . 229425))
     (push)
     (call
       (touch.gloc.of make-condition-uid)
       (apply.gloc.of make-condition-uid "./boot/condition.scm" . 229450))
     (push)
     (push.const . #f)
     (push.const . #f)
     (push.const . #())
     (apply.gloc.of make-record-type-descriptor "./boot/condition.scm" . 229390))
   (push)
   (extend . 1)
   (push.const . &i/o)
   (push.iloc.0 . 0)
   (call
     (push.iloc.0 . 0)
     (call (push.gloc.of &error) (apply.gloc.of record-type-rcd "./boot/condition.scm" . 230456))
     (push)
     (push.const . #f)
     (apply.gloc.of make-record-constructor-descriptor "./boot/condition.scm" . 230416))
   (push)
   (apply.gloc.of make-record-type "./boot/condition.scm" . 231431))
 (set.gloc.of &i/o)
 (ret.const.unspec))
((call
   (call (push.gloc.of &i/o) (apply.gloc.of record-type-rcd "./boot/condition.scm" . 232492))
   (push)
   (apply.gloc.of record-constructor "./boot/condition.scm" . 232472))
 (set.gloc.of make-i/o-error)
 (ret.const.unspec))
((call
   (call (push.gloc.of &i/o) (apply.gloc.of record-type-rtd "./boot/condition.scm" . 233513))
   (push)
   (apply.gloc.of condition-predicate "./boot/condition.scm" . 233492))
 (set.gloc.of i/o-error?)
 (ret.const.unspec))
((call
   (call
     (push.const . &i/o-read)
     (call (push.gloc.of &i/o) (apply.gloc.of record-type-rtd "./boot/condition.scm" . 236598))
     (push)
     (call
       (touch.gloc.of make-condition-uid)
       (apply.gloc.of make-condition-uid "./boot/condition.scm" . 236621))
     (push)
     (push.const . #f)
     (push.const . #f)
     (push.const . #())
     (apply.gloc.of make-record-type-descriptor "./boot/condition.scm" . 236558))
   (push)
   (extend . 1)
   (push.const . &i/o-read)
   (push.iloc.0 . 0)
   (call
     (push.iloc.0 . 0)
     (call (push.gloc.of &i/o) (apply.gloc.of record-type-rcd "./boot/condition.scm" . 237624))
     (push)
     (push.const . #f)
     (apply.gloc.of make-record-constructor-descriptor "./boot/condition.scm" . 237584))
   (push)
   (apply.gloc.of make-record-type "./boot/condition.scm" . 238599))
 (set.gloc.of &i/o-read)
 (ret.const.unspec))
((call
   (call (push.gloc.of &i/o-read) (apply.gloc.of record-type-rcd "./boot/condition.scm" . 239665))
   (push)
   (apply.gloc.of record-constructor "./boot/condition.scm" . 239645))
 (set.gloc.of make-i/o-read-error)
 (ret.const.unspec))
((call
   (call (push.gloc.of &i/o-read) (apply.gloc.of record-type-rtd "./boot/condition.scm" . 240686))
   (push)
   (apply.gloc.of condition-predicate "./boot/condition.scm" . 240665))
 (set.gloc.of i/o-read-error?)
 (ret.const.unspec))
((call
   (call
     (push.const . &i/o-write)
     (call (push.gloc.of &i/o) (apply.gloc.of record-type-rtd "./boot/condition.scm" . 243767))
     (push)
     (call
       (touch.gloc.of make-condition-uid)
       (apply.gloc.of make-condition-uid "./boot/condition.scm" . 243790))
     (push)
     (push.const . #f)
     (push.const . #f)
     (push.const . #())
     (apply.gloc.of make-record-type-descriptor "./boot/condition.scm" . 243726))
   (push)
   (extend . 1)
   (push.const . &i/o-write)
   (push.iloc.0 . 0)
   (call
     (push.iloc.0 . 0)
     (call (push.gloc.of &i/o) (apply.gloc.of record-type-rcd "./boot/condition.scm" . 244792))
     (push)
     (push.const . #f)
     (apply.gloc.of make-record-constructor-descriptor "./boot/condition.scm" . 244752))
   (push)
   (apply.gloc.of make-record-type "./boot/condition.scm" . 245767))
 (set.gloc.of &i/o-write)
 (ret.const.unspec))
((call
   (call (push.gloc.of &i/o-write) (apply.gloc.of record-type-rcd "./boot/condition.scm" . 246834))
   (push)
   (apply.gloc.of record-constructor "./boot/condition.scm" . 246814))
 (set.gloc.of make-i/o-write-error)
 (ret.const.unspec))
((call
   (call (push.gloc.of &i/o-write) (apply.gloc.of record-type-rtd "./boot/condition.scm" . 247855))
   (push)
   (apply.gloc.of condition-predicate "./boot/condition.scm" . 247834))
 (set.gloc.of i/o-write-error?)
 (ret.const.unspec))
((call
   (call
     (push.const . &i/o-invalid-position)
     (call (push.gloc.of &i/o) (apply.gloc.of record-type-rtd "./boot/condition.scm" . 250946))
     (push)
     (call
       (touch.gloc.of make-condition-uid)
       (apply.gloc.of make-condition-uid "./boot/condition.scm" . 250969))
     (push)
     (push.const . #f)
     (push.const . #f)
     (push.const . #((immutable position)))
     (apply.gloc.of make-record-type-descriptor "./boot/condition.scm" . 250894))
   (push)
   (extend . 1)
   (push.const . &i/o-invalid-position)
   (push.iloc.0 . 0)
   (call
     (push.iloc.0 . 0)
     (call (push.gloc.of &i/o) (apply.gloc.of record-type-rcd "./boot/condition.scm" . 251960))
     (push)
     (push.const . #f)
     (apply.gloc.of make-record-constructor-descriptor "./boot/condition.scm" . 251920))
   (push)
   (apply.gloc.of make-record-type "./boot/condition.scm" . 252935))
 (set.gloc.of &i/o-invalid-position)
 (ret.const.unspec))
((call
   (call
     (push.gloc.of &i/o-invalid-position)
     (apply.gloc.of record-type-rtd "./boot/condition.scm" . 254996))
   (push)
   (push.const . 0)
   (apply.gloc.of record-accessor "./boot/condition.scm" . 254979))
 (set.gloc.of &i/o-invalid-position-position)
 (ret.const.unspec))
((call
   (call
     (push.gloc.of &i/o-invalid-position)
     (apply.gloc.of record-type-rcd "./boot/condition.scm" . 257047))
   (push)
   (apply.gloc.of record-constructor "./boot/condition.scm" . 257027))
 (set.gloc.of make-i/o-invalid-position-error)
 (ret.const.unspec))
((call
   (call
     (push.gloc.of &i/o-invalid-position)
     (apply.gloc.of record-type-rtd "./boot/condition.scm" . 258106))
   (push)
   (apply.gloc.of condition-predicate "./boot/condition.scm" . 258085))
 (set.gloc.of i/o-invalid-position-error?)
 (ret.const.unspec))
((call
   (call
     (push.gloc.of &i/o-invalid-position)
     (apply.gloc.of record-type-rtd "./boot/condition.scm" . 260119))
   (push)
   (push.gloc.of &i/o-invalid-position-position)
   (apply.gloc.of condition-accessor "./boot/condition.scm" . 260099))
 (set.gloc.of i/o-error-position)
 (ret.const.unspec))
((call
   (call
     (push.const . &i/o-filename)
     (call (push.gloc.of &i/o) (apply.gloc.of record-type-rtd "./boot/condition.scm" . 263226))
     (push)
     (call
       (touch.gloc.of make-condition-uid)
       (apply.gloc.of make-condition-uid "./boot/condition.scm" . 263249))
     (push)
     (push.const . #f)
     (push.const . #f)
     (push.const . #((immutable filename)))
     (apply.gloc.of make-record-type-descriptor "./boot/condition.scm" . 263182))
   (push)
   (extend . 1)
   (push.const . &i/o-filename)
   (push.iloc.0 . 0)
   (call
     (push.iloc.0 . 0)
     (call (push.gloc.of &i/o) (apply.gloc.of record-type-rcd "./boot/condition.scm" . 264248))
     (push)
     (push.const . #f)
     (apply.gloc.of make-record-constructor-descriptor "./boot/condition.scm" . 264208))
   (push)
   (apply.gloc.of make-record-type "./boot/condition.scm" . 265223))
 (set.gloc.of &i/o-filename)
 (ret.const.unspec))
((call
   (call
     (push.gloc.of &i/o-filename)
     (apply.gloc.of record-type-rtd "./boot/condition.scm" . 266289))
   (push)
   (push.const . 0)
   (apply.gloc.of record-accessor "./boot/condition.scm" . 266272))
 (set.gloc.of &i/o-filename-filename)
 (ret.const.unspec))
((call
   (call
     (push.gloc.of &i/o-filename)
     (apply.gloc.of record-type-rcd "./boot/condition.scm" . 267317))
   (push)
   (apply.gloc.of record-constructor "./boot/condition.scm" . 267297))
 (set.gloc.of make-i/o-filename-error)
 (ret.const.unspec))
((call
   (call
     (push.gloc.of &i/o-filename)
     (apply.gloc.of record-type-rtd "./boot/condition.scm" . 268338))
   (push)
   (apply.gloc.of condition-predicate "./boot/condition.scm" . 268317))
 (set.gloc.of i/o-filename-error?)
 (ret.const.unspec))
((call
   (call
     (push.gloc.of &i/o-filename)
     (apply.gloc.of record-type-rtd "./boot/condition.scm" . 269360))
   (push)
   (push.gloc.of &i/o-filename-filename)
   (apply.gloc.of condition-accessor "./boot/condition.scm" . 269340))
 (set.gloc.of i/o-error-filename)
 (ret.const.unspec))
((call
   (call
     (push.const . &i/o-file-protection)
     (call
       (push.gloc.of &i/o-filename)
       (apply.gloc.of record-type-rtd "./boot/condition.scm" . 272449))
     (push)
     (call
       (touch.gloc.of make-condition-uid)
       (apply.gloc.of make-condition-uid "./boot/condition.scm" . 272481))
     (push)
     (push.const . #f)
     (push.const . #f)
     (push.const . #())
     (apply.gloc.of make-record-type-descriptor "./boot/condition.scm" . 272398))
   (push)
   (extend . 1)
   (push.const . &i/o-file-protection)
   (push.iloc.0 . 0)
   (call
     (push.iloc.0 . 0)
     (call
       (push.gloc.of &i/o-filename)
       (apply.gloc.of record-type-rcd "./boot/condition.scm" . 273464))
     (push)
     (push.const . #f)
     (apply.gloc.of make-record-constructor-descriptor "./boot/condition.scm" . 273424))
   (push)
   (apply.gloc.of make-record-type "./boot/condition.scm" . 274439))
 (set.gloc.of &i/o-file-protection)
 (ret.const.unspec))
((call
   (call
     (push.gloc.of &i/o-file-protection)
     (apply.gloc.of record-type-rcd "./boot/condition.scm" . 276503))
   (push)
   (apply.gloc.of record-constructor "./boot/condition.scm" . 276483))
 (set.gloc.of make-i/o-file-protection-error)
 (ret.const.unspec))
((call
   (call
     (push.gloc.of &i/o-file-protection)
     (apply.gloc.of record-type-rtd "./boot/condition.scm" . 277561))
   (push)
   (apply.gloc.of condition-predicate "./boot/condition.scm" . 277540))
 (set.gloc.of i/o-file-protection-error?)
 (ret.const.unspec))
((call
   (call
     (push.const . &i/o-file-is-read-only)
     (call
       (push.gloc.of &i/o-file-protection)
       (apply.gloc.of record-type-rtd "./boot/condition.scm" . 280643))
     (push)
     (call
       (touch.gloc.of make-condition-uid)
       (apply.gloc.of make-condition-uid "./boot/condition.scm" . 280682))
     (push)
     (push.const . #f)
     (push.const . #f)
     (push.const . #())
     (apply.gloc.of make-record-type-descriptor "./boot/condition.scm" . 280590))
   (push)
   (extend . 1)
   (push.const . &i/o-file-is-read-only)
   (push.iloc.0 . 0)
   (call
     (push.iloc.0 . 0)
     (call
       (push.gloc.of &i/o-file-protection)
       (apply.gloc.of record-type-rcd "./boot/condition.scm" . 281656))
     (push)
     (push.const . #f)
     (apply.gloc.of make-record-constructor-descriptor "./boot/condition.scm" . 281616))
   (push)
   (apply.gloc.of make-record-type "./boot/condition.scm" . 282631))
 (set.gloc.of &i/o-file-is-read-only)
 (ret.const.unspec))
((call
   (call
     (push.gloc.of &i/o-file-is-read-only)
     (apply.gloc.of record-type-rcd "./boot/condition.scm" . 283710))
   (push)
   (apply.gloc.of record-constructor "./boot/condition.scm" . 283690))
 (set.gloc.of make-i/o-file-is-read-only-error)
 (ret.const.unspec))
((call
   (call
     (push.gloc.of &i/o-file-is-read-only)
     (apply.gloc.of record-type-rtd "./boot/condition.scm" . 284731))
   (push)
   (apply.gloc.of condition-predicate "./boot/condition.scm" . 284710))
 (set.gloc.of i/o-file-is-read-only-error?)
 (ret.const.unspec))
((call
   (call
     (push.const . &i/o-file-already-exists)
     (call
       (push.gloc.of &i/o-filename)
       (apply.gloc.of record-type-rtd "./boot/condition.scm" . 287813))
     (push)
     (call
       (touch.gloc.of make-condition-uid)
       (apply.gloc.of make-condition-uid "./boot/condition.scm" . 287845))
     (push)
     (push.const . #f)
     (push.const . #f)
     (push.const . #())
     (apply.gloc.of make-record-type-descriptor "./boot/condition.scm" . 287758))
   (push)
   (extend . 1)
   (push.const . &i/o-file-already-exists)
   (push.iloc.0 . 0)
   (call
     (push.iloc.0 . 0)
     (call
       (push.gloc.of &i/o-filename)
       (apply.gloc.of record-type-rcd "./boot/condition.scm" . 288824))
     (push)
     (push.const . #f)
     (apply.gloc.of make-record-constructor-descriptor "./boot/condition.scm" . 288784))
   (push)
   (apply.gloc.of make-record-type "./boot/condition.scm" . 289799))
 (set.gloc.of &i/o-file-already-exists)
 (ret.const.unspec))
((call
   (call
     (push.gloc.of &i/o-file-already-exists)
     (apply.gloc.of record-type-rcd "./boot/condition.scm" . 290880))
   (push)
   (apply.gloc.of record-constructor "./boot/condition.scm" . 290860))
 (set.gloc.of make-i/o-file-already-exists-error)
 (ret.const.unspec))
((call
   (call
     (push.gloc.of &i/o-file-already-exists)
     (apply.gloc.of record-type-rtd "./boot/condition.scm" . 291901))
   (push)
   (apply.gloc.of condition-predicate "./boot/condition.scm" . 291880))
 (set.gloc.of i/o-file-already-exists-error?)
 (ret.const.unspec))
((call
   (call
     (push.const . &i/o-file-does-not-exist)
     (call
       (push.gloc.of &i/o-filename)
       (apply.gloc.of record-type-rtd "./boot/condition.scm" . 294981))
     (push)
     (call
       (touch.gloc.of make-condition-uid)
       (apply.gloc.of make-condition-uid "./boot/condition.scm" . 295013))
     (push)
     (push.const . #f)
     (push.const . #f)
     (push.const . #())
     (apply.gloc.of make-record-type-descriptor "./boot/condition.scm" . 294926))
   (push)
   (extend . 1)
   (push.const . &i/o-file-does-not-exist)
   (push.iloc.0 . 0)
   (call
     (push.iloc.0 . 0)
     (call
       (push.gloc.of &i/o-filename)
       (apply.gloc.of record-type-rcd "./boot/condition.scm" . 295992))
     (push)
     (push.const . #f)
     (apply.gloc.of make-record-constructor-descriptor "./boot/condition.scm" . 295952))
   (push)
   (apply.gloc.of make-record-type "./boot/condition.scm" . 296967))
 (set.gloc.of &i/o-file-does-not-exist)
 (ret.const.unspec))
((call
   (call
     (push.gloc.of &i/o-file-does-not-exist)
     (apply.gloc.of record-type-rcd "./boot/condition.scm" . 298048))
   (push)
   (apply.gloc.of record-constructor "./boot/condition.scm" . 298028))
 (set.gloc.of make-i/o-file-does-not-exist-error)
 (ret.const.unspec))
((call
   (call
     (push.gloc.of &i/o-file-does-not-exist)
     (apply.gloc.of record-type-rtd "./boot/condition.scm" . 299069))
   (push)
   (apply.gloc.of condition-predicate "./boot/condition.scm" . 299048))
 (set.gloc.of i/o-file-does-not-exist-error?)
 (ret.const.unspec))
((call
   (call
     (push.const . &i/o-port)
     (call (push.gloc.of &i/o) (apply.gloc.of record-type-rtd "./boot/condition.scm" . 302134))
     (push)
     (call
       (touch.gloc.of make-condition-uid)
       (apply.gloc.of make-condition-uid "./boot/condition.scm" . 302157))
     (push)
     (push.const . #f)
     (push.const . #f)
     (push.const . #((immutable port)))
     (apply.gloc.of make-record-type-descriptor "./boot/condition.scm" . 302094))
   (push)
   (extend . 1)
   (push.const . &i/o-port)
   (push.iloc.0 . 0)
   (call
     (push.iloc.0 . 0)
     (call (push.gloc.of &i/o) (apply.gloc.of record-type-rcd "./boot/condition.scm" . 303160))
     (push)
     (push.const . #f)
     (apply.gloc.of make-record-constructor-descriptor "./boot/condition.scm" . 303120))
   (push)
   (apply.gloc.of make-record-type "./boot/condition.scm" . 304135))
 (set.gloc.of &i/o-port)
 (ret.const.unspec))
((call
   (call (push.gloc.of &i/o-port) (apply.gloc.of record-type-rtd "./boot/condition.scm" . 305193))
   (push)
   (push.const . 0)
   (apply.gloc.of record-accessor "./boot/condition.scm" . 305176))
 (set.gloc.of &i/o-port-port)
 (ret.const.unspec))
((call
   (call (push.gloc.of &i/o-port) (apply.gloc.of record-type-rcd "./boot/condition.scm" . 306225))
   (push)
   (apply.gloc.of record-constructor "./boot/condition.scm" . 306205))
 (set.gloc.of make-i/o-port-error)
 (ret.const.unspec))
((call
   (call (push.gloc.of &i/o-port) (apply.gloc.of record-type-rtd "./boot/condition.scm" . 307246))
   (push)
   (apply.gloc.of condition-predicate "./boot/condition.scm" . 307225))
 (set.gloc.of i/o-port-error?)
 (ret.const.unspec))
((call
   (call (push.gloc.of &i/o-port) (apply.gloc.of record-type-rtd "./boot/condition.scm" . 308268))
   (push)
   (push.gloc.of &i/o-port-port)
   (apply.gloc.of condition-accessor "./boot/condition.scm" . 308248))
 (set.gloc.of i/o-error-port)
 (ret.const.unspec))
((call
   (call
     (push.const . &i/o-decoding)
     (call (push.gloc.of &i/o-port) (apply.gloc.of record-type-rtd "./boot/condition.scm" . 311354))
     (push)
     (call
       (touch.gloc.of make-condition-uid)
       (apply.gloc.of make-condition-uid "./boot/condition.scm" . 311382))
     (push)
     (push.const . #f)
     (push.const . #f)
     (push.const . #())
     (apply.gloc.of make-record-type-descriptor "./boot/condition.scm" . 311310))
   (push)
   (extend . 1)
   (push.const . &i/o-decoding)
   (push.iloc.0 . 0)
   (call
     (push.iloc.0 . 0)
     (call (push.gloc.of &i/o-port) (apply.gloc.of record-type-rcd "./boot/condition.scm" . 312376))
     (push)
     (push.const . #f)
     (apply.gloc.of make-record-constructor-descriptor "./boot/condition.scm" . 312336))
   (push)
   (apply.gloc.of make-record-type "./boot/condition.scm" . 313351))
 (set.gloc.of &i/o-decoding)
 (ret.const.unspec))
((call
   (call
     (push.gloc.of &i/o-decoding)
     (apply.gloc.of record-type-rcd "./boot/condition.scm" . 314421))
   (push)
   (apply.gloc.of record-constructor "./boot/condition.scm" . 314401))
 (set.gloc.of make-i/o-decoding-error)
 (ret.const.unspec))
((call
   (call
     (push.gloc.of &i/o-decoding)
     (apply.gloc.of record-type-rtd "./boot/condition.scm" . 315442))
   (push)
   (apply.gloc.of condition-predicate "./boot/condition.scm" . 315421))
 (set.gloc.of i/o-decoding-error?)
 (ret.const.unspec))
((call
   (call
     (push.const . &i/o-encoding)
     (call (push.gloc.of &i/o-port) (apply.gloc.of record-type-rtd "./boot/condition.scm" . 318522))
     (push)
     (call
       (touch.gloc.of make-condition-uid)
       (apply.gloc.of make-condition-uid "./boot/condition.scm" . 318550))
     (push)
     (push.const . #f)
     (push.const . #f)
     (push.const . #((immutable char)))
     (apply.gloc.of make-record-type-descriptor "./boot/condition.scm" . 318478))
   (push)
   (extend . 1)
   (push.const . &i/o-encoding)
   (push.iloc.0 . 0)
   (call
     (push.iloc.0 . 0)
     (call (push.gloc.of &i/o-port) (apply.gloc.of record-type-rcd "./boot/condition.scm" . 319544))
     (push)
     (push.const . #f)
     (apply.gloc.of make-record-constructor-descriptor "./boot/condition.scm" . 319504))
   (push)
   (apply.gloc.of make-record-type "./boot/condition.scm" . 320519))
 (set.gloc.of &i/o-encoding)
 (ret.const.unspec))
((call
   (call
     (push.gloc.of &i/o-encoding)
     (apply.gloc.of record-type-rtd "./boot/condition.scm" . 321581))
   (push)
   (push.const . 0)
   (apply.gloc.of record-accessor "./boot/condition.scm" . 321564))
 (set.gloc.of &i/o-encoding-char)
 (ret.const.unspec))
((call
   (call
     (push.gloc.of &i/o-encoding)
     (apply.gloc.of record-type-rcd "./boot/condition.scm" . 322613))
   (push)
   (apply.gloc.of record-constructor "./boot/condition.scm" . 322593))
 (set.gloc.of make-i/o-encoding-error)
 (ret.const.unspec))
((call
   (call
     (push.gloc.of &i/o-encoding)
     (apply.gloc.of record-type-rtd "./boot/condition.scm" . 323634))
   (push)
   (apply.gloc.of condition-predicate "./boot/condition.scm" . 323613))
 (set.gloc.of i/o-encoding-error?)
 (ret.const.unspec))
((call
   (call
     (push.gloc.of &i/o-encoding)
     (apply.gloc.of record-type-rtd "./boot/condition.scm" . 324661))
   (push)
   (push.gloc.of &i/o-encoding-char)
   (apply.gloc.of condition-accessor "./boot/condition.scm" . 324641))
 (set.gloc.of i/o-encoding-error-char)
 (ret.const.unspec))
((call
   (call
     (push.const . &no-infinities)
     (call
       (push.gloc.of &implementation-restriction)
       (apply.gloc.of record-type-rtd "./boot/condition.scm" . 327739))
     (push)
     (call
       (touch.gloc.of make-condition-uid)
       (apply.gloc.of make-condition-uid "./boot/condition.scm" . 327785))
     (push)
     (push.const . #f)
     (push.const . #f)
     (push.const . #())
     (apply.gloc.of make-record-type-descriptor "./boot/condition.scm" . 327694))
   (push)
   (extend . 1)
   (push.const . &no-infinities)
   (push.iloc.0 . 0)
   (call
     (push.iloc.0 . 0)
     (call
       (push.gloc.of &implementation-restriction)
       (apply.gloc.of record-type-rcd "./boot/condition.scm" . 328760))
     (push)
     (push.const . #f)
     (apply.gloc.of make-record-constructor-descriptor "./boot/condition.scm" . 328720))
   (push)
   (apply.gloc.of make-record-type "./boot/condition.scm" . 329735))
 (set.gloc.of &no-infinities)
 (ret.const.unspec))
((call
   (call
     (push.gloc.of &no-infinities)
     (apply.gloc.of record-type-rcd "./boot/condition.scm" . 330810))
   (push)
   (apply.gloc.of record-constructor "./boot/condition.scm" . 330790))
 (set.gloc.of make-no-infinities-violation)
 (ret.const.unspec))
((call
   (call
     (push.gloc.of &no-infinities)
     (apply.gloc.of record-type-rtd "./boot/condition.scm" . 331831))
   (push)
   (apply.gloc.of condition-predicate "./boot/condition.scm" . 331810))
 (set.gloc.of no-infinities-violation?)
 (ret.const.unspec))
((call
   (call
     (push.const . &no-nans)
     (call
       (push.gloc.of &implementation-restriction)
       (apply.gloc.of record-type-rtd "./boot/condition.scm" . 334901))
     (push)
     (call
       (touch.gloc.of make-condition-uid)
       (apply.gloc.of make-condition-uid "./boot/condition.scm" . 334947))
     (push)
     (push.const . #f)
     (push.const . #f)
     (push.const . #())
     (apply.gloc.of make-record-type-descriptor "./boot/condition.scm" . 334862))
   (push)
   (extend . 1)
   (push.const . &no-nans)
   (push.iloc.0 . 0)
   (call
     (push.iloc.0 . 0)
     (call
       (push.gloc.of &implementation-restriction)
       (apply.gloc.of record-type-rcd "./boot/condition.scm" . 335928))
     (push)
     (push.const . #f)
     (apply.gloc.of make-record-constructor-descriptor "./boot/condition.scm" . 335888))
   (push)
   (apply.gloc.of make-record-type "./boot/condition.scm" . 336903))
 (set.gloc.of &no-nans)
 (ret.const.unspec))
((call
   (call (push.gloc.of &no-nans) (apply.gloc.of record-type-rcd "./boot/condition.scm" . 337972))
   (push)
   (apply.gloc.of record-constructor "./boot/condition.scm" . 337952))
 (set.gloc.of make-no-nans-violation)
 (ret.const.unspec))
((call
   (call (push.gloc.of &no-nans) (apply.gloc.of record-type-rtd "./boot/condition.scm" . 338993))
   (push)
   (apply.gloc.of condition-predicate "./boot/condition.scm" . 338972))
 (set.gloc.of no-nans-violation?)
 (ret.const.unspec))

;
((call (push.const . 100) (apply.gloc.of make-parameter "./boot/pp.scm" . 61474))
 (set.gloc.of pretty-print-line-length)
 (ret.const.unspec))
((call (push.const . 0) (apply.gloc.of make-parameter "./boot/pp.scm" . 62501))
 (set.gloc.of pretty-print-initial-indent)
 (ret.const.unspec))
((call (push.const . #f) (apply.gloc.of make-parameter "./boot/pp.scm" . 63524))
 (set.gloc.of pretty-print-maximum-lines)
 (ret.const.unspec))
((call (push.const . #f) (apply.gloc.of make-parameter "./boot/pp.scm" . 64548))
 (set.gloc.of pretty-print-unwrap-syntax)
 (ret.const.unspec))
((close
   (1 0 . parse)
   (iloc.0 . 0)
   (if.pair?
     (call
       (iloc.0 . 0)
       (if.not.pair?.ret.const . #f)
       (cdr.iloc (0 . 0) (cdr |obj`3941*|))
       (ret.pair? (pair? (cdr |obj`3941*|))))
     (push)
     (extend . 1)
     (call
       (iloc.0 . 0)
       (if.false.ret)
       (cddr.iloc (1 . 0) (cddr |obj`3941*|))
       (ret.null? (null? (cddr |obj`3941*|))))
     (push)
     (extend . 1)
     (call
       (iloc.1 . 0)
       (if.false.ret)
       (cddr.iloc (2 . 0) (cddr |obj`3941*|))
       (ret.pair? (pair? (cddr |obj`3941*|))))
     (push)
     (extend . 1)
     (call
       (iloc.1 . 0)
       (if.false.ret)
       (push.car.iloc (3 . 0) (car |obj`3941*|))
       (const . quote)
       (ret.eq? (eq? (car |obj`3941*|) 'quote)))
     (if.true
       (push.const . "'")
       (push.const . |.&NEST|)
       (push.const . 1)
       (call
         (touch.gloc.of |parse`3866*|)
         (push.cadr.iloc (3 . 0) (cadr |obj`3941*|))
         (apply.gloc.of |parse`3866*| (|parse`3866*| (cadr |obj`3941*|))))
       (push)
       (push.subr.gloc.of |.list| 3 (|.list| '|.&NEST| 1 (|parse`3866*| (cadr |obj`3941*|))))
       (ret.subr.gloc.of
         |.list|
         (|.list| "'" (|.list| '|.&NEST| 1 (|parse`3866*| (cadr |obj`3941*|))))))
     (call
       (iloc.1 . 0)
       (if.false.ret)
       (push.car.iloc (3 . 0) (car |obj`3941*|))
       (const . unquote)
       (ret.eq? (eq? (car |obj`3941*|) 'unquote)))
     (if.true
       (push.const . ",")
       (push.const . |.&NEST|)
       (push.const . 1)
       (call
         (touch.gloc.of |parse`3866*|)
         (push.cadr.iloc (3 . 0) (cadr |obj`3941*|))
         (apply.gloc.of |parse`3866*| (|parse`3866*| (cadr |obj`3941*|))))
       (push)
       (push.subr.gloc.of |.list| 3 (|.list| '|.&NEST| 1 (|parse`3866*| (cadr |obj`3941*|))))
       (ret.subr.gloc.of
         |.list|
         (|.list| "," (|.list| '|.&NEST| 1 (|parse`3866*| (cadr |obj`3941*|))))))
     (call
       (iloc.1 . 0)
       (if.false.ret)
       (push.car.iloc (3 . 0) (car |obj`3941*|))
       (const . quasiquote)
       (ret.eq? (eq? (car |obj`3941*|) 'quasiquote)))
     (if.true
       (push.const . "`")
       (push.const . |.&NEST|)
       (push.const . 1)
       (call
         (touch.gloc.of |parse`3866*|)
         (push.cadr.iloc (3 . 0) (cadr |obj`3941*|))
         (apply.gloc.of |parse`3866*| (|parse`3866*| (cadr |obj`3941*|))))
       (push)
       (push.subr.gloc.of |.list| 3 (|.list| '|.&NEST| 1 (|parse`3866*| (cadr |obj`3941*|))))
       (ret.subr.gloc.of
         |.list|
         (|.list| "`" (|.list| '|.&NEST| 1 (|parse`3866*| (cadr |obj`3941*|))))))
     (call
       (iloc.1 . 0)
       (if.false.ret)
       (push.car.iloc (3 . 0) (car |obj`3941*|))
       (const . unquote-splicing)
       (ret.eq? (eq? (car |obj`3941*|) 'unquote-splicing)))
     (if.true
       (push.const . ",@")
       (push.const . |.&NEST|)
       (push.const . 2)
       (call
         (touch.gloc.of |parse`3866*|)
         (push.cadr.iloc (3 . 0) (cadr |obj`3941*|))
         (apply.gloc.of |parse`3866*| (|parse`3866*| (cadr |obj`3941*|))))
       (push)
       (push.subr.gloc.of |.list| 3 (|.list| '|.&NEST| 2 (|parse`3866*| (cadr |obj`3941*|))))
       (ret.subr.gloc.of
         |.list|
         (|.list| ",@" (|.list| '|.&NEST| 2 (|parse`3866*| (cadr |obj`3941*|))))))
     (call
       (iloc.0 . 0)
       (if.false.ret)
       (push.car.iloc (3 . 0) (car |obj`3941*|))
       (const . let)
       (if.not.eq?.ret.const . #f)
       (cadr.iloc (3 . 0) (cadr |obj`3941*|))
       (if.not.symbol?.ret.const . #f)
       (push.iloc 3 . 0)
       (subr.gloc.of cdddr 1 (cdddr |obj`3941*|))
       (ret.pair? (pair? (cdddr |obj`3941*|))))
     (if.true
       (push.iloc 3 . 0)
       (push.subr.gloc.of cdddr 1 (cdddr |obj`3941*|))
       (push.iloc 3 . 0)
       (push.subr.gloc.of caddr 1 (caddr |obj`3941*|))
       (push.cadr.iloc (3 . 0) (cadr |obj`3941*|))
       (extend . 3)
       (push.const . |.&GROUP|)
       (push.const . "(let ~a ")
       (push.iloc.0 . 2)
       (push.subr.gloc.of format 2 (format "(let ~a " |e1`3961*|))
       (push.const . |.&NEST|)
       (push.const . 2)
       (push.const . |.&NEST|)
       (call
         (touch.gloc.of |symbol->length`3866*|)
         (push.iloc.0 . 2)
         (apply.gloc.of |symbol->length`3866*| (|symbol->length`3866*| |e1`3961*|)))
       (push)
       (push.const . 4)
       (push.subr.gloc.of + 2 (+ (|symbol->length`3866*| |e1`3961*|) 4))
       (call
         (touch.gloc.of |parse`3866*|)
         (push.iloc.0 . 1)
         (apply.gloc.of |parse`3866*| (|parse`3866*| |e2`3961*|)))
       (push)
       (push.subr.gloc.of
         |.list|
         3
         (|.list| '|.&NEST| (+ (|symbol->length`3866*| |e1`3961*|) 4) (|parse`3866*| |e2`3961*|)))
       (push.const . #\;)
       (call
         (touch.gloc.of |parse-list`3866*|)
         (push.iloc.0 . 0)
         (apply.gloc.of |parse-list`3866*| (|parse-list`3866*| |e3`3961*|)))
       (push)
       (push.const ")")
       (push.subr.gloc.of |.append| 2 (|.append| (|parse-list`3866*| |e3`3961*|) '(")")))
       (push.subr.gloc.of
         |.cons*|
         5
         (|.cons*|
           '|.&NEST|
           2
           (|.list| '|.&NEST| (+ (|symbol->length`3866*| |e1`3961*|) 4) (|parse`3866*| |e2`3961*|))
           #\;
           (|.append| (|parse-list`3866*| |e3`3961*|) '(")"))))
       (ret.subr.gloc.of
         |.list|
         (|.list|
           '|.&GROUP|
           (format "(let ~a " |e1`3961*|)
           (|.cons*|
             '|.&NEST|
             2
             (|.list|
               '|.&NEST|
               (+ (|symbol->length`3866*| |e1`3961*|) 4)
               (|parse`3866*| |e2`3961*|))
             #\;
             (|.append| (|parse-list`3866*| |e3`3961*|) '(")"))))))
     (call
       (iloc 2 . 0)
       (if.false.ret)
       (call
         (touch.gloc.of |indent-type1?`3866*|)
         (push.car.iloc (3 . 0) (car |obj`3941*|))
         (apply.gloc.of |indent-type1?`3866*| (|indent-type1?`3866*| (car |obj`3941*|))))
       (if.false.ret)
       (cddr.iloc (3 . 0) (cddr |obj`3941*|))
       (ret.pair? (pair? (cddr |obj`3941*|))))
     (if.true
       (push.cddr.iloc (3 . 0) (cddr |obj`3941*|))
       (push.cadr.iloc (3 . 0) (cadr |obj`3941*|))
       (push.car.iloc (3 . 0) (car |obj`3941*|))
       (extend . 3)
       (push.const . |.&GROUP|)
       (push.const . "(~a ")
       (push.iloc.0 . 2)
       (push.subr.gloc.of format 2 (format "(~a " |e1`3963*|))
       (push.const . |.&NEST|)
       (push.const . 2)
       (push.const . |.&NEST|)
       (call
         (touch.gloc.of |symbol->length`3866*|)
         (push.iloc.0 . 2)
         (apply.gloc.of |symbol->length`3866*| (|symbol->length`3866*| |e1`3963*|)))
       (push)
       (call
         (touch.gloc.of |parse`3866*|)
         (push.iloc.0 . 1)
         (apply.gloc.of |parse`3866*| (|parse`3866*| |e2`3963*|)))
       (push)
       (push.subr.gloc.of
         |.list|
         3
         (|.list| '|.&NEST| (|symbol->length`3866*| |e1`3963*|) (|parse`3866*| |e2`3963*|)))
       (push.const . #\;)
       (call
         (touch.gloc.of |parse-list`3866*|)
         (push.iloc.0 . 0)
         (apply.gloc.of |parse-list`3866*| (|parse-list`3866*| |e3`3963*|)))
       (push)
       (push.const ")")
       (push.subr.gloc.of |.append| 2 (|.append| (|parse-list`3866*| |e3`3963*|) '(")")))
       (push.subr.gloc.of
         |.cons*|
         5
         (|.cons*|
           '|.&NEST|
           2
           (|.list| '|.&NEST| (|symbol->length`3866*| |e1`3963*|) (|parse`3866*| |e2`3963*|))
           #\;
           (|.append| (|parse-list`3866*| |e3`3963*|) '(")"))))
       (ret.subr.gloc.of
         |.list|
         (|.list|
           '|.&GROUP|
           (format "(~a " |e1`3963*|)
           (|.cons*|
             '|.&NEST|
             2
             (|.list| '|.&NEST| (|symbol->length`3866*| |e1`3963*|) (|parse`3866*| |e2`3963*|))
             #\;
             (|.append| (|parse-list`3866*| |e3`3963*|) '(")"))))))
     (call
       (iloc 2 . 0)
       (if.false.ret)
       (call
         (touch.gloc.of |indent-type2?`3866*|)
         (push.car.iloc (3 . 0) (car |obj`3941*|))
         (apply.gloc.of |indent-type2?`3866*| (|indent-type2?`3866*| (car |obj`3941*|))))
       (if.false.ret)
       (cddr.iloc (3 . 0) (cddr |obj`3941*|))
       (ret.pair? (pair? (cddr |obj`3941*|))))
     (if.true
       (push.cddr.iloc (3 . 0) (cddr |obj`3941*|))
       (push.cadr.iloc (3 . 0) (cadr |obj`3941*|))
       (push.car.iloc (3 . 0) (car |obj`3941*|))
       (extend . 3)
       (push.const . |.&GROUP|)
       (push.const . "(~a ")
       (push.iloc.0 . 2)
       (push.subr.gloc.of format 2 (format "(~a " |e1`3965*|))
       (push.const . |.&NEST|)
       (call
         (touch.gloc.of |symbol->length`3866*|)
         (push.iloc.0 . 2)
         (apply.gloc.of |symbol->length`3866*| (|symbol->length`3866*| |e1`3965*|)))
       (push)
       (push.const . 2)
       (push.subr.gloc.of + 2 (+ (|symbol->length`3866*| |e1`3965*|) 2))
       (call
         (touch.gloc.of |parse`3866*|)
         (push.iloc.0 . 1)
         (apply.gloc.of |parse`3866*| (|parse`3866*| |e2`3965*|)))
       (push)
       (push.const . #\;)
       (call
         (touch.gloc.of |parse-list`3866*|)
         (push.iloc.0 . 0)
         (apply.gloc.of |parse-list`3866*| (|parse-list`3866*| |e3`3965*|)))
       (push)
       (push.subr.gloc.of
         |.cons*|
         5
         (|.cons*|
           '|.&NEST|
           (+ (|symbol->length`3866*| |e1`3965*|) 2)
           (|parse`3866*| |e2`3965*|)
           #\;
           (|parse-list`3866*| |e3`3965*|)))
       (push.const ")")
       (ret.subr.gloc.of
         |.cons*|
         (|.cons*|
           '|.&GROUP|
           (format "(~a " |e1`3965*|)
           (|.cons*|
             '|.&NEST|
             (+ (|symbol->length`3866*| |e1`3965*|) 2)
             (|parse`3866*| |e2`3965*|)
             #\;
             (|parse-list`3866*| |e3`3965*|))
           '(")"))))
     (call
       (iloc.0 . 0)
       (if.false.ret)
       (call
         (touch.gloc.of |indent-type3?`3866*|)
         (push.car.iloc (3 . 0) (car |obj`3941*|))
         (apply.gloc.of |indent-type3?`3866*| (|indent-type3?`3866*| (car |obj`3941*|))))
       (if.false.ret)
       (push.iloc 3 . 0)
       (subr.gloc.of cdddr 1 (cdddr |obj`3941*|))
       (ret.pair? (pair? (cdddr |obj`3941*|))))
     (if.true
       (push.iloc 3 . 0)
       (push.subr.gloc.of cdddr 1 (cdddr |obj`3941*|))
       (push.iloc 3 . 0)
       (push.subr.gloc.of caddr 1 (caddr |obj`3941*|))
       (push.cadr.iloc (3 . 0) (cadr |obj`3941*|))
       (extend . 3)
       (push.const . |.&GROUP|)
       (push.const . "(~a ")
       (push.car.iloc (4 . 0) (car |obj`3941*|))
       (push.subr.gloc.of format 2 (format "(~a " (car |obj`3941*|)))
       (push.const . |.&NEST|)
       (push.const . 2)
       (push.const . |.&NEST|)
       (push.const . 2)
       (call
         (touch.gloc.of |parse`3866*|)
         (push.iloc.0 . 2)
         (apply.gloc.of |parse`3866*| (|parse`3866*| |e2`3967*|)))
       (push)
       (push.const . #\;)
       (call
         (touch.gloc.of |parse`3866*|)
         (push.iloc.0 . 1)
         (apply.gloc.of |parse`3866*| (|parse`3866*| |e3`3967*|)))
       (push)
       (push.subr.gloc.of
         |.list|
         5
         (|.list| '|.&NEST| 2 (|parse`3866*| |e2`3967*|) #\; (|parse`3866*| |e3`3967*|)))
       (push.const . #\;)
       (call
         (touch.gloc.of |parse-list`3866*|)
         (push.iloc.0 . 0)
         (apply.gloc.of |parse-list`3866*| (|parse-list`3866*| |e4`3967*|)))
       (push)
       (push.const ")")
       (push.subr.gloc.of |.append| 2 (|.append| (|parse-list`3866*| |e4`3967*|) '(")")))
       (push.subr.gloc.of
         |.cons*|
         5
         (|.cons*|
           '|.&NEST|
           2
           (|.list| '|.&NEST| 2 (|parse`3866*| |e2`3967*|) #\; (|parse`3866*| |e3`3967*|))
           #\;
           (|.append| (|parse-list`3866*| |e4`3967*|) '(")"))))
       (ret.subr.gloc.of
         |.list|
         (|.list|
           '|.&GROUP|
           (format "(~a " (car |obj`3941*|))
           (|.cons*|
             '|.&NEST|
             2
             (|.list| '|.&NEST| 2 (|parse`3866*| |e2`3967*|) #\; (|parse`3866*| |e3`3967*|))
             #\;
             (|.append| (|parse-list`3866*| |e4`3967*|) '(")"))))))
     (call
       (iloc 3 . 0)
       (if.not.pair?.ret.const . #f)
       (push.car.iloc (3 . 0) (car |obj`3941*|))
       (ret.subr.gloc.of symbol? (symbol? (car |obj`3941*|))))
     (if.true
       (push.const . |.&GROUP|)
       (push.const . "(")
       (push.const . |.&NEST|)
       (push.const . 2)
       (call
         (touch.gloc.of |parse-list`3866*|)
         (push.iloc 3 . 0)
         (apply.gloc.of |parse-list`3866*| (|parse-list`3866*| |obj`3941*|)))
       (push)
       (push.subr.gloc.of |.cons*| 3 (|.cons*| '|.&NEST| 2 (|parse-list`3866*| |obj`3941*|)))
       (push.const ")")
       (ret.subr.gloc.of
         |.cons*|
         (|.cons*| '|.&GROUP| "(" (|.cons*| '|.&NEST| 2 (|parse-list`3866*| |obj`3941*|)) '(")"))))
     (push.const . |.&GROUP|)
     (push.const . "(")
     (push.const . |.&NEST|)
     (push.const . 1)
     (call
       (touch.gloc.of |parse-list`3866*|)
       (push.iloc 3 . 0)
       (apply.gloc.of |parse-list`3866*| (|parse-list`3866*| |obj`3941*|)))
     (push)
     (push.subr.gloc.of |.cons*| 3 (|.cons*| '|.&NEST| 1 (|parse-list`3866*| |obj`3941*|)))
     (push.const ")")
     (ret.subr.gloc.of
       |.cons*|
       (|.cons*| '|.&GROUP| "(" (|.cons*| '|.&NEST| 1 (|parse-list`3866*| |obj`3941*|)) '(")"))))
   (push.iloc.0 . 0)
   (subr.gloc.of vector? 1 "./boot/pp.scm" . 183314)
   (if.true
     (push.iloc.0 . 0)
     (push.subr.gloc.of vector-length 1 "./boot/pp.scm" . 184345)
     (push.const . 0)
     (subr.gloc.of = 2 "./boot/pp.scm" . 184342)
     (if.true.ret.const . "#()")
     (push.const . |.&GROUP|)
     (push.const . "#(")
     (push.const . |.&NEST|)
     (push.const . 2)
     (call
       (touch.gloc.of |parse-list`3866*|)
       (push.iloc.0 . 0)
       (push.subr.gloc.of vector->list 1 "./boot/pp.scm" . 186429)
       (apply.gloc.of |parse-list`3866*| "./boot/pp.scm" . 186417))
     (push)
     (push.subr.gloc.of |.cons*| 3 "./boot/pp.scm" . 186417)
     (push.const ")")
     (ret.subr.gloc.of |.cons*| "./boot/pp.scm" . 184338))
   (push.iloc.0 . 0)
   (subr.gloc.of tuple? 1 "./boot/pp.scm" . 187410)
   (if.true
     (push.const . "~w")
     (push.iloc.0 . 0)
     (ret.subr.gloc.of format "./boot/pp.scm" . 188434))
   (call (apply.gloc.of pretty-print-unwrap-syntax "./boot/pp.scm" . 189458))
   (if.true
     (push.const . "~u")
     (push.iloc.0 . 0)
     (ret.subr.gloc.of format "./boot/pp.scm" . 190482))
   (push.const . "~s")
   (push.iloc.0 . 0)
   (ret.subr.gloc.of format "./boot/pp.scm" . 192530))
 (set.gloc.of |parse`3866*|)
 (close
   (1 0 . parse-list)
   (iloc.0 . 0)
   (if.null?.ret.const)
   (cdr.iloc (0 . 0) "./boot/pp.scm" . 138265)
   (if.null?
     (call
       (touch.gloc.of |parse`3866*|)
       (push.car.iloc (0 . 0) "./boot/pp.scm" . 139295)
       (apply.gloc.of |parse`3866*| "./boot/pp.scm" . 139288))
     (push)
     (ret.subr.gloc.of list "./boot/pp.scm" . 139282))
   (cdr.iloc (0 . 0) "./boot/pp.scm" . 140313)
   (if.pair?
     (call
       (touch.gloc.of |parse`3866*|)
       (push.car.iloc (0 . 0) "./boot/pp.scm" . 141344)
       (apply.gloc.of |parse`3866*| "./boot/pp.scm" . 141337))
     (push)
     (push.const . #\;)
     (call
       (touch.gloc.of |parse-list`3866*|)
       (push.cdr.iloc (0 . 0) "./boot/pp.scm" . 141371)
       (apply.gloc.of |parse-list`3866*| "./boot/pp.scm" . 141359))
     (push)
     (ret.subr.gloc.of cons* "./boot/pp.scm" . 141330))
   (call
     (touch.gloc.of |parse`3866*|)
     (push.car.iloc (0 . 0) "./boot/pp.scm" . 143391)
     (apply.gloc.of |parse`3866*| "./boot/pp.scm" . 143384))
   (push)
   (push.const . #\;)
   (push.const . ".")
   (push.const . #\;)
   (call
     (touch.gloc.of |parse`3866*|)
     (push.cdr.iloc (0 . 0) "./boot/pp.scm" . 143421)
     (apply.gloc.of |parse`3866*| "./boot/pp.scm" . 143414))
   (push)
   (ret.subr.gloc.of list "./boot/pp.scm" . 143378))
 (set.gloc.of |parse-list`3866*|)
 (close
   (1 0 . symbol->length)
   (push.iloc.0 . 0)
   (push.subr.gloc.of symbol->string 1 "./boot/pp.scm" . 133146)
   (ret.subr.gloc.of string-length "./boot/pp.scm" . 133131))
 (set.gloc.of |symbol->length`3866*|)
 (close
   (1 0 . indent-type1?)
   (push.iloc.0 . 0)
   (push.const
     library
     define
     define-syntax
     define-macro
     define-inline
     define-constant
     syntax-rules
     syntax-case
     with-syntax
     lambda
     let-syntax
     letrec-syntax
     let
     letrec
     let*
     letrec
     letrec*
     let-values
     let*-values
     destructuring-match
     parameterize)
   (ret.subr.gloc.of memq "./boot/pp.scm" . 73739))
 (set.gloc.of |indent-type1?`3866*|)
 (close
   (2 0 . fits?)
   (>=n.iloc (0 . 0) 0 "./boot/pp.scm" . 90128)
   (if.false.ret)
   (iloc.0 . 1)
   (if.null?.ret.const . #t)
   (call
     (iloc.0 . 1)
     (if.not.pair?.ret.const . #f)
     (car.iloc (0 . 1) (car |lst`3873*|))
     (if.not.pair?.ret.const . #f)
     (push.iloc.0 . 1)
     (subr.gloc.of cdar 1 (cdar |lst`3873*|))
     (if.not.pair?.ret.const . #f)
     (push.iloc.0 . 1)
     (subr.gloc.of cddar 1 (cddar |lst`3873*|))
     (ret.pair? (pair? (cddar |lst`3873*|))))
   (push)
   (extend . 1)
   (call
     (iloc.0 . 0)
     (if.false.ret)
     (push.iloc.1 . 1)
     (subr.gloc.of cdddar 1 (cdddar |lst`3873*|))
     (ret.null? (null? (cdddar |lst`3873*|))))
   (push)
   (extend . 1)
   (call
     (iloc.1 . 0)
     (if.false.ret)
     (push.iloc 2 . 1)
     (subr.gloc.of caddar 1 (caddar |lst`3873*|))
     (ret.pair? (pair? (caddar |lst`3873*|))))
   (push)
   (extend . 1)
   (call
     (iloc.0 . 0)
     (if.false.ret)
     (push.iloc 3 . 1)
     (subr.gloc.of cdddar 1 (cdddar |lst`3873*|))
     (ret.null? (null? (cdddar |lst`3873*|))))
   (push)
   (extend . 1)
   (call
     (iloc 3 . 0)
     (if.false.ret)
     (push.iloc 4 . 1)
     (subr.gloc.of caddar 1 (caddar |lst`3873*|))
     (if.not.null?.ret.const . #f)
     (push.iloc 4 . 1)
     (subr.gloc.of cdddar 1 (cdddar |lst`3873*|))
     (ret.null? (null? (cdddar |lst`3873*|))))
   (if.true
     (touch.gloc.of |fits?`3866*|)
     (push.iloc 4 . 0)
     (push.cdr.iloc (4 . 1) (cdr |lst`3873*|))
     (apply.gloc.of |fits?`3866*| (|fits?`3866*| |w`3873*| (cdr |lst`3873*|))))
   (call
     (iloc 2 . 0)
     (if.false.ret)
     (push.iloc 4 . 1)
     (push.subr.gloc.of cadar 1 (cadar |lst`3873*|))
     (const . |.&BREAK|)
     (if.not.eq?.ret.const . #f)
     (push.iloc 4 . 1)
     (push.subr.gloc.of caddar 1 (caddar |lst`3873*|))
     (const . #\;)
     (ret.eq? (eq? (caddar |lst`3873*|) #\;)))
   (if.true.ret.const . #t)
   (call
     (iloc 2 . 0)
     (if.false.ret)
     (push.iloc 4 . 1)
     (push.subr.gloc.of cadar 1 (cadar |lst`3873*|))
     (const . |.&FLAT|)
     (if.not.eq?.ret.const . #f)
     (push.iloc 4 . 1)
     (push.subr.gloc.of caddar 1 (caddar |lst`3873*|))
     (const . #\;)
     (ret.eq? (eq? (caddar |lst`3873*|) #\;)))
   (if.true
     (touch.gloc.of |fits?`3866*|)
     (push.n+.iloc (4 . 0) -1 (- |w`3873*| 1))
     (push.cdr.iloc (4 . 1) (cdr |lst`3873*|))
     (apply.gloc.of |fits?`3866*| (|fits?`3866*| (- |w`3873*| 1) (cdr |lst`3873*|))))
   (call
     (iloc 2 . 0)
     (if.false.ret)
     (push.iloc 4 . 1)
     (push.subr.gloc.of caddar 1 (caddar |lst`3873*|))
     (ret.subr.gloc.of string? (string? (caddar |lst`3873*|))))
   (if.true
     (touch.gloc.of |fits?`3866*|)
     (push.iloc 4 . 0)
     (push.iloc 4 . 1)
     (push.subr.gloc.of caddar 1 (caddar |lst`3873*|))
     (push.subr.gloc.of string-length 1 (string-length (caddar |lst`3873*|)))
     (push.subr.gloc.of - 2 (- |w`3873*| (string-length (caddar |lst`3873*|))))
     (push.cdr.iloc (4 . 1) (cdr |lst`3873*|))
     (apply.gloc.of
       |fits?`3866*|
       (|fits?`3866*| (- |w`3873*| (string-length (caddar |lst`3873*|))) (cdr |lst`3873*|))))
   (call
     (iloc.0 . 0)
     (if.false.ret)
     (push.iloc 4 . 1)
     (push.subr.gloc.of caddar 1 (caddar |lst`3873*|))
     (push.subr.gloc.of car 1 (car (caddar |lst`3873*|)))
     (const . |.&GROUP|)
     (ret.eq? (eq? (car (caddar |lst`3873*|)) '|.&GROUP|)))
   (if.true
     (touch.gloc.of |fits?`3866*|)
     (push.iloc 4 . 0)
     (push.iloc 4 . 1)
     (push.subr.gloc.of caar 1 (caar |lst`3873*|))
     (push.const . |.&FLAT|)
     (push.iloc 4 . 1)
     (push.subr.gloc.of caddar 1 (caddar |lst`3873*|))
     (push.subr.gloc.of cdr 1 (cdr (caddar |lst`3873*|)))
     (push.subr.gloc.of |.list| 3 (|.list| (caar |lst`3873*|) '|.&FLAT| (cdr (caddar |lst`3873*|))))
     (cdr.iloc (4 . 1) (cdr |lst`3873*|))
     (push.cons)
     (apply.gloc.of
       |fits?`3866*|
       (|fits?`3866*|
         |w`3873*|
         (|.cons|
           (|.list| (caar |lst`3873*|) '|.&FLAT| (cdr (caddar |lst`3873*|)))
           (cdr |lst`3873*|)))))
   (call
     (iloc.1 . 0)
     (if.false.ret)
     (push.iloc 4 . 1)
     (push.subr.gloc.of caddar 1 (caddar |lst`3873*|))
     (subr.gloc.of cdr 1 (cdr (caddar |lst`3873*|)))
     (if.not.pair?.ret.const . #f)
     (push.iloc 4 . 1)
     (subr.gloc.of cdddar 1 (cdddar |lst`3873*|))
     (if.not.null?.ret.const . #f)
     (push.iloc 4 . 1)
     (push.subr.gloc.of caddar 1 (caddar |lst`3873*|))
     (push.subr.gloc.of car 1 (car (caddar |lst`3873*|)))
     (const . |.&NEST|)
     (ret.eq? (eq? (car (caddar |lst`3873*|)) '|.&NEST|)))
   (if.true
     (touch.gloc.of |fits?`3866*|)
     (push.iloc 4 . 0)
     (push.iloc 4 . 1)
     (push.subr.gloc.of caar 1 (caar |lst`3873*|))
     (push.iloc 4 . 1)
     (push.subr.gloc.of caddar 1 (caddar |lst`3873*|))
     (push.subr.gloc.of cadr 1 (cadr (caddar |lst`3873*|)))
     (push.subr.gloc.of + 2 (+ (caar |lst`3873*|) (cadr (caddar |lst`3873*|))))
     (push.iloc 4 . 1)
     (push.subr.gloc.of cadar 1 (cadar |lst`3873*|))
     (push.iloc 4 . 1)
     (push.subr.gloc.of caddar 1 (caddar |lst`3873*|))
     (push.subr.gloc.of cddr 1 (cddr (caddar |lst`3873*|)))
     (push.subr.gloc.of
       |.list|
       3
       (|.list|
         (+ (caar |lst`3873*|) (cadr (caddar |lst`3873*|)))
         (cadar |lst`3873*|)
         (cddr (caddar |lst`3873*|))))
     (cdr.iloc (4 . 1) (cdr |lst`3873*|))
     (push.cons)
     (apply.gloc.of
       |fits?`3866*|
       (|fits?`3866*|
         |w`3873*|
         (|.cons|
           (|.list|
             (+ (caar |lst`3873*|) (cadr (caddar |lst`3873*|)))
             (cadar |lst`3873*|)
             (cddr (caddar |lst`3873*|)))
           (cdr |lst`3873*|)))))
   (iloc.0 . 0)
   (if.false.ret)
   (push.iloc 4 . 1)
   (push.subr.gloc.of cadar 1 (cadar |lst`3873*|))
   (push.iloc 4 . 1)
   (push.subr.gloc.of caar 1 (caar |lst`3873*|))
   (extend . 2)
   (touch.gloc.of |fits?`3866*|)
   (push.iloc 5 . 0)
   (push.iloc.0 . 1)
   (push.iloc.0 . 0)
   (push.iloc 5 . 1)
   (push.subr.gloc.of caddar 1 (caddar |lst`3873*|))
   (push.subr.gloc.of car 1 (car (caddar |lst`3873*|)))
   (push.subr.gloc.of |.list| 3 (|.list| |i`3899*| |m`3899*| (car (caddar |lst`3873*|))))
   (push.iloc.0 . 1)
   (push.iloc.0 . 0)
   (push.iloc 5 . 1)
   (push.subr.gloc.of caddar 1 (caddar |lst`3873*|))
   (push.subr.gloc.of cdr 1 (cdr (caddar |lst`3873*|)))
   (push.subr.gloc.of |.list| 3 (|.list| |i`3899*| |m`3899*| (cdr (caddar |lst`3873*|))))
   (push.cdr.iloc (5 . 1) (cdr |lst`3873*|))
   (push.subr.gloc.of
     |.cons*|
     3
     (|.cons*|
       (|.list| |i`3899*| |m`3899*| (car (caddar |lst`3873*|)))
       (|.list| |i`3899*| |m`3899*| (cdr (caddar |lst`3873*|)))
       (cdr |lst`3873*|)))
   (apply.gloc.of
     |fits?`3866*|
     (|fits?`3866*|
       |w`3873*|
       (|.cons*|
         (|.list| |i`3899*| |m`3899*| (car (caddar |lst`3873*|)))
         (|.list| |i`3899*| |m`3899*| (cdr (caddar |lst`3873*|)))
         (cdr |lst`3873*|)))))
 (set.gloc.of |fits?`3866*|)
 (close
   (1 0 . indent-type3?)
   (push.iloc.0 . 0)
   (push.const do let-optionals)
   (ret.subr.gloc.of memq "./boot/pp.scm" . 86027))
 (set.gloc.of |indent-type3?`3866*|)
 (close
   (1 0 . indent-type2?)
   (push.iloc.0 . 0)
   (push.const if cond case and or set! import export cons map for-each exists for-all)
   (ret.subr.gloc.of memq "./boot/pp.scm" . 81931))
 (set.gloc.of |indent-type2?`3866*|)
 (close
   (1 1 . pretty-print)
   (call
     (iloc.0 . 1)
     (if.pair? (push.iloc.0 . 1) (ret.subr.gloc.of car "./boot/pp.scm" . 68642))
     (ret.subr.gloc.of current-output-port "./boot/pp.scm" . 68653))
   (push)
   (call
     (call (apply.gloc.of pretty-print-maximum-lines "./boot/pp.scm" . 69662))
     (if.false.ret)
     (call (apply.gloc.of pretty-print-maximum-lines "./boot/pp.scm" . 69694))
     (push)
     (push.const . 1)
     (ret.subr.gloc.of - "./boot/pp.scm" . 69691))
   (push)
   (extend . 2)
   (extend.enclose
     (3 0 . print)
     (iloc.0 . 2)
     (if.null?.ret.const . #t)
     (push.gloc.of string?)
     (extend . 1)
     (call
       (iloc.1 . 2)
       (if.not.pair?.ret.const . #f)
       (car.iloc (1 . 2) (car |lst`3901*|))
       (if.not.pair?.ret.const . #f)
       (push.iloc.1 . 2)
       (subr.gloc.of cdar 1 (cdar |lst`3901*|))
       (if.not.pair?.ret.const . #f)
       (push.iloc.1 . 2)
       (subr.gloc.of cddar 1 (cddar |lst`3901*|))
       (ret.pair? (pair? (cddar |lst`3901*|))))
     (push)
     (extend . 1)
     (call
       (iloc.0 . 0)
       (if.false.ret)
       (push.iloc 2 . 2)
       (subr.gloc.of cdddar 1 (cdddar |lst`3901*|))
       (ret.null? (null? (cdddar |lst`3901*|))))
     (push)
     (extend . 1)
     (call
       (iloc.1 . 0)
       (if.false.ret)
       (push.iloc 3 . 2)
       (subr.gloc.of caddar 1 (caddar |lst`3901*|))
       (ret.pair? (pair? (caddar |lst`3901*|))))
     (push)
     (extend . 1)
     (call
       (iloc.0 . 0)
       (if.false.ret)
       (push.iloc 4 . 2)
       (subr.gloc.of cdddar 1 (cdddar |lst`3901*|))
       (ret.null? (null? (cdddar |lst`3901*|))))
     (push)
     (extend . 1)
     (call
       (iloc 3 . 0)
       (if.false.ret)
       (push.iloc 5 . 2)
       (subr.gloc.of caddar 1 (caddar |lst`3901*|))
       (if.not.null?.ret.const . #f)
       (push.iloc 5 . 2)
       (subr.gloc.of cdddar 1 (cdddar |lst`3901*|))
       (ret.null? (null? (cdddar |lst`3901*|))))
     (if.true
       (push.iloc 5 . 0)
       (push.iloc 5 . 1)
       (push.cdr.iloc (5 . 2) (cdr |lst`3901*|))
       (apply.iloc (6 . 0) (|print`3866*| |w`3901*| |k`3901*| (cdr |lst`3901*|))))
     (call
       (iloc 2 . 0)
       (if.false.ret)
       (push.iloc 5 . 2)
       (push.subr.gloc.of cadar 1 (cadar |lst`3901*|))
       (const . |.&BREAK|)
       (if.not.eq?.ret.const . #f)
       (push.iloc 5 . 2)
       (push.subr.gloc.of caddar 1 (caddar |lst`3901*|))
       (const . #\;)
       (ret.eq? (eq? (caddar |lst`3901*|) #\;)))
     (if.true
       (push.cdr.iloc (5 . 2) (cdr |lst`3901*|))
       (push.iloc 5 . 2)
       (push.subr.gloc.of caar 1 (caar |lst`3901*|))
       (extend . 2)
       (call
         (push.iloc 8 . 1)
         (const . #f)
         (if.eq?.ret.const . #t)
         (push.iloc 8 . 1)
         (push.const . 0)
         (ret.subr.gloc.of > (> |n-more-lines`3865*| 0)))
       (if.true
         (call
           (iloc 8 . 1)
           (if.false.ret)
           (n+.iloc (8 . 1) -1 (- |n-more-lines`3865*| 1))
           (set.iloc (8 . 1) (set! |n-more-lines`3865*| (- |n-more-lines`3865*| 1)))
           (ret.const.unspec))
         (push.iloc 8 . 0)
         (push.const . #\linefeed)
         (subr.gloc.of put-char 2 (put-char |port`3865*| #\linefeed))
         (call
           (extend.enclose+
             (1 0 . loop)
             (>n.iloc (0 . 0) 0 (> |i`3922*| 0))
             (if.false.ret)
             (push.iloc 10 . 0)
             (push.const . #\space)
             (subr.gloc.of put-char 2 (put-char |port`3865*| #\space))
             (if.false.ret)
             (push.n+.iloc (0 . 0) -1 (- |i`3922*| 1))
             (apply.iloc+ (1 . 0) (|loop`3921*| (- |i`3922*| 1))))
           (push.iloc.1 . 1)
           (apply.iloc+ (0 . 0) (|loop`3921*| |i`3917*|)))
         (push.iloc 6 . 0)
         (push.iloc.0 . 1)
         (push.iloc.0 . 0)
         (apply.iloc (7 . 0) (|print`3866*| |w`3901*| |i`3917*| |z`3917*|)))
       (ret.const.unspec))
     (call
       (iloc 2 . 0)
       (if.false.ret)
       (push.iloc 5 . 2)
       (push.subr.gloc.of cadar 1 (cadar |lst`3901*|))
       (const . |.&FLAT|)
       (if.not.eq?.ret.const . #f)
       (push.iloc 5 . 2)
       (push.subr.gloc.of caddar 1 (caddar |lst`3901*|))
       (const . #\;)
       (ret.eq? (eq? (caddar |lst`3901*|) #\;)))
     (if.true
       (push.cdr.iloc (5 . 2) (cdr |lst`3901*|))
       (extend . 1)
       (push.iloc 8 . 0)
       (push.const . #\space)
       (subr.gloc.of put-char 2 (put-char |port`3865*| #\space))
       (push.iloc 6 . 0)
       (push.n+.iloc (6 . 1) 1 (+ |k`3901*| 1))
       (push.iloc.0 . 0)
       (apply.iloc (7 . 0) (|print`3866*| |w`3901*| (+ |k`3901*| 1) |z`3925*|)))
     (call
       (iloc 2 . 0)
       (if.false.ret)
       (push.iloc 5 . 2)
       (push.subr.gloc.of caddar 1 (caddar |lst`3901*|))
       (apply.iloc (4 . 0) (|.L1157`3903`3904*| (caddar |lst`3901*|))))
     (if.true
       (push.cdr.iloc (5 . 2) (cdr |lst`3901*|))
       (push.iloc 5 . 2)
       (push.subr.gloc.of caddar 1 (caddar |lst`3901*|))
       (extend . 2)
       (push.iloc 8 . 0)
       (push.iloc.0 . 1)
       (subr.gloc.of put-string 2 (put-string |port`3865*| |s`3927*|))
       (push.iloc 6 . 0)
       (push.iloc 6 . 1)
       (push.iloc.0 . 1)
       (push.subr.gloc.of string-length 1 (string-length |s`3927*|))
       (push.subr.gloc.of + 2 (+ |k`3901*| (string-length |s`3927*|)))
       (push.iloc.0 . 0)
       (apply.iloc
         (7 . 0)
         (|print`3866*| |w`3901*| (+ |k`3901*| (string-length |s`3927*|)) |z`3927*|)))
     (call
       (iloc.0 . 0)
       (if.false.ret)
       (push.iloc 5 . 2)
       (push.subr.gloc.of caddar 1 (caddar |lst`3901*|))
       (push.subr.gloc.of car 1 (car (caddar |lst`3901*|)))
       (const . |.&GROUP|)
       (ret.eq? (eq? (car (caddar |lst`3901*|)) '|.&GROUP|)))
     (if.true
       (push.cdr.iloc (5 . 2) (cdr |lst`3901*|))
       (push.iloc 5 . 2)
       (push.subr.gloc.of caddar 1 (caddar |lst`3901*|))
       (push.subr.gloc.of cdr 1 (cdr (caddar |lst`3901*|)))
       (push.iloc 5 . 2)
       (push.subr.gloc.of caar 1 (caar |lst`3901*|))
       (extend . 3)
       (push.iloc.0 . 2)
       (push.const . |.&FLAT|)
       (push.iloc.0 . 1)
       (push.subr.gloc.of |.list| 3 (|.list| |i`3929*| '|.&FLAT| |x`3929*|))
       (iloc.0 . 0)
       (push.cons)
       (extend . 1)
       (call
         (touch.gloc.of |fits?`3866*|)
         (push.iloc 7 . 0)
         (push.iloc 7 . 1)
         (push.subr.gloc.of - 2 (- |w`3901*| |k`3901*|))
         (push.iloc.0 . 0)
         (apply.gloc.of |fits?`3866*| (|fits?`3866*| (- |w`3901*| |k`3901*|) |flat`3931*|)))
       (if.true
         (push.iloc 7 . 0)
         (push.iloc 7 . 1)
         (push.iloc.0 . 0)
         (apply.iloc (8 . 0) (|print`3866*| |w`3901*| |k`3901*| |flat`3931*|)))
       (push.iloc 7 . 0)
       (push.iloc 7 . 1)
       (push.iloc.1 . 2)
       (push.const . |.&BREAK|)
       (push.iloc.1 . 1)
       (push.subr.gloc.of |.list| 3 (|.list| |i`3929*| '|.&BREAK| |x`3929*|))
       (iloc.1 . 0)
       (push.cons)
       (apply.iloc
         (8 . 0)
         (|print`3866*|
           |w`3901*|
           |k`3901*|
           (|.cons| (|.list| |i`3929*| '|.&BREAK| |x`3929*|) |z`3929*|))))
     (call
       (iloc.1 . 0)
       (if.false.ret)
       (push.iloc 5 . 2)
       (push.subr.gloc.of caddar 1 (caddar |lst`3901*|))
       (subr.gloc.of cdr 1 (cdr (caddar |lst`3901*|)))
       (if.not.pair?.ret.const . #f)
       (push.iloc 5 . 2)
       (subr.gloc.of cdddar 1 (cdddar |lst`3901*|))
       (if.not.null?.ret.const . #f)
       (push.iloc 5 . 2)
       (push.subr.gloc.of caddar 1 (caddar |lst`3901*|))
       (push.subr.gloc.of car 1 (car (caddar |lst`3901*|)))
       (const . |.&NEST|)
       (ret.eq? (eq? (car (caddar |lst`3901*|)) '|.&NEST|)))
     (if.true
       (push.iloc 5 . 0)
       (push.iloc 5 . 1)
       (push.iloc 5 . 2)
       (push.subr.gloc.of caar 1 (caar |lst`3901*|))
       (push.iloc 5 . 2)
       (push.subr.gloc.of caddar 1 (caddar |lst`3901*|))
       (push.subr.gloc.of cadr 1 (cadr (caddar |lst`3901*|)))
       (push.subr.gloc.of + 2 (+ (caar |lst`3901*|) (cadr (caddar |lst`3901*|))))
       (push.iloc 5 . 2)
       (push.subr.gloc.of cadar 1 (cadar |lst`3901*|))
       (push.iloc 5 . 2)
       (push.subr.gloc.of caddar 1 (caddar |lst`3901*|))
       (push.subr.gloc.of cddr 1 (cddr (caddar |lst`3901*|)))
       (push.subr.gloc.of
         |.list|
         3
         (|.list|
           (+ (caar |lst`3901*|) (cadr (caddar |lst`3901*|)))
           (cadar |lst`3901*|)
           (cddr (caddar |lst`3901*|))))
       (cdr.iloc (5 . 2) (cdr |lst`3901*|))
       (push.cons)
       (apply.iloc
         (6 . 0)
         (|print`3866*|
           |w`3901*|
           |k`3901*|
           (|.cons|
             (|.list|
               (+ (caar |lst`3901*|) (cadr (caddar |lst`3901*|)))
               (cadar |lst`3901*|)
               (cddr (caddar |lst`3901*|)))
             (cdr |lst`3901*|)))))
     (iloc.0 . 0)
     (if.false.ret)
     (push.iloc 5 . 2)
     (push.subr.gloc.of cadar 1 (cadar |lst`3901*|))
     (push.iloc 5 . 2)
     (push.subr.gloc.of caar 1 (caar |lst`3901*|))
     (extend . 2)
     (push.iloc 6 . 0)
     (push.iloc 6 . 1)
     (push.iloc.0 . 1)
     (push.iloc.0 . 0)
     (push.iloc 6 . 2)
     (push.subr.gloc.of caddar 1 (caddar |lst`3901*|))
     (push.subr.gloc.of car 1 (car (caddar |lst`3901*|)))
     (push.subr.gloc.of |.list| 3 (|.list| |i`3935*| |m`3935*| (car (caddar |lst`3901*|))))
     (push.iloc.0 . 1)
     (push.iloc.0 . 0)
     (push.iloc 6 . 2)
     (push.subr.gloc.of caddar 1 (caddar |lst`3901*|))
     (push.subr.gloc.of cdr 1 (cdr (caddar |lst`3901*|)))
     (push.subr.gloc.of |.list| 3 (|.list| |i`3935*| |m`3935*| (cdr (caddar |lst`3901*|))))
     (push.cdr.iloc (6 . 2) (cdr |lst`3901*|))
     (push.subr.gloc.of
       |.cons*|
       3
       (|.cons*|
         (|.list| |i`3935*| |m`3935*| (car (caddar |lst`3901*|)))
         (|.list| |i`3935*| |m`3935*| (cdr (caddar |lst`3901*|)))
         (cdr |lst`3901*|)))
     (apply.iloc
       (7 . 0)
       (|print`3866*|
         |w`3901*|
         |k`3901*|
         (|.cons*|
           (|.list| |i`3935*| |m`3935*| (car (caddar |lst`3901*|)))
           (|.list| |i`3935*| |m`3935*| (cdr (caddar |lst`3901*|)))
           (cdr |lst`3901*|)))))
   (call
     (push.iloc 2 . 0)
     (subr.gloc.of cyclic-object? 1 "./boot/pp.scm" . 194571)
     (if.true
       (push.iloc.1 . 0)
       (push.const . "~w")
       (push.iloc 2 . 0)
       (ret.subr.gloc.of format "./boot/pp.scm" . 195595))
     (call (apply.gloc.of pretty-print-line-length "./boot/pp.scm" . 196632))
     (push)
     (extend . 1)
     (push.const . #f)
     (extend . 1)
     (push.close
       (0 0)
       (subr.gloc.of collect-notify 0 "./boot/pp.scm" . 198671)
       (set.iloc (1 . 0) "./boot/pp.scm" . 198671)
       (push.const . #f)
       (ret.subr.gloc.of collect-notify (collect-notify #f)))
     (push.close
       (0 0)
       (push.iloc 2 . 0)
       (push.const . 0)
       (call (apply.gloc.of pretty-print-initial-indent "./boot/pp.scm" . 198690))
       (push)
       (push.const . |.&FLAT|)
       (call
         (touch.gloc.of |parse`3866*|)
         (push.iloc 5 . 0)
         (apply.gloc.of |parse`3866*| "./boot/pp.scm" . 198728))
       (push)
       (push.subr.gloc.of |.list| 3 "./boot/pp.scm" . 198690)
       (push.subr.gloc.of |.list| 1 "./boot/pp.scm" . 198671)
       (apply.iloc (3 . 0) "./boot/pp.scm" . 198671))
     (push.close (0 0) (push.iloc.1 . 0) (ret.subr.gloc.of collect-notify "./boot/pp.scm" . 198671))
     (apply.gloc.of
       |.dynamic-wind|
       (|.dynamic-wind|
         (lambda () (set! |tmp1`3974`3976*| (collect-notify)) (collect-notify #f))
         (lambda ()
           (|print`3866*|
             |width`3971*|
             0
             (|.list|
               (|.list| (pretty-print-initial-indent) '|.&FLAT| (|parse`3866*| |expr`3863*|)))))
         (lambda () (collect-notify |tmp1`3974`3976*|)))))
   (call
     (iloc.1 . 1)
     (if.false.ret)
     (push.iloc.1 . 1)
     (push.const . 0)
     (ret.subr.gloc.of <= "./boot/pp.scm" . 199712))
   (if.true
     (push.iloc.1 . 0)
     (push.const . #\linefeed)
     (subr.gloc.of put-char 2 "./boot/pp.scm" . 200718)
     (call
       (extend.enclose+
         (1 0 . loop)
         (>n.iloc (0 . 0) 0 "./boot/pp.scm" . 201793)
         (if.false.ret)
         (push.iloc 3 . 0)
         (push.const . #\space)
         (subr.gloc.of put-char 2 "./boot/pp.scm" . 201801)
         (if.false.ret)
         (push.n+.iloc (0 . 0) -1 "./boot/pp.scm" . 201831)
         (apply.iloc+ (1 . 0) "./boot/pp.scm" . 201825))
       (call (apply.gloc.of pretty-print-initial-indent "./boot/pp.scm" . 201756))
       (push)
       (apply.iloc+ (0 . 0) "./boot/pp.scm" . 201788))
     (push.iloc.1 . 0)
     (push.const . "  ...")
     (ret.subr.gloc.of put-string "./boot/pp.scm" . 202766))
   (ret.const.unspec))
 (set.gloc.of pretty-print)
 (ret.const.unspec))

;
((push.const . "digamma-0.9.6/r~a")
 (push.const . program-revision)
 (push.subr.gloc.of architecture-feature 1 "./boot/eval.scm" . 4189)
 (push.subr.gloc.of format 2 "./boot/eval.scm" . 4161)
 (subr.gloc.of string->symbol 1 "./boot/eval.scm" . 4145)
 (set.gloc.of auto-compile-cache-validation-signature)
 (ret.const.unspec))
((call (push.const . #f) (apply.gloc.of make-parameter "./boot/eval.scm" . 5150))
 (set.gloc.of auto-compile-verbose)
 (ret.const.unspec))
((call (push.const . #f) (apply.gloc.of make-parameter "./boot/eval.scm" . 6173))
 (set.gloc.of scheme-load-verbose)
 (ret.const.unspec))
((call (push.const) (apply.gloc.of make-parameter "./boot/eval.scm" . 7195))
 (set.gloc.of scheme-load-paths)
 (ret.const.unspec))
((call (push.const . #t) (apply.gloc.of make-parameter "./boot/eval.scm" . 8232))
 (set.gloc.of library-contains-implicit-main)
 (ret.const.unspec))
((call (push.const . #f) (apply.gloc.of make-parameter "./boot/eval.scm" . 9247))
 (set.gloc.of current-include-files)
 (ret.const.unspec))
((subr.gloc.of make-core-hashtable 0 "./boot/eval.scm" . 10278)
 (set.gloc.of library-include-dependencies)
 (ret.const.unspec))
((close
   (1 0 . track-file-open-operation)
   (call
     (touch.gloc.of current-include-files)
     (apply.gloc.of current-include-files "./boot/eval.scm" . 14346))
   (if.false.ret)
   (call
     (touch.gloc.of current-include-files)
     (apply.gloc.of current-include-files "./boot/eval.scm" . 15391))
   (push)
   (push.iloc.0 . 0)
   (push.const . #t)
   (ret.subr.gloc.of core-hashtable-set! "./boot/eval.scm" . 15370))
 (set.gloc.of track-file-open-operation)
 (ret.const.unspec))
((close
   (1 0)
   (call
     (push.iloc.0 . 0)
     (subr.gloc.of list? 1 "./boot/eval.scm" . 26639)
     (if.false.ret)
     (touch.gloc.of every1)
     (push.gloc.of string?)
     (push.iloc.0 . 0)
     (apply.gloc.of every1 "./boot/eval.scm" . 26653))
   (if.true (ret.iloc 0 . 0))
   (push.const . library-extensions)
   (push.const . "expected list of strings, but got ~s")
   (push.iloc.0 . 0)
   (push.subr.gloc.of format 2 "./boot/eval.scm" . 28723)
   (apply.gloc.of assertion-violation "./boot/eval.scm" . 28682))
 (set.gloc.of |.L1197|)
 (call
   (push.const . ".digamma.sls")
   (push.const . ".digamma.ss")
   (push.const . ".digamma.scm")
   (push.const . ".sls")
   (push.const . ".ss")
   (push.const . ".scm")
   (push.subr.gloc.of list 6 "./boot/eval.scm" . 19460)
   (push.gloc.of |.L1197|)
   (apply.gloc.of make-parameter "./boot/eval.scm" . 18435))
 (set.gloc.of library-extensions)
 (ret.const.unspec))
((close
   (1 0)
   (iloc.0 . 0)
   (if.true
     (call
       (push.iloc.0 . 0)
       (subr.gloc.of string? 1 "./boot/eval.scm" . 35858)
       (if.false.ret)
       (push.const . "~//.")
       (push.iloc.0 . 0)
       (push.subr.gloc.of format 2 "./boot/eval.scm" . 35884)
       (ret.subr.gloc.of file-exists? "./boot/eval.scm" . 35870))
     (if.true
       (push.const . "~/")
       (push.iloc.0 . 0)
       (ret.subr.gloc.of format "./boot/eval.scm" . 35904))
     (subr.gloc.of current-error-port 0)
     (push)
     (push.const
       .
       "~&;; warning in auto-compile-cache: directory ~s not exist (temporary disable caching)~!~%")
     (push.iloc.0 . 0)
     (subr.gloc.of format 3 "./boot/eval.scm" . 37901)
     (ret.const . #f))
   (ret.iloc 0 . 0))
 (set.gloc.of |.L1199|)
 (call
   (push.const . #f)
   (push.gloc.of |.L1199|)
   (apply.gloc.of make-parameter "./boot/eval.scm" . 33796))
 (set.gloc.of auto-compile-cache)
 (ret.const.unspec))
((close
   (1 0 . core-eval)
   (push.const . #f)
   (extend . 1)
   (push.close
     (0 0)
     (subr.gloc.of backtrace 0 "./boot/eval.scm" . 44039)
     (set.iloc (1 . 0) "./boot/eval.scm" . 44039)
     (push.const . #f)
     (ret.subr.gloc.of backtrace (backtrace #f)))
   (push.close
     (0 0)
     (touch.gloc.of interpret-coreform)
     (push.iloc 2 . 0)
     (apply.gloc.of interpret-coreform "./boot/eval.scm" . 44039))
   (push.close (0 0) (push.iloc.1 . 0) (ret.subr.gloc.of backtrace "./boot/eval.scm" . 44039))
   (apply.gloc.of
     |.dynamic-wind|
     (|.dynamic-wind|
       (lambda () (set! |tmp1`3999`4001*| (backtrace)) (backtrace #f))
       (lambda () (interpret-coreform |form`3996*|))
       (lambda () (backtrace |tmp1`3999`4001*|)))))
 (set.gloc.of core-eval)
 (ret.const.unspec))
((close
   (1 0 . compile)
   (push.const . #f)
   (subr.gloc.of make-core-hashtable 0)
   (push)
   (extend . 2)
   (push.close
     (0 0)
     (call
       (touch.gloc.of current-closure-comments)
       (apply.gloc.of current-closure-comments "./boot/eval.scm" . 50183))
     (set.iloc (1 . 0) "./boot/eval.scm" . 50183)
     (touch.gloc.of current-closure-comments)
     (push.iloc.1 . 1)
     (apply.gloc.of current-closure-comments "./boot/eval.scm" . 50183))
   (push.close
     (0 0)
     (call (push.iloc 2 . 0) (apply.gloc.of macro-expand "./boot/eval.scm" . 50201))
     (push)
     (apply.gloc.of compile-coreform "./boot/eval.scm" . 50183))
   (push.close
     (0 0)
     (touch.gloc.of current-closure-comments)
     (push.iloc.1 . 0)
     (apply.gloc.of current-closure-comments "./boot/eval.scm" . 50183))
   (apply.gloc.of |.dynamic-wind| "./boot/eval.scm" . 50183))
 (set.gloc.of compile)
 (ret.const.unspec))
((close
   (1 0 . interpret)
   (touch.gloc.of run-vmi)
   (push.const 1 . 0)
   (call
     (push.const . #f)
     (subr.gloc.of make-core-hashtable 0)
     (push)
     (extend . 2)
     (push.close
       (0 0)
       (call
         (touch.gloc.of current-closure-comments)
         (apply.gloc.of current-closure-comments "./boot/eval.scm" . 57358))
       (set.iloc (1 . 0) "./boot/eval.scm" . 57358)
       (touch.gloc.of current-closure-comments)
       (push.iloc.1 . 1)
       (apply.gloc.of current-closure-comments "./boot/eval.scm" . 57358))
     (push.close
       (0 0)
       (call (push.iloc 2 . 0) (apply.gloc.of macro-expand "./boot/eval.scm" . 57376))
       (push)
       (apply.gloc.of compile-coreform "./boot/eval.scm" . 57358))
     (push.close
       (0 0)
       (touch.gloc.of current-closure-comments)
       (push.iloc.1 . 0)
       (apply.gloc.of current-closure-comments "./boot/eval.scm" . 57358))
     (apply.gloc.of |.dynamic-wind| "./boot/eval.scm" . 57358))
   (push.cons)
   (apply.gloc.of run-vmi "./boot/eval.scm" . 58375))
 (set.gloc.of interpret)
 (ret.const.unspec))
((close
   (1 0 . interpret-coreform)
   (touch.gloc.of run-vmi)
   (push.const 1 . 0)
   (call (push.iloc.0 . 0) (apply.gloc.of compile-coreform "./boot/eval.scm" . 62496))
   (push.cons)
   (apply.gloc.of run-vmi "./boot/eval.scm" . 63495))
 (set.gloc.of interpret-coreform)
 (ret.const.unspec))
((close
   (0 1 . environment)
   (call
     (touch.gloc.of parse-imports)
     (push.const . environment)
     (iloc.0 . 0)
     (push.cons)
     (push.iloc.0 . 0)
     (apply.gloc.of parse-imports "./boot/eval.scm" . 67589))
   (push.const . type:eval-environment)
   (push.iloc.0 . 0)
   (ret.subr.gloc.of tuple "./boot/eval.scm" . 68613))
 (set.gloc.of environment)
 (ret.const.unspec))
((close
   (2 0 . eval)
   (subr.gloc.of on-primordial-thread? 0 "./boot/eval.scm" . 72713)
   (if.false.call
     (push.const . thread)
     (push.const . "invalid use of eval")
     (push.iloc.0 . 0)
     (push.iloc.0 . 1)
     (apply.gloc.of assertion-violation "./boot/eval.scm" . 72737))
   (call
     (touch.gloc.of environment?)
     (push.iloc.0 . 1)
     (apply.gloc.of environment? "./boot/eval.scm" . 73740))
   (if.true
     (push.const . #f)
     (extend . 1)
     (push.close
       (0 0)
       (subr.gloc.of current-environment 0 "./boot/eval.scm" . 75790)
       (set.iloc (1 . 0) "./boot/eval.scm" . 75790)
       (push.iloc 2 . 1)
       (ret.subr.gloc.of current-environment "./boot/eval.scm" . 75790))
     (push.close
       (0 0)
       (touch.gloc.of interpret)
       (push.iloc 2 . 0)
       (apply.gloc.of interpret "./boot/eval.scm" . 75790))
     (push.close
       (0 0)
       (push.iloc.1 . 0)
       (ret.subr.gloc.of current-environment "./boot/eval.scm" . 75790))
     (apply.gloc.of |.dynamic-wind| "./boot/eval.scm" . 75790))
   (push.iloc.0 . 1)
   (push.const . 0)
   (push.subr.gloc.of tuple-ref 2 "./boot/eval.scm" . 77845)
   (push.const . type:eval-environment)
   (subr.gloc.of eq? 2 "./boot/eval.scm" . 77840)
   (if.false.call
     (push.const . eval)
     (push.const . "expected environment, but got ~r, as argument 2")
     (push.iloc.0 . 1)
     (push.subr.gloc.of format 2 "./boot/eval.scm" . 78891)
     (apply.gloc.of assertion-violation "./boot/eval.scm" . 78864))
   (touch.gloc.of interpret)
   (push.const . begin)
   (push.const . library)
   (push.const |.R6RS-EVAL|)
   (push.const export)
   (push.const . import)
   (push.const
     rename
     (only (core primitives) set-top-level-value! string->symbol)
     (set-top-level-value! |.SET-TOP-LEVEL-VALUE!|)
     (string->symbol |.STRING->SYMBOL|))
   (push.iloc.0 . 1)
   (push.const . 1)
   (push.subr.gloc.of tuple-ref 2 "./boot/eval.scm" . 88102)
   (push.subr.gloc.of |.cons*| 3 "./boot/eval.scm" . 88102)
   (push.const . |.SET-TOP-LEVEL-VALUE!|)
   (push.const |.STRING->SYMBOL| ".R6RS-EVAL-RESULT")
   (push.iloc.0 . 0)
   (push.subr.gloc.of |.list| 3 "./boot/eval.scm" . 88102)
   (push.subr.gloc.of |.list| 5 "./boot/eval.scm" . 88102)
   (push.const . let)
   (push.const (result |.R6RS-EVAL-RESULT|))
   (push.const |.set-top-level-value!| '|.R6RS-EVAL-RESULT| |.&UNDEF|)
   (push.const . |.unintern-scheme-library|)
   (push.const . quote)
   (call
     (touch.gloc.of generate-library-id)
     (push.const |.R6RS-EVAL|)
     (apply.gloc.of generate-library-id "./boot/eval.scm" . 92216))
   (push)
   (push.subr.gloc.of |.list| 2 "./boot/eval.scm" . 92216)
   (push.subr.gloc.of |.list| 2 "./boot/eval.scm" . 92216)
   (push.const result)
   (push.subr.gloc.of |.cons*| 5 "./boot/eval.scm" . 92216)
   (push.subr.gloc.of |.list| 3 "./boot/eval.scm" . 79884)
   (apply.gloc.of interpret "./boot/eval.scm" . 79884))
 (set.gloc.of eval)
 (ret.const.unspec))
((close
   (1 0 . expand-path)
   (call
     (push.iloc.0 . 0)
     (push.subr.gloc.of string-length 1 "./boot/eval.scm" . 97308)
     (push.const . 1)
     (subr.gloc.of > 2 "./boot/eval.scm" . 97305)
     (if.false.ret)
     (push.iloc.0 . 0)
     (push.const . 1)
     (push.subr.gloc.of string-ref 2 "./boot/eval.scm" . 97338)
     (push.const #\/ #\\)
     (ret.subr.gloc.of memq "./boot/eval.scm" . 97332))
   (push)
   (extend . 1)
   (call
     (iloc.0 . 0)
     (if.false.ret)
     (call (apply.gloc.of home-directory "./boot/eval.scm" . 98331))
     (if.false.ret)
     (push.iloc.1 . 0)
     (push.const . 0)
     (push.subr.gloc.of string-ref 2 "./boot/eval.scm" . 98356)
     (push.const . #\~)
     (ret.subr.gloc.of char=? "./boot/eval.scm" . 98348))
   (if.true
     (push.const . "~a~/")
     (call (apply.gloc.of home-directory "./boot/eval.scm" . 99357))
     (push)
     (push.iloc.1 . 0)
     (push.const . 1)
     (push.iloc.1 . 0)
     (push.subr.gloc.of string-length 1 "./boot/eval.scm" . 99392)
     (push.subr.gloc.of substring 3 "./boot/eval.scm" . 99374)
     (ret.subr.gloc.of format "./boot/eval.scm" . 99342))
   (call
     (iloc.0 . 0)
     (if.false.ret)
     (push.iloc.1 . 0)
     (push.const . 0)
     (push.subr.gloc.of string-ref 2 "./boot/eval.scm" . 100387)
     (push.const . #\.)
     (ret.subr.gloc.of char=? "./boot/eval.scm" . 100379))
   (if.true
     (push.const . "~a~/")
     (subr.gloc.of current-directory 0)
     (push)
     (push.iloc.1 . 0)
     (push.const . 1)
     (push.iloc.1 . 0)
     (push.subr.gloc.of string-length 1 "./boot/eval.scm" . 101443)
     (push.subr.gloc.of substring 3 "./boot/eval.scm" . 101425)
     (ret.subr.gloc.of format "./boot/eval.scm" . 101390))
   (push.iloc.1 . 0)
   (push.const . ".")
   (subr.gloc.of string=? 2 "./boot/eval.scm" . 102414)
   (if.true
     (push.const . "~/")
     (subr.gloc.of current-directory 0)
     (push)
     (ret.subr.gloc.of format "./boot/eval.scm" . 103438))
   (call
     (call (apply.gloc.of home-directory "./boot/eval.scm" . 104467))
     (if.false.ret)
     (push.iloc.1 . 0)
     (push.const . "~")
     (ret.subr.gloc.of string=? "./boot/eval.scm" . 104484))
   (if.true
     (push.const . "~/")
     (call (apply.gloc.of home-directory "./boot/eval.scm" . 105499))
     (push)
     (ret.subr.gloc.of format "./boot/eval.scm" . 105486))
   (push.const . "~/")
   (push.iloc.1 . 0)
   (ret.subr.gloc.of format "./boot/eval.scm" . 107534))
 (set.gloc.of expand-path)
 (ret.const.unspec))
((close
   (1 0 . confirm-path)
   (push.iloc.0 . 0)
   (subr.gloc.of file-exists? 1 "./boot/eval.scm" . 118798)
   (if.false.ret)
   (ret.iloc 0 . 0))
 (set.gloc.of |confirm-path`4061*|)
 (close
   (2 0 . locate-file)
   (extend.enclose+
     (1 0 . path-not-found)
     (push.iloc 2 . 1)
     (push.const . "~a~/~a not found")
     (push.const . #\")
     (push.iloc.0 . 0)
     (push.const . #\")
     (push.subr.gloc.of format 4 "./boot/eval.scm" . 114723)
     (apply.gloc.of assertion-violation "./boot/eval.scm" . 114697))
   (push.iloc.1 . 0)
   (push.subr.gloc.of string-length 1 "./boot/eval.scm" . 120847)
   (push.const . 0)
   (subr.gloc.of = 2 "./boot/eval.scm" . 120844)
   (if.true (push.iloc.1 . 0) (apply.iloc+ (0 . 0) "./boot/eval.scm" . 121868))
   (call
     (push.iloc.1 . 0)
     (push.const . ":")
     (subr.gloc.of string-contains 2 "./boot/eval.scm" . 122896)
     (if.true.ret)
     (push.iloc.1 . 0)
     (push.const . 0)
     (push.subr.gloc.of string-ref 2 "./boot/eval.scm" . 122929)
     (push.const #\/ #\\)
     (ret.subr.gloc.of memq "./boot/eval.scm" . 122923))
   (if.true
     (call
       (touch.gloc.of |confirm-path`4061*|)
       (push.iloc.1 . 0)
       (apply.gloc.of |confirm-path`4061*| "./boot/eval.scm" . 123920))
     (if.true.ret)
     (push.iloc.1 . 0)
     (apply.iloc+ (0 . 0) "./boot/eval.scm" . 123940))
   (push.iloc.1 . 0)
   (push.const . 0)
   (push.subr.gloc.of string-ref 2 "./boot/eval.scm" . 124946)
   (push.const #\. #\~)
   (subr.gloc.of memq 2 "./boot/eval.scm" . 124940)
   (if.true
     (call
       (touch.gloc.of |confirm-path`4061*|)
       (call
         (touch.gloc.of expand-path)
         (push.iloc.1 . 0)
         (apply.gloc.of expand-path "./boot/eval.scm" . 125982))
       (push)
       (apply.gloc.of |confirm-path`4061*| "./boot/eval.scm" . 125968))
     (if.true.ret)
     (push.iloc.1 . 0)
     (apply.iloc+ (0 . 0) "./boot/eval.scm" . 126002))
   (call
     (touch.gloc.of any1)
     (push.close
       (1 0)
       (touch.gloc.of |confirm-path`4061*|)
       (call
         (touch.gloc.of expand-path)
         (push.iloc.0 . 0)
         (push.const . "/")
         (push.iloc 2 . 0)
         (push.subr.gloc.of string-append 3 "./boot/eval.scm" . 127033)
         (apply.gloc.of expand-path "./boot/eval.scm" . 127020))
       (push)
       (apply.gloc.of |confirm-path`4061*| "./boot/eval.scm" . 127006))
     (push.const . ".")
     (call (apply.gloc.of scheme-load-paths "./boot/eval.scm" . 128028))
     (push.cons)
     (apply.gloc.of any1 "./boot/eval.scm" . 126988))
   (if.true.ret)
   (push.iloc.1 . 0)
   (apply.iloc+ (0 . 0) "./boot/eval.scm" . 130060))
 (set.gloc.of locate-file)
 (ret.const.unspec))
((close
   (1 0 . locate-load-file)
   (touch.gloc.of locate-file)
   (push.iloc.0 . 0)
   (push.const . load)
   (apply.gloc.of locate-file "./boot/eval.scm" . 132137))
 (set.gloc.of locate-load-file)
 (ret.const.unspec))
((close
   (1 0 . load-file-has-r6rs-comment?)
   (push.const . #f)
   (push.const . #f)
   (extend . 2)
   (push.close
     (0 0)
     (call
       (touch.gloc.of lexical-syntax-version)
       (apply.gloc.of lexical-syntax-version "./boot/eval.scm" . 137223))
     (set.iloc (1 . 0) "./boot/eval.scm" . 137223)
     (call
       (touch.gloc.of mutable-literals)
       (apply.gloc.of mutable-literals "./boot/eval.scm" . 137223))
     (set.iloc (1 . 1) "./boot/eval.scm" . 137223)
     (call
       (touch.gloc.of lexical-syntax-version)
       (push.const . 7)
       (apply.gloc.of lexical-syntax-version "./boot/eval.scm" . 137223))
     (touch.gloc.of mutable-literals)
     (push.const . #f)
     (apply.gloc.of mutable-literals (mutable-literals #f)))
   (push.close
     (0 0)
     (call
       (touch.gloc.of open-script-input-port)
       (call
         (touch.gloc.of locate-load-file)
         (push.iloc 2 . 0)
         (apply.gloc.of locate-load-file "./boot/eval.scm" . 137259))
       (push)
       (apply.gloc.of open-script-input-port "./boot/eval.scm" . 137235))
     (push)
     (extend . 1)
     (push.iloc.0 . 0)
     (push.const . #f)
     (push.const . load)
     (subr.gloc.of core-read 3 "./boot/eval.scm" . 138249)
     (push.iloc.0 . 0)
     (subr.gloc.of close-port 1 "./boot/eval.scm" . 139273)
     (call
       (touch.gloc.of lexical-syntax-version)
       (apply.gloc.of lexical-syntax-version "./boot/eval.scm" . 140300))
     (push)
     (push.const . 6)
     (ret.subr.gloc.of = "./boot/eval.scm" . 140297))
   (push.close
     (0 0)
     (call
       (touch.gloc.of lexical-syntax-version)
       (push.iloc.1 . 0)
       (apply.gloc.of lexical-syntax-version "./boot/eval.scm" . 137223))
     (touch.gloc.of mutable-literals)
     (push.iloc.1 . 1)
     (apply.gloc.of mutable-literals "./boot/eval.scm" . 137223))
   (apply.gloc.of
     |.dynamic-wind|
     (|.dynamic-wind|
       (lambda ()
         (set! |tmp1`4073`4076*| (lexical-syntax-version))
         (set! |tmp1`4074`4076*| (mutable-literals))
         (lexical-syntax-version 7)
         (mutable-literals #f))
       (lambda ()
         (let ((|port`4082*| (open-script-input-port (locate-load-file |path`4070*|))))
           (core-read |port`4082*| #f 'load)
           (close-port |port`4082*|)
           (= (lexical-syntax-version) 6)))
       (lambda ()
         (lexical-syntax-version |tmp1`4073`4076*|)
         (mutable-literals |tmp1`4074`4076*|)))))
 (set.gloc.of load-file-has-r6rs-comment?)
 (ret.const.unspec))
((close
   (1 0 . load)
   (subr.gloc.of on-primordial-thread? 0 "./boot/eval.scm" . 144393)
   (if.false.call
     (push.const . thread)
     (push.const . "invalid use of load")
     (push.iloc.0 . 0)
     (apply.gloc.of assertion-violation "./boot/eval.scm" . 144417))
   (push.iloc.0 . 0)
   (subr.gloc.of list? 1 "./boot/eval.scm" . 145420)
   (if.true
     (call
       (touch.gloc.of auto-compile-cache-update)
       (apply.gloc.of auto-compile-cache-update "./boot/eval.scm" . 146444))
     (touch.gloc.of load-scheme-library)
     (push.iloc.0 . 0)
     (apply.gloc.of load-scheme-library "./boot/eval.scm" . 147468))
   (call
     (touch.gloc.of locate-load-file)
     (push.iloc.0 . 0)
     (apply.gloc.of locate-load-file "./boot/eval.scm" . 149532))
   (push)
   (extend . 1)
   (call
     (call (apply.gloc.of scheme-load-verbose "./boot/eval.scm" . 150547))
     (if.false.ret)
     (push.const . #t)
     (push.const . "~&;; loading ~s~%~!")
     (push.iloc.0 . 0)
     (ret.subr.gloc.of format "./boot/eval.scm" . 150569))
   (call
     (touch.gloc.of open-script-input-port)
     (push.iloc.0 . 0)
     (apply.gloc.of open-script-input-port "./boot/eval.scm" . 151578))
   (push)
   (extend . 1)
   (push.close
     (1 0)
     (call (push.iloc.0 . 0) (apply.gloc.of serious-condition? "./boot/eval.scm" . 154650))
     (if.true
       (push.iloc.1 . 0)
       (subr.gloc.of close-port 1 "./boot/eval.scm" . 155674)
       (push.iloc.0 . 0)
       (apply.gloc.of raise "./boot/eval.scm" . 156698))
     (push.iloc.0 . 0)
     (apply.gloc.of raise-continuable "./boot/eval.scm" . 158746))
   (push.close
     (0 0)
     (push.const . #f)
     (push.const . #f)
     (push.const . #f)
     (push.const . #f)
     (push.const . #f)
     (push.const . #f)
     (subr.gloc.of current-source-comments 0)
     (push)
     (call
       (touch.gloc.of current-temporaries)
       (apply.gloc.of current-temporaries "./boot/eval.scm" . 162861))
     (push)
     (subr.gloc.of current-environment 0)
     (push)
     (call
       (touch.gloc.of lexical-syntax-version)
       (apply.gloc.of lexical-syntax-version "./boot/eval.scm" . 164912))
     (push)
     (call
       (touch.gloc.of mutable-literals)
       (apply.gloc.of mutable-literals "./boot/eval.scm" . 165930))
     (push)
     (subr.gloc.of backtrace 0)
     (push)
     (extend . 12)
     (push.close
       (0 0)
       (subr.gloc.of current-source-comments 0 "./boot/eval.scm" . 167957)
       (set.iloc (1 . 0) "./boot/eval.scm" . 167957)
       (call
         (touch.gloc.of current-temporaries)
         (apply.gloc.of current-temporaries "./boot/eval.scm" . 167957))
       (set.iloc (1 . 1) "./boot/eval.scm" . 167957)
       (subr.gloc.of current-environment 0 "./boot/eval.scm" . 167957)
       (set.iloc (1 . 2) "./boot/eval.scm" . 167957)
       (call
         (touch.gloc.of lexical-syntax-version)
         (apply.gloc.of lexical-syntax-version "./boot/eval.scm" . 167957))
       (set.iloc (1 . 3) "./boot/eval.scm" . 167957)
       (call
         (touch.gloc.of mutable-literals)
         (apply.gloc.of mutable-literals "./boot/eval.scm" . 167957))
       (set.iloc (1 . 4) "./boot/eval.scm" . 167957)
       (subr.gloc.of backtrace 0 "./boot/eval.scm" . 167957)
       (set.iloc (1 . 5) "./boot/eval.scm" . 167957)
       (push.iloc.1 . 6)
       (subr.gloc.of current-source-comments 1 "./boot/eval.scm" . 167957)
       (call
         (touch.gloc.of current-temporaries)
         (push.iloc.1 . 7)
         (apply.gloc.of current-temporaries "./boot/eval.scm" . 167957))
       (push.iloc.1 . 8)
       (subr.gloc.of current-environment 1 "./boot/eval.scm" . 167957)
       (call
         (touch.gloc.of lexical-syntax-version)
         (push.iloc.1 . 9)
         (apply.gloc.of lexical-syntax-version "./boot/eval.scm" . 167957))
       (call
         (touch.gloc.of mutable-literals)
         (push.iloc.1 . 10)
         (apply.gloc.of mutable-literals "./boot/eval.scm" . 167957))
       (push.iloc.1 . 11)
       (ret.subr.gloc.of backtrace "./boot/eval.scm" . 167957))
     (push.close
       (0 0)
       (call
         (touch.gloc.of current-temporaries)
         (push.const . string=?)
         (push.subr.gloc.of make-core-hashtable 1 "./boot/eval.scm" . 167978)
         (apply.gloc.of current-temporaries "./boot/eval.scm" . 167957))
       (call
         (touch.gloc.of current-rename-count)
         (push.const . 0)
         (apply.gloc.of current-rename-count "./boot/eval.scm" . 168981))
       (extend.enclose+
         (0 0 . loop)
         (call
           (subr.gloc.of backtrace 0 "./boot/eval.scm" . 171061)
           (if.false.ret)
           (ret.subr.gloc.of make-core-hashtable "./boot/eval.scm" . 171073))
         (push)
         (subr.gloc.of current-source-comments 1 "./boot/eval.scm" . 171031)
         (push.iloc 5 . 0)
         (subr.gloc.of current-source-comments 0)
         (push)
         (push.const . load)
         (push.subr.gloc.of core-read 3 "./boot/eval.scm" . 172067)
         (extend . 1)
         (push.iloc.0 . 0)
         (subr.gloc.of eof-object? 1 "./boot/eval.scm" . 173088)
         (if.true (push.iloc 6 . 0) (ret.subr.gloc.of close-port "./boot/eval.scm" . 174112))
         (call
           (touch.gloc.of interpret)
           (push.iloc.0 . 0)
           (apply.gloc.of interpret "./boot/eval.scm" . 176160))
         (apply.iloc+ (2 . 0) "./boot/eval.scm" . 177184))
       (apply.iloc+ (0 . 0) "./boot/eval.scm" . 171031))
     (push.close
       (0 0)
       (push.iloc.1 . 0)
       (subr.gloc.of current-source-comments 1 "./boot/eval.scm" . 167957)
       (call
         (touch.gloc.of current-temporaries)
         (push.iloc.1 . 1)
         (apply.gloc.of current-temporaries "./boot/eval.scm" . 167957))
       (push.iloc.1 . 2)
       (subr.gloc.of current-environment 1 "./boot/eval.scm" . 167957)
       (call
         (touch.gloc.of lexical-syntax-version)
         (push.iloc.1 . 3)
         (apply.gloc.of lexical-syntax-version "./boot/eval.scm" . 167957))
       (call
         (touch.gloc.of mutable-literals)
         (push.iloc.1 . 4)
         (apply.gloc.of mutable-literals "./boot/eval.scm" . 167957))
       (push.iloc.1 . 5)
       (ret.subr.gloc.of backtrace "./boot/eval.scm" . 167957))
     (apply.gloc.of
       |.dynamic-wind|
       (|.dynamic-wind|
         (lambda ()
           (set! |tmp1`4097`4104*| (current-source-comments))
           (set! |tmp1`4098`4104*| (current-temporaries))
           (set! |tmp1`4099`4104*| (current-environment))
           (set! |tmp1`4100`4104*| (lexical-syntax-version))
           (set! |tmp1`4101`4104*| (mutable-literals))
           (set! |tmp1`4102`4104*| (backtrace))
           (current-source-comments |tmp2`4097`4104*|)
           (current-temporaries |tmp2`4098`4104*|)
           (current-environment |tmp2`4099`4104*|)
           (lexical-syntax-version |tmp2`4100`4104*|)
           (mutable-literals |tmp2`4101`4104*|)
           (backtrace |tmp2`4102`4104*|))
         (lambda ()
           (current-temporaries (make-core-hashtable 'string=?))
           (current-rename-count 0)
           (letrec* ((|loop`4111*|
                       (lambda ()
                         (current-source-comments (and (backtrace) (make-core-hashtable)))
                         (let ((|form`4114*|
                                 (core-read |port`4090*| (current-source-comments) 'load)))
                           (if (eof-object? |form`4114*|)
                               (close-port |port`4090*|)
                               (begin (interpret |form`4114*|) (|loop`4111*|)))))))
             (|loop`4111*|)))
         (lambda ()
           (current-source-comments |tmp1`4097`4104*|)
           (current-temporaries |tmp1`4098`4104*|)
           (current-environment |tmp1`4099`4104*|)
           (lexical-syntax-version |tmp1`4100`4104*|)
           (mutable-literals |tmp1`4101`4104*|)
           (backtrace |tmp1`4102`4104*|)))))
   (apply.gloc.of
     with-exception-handler
     (with-exception-handler
       (lambda (|c`4092*|)
         (if (serious-condition? |c`4092*|)
             (begin (close-port |port`4090*|) (raise |c`4092*|))
             (raise-continuable |c`4092*|)))
       (lambda ()
         (let ((|tmp1`4097`4104*| #f)
               (|tmp1`4098`4104*| #f)
               (|tmp1`4099`4104*| #f)
               (|tmp1`4100`4104*| #f)
               (|tmp1`4101`4104*| #f)
               (|tmp1`4102`4104*| #f)
               (|tmp2`4097`4104*| (current-source-comments))
               (|tmp2`4098`4104*| (current-temporaries))
               (|tmp2`4099`4104*| (current-environment))
               (|tmp2`4100`4104*| (lexical-syntax-version))
               (|tmp2`4101`4104*| (mutable-literals))
               (|tmp2`4102`4104*| (backtrace)))
           (|.dynamic-wind|
             (lambda ()
               (set! |tmp1`4097`4104*| (current-source-comments))
               (set! |tmp1`4098`4104*| (current-temporaries))
               (set! |tmp1`4099`4104*| (current-environment))
               (set! |tmp1`4100`4104*| (lexical-syntax-version))
               (set! |tmp1`4101`4104*| (mutable-literals))
               (set! |tmp1`4102`4104*| (backtrace))
               (current-source-comments |tmp2`4097`4104*|)
               (current-temporaries |tmp2`4098`4104*|)
               (current-environment |tmp2`4099`4104*|)
               (lexical-syntax-version |tmp2`4100`4104*|)
               (mutable-literals |tmp2`4101`4104*|)
               (backtrace |tmp2`4102`4104*|))
             (lambda ()
               (current-temporaries (make-core-hashtable 'string=?))
               (current-rename-count 0)
               (letrec* ((|loop`4111*|
                           (lambda ()
                             (current-source-comments (and (backtrace) (make-core-hashtable)))
                             (let ((|form`4114*|
                                     (core-read |port`4090*| (current-source-comments) 'load)))
                               (if (eof-object? |form`4114*|)
                                   (close-port |port`4090*|)
                                   (begin (interpret |form`4114*|) (|loop`4111*|)))))))
                 (|loop`4111*|)))
             (lambda ()
               (current-source-comments |tmp1`4097`4104*|)
               (current-temporaries |tmp1`4098`4104*|)
               (current-environment |tmp1`4099`4104*|)
               (lexical-syntax-version |tmp1`4100`4104*|)
               (mutable-literals |tmp1`4101`4104*|)
               (backtrace |tmp1`4102`4104*|))))))))
 (set.gloc.of load)
 (ret.const.unspec))
((close
   (1 0 . load-r6rs)
   (call
     (touch.gloc.of locate-load-file)
     (push.iloc.0 . 0)
     (apply.gloc.of locate-load-file "./boot/eval.scm" . 181269))
   (push)
   (extend . 1)
   (call
     (call (apply.gloc.of scheme-load-verbose "./boot/eval.scm" . 182284))
     (if.false.ret)
     (push.const . #t)
     (push.const . "~&;; loading ~s~%~!")
     (push.iloc.0 . 0)
     (ret.subr.gloc.of format "./boot/eval.scm" . 182306))
   (call
     (touch.gloc.of open-script-input-port)
     (push.iloc.0 . 0)
     (apply.gloc.of open-script-input-port "./boot/eval.scm" . 183315))
   (push)
   (extend . 1)
   (push.close
     (1 0)
     (call (push.iloc.0 . 0) (apply.gloc.of serious-condition? "./boot/eval.scm" . 186387))
     (if.true
       (push.iloc.1 . 0)
       (subr.gloc.of close-port 1 "./boot/eval.scm" . 187411)
       (push.iloc.0 . 0)
       (apply.gloc.of raise "./boot/eval.scm" . 188435))
     (push.iloc.0 . 0)
     (apply.gloc.of raise-continuable "./boot/eval.scm" . 190483))
   (push.close
     (0 0)
     (push.const . #f)
     (push.const . #f)
     (push.const . #f)
     (push.const . #f)
     (push.const . #f)
     (push.const . #f)
     (subr.gloc.of current-source-comments 0)
     (push)
     (call
       (touch.gloc.of current-temporaries)
       (apply.gloc.of current-temporaries "./boot/eval.scm" . 194598))
     (push)
     (subr.gloc.of current-environment 0)
     (push)
     (call
       (touch.gloc.of lexical-syntax-version)
       (apply.gloc.of lexical-syntax-version "./boot/eval.scm" . 196649))
     (push)
     (call
       (touch.gloc.of mutable-literals)
       (apply.gloc.of mutable-literals "./boot/eval.scm" . 197667))
     (push)
     (subr.gloc.of backtrace 0)
     (push)
     (extend . 12)
     (push.close
       (0 0)
       (subr.gloc.of current-source-comments 0 "./boot/eval.scm" . 199694)
       (set.iloc (1 . 0) "./boot/eval.scm" . 199694)
       (call
         (touch.gloc.of current-temporaries)
         (apply.gloc.of current-temporaries "./boot/eval.scm" . 199694))
       (set.iloc (1 . 1) "./boot/eval.scm" . 199694)
       (subr.gloc.of current-environment 0 "./boot/eval.scm" . 199694)
       (set.iloc (1 . 2) "./boot/eval.scm" . 199694)
       (call
         (touch.gloc.of lexical-syntax-version)
         (apply.gloc.of lexical-syntax-version "./boot/eval.scm" . 199694))
       (set.iloc (1 . 3) "./boot/eval.scm" . 199694)
       (call
         (touch.gloc.of mutable-literals)
         (apply.gloc.of mutable-literals "./boot/eval.scm" . 199694))
       (set.iloc (1 . 4) "./boot/eval.scm" . 199694)
       (subr.gloc.of backtrace 0 "./boot/eval.scm" . 199694)
       (set.iloc (1 . 5) "./boot/eval.scm" . 199694)
       (push.iloc.1 . 6)
       (subr.gloc.of current-source-comments 1 "./boot/eval.scm" . 199694)
       (call
         (touch.gloc.of current-temporaries)
         (push.iloc.1 . 7)
         (apply.gloc.of current-temporaries "./boot/eval.scm" . 199694))
       (push.iloc.1 . 8)
       (subr.gloc.of current-environment 1 "./boot/eval.scm" . 199694)
       (call
         (touch.gloc.of lexical-syntax-version)
         (push.iloc.1 . 9)
         (apply.gloc.of lexical-syntax-version "./boot/eval.scm" . 199694))
       (call
         (touch.gloc.of mutable-literals)
         (push.iloc.1 . 10)
         (apply.gloc.of mutable-literals "./boot/eval.scm" . 199694))
       (push.iloc.1 . 11)
       (ret.subr.gloc.of backtrace "./boot/eval.scm" . 199694))
     (push.close
       (0 0)
       (call
         (subr.gloc.of backtrace 0 "./boot/eval.scm" . 199724)
         (if.false.ret)
         (ret.subr.gloc.of make-core-hashtable "./boot/eval.scm" . 199736))
       (push)
       (subr.gloc.of current-source-comments 1 "./boot/eval.scm" . 199694)
       (call
         (touch.gloc.of current-temporaries)
         (push.const . string=?)
         (push.subr.gloc.of make-core-hashtable 1 "./boot/eval.scm" . 200739)
         (apply.gloc.of current-temporaries "./boot/eval.scm" . 200718))
       (call
         (touch.gloc.of current-rename-count)
         (push.const . 0)
         (apply.gloc.of current-rename-count "./boot/eval.scm" . 201742))
       (extend.enclose+
         (1 0 . loop)
         (push.iloc 5 . 0)
         (subr.gloc.of current-source-comments 0)
         (push)
         (push.const . load)
         (push.subr.gloc.of core-read 3 "./boot/eval.scm" . 203804)
         (extend . 1)
         (push.iloc.0 . 0)
         (subr.gloc.of eof-object? 1 "./boot/eval.scm" . 204825)
         (if.true
           (push.iloc 6 . 0)
           (subr.gloc.of close-port 1 "./boot/eval.scm" . 205849)
           (call
             (touch.gloc.of expand-top-level-program)
             (push.iloc.1 . 0)
             (push.subr.gloc.of reverse 1 "./boot/eval.scm" . 206914)
             (push.const)
             (apply.gloc.of expand-top-level-program "./boot/eval.scm" . 206888))
           (push)
           (extend . 1)
           (call
             (touch.gloc.of current-macro-expression)
             (push.const . #f)
             (apply.gloc.of current-macro-expression "./boot/eval.scm" . 207899))
           (touch.gloc.of interpret)
           (push.iloc.0 . 0)
           (apply.gloc.of interpret "./boot/eval.scm" . 208923))
         (push.iloc.0 . 0)
         (iloc.1 . 0)
         (push.cons)
         (apply.iloc+ (2 . 0) "./boot/eval.scm" . 210969))
       (push.const)
       (apply.iloc+ (0 . 0) "./boot/eval.scm" . 203792))
     (push.close
       (0 0)
       (push.iloc.1 . 0)
       (subr.gloc.of current-source-comments 1 "./boot/eval.scm" . 199694)
       (call
         (touch.gloc.of current-temporaries)
         (push.iloc.1 . 1)
         (apply.gloc.of current-temporaries "./boot/eval.scm" . 199694))
       (push.iloc.1 . 2)
       (subr.gloc.of current-environment 1 "./boot/eval.scm" . 199694)
       (call
         (touch.gloc.of lexical-syntax-version)
         (push.iloc.1 . 3)
         (apply.gloc.of lexical-syntax-version "./boot/eval.scm" . 199694))
       (call
         (touch.gloc.of mutable-literals)
         (push.iloc.1 . 4)
         (apply.gloc.of mutable-literals "./boot/eval.scm" . 199694))
       (push.iloc.1 . 5)
       (ret.subr.gloc.of backtrace "./boot/eval.scm" . 199694))
     (apply.gloc.of
       |.dynamic-wind|
       (|.dynamic-wind|
         (lambda ()
           (set! |tmp1`4130`4137*| (current-source-comments))
           (set! |tmp1`4131`4137*| (current-temporaries))
           (set! |tmp1`4132`4137*| (current-environment))
           (set! |tmp1`4133`4137*| (lexical-syntax-version))
           (set! |tmp1`4134`4137*| (mutable-literals))
           (set! |tmp1`4135`4137*| (backtrace))
           (current-source-comments |tmp2`4130`4137*|)
           (current-temporaries |tmp2`4131`4137*|)
           (current-environment |tmp2`4132`4137*|)
           (lexical-syntax-version |tmp2`4133`4137*|)
           (mutable-literals |tmp2`4134`4137*|)
           (backtrace |tmp2`4135`4137*|))
         (lambda ()
           (current-source-comments (and (backtrace) (make-core-hashtable)))
           (current-temporaries (make-core-hashtable 'string=?))
           (current-rename-count 0)
           (letrec* ((|loop`4145*|
                       (lambda (|acc`4146*|)
                         (let ((|form`4148*|
                                 (core-read |port`4123*| (current-source-comments) 'load)))
                           (if (eof-object? |form`4148*|)
                               (begin
                                 (close-port |port`4123*|)
                                 (let ((|program`4150*|
                                         (expand-top-level-program (reverse |acc`4146*|) '())))
                                   (current-macro-expression #f)
                                   (interpret |program`4150*|)))
                               (|loop`4145*| (cons |form`4148*| |acc`4146*|)))))))
             (|loop`4145*| '())))
         (lambda ()
           (current-source-comments |tmp1`4130`4137*|)
           (current-temporaries |tmp1`4131`4137*|)
           (current-environment |tmp1`4132`4137*|)
           (lexical-syntax-version |tmp1`4133`4137*|)
           (mutable-literals |tmp1`4134`4137*|)
           (backtrace |tmp1`4135`4137*|)))))
   (apply.gloc.of
     with-exception-handler
     (with-exception-handler
       (lambda (|c`4125*|)
         (if (serious-condition? |c`4125*|)
             (begin (close-port |port`4123*|) (raise |c`4125*|))
             (raise-continuable |c`4125*|)))
       (lambda ()
         (let ((|tmp1`4130`4137*| #f)
               (|tmp1`4131`4137*| #f)
               (|tmp1`4132`4137*| #f)
               (|tmp1`4133`4137*| #f)
               (|tmp1`4134`4137*| #f)
               (|tmp1`4135`4137*| #f)
               (|tmp2`4130`4137*| (current-source-comments))
               (|tmp2`4131`4137*| (current-temporaries))
               (|tmp2`4132`4137*| (current-environment))
               (|tmp2`4133`4137*| (lexical-syntax-version))
               (|tmp2`4134`4137*| (mutable-literals))
               (|tmp2`4135`4137*| (backtrace)))
           (|.dynamic-wind|
             (lambda ()
               (set! |tmp1`4130`4137*| (current-source-comments))
               (set! |tmp1`4131`4137*| (current-temporaries))
               (set! |tmp1`4132`4137*| (current-environment))
               (set! |tmp1`4133`4137*| (lexical-syntax-version))
               (set! |tmp1`4134`4137*| (mutable-literals))
               (set! |tmp1`4135`4137*| (backtrace))
               (current-source-comments |tmp2`4130`4137*|)
               (current-temporaries |tmp2`4131`4137*|)
               (current-environment |tmp2`4132`4137*|)
               (lexical-syntax-version |tmp2`4133`4137*|)
               (mutable-literals |tmp2`4134`4137*|)
               (backtrace |tmp2`4135`4137*|))
             (lambda ()
               (current-source-comments (and (backtrace) (make-core-hashtable)))
               (current-temporaries (make-core-hashtable 'string=?))
               (current-rename-count 0)
               (letrec* ((|loop`4145*|
                           (lambda (|acc`4146*|)
                             (let ((|form`4148*|
                                     (core-read |port`4123*| (current-source-comments) 'load)))
                               (if (eof-object? |form`4148*|)
                                   (begin
                                     (close-port |port`4123*|)
                                     (let ((|program`4150*|
                                             (expand-top-level-program (reverse |acc`4146*|) '())))
                                       (current-macro-expression #f)
                                       (interpret |program`4150*|)))
                                   (|loop`4145*| (cons |form`4148*| |acc`4146*|)))))))
                 (|loop`4145*| '())))
             (lambda ()
               (current-source-comments |tmp1`4130`4137*|)
               (current-temporaries |tmp1`4131`4137*|)
               (current-environment |tmp1`4132`4137*|)
               (lexical-syntax-version |tmp1`4133`4137*|)
               (mutable-literals |tmp1`4134`4137*|)
               (backtrace |tmp1`4135`4137*|))))))))
 (set.gloc.of load-r6rs)
 (ret.const.unspec))
((close
   (1 0)
   (push.iloc.0 . 0)
   (push.subr.gloc.of symbol->string 1 "./boot/eval.scm" . 216103)
   (push.subr.gloc.of string->utf8 1 "./boot/eval.scm" . 216089)
   (extend . 1)
   (subr.gloc.of make-string-output-port 0)
   (push)
   (push.iloc.0 . 0)
   (push.subr.gloc.of bytevector-length 1 "./boot/eval.scm" . 218138)
   (extend . 2)
   (extend.enclose+
     (1 0 . loop)
     (iloc.0 . 0)
     (=.iloc (2 . 1) "./boot/eval.scm" . 220183)
     (if.true
       (push.iloc 2 . 0)
       (push.subr.gloc.of extract-accumulated-string 1 "./boot/eval.scm" . 221223)
       (ret.subr.gloc.of string->symbol "./boot/eval.scm" . 221207))
     (push.iloc 3 . 0)
     (push.iloc.0 . 0)
     (push.subr.gloc.of bytevector-u8-ref 2 "./boot/eval.scm" . 222240)
     (extend . 1)
     (call
       (call
         (>n.iloc (0 . 0) 96 "./boot/eval.scm" . 223273)
         (if.false.ret)
         (push.iloc.0 . 0)
         (push.const . 123)
         (ret.subr.gloc.of < "./boot/eval.scm" . 223284))
       (if.true.ret)
       (call
         (>n.iloc (0 . 0) 47 "./boot/eval.scm" . 224296)
         (if.false.ret)
         (push.iloc.0 . 0)
         (push.const . 58)
         (ret.subr.gloc.of < "./boot/eval.scm" . 224307))
       (if.true.ret)
       (call
         (>n.iloc (0 . 0) 64 "./boot/eval.scm" . 225320)
         (if.false.ret)
         (push.iloc.0 . 0)
         (push.const . 91)
         (ret.subr.gloc.of < "./boot/eval.scm" . 225331))
       (if.true.ret)
       (=n.iloc (0 . 0) 43 "./boot/eval.scm" . 226339)
       (if.true.ret)
       (=n.iloc (0 . 0) 45 "./boot/eval.scm" . 226350)
       (if.true.ret)
       (push.iloc.0 . 0)
       (push.const . 95)
       (ret.subr.gloc.of = "./boot/eval.scm" . 226361))
     (if.true
       (push.iloc 3 . 0)
       (push.iloc.0 . 0)
       (subr.gloc.of put-byte 2 "./boot/eval.scm" . 227359)
       (push.n+.iloc (1 . 0) 1 "./boot/eval.scm" . 228389)
       (apply.iloc+ (2 . 0) "./boot/eval.scm" . 228383))
     (push.iloc 3 . 0)
     (push.const . "%~x~x")
     (push.iloc.0 . 0)
     (push.const . 16)
     (push.subr.gloc.of div 2 "./boot/eval.scm" . 230451)
     (call (push.iloc.0 . 0) (push.const . 16) (apply.gloc.of mod "./boot/eval.scm" . 230462))
     (push)
     (subr.gloc.of format 4 "./boot/eval.scm" . 230431)
     (push.n+.iloc (1 . 0) 1 "./boot/eval.scm" . 231461)
     (apply.iloc+ (2 . 0) "./boot/eval.scm" . 231455))
   (push.const . 0)
   (apply.iloc+ (0 . 0) "./boot/eval.scm" . 220179))
 (set.gloc.of |.L1227|)
 (close
   (1 0 . encode-library-ref)
   (push.gloc.of |.L1227|)
   (push.iloc.0 . 0)
   (apply.gloc.of map "./boot/eval.scm" . 215045))
 (set.gloc.of encode-library-ref)
 (ret.const.unspec))
((close
   (3 0 . locate-include-file)
   (iloc.0 . 0)
   (if.true
     (call
       (push.const . #f)
       (extend . 1)
       (call
         (iloc.1 . 0)
         (if.not.pair?.ret.const . #f)
         (cdr.iloc (1 . 0) (cdr |library-name`4171*|))
         (ret.null? (null? (cdr |library-name`4171*|))))
       (if.true.ret.const . "")
       (iloc.1 . 0)
       (if.not.pair?.ret.const . #f)
       (call (push.iloc.1 . 0) (apply.gloc.of last-pair (last-pair |library-name`4171*|)))
       (set.iloc (0 . 0) (set! |.L1233`4173`4174*| (last-pair |library-name`4171*|)))
       (if.false.ret)
       (iloc.0 . 0)
       (if.not.pair?.ret.const . #f)
       (cdr.iloc (0 . 0) (cdr |.L1233`4173`4174*|))
       (if.not.null?.ret.const . #f)
       (touch.gloc.of symbol-list->string)
       (call (push.iloc.1 . 0) (apply.gloc.of drop-last-pair (drop-last-pair |library-name`4171*|)))
       (push)
       (push.const . "/")
       (apply.gloc.of
         symbol-list->string
         (symbol-list->string (drop-last-pair |library-name`4171*|) "/")))
     (push)
     (extend . 1)
     (call
       (touch.gloc.of any1)
       (push.close
         (1 0)
         (push.const . "~a/~a/~a")
         (push.iloc.0 . 0)
         (push.iloc.1 . 0)
         (push.iloc 2 . 1)
         (push.subr.gloc.of format 4 "./boot/eval.scm" . 242737)
         (extend . 1)
         (push.iloc.0 . 0)
         (subr.gloc.of file-exists? 1 "./boot/eval.scm" . 243742)
         (if.false.ret)
         (ret.iloc 0 . 0))
       (call (apply.gloc.of scheme-library-paths "./boot/eval.scm" . 244757))
       (push)
       (apply.gloc.of any1 "./boot/eval.scm" . 241679))
     (if.true.ret)
     (touch.gloc.of locate-file)
     (push.iloc.1 . 1)
     (push.iloc.1 . 2)
     (apply.gloc.of locate-file "./boot/eval.scm" . 245775))
   (touch.gloc.of locate-file)
   (push.iloc.0 . 1)
   (push.iloc.0 . 2)
   (apply.gloc.of locate-file "./boot/eval.scm" . 246793))
 (set.gloc.of locate-include-file)
 (ret.const.unspec))
((close
   (1 0 . locate-library-file)
   (call
     (touch.gloc.of symbol-list->string)
     (call
       (touch.gloc.of encode-library-ref)
       (push.iloc.0 . 0)
       (apply.gloc.of encode-library-ref "./boot/eval.scm" . 250918))
     (push)
     (push.const . "/")
     (apply.gloc.of symbol-list->string "./boot/eval.scm" . 250897))
   (push)
   (extend . 1)
   (touch.gloc.of any1)
   (push.close
     (1 0)
     (touch.gloc.of any1)
     (push.close
       (1 0)
       (push.const . "~a/~a~a")
       (push.iloc.1 . 0)
       (push.iloc 2 . 0)
       (push.iloc.0 . 0)
       (push.subr.gloc.of format 4 "./boot/eval.scm" . 253993)
       (extend . 1)
       (push.iloc.0 . 0)
       (subr.gloc.of file-exists? 1 "./boot/eval.scm" . 255006)
       (if.false.ret)
       (push.iloc.0 . 0)
       (push.iloc 2 . 0)
       (ret.subr.gloc.of list "./boot/eval.scm" . 255032))
     (call (apply.gloc.of library-extensions "./boot/eval.scm" . 256021))
     (push)
     (apply.gloc.of any1 "./boot/eval.scm" . 252943))
   (call (apply.gloc.of scheme-library-paths "./boot/eval.scm" . 257037))
   (push)
   (apply.gloc.of any1 "./boot/eval.scm" . 251911))
 (set.gloc.of locate-library-file)
 (ret.const.unspec))
((close
   (3 0 . read-include-file)
   (call
     (touch.gloc.of locate-include-file)
     (push.iloc.0 . 0)
     (push.iloc.0 . 1)
     (push.iloc.0 . 2)
     (apply.gloc.of locate-include-file "./boot/eval.scm" . 261144))
   (push)
   (extend . 1)
   (call
     (call (apply.gloc.of scheme-load-verbose "./boot/eval.scm" . 262156))
     (if.false.ret)
     (push.const . #t)
     (push.const . "~&;; including ~s~%~!")
     (push.iloc.0 . 0)
     (ret.subr.gloc.of format "./boot/eval.scm" . 262178))
   (call
     (touch.gloc.of track-file-open-operation)
     (push.iloc.0 . 0)
     (apply.gloc.of track-file-open-operation "./boot/eval.scm" . 263175))
   (call
     (touch.gloc.of open-script-input-port)
     (push.iloc.0 . 0)
     (apply.gloc.of open-script-input-port "./boot/eval.scm" . 264211))
   (push)
   (extend . 1)
   (push.close
     (1 0)
     (call (push.iloc.0 . 0) (apply.gloc.of serious-condition? "./boot/eval.scm" . 267284))
     (if.true
       (push.iloc.1 . 0)
       (subr.gloc.of close-port 1 "./boot/eval.scm" . 268309)
       (push.iloc.0 . 0)
       (apply.gloc.of raise "./boot/eval.scm" . 269333))
     (push.iloc.0 . 0)
     (apply.gloc.of raise-continuable "./boot/eval.scm" . 271381))
   (push.close
     (0 0)
     (extend.enclose+
       (1 0 . loop)
       (push.iloc 3 . 0)
       (subr.gloc.of current-source-comments 0)
       (push)
       (push.iloc 5 . 2)
       (push.subr.gloc.of core-read 3 "./boot/eval.scm" . 274461)
       (extend . 1)
       (push.iloc.0 . 0)
       (subr.gloc.of eof-object? 1 "./boot/eval.scm" . 275482)
       (if.true
         (push.iloc 4 . 0)
         (subr.gloc.of close-port 1 "./boot/eval.scm" . 275501)
         (push.iloc.1 . 0)
         (ret.subr.gloc.of reverse "./boot/eval.scm" . 275519))
       (push.iloc.0 . 0)
       (iloc.1 . 0)
       (push.cons)
       (apply.iloc+ (2 . 0) "./boot/eval.scm" . 277531))
     (push.const)
     (apply.iloc+ (0 . 0) "./boot/eval.scm" . 274449))
   (apply.gloc.of
     with-exception-handler
     (with-exception-handler
       (lambda (|c`4202*|)
         (if (serious-condition? |c`4202*|)
             (begin (close-port |port`4200*|) (raise |c`4202*|))
             (raise-continuable |c`4202*|)))
       (lambda ()
         (letrec* ((|loop`4208*|
                     (lambda (|acc`4209*|)
                       (let ((|form`4211*|
                               (core-read |port`4200*| (current-source-comments) |who`4196*|)))
                         (if (eof-object? |form`4211*|)
                             (begin (close-port |port`4200*|) (reverse |acc`4209*|))
                             (|loop`4208*| (cons |form`4211*| |acc`4209*|)))))))
           (|loop`4208*| '()))))))
 (set.gloc.of read-include-file)
 (ret.const.unspec))
((close
   (1 0 . reorder-scheme-library-paths)
   (push.iloc.0 . 0)
   (call
     (extend.enclose+
       (1 0 . loop)
       (iloc.0 . 0)
       (if.null?.ret.const)
       (push.car.iloc (0 . 0) "./boot/eval.scm" . 372770)
       (push.iloc 2 . 0)
       (subr.gloc.of equal? 2 "./boot/eval.scm" . 372762)
       (if.true (push.iloc.0 . 0) (ret.subr.gloc.of cdr "./boot/eval.scm" . 372790))
       (push.car.iloc (0 . 0) "./boot/eval.scm" . 374816)
       (call
         (push.cdr.iloc (0 . 0) "./boot/eval.scm" . 375846)
         (apply.iloc+ (1 . 0) "./boot/eval.scm" . 375840))
       (ret.cons "./boot/eval.scm" . 374810))
     (call (apply.gloc.of scheme-library-paths "./boot/eval.scm" . 370721))
     (push)
     (apply.iloc+ (0 . 0) "./boot/eval.scm" . 371731))
   (ret.cons
     (cons |top-path`4288*|
           (letrec* ((|loop`4292*|
                       (lambda (|lst`4293*|)
                         (if (null? |lst`4293*|)
                             '()
                             (if (equal? (car |lst`4293*|) |top-path`4288*|)
                                 (cdr |lst`4293*|)
                                 (cons (car |lst`4293*|) (|loop`4292*| (cdr |lst`4293*|))))))))
             (|loop`4292*| (scheme-library-paths))))))
 (set.gloc.of |reorder-scheme-library-paths`4217*|)
 (close
   (2 0 . locate-cache)
   (call (apply.gloc.of auto-compile-cache "./boot/eval.scm" . 353296))
   (if.false.ret)
   (push.const . "~a/~a.cache")
   (call (apply.gloc.of auto-compile-cache "./boot/eval.scm" . 354360))
   (push)
   (call
     (touch.gloc.of symbol-list->string)
     (call
       (touch.gloc.of encode-library-ref)
       (push.iloc.0 . 0)
       (apply.gloc.of encode-library-ref "./boot/eval.scm" . 354402))
     (push)
     (push.const . ".")
     (apply.gloc.of symbol-list->string "./boot/eval.scm" . 354381))
   (push)
   (push.subr.gloc.of format 3 "./boot/eval.scm" . 354338)
   (extend . 1)
   (push.iloc.0 . 0)
   (subr.gloc.of file-exists? 1 "./boot/eval.scm" . 355351)
   (if.false.ret)
   (call
     (push.iloc.0 . 0)
     (push.const . ".time")
     (push.subr.gloc.of string-append 2 "./boot/eval.scm" . 356397)
     (extend . 1)
     (push.iloc.0 . 0)
     (subr.gloc.of file-exists? 1 "./boot/eval.scm" . 357406)
     (if.false.ret)
     (call
       (touch.gloc.of make-file-input-port)
       (push.iloc.0 . 0)
       (apply.gloc.of make-file-input-port "./boot/eval.scm" . 359456))
     (push)
     (push.close
       (1 0)
       (push.iloc.0 . 0)
       (subr.gloc.of get-datum 1 "./boot/eval.scm" . 361506)
       (push.iloc.0 . 0)
       (subr.gloc.of get-datum 1 "./boot/eval.scm" . 362530)
       (push.iloc 3 . 1)
       (push.iloc.0 . 0)
       (push.subr.gloc.of get-datum 1 "./boot/eval.scm" . 363581)
       (subr.gloc.of equal? 2 "./boot/eval.scm" . 363561)
       (if.true (ret.iloc 2 . 0))
       (push.iloc.0 . 0)
       (subr.gloc.of close-port 1 "./boot/eval.scm" . 364590)
       (call
         (touch.gloc.of auto-compile-cache-clean)
         (apply.gloc.of auto-compile-cache-clean "./boot/eval.scm" . 364618))
       (ret.const . #f))
     (apply.gloc.of
       call-with-port
       (call-with-port
         (make-file-input-port |timestamp-path`4284*|)
         (lambda (|timestamp-port`4286*|)
           (get-datum |timestamp-port`4286*|)
           (get-datum |timestamp-port`4286*|)
           (if (equal? |source-path`4280*| (get-datum |timestamp-port`4286*|))
               |cache-path`4282*|
               (begin (close-port |timestamp-port`4286*|) (auto-compile-cache-clean) #f))))))
   (if.false.ret)
   (ret.iloc 0 . 0))
 (set.gloc.of |locate-cache`4217*|)
 (close
   (1 0 . locate-file)
   (call
     (touch.gloc.of symbol-list->string)
     (push.iloc.0 . 0)
     (push.const . "/")
     (apply.gloc.of symbol-list->string "./boot/eval.scm" . 332823))
   (push)
   (extend . 1)
   (touch.gloc.of any1)
   (push.close
     (1 0)
     (touch.gloc.of any1)
     (push.close
       (1 0)
       (push.const . "~a/~a~a")
       (push.iloc.1 . 0)
       (push.iloc 2 . 0)
       (push.iloc.0 . 0)
       (push.subr.gloc.of format 4 "./boot/eval.scm" . 335919)
       (extend . 1)
       (push.iloc.0 . 0)
       (subr.gloc.of file-exists? 1 "./boot/eval.scm" . 336932)
       (if.false.ret)
       (push.iloc.0 . 0)
       (push.iloc 2 . 0)
       (ret.subr.gloc.of list "./boot/eval.scm" . 336958))
     (call (apply.gloc.of library-extensions "./boot/eval.scm" . 337947))
     (push)
     (apply.gloc.of any1 "./boot/eval.scm" . 334869))
   (call (apply.gloc.of scheme-library-paths "./boot/eval.scm" . 338963))
   (push)
   (apply.gloc.of any1 "./boot/eval.scm" . 333837))
 (set.gloc.of |locate-file`4217*|)
 (close
   (4 0 . make-cache)
   (push.const . #f)
   (extend . 1)
   (call
     (call
       (touch.gloc.of make-file-output-port)
       (push.iloc.1 . 1)
       (apply.gloc.of make-file-output-port "./boot/eval.scm" . 287759))
     (push)
     (push.close
       (1 0)
       (call
         (touch.gloc.of open-script-input-port)
         (push.iloc 2 . 0)
         (apply.gloc.of open-script-input-port "./boot/eval.scm" . 290835))
       (push)
       (push.close
         (1 0)
         (push.close
           (1 0)
           (push.iloc.1 . 0)
           (subr.gloc.of close-port 1 "./boot/eval.scm" . 294936)
           (push.iloc 2 . 0)
           (subr.gloc.of close-port 1 "./boot/eval.scm" . 295960)
           (call
             (push.iloc 4 . 1)
             (subr.gloc.of file-exists? 1 "./boot/eval.scm" . 296989)
             (if.false.ret)
             (push.iloc 4 . 1)
             (ret.subr.gloc.of delete-file "./boot/eval.scm" . 297008))
           (push.iloc.0 . 0)
           (apply.gloc.of raise "./boot/eval.scm" . 298008))
         (push.close
           (0 0)
           (push.const . #f)
           (push.const . #f)
           (push.const . #f)
           (push.const . #f)
           (push.const . #f)
           (push.const . #f)
           (subr.gloc.of current-source-comments 0)
           (push)
           (call
             (touch.gloc.of current-temporaries)
             (apply.gloc.of current-temporaries "./boot/eval.scm" . 302130))
           (push)
           (subr.gloc.of current-environment 0)
           (push)
           (call
             (touch.gloc.of lexical-syntax-version)
             (apply.gloc.of lexical-syntax-version "./boot/eval.scm" . 304181))
           (push)
           (call
             (touch.gloc.of mutable-literals)
             (apply.gloc.of mutable-literals "./boot/eval.scm" . 305199))
           (push)
           (subr.gloc.of backtrace 0)
           (push)
           (extend . 12)
           (push.close
             (0 0)
             (subr.gloc.of current-source-comments 0 "./boot/eval.scm" . 307226)
             (set.iloc (1 . 0) "./boot/eval.scm" . 307226)
             (call
               (touch.gloc.of current-temporaries)
               (apply.gloc.of current-temporaries "./boot/eval.scm" . 307226))
             (set.iloc (1 . 1) "./boot/eval.scm" . 307226)
             (subr.gloc.of current-environment 0 "./boot/eval.scm" . 307226)
             (set.iloc (1 . 2) "./boot/eval.scm" . 307226)
             (call
               (touch.gloc.of lexical-syntax-version)
               (apply.gloc.of lexical-syntax-version "./boot/eval.scm" . 307226))
             (set.iloc (1 . 3) "./boot/eval.scm" . 307226)
             (call
               (touch.gloc.of mutable-literals)
               (apply.gloc.of mutable-literals "./boot/eval.scm" . 307226))
             (set.iloc (1 . 4) "./boot/eval.scm" . 307226)
             (subr.gloc.of backtrace 0 "./boot/eval.scm" . 307226)
             (set.iloc (1 . 5) "./boot/eval.scm" . 307226)
             (push.iloc.1 . 6)
             (subr.gloc.of current-source-comments 1 "./boot/eval.scm" . 307226)
             (call
               (touch.gloc.of current-temporaries)
               (push.iloc.1 . 7)
               (apply.gloc.of current-temporaries "./boot/eval.scm" . 307226))
             (push.iloc.1 . 8)
             (subr.gloc.of current-environment 1 "./boot/eval.scm" . 307226)
             (call
               (touch.gloc.of lexical-syntax-version)
               (push.iloc.1 . 9)
               (apply.gloc.of lexical-syntax-version "./boot/eval.scm" . 307226))
             (call
               (touch.gloc.of mutable-literals)
               (push.iloc.1 . 10)
               (apply.gloc.of mutable-literals "./boot/eval.scm" . 307226))
             (push.iloc.1 . 11)
             (ret.subr.gloc.of backtrace "./boot/eval.scm" . 307226))
           (push.close
             (0 0)
             (extend.enclose+
               (0 0 . loop)
               (call
                 (subr.gloc.of backtrace 0 "./boot/eval.scm" . 308282)
                 (if.false.ret)
                 (ret.subr.gloc.of make-core-hashtable "./boot/eval.scm" . 308294))
               (push)
               (subr.gloc.of current-source-comments 1 "./boot/eval.scm" . 308252)
               (call
                 (touch.gloc.of current-temporaries)
                 (push.const . string=?)
                 (push.subr.gloc.of make-core-hashtable 1 "./boot/eval.scm" . 309297)
                 (apply.gloc.of current-temporaries "./boot/eval.scm" . 309276))
               (call
                 (touch.gloc.of current-rename-count)
                 (push.const . 0)
                 (apply.gloc.of current-rename-count "./boot/eval.scm" . 310300))
               (push.iloc 5 . 0)
               (subr.gloc.of current-source-comments 0)
               (push)
               (push.const . load)
               (push.subr.gloc.of core-read 3 "./boot/eval.scm" . 311335)
               (extend . 1)
               (push.iloc.0 . 0)
               (subr.gloc.of eof-object? 1 "./boot/eval.scm" . 312357)
               (if.true
                 (iloc 8 . 0)
                 (if.true.ret)
                 (push.iloc 7 . 0)
                 (push.const . "~%")
                 (ret.subr.gloc.of format "./boot/eval.scm" . 313397))
               (call
                 (push.const . #f)
                 (subr.gloc.of make-core-hashtable 0)
                 (push)
                 (extend . 2)
                 (push.close
                   (0 0)
                   (call
                     (touch.gloc.of current-closure-comments)
                     (apply.gloc.of current-closure-comments "./boot/eval.scm" . 317486))
                   (set.iloc (1 . 0) "./boot/eval.scm" . 317486)
                   (touch.gloc.of current-closure-comments)
                   (push.iloc.1 . 1)
                   (apply.gloc.of current-closure-comments "./boot/eval.scm" . 317486))
                 (push.close
                   (0 0)
                   (call (push.iloc 2 . 0) (apply.gloc.of macro-expand "./boot/eval.scm" . 317504))
                   (push)
                   (apply.gloc.of compile-coreform "./boot/eval.scm" . 317486))
                 (push.close
                   (0 0)
                   (touch.gloc.of current-closure-comments)
                   (push.iloc.1 . 0)
                   (apply.gloc.of current-closure-comments "./boot/eval.scm" . 317486))
                 (apply.gloc.of |.dynamic-wind| "./boot/eval.scm" . 317486))
               (push)
               (extend . 1)
               (call
                 (iloc 9 . 0)
                 (if.true.ret)
                 (push.iloc.0 . 0)
                 (subr.gloc.of cyclic-object? 1 "./boot/eval.scm" . 319538)
                 (if.true
                   (push.iloc 8 . 0)
                   (subr.gloc.of close-port 1 "./boot/eval.scm" . 320562)
                   (call
                     (push.iloc 10 . 1)
                     (subr.gloc.of file-exists? 1 "./boot/eval.scm" . 321591)
                     (if.false.ret)
                     (push.iloc 10 . 1)
                     (ret.subr.gloc.of delete-file "./boot/eval.scm" . 321610))
                   (const . #t)
                   (set.iloc (9 . 0) "./boot/eval.scm" . 322610)
                   (ret.const.unspec))
                 (call
                   (touch.gloc.of put-fasl)
                   (push.iloc 8 . 0)
                   (push.iloc.0 . 0)
                   (apply.gloc.of put-fasl "./boot/eval.scm" . 324658))
                 (push.iloc 8 . 0)
                 (push.const . "~%")
                 (ret.subr.gloc.of format "./boot/eval.scm" . 325682))
               (call
                 (touch.gloc.of run-vmi)
                 (push.const 1 . 0)
                 (iloc.0 . 0)
                 (push.cons)
                 (apply.gloc.of run-vmi "./boot/eval.scm" . 326695))
               (apply.iloc+ (3 . 0) "./boot/eval.scm" . 327719))
             (apply.iloc+ (0 . 0) "./boot/eval.scm" . 308252))
           (push.close
             (0 0)
             (push.iloc.1 . 0)
             (subr.gloc.of current-source-comments 1 "./boot/eval.scm" . 307226)
             (call
               (touch.gloc.of current-temporaries)
               (push.iloc.1 . 1)
               (apply.gloc.of current-temporaries "./boot/eval.scm" . 307226))
             (push.iloc.1 . 2)
             (subr.gloc.of current-environment 1 "./boot/eval.scm" . 307226)
             (call
               (touch.gloc.of lexical-syntax-version)
               (push.iloc.1 . 3)
               (apply.gloc.of lexical-syntax-version "./boot/eval.scm" . 307226))
             (call
               (touch.gloc.of mutable-literals)
               (push.iloc.1 . 4)
               (apply.gloc.of mutable-literals "./boot/eval.scm" . 307226))
             (push.iloc.1 . 5)
             (ret.subr.gloc.of backtrace "./boot/eval.scm" . 307226))
           (apply.gloc.of
             |.dynamic-wind|
             (|.dynamic-wind|
               (lambda ()
                 (set! |tmp1`4231`4238*| (current-source-comments))
                 (set! |tmp1`4232`4238*| (current-temporaries))
                 (set! |tmp1`4233`4238*| (current-environment))
                 (set! |tmp1`4234`4238*| (lexical-syntax-version))
                 (set! |tmp1`4235`4238*| (mutable-literals))
                 (set! |tmp1`4236`4238*| (backtrace))
                 (current-source-comments |tmp2`4231`4238*|)
                 (current-temporaries |tmp2`4232`4238*|)
                 (current-environment |tmp2`4233`4238*|)
                 (lexical-syntax-version |tmp2`4234`4238*|)
                 (mutable-literals |tmp2`4235`4238*|)
                 (backtrace |tmp2`4236`4238*|))
               (lambda ()
                 (letrec* ((|loop`4245*|
                             (lambda ()
                               (current-source-comments (and (backtrace) (make-core-hashtable)))
                               (current-temporaries (make-core-hashtable 'string=?))
                               (current-rename-count 0)
                               (let ((|obj`4248*|
                                       (core-read |input`4224*| (current-source-comments) 'load)))
                                 (if (eof-object? |obj`4248*|)
                                     (or |cyclic-code`4220*| (format |output`4222*| "~%"))
                                     (let ((|code`4261*|
                                             (let ((|tmp1`4251`4253*| #f)
                                                   (|tmp2`4251`4253*| (make-core-hashtable)))
                                               (|.dynamic-wind|
                                                 (lambda ()
                                                   (set! |tmp1`4251`4253*|
                                                         (current-closure-comments))
                                                   (current-closure-comments |tmp2`4251`4253*|))
                                                 (lambda ()
                                                   (compile-coreform (macro-expand |obj`4248*|)))
                                                 (lambda ()
                                                   (current-closure-comments |tmp1`4251`4253*|))))))
                                       (or |cyclic-code`4220*|
                                           (if (cyclic-object? |code`4261*|)
                                               (begin
                                                 (close-port |output`4222*|)
                                                 (and (file-exists? |dst`4218*|)
                                                      (delete-file |dst`4218*|))
                                                 (set! |cyclic-code`4220*| #t))
                                               (begin
                                                 (put-fasl |output`4222*| |code`4261*|)
                                                 (format |output`4222*| "~%"))))
                                       (run-vmi (cons '(1 . 0) |code`4261*|))
                                       (|loop`4245*|)))))))
                   (|loop`4245*|)))
               (lambda ()
                 (current-source-comments |tmp1`4231`4238*|)
                 (current-temporaries |tmp1`4232`4238*|)
                 (current-environment |tmp1`4233`4238*|)
                 (lexical-syntax-version |tmp1`4234`4238*|)
                 (mutable-literals |tmp1`4235`4238*|)
                 (backtrace |tmp1`4236`4238*|)))))
         (apply.gloc.of
           with-exception-handler
           (with-exception-handler
             (lambda (|c`4226*|)
               (close-port |input`4224*|)
               (close-port |output`4222*|)
               (and (file-exists? |dst`4218*|) (delete-file |dst`4218*|))
               (raise |c`4226*|))
             (lambda ()
               (let ((|tmp1`4231`4238*| #f)
                     (|tmp1`4232`4238*| #f)
                     (|tmp1`4233`4238*| #f)
                     (|tmp1`4234`4238*| #f)
                     (|tmp1`4235`4238*| #f)
                     (|tmp1`4236`4238*| #f)
                     (|tmp2`4231`4238*| (current-source-comments))
                     (|tmp2`4232`4238*| (current-temporaries))
                     (|tmp2`4233`4238*| (current-environment))
                     (|tmp2`4234`4238*| (lexical-syntax-version))
                     (|tmp2`4235`4238*| (mutable-literals))
                     (|tmp2`4236`4238*| (backtrace)))
                 (|.dynamic-wind|
                   (lambda ()
                     (set! |tmp1`4231`4238*| (current-source-comments))
                     (set! |tmp1`4232`4238*| (current-temporaries))
                     (set! |tmp1`4233`4238*| (current-environment))
                     (set! |tmp1`4234`4238*| (lexical-syntax-version))
                     (set! |tmp1`4235`4238*| (mutable-literals))
                     (set! |tmp1`4236`4238*| (backtrace))
                     (current-source-comments |tmp2`4231`4238*|)
                     (current-temporaries |tmp2`4232`4238*|)
                     (current-environment |tmp2`4233`4238*|)
                     (lexical-syntax-version |tmp2`4234`4238*|)
                     (mutable-literals |tmp2`4235`4238*|)
                     (backtrace |tmp2`4236`4238*|))
                   (lambda ()
                     (letrec* ((|loop`4245*|
                                 (lambda ()
                                   (current-source-comments (and (backtrace) (make-core-hashtable)))
                                   (current-temporaries (make-core-hashtable 'string=?))
                                   (current-rename-count 0)
                                   (let ((|obj`4248*|
                                           (core-read
                                             |input`4224*|
                                             (current-source-comments)
                                             'load)))
                                     (if (eof-object? |obj`4248*|)
                                         (or |cyclic-code`4220*| (format |output`4222*| "~%"))
                                         (let ((|code`4261*|
                                                 (let ((|tmp1`4251`4253*| #f)
                                                       (|tmp2`4251`4253*| (make-core-hashtable)))
                                                   (|.dynamic-wind|
                                                     (lambda ()
                                                       (set! |tmp1`4251`4253*|
                                                             (current-closure-comments))
                                                       (current-closure-comments |tmp2`4251`4253*|))
                                                     (lambda ()
                                                       (compile-coreform
                                                         (macro-expand |obj`4248*|)))
                                                     (lambda ()
                                                       (current-closure-comments
                                                         |tmp1`4251`4253*|))))))
                                           (or |cyclic-code`4220*|
                                               (if (cyclic-object? |code`4261*|)
                                                   (begin
                                                     (close-port |output`4222*|)
                                                     (and (file-exists? |dst`4218*|)
                                                          (delete-file |dst`4218*|))
                                                     (set! |cyclic-code`4220*| #t))
                                                   (begin
                                                     (put-fasl |output`4222*| |code`4261*|)
                                                     (format |output`4222*| "~%"))))
                                           (run-vmi (cons '(1 . 0) |code`4261*|))
                                           (|loop`4245*|)))))))
                       (|loop`4245*|)))
                   (lambda ()
                     (current-source-comments |tmp1`4231`4238*|)
                     (current-temporaries |tmp1`4232`4238*|)
                     (current-environment |tmp1`4233`4238*|)
                     (lexical-syntax-version |tmp1`4234`4238*|)
                     (mutable-literals |tmp1`4235`4238*|)
                     (backtrace |tmp1`4236`4238*|))))))))
       (apply.gloc.of
         call-with-port
         (call-with-port
           (open-script-input-port |src`4218*|)
           (lambda (|input`4224*|)
             (with-exception-handler
               (lambda (|c`4226*|)
                 (close-port |input`4224*|)
                 (close-port |output`4222*|)
                 (and (file-exists? |dst`4218*|) (delete-file |dst`4218*|))
                 (raise |c`4226*|))
               (lambda ()
                 (let ((|tmp1`4231`4238*| #f)
                       (|tmp1`4232`4238*| #f)
                       (|tmp1`4233`4238*| #f)
                       (|tmp1`4234`4238*| #f)
                       (|tmp1`4235`4238*| #f)
                       (|tmp1`4236`4238*| #f)
                       (|tmp2`4231`4238*| (current-source-comments))
                       (|tmp2`4232`4238*| (current-temporaries))
                       (|tmp2`4233`4238*| (current-environment))
                       (|tmp2`4234`4238*| (lexical-syntax-version))
                       (|tmp2`4235`4238*| (mutable-literals))
                       (|tmp2`4236`4238*| (backtrace)))
                   (|.dynamic-wind|
                     (lambda ()
                       (set! |tmp1`4231`4238*| (current-source-comments))
                       (set! |tmp1`4232`4238*| (current-temporaries))
                       (set! |tmp1`4233`4238*| (current-environment))
                       (set! |tmp1`4234`4238*| (lexical-syntax-version))
                       (set! |tmp1`4235`4238*| (mutable-literals))
                       (set! |tmp1`4236`4238*| (backtrace))
                       (current-source-comments |tmp2`4231`4238*|)
                       (current-temporaries |tmp2`4232`4238*|)
                       (current-environment |tmp2`4233`4238*|)
                       (lexical-syntax-version |tmp2`4234`4238*|)
                       (mutable-literals |tmp2`4235`4238*|)
                       (backtrace |tmp2`4236`4238*|))
                     (lambda ()
                       (letrec* ((|loop`4245*|
                                   (lambda ()
                                     (current-source-comments
                                       (and (backtrace) (make-core-hashtable)))
                                     (current-temporaries (make-core-hashtable 'string=?))
                                     (current-rename-count 0)
                                     (let ((|obj`4248*|
                                             (core-read
                                               |input`4224*|
                                               (current-source-comments)
                                               'load)))
                                       (if (eof-object? |obj`4248*|)
                                           (or |cyclic-code`4220*| (format |output`4222*| "~%"))
                                           (let ((|code`4261*|
                                                   (let ((|tmp1`4251`4253*| #f)
                                                         (|tmp2`4251`4253*| (make-core-hashtable)))
                                                     (|.dynamic-wind|
                                                       (lambda ()
                                                         (set! |tmp1`4251`4253*|
                                                               (current-closure-comments))
                                                         (current-closure-comments
                                                           |tmp2`4251`4253*|))
                                                       (lambda ()
                                                         (compile-coreform
                                                           (macro-expand |obj`4248*|)))
                                                       (lambda ()
                                                         (current-closure-comments
                                                           |tmp1`4251`4253*|))))))
                                             (or |cyclic-code`4220*|
                                                 (if (cyclic-object? |code`4261*|)
                                                     (begin
                                                       (close-port |output`4222*|)
                                                       (and (file-exists? |dst`4218*|)
                                                            (delete-file |dst`4218*|))
                                                       (set! |cyclic-code`4220*| #t))
                                                     (begin
                                                       (put-fasl |output`4222*| |code`4261*|)
                                                       (format |output`4222*| "~%"))))
                                             (run-vmi (cons '(1 . 0) |code`4261*|))
                                             (|loop`4245*|)))))))
                         (|loop`4245*|)))
                     (lambda ()
                       (current-source-comments |tmp1`4231`4238*|)
                       (current-temporaries |tmp1`4232`4238*|)
                       (current-environment |tmp1`4233`4238*|)
                       (lexical-syntax-version |tmp1`4234`4238*|)
                       (mutable-literals |tmp1`4235`4238*|)
                       (backtrace |tmp1`4236`4238*|))))))))))
     (apply.gloc.of
       call-with-port
       (call-with-port
         (make-file-output-port |dst`4218*|)
         (lambda (|output`4222*|)
           (call-with-port
             (open-script-input-port |src`4218*|)
             (lambda (|input`4224*|)
               (with-exception-handler
                 (lambda (|c`4226*|)
                   (close-port |input`4224*|)
                   (close-port |output`4222*|)
                   (and (file-exists? |dst`4218*|) (delete-file |dst`4218*|))
                   (raise |c`4226*|))
                 (lambda ()
                   (let ((|tmp1`4231`4238*| #f)
                         (|tmp1`4232`4238*| #f)
                         (|tmp1`4233`4238*| #f)
                         (|tmp1`4234`4238*| #f)
                         (|tmp1`4235`4238*| #f)
                         (|tmp1`4236`4238*| #f)
                         (|tmp2`4231`4238*| (current-source-comments))
                         (|tmp2`4232`4238*| (current-temporaries))
                         (|tmp2`4233`4238*| (current-environment))
                         (|tmp2`4234`4238*| (lexical-syntax-version))
                         (|tmp2`4235`4238*| (mutable-literals))
                         (|tmp2`4236`4238*| (backtrace)))
                     (|.dynamic-wind|
                       (lambda ()
                         (set! |tmp1`4231`4238*| (current-source-comments))
                         (set! |tmp1`4232`4238*| (current-temporaries))
                         (set! |tmp1`4233`4238*| (current-environment))
                         (set! |tmp1`4234`4238*| (lexical-syntax-version))
                         (set! |tmp1`4235`4238*| (mutable-literals))
                         (set! |tmp1`4236`4238*| (backtrace))
                         (current-source-comments |tmp2`4231`4238*|)
                         (current-temporaries |tmp2`4232`4238*|)
                         (current-environment |tmp2`4233`4238*|)
                         (lexical-syntax-version |tmp2`4234`4238*|)
                         (mutable-literals |tmp2`4235`4238*|)
                         (backtrace |tmp2`4236`4238*|))
                       (lambda ()
                         (letrec* ((|loop`4245*|
                                     (lambda ()
                                       (current-source-comments
                                         (and (backtrace) (make-core-hashtable)))
                                       (current-temporaries (make-core-hashtable 'string=?))
                                       (current-rename-count 0)
                                       (let ((|obj`4248*|
                                               (core-read
                                                 |input`4224*|
                                                 (current-source-comments)
                                                 'load)))
                                         (if (eof-object? |obj`4248*|)
                                             (or |cyclic-code`4220*| (format |output`4222*| "~%"))
                                             (let ((|code`4261*|
                                                     (let ((|tmp1`4251`4253*| #f)
                                                           (|tmp2`4251`4253*|
                                                             (make-core-hashtable)))
                                                       (|.dynamic-wind|
                                                         (lambda ()
                                                           (set! |tmp1`4251`4253*|
                                                                 (current-closure-comments))
                                                           (current-closure-comments
                                                             |tmp2`4251`4253*|))
                                                         (lambda ()
                                                           (compile-coreform
                                                             (macro-expand |obj`4248*|)))
                                                         (lambda ()
                                                           (current-closure-comments
                                                             |tmp1`4251`4253*|))))))
                                               (or |cyclic-code`4220*|
                                                   (if (cyclic-object? |code`4261*|)
                                                       (begin
                                                         (close-port |output`4222*|)
                                                         (and (file-exists? |dst`4218*|)
                                                              (delete-file |dst`4218*|))
                                                         (set! |cyclic-code`4220*| #t))
                                                       (begin
                                                         (put-fasl |output`4222*| |code`4261*|)
                                                         (format |output`4222*| "~%"))))
                                               (run-vmi (cons '(1 . 0) |code`4261*|))
                                               (|loop`4245*|)))))))
                           (|loop`4245*|)))
                       (lambda ()
                         (current-source-comments |tmp1`4231`4238*|)
                         (current-temporaries |tmp1`4232`4238*|)
                         (current-environment |tmp1`4233`4238*|)
                         (lexical-syntax-version |tmp1`4234`4238*|)
                         (mutable-literals |tmp1`4235`4238*|)
                         (backtrace |tmp1`4236`4238*|))))))))))))
   (ret.iloc 0 . 0))
 (set.gloc.of |make-cache`4217*|)
 (close
   (1 1 . load-scheme-library)
   (call
     (iloc.0 . 1)
     (if.not.pair?.ret.const . #t)
     (push.iloc.0 . 1)
     (ret.subr.gloc.of car "./boot/eval.scm" . 281642))
   (push)
   (extend . 1)
   (extend.enclose
     (1 0 . locate-source)
     (call
       (touch.gloc.of encode-library-ref)
       (push.iloc.0 . 0)
       (apply.gloc.of encode-library-ref "./boot/eval.scm" . 343067))
     (push)
     (extend . 1)
     (call
       (call
         (touch.gloc.of library-contains-implicit-main)
         (apply.gloc.of library-contains-implicit-main "./boot/eval.scm" . 344085))
       (if.true
         (push.iloc.0 . 0)
         (push.iloc.0 . 0)
         (push.subr.gloc.of length 1 "./boot/eval.scm" . 345140)
         (push.const . 1)
         (push.subr.gloc.of - 2 "./boot/eval.scm" . 345137)
         (push.subr.gloc.of list-ref 2 "./boot/eval.scm" . 345118)
         (const . main)
         (if.eq?
           (call
             (touch.gloc.of |locate-file`4217*|)
             (push.iloc.0 . 0)
             (push.const main)
             (push.subr.gloc.of append 2 "./boot/eval.scm" . 346154)
             (apply.gloc.of |locate-file`4217*| "./boot/eval.scm" . 346141))
           (if.true.ret)
           (touch.gloc.of |locate-file`4217*|)
           (push.iloc.0 . 0)
           (apply.gloc.of |locate-file`4217*| "./boot/eval.scm" . 346181))
         (call
           (touch.gloc.of |locate-file`4217*|)
           (push.iloc.0 . 0)
           (apply.gloc.of |locate-file`4217*| "./boot/eval.scm" . 347165))
         (if.true.ret)
         (touch.gloc.of |locate-file`4217*|)
         (push.iloc.0 . 0)
         (push.const main)
         (push.subr.gloc.of append 2 "./boot/eval.scm" . 347201)
         (apply.gloc.of |locate-file`4217*| "./boot/eval.scm" . 347188))
       (touch.gloc.of |locate-file`4217*|)
       (push.iloc.0 . 0)
       (apply.gloc.of |locate-file`4217*| "./boot/eval.scm" . 348181))
     (if.true.ret)
     (iloc 3 . 0)
     (if.false.ret)
     (push.const . load-scheme-library)
     (push.const . "~s not found in scheme-library-paths: ~s")
     (push.gloc.of path)
     (call (apply.gloc.of scheme-library-paths "./boot/eval.scm" . 349296))
     (push)
     (push.subr.gloc.of format 3 "./boot/eval.scm" . 349240)
     (apply.gloc.of error "./boot/eval.scm" . 349212))
   (call
     (push.iloc 2 . 0)
     (subr.gloc.of list? 1 "./boot/eval.scm" . 377867)
     (if.true.ret)
     (push.const . "internal error in load-scheme-library: unrecognized argument: ~s")
     (push.iloc 2 . 0)
     (apply.gloc.of scheme-error "./boot/eval.scm" . 377879))
   (call (push.iloc 2 . 0) (apply.iloc (0 . 0) "./boot/eval.scm" . 378894))
   (push)
   (extend . 1)
   (iloc.0 . 0)
   (if.true
     (push.cadr.iloc (0 . 0) (cadr |.L1240`4296*|))
     (push.car.iloc (0 . 0) (car |.L1240`4296*|))
     (extend . 2)
     (call
       (touch.gloc.of track-file-open-operation)
       (push.iloc.0 . 1)
       (apply.gloc.of track-file-open-operation (track-file-open-operation |source-path`4303*|)))
     (push.const . #f)
     (call
       (touch.gloc.of |reorder-scheme-library-paths`4217*|)
       (push.iloc.0 . 0)
       (apply.gloc.of
         |reorder-scheme-library-paths`4217*|
         (|reorder-scheme-library-paths`4217*| |base-path`4303*|)))
     (push)
     (extend . 2)
     (push.close
       (0 0)
       (call (apply.gloc.of scheme-library-paths (scheme-library-paths)))
       (set.iloc (1 . 0) (set! |tmp1`4306`4308*| (scheme-library-paths)))
       (push.iloc.1 . 1)
       (apply.gloc.of scheme-library-paths (scheme-library-paths |tmp2`4306`4308*|)))
     (push.close
       (0 0)
       (call (apply.gloc.of auto-compile-cache (auto-compile-cache)))
       (if.true
         (call
           (touch.gloc.of |locate-cache`4217*|)
           (push.iloc 6 . 0)
           (push.iloc 2 . 1)
           (apply.gloc.of
             |locate-cache`4217*|
             (|locate-cache`4217*| |ref`4214*| |source-path`4303*|)))
         (push)
         (extend . 1)
         (iloc.0 . 0)
         (if.true
           (touch.gloc.of load-cache)
           (push.iloc.0 . 0)
           (apply.gloc.of load-cache (load-cache |cache-path`4314*|)))
         (call
           (touch.gloc.of encode-library-ref)
           (push.iloc 7 . 0)
           (apply.gloc.of encode-library-ref (encode-library-ref |ref`4214*|)))
         (push)
         (call
           (touch.gloc.of generate-library-id)
           (push.iloc 7 . 0)
           (apply.gloc.of generate-library-id (generate-library-id |ref`4214*|)))
         (push)
         (extend . 2)
         (push.const . "~a/~a.cache")
         (call (apply.gloc.of auto-compile-cache (auto-compile-cache)))
         (push)
         (call
           (touch.gloc.of symbol-list->string)
           (push.iloc.0 . 0)
           (push.const . ".")
           (apply.gloc.of symbol-list->string (symbol-list->string |ref`4316*| ".")))
         (push)
         (push.subr.gloc.of
           format
           3
           (format "~a/~a.cache" (auto-compile-cache) (symbol-list->string |ref`4316*| ".")))
         (extend . 1)
         (call
           (call (apply.gloc.of auto-compile-verbose (auto-compile-verbose)))
           (if.false.ret)
           (push.const . #t)
           (push.const . "~&;; compile ~s~%~!")
           (push.iloc 5 . 1)
           (ret.subr.gloc.of format (format #t "~&;; compile ~s~%~!" |source-path`4303*|)))
         (call
           (touch.gloc.of |make-cache`4217*|)
           (push.iloc 5 . 1)
           (push.iloc.0 . 0)
           (push.iloc.1 . 0)
           (push.iloc 5 . 1)
           (push.subr.gloc.of file-stat-mtime 1 (file-stat-mtime |source-path`4303*|))
           (apply.gloc.of
             |make-cache`4217*|
             (|make-cache`4217*|
               |source-path`4303*|
               |cache-path`4318*|
               |ref`4316*|
               (file-stat-mtime |source-path`4303*|))))
         (if.true
           (call (apply.gloc.of auto-compile-verbose (auto-compile-verbose)))
           (if.false.ret)
           (push.const . #t)
           (push.const . "~&;; delete ~s~%~!")
           (push.iloc.0 . 0)
           (ret.subr.gloc.of format (format #t "~&;; delete ~s~%~!" |cache-path`4318*|)))
         (call
           (touch.gloc.of make-file-output-port)
           (push.iloc.0 . 0)
           (push.const . ".time")
           (push.subr.gloc.of string-append 2 (string-append |cache-path`4318*| ".time"))
           (apply.gloc.of
             make-file-output-port
             (make-file-output-port (string-append |cache-path`4318*| ".time"))))
         (push)
         (push.close
           (1 0)
           (push.iloc.0 . 0)
           (push.const . "~s ~s ~s ~s~%")
           (subr.gloc.of microsecond 0)
           (push)
           (push.iloc 6 . 1)
           (push.subr.gloc.of file-stat-mtime 1 (file-stat-mtime |source-path`4303*|))
           (push.iloc 6 . 1)
           (push.gloc.of auto-compile-cache-validation-signature)
           (subr.gloc.of
             format
             6
             (format
               |output`4322*|
               "~s ~s ~s ~s~%"
               (microsecond)
               (file-stat-mtime |source-path`4303*|)
               |source-path`4303*|
               auto-compile-cache-validation-signature))
           (push.gloc.of library-include-dependencies)
           (push.iloc 2 . 1)
           (push.const . #f)
           (push.subr.gloc.of
             core-hashtable-ref
             3
             (core-hashtable-ref library-include-dependencies |library-id`4316*| #f))
           (extend . 1)
           (iloc.0 . 0)
           (if.true
             (call
               (push.close
                 (1 0)
                 (push.iloc 2 . 0)
                 (push.const . "~s ~s~%")
                 (push.car.iloc (0 . 0) (car |dep`4328*|))
                 (push.car.iloc (0 . 0) (car |dep`4328*|))
                 (push.subr.gloc.of file-stat-mtime 1 (file-stat-mtime (car |dep`4328*|)))
                 (ret.subr.gloc.of
                   format
                   (format
                     |output`4322*|
                     "~s ~s~%"
                     (car |dep`4328*|)
                     (file-stat-mtime (car |dep`4328*|)))))
               (push.iloc.0 . 0)
               (push.subr.gloc.of core-hashtable->alist 1 (core-hashtable->alist |.L1242`4324*|))
               (apply.gloc.of
                 for-each
                 (for-each (lambda (|dep`4328*|)
                             (format
                               |output`4322*|
                               "~s ~s~%"
                               (car |dep`4328*|)
                               (file-stat-mtime (car |dep`4328*|))))
                           (core-hashtable->alist |.L1242`4324*|))))
             (push.gloc.of library-include-dependencies)
             (push.iloc 3 . 1)
             (ret.subr.gloc.of
               core-hashtable-delete!
               (core-hashtable-delete! library-include-dependencies |library-id`4316*|)))
           (ret.const.unspec))
         (apply.gloc.of
           call-with-port
           (call-with-port
             (make-file-output-port (string-append |cache-path`4318*| ".time"))
             (lambda (|output`4322*|)
               (format
                 |output`4322*|
                 "~s ~s ~s ~s~%"
                 (microsecond)
                 (file-stat-mtime |source-path`4303*|)
                 |source-path`4303*|
                 auto-compile-cache-validation-signature)
               (let ((|.L1242`4324*|
                       (core-hashtable-ref library-include-dependencies |library-id`4316*| #f)))
                 (if |.L1242`4324*|
                     (begin
                       (for-each (lambda (|dep`4328*|)
                                   (format
                                     |output`4322*|
                                     "~s ~s~%"
                                     (car |dep`4328*|)
                                     (file-stat-mtime (car |dep`4328*|))))
                                 (core-hashtable->alist |.L1242`4324*|))
                       (core-hashtable-delete! library-include-dependencies |library-id`4316*|))
                     (|.unspecified|)))))))
       (push.iloc 2 . 1)
       (apply.gloc.of load (load |source-path`4303*|)))
     (push.close
       (0 0)
       (push.iloc.1 . 0)
       (apply.gloc.of scheme-library-paths (scheme-library-paths |tmp1`4306`4308*|)))
     (apply.gloc.of
       |.dynamic-wind|
       (|.dynamic-wind|
         (lambda ()
           (set! |tmp1`4306`4308*| (scheme-library-paths))
           (scheme-library-paths |tmp2`4306`4308*|))
         (lambda ()
           (if (auto-compile-cache)
               (let ((|cache-path`4314*| (|locate-cache`4217*| |ref`4214*| |source-path`4303*|)))
                 (if |cache-path`4314*|
                     (load-cache |cache-path`4314*|)
                     (let ((|ref`4316*| (encode-library-ref |ref`4214*|))
                           (|library-id`4316*| (generate-library-id |ref`4214*|)))
                       (let ((|cache-path`4318*|
                               (format
                                 "~a/~a.cache"
                                 (auto-compile-cache)
                                 (symbol-list->string |ref`4316*| "."))))
                         (and (auto-compile-verbose)
                              (format #t "~&;; compile ~s~%~!" |source-path`4303*|))
                         (if (|make-cache`4217*|
                               |source-path`4303*|
                               |cache-path`4318*|
                               |ref`4316*|
                               (file-stat-mtime |source-path`4303*|))
                             (and (auto-compile-verbose)
                                  (format #t "~&;; delete ~s~%~!" |cache-path`4318*|))
                             (call-with-port
                               (make-file-output-port (string-append |cache-path`4318*| ".time"))
                               (lambda (|output`4322*|)
                                 (format
                                   |output`4322*|
                                   "~s ~s ~s ~s~%"
                                   (microsecond)
                                   (file-stat-mtime |source-path`4303*|)
                                   |source-path`4303*|
                                   auto-compile-cache-validation-signature)
                                 (let ((|.L1242`4324*|
                                         (core-hashtable-ref
                                           library-include-dependencies
                                           |library-id`4316*|
                                           #f)))
                                   (if |.L1242`4324*|
                                       (begin
                                         (for-each (lambda (|dep`4328*|)
                                                     (format
                                                       |output`4322*|
                                                       "~s ~s~%"
                                                       (car |dep`4328*|)
                                                       (file-stat-mtime (car |dep`4328*|))))
                                                   (core-hashtable->alist |.L1242`4324*|))
                                         (core-hashtable-delete!
                                           library-include-dependencies
                                           |library-id`4316*|))
                                       (|.unspecified|))))))))))
               (load |source-path`4303*|)))
         (lambda () (scheme-library-paths |tmp1`4306`4308*|)))))
   (ret.const.unspec))
 (set.gloc.of load-scheme-library)
 (ret.const.unspec))
((close
   (1 0 . load-cache)
   (call
     (call (apply.gloc.of scheme-load-verbose "./boot/eval.scm" . 413706))
     (if.false.ret)
     (push.const . #t)
     (push.const . "~&;; loading ~s~%~!")
     (push.iloc.0 . 0)
     (ret.subr.gloc.of format "./boot/eval.scm" . 413728))
   (call
     (touch.gloc.of open-script-input-port)
     (push.iloc.0 . 0)
     (apply.gloc.of open-script-input-port "./boot/eval.scm" . 414737))
   (push)
   (extend . 1)
   (push.close
     (1 0)
     (push.iloc.1 . 0)
     (subr.gloc.of close-port 1 "./boot/eval.scm" . 417802)
     (push.iloc.0 . 0)
     (apply.gloc.of raise "./boot/eval.scm" . 418826))
   (push.close
     (0 0)
     (push.const . #f)
     (push.const . #f)
     (push.const . #f)
     (push.const . #f)
     (push.const . #f)
     (push.const . string=?)
     (push.subr.gloc.of make-core-hashtable 1 "./boot/eval.scm" . 423972)
     (subr.gloc.of current-environment 0)
     (push)
     (extend . 7)
     (push.close
       (0 0)
       (subr.gloc.of backtrace 0 "./boot/eval.scm" . 427020)
       (set.iloc (1 . 0) "./boot/eval.scm" . 427020)
       (subr.gloc.of current-source-comments 0 "./boot/eval.scm" . 427020)
       (set.iloc (1 . 1) "./boot/eval.scm" . 427020)
       (call
         (touch.gloc.of current-temporaries)
         (apply.gloc.of current-temporaries "./boot/eval.scm" . 427020))
       (set.iloc (1 . 2) "./boot/eval.scm" . 427020)
       (call
         (touch.gloc.of current-rename-count)
         (apply.gloc.of current-rename-count "./boot/eval.scm" . 427020))
       (set.iloc (1 . 3) "./boot/eval.scm" . 427020)
       (subr.gloc.of current-environment 0 "./boot/eval.scm" . 427020)
       (set.iloc (1 . 4) "./boot/eval.scm" . 427020)
       (push.const . #f)
       (subr.gloc.of backtrace 1 (backtrace #f))
       (push.const . #f)
       (subr.gloc.of current-source-comments 1 (current-source-comments #f))
       (call
         (touch.gloc.of current-temporaries)
         (push.iloc.1 . 5)
         (apply.gloc.of current-temporaries "./boot/eval.scm" . 427020))
       (call
         (touch.gloc.of current-rename-count)
         (push.const . 0)
         (apply.gloc.of current-rename-count "./boot/eval.scm" . 427020))
       (push.iloc.1 . 6)
       (ret.subr.gloc.of current-environment "./boot/eval.scm" . 427020))
     (push.close
       (0 0)
       (extend.enclose+
         (0 0 . loop)
         (push.iloc 5 . 0)
         (push.const . #f)
         (push.const . load)
         (push.subr.gloc.of core-read 3 "./boot/eval.scm" . 428058)
         (extend . 1)
         (push.iloc.0 . 0)
         (subr.gloc.of eof-object? 1 "./boot/eval.scm" . 429079)
         (if.true (push.iloc 6 . 0) (ret.subr.gloc.of close-port "./boot/eval.scm" . 430103))
         (call
           (touch.gloc.of run-vmi)
           (push.const 1 . 0)
           (iloc.0 . 0)
           (push.cons)
           (apply.gloc.of run-vmi "./boot/eval.scm" . 432151))
         (apply.iloc+ (2 . 0) "./boot/eval.scm" . 433175))
       (apply.iloc+ (0 . 0) "./boot/eval.scm" . 428046))
     (push.close
       (0 0)
       (push.iloc.1 . 0)
       (subr.gloc.of backtrace 1 "./boot/eval.scm" . 427020)
       (push.iloc.1 . 1)
       (subr.gloc.of current-source-comments 1 "./boot/eval.scm" . 427020)
       (call
         (touch.gloc.of current-temporaries)
         (push.iloc.1 . 2)
         (apply.gloc.of current-temporaries "./boot/eval.scm" . 427020))
       (call
         (touch.gloc.of current-rename-count)
         (push.iloc.1 . 3)
         (apply.gloc.of current-rename-count "./boot/eval.scm" . 427020))
       (push.iloc.1 . 4)
       (ret.subr.gloc.of current-environment "./boot/eval.scm" . 427020))
     (apply.gloc.of
       |.dynamic-wind|
       (|.dynamic-wind|
         (lambda ()
           (set! |tmp1`4341`4347*| (backtrace))
           (set! |tmp1`4342`4347*| (current-source-comments))
           (set! |tmp1`4343`4347*| (current-temporaries))
           (set! |tmp1`4344`4347*| (current-rename-count))
           (set! |tmp1`4345`4347*| (current-environment))
           (backtrace #f)
           (current-source-comments #f)
           (current-temporaries |tmp2`4343`4347*|)
           (current-rename-count 0)
           (current-environment |tmp2`4345`4347*|))
         (lambda ()
           (letrec* ((|loop`4354*|
                       (lambda ()
                         (let ((|form`4357*| (core-read |port`4334*| #f 'load)))
                           (if (eof-object? |form`4357*|)
                               (close-port |port`4334*|)
                               (begin (run-vmi (cons '(1 . 0) |form`4357*|)) (|loop`4354*|)))))))
             (|loop`4354*|)))
         (lambda ()
           (backtrace |tmp1`4341`4347*|)
           (current-source-comments |tmp1`4342`4347*|)
           (current-temporaries |tmp1`4343`4347*|)
           (current-rename-count |tmp1`4344`4347*|)
           (current-environment |tmp1`4345`4347*|)))))
   (apply.gloc.of
     with-exception-handler
     (with-exception-handler
       (lambda (|c`4336*|) (close-port |port`4334*|) (raise |c`4336*|))
       (lambda ()
         (let ((|tmp1`4341`4347*| #f)
               (|tmp1`4342`4347*| #f)
               (|tmp1`4343`4347*| #f)
               (|tmp1`4344`4347*| #f)
               (|tmp1`4345`4347*| #f)
               (|tmp2`4343`4347*| (make-core-hashtable 'string=?))
               (|tmp2`4345`4347*| (current-environment)))
           (|.dynamic-wind|
             (lambda ()
               (set! |tmp1`4341`4347*| (backtrace))
               (set! |tmp1`4342`4347*| (current-source-comments))
               (set! |tmp1`4343`4347*| (current-temporaries))
               (set! |tmp1`4344`4347*| (current-rename-count))
               (set! |tmp1`4345`4347*| (current-environment))
               (backtrace #f)
               (current-source-comments #f)
               (current-temporaries |tmp2`4343`4347*|)
               (current-rename-count 0)
               (current-environment |tmp2`4345`4347*|))
             (lambda ()
               (letrec* ((|loop`4354*|
                           (lambda ()
                             (let ((|form`4357*| (core-read |port`4334*| #f 'load)))
                               (if (eof-object? |form`4357*|)
                                   (close-port |port`4334*|)
                                   (begin
                                     (run-vmi (cons '(1 . 0) |form`4357*|))
                                     (|loop`4354*|)))))))
                 (|loop`4354*|)))
             (lambda ()
               (backtrace |tmp1`4341`4347*|)
               (current-source-comments |tmp1`4342`4347*|)
               (current-temporaries |tmp1`4343`4347*|)
               (current-rename-count |tmp1`4344`4347*|)
               (current-environment |tmp1`4345`4347*|))))))))
 (set.gloc.of load-cache)
 (ret.const.unspec))
((close
   (1 0)
   (push.iloc.0 . 0)
   (push.const . ".cache")
   (subr.gloc.of string-contains 2 "./boot/eval.scm" . 440373)
   (if.false.ret)
   (push.iloc.0 . 0)
   (push.const . ".cache")
   (push.subr.gloc.of string-contains 2 "./boot/eval.scm" . 441400)
   (push.iloc.0 . 0)
   (push.subr.gloc.of string-length 1 "./boot/eval.scm" . 441432)
   (push.const . 6)
   (push.subr.gloc.of - 2 "./boot/eval.scm" . 441429)
   (ret.subr.gloc.of = "./boot/eval.scm" . 441397))
 (set.gloc.of |.L1261|)
 (close
   (1 0)
   (call (apply.gloc.of auto-compile-cache "./boot/eval.scm" . 444481))
   (push)
   (push.const . "/")
   (push.iloc.0 . 0)
   (push.subr.gloc.of string-append 3 "./boot/eval.scm" . 444466)
   (extend . 1)
   (push.iloc.0 . 0)
   (push.const . ".time")
   (push.subr.gloc.of string-append 2 "./boot/eval.scm" . 445494)
   (extend . 1)
   (call
     (push.iloc.1 . 0)
     (subr.gloc.of file-exists? 1 "./boot/eval.scm" . 446502)
     (if.false.ret)
     (push.iloc.1 . 0)
     (ret.subr.gloc.of delete-file "./boot/eval.scm" . 446528))
   (call
     (push.iloc.0 . 0)
     (subr.gloc.of file-exists? 1 "./boot/eval.scm" . 447526)
     (if.false.ret)
     (push.iloc.0 . 0)
     (ret.subr.gloc.of delete-file "./boot/eval.scm" . 447556))
   (call (apply.gloc.of auto-compile-verbose "./boot/eval.scm" . 448550))
   (if.false.ret)
   (push.const . #t)
   (push.const . "~&;; clean ~s~%")
   (push.iloc.1 . 0)
   (ret.subr.gloc.of format "./boot/eval.scm" . 448573))
 (set.gloc.of |.L1262|)
 (close
   (0 0 . auto-compile-cache-clean)
   (call (apply.gloc.of auto-compile-cache "./boot/eval.scm" . 437260))
   (push)
   (extend . 1)
   (iloc.0 . 0)
   (if.true
     (push.gloc.of |.L1262|)
     (call
       (push.gloc.of |.L1261|)
       (push.iloc.0 . 0)
       (push.subr.gloc.of directory-list 1 "./boot/eval.scm" . 442410)
       (apply.gloc.of filter "./boot/eval.scm" . 439330))
     (push)
     (apply.gloc.of for-each "./boot/eval.scm" . 443421))
   (ret.const.unspec))
 (set.gloc.of auto-compile-cache-clean)
 (ret.const.unspec))
((close
   (1 0 . dependencies-valid?)
   (touch.gloc.of every1)
   (push.gloc.of |.L1269|)
   (push.iloc.0 . 0)
   (apply.gloc.of every1 "./boot/eval.scm" . 521261))
 (set.gloc.of |dependencies-valid?`4424*|)
 (close
   (1 0)
   (call (apply.gloc.of auto-compile-cache "./boot/eval.scm" . 459831))
   (push)
   (push.const . "/")
   (push.iloc.0 . 0)
   (push.subr.gloc.of string-append 3 "./boot/eval.scm" . 459816)
   (extend . 1)
   (push.iloc.0 . 0)
   (push.const . ".time")
   (push.subr.gloc.of string-append 2 "./boot/eval.scm" . 460844)
   (extend . 1)
   (call
     (push.iloc.1 . 0)
     (subr.gloc.of file-exists? 1 "./boot/eval.scm" . 461852)
     (if.false.ret)
     (push.iloc.1 . 0)
     (ret.subr.gloc.of delete-file "./boot/eval.scm" . 461878))
   (call
     (push.iloc.0 . 0)
     (subr.gloc.of file-exists? 1 "./boot/eval.scm" . 462876)
     (if.false.ret)
     (push.iloc.0 . 0)
     (ret.subr.gloc.of delete-file "./boot/eval.scm" . 462906))
   (call (apply.gloc.of auto-compile-verbose "./boot/eval.scm" . 463900))
   (if.false.ret)
   (push.const . #t)
   (push.const . "~&;; clean ~s~%")
   (push.iloc.1 . 0)
   (ret.subr.gloc.of format "./boot/eval.scm" . 463923))
 (set.gloc.of |.L1270|)
 (close
   (1 0)
   (push.car.iloc (0 . 0) "./boot/eval.scm" . 521301)
   (push.subr.gloc.of file-stat-mtime 1 "./boot/eval.scm" . 521284)
   (push.cdr.iloc (0 . 0) "./boot/eval.scm" . 521310)
   (ret.subr.gloc.of = "./boot/eval.scm" . 521281))
 (set.gloc.of |.L1269|)
 (close
   (1 0)
   (push.iloc.0 . 0)
   (push.const . ".cache")
   (subr.gloc.of string-contains 2 "./boot/eval.scm" . 470069)
   (if.false.ret)
   (push.iloc.0 . 0)
   (push.const . ".cache")
   (push.subr.gloc.of string-contains 2 "./boot/eval.scm" . 471096)
   (push.iloc.0 . 0)
   (push.subr.gloc.of string-length 1 "./boot/eval.scm" . 471128)
   (push.const . 6)
   (push.subr.gloc.of - 2 "./boot/eval.scm" . 471125)
   (ret.subr.gloc.of = "./boot/eval.scm" . 471093))
 (set.gloc.of |.L1273|)
 (close
   (1 0)
   (push.car.iloc (0 . 0) "./boot/eval.scm" . 514117)
   (subr.gloc.of string? 1 "./boot/eval.scm" . 514108)
   (if.false.ret)
   (push.cdr.iloc (0 . 0) "./boot/eval.scm" . 515141)
   (subr.gloc.of number? 1 "./boot/eval.scm" . 515132)
   (if.false.ret)
   (push.car.iloc (0 . 0) "./boot/eval.scm" . 516170)
   (ret.subr.gloc.of file-exists? "./boot/eval.scm" . 516156))
 (set.gloc.of |.L1272|)
 (close
   (1 0 . inconsistent-cache-state)
   (call
     (call (apply.gloc.of auto-compile-verbose "./boot/eval.scm" . 456718))
     (if.false.ret)
     (subr.gloc.of current-error-port 0)
     (push)
     (push.const . "~&;; reset ~s~%")
     (call (apply.gloc.of auto-compile-cache "./boot/eval.scm" . 457789))
     (push)
     (ret.subr.gloc.of format "./boot/eval.scm" . 457742))
   (push.gloc.of |.L1270|)
   (push.iloc.0 . 0)
   (apply.gloc.of for-each "./boot/eval.scm" . 458771))
 (set.gloc.of |inconsistent-cache-state`4382*|)
 (close
   (1 0 . dependencies-exists?)
   (touch.gloc.of every1)
   (push.gloc.of |.L1272|)
   (push.iloc.0 . 0)
   (apply.gloc.of every1 "./boot/eval.scm" . 513069))
 (set.gloc.of |dependencies-exists?`4424*|)
 (close
   (0 0 . auto-compile-cache-update)
   (call (apply.gloc.of auto-compile-cache "./boot/eval.scm" . 466956))
   (push)
   (extend . 1)
   (iloc.0 . 0)
   (if.true
     (call
       (push.gloc.of |.L1273|)
       (push.iloc.0 . 0)
       (push.subr.gloc.of directory-list 1 "./boot/eval.scm" . 472106)
       (apply.gloc.of filter "./boot/eval.scm" . 469026))
     (push)
     (extend . 1)
     (extend.enclose
       (2 0 . loop)
       (iloc.0 . 0)
       (if.null?
         (call
           (iloc.0 . 1)
           (if.false.ret)
           (push.close
             (1 0)
             (call (apply.gloc.of auto-compile-cache "./boot/eval.scm" . 477263))
             (push)
             (push.const . "/")
             (push.iloc.0 . 0)
             (push.subr.gloc.of string-append 3 "./boot/eval.scm" . 477248)
             (extend . 1)
             (push.iloc.0 . 0)
             (push.const . ".time")
             (push.subr.gloc.of string-append 2 "./boot/eval.scm" . 478276)
             (extend . 1)
             (push.iloc.0 . 0)
             (subr.gloc.of file-exists? 1 "./boot/eval.scm" . 479286)
             (if.true
               (call
                 (touch.gloc.of make-file-input-port)
                 (push.iloc.0 . 0)
                 (apply.gloc.of make-file-input-port "./boot/eval.scm" . 481336))
               (push)
               (push.close
                 (1 0)
                 (push.iloc.0 . 0)
                 (push.subr.gloc.of get-datum 1 "./boot/eval.scm" . 483409)
                 (extend . 1)
                 (push.iloc.1 . 0)
                 (subr.gloc.of close-port 1 "./boot/eval.scm" . 484412)
                 (iloc.0 . 0)
                 (>=.iloc (5 . 1) "./boot/eval.scm" . 485443)
                 (if.true
                   (push.iloc 2 . 0)
                   (subr.gloc.of delete-file 1 "./boot/eval.scm" . 486467)
                   (push.iloc 3 . 0)
                   (subr.gloc.of delete-file 1 "./boot/eval.scm" . 487491)
                   (call (apply.gloc.of auto-compile-verbose "./boot/eval.scm" . 488520))
                   (if.false.ret)
                   (push.const . #t)
                   (push.const . "~&;; clean ~s~%")
                   (push.iloc 3 . 0)
                   (ret.subr.gloc.of format "./boot/eval.scm" . 488543))
                 (ret.const.unspec))
               (apply.gloc.of call-with-port "./boot/eval.scm" . 480310))
             (touch.gloc.of |inconsistent-cache-state`4382*|)
             (push.iloc 5 . 0)
             (apply.gloc.of |inconsistent-cache-state`4382*| "./boot/eval.scm" . 490550))
           (push.iloc 2 . 0)
           (apply.gloc.of
             for-each
             (for-each (lambda (|cache-name`4407*|)
                         (let ((|cache-path`4409*|
                                 (string-append (auto-compile-cache) "/" |cache-name`4407*|)))
                           (let ((|timestamp-path`4411*|
                                   (string-append |cache-path`4409*| ".time")))
                             (if (file-exists? |timestamp-path`4411*|)
                                 (call-with-port
                                   (make-file-input-port |timestamp-path`4411*|)
                                   (lambda (|timestamp-port`4414*|)
                                     (let ((|cache-timestamp`4416*|
                                             (get-datum |timestamp-port`4414*|)))
                                       (close-port |timestamp-port`4414*|)
                                       (if (>= |cache-timestamp`4416*| |expiration`4405*|)
                                           (begin
                                             (delete-file |timestamp-path`4411*|)
                                             (delete-file |cache-path`4409*|)
                                             (and (auto-compile-verbose)
                                                  (format #t "~&;; clean ~s~%" |cache-path`4409*|)))
                                           (|.unspecified|)))))
                                 (|inconsistent-cache-state`4382*| |cache-lst`4400*|)))))
                       |cache-lst`4400*|)))
         (ret.const.unspec))
       (call (apply.gloc.of auto-compile-cache "./boot/eval.scm" . 494654))
       (push)
       (push.const . "/")
       (push.car.iloc (0 . 0) "./boot/eval.scm" . 494679)
       (push.subr.gloc.of string-append 3 "./boot/eval.scm" . 494639)
       (extend . 1)
       (push.iloc.0 . 0)
       (push.const . ".time")
       (push.subr.gloc.of string-append 2 "./boot/eval.scm" . 495667)
       (extend . 1)
       (push.iloc.0 . 0)
       (subr.gloc.of file-exists? 1 "./boot/eval.scm" . 496677)
       (if.true
         (call
           (touch.gloc.of make-file-input-port)
           (push.iloc.0 . 0)
           (apply.gloc.of make-file-input-port "./boot/eval.scm" . 498727))
         (push)
         (push.close
           (1 0)
           (extend.enclose+
             (0 0 . get-dependencies-list)
             (extend.enclose+
               (1 0 . loop)
               (push.iloc 4 . 0)
               (push.subr.gloc.of get-datum 1 "./boot/eval.scm" . 504896)
               (extend . 1)
               (push.iloc 5 . 0)
               (push.subr.gloc.of get-datum 1 "./boot/eval.scm" . 505920)
               (extend . 1)
               (push.iloc.1 . 0)
               (subr.gloc.of eof-object? 1 "./boot/eval.scm" . 506933)
               (if.true (ret.iloc 2 . 0))
               (push.iloc.1 . 0)
               (iloc.0 . 0)
               (push.cons)
               (iloc 2 . 0)
               (push.cons)
               (apply.iloc+ (3 . 0) "./boot/eval.scm" . 508981))
             (push.const)
             (apply.iloc+ (0 . 0) "./boot/eval.scm" . 504879))
           (push.iloc.1 . 0)
           (push.subr.gloc.of get-datum 1 "./boot/eval.scm" . 523329)
           (extend . 1)
           (push.iloc 2 . 0)
           (push.subr.gloc.of get-datum 1 "./boot/eval.scm" . 524354)
           (extend . 1)
           (push.iloc 3 . 0)
           (push.subr.gloc.of get-datum 1 "./boot/eval.scm" . 525373)
           (extend . 1)
           (push.iloc 4 . 0)
           (push.subr.gloc.of get-datum 1 "./boot/eval.scm" . 526401)
           (extend . 1)
           (call (apply.iloc+ (4 . 0) "./boot/eval.scm" . 527422))
           (push)
           (extend . 1)
           (push.iloc 6 . 0)
           (subr.gloc.of close-port 1 "./boot/eval.scm" . 528427)
           (call
             (push.iloc 4 . 0)
             (subr.gloc.of number? 1 "./boot/eval.scm" . 529468)
             (if.false.ret)
             (push.iloc 3 . 0)
             (subr.gloc.of number? 1 "./boot/eval.scm" . 530492)
             (if.false.ret)
             (push.iloc 2 . 0)
             (subr.gloc.of string? 1 "./boot/eval.scm" . 531516)
             (if.false.ret)
             (push.iloc.1 . 0)
             (gloc.of auto-compile-cache-validation-signature)
             (if.not.eq?.ret.const . #f)
             (push.iloc 2 . 0)
             (subr.gloc.of file-exists? 1 "./boot/eval.scm" . 533564)
             (if.false.ret)
             (touch.gloc.of |dependencies-exists?`4424*|)
             (push.iloc.0 . 0)
             (apply.gloc.of |dependencies-exists?`4424*| "./boot/eval.scm" . 534588))
           (if.true
             (call
               (push.iloc 2 . 0)
               (subr.gloc.of file-stat-mtime 1 "./boot/eval.scm" . 536634)
               (=.iloc (3 . 0) "./boot/eval.scm" . 536631)
               (if.false.ret)
               (touch.gloc.of |dependencies-valid?`4424*|)
               (push.iloc.0 . 0)
               (apply.gloc.of |dependencies-valid?`4424*| "./boot/eval.scm" . 537655))
             (if.true
               (push.cdr.iloc (9 . 0) "./boot/eval.scm" . 538680)
               (push.iloc 9 . 1)
               (apply.iloc (10 . 0) "./boot/eval.scm" . 538674))
             (push.cdr.iloc (9 . 0) "./boot/eval.scm" . 540728)
             (call
               (iloc 9 . 1)
               (if.true
                 (iloc 4 . 0)
                 (<.iloc (9 . 1) "./boot/eval.scm" . 542783)
                 (if.true (ret.iloc 4 . 0))
                 (ret.iloc 9 . 1))
               (ret.iloc 4 . 0))
             (push)
             (apply.iloc
               (10 . 0)
               (|loop`4404*|
                 (cdr |lst`4405*|)
                 (if |expiration`4405*|
                     (if (< |cache-timestamp`4446*| |expiration`4405*|)
                         |cache-timestamp`4446*|
                         |expiration`4405*|)
                     |cache-timestamp`4446*|))))
           (touch.gloc.of |inconsistent-cache-state`4382*|)
           (push.iloc 11 . 0)
           (apply.gloc.of |inconsistent-cache-state`4382*| "./boot/eval.scm" . 535602))
         (apply.gloc.of
           call-with-port
           (call-with-port
             (make-file-input-port |timestamp-path`4420*|)
             (lambda (|timestamp-port`4423*|)
               (letrec* ((|get-dependencies-list`4424*|
                           (lambda ()
                             (letrec* ((|loop`4429*|
                                         (lambda (|lst`4430*|)
                                           (let ((|dep-path`4432*|
                                                   (get-datum |timestamp-port`4423*|)))
                                             (let ((|dep-time`4434*|
                                                     (get-datum |timestamp-port`4423*|)))
                                               (if (eof-object? |dep-path`4432*|)
                                                   |lst`4430*|
                                                   (|loop`4429*|
                                                     (cons (cons |dep-path`4432*| |dep-time`4434*|)
                                                           |lst`4430*|))))))))
                               (|loop`4429*| '())))))
                 (let ((|cache-timestamp`4446*| (get-datum |timestamp-port`4423*|)))
                   (let ((|source-timestamp`4448*| (get-datum |timestamp-port`4423*|)))
                     (let ((|source-path`4450*| (get-datum |timestamp-port`4423*|)))
                       (let ((|cache-signature`4452*| (get-datum |timestamp-port`4423*|)))
                         (let ((|dependencies`4454*| (|get-dependencies-list`4424*|)))
                           (close-port |timestamp-port`4423*|)
                           (if (and (number? |cache-timestamp`4446*|)
                                    (number? |source-timestamp`4448*|)
                                    (string? |source-path`4450*|)
                                    (eq?
                                      |cache-signature`4452*|
                                      auto-compile-cache-validation-signature)
                                    (file-exists? |source-path`4450*|)
                                    (|dependencies-exists?`4424*| |dependencies`4454*|))
                               (if (and (=
                                          (file-stat-mtime |source-path`4450*|)
                                          |source-timestamp`4448*|)
                                        (|dependencies-valid?`4424*| |dependencies`4454*|))
                                   (|loop`4404*| (cdr |lst`4405*|) |expiration`4405*|)
                                   (|loop`4404*|
                                     (cdr |lst`4405*|)
                                     (if |expiration`4405*|
                                         (if (< |cache-timestamp`4446*| |expiration`4405*|)
                                             |cache-timestamp`4446*|
                                             |expiration`4405*|)
                                         |cache-timestamp`4446*|)))
                               (|inconsistent-cache-state`4382*| |cache-lst`4400*|))))))))))))
       (push.iloc.1 . 0)
       (subr.gloc.of delete-file 1 "./boot/eval.scm" . 545829)
       (call
         (call (apply.gloc.of auto-compile-verbose "./boot/eval.scm" . 546858))
         (if.false.ret)
         (push.const . #t)
         (push.const . "~&;; clean ~s~%")
         (push.iloc.1 . 0)
         (ret.subr.gloc.of format "./boot/eval.scm" . 546881))
       (push.cdr.iloc (2 . 0) "./boot/eval.scm" . 547883)
       (push.iloc 2 . 1)
       (apply.iloc (3 . 0) "./boot/eval.scm" . 547877))
     (push.iloc.1 . 0)
     (push.const . #f)
     (apply.iloc (0 . 0) (|loop`4404*| |cache-lst`4400*| #f)))
   (ret.const.unspec))
 (set.gloc.of auto-compile-cache-update)
 (ret.const.unspec))

;
((call (push.const . #f) (apply.gloc.of make-parameter "./boot/interaction.scm" . 4126))
 (set.gloc.of continuation-to-exit)
 (ret.const.unspec))
((call (push.const . #f) (apply.gloc.of make-parameter "./boot/interaction.scm" . 6168))
 (set.gloc.of dump-condition)
 (ret.const.unspec))
((call (push.const . #t) (apply.gloc.of make-parameter "./boot/interaction.scm" . 7210))
 (set.gloc.of self-evaluating-vector-constants)
 (ret.const.unspec))
((call (push.const . #t) (apply.gloc.of make-parameter "./boot/interaction.scm" . 8232))
 (set.gloc.of ellipsis/underscore-in-literal)
 (ret.const.unspec))
((call (push.const . #t) (apply.gloc.of make-parameter "./boot/interaction.scm" . 9245))
 (set.gloc.of right-arrow-in-case)
 (ret.const.unspec))
((close
   (1 0)
   (push.const . "~r")
   (push.iloc.0 . 0)
   (ret.subr.gloc.of format "./boot/interaction.scm" . 38986))
 (set.gloc.of |.L1286|)
 (close
   (1 1 . default-exception-printer)
   (call
     (iloc.0 . 1)
     (if.pair? (push.iloc.0 . 1) (ret.subr.gloc.of car "./boot/interaction.scm" . 13344))
     (ret.subr.gloc.of current-error-port "./boot/interaction.scm" . 13354))
   (push)
   (extend . 1)
   (call
     (touch.gloc.of current-exception-handler)
     (push.const . #f)
     (apply.gloc.of current-exception-handler "./boot/interaction.scm" . 14343))
   (subr.gloc.of make-string-output-port 0)
   (push)
   (extend . 1)
   (call
     (push.const . #f)
     (push.const . #f)
     (push.const . #f)
     (subr.gloc.of backtrace-line-length 0)
     (push)
     (extend . 4)
     (push.close
       (0 0)
       (call (apply.gloc.of pretty-print-line-length "./boot/interaction.scm" . 20491))
       (set.iloc (1 . 0) "./boot/interaction.scm" . 20491)
       (call (apply.gloc.of pretty-print-maximum-lines "./boot/interaction.scm" . 20491))
       (set.iloc (1 . 1) "./boot/interaction.scm" . 20491)
       (call (apply.gloc.of pretty-print-unwrap-syntax "./boot/interaction.scm" . 20491))
       (set.iloc (1 . 2) "./boot/interaction.scm" . 20491)
       (call
         (push.iloc.1 . 3)
         (apply.gloc.of pretty-print-line-length "./boot/interaction.scm" . 20491))
       (call
         (push.const . 5)
         (apply.gloc.of pretty-print-maximum-lines "./boot/interaction.scm" . 20491))
       (push.const . #t)
       (apply.gloc.of pretty-print-unwrap-syntax "./boot/interaction.scm" . 20491))
     (push.close
       (0 0)
       (extend.unbound . 4)
       (push.close
         (0 0 . output-who-message)
         (push.iloc 4 . 0)
         (push.const . "error")
         (subr.gloc.of format 2 "./boot/interaction.scm" . 22543)
         (call
           (call (push.iloc 6 . 0) (apply.gloc.of who-condition? "./boot/interaction.scm" . 23572))
           (if.false.ret)
           (call (push.iloc 6 . 0) (apply.gloc.of condition-who "./boot/interaction.scm" . 24609))
           (push)
           (subr.gloc.of string? 1 "./boot/interaction.scm" . 24600)
           (if.true
             (push.iloc 4 . 0)
             (push.const . " in ~a")
             (call (push.iloc 6 . 0) (apply.gloc.of condition-who "./boot/interaction.scm" . 25646))
             (push)
             (ret.subr.gloc.of format "./boot/interaction.scm" . 25624))
           (push.iloc 4 . 0)
           (push.const . " in ~u")
           (call (push.iloc 6 . 0) (apply.gloc.of condition-who "./boot/interaction.scm" . 26670))
           (push)
           (ret.subr.gloc.of format "./boot/interaction.scm" . 26648))
         (call
           (push.iloc 6 . 0)
           (apply.gloc.of message-condition? "./boot/interaction.scm" . 27668))
         (if.false.ret)
         (push.iloc 4 . 0)
         (push.const . ": ~a")
         (call (push.iloc 6 . 0) (apply.gloc.of condition-message "./boot/interaction.scm" . 28712))
         (push)
         (ret.subr.gloc.of format "./boot/interaction.scm" . 28692))
       (push.close
         (0 0 . output-irritants)
         (call
           (call
             (push.iloc 6 . 0)
             (apply.gloc.of irritants-condition? "./boot/interaction.scm" . 32795))
           (if.false.ret)
           (call
             (push.iloc 6 . 0)
             (apply.gloc.of condition-irritants "./boot/interaction.scm" . 32827))
           (ret.pair? "./boot/interaction.scm" . 32820))
         (if.true
           (push.iloc 4 . 0)
           (push.const . "~%~%irritants:")
           (subr.gloc.of format 2 "./boot/interaction.scm" . 33814)
           (push.close
             (1 0)
             (push.iloc 5 . 0)
             (push.const . "~% ")
             (subr.gloc.of format 2 "./boot/interaction.scm" . 35874)
             (push.iloc.0 . 0)
             (subr.gloc.of list? 1 "./boot/interaction.scm" . 36905)
             (if.true
               (push.iloc 5 . 0)
               (push.const . " (")
               (subr.gloc.of format 2 "./boot/interaction.scm" . 37929)
               (call
                 (extend.enclose+
                   (1 0 . loop)
                   (iloc.0 . 0)
                   (if.pair?
                     (push.iloc 7 . 0)
                     (push.const . "~a")
                     (push.car.iloc (0 . 0) "./boot/interaction.scm" . 41028)
                     (subr.gloc.of format 3 "./boot/interaction.scm" . 41010)
                     (cdr.iloc (0 . 0) "./boot/interaction.scm" . 42048)
                     (if.pair?
                       (push.iloc 7 . 0)
                       (push.const . " ")
                       (subr.gloc.of format 2 "./boot/interaction.scm" . 43065)
                       (push.cdr.iloc (0 . 0) "./boot/interaction.scm" . 44095)
                       (apply.iloc+ (1 . 0) "./boot/interaction.scm" . 44089))
                     (ret.const.unspec))
                   (ret.const.unspec))
                 (call
                   (push.gloc.of |.L1286|)
                   (push.iloc.1 . 0)
                   (apply.gloc.of map "./boot/interaction.scm" . 38969))
                 (push)
                 (apply.iloc+ (0 . 0) "./boot/interaction.scm" . 39979))
               (push.iloc 5 . 0)
               (push.const . ")")
               (ret.subr.gloc.of format "./boot/interaction.scm" . 45097))
             (push.iloc 5 . 0)
             (push.const . " ~r")
             (push.iloc.0 . 0)
             (ret.subr.gloc.of format "./boot/interaction.scm" . 46126))
           (call
             (push.iloc 6 . 0)
             (apply.gloc.of condition-irritants "./boot/interaction.scm" . 47136))
           (push)
           (apply.gloc.of
             for-each
             (for-each (lambda (|e`4479*|)
                         (format |port`4462*| "~% ")
                         (if (list? |e`4479*|)
                             (begin
                               (format |port`4462*| " (")
                               (letrec* ((|loop`4485*|
                                           (lambda (|lst`4486*|)
                                             (if (pair? |lst`4486*|)
                                                 (begin
                                                   (format |port`4462*| "~a" (car |lst`4486*|))
                                                   (if (pair? (cdr |lst`4486*|))
                                                       (begin
                                                         (format |port`4462*| " ")
                                                         (|loop`4485*| (cdr |lst`4486*|)))
                                                       (|.unspecified|)))
                                                 (|.unspecified|)))))
                                 (|loop`4485*| (map |.L1286| |e`4479*|)))
                               (format |port`4462*| ")"))
                             (format |port`4462*| " ~r" |e`4479*|)))
                       (condition-irritants |c`4458*|))))
         (ret.const.unspec))
       (push.close+
         (0 0 . output-expansion)
         (call (apply.gloc.of expansion-backtrace "./boot/interaction.scm" . 51220))
         (if.false.ret)
         (call
           (touch.gloc.of current-macro-expression)
           (apply.gloc.of current-macro-expression "./boot/interaction.scm" . 52244))
         (if.false.ret)
         (push.const . #f)
         (push.const . #f)
         (extend . 2)
         (push.close
           (0 0)
           (call (apply.gloc.of pretty-print-initial-indent "./boot/interaction.scm" . 55318))
           (set.iloc (1 . 0) "./boot/interaction.scm" . 55318)
           (call (apply.gloc.of pretty-print-maximum-lines "./boot/interaction.scm" . 55318))
           (set.iloc (1 . 1) "./boot/interaction.scm" . 55318)
           (call
             (push.const . 5)
             (apply.gloc.of pretty-print-initial-indent "./boot/interaction.scm" . 55318))
           (push.const . 10)
           (apply.gloc.of pretty-print-maximum-lines "./boot/interaction.scm" . 55318))
         (push.close
           (0 0)
           (push.iloc 6 . 0)
           (push.const . "~%~%expanding:~%  >  ")
           (subr.gloc.of format 2 "./boot/interaction.scm" . 55318)
           (call
             (call
               (touch.gloc.of unrename-private-primitives)
               (call
                 (touch.gloc.of current-macro-expression)
                 (apply.gloc.of current-macro-expression "./boot/interaction.scm" . 56385))
               (push)
               (apply.gloc.of unrename-private-primitives "./boot/interaction.scm" . 56356))
             (push)
             (push.iloc 6 . 0)
             (apply.gloc.of pretty-print "./boot/interaction.scm" . 56342))
           (push.iloc 6 . 0)
           (push.const . "~%  ~n")
           (call
             (touch.gloc.of current-macro-expression)
             (apply.gloc.of current-macro-expression "./boot/interaction.scm" . 57388))
           (push)
           (subr.gloc.of format 3 "./boot/interaction.scm" . 57366)
           (call
             (call
               (touch.gloc.of expansion-trace-level)
               (apply.gloc.of expansion-trace-level "./boot/interaction.scm" . 58399))
             (push)
             (call (apply.gloc.of expansion-backtrace "./boot/interaction.scm" . 58423))
             (push)
             (subr.gloc.of >= 2 "./boot/interaction.scm" . 58395)
             (if.false.ret)
             (push.iloc 6 . 0)
             (push.const . "~%  *  ...")
             (ret.subr.gloc.of format "./boot/interaction.scm" . 59419))
           (push.close
             (1 0)
             (push.iloc 7 . 0)
             (push.const . "~%  *  ")
             (subr.gloc.of format 2 "./boot/interaction.scm" . 61474)
             (call
               (call
                 (touch.gloc.of unrename-private-primitives)
                 (push.iloc.0 . 0)
                 (apply.gloc.of unrename-private-primitives "./boot/interaction.scm" . 62512))
               (push)
               (push.iloc 7 . 0)
               (apply.gloc.of pretty-print "./boot/interaction.scm" . 62498))
             (push.iloc 7 . 0)
             (push.const . "~%  ~n")
             (push.iloc.0 . 0)
             (ret.subr.gloc.of format "./boot/interaction.scm" . 63522))
           (call
             (touch.gloc.of expansion-trace-stack)
             (apply.gloc.of expansion-trace-stack "./boot/interaction.scm" . 64544))
           (push)
           (apply.gloc.of for-each "./boot/interaction.scm" . 60438))
         (push.close
           (0 0)
           (call
             (push.iloc.1 . 0)
             (apply.gloc.of pretty-print-initial-indent "./boot/interaction.scm" . 55318))
           (push.iloc.1 . 1)
           (apply.gloc.of pretty-print-maximum-lines "./boot/interaction.scm" . 55318))
         (apply.gloc.of |.dynamic-wind| "./boot/interaction.scm" . 55318))
       (push.close
         (1 0 . output-condition)
         (call
           (touch.gloc.of dump-condition)
           (apply.gloc.of dump-condition "./boot/interaction.scm" . 68628))
         (if.false.ret)
         (push.iloc 4 . 0)
         (push.const . "~%~%")
         (subr.gloc.of format 2 "./boot/interaction.scm" . 69652)
         (if.false.ret)
         (touch.gloc.of describe-condition)
         (push.iloc 4 . 0)
         (push.iloc.0 . 0)
         (apply.gloc.of describe-condition "./boot/interaction.scm" . 70676))
       (enclose . 4)
       (call (push.iloc 5 . 0) (apply.gloc.of syntax-violation? "./boot/interaction.scm" . 72722))
       (if.true
         (call (apply.iloc (0 . 0) "./boot/interaction.scm" . 73746))
         (call
           (call
             (push.iloc 5 . 0)
             (apply.gloc.of syntax-violation-form "./boot/interaction.scm" . 74777))
           (push)
           (extend . 1)
           (iloc.0 . 0)
           (if.true
             (call
               (call
                 (push.iloc 6 . 0)
                 (apply.gloc.of who-condition? "./boot/interaction.scm" . 76844))
               (if.false.ret)
               (push.iloc 6 . 0)
               (apply.gloc.of condition-who "./boot/interaction.scm" . 76863))
             (push)
             (call (push.iloc.0 . 0) (apply.gloc.of syntax->datum "./boot/interaction.scm" . 76882))
             (if.eq?.ret.const . #t)
             (push.const . #f)
             (extend . 1)
             (push.close
               (0 0)
               (call (apply.gloc.of pretty-print-initial-indent "./boot/interaction.scm" . 78884))
               (set.iloc (1 . 0) "./boot/interaction.scm" . 78884)
               (push.const . 5)
               (apply.gloc.of pretty-print-initial-indent "./boot/interaction.scm" . 78884))
             (push.close
               (0 0)
               (push.iloc 6 . 0)
               (push.const . "~%  >  ")
               (subr.gloc.of format 2 "./boot/interaction.scm" . 78884)
               (call
                 (call
                   (touch.gloc.of unrename-private-primitives)
                   (call
                     (push.iloc 2 . 0)
                     (apply.gloc.of syntax->datum "./boot/interaction.scm" . 79951))
                   (push)
                   (apply.gloc.of unrename-private-primitives "./boot/interaction.scm" . 79922))
                 (push)
                 (push.iloc 6 . 0)
                 (apply.gloc.of pretty-print "./boot/interaction.scm" . 79908))
               (call
                 (call
                   (touch.gloc.of wrapped-syntax-object?)
                   (push.iloc 2 . 0)
                   (apply.gloc.of wrapped-syntax-object? "./boot/interaction.scm" . 80948))
                 (if.true
                   (touch.gloc.of syntax-object-expr)
                   (push.iloc 2 . 0)
                   (apply.gloc.of syntax-object-expr "./boot/interaction.scm" . 80978))
                 (ret.iloc 2 . 0))
               (push)
               (extend . 1)
               (iloc.0 . 0)
               (if.not.pair?.ret.const . #f)
               (push.iloc 7 . 0)
               (push.const . "~%  ~n")
               (push.iloc.0 . 0)
               (ret.subr.gloc.of format "./boot/interaction.scm" . 81976))
             (push.close
               (0 0)
               (push.iloc.1 . 0)
               (apply.gloc.of pretty-print-initial-indent "./boot/interaction.scm" . 78884))
             (apply.gloc.of |.dynamic-wind| "./boot/interaction.scm" . 78884))
           (ret.const.unspec))
         (call
           (call
             (push.iloc 5 . 0)
             (apply.gloc.of syntax-violation-subform "./boot/interaction.scm" . 82969))
           (push)
           (extend . 1)
           (iloc.0 . 0)
           (if.true
             (call
               (call
                 (push.iloc 6 . 0)
                 (apply.gloc.of who-condition? "./boot/interaction.scm" . 85036))
               (if.false.ret)
               (push.iloc 6 . 0)
               (apply.gloc.of condition-who "./boot/interaction.scm" . 85055))
             (push)
             (call (push.iloc.0 . 0) (apply.gloc.of syntax->datum "./boot/interaction.scm" . 85074))
             (if.eq?.ret.const . #t)
             (push.const . #f)
             (extend . 1)
             (push.close
               (0 0)
               (call (apply.gloc.of pretty-print-initial-indent "./boot/interaction.scm" . 87076))
               (set.iloc (1 . 0) "./boot/interaction.scm" . 87076)
               (push.const . 5)
               (apply.gloc.of pretty-print-initial-indent "./boot/interaction.scm" . 87076))
             (push.close
               (0 0)
               (push.iloc 6 . 0)
               (push.const . "~%  @  ")
               (subr.gloc.of format 2 "./boot/interaction.scm" . 87076)
               (call
                 (call
                   (touch.gloc.of unrename-private-primitives)
                   (call
                     (push.iloc 2 . 0)
                     (apply.gloc.of syntax->datum "./boot/interaction.scm" . 88143))
                   (push)
                   (apply.gloc.of unrename-private-primitives "./boot/interaction.scm" . 88114))
                 (push)
                 (push.iloc 6 . 0)
                 (apply.gloc.of pretty-print "./boot/interaction.scm" . 88100))
               (call
                 (call
                   (touch.gloc.of wrapped-syntax-object?)
                   (push.iloc 2 . 0)
                   (apply.gloc.of wrapped-syntax-object? "./boot/interaction.scm" . 89140))
                 (if.true
                   (touch.gloc.of syntax-object-expr)
                   (push.iloc 2 . 0)
                   (apply.gloc.of syntax-object-expr "./boot/interaction.scm" . 89170))
                 (ret.iloc 2 . 0))
               (push)
               (extend . 1)
               (iloc.0 . 0)
               (if.not.pair?.ret.const . #f)
               (push.iloc 7 . 0)
               (push.const . "~%  ~n")
               (push.iloc.0 . 0)
               (ret.subr.gloc.of format "./boot/interaction.scm" . 90168))
             (push.close
               (0 0)
               (push.iloc.1 . 0)
               (apply.gloc.of pretty-print-initial-indent "./boot/interaction.scm" . 87076))
             (apply.gloc.of |.dynamic-wind| "./boot/interaction.scm" . 87076))
           (ret.const.unspec))
         (call (push.iloc 5 . 0) (apply.iloc (0 . 3) "./boot/interaction.scm" . 91154))
         (call
           (push.iloc 5 . 0)
           (apply.gloc.of syntax-violation-form "./boot/interaction.scm" . 92188))
         (push)
         (call
           (push.iloc 5 . 0)
           (apply.gloc.of syntax-violation-subform "./boot/interaction.scm" . 92219))
         (push)
         (extend . 2)
         (call
           (call
             (touch.gloc.of wrapped-syntax-object?)
             (push.iloc.0 . 0)
             (apply.gloc.of wrapped-syntax-object? "./boot/interaction.scm" . 93218))
           (if.true
             (touch.gloc.of syntax-object-expr)
             (push.iloc.0 . 0)
             (apply.gloc.of syntax-object-expr "./boot/interaction.scm" . 93246))
           (ret.iloc 0 . 0))
         (push)
         (call
           (call
             (touch.gloc.of wrapped-syntax-object?)
             (push.iloc.0 . 1)
             (apply.gloc.of wrapped-syntax-object? "./boot/interaction.scm" . 94242))
           (if.true
             (touch.gloc.of syntax-object-expr)
             (push.iloc.0 . 1)
             (apply.gloc.of syntax-object-expr "./boot/interaction.scm" . 94270))
           (ret.iloc 0 . 1))
         (push)
         (extend . 2)
         (call
           (call
             (touch.gloc.of expansion-trace-stack)
             (apply.gloc.of expansion-trace-stack "./boot/interaction.scm" . 95270))
           (if.not.null?.ret.const . #f)
           (call
             (touch.gloc.of current-macro-expression)
             (apply.gloc.of current-macro-expression "./boot/interaction.scm" . 96296))
           (push)
           (iloc.0 . 0)
           (if.eq?.ret.const . #t)
           (call
             (touch.gloc.of current-macro-expression)
             (apply.gloc.of current-macro-expression "./boot/interaction.scm" . 97320))
           (push)
           (iloc.0 . 1)
           (ret.eq? "./boot/interaction.scm" . 97315))
         (if.true.ret)
         (apply.iloc+ (2 . 2) "./boot/interaction.scm" . 98330))
       (call
         (push.iloc 5 . 0)
         (apply.gloc.of undefined-violation? "./boot/interaction.scm" . 100370))
       (if.true
         (push.iloc 3 . 0)
         (push.const . "error: unbound variable")
         (subr.gloc.of format 2 "./boot/interaction.scm" . 101394)
         (call
           (call (push.iloc 5 . 0) (apply.gloc.of who-condition? "./boot/interaction.scm" . 102423))
           (if.false.ret)
           (push.iloc 3 . 0)
           (push.const . " ~u")
           (call (push.iloc 5 . 0) (apply.gloc.of condition-who "./boot/interaction.scm" . 103466))
           (push)
           (ret.subr.gloc.of format "./boot/interaction.scm" . 103447))
         (call
           (call
             (push.iloc 5 . 0)
             (apply.gloc.of message-condition? "./boot/interaction.scm" . 104471))
           (if.false.ret)
           (push.iloc 3 . 0)
           (push.const . ", ~a")
           (call
             (push.iloc 5 . 0)
             (apply.gloc.of condition-message "./boot/interaction.scm" . 105515))
           (push)
           (ret.subr.gloc.of format "./boot/interaction.scm" . 105495))
         (call (apply.iloc (0 . 1) "./boot/interaction.scm" . 106514))
         (call (push.iloc 5 . 0) (apply.iloc (0 . 3) "./boot/interaction.scm" . 107538))
         (apply.iloc+ (0 . 2) "./boot/interaction.scm" . 108562))
       (call (push.iloc 5 . 0) (apply.gloc.of error? "./boot/interaction.scm" . 110610))
       (if.true
         (call (apply.iloc (0 . 0) "./boot/interaction.scm" . 111634))
         (call (apply.iloc (0 . 1) "./boot/interaction.scm" . 112658))
         (call (push.iloc 5 . 0) (apply.iloc (0 . 3) "./boot/interaction.scm" . 113682))
         (apply.iloc+ (0 . 2) "./boot/interaction.scm" . 114706))
       (call (push.iloc 5 . 0) (apply.gloc.of violation? "./boot/interaction.scm" . 116754))
       (if.true
         (call (apply.iloc (0 . 0) "./boot/interaction.scm" . 117778))
         (call (apply.iloc (0 . 1) "./boot/interaction.scm" . 118802))
         (call (push.iloc 5 . 0) (apply.iloc (0 . 3) "./boot/interaction.scm" . 119826))
         (apply.iloc+ (0 . 2) "./boot/interaction.scm" . 120850))
       (call (push.iloc 5 . 0) (apply.gloc.of warning? "./boot/interaction.scm" . 122898))
       (if.true
         (push.iloc 3 . 0)
         (push.const . "warning")
         (subr.gloc.of format 2 "./boot/interaction.scm" . 123922)
         (call
           (call (push.iloc 5 . 0) (apply.gloc.of who-condition? "./boot/interaction.scm" . 124951))
           (if.false.ret)
           (push.iloc 3 . 0)
           (push.const . " in ~u")
           (call (push.iloc 5 . 0) (apply.gloc.of condition-who "./boot/interaction.scm" . 125997))
           (push)
           (ret.subr.gloc.of format "./boot/interaction.scm" . 125975))
         (call
           (call
             (push.iloc 5 . 0)
             (apply.gloc.of message-condition? "./boot/interaction.scm" . 126999))
           (if.false.ret)
           (push.iloc 3 . 0)
           (push.const . ": ~a")
           (call
             (push.iloc 5 . 0)
             (apply.gloc.of condition-message "./boot/interaction.scm" . 128043))
           (push)
           (ret.subr.gloc.of format "./boot/interaction.scm" . 128023))
         (call (apply.iloc (0 . 1) "./boot/interaction.scm" . 129042))
         (call (push.iloc 5 . 0) (apply.iloc (0 . 3) "./boot/interaction.scm" . 130066))
         (apply.iloc+ (0 . 2) "./boot/interaction.scm" . 131090))
       (call (push.iloc 5 . 0) (apply.gloc.of condition? "./boot/interaction.scm" . 133138))
       (if.true
         (push.iloc 3 . 0)
         (push.const . "error: unknown type of exception caught~%~%irritants:~%~a")
         (call
           (touch.gloc.of describe-condition)
           (push.const . #f)
           (push.iloc 5 . 0)
           (apply.gloc.of describe-condition "./boot/interaction.scm" . 134235))
         (push)
         (subr.gloc.of format 3 "./boot/interaction.scm" . 134162)
         (call (apply.iloc (0 . 1) "./boot/interaction.scm" . 135186))
         (apply.iloc+ (0 . 2) "./boot/interaction.scm" . 136210))
       (push.iloc 3 . 0)
       (push.const . "error: unknown type of exception caught, ~a")
       (push.iloc 5 . 0)
       (subr.gloc.of format 3 "./boot/interaction.scm" . 139282)
       (call (apply.iloc (0 . 1) "./boot/interaction.scm" . 140306))
       (apply.iloc+ (0 . 2) "./boot/interaction.scm" . 141330))
     (push.close
       (0 0)
       (call
         (push.iloc.1 . 0)
         (apply.gloc.of pretty-print-line-length "./boot/interaction.scm" . 20491))
       (call
         (push.iloc.1 . 1)
         (apply.gloc.of pretty-print-maximum-lines "./boot/interaction.scm" . 20491))
       (push.iloc.1 . 2)
       (apply.gloc.of pretty-print-unwrap-syntax "./boot/interaction.scm" . 20491))
     (apply.gloc.of
       |.dynamic-wind|
       (|.dynamic-wind|
         (lambda ()
           (set! |tmp1`4465`4469*| (pretty-print-line-length))
           (set! |tmp1`4466`4469*| (pretty-print-maximum-lines))
           (set! |tmp1`4467`4469*| (pretty-print-unwrap-syntax))
           (pretty-print-line-length |tmp2`4465`4469*|)
           (pretty-print-maximum-lines 5)
           (pretty-print-unwrap-syntax #t))
         (lambda ()
           (letrec* ((|output-who-message`4474*|
                       (lambda ()
                         (format |port`4462*| "error")
                         (and (who-condition? |c`4458*|)
                              (if (string? (condition-who |c`4458*|))
                                  (format |port`4462*| " in ~a" (condition-who |c`4458*|))
                                  (format |port`4462*| " in ~u" (condition-who |c`4458*|))))
                         (and (message-condition? |c`4458*|)
                              (format |port`4462*| ": ~a" (condition-message |c`4458*|)))))
                     (|output-irritants`4474*|
                       (lambda ()
                         (if (and (irritants-condition? |c`4458*|)
                                  (pair? (condition-irritants |c`4458*|)))
                             (begin
                               (format |port`4462*| "~%~%irritants:")
                               (for-each (lambda (|e`4479*|)
                                           (format |port`4462*| "~% ")
                                           (if (list? |e`4479*|)
                                               (begin
                                                 (format |port`4462*| " (")
                                                 (letrec* ((|loop`4485*|
                                                             (lambda (|lst`4486*|)
                                                               (if (pair? |lst`4486*|)
                                                                   (begin
                                                                     (format
                                                                       |port`4462*|
                                                                       "~a"
                                                                       (car |lst`4486*|))
                                                                     (if (pair? (cdr |lst`4486*|))
                                                                         (begin
                                                                           (format |port`4462*| " ")
                                                                           (|loop`4485*|
                                                                             (cdr |lst`4486*|)))
                                                                         (|.unspecified|)))
                                                                   (|.unspecified|)))))
                                                   (|loop`4485*| (map |.L1286| |e`4479*|)))
                                                 (format |port`4462*| ")"))
                                               (format |port`4462*| " ~r" |e`4479*|)))
                                         (condition-irritants |c`4458*|)))
                             (|.unspecified|))))
                     (|output-expansion`4474*|
                       (lambda ()
                         (and (expansion-backtrace)
                              (current-macro-expression)
                              (let ((|tmp1`4492`4495*| #f) (|tmp1`4493`4495*| #f))
                                (|.dynamic-wind|
                                  (lambda ()
                                    (set! |tmp1`4492`4495*| (pretty-print-initial-indent))
                                    (set! |tmp1`4493`4495*| (pretty-print-maximum-lines))
                                    (pretty-print-initial-indent 5)
                                    (pretty-print-maximum-lines 10))
                                  (lambda ()
                                    (format |port`4462*| "~%~%expanding:~%  >  ")
                                    (pretty-print
                                      (unrename-private-primitives (current-macro-expression))
                                      |port`4462*|)
                                    (format |port`4462*| "~%  ~n" (current-macro-expression))
                                    (and (>= (expansion-trace-level) (expansion-backtrace))
                                         (format |port`4462*| "~%  *  ..."))
                                    (for-each (lambda (|e`4501*|)
                                                (format |port`4462*| "~%  *  ")
                                                (pretty-print
                                                  (unrename-private-primitives |e`4501*|)
                                                  |port`4462*|)
                                                (format |port`4462*| "~%  ~n" |e`4501*|))
                                              (expansion-trace-stack)))
                                  (lambda ()
                                    (pretty-print-initial-indent |tmp1`4492`4495*|)
                                    (pretty-print-maximum-lines |tmp1`4493`4495*|)))))))
                     (|output-condition`4474*|
                       (lambda (|c`4505*|)
                         (and (dump-condition)
                              (format |port`4462*| "~%~%")
                              (describe-condition |port`4462*| |c`4505*|)))))
             (if (syntax-violation? |c`4458*|)
                 (begin
                   (|output-who-message`4474*|)
                   (let ((|.L1284`4507*| (syntax-violation-form |c`4458*|)))
                     (if |.L1284`4507*|
                         (or (eq?
                               (and (who-condition? |c`4458*|) (condition-who |c`4458*|))
                               (syntax->datum |.L1284`4507*|))
                             (let ((|tmp1`4512`4514*| #f))
                               (|.dynamic-wind|
                                 (lambda ()
                                   (set! |tmp1`4512`4514*| (pretty-print-initial-indent))
                                   (pretty-print-initial-indent 5))
                                 (lambda ()
                                   (format |port`4462*| "~%  >  ")
                                   (pretty-print
                                     (unrename-private-primitives (syntax->datum |.L1284`4507*|))
                                     |port`4462*|)
                                   (let ((|form`4520*|
                                           (if (wrapped-syntax-object? |.L1284`4507*|)
                                               (syntax-object-expr |.L1284`4507*|)
                                               |.L1284`4507*|)))
                                     (and (pair? |form`4520*|)
                                          (format |port`4462*| "~%  ~n" |form`4520*|))))
                                 (lambda () (pretty-print-initial-indent |tmp1`4512`4514*|)))))
                         (|.unspecified|)))
                   (let ((|.L1285`4524*| (syntax-violation-subform |c`4458*|)))
                     (if |.L1285`4524*|
                         (or (eq?
                               (and (who-condition? |c`4458*|) (condition-who |c`4458*|))
                               (syntax->datum |.L1285`4524*|))
                             (let ((|tmp1`4529`4531*| #f))
                               (|.dynamic-wind|
                                 (lambda ()
                                   (set! |tmp1`4529`4531*| (pretty-print-initial-indent))
                                   (pretty-print-initial-indent 5))
                                 (lambda ()
                                   (format |port`4462*| "~%  @  ")
                                   (pretty-print
                                     (unrename-private-primitives (syntax->datum |.L1285`4524*|))
                                     |port`4462*|)
                                   (let ((|form`4537*|
                                           (if (wrapped-syntax-object? |.L1285`4524*|)
                                               (syntax-object-expr |.L1285`4524*|)
                                               |.L1285`4524*|)))
                                     (and (pair? |form`4537*|)
                                          (format |port`4462*| "~%  ~n" |form`4537*|))))
                                 (lambda () (pretty-print-initial-indent |tmp1`4529`4531*|)))))
                         (|.unspecified|)))
                   (|output-condition`4474*| |c`4458*|)
                   (let ((|e1`4541*| (syntax-violation-form |c`4458*|))
                         (|e2`4541*| (syntax-violation-subform |c`4458*|)))
                     (let ((|e1`4543*|
                             (if (wrapped-syntax-object? |e1`4541*|)
                                 (syntax-object-expr |e1`4541*|)
                                 |e1`4541*|))
                           (|e2`4543*|
                             (if (wrapped-syntax-object? |e2`4541*|)
                                 (syntax-object-expr |e2`4541*|)
                                 |e2`4541*|)))
                       (or (and (null? (expansion-trace-stack))
                                (or (eq? (current-macro-expression) |e1`4543*|)
                                    (eq? (current-macro-expression) |e2`4543*|)))
                           (|output-expansion`4474*|)))))
                 (if (undefined-violation? |c`4458*|)
                     (begin
                       (format |port`4462*| "error: unbound variable")
                       (and (who-condition? |c`4458*|)
                            (format |port`4462*| " ~u" (condition-who |c`4458*|)))
                       (and (message-condition? |c`4458*|)
                            (format |port`4462*| ", ~a" (condition-message |c`4458*|)))
                       (|output-irritants`4474*|)
                       (|output-condition`4474*| |c`4458*|)
                       (|output-expansion`4474*|))
                     (if (error? |c`4458*|)
                         (begin
                           (|output-who-message`4474*|)
                           (|output-irritants`4474*|)
                           (|output-condition`4474*| |c`4458*|)
                           (|output-expansion`4474*|))
                         (if (violation? |c`4458*|)
                             (begin
                               (|output-who-message`4474*|)
                               (|output-irritants`4474*|)
                               (|output-condition`4474*| |c`4458*|)
                               (|output-expansion`4474*|))
                             (if (warning? |c`4458*|)
                                 (begin
                                   (format |port`4462*| "warning")
                                   (and (who-condition? |c`4458*|)
                                        (format |port`4462*| " in ~u" (condition-who |c`4458*|)))
                                   (and (message-condition? |c`4458*|)
                                        (format |port`4462*| ": ~a" (condition-message |c`4458*|)))
                                   (|output-irritants`4474*|)
                                   (|output-condition`4474*| |c`4458*|)
                                   (|output-expansion`4474*|))
                                 (if (condition? |c`4458*|)
                                     (begin
                                       (format
                                         |port`4462*|
                                         "error: unknown type of exception caught~%~%irritants:~%~a"
                                         (describe-condition #f |c`4458*|))
                                       (|output-irritants`4474*|)
                                       (|output-expansion`4474*|))
                                     (begin
                                       (format
                                         |port`4462*|
                                         "error: unknown type of exception caught, ~a"
                                         |c`4458*|)
                                       (|output-irritants`4474*|)
                                       (|output-expansion`4474*|))))))))))
         (lambda ()
           (pretty-print-line-length |tmp1`4465`4469*|)
           (pretty-print-maximum-lines |tmp1`4466`4469*|)
           (pretty-print-unwrap-syntax |tmp1`4467`4469*|)))))
   (push.iloc.0 . 0)
   (push.const . "~%")
   (subr.gloc.of format 2 "./boot/interaction.scm" . 143369)
   (call
     (push.const . "EMACS")
     (subr.gloc.of lookup-process-environment 1 "./boot/interaction.scm" . 144412)
     (if.true.ret)
     (subr.gloc.of current-input-port 0)
     (push)
     (push.subr.gloc.of port-device-subtype 1 "./boot/interaction.scm" . 144459)
     (push.const . char)
     (push.subr.gloc.of eq? 2 "./boot/interaction.scm" . 144454)
     (ret.subr.gloc.of not "./boot/interaction.scm" . 144449))
   (push)
   (extend . 1)
   (call
     (call (push.iloc 3 . 0) (apply.gloc.of serious-condition? "./boot/interaction.scm" . 145424))
     (if.false.ret)
     (push.iloc.1 . 0)
     (ret.subr.gloc.of display-backtrace "./boot/interaction.scm" . 145447))
   (iloc.0 . 0)
   (if.true
     (push.iloc 2 . 0)
     (push.const . "~a~!")
     (push.iloc.1 . 0)
     (push.subr.gloc.of extract-accumulated-string 1 "./boot/interaction.scm" . 147490)
     (ret.subr.gloc.of format "./boot/interaction.scm" . 147471))
   (push.iloc 2 . 0)
   (push.const . "~%~a~%~!")
   (push.iloc.1 . 0)
   (push.subr.gloc.of extract-accumulated-string 1 "./boot/interaction.scm" . 148518)
   (ret.subr.gloc.of format "./boot/interaction.scm" . 148495))
 (set.gloc.of default-exception-printer)
 (ret.const.unspec))
((close
   (1 0)
   (iloc.0 . 0)
   (if.true
     (push.iloc.0 . 0)
     (subr.gloc.of procedure? 1 "./boot/interaction.scm" . 154652)
     (if.true (ret.iloc 0 . 0))
     (push.const . current-exception-printer)
     (push.const . "expected procedure or #f, but got ~s")
     (push.iloc.0 . 0)
     (push.subr.gloc.of format 2 "./boot/interaction.scm" . 158749)
     (apply.gloc.of assertion-violation "./boot/interaction.scm" . 156700))
   (ret.gloc.of values))
 (set.gloc.of |.L1290|)
 (call
   (push.gloc.of default-exception-printer)
   (push.gloc.of |.L1290|)
   (apply.gloc.of make-parameter "./boot/interaction.scm" . 152595))
 (set.gloc.of current-exception-printer)
 (ret.const.unspec))
((close
   (1 0 . add-load-path)
   (push.iloc.0 . 0)
   (subr.gloc.of string? 1 "./boot/interaction.scm" . 162828)
   (if.true
     (call
       (push.iloc.0 . 0)
       (push.const . "")
       (subr.gloc.of string=? 2 "./boot/interaction.scm" . 163856)
       (if.true.ret)
       (call
         (touch.gloc.of expand-path)
         (push.iloc.0 . 0)
         (apply.gloc.of expand-path "./boot/interaction.scm" . 164892))
       (push)
       (extend . 1)
       (push.iloc.0 . 0)
       (call (apply.gloc.of scheme-load-paths "./boot/interaction.scm" . 165923))
       (push)
       (subr.gloc.of member 2 "./boot/interaction.scm" . 165910)
       (if.true.ret)
       (push.iloc.0 . 0)
       (call (apply.gloc.of scheme-load-paths "./boot/interaction.scm" . 166964))
       (push.cons)
       (apply.gloc.of scheme-load-paths "./boot/interaction.scm" . 166934))
     (apply.gloc.of scheme-load-paths "./boot/interaction.scm" . 167948))
   (push.const . add-load-path)
   (push.const . "expected string, but got ~s")
   (push.iloc.0 . 0)
   (push.subr.gloc.of format 2 "./boot/interaction.scm" . 170032)
   (apply.gloc.of assertion-violation "./boot/interaction.scm" . 169996))
 (set.gloc.of add-load-path)
 (ret.const.unspec))
((close
   (1 0 . add-library-path)
   (push.iloc.0 . 0)
   (subr.gloc.of string? 1 "./boot/interaction.scm" . 174092)
   (if.true
     (call
       (push.iloc.0 . 0)
       (push.const . "")
       (subr.gloc.of string=? 2 "./boot/interaction.scm" . 175120)
       (if.true.ret)
       (call
         (touch.gloc.of expand-path)
         (push.iloc.0 . 0)
         (apply.gloc.of expand-path "./boot/interaction.scm" . 176156))
       (push)
       (extend . 1)
       (push.iloc.0 . 0)
       (call (apply.gloc.of scheme-library-paths "./boot/interaction.scm" . 177187))
       (push)
       (subr.gloc.of member 2 "./boot/interaction.scm" . 177174)
       (if.true.ret)
       (push.iloc.0 . 0)
       (call (apply.gloc.of scheme-library-paths "./boot/interaction.scm" . 178231))
       (push.cons)
       (apply.gloc.of scheme-library-paths "./boot/interaction.scm" . 178198))
     (apply.gloc.of scheme-library-paths "./boot/interaction.scm" . 179212))
   (push.const . add-library-path)
   (push.const . "expected string, but got ~s")
   (push.iloc.0 . 0)
   (push.subr.gloc.of format 2 "./boot/interaction.scm" . 181299)
   (apply.gloc.of assertion-violation "./boot/interaction.scm" . 181260))
 (set.gloc.of add-library-path)
 (ret.const.unspec))
((close
   (0 0 . home-directory)
   (push.const . "~/")
   (call
     (push.const . operating-system)
     (push.subr.gloc.of architecture-feature 1 "./boot/interaction.scm" . 187431)
     (push.const . "windows")
     (subr.gloc.of string-contains 2 "./boot/interaction.scm" . 187414)
     (if.true
       (call
         (push.const . "HOMEDRIVE")
         (subr.gloc.of lookup-process-environment 1 "./boot/interaction.scm" . 188457)
         (if.true.ret)
         (ret.const . ""))
       (push)
       (call
         (push.const . "HOMEPATH")
         (subr.gloc.of lookup-process-environment 1 "./boot/interaction.scm" . 189481)
         (if.true.ret)
         (ret.const . ""))
       (push)
       (ret.subr.gloc.of string-append "./boot/interaction.scm" . 188438))
     (push.const . "HOME")
     (subr.gloc.of lookup-process-environment 1 "./boot/interaction.scm" . 190490)
     (if.true.ret)
     (ret.const . ""))
   (push)
   (push.subr.gloc.of format 2 "./boot/interaction.scm" . 185361)
   (extend . 1)
   (push.iloc.0 . 0)
   (subr.gloc.of file-exists? 1 "./boot/interaction.scm" . 191500)
   (if.false.ret)
   (ret.iloc 0 . 0))
 (set.gloc.of home-directory)
 (ret.const.unspec))
((close
   (0 1 . process)
   (push.gloc.of process-spawn)
   (push.const . #t)
   (push.const . #f)
   (push.const . #f)
   (push.const . #f)
   (push.const . #f)
   (push.iloc.0 . 0)
   (apply.gloc.of apply "./boot/interaction.scm" . 193566))
 (set.gloc.of process)
 (ret.const.unspec))
((close
   (1 0 . process-shell-command)
   (push.const . operating-system)
   (push.subr.gloc.of architecture-feature 1 "./boot/interaction.scm" . 197661)
   (push.const . "windows")
   (subr.gloc.of string-contains 2 "./boot/interaction.scm" . 197644)
   (if.true
     (call
       (push.const . "COMSPEC")
       (subr.gloc.of getenv 1 "./boot/interaction.scm" . 198681)
       (if.true.ret)
       (ret.const . "cmd.exe"))
     (push)
     (push.const . "/c")
     (push.iloc.0 . 0)
     (apply.gloc.of process "./boot/interaction.scm" . 198668))
   (call
     (push.const . "SHELL")
     (subr.gloc.of getenv 1 "./boot/interaction.scm" . 200729)
     (if.true.ret)
     (ret.const . "/bin/sh"))
   (push)
   (push.const . "-c")
   (push.iloc.0 . 0)
   (apply.gloc.of process "./boot/interaction.scm" . 200716))
 (set.gloc.of process-shell-command)
 (ret.const.unspec))
((close
   (1 1 . apply-scheme-proc-assistant)
   (push.const . #f)
   (call
     (touch.gloc.of recursion-level)
     (apply.gloc.of recursion-level "./boot/interaction.scm" . 204829))
   (push)
   (extend . 2)
   (push.close
     (0 0)
     (call
       (touch.gloc.of recursion-level)
       (apply.gloc.of recursion-level "./boot/interaction.scm" . 207895))
     (=.iloc (1 . 1) "./boot/interaction.scm" . 207886)
     (if.false.call
       (push.const . #f)
       (push.const . "scheme continuation interleave with c/c++ continuation")
       (apply.gloc.of assertion-violation "./boot/interaction.scm" . 208910))
     (const . #f)
     (set.iloc (1 . 0) "./boot/interaction.scm" . 209930)
     (ret.const.unspec))
   (push.close
     (0 0)
     (push.close
       (1 0)
       (const . #t)
       (set.iloc (2 . 0) "./boot/interaction.scm" . 214029)
       (push.iloc.0 . 0)
       (apply.gloc.of raise "./boot/interaction.scm" . 215053))
     (push.close
       (0 0)
       (push.iloc 3 . 0)
       (push.iloc 3 . 1)
       (apply.gloc.of apply "./boot/interaction.scm" . 217101))
     (apply.gloc.of with-exception-handler "./boot/interaction.scm" . 211978))
   (push.close
     (0 0)
     (iloc.1 . 0)
     (if.false.ret)
     (touch.gloc.of escape)
     (apply.gloc.of escape "./boot/interaction.scm" . 219157))
   (apply.gloc.of dynamic-wind "./boot/interaction.scm" . 205831))
 (set.gloc.of apply-scheme-proc-assistant)
 (ret.const.unspec))
((close
   (0 0 . nonblock-skip-whitespace)
   (subr.gloc.of current-input-port 0)
   (push)
   (subr.gloc.of nonblock-byte-ready? 1 "./boot/interaction.scm" . 223242)
   (if.false.ret)
   (call
     (subr.gloc.of current-input-port 0)
     (push)
     (push.subr.gloc.of lookahead-char 1 "./boot/interaction.scm" . 224276)
     (extend . 1)
     (push.iloc.0 . 0)
     (subr.gloc.of eof-object? 1 "./boot/interaction.scm" . 225302)
     (if.true.ret.const . #f)
     (push.iloc.0 . 0)
     (ret.subr.gloc.of char-whitespace? "./boot/interaction.scm" . 226321))
   (if.false.ret)
   (subr.gloc.of current-input-port 0)
   (push)
   (subr.gloc.of get-char 1 "./boot/interaction.scm" . 227338)
   (if.false.ret)
   (touch.gloc.of nonblock-skip-whitespace)
   (apply.gloc.of nonblock-skip-whitespace "./boot/interaction.scm" . 228362))
 (set.gloc.of nonblock-skip-whitespace)
 (ret.const.unspec))
((close
   (0 0 . loop)
   (subr.gloc.of current-input-port 0)
   (push)
   (subr.gloc.of nonblock-byte-ready? 1 "./boot/interaction.scm" . 234512)
   (if.true.ret)
   (push.const . 10000)
   (subr.gloc.of usleep 1 "./boot/interaction.scm" . 236560)
   (touch.gloc.of |loop`4597*|)
   (apply.gloc.of |loop`4597*| "./boot/interaction.scm" . 237584))
 (set.gloc.of |loop`4597*|)
 (close
   (0 0)
   (touch.gloc.of |loop`4597*|)
   (apply.gloc.of |loop`4597*| "./boot/interaction.scm" . 234505))
 (set.gloc.of |.L1307|)
 (close
   (0 0 . nonblock-input-wait)
   (push.const . #f)
   (extend . 1)
   (push.close
     (0 0)
     (subr.gloc.of collect-stack-notify 0 "./boot/interaction.scm" . 233479)
     (set.iloc (1 . 0) "./boot/interaction.scm" . 233479)
     (push.const . #f)
     (ret.subr.gloc.of collect-stack-notify (collect-stack-notify #f)))
   (push.gloc.of |.L1307|)
   (push.close
     (0 0)
     (push.iloc.1 . 0)
     (ret.subr.gloc.of collect-stack-notify "./boot/interaction.scm" . 233479))
   (apply.gloc.of
     |.dynamic-wind|
     (|.dynamic-wind|
       (lambda () (set! |tmp1`4588`4590*| (collect-stack-notify)) (collect-stack-notify #f))
       |.L1307|
       (lambda () (collect-stack-notify |tmp1`4588`4590*|)))))
 (set.gloc.of nonblock-input-wait)
 (ret.const.unspec))
((close
   (0 0 . read-eval-print-loop)
   (call
     (push.const . "EMACS")
     (subr.gloc.of lookup-process-environment 1 "./boot/interaction.scm" . 241688)
     (if.true.ret)
     (subr.gloc.of current-input-port 0)
     (push)
     (push.subr.gloc.of port-device-subtype 1 "./boot/interaction.scm" . 241735)
     (push.const . char)
     (push.subr.gloc.of eq? 2 "./boot/interaction.scm" . 241730)
     (ret.subr.gloc.of not "./boot/interaction.scm" . 241725))
   (push)
   (extend . 1)
   (extend.enclose
     (0 0 . loop)
     (call
       (push.close
         (1 0)
         (push.close
           (1 0)
           (subr.gloc.of current-output-port 0)
           (push)
           (subr.gloc.of flush-output-port 1 "./boot/interaction.scm" . 247823)
           (call
             (push.iloc.0 . 0)
             (call (apply.gloc.of current-exception-printer "./boot/interaction.scm" . 248848))
             (apply))
           (call
             (push.iloc.0 . 0)
             (apply.gloc.of serious-condition? "./boot/interaction.scm" . 249876))
           (if.false.ret)
           (apply.iloc (1 . 0) "./boot/interaction.scm" . 249899))
         (push.close
           (0 0)
           (call
             (touch.gloc.of nonblock-skip-whitespace)
             (apply.gloc.of nonblock-skip-whitespace "./boot/interaction.scm" . 251919))
           (call
             (subr.gloc.of current-environment 0)
             (push)
             (subr.gloc.of interaction-environment 0 "./boot/interaction.scm" . 252974)
             (if.eq?
               (push.const . #t)
               (push.const . "~&> ~!")
               (ret.subr.gloc.of format "./boot/interaction.scm" . 253971))
             (push.const . #t)
             (push.const . "~&~a: ~!")
             (subr.gloc.of current-environment 0)
             (push)
             (ret.subr.gloc.of format "./boot/interaction.scm" . 254995))
           (call
             (touch.gloc.of nonblock-input-wait)
             (apply.gloc.of nonblock-input-wait "./boot/interaction.scm" . 256015))
           (call
             (touch.gloc.of current-macro-expression)
             (push.const . #f)
             (apply.gloc.of current-macro-expression "./boot/interaction.scm" . 257039))
           (subr.gloc.of make-core-hashtable 0)
           (push)
           (subr.gloc.of current-source-comments 1 "./boot/interaction.scm" . 258063)
           (call
             (touch.gloc.of current-temporaries)
             (push.const . string=?)
             (push.subr.gloc.of make-core-hashtable 1 "./boot/interaction.scm" . 259108)
             (apply.gloc.of current-temporaries "./boot/interaction.scm" . 259087))
           (call
             (touch.gloc.of set-port-current-line!)
             (subr.gloc.of current-input-port 0)
             (push)
             (push.const . 1)
             (apply.gloc.of set-port-current-line! "./boot/interaction.scm" . 260111))
           (call
             (touch.gloc.of set-port-current-column!)
             (subr.gloc.of current-output-port 0)
             (push)
             (push.const . 1)
             (apply.gloc.of set-port-current-column! "./boot/interaction.scm" . 261135))
           (call
             (touch.gloc.of set-port-current-column!)
             (subr.gloc.of current-error-port 0)
             (push)
             (push.const . 1)
             (apply.gloc.of set-port-current-column! "./boot/interaction.scm" . 262159))
           (subr.gloc.of current-input-port 0)
           (push)
           (subr.gloc.of current-source-comments 0)
           (push)
           (push.const . read)
           (push.subr.gloc.of core-read 3 "./boot/interaction.scm" . 263195)
           (extend . 1)
           (call
             (push.iloc.0 . 0)
             (subr.gloc.of eof-object? 1 "./boot/interaction.scm" . 264214)
             (if.false.ret)
             (push.const . 0)
             (ret.subr.gloc.of exit "./boot/interaction.scm" . 264233))
           (call
             (iloc 5 . 0)
             (if.false.ret)
             (push.const . #t)
             (push.const . "~%~!")
             (ret.subr.gloc.of format "./boot/interaction.scm" . 265246))
           (call
             (touch.gloc.of interpret)
             (push.iloc.0 . 0)
             (apply.gloc.of interpret "./boot/interaction.scm" . 266268))
           (push)
           (extend . 1)
           (push.iloc.0 . 0)
           (subr.gloc.of unspecified? 1 "./boot/interaction.scm" . 267290)
           (if.true.ret)
           (call (push.iloc.0 . 0) (apply.gloc.of pretty-print "./boot/interaction.scm" . 269338))
           (subr.gloc.of current-output-port 0)
           (push)
           (ret.subr.gloc.of flush-output-port "./boot/interaction.scm" . 270362))
         (apply.gloc.of with-exception-handler "./boot/interaction.scm" . 245772))
       (apply.gloc.of call-with-current-continuation "./boot/interaction.scm" . 243721))
     (apply.iloc (1 . 0) "./boot/interaction.scm" . 271369))
   (apply.iloc (0 . 0) "./boot/interaction.scm" . 243721))
 (set.gloc.of read-eval-print-loop)
 (ret.const.unspec))
((close
   (1 0)
   (subr.gloc.of current-output-port 0)
   (push)
   (subr.gloc.of flush-output-port 1 "./boot/interaction.scm" . 280589)
   (call
     (push.iloc.0 . 0)
     (call (apply.gloc.of current-exception-printer "./boot/interaction.scm" . 281614))
     (apply))
   (call (push.iloc.0 . 0) (apply.gloc.of serious-condition? "./boot/interaction.scm" . 282642))
   (if.false.ret)
   (push.const . #f)
   (ret.subr.gloc.of exit "./boot/interaction.scm" . 282665))
 (set.gloc.of |.L1313|)
 (close
   (1 0)
   (push.gloc.of |.L1313|)
   (push.gloc.of |.L1316|)
   (apply.gloc.of with-exception-handler "./boot/interaction.scm" . 279563))
 (set.gloc.of |.L1314|)
 (close
   (0 0)
   (call
     (touch.gloc.of nonblock-skip-whitespace)
     (apply.gloc.of nonblock-skip-whitespace "./boot/interaction.scm" . 284685))
   (call
     (touch.gloc.of nonblock-input-wait)
     (apply.gloc.of nonblock-input-wait "./boot/interaction.scm" . 285709))
   (call
     (touch.gloc.of current-macro-expression)
     (push.const . #f)
     (apply.gloc.of current-macro-expression "./boot/interaction.scm" . 286733))
   (subr.gloc.of make-core-hashtable 0)
   (push)
   (subr.gloc.of current-source-comments 1 "./boot/interaction.scm" . 287757)
   (call
     (touch.gloc.of current-temporaries)
     (push.const . string=?)
     (push.subr.gloc.of make-core-hashtable 1 "./boot/interaction.scm" . 288802)
     (apply.gloc.of current-temporaries "./boot/interaction.scm" . 288781))
   (subr.gloc.of current-input-port 0)
   (push)
   (subr.gloc.of current-source-comments 0)
   (push)
   (push.const . read)
   (push.subr.gloc.of core-read 3 "./boot/interaction.scm" . 289817)
   (extend . 1)
   (push.iloc.0 . 0)
   (subr.gloc.of eof-object? 1 "./boot/interaction.scm" . 290838)
   (if.true (push.const . 0) (ret.subr.gloc.of exit "./boot/interaction.scm" . 290857))
   (call
     (touch.gloc.of interpret)
     (push.iloc.0 . 0)
     (apply.gloc.of interpret "./boot/interaction.scm" . 292886))
   (subr.gloc.of current-output-port 0)
   (push)
   (ret.subr.gloc.of flush-output-port "./boot/interaction.scm" . 293910))
 (set.gloc.of |.L1316|)
 (close
   (0 0 . loop)
   (call
     (push.gloc.of |.L1314|)
     (apply.gloc.of call-with-current-continuation "./boot/interaction.scm" . 277512))
   (touch.gloc.of |loop`4625*|)
   (apply.gloc.of |loop`4625*| "./boot/interaction.scm" . 294919))
 (set.gloc.of |loop`4625*|)
 (close
   (0 0 . quiet-read-eval-print-loop)
   (touch.gloc.of |loop`4625*|)
   (apply.gloc.of |loop`4625*| "./boot/interaction.scm" . 276487))
 (set.gloc.of quiet-read-eval-print-loop)
 (ret.const.unspec))
((call
   (push.const
     (|.LIST| . |.list|)
     (|.CONS| . |.cons|)
     (|.CONS*| . |.cons*|)
     (|.APPEND| . |.append|)
     (|.VECTOR| . |.vector|)
     (|.LIST->VECTOR| . |.list->vector|)
     (|.EQ?| . |.eq?|)
     (|.EQV?| . |.eqv?|)
     (|.MEMQ| . |.memq|)
     (|.MEMV| . |.memv|)
     (|.CALL-WITH-VALUES| . |.call-with-values|)
     (|.APPLY| . |.apply|)
     (|.CDR| . |.cdr|)
     (|.IDENTIFIER?| . |.identifier?|)
     (|.MAKE-VARIABLE-TRANSFORMER| . |.make-variable-transformer|)
     (|.ASSERTION-VIOLATION| . |.assertion-violation|)
     (|.UNSPECIFIED| . |.unspecified|)
     (|.QUOTE| . quote)
     (|.LET| . let)
     (|.LETREC*| . letrec*)
     (|.BEGIN| . begin)
     (|.LAMBDA| . lambda)
     (|.IF| . if)
     (|.SET!| . set!)
     (|.OR| . or)
     (|.COND| . cond)
     (|.ELSE| . else)
     (|.DEFINE-SYNTAX| . define-syntax)
     (|.SYNTAX| . syntax)
     (|.SYNTAX-CASE| . syntax-case))
   (extend . 1)
   (ret.close
     (1 0 . unrename-private-primitives)
     (extend.enclose
       (1 0 . loop)
       (iloc.0 . 0)
       (if.pair?
         (call
           (push.car.iloc (0 . 0) "./boot/interaction.scm" . 331804)
           (apply.iloc (1 . 0) "./boot/interaction.scm" . 331798))
         (push)
         (call
           (push.cdr.iloc (0 . 0) "./boot/interaction.scm" . 331821)
           (apply.iloc (1 . 0) "./boot/interaction.scm" . 331815))
         (ret.cons "./boot/interaction.scm" . 331792))
       (iloc.0 . 0)
       (if.symbol?
         (push.iloc.0 . 0)
         (push.iloc 3 . 0)
         (push.subr.gloc.of assq 2 "./boot/interaction.scm" . 333847)
         (extend . 1)
         (iloc.0 . 0)
         (if.true (push.iloc.0 . 0) (ret.subr.gloc.of cdr (cdr |.L1323`4646*|)))
         (ret.iloc 1 . 0))
       (push.iloc.0 . 0)
       (subr.gloc.of vector? 1 "./boot/interaction.scm" . 335888)
       (if.true
         (call
           (push.iloc.1 . 0)
           (push.iloc.0 . 0)
           (push.subr.gloc.of vector->list 1 "./boot/interaction.scm" . 336936)
           (apply.gloc.of map "./boot/interaction.scm" . 336926))
         (push)
         (ret.subr.gloc.of list->vector "./boot/interaction.scm" . 336912))
       (ret.iloc 0 . 0))
     (push.iloc.1 . 0)
     (apply.iloc (0 . 0) "./boot/interaction.scm" . 330761)))
 (set.gloc.of unrename-private-primitives)
 (ret.const.unspec))
((close
   (3 0 . display-warning)
   (subr.gloc.of make-string-output-port 0)
   (push)
   (extend . 1)
   (push.iloc.0 . 0)
   (push.const . "~a")
   (push.iloc.1 . 0)
   (subr.gloc.of format 3 "./boot/interaction.scm" . 343047)
   (push.const . #f)
   (push.const . #f)
   (push.const . #f)
   (push.const . #f)
   (subr.gloc.of backtrace-line-length 0)
   (push)
   (extend . 5)
   (push.close
     (0 0)
     (call (apply.gloc.of pretty-print-line-length "./boot/interaction.scm" . 348169))
     (set.iloc (1 . 0) "./boot/interaction.scm" . 348169)
     (call (apply.gloc.of pretty-print-maximum-lines "./boot/interaction.scm" . 348169))
     (set.iloc (1 . 1) "./boot/interaction.scm" . 348169)
     (call (apply.gloc.of pretty-print-unwrap-syntax "./boot/interaction.scm" . 348169))
     (set.iloc (1 . 2) "./boot/interaction.scm" . 348169)
     (call (apply.gloc.of pretty-print-initial-indent "./boot/interaction.scm" . 348169))
     (set.iloc (1 . 3) "./boot/interaction.scm" . 348169)
     (call
       (push.iloc.1 . 4)
       (apply.gloc.of pretty-print-line-length "./boot/interaction.scm" . 348169))
     (call
       (push.const . 10)
       (apply.gloc.of pretty-print-maximum-lines "./boot/interaction.scm" . 348169))
     (call
       (push.const . #t)
       (apply.gloc.of pretty-print-unwrap-syntax "./boot/interaction.scm" . 348169))
     (push.const . 5)
     (apply.gloc.of pretty-print-initial-indent "./boot/interaction.scm" . 348169))
   (push.close
     (0 0)
     (call
       (iloc 3 . 1)
       (if.true
         (push.iloc 2 . 0)
         (push.const . "~%  >  ")
         (subr.gloc.of format 2 "./boot/interaction.scm" . 349200)
         (call
           (call
             (touch.gloc.of unrename-private-primitives)
             (push.iloc 3 . 1)
             (apply.gloc.of unrename-private-primitives "./boot/interaction.scm" . 350238))
           (push)
           (push.iloc 2 . 0)
           (apply.gloc.of pretty-print "./boot/interaction.scm" . 350224))
         (iloc 3 . 1)
         (if.not.pair?.ret.const . #f)
         (push.iloc 2 . 0)
         (push.const . "~%  ~n")
         (push.iloc 3 . 1)
         (ret.subr.gloc.of format "./boot/interaction.scm" . 351266))
       (ret.const.unspec))
     (call
       (iloc 3 . 2)
       (if.true
         (push.iloc 2 . 0)
         (push.const . "~%  >  ")
         (subr.gloc.of format 2 "./boot/interaction.scm" . 353296)
         (call
           (call
             (touch.gloc.of unrename-private-primitives)
             (push.iloc 3 . 2)
             (apply.gloc.of unrename-private-primitives "./boot/interaction.scm" . 354334))
           (push)
           (push.iloc 2 . 0)
           (apply.gloc.of pretty-print "./boot/interaction.scm" . 354320))
         (iloc 3 . 2)
         (if.not.pair?.ret.const . #f)
         (push.iloc 2 . 0)
         (push.const . "~%  ~n")
         (push.iloc 3 . 2)
         (ret.subr.gloc.of format "./boot/interaction.scm" . 355365))
       (ret.const.unspec))
     (push.iloc 2 . 0)
     (push.const . "~%")
     (subr.gloc.of format 2 "./boot/interaction.scm" . 356361)
     (call
       (push.const . "EMACS")
       (subr.gloc.of lookup-process-environment 1 "./boot/interaction.scm" . 357404)
       (if.true.ret)
       (subr.gloc.of current-input-port 0)
       (push)
       (push.subr.gloc.of port-device-subtype 1 "./boot/interaction.scm" . 357451)
       (push.const . char)
       (push.subr.gloc.of eq? 2 "./boot/interaction.scm" . 357446)
       (ret.subr.gloc.of not "./boot/interaction.scm" . 357441))
     (if.true
       (subr.gloc.of current-error-port 0)
       (push)
       (push.const . "~a~!")
       (push.iloc 2 . 0)
       (push.subr.gloc.of extract-accumulated-string 1 "./boot/interaction.scm" . 359475)
       (ret.subr.gloc.of format "./boot/interaction.scm" . 359439))
     (subr.gloc.of current-error-port 0)
     (push)
     (push.const . "~%~a~!")
     (push.iloc 2 . 0)
     (push.subr.gloc.of extract-accumulated-string 1 "./boot/interaction.scm" . 360501)
     (ret.subr.gloc.of format "./boot/interaction.scm" . 360463))
   (push.close
     (0 0)
     (call
       (push.iloc.1 . 0)
       (apply.gloc.of pretty-print-line-length "./boot/interaction.scm" . 348169))
     (call
       (push.iloc.1 . 1)
       (apply.gloc.of pretty-print-maximum-lines "./boot/interaction.scm" . 348169))
     (call
       (push.iloc.1 . 2)
       (apply.gloc.of pretty-print-unwrap-syntax "./boot/interaction.scm" . 348169))
     (push.iloc.1 . 3)
     (apply.gloc.of pretty-print-initial-indent "./boot/interaction.scm" . 348169))
   (apply.gloc.of
     |.dynamic-wind|
     (|.dynamic-wind|
       (lambda ()
         (set! |tmp1`4654`4659*| (pretty-print-line-length))
         (set! |tmp1`4655`4659*| (pretty-print-maximum-lines))
         (set! |tmp1`4656`4659*| (pretty-print-unwrap-syntax))
         (set! |tmp1`4657`4659*| (pretty-print-initial-indent))
         (pretty-print-line-length |tmp2`4654`4659*|)
         (pretty-print-maximum-lines 10)
         (pretty-print-unwrap-syntax #t)
         (pretty-print-initial-indent 5))
       (lambda ()
         (if |form`4649*|
             (begin
               (format |port`4651*| "~%  >  ")
               (pretty-print (unrename-private-primitives |form`4649*|) |port`4651*|)
               (and (pair? |form`4649*|) (format |port`4651*| "~%  ~n" |form`4649*|)))
             (|.unspecified|))
         (if |subform`4649*|
             (begin
               (format |port`4651*| "~%  >  ")
               (pretty-print (unrename-private-primitives |subform`4649*|) |port`4651*|)
               (and (pair? |subform`4649*|) (format |port`4651*| "~%  ~n" |subform`4649*|)))
             (|.unspecified|))
         (format |port`4651*| "~%")
         (if (or (lookup-process-environment "EMACS")
                 (not (eq? (port-device-subtype (current-input-port)) 'char)))
             (format (current-error-port) "~a~!" (extract-accumulated-string |port`4651*|))
             (format (current-error-port) "~%~a~!" (extract-accumulated-string |port`4651*|))))
       (lambda ()
         (pretty-print-line-length |tmp1`4654`4659*|)
         (pretty-print-maximum-lines |tmp1`4655`4659*|)
         (pretty-print-unwrap-syntax |tmp1`4656`4659*|)
         (pretty-print-initial-indent |tmp1`4657`4659*|)))))
 (set.gloc.of display-warning)
 (ret.const.unspec))
((close
   (1 0)
   (call (push.iloc.0 . 0) (apply.gloc.of continuation-to-exit "./boot/interaction.scm" . 364587))
   (call
     (touch.gloc.of run-scheme-session)
     (apply.gloc.of run-scheme-session "./boot/interaction.scm" . 364615))
   (ret.const . 0))
 (set.gloc.of |.L1326|)
 (close
   (0 0 . start-scheme-session)
   (call (push.gloc.of |.L1326|) (apply.gloc.of call/cc "./boot/interaction.scm" . 364563))
   (push)
   (extend . 1)
   (push.iloc.0 . 0)
   (ret.subr.gloc.of exit "./boot/interaction.scm" . 365575))
 (set.gloc.of start-scheme-session)
 (ret.const.unspec))
((close
   (1 0)
   (call
     (touch.gloc.of |directory-exists?`4676*|)
     (call
       (touch.gloc.of expand-path)
       (push.iloc.0 . 0)
       (apply.gloc.of expand-path "./boot/interaction.scm" . 425010))
     (push)
     (apply.gloc.of |directory-exists?`4676*| "./boot/interaction.scm" . 424991))
   (if.true
     (call
       (touch.gloc.of expand-path)
       (push.iloc.0 . 0)
       (apply.gloc.of expand-path "./boot/interaction.scm" . 426030))
     (push)
     (apply.gloc.of add-load-path "./boot/interaction.scm" . 426015))
   (subr.gloc.of current-error-port 0)
   (push)
   (push.const . "** ERROR in environment variable 'DIGAMMA_LOADPATH': directory ~s not exist~%")
   (push.iloc.0 . 0)
   (ret.subr.gloc.of format "./boot/interaction.scm" . 428063))
 (set.gloc.of |.L1344|)
 (close
   (0 0 . init-env-sitelib)
   (push.const . "DIGAMMA_SITELIB")
   (push.subr.gloc.of lookup-process-environment 1 "./boot/interaction.scm" . 406544)
   (extend . 1)
   (iloc.0 . 0)
   (if.true
     (push.gloc.of |.L1345|)
     (call
       (push.const . operating-system)
       (push.subr.gloc.of architecture-feature 1 "./boot/interaction.scm" . 414772)
       (push.const . "windows")
       (subr.gloc.of string-contains 2 "./boot/interaction.scm" . 414755)
       (if.true
         (touch.gloc.of string-split)
         (push.iloc.0 . 0)
         (push.const . #\;)
         (apply.gloc.of string-split "./boot/interaction.scm" . 415779))
       (touch.gloc.of string-split)
       (push.iloc.0 . 0)
       (push.const . #\:)
       (apply.gloc.of string-split "./boot/interaction.scm" . 416803))
     (push)
     (push.subr.gloc.of reverse 1 "./boot/interaction.scm" . 414742)
     (apply.gloc.of for-each "./boot/interaction.scm" . 409622))
   (ret.const.unspec))
 (set.gloc.of |init-env-sitelib`4676*|)
 (close
   (1 0 . directory-exists?)
   (push.const . "~a/.")
   (push.iloc.0 . 0)
   (push.subr.gloc.of format 2 "./boot/interaction.scm" . 372759)
   (ret.subr.gloc.of file-exists? "./boot/interaction.scm" . 372745))
 (set.gloc.of |directory-exists?`4676*|)
 (close
   (1 0)
   (subr.gloc.of current-output-port 0)
   (push)
   (subr.gloc.of flush-output-port 1 "./boot/interaction.scm" . 532501)
   (call
     (push.iloc.0 . 0)
     (call (apply.gloc.of current-exception-printer "./boot/interaction.scm" . 533526))
     (apply))
   (call (push.iloc.0 . 0) (apply.gloc.of serious-condition? "./boot/interaction.scm" . 534554))
   (if.false.ret)
   (push.const . #f)
   (ret.subr.gloc.of exit "./boot/interaction.scm" . 534577))
 (set.gloc.of |.L1342|)
 (close
   (1 0 . add-opt-sitelib)
   (push.close
     (1 0)
     (call
       (touch.gloc.of |directory-exists?`4676*|)
       (call
         (touch.gloc.of expand-path)
         (push.iloc.0 . 0)
         (apply.gloc.of expand-path "./boot/interaction.scm" . 436271))
       (push)
       (apply.gloc.of |directory-exists?`4676*| "./boot/interaction.scm" . 436252))
     (if.true
       (call
         (touch.gloc.of expand-path)
         (push.iloc.0 . 0)
         (apply.gloc.of expand-path "./boot/interaction.scm" . 437294))
       (push)
       (apply.gloc.of add-library-path "./boot/interaction.scm" . 437276))
     (subr.gloc.of current-error-port 0)
     (push)
     (push.const . "** ERROR in option '--sitelib=~a': directory ~s not exist~%")
     (push.iloc.1 . 0)
     (push.iloc.0 . 0)
     (subr.gloc.of format 4 "./boot/interaction.scm" . 439324)
     (push.const . #f)
     (ret.subr.gloc.of exit "./boot/interaction.scm" . 440348))
   (call
     (push.const . operating-system)
     (push.subr.gloc.of architecture-feature 1 "./boot/interaction.scm" . 441393)
     (push.const . "windows")
     (subr.gloc.of string-contains 2 "./boot/interaction.scm" . 441376)
     (if.true
       (touch.gloc.of string-split)
       (push.iloc.0 . 0)
       (push.const . #\;)
       (apply.gloc.of string-split "./boot/interaction.scm" . 442400))
     (touch.gloc.of string-split)
     (push.iloc.0 . 0)
     (push.const . #\:)
     (apply.gloc.of string-split "./boot/interaction.scm" . 443424))
   (push)
   (push.subr.gloc.of reverse 1 "./boot/interaction.scm" . 441363)
   (apply.gloc.of
     for-each
     (for-each (lambda (|path`4717*|)
                 (if (|directory-exists?`4676*| (expand-path |path`4717*|))
                     (add-library-path (expand-path |path`4717*|))
                     (begin
                       (format
                         (current-error-port)
                         "** ERROR in option '--sitelib=~a': directory ~s not exist~%"
                         |paths`4715*|
                         |path`4717*|)
                       (exit #f))))
               (reverse
                 (if (string-contains (architecture-feature 'operating-system) "windows")
                     (string-split |paths`4715*| #\;)
                     (string-split |paths`4715*| #\:))))))
 (set.gloc.of |add-opt-sitelib`4676*|)
 (close
   (1 0 . add-opt-loadpath)
   (push.close
     (1 0)
     (call
       (touch.gloc.of |directory-exists?`4676*|)
       (call
         (touch.gloc.of expand-path)
         (push.iloc.0 . 0)
         (apply.gloc.of expand-path "./boot/interaction.scm" . 448559))
       (push)
       (apply.gloc.of |directory-exists?`4676*| "./boot/interaction.scm" . 448540))
     (if.true
       (call
         (touch.gloc.of expand-path)
         (push.iloc.0 . 0)
         (apply.gloc.of expand-path "./boot/interaction.scm" . 449579))
       (push)
       (apply.gloc.of add-load-path "./boot/interaction.scm" . 449564))
     (subr.gloc.of current-error-port 0)
     (push)
     (push.const . "** ERROR in option '--loadpath=~a': directory ~s not exist~%")
     (push.iloc.1 . 0)
     (push.iloc.0 . 0)
     (subr.gloc.of format 4 "./boot/interaction.scm" . 451612)
     (push.const . #f)
     (ret.subr.gloc.of exit "./boot/interaction.scm" . 452636))
   (call
     (push.const . operating-system)
     (push.subr.gloc.of architecture-feature 1 "./boot/interaction.scm" . 453681)
     (push.const . "windows")
     (subr.gloc.of string-contains 2 "./boot/interaction.scm" . 453664)
     (if.true
       (touch.gloc.of string-split)
       (push.iloc.0 . 0)
       (push.const . #\;)
       (apply.gloc.of string-split "./boot/interaction.scm" . 454688))
     (touch.gloc.of string-split)
     (push.iloc.0 . 0)
     (push.const . #\:)
     (apply.gloc.of string-split "./boot/interaction.scm" . 455712))
   (push)
   (push.subr.gloc.of reverse 1 "./boot/interaction.scm" . 453651)
   (apply.gloc.of
     for-each
     (for-each (lambda (|path`4721*|)
                 (if (|directory-exists?`4676*| (expand-path |path`4721*|))
                     (add-load-path (expand-path |path`4721*|))
                     (begin
                       (format
                         (current-error-port)
                         "** ERROR in option '--loadpath=~a': directory ~s not exist~%"
                         |paths`4719*|
                         |path`4721*|)
                       (exit #f))))
               (reverse
                 (if (string-contains (architecture-feature 'operating-system) "windows")
                     (string-split |paths`4719*| #\;)
                     (string-split |paths`4719*| #\:))))))
 (set.gloc.of |add-opt-loadpath`4676*|)
 (close
   (0 0 . init-sys-sitelib)
   (push.const . "~a/sitelib")
   (subr.gloc.of system-share-path 0)
   (push)
   (push.subr.gloc.of format 2 "./boot/interaction.scm" . 376853)
   (extend . 1)
   (call
     (touch.gloc.of |directory-exists?`4676*|)
     (push.iloc.0 . 0)
     (apply.gloc.of |directory-exists?`4676*| "./boot/interaction.scm" . 377872))
   (if.false.ret)
   (push.iloc.0 . 0)
   (apply.gloc.of add-library-path "./boot/interaction.scm" . 377897))
 (set.gloc.of |init-sys-sitelib`4676*|)
 (close
   (0 0 . init-env-acc)
   (push.const . "DIGAMMA_ACC")
   (push.subr.gloc.of lookup-process-environment 1 "./boot/interaction.scm" . 396304)
   (extend . 1)
   (iloc.0 . 0)
   (if.true
     (call
       (touch.gloc.of |directory-exists?`4676*|)
       (call
         (touch.gloc.of expand-path)
         (push.iloc.0 . 0)
         (apply.gloc.of expand-path "./boot/interaction.scm" . 398383))
       (push)
       (apply.gloc.of |directory-exists?`4676*| "./boot/interaction.scm" . 398364))
     (if.true
       (call
         (touch.gloc.of expand-path)
         (push.iloc.0 . 0)
         (apply.gloc.of expand-path "./boot/interaction.scm" . 399408))
       (push)
       (apply.gloc.of auto-compile-cache "./boot/interaction.scm" . 399388))
     (subr.gloc.of current-error-port 0)
     (push)
     (push.const . "** ERROR in environment variable 'DIGAMMA_ACC': directory ~s not exist~%")
     (push.iloc.0 . 0)
     (subr.gloc.of format 3 "./boot/interaction.scm" . 401436)
     (push.const . #f)
     (apply.gloc.of auto-compile-cache "./boot/interaction.scm" . 402460))
   (ret.const.unspec))
 (set.gloc.of |init-env-acc`4676*|)
 (close
   (0 0 . init-env-loadpath)
   (push.const . "DIGAMMA_LOADPATH")
   (push.subr.gloc.of lookup-process-environment 1 "./boot/interaction.scm" . 420880)
   (extend . 1)
   (iloc.0 . 0)
   (if.true
     (push.gloc.of |.L1344|)
     (call
       (push.const . operating-system)
       (push.subr.gloc.of architecture-feature 1 "./boot/interaction.scm" . 429108)
       (push.const . "windows")
       (subr.gloc.of string-contains 2 "./boot/interaction.scm" . 429091)
       (if.true
         (touch.gloc.of string-split)
         (push.iloc.0 . 0)
         (push.const . #\;)
         (apply.gloc.of string-split "./boot/interaction.scm" . 430115))
       (touch.gloc.of string-split)
       (push.iloc.0 . 0)
       (push.const . #\:)
       (apply.gloc.of string-split "./boot/interaction.scm" . 431139))
     (push)
     (push.subr.gloc.of reverse 1 "./boot/interaction.scm" . 429078)
     (apply.gloc.of for-each "./boot/interaction.scm" . 423958))
   (ret.const.unspec))
 (set.gloc.of |init-env-loadpath`4676*|)
 (close
   (1 0 . set-opt-acc)
   (call
     (touch.gloc.of |directory-exists?`4676*|)
     (call
       (touch.gloc.of expand-path)
       (push.iloc.0 . 0)
       (apply.gloc.of expand-path "./boot/interaction.scm" . 459811))
     (push)
     (apply.gloc.of |directory-exists?`4676*| "./boot/interaction.scm" . 459792))
   (if.true
     (call
       (touch.gloc.of expand-path)
       (push.iloc.0 . 0)
       (apply.gloc.of expand-path "./boot/interaction.scm" . 460836))
     (push)
     (apply.gloc.of auto-compile-cache "./boot/interaction.scm" . 460816))
   (subr.gloc.of current-error-port 0)
   (push)
   (push.const . "** ERROR in option '--acc=~a': directory ~s not exist~%")
   (push.iloc.0 . 0)
   (push.iloc.0 . 0)
   (subr.gloc.of format 4 "./boot/interaction.scm" . 462864)
   (push.const . #f)
   (ret.subr.gloc.of exit "./boot/interaction.scm" . 463888))
 (set.gloc.of |set-opt-acc`4676*|)
 (close
   (0 0 . show-banner)
   (push.const . #t)
   (push.const . "digamma r~a~%")
   (push.const . program-revision)
   (push.subr.gloc.of architecture-feature 1 "./boot/interaction.scm" . 497699)
   (ret.subr.gloc.of format "./boot/interaction.scm" . 497672))
 (set.gloc.of |show-banner`4676*|)
 (close
   (1 0)
   (call
     (touch.gloc.of |directory-exists?`4676*|)
     (call
       (touch.gloc.of expand-path)
       (push.iloc.0 . 0)
       (apply.gloc.of expand-path "./boot/interaction.scm" . 410674))
     (push)
     (apply.gloc.of |directory-exists?`4676*| "./boot/interaction.scm" . 410655))
   (if.true
     (call
       (touch.gloc.of expand-path)
       (push.iloc.0 . 0)
       (apply.gloc.of expand-path "./boot/interaction.scm" . 411697))
     (push)
     (apply.gloc.of add-library-path "./boot/interaction.scm" . 411679))
   (subr.gloc.of current-error-port 0)
   (push)
   (push.const . "** ERROR in environment variable 'DIGAMMA_SITELIB': directory ~s not exist~%")
   (push.iloc.0 . 0)
   (ret.subr.gloc.of format "./boot/interaction.scm" . 413727))
 (set.gloc.of |.L1345|)
 (close
   (0 0 . show-usage)
   (push.const . #t)
   (push.const . "usage: digamma [options] [--] [file] [arguments]~%")
   (subr.gloc.of format 2 "./boot/interaction.scm" . 474121)
   (push.const . #t)
   (push.const . "options:~%")
   (subr.gloc.of format 2 "./boot/interaction.scm" . 475145)
   (push.const . #t)
   (push.const . "  --r7rs (-7)            conforms r7rs syntax and semantics~%")
   (subr.gloc.of format 2 "./boot/interaction.scm" . 476169)
   (push.const . #t)
   (push.const . "  --r6rs (-6)            conforms r6rs syntax and semantics~%")
   (subr.gloc.of format 2 "./boot/interaction.scm" . 477193)
   (push.const . #t)
   (push.const . "  --r6rs-program         conforms r6rs top-level program~%")
   (subr.gloc.of format 2 "./boot/interaction.scm" . 478217)
   (push.const . #t)
   (push.const . "  --mute (-m)            suppresses greeting~%")
   (subr.gloc.of format 2 "./boot/interaction.scm" . 479241)
   (push.const . #t)
   (push.const . "  --quiet (-q)           suppresses greeting, repl prompt, and repl output~%")
   (subr.gloc.of format 2 "./boot/interaction.scm" . 480265)
   (push.const . #t)
   (push.const . "  --verbose (-v)         prints load and compile activities~%")
   (subr.gloc.of format 2 "./boot/interaction.scm" . 481289)
   (push.const . #t)
   (push.const . "  --warning (-w)         prints warnings~%")
   (subr.gloc.of format 2 "./boot/interaction.scm" . 482313)
   (push.const . #t)
   (push.const . "  --interactive (-i)     enters repl after running the script file~%")
   (subr.gloc.of format 2 "./boot/interaction.scm" . 483337)
   (push.const . #t)
   (push.const . "  --sitelib=path         adds sitelib path (DIGAMMA_SITELIB)~%")
   (subr.gloc.of format 2 "./boot/interaction.scm" . 484361)
   (push.const . #t)
   (push.const . "  --loadpath=path        adds load search path (DIGAMMA_LOADPATH)~%")
   (subr.gloc.of format 2 "./boot/interaction.scm" . 485385)
   (push.const . #t)
   (push.const . "  --acc=dir              sets a auto-compile-cache directory (DIGAMMA_ACC)~%")
   (subr.gloc.of format 2 "./boot/interaction.scm" . 486409)
   (push.const . #t)
   (push.const . "  --heap-limit=mbytes    sets a total heap limit in MBytes~%")
   (subr.gloc.of format 2 "./boot/interaction.scm" . 487433)
   (push.const . #t)
   (push.const . "  --dump-condition       default exception handler dumps condition~%")
   (subr.gloc.of format 2 "./boot/interaction.scm" . 488457)
   (push.const . #t)
   (push.const . "  --disable-acc          disables auto-compile-cache~%")
   (subr.gloc.of format 2 "./boot/interaction.scm" . 489481)
   (push.const . #t)
   (push.const . "  --clean-acc            cleans auto-compile-cache~%")
   (subr.gloc.of format 2 "./boot/interaction.scm" . 490505)
   (push.const . #t)
   (push.const . "  --version              prints version and exit~%")
   (subr.gloc.of format 2 "./boot/interaction.scm" . 491529)
   (push.const . #t)
   (push.const . "  --help                 prints help and exit~%")
   (subr.gloc.of format 2 "./boot/interaction.scm" . 492553)
   (push.const . #t)
   (push.const . "  --                     indicates no more option to proceed~%")
   (ret.subr.gloc.of format "./boot/interaction.scm" . 493577))
 (set.gloc.of |show-usage`4676*|)
 (close
   (0 0 . show-info)
   (call
     (touch.gloc.of |show-banner`4676*|)
     (apply.gloc.of |show-banner`4676*| "./boot/interaction.scm" . 501769))
   (call
     (push.const . "DIGAMMA_ACC")
     (push.subr.gloc.of lookup-process-environment 1 "./boot/interaction.scm" . 502800)
     (extend . 1)
     (iloc.0 . 0)
     (if.true
       (push.const . #t)
       (push.const . ";; DIGAMMA_ACC=~a~%")
       (push.iloc.0 . 0)
       (ret.subr.gloc.of format "./boot/interaction.scm" . 503842))
     (push.const . #t)
     (push.const . ";; DIGAMMA_ACC unspecified~%")
     (ret.subr.gloc.of format "./boot/interaction.scm" . 504853))
   (call
     (push.const . "DIGAMMA_SITELIB")
     (push.subr.gloc.of lookup-process-environment 1 "./boot/interaction.scm" . 505872)
     (extend . 1)
     (iloc.0 . 0)
     (if.true
       (push.const . #t)
       (push.const . ";; DIGAMMA_SITELIB=~a~%")
       (push.iloc.0 . 0)
       (ret.subr.gloc.of format "./boot/interaction.scm" . 506914))
     (push.const . #t)
     (push.const . ";; DIGAMMA_SITELIB unspecified~%")
     (ret.subr.gloc.of format "./boot/interaction.scm" . 507925))
   (call
     (push.const . "DIGAMMA_LOADPATH")
     (push.subr.gloc.of lookup-process-environment 1 "./boot/interaction.scm" . 508944)
     (extend . 1)
     (iloc.0 . 0)
     (if.true
       (push.const . #t)
       (push.const . ";; DIGAMMA_LOADPATH=~a~%")
       (push.iloc.0 . 0)
       (ret.subr.gloc.of format "./boot/interaction.scm" . 509986))
     (push.const . #t)
     (push.const . ";; DIGAMMA_LOADPATH unspecified~%")
     (ret.subr.gloc.of format "./boot/interaction.scm" . 510997))
   (push.const . #t)
   (push.const . ";; (auto-compile-cache) => ~s~%")
   (call (apply.gloc.of auto-compile-cache "./boot/interaction.scm" . 512054))
   (push)
   (subr.gloc.of format 3 "./boot/interaction.scm" . 512009)
   (push.const . #t)
   (push.const . ";; (scheme-library-paths) => ~s~%")
   (call (apply.gloc.of scheme-library-paths "./boot/interaction.scm" . 513080))
   (push)
   (subr.gloc.of format 3 "./boot/interaction.scm" . 513033)
   (push.const . #t)
   (push.const . ";; (scheme-load-paths) => ~s~%")
   (call (apply.gloc.of scheme-load-paths "./boot/interaction.scm" . 514101))
   (push)
   (ret.subr.gloc.of format "./boot/interaction.scm" . 514057))
 (set.gloc.of |show-info`4676*|)
 (close
   (0 0 . init-sys-acc)
   (push.const . operating-system)
   (push.subr.gloc.of architecture-feature 1 "./boot/interaction.scm" . 381985)
   (push.const . "windows")
   (subr.gloc.of string-contains 2 "./boot/interaction.scm" . 381968)
   (if.true
     (push.const . "TEMP")
     (push.subr.gloc.of lookup-process-environment 1 "./boot/interaction.scm" . 382999)
     (extend . 1)
     (iloc.0 . 0)
     (if.true
       (call
         (touch.gloc.of |directory-exists?`4676*|)
         (push.iloc.0 . 0)
         (apply.gloc.of |directory-exists?`4676*| "./boot/interaction.scm" . 385059))
       (if.true
         (call
           (call
             (touch.gloc.of |directory-exists?`4676*|)
             (push.const . "~//Digamma")
             (push.iloc.0 . 0)
             (push.subr.gloc.of format 2 "./boot/interaction.scm" . 386106)
             (apply.gloc.of |directory-exists?`4676*| "./boot/interaction.scm" . 386087))
           (if.true.ret)
           (push.const . "~//Digamma")
           (push.iloc.0 . 0)
           (push.subr.gloc.of format 2 "./boot/interaction.scm" . 387129)
           (ret.subr.gloc.of create-directory "./boot/interaction.scm" . 387111))
         (push.const . "~//Digamma")
         (push.iloc.0 . 0)
         (push.subr.gloc.of format 2 "./boot/interaction.scm" . 388151)
         (apply.gloc.of auto-compile-cache "./boot/interaction.scm" . 388131))
       (ret.const.unspec))
     (ret.const.unspec))
   (call (apply.gloc.of home-directory "./boot/interaction.scm" . 389136))
   (push)
   (extend . 1)
   (iloc.0 . 0)
   (if.true
     (call
       (touch.gloc.of |directory-exists?`4676*|)
       (push.const . "~//.digamma")
       (push.iloc.0 . 0)
       (push.subr.gloc.of format 2 "./boot/interaction.scm" . 391213)
       (apply.gloc.of |directory-exists?`4676*| "./boot/interaction.scm" . 391194))
     (if.false.ret)
     (push.const . "~//.digamma")
     (push.iloc.0 . 0)
     (push.subr.gloc.of format 2 "./boot/interaction.scm" . 392238)
     (apply.gloc.of auto-compile-cache "./boot/interaction.scm" . 392218))
   (ret.const.unspec))
 (set.gloc.of |init-sys-acc`4676*|)
 (close
   (1 0 . bad-option)
   (subr.gloc.of current-error-port 0)
   (push)
   (push.const . "** ERROR in option '~a'~%")
   (push.iloc.0 . 0)
   (subr.gloc.of format 3 "./boot/interaction.scm" . 467977)
   (call
     (touch.gloc.of |show-usage`4676*|)
     (apply.gloc.of |show-usage`4676*| "./boot/interaction.scm" . 469001))
   (push.const . #f)
   (ret.subr.gloc.of exit "./boot/interaction.scm" . 470025))
 (set.gloc.of |bad-option`4676*|)
 (close
   (0 0 . run-scheme-session)
   (extend.unbound . 9)
   (push.close
     (1 0 . exec-script)
     (subr.gloc.of command-line 0)
     (push)
     (push.subr.gloc.of length 1 "./boot/interaction.scm" . 518176)
     (push.iloc.0 . 0)
     (push.subr.gloc.of length 1 "./boot/interaction.scm" . 518200)
     (push.subr.gloc.of - 2 "./boot/interaction.scm" . 518173)
     (subr.gloc.of command-line-shift 1 "./boot/interaction.scm" . 518153)
     (push.car.iloc (0 . 0) "./boot/interaction.scm" . 519189)
     (extend . 1)
     (iloc 2 . 4)
     (if.true
       (push.close
         (1 0)
         (subr.gloc.of current-output-port 0)
         (push)
         (subr.gloc.of flush-output-port 1 "./boot/interaction.scm" . 523285)
         (call
           (push.iloc.0 . 0)
           (call (apply.gloc.of current-exception-printer "./boot/interaction.scm" . 524310))
           (apply))
         (call
           (push.iloc.0 . 0)
           (apply.gloc.of serious-condition? "./boot/interaction.scm" . 525338))
         (if.false.ret)
         (apply.iloc (3 . 1) "./boot/interaction.scm" . 525361))
       (push.close
         (0 0)
         (call
           (touch.gloc.of auto-compile-cache-update)
           (apply.gloc.of auto-compile-cache-update "./boot/interaction.scm" . 527381))
         (push.iloc.1 . 0)
         (apply.gloc.of load "./boot/interaction.scm" . 528405))
       (apply.gloc.of with-exception-handler "./boot/interaction.scm" . 521234))
     (push.gloc.of |.L1342|)
     (push.close
       (0 0)
       (call
         (touch.gloc.of auto-compile-cache-update)
         (apply.gloc.of auto-compile-cache-update "./boot/interaction.scm" . 536597))
       (call
         (call
           (iloc 3 . 7)
           (if.true.ret)
           (touch.gloc.of load-file-has-r6rs-comment?)
           (push.iloc.1 . 0)
           (apply.gloc.of load-file-has-r6rs-comment? "./boot/interaction.scm" . 537645))
         (if.true
           (touch.gloc.of load-r6rs)
           (push.iloc.1 . 0)
           (apply.gloc.of load-r6rs "./boot/interaction.scm" . 538652))
         (call
           (touch.gloc.of interpret)
           (push.const import (core) (rnrs))
           (apply.gloc.of interpret "./boot/interaction.scm" . 540700))
         (push.iloc.1 . 0)
         (apply.gloc.of load "./boot/interaction.scm" . 541724))
       (subr.gloc.of current-error-port 0)
       (push)
       (subr.gloc.of flush-output-port 1 "./boot/interaction.scm" . 542741)
       (subr.gloc.of current-output-port 0)
       (push)
       (subr.gloc.of flush-output-port 1 "./boot/interaction.scm" . 543765)
       (ret.subr.gloc.of exit "./boot/interaction.scm" . 544789))
     (apply.gloc.of with-exception-handler "./boot/interaction.scm" . 531475))
   (push.close
     (0 0 . exec-repl)
     (call
       (iloc.1 . 6)
       (if.true.ret)
       (iloc.1 . 2)
       (if.true
         (touch.gloc.of |show-info`4676*|)
         (apply.gloc.of |show-info`4676*| "./boot/interaction.scm" . 549912))
       (touch.gloc.of |show-banner`4676*|)
       (apply.gloc.of |show-banner`4676*| "./boot/interaction.scm" . 550933))
     (call
       (iloc.1 . 5)
       (if.true.ret)
       (touch.gloc.of interpret)
       (push.const import (core) (rnrs))
       (apply.gloc.of interpret "./boot/interaction.scm" . 551956))
     (iloc.1 . 3)
     (if.true
       (touch.gloc.of quiet-read-eval-print-loop)
       (apply.gloc.of quiet-read-eval-print-loop "./boot/interaction.scm" . 553997))
     (touch.gloc.of read-eval-print-loop)
     (apply.gloc.of read-eval-print-loop "./boot/interaction.scm" . 555021))
   (push.const . #f)
   (push.const . #f)
   (push.const . #f)
   (push.const . #f)
   (push.const . #f)
   (push.const . #f)
   (enclose . 8)
   (subr.gloc.of command-line 0 "./boot/interaction.scm" . 564258)
   (set.iloc (0 . 8))
   (call
     (touch.gloc.of |init-sys-acc`4676*|)
     (apply.gloc.of |init-sys-acc`4676*| "./boot/interaction.scm" . 566277))
   (call
     (touch.gloc.of |init-env-acc`4676*|)
     (apply.gloc.of |init-env-acc`4676*| "./boot/interaction.scm" . 567301))
   (call
     (touch.gloc.of |init-sys-sitelib`4676*|)
     (apply.gloc.of |init-sys-sitelib`4676*| "./boot/interaction.scm" . 568325))
   (call
     (touch.gloc.of |init-env-sitelib`4676*|)
     (apply.gloc.of |init-env-sitelib`4676*| "./boot/interaction.scm" . 569349))
   (call
     (touch.gloc.of |init-env-loadpath`4676*|)
     (apply.gloc.of |init-env-loadpath`4676*| "./boot/interaction.scm" . 570373))
   (iloc.0 . 8)
   (if.not.pair?.ret.const . #f)
   (extend.enclose+
     (1 0 . loop)
     (iloc.0 . 0)
     (if.null?
       (iloc 2 . 4)
       (if.true (apply.iloc (2 . 1) "./boot/interaction.scm" . 577561))
       (iloc 2 . 5)
       (if.true.ret)
       (apply.iloc (2 . 1) "./boot/interaction.scm" . 578596))
     (push.car.iloc (0 . 0) "./boot/interaction.scm" . 580640)
     (extend . 1)
     (extend.enclose
       (2 0 . opt?)
       (push.iloc 2 . 0)
       (push.iloc.0 . 0)
       (push.subr.gloc.of string-contains 2 "./boot/interaction.scm" . 584740)
       (extend . 1)
       (iloc.0 . 0)
       (if.false.ret)
       (=n.iloc (0 . 0) 0 "./boot/interaction.scm" . 586793)
       (if.false.ret)
       (push.iloc 3 . 0)
       (push.iloc.1 . 0)
       (subr.gloc.of string=? 2 "./boot/interaction.scm" . 587812)
       (if.true.ret.const . "")
       (iloc.1 . 1)
       (if.false.ret)
       (push.iloc 3 . 0)
       (push.iloc.1 . 0)
       (push.subr.gloc.of string-length 1 "./boot/interaction.scm" . 588870)
       (push.subr.gloc.of string-ref 2 "./boot/interaction.scm" . 588854)
       (push.const . #\=)
       (subr.gloc.of char=? 2 "./boot/interaction.scm" . 588846)
       (if.false.ret)
       (push.iloc 3 . 0)
       (push.iloc.1 . 0)
       (push.subr.gloc.of string-length 1 "./boot/interaction.scm" . 589878)
       (push.const . 1)
       (push.subr.gloc.of + 2 "./boot/interaction.scm" . 589875)
       (push.iloc 3 . 0)
       (push.subr.gloc.of string-length 1 "./boot/interaction.scm" . 589902)
       (ret.subr.gloc.of substring "./boot/interaction.scm" . 589860))
     (call
       (push.const . "--heap-limit")
       (push.const . #f)
       (apply.iloc (0 . 0) "./boot/interaction.scm" . 592926))
     (if.true
       (push.cddr.iloc (2 . 0) "./boot/interaction.scm" . 592957)
       (apply.iloc+ (3 . 0) "./boot/interaction.scm" . 592951))
     (call
       (push.const . "--heap-limit")
       (push.const . #t)
       (apply.iloc (0 . 0) "./boot/interaction.scm" . 593950))
     (if.true
       (push.cdr.iloc (2 . 0) "./boot/interaction.scm" . 593981)
       (apply.iloc+ (3 . 0) "./boot/interaction.scm" . 593975))
     (call
       (push.const . "--no-letrec-check")
       (push.const . #f)
       (apply.iloc (0 . 0) "./boot/interaction.scm" . 594974))
     (if.true
       (subr.gloc.of current-error-port 0)
       (push)
       (push.const . "** WARNING: '--no-letrec-check' option is deprecated~%")
       (subr.gloc.of format 2 "./boot/interaction.scm" . 595998)
       (push.cdr.iloc (2 . 0) "./boot/interaction.scm" . 597028)
       (apply.iloc+ (3 . 0) "./boot/interaction.scm" . 597022))
     (call
       (call
         (push.const . "--warning")
         (push.const . #f)
         (apply.iloc (0 . 0) "./boot/interaction.scm" . 598050))
       (if.true.ret)
       (push.const . "-w")
       (push.const . #f)
       (apply.iloc (0 . 0) "./boot/interaction.scm" . 598072))
     (if.true
       (push.const . #t)
       (subr.gloc.of warning-level 1 "./boot/interaction.scm" . 599070)
       (push.cdr.iloc (2 . 0) "./boot/interaction.scm" . 600100)
       (apply.iloc+ (3 . 0) "./boot/interaction.scm" . 600094))
     (call
       (push.const . "--version")
       (push.const . #f)
       (apply.iloc (0 . 0) "./boot/interaction.scm" . 601118))
     (if.true
       (call
         (touch.gloc.of |show-banner`4676*|)
         (apply.gloc.of |show-banner`4676*| "./boot/interaction.scm" . 602142))
       (ret.subr.gloc.of exit "./boot/interaction.scm" . 603166))
     (call
       (push.const . "--help")
       (push.const . #f)
       (apply.iloc (0 . 0) "./boot/interaction.scm" . 604190))
     (if.true
       (call
         (touch.gloc.of |show-usage`4676*|)
         (apply.gloc.of |show-usage`4676*| "./boot/interaction.scm" . 605214))
       (ret.subr.gloc.of exit "./boot/interaction.scm" . 606238))
     (call
       (call
         (push.const . "--r7rs")
         (push.const . #f)
         (apply.iloc (0 . 0) "./boot/interaction.scm" . 607266))
       (if.true.ret)
       (push.const . "-7")
       (push.const . #f)
       (apply.iloc (0 . 0) "./boot/interaction.scm" . 607285))
     (if.true
       (call
         (touch.gloc.of right-arrow-in-case)
         (push.const . #t)
         (apply.gloc.of right-arrow-in-case "./boot/interaction.scm" . 608286))
       (call
         (touch.gloc.of ellipsis/underscore-in-literal)
         (push.const . #t)
         (apply.gloc.of ellipsis/underscore-in-literal "./boot/interaction.scm" . 609310))
       (call
         (touch.gloc.of self-evaluating-vector-constants)
         (push.const . #t)
         (apply.gloc.of self-evaluating-vector-constants "./boot/interaction.scm" . 610334))
       (call
         (touch.gloc.of lexical-syntax-version)
         (push.const . 7)
         (apply.gloc.of lexical-syntax-version "./boot/interaction.scm" . 611358))
       (call
         (touch.gloc.of mutable-literals)
         (push.const . #f)
         (apply.gloc.of mutable-literals "./boot/interaction.scm" . 612382))
       (push.cdr.iloc (2 . 0) "./boot/interaction.scm" . 613412)
       (apply.iloc+ (3 . 0) "./boot/interaction.scm" . 613406))
     (call
       (call
         (push.const . "--r6rs")
         (push.const . #f)
         (apply.iloc (0 . 0) "./boot/interaction.scm" . 614434))
       (if.true.ret)
       (push.const . "-6")
       (push.const . #f)
       (apply.iloc (0 . 0) "./boot/interaction.scm" . 614453))
     (if.true
       (call
         (touch.gloc.of right-arrow-in-case)
         (push.const . #f)
         (apply.gloc.of right-arrow-in-case "./boot/interaction.scm" . 615454))
       (call
         (touch.gloc.of self-evaluating-vector-constants)
         (push.const . #f)
         (apply.gloc.of self-evaluating-vector-constants "./boot/interaction.scm" . 616478))
       (call
         (touch.gloc.of ellipsis/underscore-in-literal)
         (push.const . #f)
         (apply.gloc.of ellipsis/underscore-in-literal "./boot/interaction.scm" . 617502))
       (call
         (touch.gloc.of lexical-syntax-version)
         (push.const . 6)
         (apply.gloc.of lexical-syntax-version "./boot/interaction.scm" . 618526))
       (call
         (touch.gloc.of mutable-literals)
         (push.const . #f)
         (apply.gloc.of mutable-literals "./boot/interaction.scm" . 619550))
       (push.cdr.iloc (2 . 0) "./boot/interaction.scm" . 620580)
       (apply.iloc+ (3 . 0) "./boot/interaction.scm" . 620574))
     (call
       (push.const . "--r6rs-program")
       (push.const . #f)
       (apply.iloc (0 . 0) "./boot/interaction.scm" . 621598))
     (if.true
       (call
         (touch.gloc.of right-arrow-in-case)
         (push.const . #f)
         (apply.gloc.of right-arrow-in-case "./boot/interaction.scm" . 622622))
       (call
         (touch.gloc.of self-evaluating-vector-constants)
         (push.const . #f)
         (apply.gloc.of self-evaluating-vector-constants "./boot/interaction.scm" . 623646))
       (call
         (touch.gloc.of ellipsis/underscore-in-literal)
         (push.const . #f)
         (apply.gloc.of ellipsis/underscore-in-literal "./boot/interaction.scm" . 624670))
       (call
         (touch.gloc.of lexical-syntax-version)
         (push.const . 6)
         (apply.gloc.of lexical-syntax-version "./boot/interaction.scm" . 625694))
       (call
         (touch.gloc.of mutable-literals)
         (push.const . #f)
         (apply.gloc.of mutable-literals "./boot/interaction.scm" . 626718))
       (const . #t)
       (set.iloc (4 . 7) "./boot/interaction.scm" . 627742)
       (push.cdr.iloc (2 . 0) "./boot/interaction.scm" . 628772)
       (apply.iloc+ (3 . 0) "./boot/interaction.scm" . 628766))
     (call
       (call
         (push.const . "--verbose")
         (push.const . #f)
         (apply.iloc (0 . 0) "./boot/interaction.scm" . 629794))
       (if.true.ret)
       (push.const . "-v")
       (push.const . #f)
       (apply.iloc (0 . 0) "./boot/interaction.scm" . 629816))
     (if.true
       (call
         (push.const . #t)
         (apply.gloc.of scheme-load-verbose "./boot/interaction.scm" . 630814))
       (call
         (push.const . #t)
         (apply.gloc.of auto-compile-verbose "./boot/interaction.scm" . 631838))
       (const . #t)
       (set.iloc (4 . 2) "./boot/interaction.scm" . 632862)
       (const . #f)
       (set.iloc (4 . 6) "./boot/interaction.scm" . 633886)
       (push.cdr.iloc (2 . 0) "./boot/interaction.scm" . 634916)
       (apply.iloc+ (3 . 0) "./boot/interaction.scm" . 634910))
     (call
       (call
         (push.const . "--mute")
         (push.const . #f)
         (apply.iloc (0 . 0) "./boot/interaction.scm" . 635938))
       (if.true.ret)
       (push.const . "-m")
       (push.const . #f)
       (apply.iloc (0 . 0) "./boot/interaction.scm" . 635957))
     (if.true
       (const . #f)
       (set.iloc (4 . 2) "./boot/interaction.scm" . 636958)
       (const . #t)
       (set.iloc (4 . 6) "./boot/interaction.scm" . 637982)
       (push.cdr.iloc (2 . 0) "./boot/interaction.scm" . 639012)
       (apply.iloc+ (3 . 0) "./boot/interaction.scm" . 639006))
     (call
       (call
         (push.const . "--quiet")
         (push.const . #f)
         (apply.iloc (0 . 0) "./boot/interaction.scm" . 640034))
       (if.true.ret)
       (push.const . "-q")
       (push.const . #f)
       (apply.iloc (0 . 0) "./boot/interaction.scm" . 640054))
     (if.true
       (const . #f)
       (set.iloc (4 . 2) "./boot/interaction.scm" . 641054)
       (const . #t)
       (set.iloc (4 . 6) "./boot/interaction.scm" . 642078)
       (const . #t)
       (set.iloc (4 . 3) "./boot/interaction.scm" . 643102)
       (push.cdr.iloc (2 . 0) "./boot/interaction.scm" . 644132)
       (apply.iloc+ (3 . 0) "./boot/interaction.scm" . 644126))
     (call
       (call
         (push.const . "--interactive")
         (push.const . #f)
         (apply.iloc (0 . 0) "./boot/interaction.scm" . 645154))
       (if.true.ret)
       (push.const . "-i")
       (push.const . #f)
       (apply.iloc (0 . 0) "./boot/interaction.scm" . 645180))
     (if.true
       (const . #t)
       (set.iloc (4 . 4) "./boot/interaction.scm" . 646174)
       (push.cdr.iloc (2 . 0) "./boot/interaction.scm" . 647204)
       (apply.iloc+ (3 . 0) "./boot/interaction.scm" . 647198))
     (call
       (push.const . "--dump-condition")
       (push.const . #f)
       (apply.iloc (0 . 0) "./boot/interaction.scm" . 648222))
     (if.true
       (call
         (touch.gloc.of dump-condition)
         (push.const . #t)
         (apply.gloc.of dump-condition "./boot/interaction.scm" . 649246))
       (push.cdr.iloc (2 . 0) "./boot/interaction.scm" . 650276)
       (apply.iloc+ (3 . 0) "./boot/interaction.scm" . 650270))
     (call
       (push.const . "--acc")
       (push.const . #f)
       (apply.iloc (0 . 0) "./boot/interaction.scm" . 651294))
     (if.true
       (call
         (cdr.iloc (2 . 0) "./boot/interaction.scm" . 652329)
         (if.pair?.ret.const . #t)
         (touch.gloc.of |bad-option`4676*|)
         (push.iloc.1 . 0)
         (apply.gloc.of |bad-option`4676*| "./boot/interaction.scm" . 652340))
       (call
         (touch.gloc.of |set-opt-acc`4676*|)
         (push.cadr.iloc (2 . 0) "./boot/interaction.scm" . 653355)
         (apply.gloc.of |set-opt-acc`4676*| "./boot/interaction.scm" . 653342))
       (push.cddr.iloc (2 . 0) "./boot/interaction.scm" . 654372)
       (apply.iloc+ (3 . 0) "./boot/interaction.scm" . 654366))
     (call
       (push.const . "--acc")
       (push.const . #t)
       (apply.iloc (0 . 0) "./boot/interaction.scm" . 655390))
     (push)
     (extend . 1)
     (iloc.0 . 0)
     (if.true
       (push.iloc.0 . 0)
       (push.const . "")
       (subr.gloc.of string=? 2 "./boot/interaction.scm" . 657450)
       (if.true
         (touch.gloc.of |bad-option`4676*|)
         (push.iloc 2 . 0)
         (apply.gloc.of |bad-option`4676*| "./boot/interaction.scm" . 658474))
       (call
         (touch.gloc.of |set-opt-acc`4676*|)
         (push.iloc.0 . 0)
         (apply.gloc.of |set-opt-acc`4676*| "./boot/interaction.scm" . 660522))
       (push.cdr.iloc (3 . 0) "./boot/interaction.scm" . 661552)
       (apply.iloc+ (4 . 0) "./boot/interaction.scm" . 661546))
     (call
       (push.const . "--disable-acc")
       (push.const . #f)
       (apply.iloc (1 . 0) "./boot/interaction.scm" . 662558))
     (if.true
       (call (push.const . #f) (apply.gloc.of auto-compile-cache "./boot/interaction.scm" . 663582))
       (push.cdr.iloc (3 . 0) "./boot/interaction.scm" . 664612)
       (apply.iloc+ (4 . 0) "./boot/interaction.scm" . 664606))
     (call
       (push.const . "--clean-acc")
       (push.const . #f)
       (apply.iloc (1 . 0) "./boot/interaction.scm" . 665630))
     (if.true
       (call
         (touch.gloc.of auto-compile-cache-clean)
         (apply.gloc.of auto-compile-cache-clean "./boot/interaction.scm" . 666654))
       (push.cdr.iloc (3 . 0) "./boot/interaction.scm" . 667684)
       (apply.iloc+ (4 . 0) "./boot/interaction.scm" . 667678))
     (call
       (push.const . "--sitelib")
       (push.const . #f)
       (apply.iloc (1 . 0) "./boot/interaction.scm" . 668702))
     (if.true
       (call
         (cdr.iloc (3 . 0) "./boot/interaction.scm" . 669737)
         (if.pair?.ret.const . #t)
         (touch.gloc.of |bad-option`4676*|)
         (push.iloc 2 . 0)
         (apply.gloc.of |bad-option`4676*| "./boot/interaction.scm" . 669748))
       (call
         (touch.gloc.of |add-opt-sitelib`4676*|)
         (push.cadr.iloc (3 . 0) "./boot/interaction.scm" . 670767)
         (apply.gloc.of |add-opt-sitelib`4676*| "./boot/interaction.scm" . 670750))
       (push.cddr.iloc (3 . 0) "./boot/interaction.scm" . 671780)
       (apply.iloc+ (4 . 0) "./boot/interaction.scm" . 671774))
     (call
       (push.const . "--sitelib")
       (push.const . #t)
       (apply.iloc (1 . 0) "./boot/interaction.scm" . 672798))
     (push)
     (extend . 1)
     (iloc.0 . 0)
     (if.true
       (push.iloc.0 . 0)
       (push.const . "")
       (subr.gloc.of string=? 2 "./boot/interaction.scm" . 674858)
       (if.true
         (touch.gloc.of |bad-option`4676*|)
         (push.iloc 3 . 0)
         (apply.gloc.of |bad-option`4676*| "./boot/interaction.scm" . 675882))
       (call
         (touch.gloc.of |add-opt-sitelib`4676*|)
         (push.iloc.0 . 0)
         (apply.gloc.of |add-opt-sitelib`4676*| "./boot/interaction.scm" . 677930))
       (push.cdr.iloc (4 . 0) "./boot/interaction.scm" . 678960)
       (apply.iloc+ (5 . 0) "./boot/interaction.scm" . 678954))
     (call
       (push.const . "--loadpath")
       (push.const . #f)
       (apply.iloc (2 . 0) "./boot/interaction.scm" . 679966))
     (if.true
       (call
         (cdr.iloc (4 . 0) "./boot/interaction.scm" . 681001)
         (if.pair?.ret.const . #t)
         (touch.gloc.of |bad-option`4676*|)
         (push.iloc 3 . 0)
         (apply.gloc.of |bad-option`4676*| "./boot/interaction.scm" . 681012))
       (call
         (touch.gloc.of |add-opt-loadpath`4676*|)
         (push.cadr.iloc (4 . 0) "./boot/interaction.scm" . 682032)
         (apply.gloc.of |add-opt-loadpath`4676*| "./boot/interaction.scm" . 682014))
       (push.cddr.iloc (4 . 0) "./boot/interaction.scm" . 683044)
       (apply.iloc+ (5 . 0) "./boot/interaction.scm" . 683038))
     (call
       (push.const . "--loadpath")
       (push.const . #t)
       (apply.iloc (2 . 0) "./boot/interaction.scm" . 684062))
     (push)
     (extend . 1)
     (iloc.0 . 0)
     (if.true
       (push.iloc.0 . 0)
       (push.const . "")
       (subr.gloc.of string=? 2 "./boot/interaction.scm" . 686122)
       (if.true
         (touch.gloc.of |bad-option`4676*|)
         (push.iloc 4 . 0)
         (apply.gloc.of |bad-option`4676*| "./boot/interaction.scm" . 687146))
       (call
         (touch.gloc.of |add-opt-loadpath`4676*|)
         (push.iloc.0 . 0)
         (apply.gloc.of |add-opt-loadpath`4676*| "./boot/interaction.scm" . 689194))
       (push.cdr.iloc (5 . 0) "./boot/interaction.scm" . 690224)
       (apply.iloc+ (6 . 0) "./boot/interaction.scm" . 690218))
     (call
       (push.const . "--")
       (push.const . #f)
       (apply.iloc (3 . 0) "./boot/interaction.scm" . 691230))
     (if.true
       (const . #t)
       (set.iloc (7 . 5) "./boot/interaction.scm" . 692254)
       (call
         (push.cdr.iloc (5 . 0) "./boot/interaction.scm" . 693291)
         (apply.iloc (7 . 0) "./boot/interaction.scm" . 693278))
       (iloc 7 . 4)
       (if.false.ret)
       (apply.iloc (7 . 1) "./boot/interaction.scm" . 694319))
     (push.iloc 4 . 0)
     (push.const . 0)
     (push.subr.gloc.of string-ref 2 "./boot/interaction.scm" . 695334)
     (push.const . #\-)
     (subr.gloc.of char=? 2 "./boot/interaction.scm" . 695326)
     (if.true
       (touch.gloc.of |bad-option`4676*|)
       (push.iloc 4 . 0)
       (apply.gloc.of |bad-option`4676*| "./boot/interaction.scm" . 696350))
     (const . #t)
     (set.iloc (7 . 5) "./boot/interaction.scm" . 698398)
     (call (push.iloc 5 . 0) (apply.iloc (7 . 0) "./boot/interaction.scm" . 699422))
     (iloc 7 . 4)
     (if.false.ret)
     (apply.iloc (7 . 1) "./boot/interaction.scm" . 700463))
   (push.cdr.iloc (1 . 8) "./boot/interaction.scm" . 574492)
   (apply.iloc+ (0 . 0) "./boot/interaction.scm" . 575502))
 (set.gloc.of run-scheme-session)
 (ret.const.unspec))

;
((subr.gloc.of make-core-hashtable 0 "./boot/libraries.scm" . 4126)
 (set.gloc.of immutable-primitives)
 (ret.const.unspec))
((const begin quote define set! lambda let letrec* if or and)
 (set.gloc.of coreform-primitives)
 (ret.const.unspec))
((close
   (2 0)
   (push.iloc.0 . 1)
   (call
     (touch.gloc.of make-import)
     (push.iloc.0 . 0)
     (apply.gloc.of make-import "./boot/libraries.scm" . 21576))
   (ret.cons "./boot/libraries.scm" . 21568))
 (set.gloc.of |.L1376|)
 (close
   (2 0 . setup-core-primitive-macros)
   (call (apply.gloc.of scheme-library-exports "./boot/libraries.scm" . 52241))
   (push)
   (call
     (touch.gloc.of generate-library-id)
     (push.iloc.0 . 0)
     (apply.gloc.of generate-library-id "./boot/libraries.scm" . 53265))
   (push)
   (call
     (push.gloc.of core-primitive-name)
     (push.iloc.0 . 1)
     (apply.gloc.of map "./boot/libraries.scm" . 54294))
   (push)
   (extend . 3)
   (call
     (push.gloc.of |.L1382|)
     (push.iloc.0 . 2)
     (push.iloc.1 . 1)
     (apply.gloc.of for-each "./boot/libraries.scm" . 55305))
   (subr.gloc.of system-environment 0)
   (push)
   (subr.gloc.of interaction-environment 0)
   (push)
   (push.iloc.0 . 2)
   (subr.gloc.of copy-environment-macros! 3 "./boot/libraries.scm" . 60425)
   (push.iloc.0 . 0)
   (push.iloc.0 . 1)
   (call
     (touch.gloc.of unify-import-bindings)
     (call
       (push.gloc.of |.L1387|)
       (push.iloc.0 . 2)
       (push.iloc.1 . 1)
       (apply.gloc.of map "./boot/libraries.scm" . 62509))
     (push)
     (push.iloc.0 . 0)
     (push.iloc.0 . 1)
     (push.const)
     (push.subr.gloc.of core-hashtable-ref 3 "./boot/libraries.scm" . 63533)
     (push.subr.gloc.of append 2 "./boot/libraries.scm" . 62501)
     (apply.gloc.of unify-import-bindings "./boot/libraries.scm" . 61476))
   (push)
   (ret.subr.gloc.of core-hashtable-set! "./boot/libraries.scm" . 61449))
 (set.gloc.of |setup-core-primitive-macros`4785*|)
 (close
   (2 0 . setup-intrinsic-macros)
   (call (apply.gloc.of scheme-library-exports "./boot/libraries.scm" . 26641))
   (push)
   (call
     (touch.gloc.of generate-library-id)
     (push.iloc.0 . 0)
     (apply.gloc.of generate-library-id "./boot/libraries.scm" . 27665))
   (push)
   (call
     (push.gloc.of core-primitive-name)
     (push.iloc.0 . 1)
     (apply.gloc.of map "./boot/libraries.scm" . 28694))
   (push)
   (extend . 3)
   (subr.gloc.of system-environment 0)
   (push)
   (subr.gloc.of interaction-environment 0)
   (push)
   (push.iloc.1 . 1)
   (subr.gloc.of copy-environment-macros! 3 "./boot/libraries.scm" . 29705)
   (subr.gloc.of system-environment 0)
   (push)
   (subr.gloc.of interaction-environment 0)
   (push)
   (push.iloc.0 . 2)
   (subr.gloc.of copy-environment-macros! 3 "./boot/libraries.scm" . 30729)
   (push.iloc.0 . 0)
   (push.iloc.0 . 1)
   (call
     (touch.gloc.of unify-import-bindings)
     (call
       (push.gloc.of |.L1383|)
       (push.iloc.0 . 2)
       (push.iloc.1 . 1)
       (apply.gloc.of map "./boot/libraries.scm" . 32813))
     (push)
     (push.iloc.0 . 0)
     (push.iloc.0 . 1)
     (push.const)
     (push.subr.gloc.of core-hashtable-ref 3 "./boot/libraries.scm" . 33837)
     (push.subr.gloc.of append 2 "./boot/libraries.scm" . 32805)
     (apply.gloc.of unify-import-bindings "./boot/libraries.scm" . 31780))
   (push)
   (ret.subr.gloc.of core-hashtable-set! "./boot/libraries.scm" . 31753))
 (set.gloc.of |setup-intrinsic-macros`4785*|)
 (close
   (2 0)
   (push.iloc.0 . 1)
   (call
     (touch.gloc.of make-import)
     (push.iloc.0 . 0)
     (apply.gloc.of make-import "./boot/libraries.scm" . 47176))
   (ret.cons "./boot/libraries.scm" . 47168))
 (set.gloc.of |.L1377|)
 (close
   (2 0 . setup-core-primitive-procs)
   (call (apply.gloc.of scheme-library-exports "./boot/libraries.scm" . 37905))
   (push)
   (call
     (touch.gloc.of generate-library-id)
     (push.iloc.0 . 0)
     (apply.gloc.of generate-library-id "./boot/libraries.scm" . 38929))
   (push)
   (call
     (push.gloc.of core-primitive-name)
     (push.iloc.0 . 1)
     (apply.gloc.of map "./boot/libraries.scm" . 39958))
   (push)
   (extend . 3)
   (call
     (push.gloc.of |.L1386|)
     (push.iloc.0 . 2)
     (push.iloc.1 . 1)
     (apply.gloc.of for-each "./boot/libraries.scm" . 40969))
   (subr.gloc.of system-environment 0)
   (push)
   (subr.gloc.of interaction-environment 0)
   (push)
   (push.iloc.0 . 2)
   (subr.gloc.of copy-environment-variables! 3 "./boot/libraries.scm" . 45065)
   (push.iloc.0 . 0)
   (push.iloc.0 . 1)
   (call
     (touch.gloc.of unify-import-bindings)
     (call
       (push.gloc.of |.L1377|)
       (push.iloc.0 . 2)
       (push.iloc.1 . 1)
       (apply.gloc.of map "./boot/libraries.scm" . 47149))
     (push)
     (push.iloc.0 . 0)
     (push.iloc.0 . 1)
     (push.const)
     (push.subr.gloc.of core-hashtable-ref 3 "./boot/libraries.scm" . 48173)
     (push.subr.gloc.of append 2 "./boot/libraries.scm" . 47141)
     (apply.gloc.of unify-import-bindings "./boot/libraries.scm" . 46116))
   (push)
   (ret.subr.gloc.of core-hashtable-set! "./boot/libraries.scm" . 46089))
 (set.gloc.of |setup-core-primitive-procs`4785*|)
 (close
   (2 0 . setup-intrinsic-procs)
   (subr.gloc.of system-environment 0)
   (push)
   (subr.gloc.of interaction-environment 0)
   (push)
   (push.iloc.0 . 1)
   (subr.gloc.of copy-environment-variables! 3 "./boot/libraries.scm" . 11271)
   (call (apply.gloc.of scheme-library-exports "./boot/libraries.scm" . 12305))
   (push)
   (call
     (touch.gloc.of generate-library-id)
     (push.iloc.0 . 0)
     (apply.gloc.of generate-library-id "./boot/libraries.scm" . 13329))
   (push)
   (call
     (push.gloc.of core-primitive-name)
     (push.iloc.0 . 1)
     (apply.gloc.of map "./boot/libraries.scm" . 14358))
   (push)
   (extend . 3)
   (call
     (push.gloc.of |.L1384|)
     (push.iloc.0 . 2)
     (push.iloc.1 . 1)
     (apply.gloc.of for-each "./boot/libraries.scm" . 15369))
   (subr.gloc.of system-environment 0)
   (push)
   (subr.gloc.of interaction-environment 0)
   (push)
   (push.iloc.0 . 2)
   (subr.gloc.of copy-environment-variables! 3 "./boot/libraries.scm" . 19465)
   (push.iloc.0 . 0)
   (push.iloc.0 . 1)
   (call
     (touch.gloc.of unify-import-bindings)
     (call
       (push.gloc.of |.L1376|)
       (push.iloc.0 . 2)
       (push.iloc.1 . 1)
       (apply.gloc.of map "./boot/libraries.scm" . 21549))
     (push)
     (push.iloc.0 . 0)
     (push.iloc.0 . 1)
     (push.const)
     (push.subr.gloc.of core-hashtable-ref 3 "./boot/libraries.scm" . 22573)
     (push.subr.gloc.of append 2 "./boot/libraries.scm" . 21541)
     (apply.gloc.of unify-import-bindings "./boot/libraries.scm" . 20516))
   (push)
   (ret.subr.gloc.of core-hashtable-set! "./boot/libraries.scm" . 20489))
 (set.gloc.of |setup-intrinsic-procs`4785*|)
 (close
   (2 0)
   (subr.gloc.of current-macro-environment 0)
   (push)
   (push.iloc.0 . 1)
   (push.const . #f)
   (push.subr.gloc.of core-hashtable-ref 3 "./boot/libraries.scm" . 56348)
   (extend . 1)
   (iloc.0 . 0)
   (if.true
     (subr.gloc.of current-macro-environment 0)
     (push)
     (push.iloc.1 . 0)
     (push.iloc.0 . 0)
     (ret.subr.gloc.of core-hashtable-set! "./boot/libraries.scm" . 58401))
   (ret.const.unspec))
 (set.gloc.of |.L1382|)
 (close
   (2 0)
   (push.iloc.0 . 1)
   (call
     (touch.gloc.of make-import)
     (push.iloc.0 . 0)
     (apply.gloc.of make-import "./boot/libraries.scm" . 32840))
   (ret.cons "./boot/libraries.scm" . 32832))
 (set.gloc.of |.L1383|)
 (close
   (2 0)
   (push.iloc.0 . 0)
   (push.iloc.0 . 1)
   (push.subr.gloc.of top-level-value 1 "./boot/libraries.scm" . 16429)
   (subr.gloc.of set-top-level-value! 2 "./boot/libraries.scm" . 16405)
   (push.gloc.of immutable-primitives)
   (push.iloc.0 . 0)
   (push.const . #t)
   (ret.subr.gloc.of core-hashtable-set! "./boot/libraries.scm" . 17429))
 (set.gloc.of |.L1384|)
 (close
   (2 0 . compound-exports)
   (call (apply.gloc.of scheme-library-exports "./boot/libraries.scm" . 67601))
   (push)
   (call
     (touch.gloc.of generate-library-id)
     (push.iloc.0 . 0)
     (apply.gloc.of generate-library-id "./boot/libraries.scm" . 67631))
   (push)
   (extend . 2)
   (push.iloc.0 . 0)
   (push.iloc.0 . 1)
   (push.iloc.0 . 0)
   (push.iloc.0 . 1)
   (push.const)
   (push.subr.gloc.of core-hashtable-ref 3 "./boot/libraries.scm" . 68652)
   (push.iloc.0 . 0)
   (call
     (touch.gloc.of generate-library-id)
     (push.iloc.1 . 1)
     (apply.gloc.of generate-library-id "./boot/libraries.scm" . 67667))
   (push)
   (push.const)
   (push.subr.gloc.of core-hashtable-ref 3 "./boot/libraries.scm" . 69676)
   (push.subr.gloc.of append 2 "./boot/libraries.scm" . 68644)
   (ret.subr.gloc.of core-hashtable-set! "./boot/libraries.scm" . 68617))
 (set.gloc.of |compound-exports`4785*|)
 (close
   (2 0)
   (push.iloc.0 . 0)
   (push.iloc.0 . 1)
   (push.subr.gloc.of top-level-value 1 "./boot/libraries.scm" . 42029)
   (subr.gloc.of set-top-level-value! 2 "./boot/libraries.scm" . 42005)
   (push.gloc.of immutable-primitives)
   (push.iloc.0 . 0)
   (push.const . #t)
   (ret.subr.gloc.of core-hashtable-set! "./boot/libraries.scm" . 43029))
 (set.gloc.of |.L1386|)
 (close
   (2 0)
   (push.iloc.0 . 1)
   (call
     (touch.gloc.of make-import)
     (push.iloc.0 . 0)
     (apply.gloc.of make-import "./boot/libraries.scm" . 62536))
   (ret.cons "./boot/libraries.scm" . 62528))
 (set.gloc.of |.L1387|)
 (call
   (touch.gloc.of |setup-intrinsic-macros`4785*|)
   (push.const core intrinsics)
   (push.const
     library
     define-library
     define
     define-syntax
     quote
     lambda
     if
     set!
     cond
     case
     and
     or
     let
     let*
     letrec
     letrec*
     let-values
     let*-values
     begin
     quasiquote
     unquote
     unquote-splicing
     let-syntax
     letrec-syntax
     syntax-rules
     identifier-syntax
     assert
     else
     =>
     ...
     _)
   (apply.gloc.of |setup-intrinsic-macros`4785*| "./boot/libraries.scm" . 71683))
 (call
   (touch.gloc.of |setup-intrinsic-procs`4785*|)
   (push.const core intrinsics)
   (push.const
     eq?
     eqv?
     equal?
     procedure?
     number?
     complex?
     real?
     rational?
     integer?
     real-valued?
     rational-valued?
     integer-valued?
     exact?
     inexact?
     inexact
     exact
     =
     <
     >
     <=
     >=
     zero?
     positive?
     negative?
     odd?
     even?
     finite?
     infinite?
     nan?
     max
     min
     +
     *
     -
     /
     abs
     div-and-mod
     div
     mod
     div0-and-mod0
     div0
     mod0
     gcd
     lcm
     numerator
     denominator
     floor
     ceiling
     truncate
     round
     rationalize
     exp
     log
     sin
     cos
     tan
     asin
     acos
     atan
     sqrt
     exact-integer-sqrt
     expt
     make-rectangular
     make-polar
     real-part
     imag-part
     magnitude
     angle
     number->string
     string->number
     not
     boolean?
     boolean=?
     pair?
     cons
     car
     cdr
     caar
     cadr
     cdar
     cddr
     caaar
     caadr
     cadar
     caddr
     cdaar
     cdadr
     cddar
     cdddr
     caaaar
     caaadr
     caadar
     caaddr
     cadaar
     cadadr
     caddar
     cadddr
     cdaaar
     cdaadr
     cdadar
     cdaddr
     cddaar
     cddadr
     cdddar
     cddddr
     null?
     list?
     list
     length
     append
     reverse
     list-tail
     list-ref
     map
     for-each
     symbol?
     symbol=?
     symbol->string
     string->symbol
     char?
     char->integer
     integer->char
     char=?
     char<?
     char>?
     char<=?
     char>=?
     string?
     make-string
     string
     string-length
     string-ref
     string=?
     string<?
     string>?
     string<=?
     string>=?
     substring
     string-append
     string->list
     list->string
     string-copy
     string-for-each
     vector?
     make-vector
     vector
     vector-length
     vector-ref
     vector-set!
     vector->list
     list->vector
     vector-fill!
     vector-map
     vector-for-each
     error
     assertion-violation
     apply
     call-with-current-continuation
     call/cc
     values
     call-with-values
     dynamic-wind)
   (apply.gloc.of |setup-intrinsic-procs`4785*| "./boot/libraries.scm" . 83971))
 (call
   (touch.gloc.of |setup-core-primitive-macros`4785*|)
   (push.const core primitives)
   (push.const do syntax syntax-case include include-ci)
   (apply.gloc.of |setup-core-primitive-macros`4785*| "./boot/libraries.scm" . 130051))
 (call
   (touch.gloc.of |setup-core-primitive-procs`4785*|)
   (push.const core primitives)
   (push.const
     environment
     eval
     flonum?
     real->flonum
     fl=?
     fl<?
     fl>?
     fl<=?
     fl>=?
     flinteger?
     flzero?
     flpositive?
     flnegative?
     flodd?
     fleven?
     flfinite?
     flinfinite?
     flnan?
     flmax
     flmin
     fl+
     fl*
     fl-
     fl/
     fldiv
     fldiv0
     flnumerator
     fldenominator
     flfloor
     flceiling
     fltruncate
     flround
     flexp
     flexpt
     fllog
     flsin
     flcos
     fltan
     flasin
     flacos
     flatan
     flabs
     flsqrt
     fixnum->flonum
     fixnum?
     fixnum-width
     least-fixnum
     greatest-fixnum
     fx=?
     fx<?
     fx>?
     fx<=?
     fx>=?
     fxzero?
     fxpositive?
     fxnegative?
     fxodd?
     fxeven?
     fxmax
     fxmin
     fx+
     fx*
     fx-
     fxdiv
     fxdiv0
     fxnot
     fxand
     fxior
     fxxor
     fxif
     fxbit-count
     fxlength
     fxfirst-bit-set
     fxbit-set?
     fxcopy-bit
     fxarithmetic-shift
     fxarithmetic-shift-left
     fxarithmetic-shift-right
     fxbit-field
     fxcopy-bit-field
     &no-infinities
     make-no-infinities-violation
     no-infinities-violation?
     &no-nans
     make-no-nans-violation
     no-nans-violation?
     bitwise-not
     bitwise-and
     bitwise-ior
     bitwise-xor
     bitwise-arithmetic-shift
     bitwise-first-bit-set
     bitwise-length
     bitwise-bit-count
     make-variable-transformer
     identifier?
     bound-identifier=?
     free-identifier=?
     datum->syntax
     syntax->datum
     generate-temporaries
     syntax-violation
     memq
     memv
     member
     assq
     assv
     assoc
     cons*
     list-head
     raise
     raise-continuable
     with-exception-handler
     record?
     record-rtd
     record-type-name
     record-type-parent
     record-type-uid
     record-type-generative?
     record-type-sealed?
     record-type-opaque?
     record-type-field-names
     record-field-mutable?
     make-record-type-descriptor
     record-type-descriptor?
     make-record-constructor-descriptor
     record-constructor
     record-predicate
     record-accessor
     record-mutator
     make-record-type
     record-type?
     record-type-rtd
     record-type-rcd
     condition
     simple-conditions
     condition?
     condition-predicate
     condition-accessor
     &condition
     &message
     make-message-condition
     message-condition?
     condition-message
     &warning
     make-warning
     warning?
     &serious
     make-serious-condition
     serious-condition?
     &error
     make-error
     error?
     &violation
     make-violation
     violation?
     &assertion
     make-assertion-violation
     assertion-violation?
     &irritants
     make-irritants-condition
     irritants-condition?
     condition-irritants
     &who
     make-who-condition
     who-condition?
     condition-who
     &non-continuable
     make-non-continuable-violation
     non-continuable-violation?
     &implementation-restriction
     make-implementation-restriction-violation
     implementation-restriction-violation?
     &lexical
     make-lexical-violation
     lexical-violation?
     &syntax
     make-syntax-violation
     syntax-violation?
     syntax-violation-form
     syntax-violation-subform
     &undefined
     make-undefined-violation
     undefined-violation?
     set-car!
     set-cdr!
     string-set!
     string-fill!
     quotient
     remainder
     modulo
     char-whitespace?
     display
     write
     newline
     read-char
     write-char
     call-with-port
     eof-object
     eof-object?
     standard-input-port
     standard-output-port
     standard-error-port
     current-input-port
     current-output-port
     current-error-port
     input-port?
     output-port?
     port?
     flush-output-port
     output-port-buffer-mode
     close-port
     native-transcoder-descriptor
     port-transcoder-descriptor
     extract-accumulated-bytevector
     get-accumulated-bytevector
     extract-accumulated-string
     get-accumulated-string
     open-port
     nonblock-byte-ready?
     lookahead-char
     get-char
     port-has-port-position?
     port-position
     port-has-set-port-position!?
     set-port-position!
     port-eof?
     get-u8
     lookahead-u8
     get-bytevector-n
     get-bytevector-n!
     get-bytevector-all
     get-bytevector-some
     get-string-n
     get-string-n!
     get-string-all
     get-line
     get-datum
     put-u8
     put-bytevector
     put-char
     put-string
     put-datum
     &i/o
     make-i/o-error
     i/o-error?
     &i/o-read
     make-i/o-read-error
     i/o-read-error?
     &i/o-write
     make-i/o-write-error
     i/o-write-error?
     &i/o-invalid-position
     make-i/o-invalid-position-error
     i/o-invalid-position-error?
     i/o-error-position
     &i/o-filename
     make-i/o-filename-error
     i/o-filename-error?
     i/o-error-filename
     &i/o-file-protection
     make-i/o-file-protection-error
     i/o-file-protection-error?
     &i/o-file-is-read-only
     make-i/o-file-is-read-only-error
     i/o-file-is-read-only-error?
     &i/o-file-already-exists
     make-i/o-file-already-exists-error
     i/o-file-already-exists-error?
     &i/o-file-does-not-exist
     make-i/o-file-does-not-exist-error
     i/o-file-does-not-exist-error?
     &i/o-port
     make-i/o-port-error
     i/o-port-error?
     i/o-error-port
     &i/o-decoding
     make-i/o-decoding-error
     i/o-decoding-error?
     &i/o-encoding
     make-i/o-encoding-error
     i/o-encoding-error?
     i/o-encoding-error-char
     file-exists?
     delete-file
     string-hash
     symbol-hash
     equal-hash
     command-line
     exit
     native-endianness
     bytevector?
     make-bytevector
     bytevector-length
     bytevector=?
     bytevector-fill!
     bytevector-copy!
     bytevector-copy
     bytevector-u8-ref
     bytevector-s8-ref
     bytevector-u8-set!
     bytevector-s8-set!
     bytevector->u8-list
     u8-list->bytevector
     bytevector-u16-ref
     bytevector-s16-ref
     bytevector-u16-native-ref
     bytevector-s16-native-ref
     bytevector-u16-set!
     bytevector-s16-set!
     bytevector-u16-native-set!
     bytevector-s16-native-set!
     bytevector-u32-ref
     bytevector-s32-ref
     bytevector-u32-native-ref
     bytevector-s32-native-ref
     bytevector-u32-set!
     bytevector-s32-set!
     bytevector-u32-native-set!
     bytevector-s32-native-set!
     bytevector-u64-ref
     bytevector-s64-ref
     bytevector-u64-native-ref
     bytevector-s64-native-ref
     bytevector-u64-set!
     bytevector-s64-set!
     bytevector-u64-native-set!
     bytevector-s64-native-set!
     bytevector-ieee-single-ref
     bytevector-ieee-single-native-ref
     bytevector-ieee-single-set!
     bytevector-ieee-single-native-set!
     bytevector-ieee-double-ref
     bytevector-ieee-double-native-ref
     bytevector-ieee-double-set!
     bytevector-ieee-double-native-set!
     string->utf8
     utf8->string
     put-byte
     make-string-output-port
     make-string-input-port
     make-transcoded-port
     make-temporary-file-port
     port-device-subtype
     core-eval
     command-line-shift
     unspecified
     unspecified?
     generate-temporary-symbol
     circular-list?
     cyclic-object?
     list-transpose
     list-transpose+
     list-transpose*
     list-copy
     vector-copy
     make-parameter
     gensym
     format
     pretty-print
     pretty-print-line-length
     pretty-print-initial-indent
     pretty-print-maximum-lines
     pretty-print-unwrap-syntax
     peek-char
     read
     read-with-shared-structure
     write-with-shared-structure
     tuple
     tuple?
     make-tuple
     tuple-ref
     tuple-set!
     tuple-length
     tuple-index
     tuple->list
     make-weak-mapping
     weak-mapping?
     weak-mapping-key
     weak-mapping-value
     make-core-hashtable
     core-hashtable?
     make-shared-core-hashtable
     make-weak-core-hashtable
     weak-core-hashtable?
     make-weak-shared-core-hashtable
     core-hashtable-contains?
     core-hashtable-ref
     core-hashtable-set!
     core-hashtable-delete!
     core-hashtable-clear!
     core-hashtable->alist
     core-hashtable-size
     core-hashtable-copy
     core-hashtable-mutable?
     core-hashtable-equivalence-function
     core-hashtable-hash-function
     usleep
     scheme-error
     architecture-feature
     bytevector-c-short-ref
     bytevector-c-unsigned-short-ref
     bytevector-c-short-set!
     bytevector-c-int-ref
     bytevector-c-unsigned-int-ref
     bytevector-c-int-set!
     bytevector-c-long-ref
     bytevector-c-unsigned-long-ref
     bytevector-c-long-set!
     bytevector-c-long-long-ref
     bytevector-c-unsigned-long-long-ref
     bytevector-c-long-long-set!
     bytevector-c-void*-ref
     bytevector-c-void*-set!
     bytevector-c-int8-ref
     bytevector-c-int16-ref
     bytevector-c-int32-ref
     bytevector-c-int64-ref
     bytevector-c-uint8-ref
     bytevector-c-uint16-ref
     bytevector-c-uint32-ref
     bytevector-c-uint64-ref
     bytevector-c-float-ref
     bytevector-c-double-ref
     bytevector-c-int8-set!
     bytevector-c-int16-set!
     bytevector-c-int32-set!
     bytevector-c-int64-set!
     bytevector-c-float-set!
     bytevector-c-double-set!
     string->utf8/nul
     bytevector-c-strlen
     collect
     collect-notify
     collect-stack-notify
     collect-trip-bytes
     display-heap-statistics
     display-object-statistics
     backtrace
     expansion-backtrace
     backtrace-line-length
     display-backtrace
     warning-level
     restricted-print-line-length
     record-print-nesting-limit
     macro-expand
     compile
     compile-coreform
     closure-code
     current-environment
     current-macro-environment
     current-variable-environment
     current-dynamic-environment
     system-environment
     interaction-environment
     make-environment
     copy-environment-variables!
     copy-environment-macros!
     top-level-bound?
     top-level-value
     set-top-level-value!
     core-read
     current-source-comments
     current-after-expansion-hook
     string-contains
     symbol-contains
     subr?
     make-bytevector-mapping
     bytevector-mapping?
     scheme-library-exports
     scheme-library-paths
     scheme-load-paths
     scheme-load-verbose
     add-load-path
     add-library-path
     library-extensions
     auto-compile-verbose
     auto-compile-cache
     directory-list
     current-directory
     create-directory
     home-directory
     decode-flonum
     load
     system-share-path
     system-extension-path
     lookup-process-environment
     process-environment->alist
     set-current-input-port!
     set-current-output-port!
     set-current-error-port!
     open-builtin-data-input-port
     current-library-infix
     current-library-suffix
     current-primitive-prefix
     current-rename-delimiter
     string->uninterned-symbol
     uninterned-symbol?
     uninterned-symbol-prefix
     uninterned-symbol-suffix
     socket?
     make-socket
     socket-shutdown
     socket-close
     socket->port
     socket-port
     socket-send
     socket-recv
     socket-accept
     shutdown-output-port
     port-closed?
     getenv
     gethostname
     system
     process
     process-spawn
     process-shell-command
     process-wait
     current-exception-printer
     make-shared-queue
     shared-queue?
     shared-queue-shutdown
     shared-queue-push!
     shared-queue-pop!
     make-shared-bag
     shared-bag?
     shared-bag-put!
     shared-bag-get!
     serializable?
     timeout-object?
     shutdown-object?
     spawn
     spawn-timeout
     spawn-heap-limit
     display-thread-status
     on-primordial-thread?
     local-heap-object?
     make-uuid
     time-usage
     microsecond
     microsecond->utc
     microsecond->string
     decode-microsecond
     encode-microsecond
     file-size-in-bytes
     file-regular?
     file-directory?
     file-symbolic-link?
     file-readable?
     file-writable?
     file-executable?
     file-stat-ctime
     file-stat-mtime
     file-stat-atime
     create-symbolic-link
     create-hard-link
     rename-file
     change-file-mode
     make-cmwc-random-state
     cmwc-random-u32
     cmwc-random-real
     drop-last-cdr
     drop-last-pair
     last-pair
     last-cdr
     count-pair
     last-n-pair
     drop-last-n-pair
     feature-identifies
     fulfill-feature-requirements?
     continuation-to-exit)
   (apply.gloc.of |setup-core-primitive-procs`4785*| "./boot/libraries.scm" . 137219))
 (touch.gloc.of |compound-exports`4785*|)
 (push.const core primitives)
 (push.const core intrinsics)
 (apply.gloc.of |compound-exports`4785*| "./boot/libraries.scm" . 589827))
((gloc.of assertion-violation) (set.gloc.of |.@assertion-violation|) (ret.const.unspec))
((gloc.of undefined-violation) (set.gloc.of |.@undefined-violation|) (ret.const.unspec))
((gloc.of lexical-violation) (set.gloc.of |.@lexical-violation|) (ret.const.unspec))
((gloc.of error) (set.gloc.of |.@error|) (ret.const.unspec))
((gloc.of implementation-restriction-violation)
 (set.gloc.of |.@implementation-restriction-violation|)
 (ret.const.unspec))
((gloc.of raise-i/o-read-error) (set.gloc.of |.@raise-i/o-read-error|) (ret.const.unspec))
((gloc.of raise-i/o-write-error) (set.gloc.of |.@raise-i/o-write-error|) (ret.const.unspec))
((gloc.of raise-i/o-file-protection-error)
 (set.gloc.of |.@raise-i/o-file-protection-error|)
 (ret.const.unspec))
((gloc.of raise-i/o-file-is-read-only-error)
 (set.gloc.of |.@raise-i/o-file-is-read-only-error|)
 (ret.const.unspec))
((gloc.of raise-i/o-file-already-exists-error)
 (set.gloc.of |.@raise-i/o-file-already-exists-error|)
 (ret.const.unspec))
((gloc.of raise-i/o-file-does-not-exist-error)
 (set.gloc.of |.@raise-i/o-file-does-not-exist-error|)
 (ret.const.unspec))
((gloc.of raise-i/o-decoding-error) (set.gloc.of |.@raise-i/o-decoding-error|) (ret.const.unspec))
((gloc.of raise-i/o-encoding-error) (set.gloc.of |.@raise-i/o-encoding-error|) (ret.const.unspec))
((gloc.of raise-i/o-invalid-position-error)
 (set.gloc.of |.@raise-i/o-invalid-position-error|)
 (ret.const.unspec))
((gloc.of raise-i/o-filename-error) (set.gloc.of |.@raise-i/o-filename-error|) (ret.const.unspec))
((gloc.of raise-i/o-error) (set.gloc.of |.@raise-i/o-error|) (ret.const.unspec))
((gloc.of perform-dynamic-wind) (set.gloc.of |.@perform-dynamic-wind|) (ret.const.unspec))
((gloc.of start-scheme-session) (set.gloc.of |.@start-scheme-session|) (ret.const.unspec))
((gloc.of apply-scheme-proc-assistant)
 (set.gloc.of |.@apply-scheme-proc-assistant|)
 (ret.const.unspec))
((gloc.of pretty-print) (set.gloc.of |.@pretty-print|) (ret.const.unspec))
((gloc.of nongenerative-record-types)
 (set.gloc.of |.@nongenerative-record-types|)
 (ret.const.unspec))
((close
   (1 0)
   (push.gloc.of immutable-primitives)
   (push.iloc.0 . 0)
   (push.const . #t)
   (ret.subr.gloc.of core-hashtable-set! "./boot/libraries.scm" . 624665))
 (set.gloc.of |.L1400|)
 (push.const
   |.set-top-level-macro!|
   |.require-scheme-library|
   |.intern-scheme-library|
   |.unintern-scheme-library|
   |.vars|
   |.syntax-dispatch|
   |.flatten-syntax|
   |.transformer-thunk|
   |.syntax/i0n|
   |.syntax/i1n|
   |.syntax/i2n|
   |.syntax/i3n|
   |.syntax/c0n|
   |.syntax/c1n|
   |.syntax/c2n|
   |.syntax/c3n|
   |.syntax/i0e|
   |.syntax/i1e|
   |.syntax/i2e|
   |.syntax/i3e|
   |.syntax/c0e|
   |.syntax/c1e|
   |.syntax/c2e|
   |.syntax/c3e|)
 (extend . 1)
 (call
   (push.gloc.of |.L1400|)
   (push.iloc.0 . 0)
   (apply.gloc.of for-each "./boot/libraries.scm" . 624643))
 (subr.gloc.of system-environment 0)
 (push)
 (subr.gloc.of interaction-environment 0)
 (push)
 (push.iloc.0 . 0)
 (ret.subr.gloc.of copy-environment-variables! "./boot/libraries.scm" . 625667))
((subr.gloc.of system-environment 0)
 (push)
 (subr.gloc.of interaction-environment 0)
 (push)
 (push.const import)
 (ret.subr.gloc.of copy-environment-macros! "./boot/libraries.scm" . 628737))
((push.gloc.of immutable-primitives)
 (subr.gloc.of core-hashtable-copy 1 "./boot/libraries.scm" . 629788)
 (touch.gloc.of immutable-primitives)
 (set.gloc.of immutable-primitives "./boot/libraries.scm" . 629761)
 (ret.const.unspec))

;
