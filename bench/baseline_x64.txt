  .section  __TEXT,__text,regular,pure_instructions
  .macosx_version_min 10, 15
  .intel_syntax noprefix
  .globl  "_bc5d141f-c6b2-4f05-84e0-88d4433fbd72" ## -- Begin function bc5d141f-c6b2-4f05-84e0-88d4433fbd72
  .p2align  4, 0x90
"_bc5d141f-c6b2-4f05-84e0-88d4433fbd72": ## @bc5d141f-c6b2-4f05-84e0-88d4433fbd72
  .cfi_startproc
## %bb.0:                               ## %entry
  push  rbp
  .cfi_def_cfa_offset 16
  push  r15
  .cfi_def_cfa_offset 24
  push  r14
  .cfi_def_cfa_offset 32
  push  r13
  .cfi_def_cfa_offset 40
  push  r12
  .cfi_def_cfa_offset 48
  push  rbx
  .cfi_def_cfa_offset 56
  push  rax
  .cfi_def_cfa_offset 64
  .cfi_offset rbx, -56
  .cfi_offset r12, -48
  .cfi_offset r13, -40
  .cfi_offset r14, -32
  .cfi_offset r15, -24
  .cfi_offset rbp, -16
  mov r12, rdi
  movabs  r14, 4471512832
  lea r13, [r14 + 187184]
  lea rbp, [r14 + 187136]
  lea r15, [r14 + 172544]
  jmp LBB0_3
  .p2align  4, 0x90
LBB0_1:                                 ## %fallback
                                        ##   in Loop: Header=BB0_3 Depth=1
  mov rdi, r12
  mov rsi, r15
  call  _c_push_nadd_iloc
  test  rax, rax
  jne LBB0_14
LBB0_2:                                 ## %continue1
                                        ##   in Loop: Header=BB0_3 Depth=1
  mov rdi, r12
  mov rsi, r14
  call  _c_prepare_apply
LBB0_3:                                 ## %tailrecurse
                                        ## =>This Inner Loop Header: Depth=1
  mov rax, qword ptr [r12 + 48]
  sub rax, -128
  cmp rax, qword ptr [r12 + 56]
  jb  LBB0_5
## %bb.4:                               ## %stack_overflow
                                        ##   in Loop: Header=BB0_3 Depth=1
  mov esi, 128
  mov rdi, r12
  call  _c_collect_stack
LBB0_5:                                 ## %stack_ok
                                        ##   in Loop: Header=BB0_3 Depth=1
  mov rax, qword ptr [r12 + 24]
  mov rcx, qword ptr [rax - 8]
  add rax, -8
  shl rcx, 3
  sub rax, rcx
  mov rsi, qword ptr [rax]
  test  sil, 1
  jne LBB0_8
## %bb.6:                               ## %nonfixnum_true
                                        ##   in Loop: Header=BB0_3 Depth=1
  mov qword ptr [r12], r13
  mov edx, 5
  mov rdi, r12
  call  _c_lt_n_iloc
  test  rax, rax
  jne LBB0_14
## %bb.7:                               ## %continue
                                        ##   in Loop: Header=BB0_3 Depth=1
  cmp qword ptr [r12 + 64], 34
  je  LBB0_10
  jmp LBB0_16
  .p2align  4, 0x90
LBB0_8:                                 ## %nonfixnum_false
                                        ##   in Loop: Header=BB0_3 Depth=1
  cmp rsi, 4
  jle LBB0_15
## %bb.9:                               ## %continue.thread
                                        ##   in Loop: Header=BB0_3 Depth=1
  mov qword ptr [r12 + 64], 34
LBB0_10:                                ## %f9h_true
                                        ##   in Loop: Header=BB0_3 Depth=1
  mov rbx, qword ptr [r12 + 48]
  mov rdi, r12
  mov rsi, rbx
  call  _prepare_call
  mov qword ptr [rbx], rbp
  lea rax, [rip + "_fc1ab09d-42bc-4d78-8263-647db765534b"]
  mov qword ptr [rbx + 32], rax
  mov rax, qword ptr [r12 + 24]
  mov rcx, qword ptr [rax - 8]
  add rax, -8
  shl rcx, 3
  sub rax, rcx
  mov rax, qword ptr [rax]
  test  al, 1
  je  LBB0_1
## %bb.11:                              ## %fixnum_true
                                        ##   in Loop: Header=BB0_3 Depth=1
  add rax, -2
  jo  LBB0_1
## %bb.12:                              ## %valid_true
                                        ##   in Loop: Header=BB0_3 Depth=1
  mov rcx, qword ptr [r12 + 48]
  mov qword ptr [rcx], rax
  add rcx, 8
  mov qword ptr [r12 + 48], rcx
  jmp LBB0_2
LBB0_14:
  mov eax, 3
  jmp LBB0_17
LBB0_15:                                ## %continue.thread5
  mov qword ptr [r12 + 64], 18
LBB0_16:                                ## %f9h_false
  mov rax, qword ptr [r12 + 24]
  mov rcx, qword ptr [rax - 8]
  shl rcx, 3
  neg rcx
  mov rax, qword ptr [rax + rcx - 8]
  mov qword ptr [r12 + 64], rax
  cmp rax, 66
  mov ecx, 7
  mov eax, 1
  cmove rax, rcx
LBB0_17:                                ## %fallback_fail
  add rsp, 8
  pop rbx
  pop r12
  pop r13
  pop r14
  pop r15
  pop rbp
  ret
  .cfi_endproc
                                        ## -- End function
  .globl  _prepare_call           ## -- Begin function prepare_call
  .weak_definition  _prepare_call
  .p2align  4, 0x90
_prepare_call:                          ## @prepare_call
## %bb.0:                               ## %entry
  mov qword ptr [rsi + 8], 82
  mov rax, qword ptr [rdi + 16]
  mov qword ptr [rsi + 16], rax
  mov rax, qword ptr [rdi + 24]
  mov qword ptr [rsi + 24], rax
  mov rax, qword ptr [rdi + 32]
  mov qword ptr [rsi + 40], rax
  lea rax, [rsi + 40]
  add rsi, 48
  mov qword ptr [rdi + 48], rsi
  mov qword ptr [rdi + 16], rsi
  mov qword ptr [rdi + 32], rax
  ret
                                        ## -- End function
  .globl  "_fc1ab09d-42bc-4d78-8263-647db765534b" ## -- Begin function fc1ab09d-42bc-4d78-8263-647db765534b
  .p2align  4, 0x90
"_fc1ab09d-42bc-4d78-8263-647db765534b": ## @fc1ab09d-42bc-4d78-8263-647db765534b
## %bb.0:                               ## %entry
  push  r15
  push  r14
  push  rbx
  mov r15, rdi
  movabs  r14, 4471512832
  mov rbx, qword ptr [rdi + 48]
  mov rax, qword ptr [rdi + 64]
  mov qword ptr [rbx], rax
  lea rsi, [rbx + 8]
  mov qword ptr [rdi + 48], rsi
  call  _prepare_call
  lea rax, [r14 + 187104]
  mov qword ptr [rbx + 8], rax
  lea rax, [rip + "_8fc46283-2072-44c3-913a-f757c1b3f8f9"]
  mov qword ptr [rbx + 40], rax
  mov rax, qword ptr [r15 + 24]
  mov rcx, qword ptr [rax - 8]
  add rax, -8
  shl rcx, 3
  sub rax, rcx
  mov rax, qword ptr [rax]
  test  al, 1
  je  LBB2_2
## %bb.1:                               ## %fixnum_true
  add rax, -4
  jno LBB2_4
LBB2_2:                                 ## %fallback
  lea rsi, [r14 + 187792]
  mov rdi, r15
  call  _c_push_nadd_iloc
  test  rax, rax
  je  LBB2_5
## %bb.3:                               ## %fallback_fail
  mov eax, 3
  pop rbx
  pop r14
  pop r15
  ret
LBB2_4:                                 ## %valid_true
  mov rcx, qword ptr [r15 + 48]
  mov qword ptr [rcx], rax
  add rcx, 8
  mov qword ptr [r15 + 48], rcx
LBB2_5:                                 ## %continue
  mov rdi, r15
  mov rsi, r14
  call  _c_prepare_apply
  mov rdi, r15
  pop rbx
  pop r14
  pop r15
  jmp "_bc5d141f-c6b2-4f05-84e0-88d4433fbd72" ## TAILCALL
                                        ## -- End function
  .globl  "_8fc46283-2072-44c3-913a-f757c1b3f8f9" ## -- Begin function 8fc46283-2072-44c3-913a-f757c1b3f8f9
  .p2align  4, 0x90
"_8fc46283-2072-44c3-913a-f757c1b3f8f9": ## @"8fc46283-2072-44c3-913a-f757c1b3f8f9"
## %bb.0:                               ## %entry
  push  rbx
  mov rbx, rdi
  mov rax, qword ptr [rdi + 48]
  mov rcx, qword ptr [rdi + 64]
  mov qword ptr [rax], rcx
  add rax, 8
  mov qword ptr [rdi + 48], rax
  mov rdx, qword ptr [rdi + 16]
  movabs  rax, 4437581360
  lea rcx, [rax + 34118560]
  mov qword ptr [rdi], rcx
  mov esi, 2
  call  rax
  mov qword ptr [rbx + 64], rax
  xor ecx, ecx
  cmp rax, 66
  sete  cl
  lea rax, [rcx + rcx + 1]
  pop rbx
  ret
                                        ## -- End function

.subsections_via_symbols
